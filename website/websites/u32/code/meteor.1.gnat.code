<span class="hl slc">-- The Computer Language Benchmarks Game</span>
<span class="hl slc">-- http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">--</span>
<span class="hl slc">-- Translation of the C++ version of Ben St. John</span>
<span class="hl slc">-- by Francois Fabien (novembre 2011)</span>
<span class="hl slc">--  + addition of the incomplete search of solutions.</span>
<span class="hl slc">--</span>
<span class="hl slc">-- Expected build command:</span>
<span class="hl slc">-- gnatchop -w meteor.gnat</span>
<span class="hl slc">-- gnatmake  -O3 -gnatp -gnatn -f meteor.adb -o meteor.gnat_run -largs -s</span>
<span class="hl slc">------------------------------------------------------------------------------</span>
<span class="hl kwa">with</span> Ada<span class="hl opt">.</span>Unchecked_Conversion<span class="hl opt">;</span>
<span class="hl kwa">with</span> Interfaces<span class="hl opt">;</span> <span class="hl kwa">use</span> Interfaces<span class="hl opt">;</span>

<span class="hl kwa">package</span> Meteors <span class="hl kwa">is</span>

   N_COL <span class="hl opt">:</span> <span class="hl kwa">constant</span> <span class="hl opt">:=</span> <span class="hl num">5</span><span class="hl opt">;</span>
   N_ROW <span class="hl opt">:</span> <span class="hl kwa">constant</span> <span class="hl opt">:=</span> <span class="hl num">10</span><span class="hl opt">;</span>

   N_ELEM <span class="hl opt">:</span> <span class="hl kwa">constant</span> <span class="hl opt">:=</span> <span class="hl num">5</span><span class="hl opt">;</span>
   N_PIECE_TYPE <span class="hl opt">:</span> <span class="hl kwa">constant</span> <span class="hl opt">:=</span> <span class="hl num">10</span><span class="hl opt">;</span>
   <span class="hl kwa">type</span> Ext_Piecenr <span class="hl kwa">is range</span> <span class="hl num">0</span> <span class="hl opt">..</span> N_PIECE_TYPE<span class="hl opt">;</span>
   <span class="hl kwa">for</span> Ext_Piecenr<span class="hl kwd">'Size</span> <span class="hl kwa">use</span> <span class="hl num">8</span><span class="hl opt">;</span>

   No_Piece <span class="hl opt">:</span> <span class="hl kwa">constant</span> Ext_Piecenr <span class="hl opt">:=</span> N_PIECE_TYPE<span class="hl opt">;</span>

   <span class="hl kwa">subtype</span> Piecenr <span class="hl kwa">is</span> Ext_Piecenr <span class="hl kwa">range</span> <span class="hl num">0</span> <span class="hl opt">..</span> N_PIECE_TYPE <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">;</span>

   N_ORIENT <span class="hl opt">:</span> <span class="hl kwa">constant</span> <span class="hl opt">:=</span> <span class="hl num">12</span><span class="hl opt">;</span>
   <span class="hl kwa">type</span> ExtOrientation <span class="hl kwa">is range</span> <span class="hl opt">-</span><span class="hl num">1</span> <span class="hl opt">..</span> N_ORIENT <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">;</span>
   <span class="hl kwa">for</span> ExtOrientation<span class="hl kwd">'Size</span> <span class="hl kwa">use</span> <span class="hl num">8</span><span class="hl opt">;</span>
   <span class="hl kwa">subtype</span> Orientation <span class="hl kwa">is</span> ExtOrientation <span class="hl kwa">range</span> <span class="hl num">0</span> <span class="hl opt">..</span> N_ORIENT <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">;</span>

   <span class="hl kwa">type</span> Trow <span class="hl kwa">is range</span> <span class="hl num">0</span> <span class="hl opt">..</span> N_ROW <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">;</span>
   <span class="hl kwa">for</span> Trow<span class="hl kwd">'Size</span> <span class="hl kwa">use</span> <span class="hl num">8</span><span class="hl opt">;</span>
   <span class="hl kwa">type</span> Tcol <span class="hl kwa">is range</span> <span class="hl num">0</span> <span class="hl opt">..</span> N_COL <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">;</span>
   <span class="hl kwa">for</span> Tcol<span class="hl kwd">'Size</span> <span class="hl kwa">use</span> <span class="hl num">8</span><span class="hl opt">;</span>

   <span class="hl kwa">type</span> Parity <span class="hl kwa">is</span> <span class="hl opt">(</span>Even<span class="hl opt">,</span> Odd<span class="hl opt">);</span>
   <span class="hl kwa">for</span> Parity<span class="hl kwd">'Size</span> <span class="hl kwa">use</span> <span class="hl num">8</span><span class="hl opt">;</span>
   <span class="hl kwa">for</span> Parity <span class="hl kwa">use</span> <span class="hl opt">(</span>Even <span class="hl opt">=&gt;</span> <span class="hl num">0</span><span class="hl opt">,</span> Odd <span class="hl opt">=&gt;</span> <span class="hl num">1</span><span class="hl opt">);</span>

   <span class="hl slc">-- warning =&gt; First row is Trow = 0 and is even</span>
   <span class="hl kwa">function</span> Row_Parity <span class="hl opt">(</span>R <span class="hl opt">:</span> Trow<span class="hl opt">)</span> <span class="hl kwa">return</span> Parity<span class="hl opt">;</span>
   <span class="hl kwa">pragma</span> Inline_Always<span class="hl opt">(</span>Row_Parity<span class="hl opt">);</span>
   <span class="hl kwa">function</span> Parity_to_Row <span class="hl kwa">is new</span> Ada<span class="hl opt">.</span>Unchecked_Conversion <span class="hl opt">(</span>Parity<span class="hl opt">,</span> Trow<span class="hl opt">);</span>


   <span class="hl kwa">type</span> TElement <span class="hl kwa">is range</span> <span class="hl num">0</span> <span class="hl opt">..</span> N_ELEM <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">;</span>
   <span class="hl kwa">for</span> TElement<span class="hl kwd">'Size</span> <span class="hl kwa">use</span> <span class="hl num">8</span><span class="hl opt">;</span>

   <span class="hl kwa">type</span> Dimensions <span class="hl kwa">is</span> <span class="hl opt">(</span>dimx<span class="hl opt">,</span> dimy<span class="hl opt">);</span>
   <span class="hl slc">-- Coordinates of the points of a given element</span>
   <span class="hl kwa">type</span> TPts <span class="hl kwa">is array</span> <span class="hl opt">(</span>TElement<span class="hl opt">,</span> Dimensions<span class="hl opt">)</span> <span class="hl kwa">of</span> Integer_8<span class="hl opt">;</span>

   <span class="hl kwa">type</span> BitVecs <span class="hl kwa">is new</span> Unsigned_32<span class="hl opt">;</span>

   <span class="hl kwa">function</span> toBitVector <span class="hl opt">(</span>pts <span class="hl opt">:</span> TPts<span class="hl opt">)</span> <span class="hl kwa">return</span> BitVecs<span class="hl opt">;</span>
   <span class="hl kwa">pragma</span> Inline<span class="hl opt">(</span>ToBitVector<span class="hl opt">);</span>
   <span class="hl kwa">function</span> setCoordList <span class="hl opt">(</span>vec <span class="hl opt">:</span> <span class="hl kwa">in</span> BitVecs<span class="hl opt">)</span> <span class="hl kwa">return</span> TPts<span class="hl opt">;</span>


   <span class="hl kwa">function</span> Get_First_One
     <span class="hl opt">(</span>V        <span class="hl opt">:</span> BitVecs<span class="hl opt">;</span>
      Startpos <span class="hl opt">:</span> <span class="hl kwb">Natural</span> <span class="hl opt">:=</span> <span class="hl num">0</span><span class="hl opt">)</span>
      <span class="hl kwa">return</span>     <span class="hl kwb">Natural</span><span class="hl opt">;</span>
   <span class="hl kwa">pragma</span> Inline<span class="hl opt">(</span>Get_First_One<span class="hl opt">);</span>

   S_FirstOne <span class="hl opt">:</span> <span class="hl kwa">constant array</span> <span class="hl opt">(</span><span class="hl num">0</span> <span class="hl opt">..</span> <span class="hl num">31</span><span class="hl opt">)</span> <span class="hl kwa">of</span> <span class="hl kwb">Natural</span> <span class="hl opt">:= (</span>
   <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span>   <span class="hl num">2</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span>   <span class="hl num">3</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span>   <span class="hl num">2</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span>
   <span class="hl num">4</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span>   <span class="hl num">2</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span>   <span class="hl num">3</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span>   <span class="hl num">2</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">);</span>
<span class="hl kwa">end</span> Meteors<span class="hl opt">;</span>
<span class="hl slc">------------------------------------------------------------------------------</span>

<span class="hl kwa">package body</span> Meteors <span class="hl kwa">is</span>

   <span class="hl kwa">function</span> Row_Parity <span class="hl opt">(</span>R <span class="hl opt">:</span> Trow<span class="hl opt">)</span> <span class="hl kwa">return</span> Parity <span class="hl kwa">is</span>
      <span class="hl kwa">function</span> Unsigned_To_Parity <span class="hl kwa">is new</span> Ada<span class="hl opt">.</span>Unchecked_Conversion <span class="hl opt">(</span>
         Unsigned_8<span class="hl opt">,</span>
         Parity<span class="hl opt">);</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">return</span> Unsigned_To_Parity <span class="hl opt">(</span>Unsigned_8 <span class="hl opt">(</span>R<span class="hl opt">)</span> <span class="hl kwa">and</span> <span class="hl num">1</span><span class="hl opt">);</span>
   <span class="hl kwa">end</span> Row_Parity<span class="hl opt">;</span>

   <span class="hl kwa">function</span> toBitVector <span class="hl opt">(</span>pts <span class="hl opt">:</span> TPts<span class="hl opt">)</span> <span class="hl kwa">return</span> BitVecs <span class="hl kwa">is</span>
      Result <span class="hl opt">:</span> BitVecs <span class="hl opt">:=</span> <span class="hl num">0</span><span class="hl opt">;</span>
      x<span class="hl opt">,</span> y   <span class="hl opt">:</span> Integer_8<span class="hl opt">;</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">for</span> Element <span class="hl kwa">in</span> TElement<span class="hl kwd">'Range</span> <span class="hl kwa">loop</span>
         x      <span class="hl opt">:=</span> pts <span class="hl opt">(</span>Element<span class="hl opt">,</span> dimx<span class="hl opt">);</span>
         y      <span class="hl opt">:=</span> pts <span class="hl opt">(</span>Element<span class="hl opt">,</span> dimy<span class="hl opt">);</span>
         Result <span class="hl opt">:=</span> Result <span class="hl kwa">or</span> Shift_Left <span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">,</span> <span class="hl kwb">Natural</span> <span class="hl opt">(</span>y <span class="hl opt">*</span> N_COL <span class="hl opt">+</span> x<span class="hl opt">));</span>
      <span class="hl kwa">end loop</span><span class="hl opt">;</span>
      <span class="hl kwa">return</span> Result<span class="hl opt">;</span>
   <span class="hl kwa">end</span> toBitVector<span class="hl opt">;</span>

   <span class="hl kwa">function</span> setCoordList <span class="hl opt">(</span>vec <span class="hl opt">:</span> <span class="hl kwa">in</span> BitVecs<span class="hl opt">)</span> <span class="hl kwa">return</span> TPts <span class="hl kwa">is</span>
      iPt  <span class="hl opt">:</span> TElement <span class="hl opt">:=</span> <span class="hl num">0</span><span class="hl opt">;</span>
      Mask <span class="hl opt">:</span> BitVecs  <span class="hl opt">:=</span> <span class="hl num">1</span><span class="hl opt">;</span>
      Pts  <span class="hl opt">:</span> TPts<span class="hl opt">;</span>

   <span class="hl kwa">begin</span>

      Outer <span class="hl opt">:</span> <span class="hl kwa">for</span> y <span class="hl kwa">in</span> Trow<span class="hl kwd">'Range</span> <span class="hl kwa">loop</span>
         <span class="hl kwa">for</span> x <span class="hl kwa">in</span> Tcol<span class="hl kwd">'Range</span> <span class="hl kwa">loop</span>
            <span class="hl kwa">if</span> <span class="hl opt">((</span>Mask <span class="hl kwa">and</span> vec<span class="hl opt">) /=</span> <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">then</span>
               Pts <span class="hl opt">(</span>iPt<span class="hl opt">,</span> dimx<span class="hl opt">) :=</span> Integer_8 <span class="hl opt">(</span>x<span class="hl opt">);</span>
               Pts <span class="hl opt">(</span>iPt<span class="hl opt">,</span> dimy<span class="hl opt">) :=</span> Integer_8 <span class="hl opt">(</span>y<span class="hl opt">);</span>
               <span class="hl kwa">exit</span> Outer <span class="hl kwa">when</span> iPt <span class="hl opt">=</span> TElement<span class="hl kwd">'Last</span><span class="hl opt">;</span>
               iPt <span class="hl opt">:=</span> iPt <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span>
            <span class="hl kwa">end if</span><span class="hl opt">;</span>
            Mask <span class="hl opt">:=</span> Shift_Left <span class="hl opt">(</span>Mask<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">);</span>
         <span class="hl kwa">end loop</span><span class="hl opt">;</span>
      <span class="hl kwa">end loop</span> Outer<span class="hl opt">;</span>
      <span class="hl kwa">return</span> Pts<span class="hl opt">;</span>
   <span class="hl kwa">end</span> setCoordList<span class="hl opt">;</span>

   <span class="hl kwa">function</span> Get_First_One
     <span class="hl opt">(</span>V        <span class="hl opt">:</span> BitVecs<span class="hl opt">;</span>
      Startpos <span class="hl opt">:</span> <span class="hl kwb">Natural</span> <span class="hl opt">:=</span> <span class="hl num">0</span><span class="hl opt">)</span>
      <span class="hl kwa">return</span>     <span class="hl kwb">Natural</span>
   <span class="hl kwa">is</span>
      IPos              <span class="hl opt">:</span> <span class="hl kwb">Natural</span> <span class="hl opt">:=</span> Startpos<span class="hl opt">;</span>
      mask              <span class="hl opt">:</span> BitVecs<span class="hl opt">;</span>
      Result<span class="hl opt">,</span> Resultlow <span class="hl opt">:</span> BitVecs<span class="hl opt">;</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">if</span> V <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
         <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
      <span class="hl kwa">end if</span><span class="hl opt">;</span>

      mask <span class="hl opt">:=</span> Shift_Left <span class="hl opt">(</span><span class="hl num">16</span>#ff#<span class="hl opt">,</span> Startpos<span class="hl opt">);</span>
      <span class="hl kwa">while</span> <span class="hl opt">(</span>mask <span class="hl kwa">and</span> V<span class="hl opt">) =</span> <span class="hl num">0</span> <span class="hl kwa">loop</span>
         mask <span class="hl opt">:=</span> Shift_Left <span class="hl opt">(</span>mask<span class="hl opt">,</span> <span class="hl num">8</span><span class="hl opt">);</span>
         IPos <span class="hl opt">:=</span> IPos <span class="hl opt">+</span> <span class="hl num">8</span><span class="hl opt">;</span>
      <span class="hl kwa">end loop</span><span class="hl opt">;</span>

      Result    <span class="hl opt">:=</span> Shift_Right <span class="hl opt">(</span>mask <span class="hl kwa">and</span> V<span class="hl opt">,</span> IPos<span class="hl opt">);</span>
      Resultlow <span class="hl opt">:=</span> Result <span class="hl kwa">and</span> <span class="hl num">16</span>#<span class="hl num">0</span>f#<span class="hl opt">;</span>
      <span class="hl kwa">if</span> Resultlow <span class="hl opt">/=</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
         IPos <span class="hl opt">:=</span> IPos <span class="hl opt">+</span> S_FirstOne <span class="hl opt">(</span><span class="hl kwb">Integer</span> <span class="hl opt">(</span>Resultlow<span class="hl opt">));</span>
      <span class="hl kwa">else</span>
         IPos <span class="hl opt">:=</span> IPos <span class="hl opt">+</span> <span class="hl num">4</span> <span class="hl opt">+</span> S_FirstOne <span class="hl opt">(</span><span class="hl kwb">Integer</span> <span class="hl opt">(</span>Shift_Right <span class="hl opt">(</span>Result<span class="hl opt">,</span> <span class="hl num">4</span><span class="hl opt">)));</span>
      <span class="hl kwa">end if</span><span class="hl opt">;</span>
      <span class="hl kwa">return</span> IPos<span class="hl opt">;</span>
   <span class="hl kwa">end</span> Get_First_One<span class="hl opt">;</span>

<span class="hl kwa">end</span> Meteors<span class="hl opt">;</span>
<span class="hl slc">------------------------------------------------------------------------------</span>
<span class="hl slc">--   Operations On Pieces</span>
<span class="hl slc">------------------------------------------------------------------------------</span>
<span class="hl kwa">package</span> Meteors<span class="hl opt">.</span>Pieces <span class="hl kwa">is</span>

   SKIP_PIECE <span class="hl opt">:</span> <span class="hl kwa">constant</span> <span class="hl opt">:=</span> <span class="hl num">5</span><span class="hl opt">;</span>
   <span class="hl kwa">type</span> Instance <span class="hl kwa">is record</span>
      m_allowed <span class="hl opt">:</span> Unsigned_64 <span class="hl opt">:=</span><span class="hl num">0</span><span class="hl opt">;</span>
      m_vec     <span class="hl opt">:</span> BitVecs     <span class="hl opt">:=</span><span class="hl num">0</span><span class="hl opt">;</span>
      m_offset  <span class="hl opt">:</span> Integer_8   <span class="hl opt">:=</span><span class="hl num">0</span><span class="hl opt">;</span>
   <span class="hl kwa">end record</span><span class="hl opt">;</span>

   <span class="hl kwa">type</span> M_Instance_Type <span class="hl kwa">is array</span> <span class="hl opt">(</span>Parity<span class="hl opt">)</span> <span class="hl kwa">of</span> Instance<span class="hl opt">;</span>

   <span class="hl kwa">type</span> Piece <span class="hl kwa">is record</span>
      m_instance <span class="hl opt">:</span> M_Instance_Type<span class="hl opt">;</span>
   <span class="hl kwa">end record</span><span class="hl opt">;</span>

   s_basePiece <span class="hl opt">:</span> <span class="hl kwa">array</span> <span class="hl opt">(</span>Piecenr<span class="hl opt">,</span> Orientation<span class="hl opt">)</span> <span class="hl kwa">of</span> Piece<span class="hl opt">;</span>

   BaseVecs <span class="hl opt">:</span> <span class="hl kwa">constant array</span> <span class="hl opt">(</span>Piecenr<span class="hl opt">)</span> <span class="hl kwa">of</span> BitVecs <span class="hl opt">:=</span>
     <span class="hl opt">(</span><span class="hl num">16</span>#<span class="hl num">10</span>f#<span class="hl opt">,</span> <span class="hl num">16</span>#<span class="hl num">0</span>cb#<span class="hl opt">,</span>  <span class="hl num">16</span>#<span class="hl num">1087</span>#<span class="hl opt">,</span> <span class="hl num">16</span>#<span class="hl num">427</span>#<span class="hl opt">,</span> <span class="hl num">16</span>#<span class="hl num">465</span>#<span class="hl opt">,</span>
      <span class="hl num">16</span>#<span class="hl num">0</span>c7#<span class="hl opt">,</span> <span class="hl num">16</span>#<span class="hl num">8423</span>#<span class="hl opt">,</span> <span class="hl num">16</span>#<span class="hl num">0</span>a7#<span class="hl opt">,</span>  <span class="hl num">16</span>#<span class="hl num">187</span>#<span class="hl opt">,</span> <span class="hl num">16</span>#<span class="hl num">08</span>f#<span class="hl opt">);</span>

   <span class="hl kwa">function</span> getPiece
     <span class="hl opt">(</span>IPiece  <span class="hl opt">:</span> Piecenr<span class="hl opt">;</span>
      iOrient <span class="hl opt">:</span> Orientation<span class="hl opt">;</span>
      iParity <span class="hl opt">:</span> Parity<span class="hl opt">)</span>
      <span class="hl kwa">return</span>    Instance<span class="hl opt">;</span>

   <span class="hl kwa">procedure</span> gen_orientation
     <span class="hl opt">(</span>vec     <span class="hl opt">:</span> BitVecs<span class="hl opt">;</span>
      iOrient <span class="hl opt">:</span> Orientation<span class="hl opt">;</span>
      target  <span class="hl opt">:</span> <span class="hl kwa">in out</span> Piece<span class="hl opt">);</span>
   <span class="hl kwa">procedure</span> shiftUpLines <span class="hl opt">(</span>pts <span class="hl opt">:</span> <span class="hl kwa">in out</span> TPts<span class="hl opt">;</span> shift <span class="hl opt">:</span> Integer_8<span class="hl opt">);</span>
   <span class="hl kwa">procedure</span> shiftToX0
     <span class="hl opt">(</span>pts       <span class="hl opt">:</span> <span class="hl kwa">in out</span> TPts<span class="hl opt">;</span>
      Inst      <span class="hl opt">:</span> <span class="hl kwa">in out</span> Instance<span class="hl opt">;</span>
      Offsetrow <span class="hl opt">:</span> Integer_8<span class="hl opt">;</span>
      W         <span class="hl opt">:</span> <span class="hl kwa">out</span> Integer_8<span class="hl opt">);</span>
   <span class="hl kwa">procedure</span> Set_Ok_Positions
     <span class="hl opt">(</span>Self  <span class="hl opt">:</span> <span class="hl kwa">in out</span> Piece<span class="hl opt">;</span>
      isOdd <span class="hl opt">:</span> Parity<span class="hl opt">;</span>
      W<span class="hl opt">,</span> H  <span class="hl opt">:</span> Integer_8<span class="hl opt">);</span>
   <span class="hl kwa">procedure</span> Gen_All_Orientations<span class="hl opt">;</span>

   <span class="hl kwa">type</span> NPieces_Type <span class="hl kwa">is array</span> <span class="hl opt">(</span>Piecenr<span class="hl opt">)</span> <span class="hl kwa">of</span> ExtOrientation<span class="hl opt">;</span>
   <span class="hl kwa">type</span> PieceVec_Type <span class="hl kwa">is array</span> <span class="hl opt">(</span>Piecenr<span class="hl opt">,</span> Orientation<span class="hl opt">)</span> <span class="hl kwa">of</span> BitVecs<span class="hl opt">;</span>

   <span class="hl kwa">type</span> OkPieces <span class="hl kwa">is record</span>
      nPieces  <span class="hl opt">:</span> NPieces_Type  <span class="hl opt">:= (</span><span class="hl kwa">others</span> <span class="hl opt">=&gt; -</span><span class="hl num">1</span><span class="hl opt">);</span> <span class="hl slc">-- -1 for empty piecevec</span>
      pieceVec <span class="hl opt">:</span> PieceVec_Type <span class="hl opt">:= (</span><span class="hl kwa">others</span> <span class="hl opt">=&gt; (</span><span class="hl kwa">others</span> <span class="hl opt">=&gt;</span> <span class="hl num">0</span><span class="hl opt">));</span>
   <span class="hl kwa">end record</span><span class="hl opt">;</span>

   g_okPieces        <span class="hl opt">:</span> <span class="hl kwa">array</span> <span class="hl opt">(</span>Trow<span class="hl opt">,</span> Tcol<span class="hl opt">)</span> <span class="hl kwa">of</span> OkPieces<span class="hl opt">;</span>

<span class="hl kwa">end</span> Meteors<span class="hl opt">.</span>Pieces<span class="hl opt">;</span>
<span class="hl slc">------------------------------------------------------------------------------</span>
<span class="hl kwa">with</span> Meteors<span class="hl opt">.</span>Board<span class="hl opt">;</span> <span class="hl kwa">use</span> Meteors<span class="hl opt">.</span>Board<span class="hl opt">;</span>
<span class="hl kwa">package body</span> Meteors<span class="hl opt">.</span>Pieces <span class="hl kwa">is</span>

   <span class="hl kwa">function</span> floor <span class="hl opt">(</span>top<span class="hl opt">,</span> bottom <span class="hl opt">:</span> Integer_8<span class="hl opt">)</span> <span class="hl kwa">return</span> Integer_8 <span class="hl kwa">is</span>
      toZero <span class="hl opt">:</span> Integer_8<span class="hl opt">;</span>
   <span class="hl kwa">begin</span>
      toZero <span class="hl opt">:=</span> top <span class="hl opt">/</span> bottom<span class="hl opt">;</span>
      <span class="hl slc">--  negative numbers should be rounded down, not towards zero</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>toZero <span class="hl opt">*</span> bottom <span class="hl opt">/=</span> top<span class="hl opt">)</span> <span class="hl kwa">and</span> <span class="hl opt">((</span>top <span class="hl opt">&lt;</span> <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">xor</span> <span class="hl opt">(</span>bottom <span class="hl opt">&lt;=</span> <span class="hl num">0</span><span class="hl opt">))</span> <span class="hl kwa">then</span>
         toZero <span class="hl opt">:=</span> toZero <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">;</span>
      <span class="hl kwa">end if</span><span class="hl opt">;</span>
      <span class="hl kwa">return</span> toZero<span class="hl opt">;</span>
   <span class="hl kwa">end</span> floor<span class="hl opt">;</span>

   <span class="hl kwa">function</span> getPiece
     <span class="hl opt">(</span>IPiece  <span class="hl opt">:</span> Piecenr<span class="hl opt">;</span>
      iOrient <span class="hl opt">:</span> Orientation<span class="hl opt">;</span>
      iParity <span class="hl opt">:</span> Parity<span class="hl opt">)</span>
      <span class="hl kwa">return</span>    Instance
   <span class="hl kwa">is</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">return</span> s_basePiece <span class="hl opt">(</span>IPiece<span class="hl opt">,</span> iOrient<span class="hl opt">).</span>m_instance <span class="hl opt">(</span>iParity<span class="hl opt">);</span>
   <span class="hl kwa">end</span> getPiece<span class="hl opt">;</span>
   <span class="hl kwa">pragma</span> Inline <span class="hl opt">(</span>getPiece<span class="hl opt">);</span>

   <span class="hl kwa">procedure</span> gen_orientation
     <span class="hl opt">(</span>vec     <span class="hl opt">:</span> BitVecs<span class="hl opt">;</span>
      iOrient <span class="hl opt">:</span> Orientation<span class="hl opt">;</span>
      target  <span class="hl opt">:</span> <span class="hl kwa">in out</span> Piece<span class="hl opt">)</span>
   <span class="hl kwa">is</span>
      pts        <span class="hl opt">:</span> TPts<span class="hl opt">;</span>
      X<span class="hl opt">,</span> Y       <span class="hl opt">:</span> Integer_8<span class="hl opt">;</span>
      H<span class="hl opt">,</span> W       <span class="hl opt">:</span> Integer_8<span class="hl opt">;</span>
      Ymin<span class="hl opt">,</span> Ymax <span class="hl opt">:</span> Integer_8<span class="hl opt">;</span>
      rot        <span class="hl opt">:</span> Orientation<span class="hl opt">;</span>
      Even_inst  <span class="hl opt">:</span> Instance <span class="hl kwa">renames</span> target<span class="hl opt">.</span>m_instance <span class="hl opt">(</span>Even<span class="hl opt">);</span>
      Odd_inst   <span class="hl opt">:</span> Instance <span class="hl kwa">renames</span> target<span class="hl opt">.</span>m_instance <span class="hl opt">(</span>Odd<span class="hl opt">);</span>
   <span class="hl kwa">begin</span>
      <span class="hl slc">--  get (x,y) coordinates</span>
      pts <span class="hl opt">:=</span> setCoordList <span class="hl opt">(</span>vec<span class="hl opt">);</span>

      <span class="hl slc">-- flip</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>iOrient <span class="hl opt">&gt;=</span> <span class="hl num">6</span><span class="hl opt">)</span> <span class="hl kwa">then</span>
         <span class="hl kwa">for</span> iPt <span class="hl kwa">in</span> TElement<span class="hl kwd">'Range</span> <span class="hl kwa">loop</span>
            pts <span class="hl opt">(</span>iPt<span class="hl opt">,</span> dimy<span class="hl opt">) := -</span>pts <span class="hl opt">(</span>iPt<span class="hl opt">,</span> dimy<span class="hl opt">);</span>
         <span class="hl kwa">end loop</span><span class="hl opt">;</span>
      <span class="hl kwa">end if</span><span class="hl opt">;</span>

      <span class="hl slc">--  rotate as necessary</span>
      rot <span class="hl opt">:=</span> iOrient <span class="hl kwa">mod</span> <span class="hl num">6</span><span class="hl opt">;</span>
      <span class="hl kwa">while</span> rot <span class="hl opt">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">loop</span>

         <span class="hl kwa">for</span> iPt <span class="hl kwa">in</span> TElement<span class="hl kwd">'Range</span> <span class="hl kwa">loop</span>
            X <span class="hl opt">:=</span> pts <span class="hl opt">(</span>iPt<span class="hl opt">,</span> dimx<span class="hl opt">);</span>
            Y <span class="hl opt">:=</span> pts <span class="hl opt">(</span>iPt<span class="hl opt">,</span> dimy<span class="hl opt">);</span>

            <span class="hl slc">--  I just worked this out by hand. Took a while.</span>
            pts <span class="hl opt">(</span>iPt<span class="hl opt">,</span> dimx<span class="hl opt">) :=</span> floor <span class="hl opt">((</span><span class="hl num">2</span> <span class="hl opt">*</span> X <span class="hl opt">-</span> <span class="hl num">3</span> <span class="hl opt">*</span> Y <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">),</span> <span class="hl num">4</span><span class="hl opt">);</span>
            pts <span class="hl opt">(</span>iPt<span class="hl opt">,</span> dimy<span class="hl opt">) :=</span> floor <span class="hl opt">((</span><span class="hl num">2</span> <span class="hl opt">*</span> X <span class="hl opt">+</span> Y <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">),</span> <span class="hl num">2</span><span class="hl opt">);</span>
         <span class="hl kwa">end loop</span><span class="hl opt">;</span>
         rot <span class="hl opt">:=</span> rot <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">;</span>
      <span class="hl kwa">end loop</span><span class="hl opt">;</span>

      <span class="hl slc">--  determine vertical shift</span>
      Ymin <span class="hl opt">:=</span> pts <span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> dimy<span class="hl opt">);</span>
      Ymax <span class="hl opt">:=</span> Ymin<span class="hl opt">;</span>
      <span class="hl kwa">for</span> iPt <span class="hl kwa">in</span> TElement<span class="hl kwd">'Range</span> <span class="hl kwa">loop</span>
         Y <span class="hl opt">:=</span> pts <span class="hl opt">(</span>iPt<span class="hl opt">,</span> dimy<span class="hl opt">);</span>

         <span class="hl kwa">if</span> Y <span class="hl opt">&lt;</span> Ymin <span class="hl kwa">then</span>
            Ymin <span class="hl opt">:=</span> Y<span class="hl opt">;</span>
         <span class="hl kwa">elsif</span> Y <span class="hl opt">&gt;</span> Ymax <span class="hl kwa">then</span>
            Ymax <span class="hl opt">:=</span> Y<span class="hl opt">;</span>
         <span class="hl kwa">end if</span><span class="hl opt">;</span>
      <span class="hl kwa">end loop</span><span class="hl opt">;</span>
      H <span class="hl opt">:=</span> Ymax <span class="hl opt">-</span> Ymin<span class="hl opt">;</span>

      shiftUpLines <span class="hl opt">(</span>pts<span class="hl opt">,</span> Ymin<span class="hl opt">);</span>
      shiftToX0 <span class="hl opt">(</span>pts<span class="hl opt">,</span> Even_inst<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> W<span class="hl opt">);</span>
      Set_Ok_Positions <span class="hl opt">(</span>target<span class="hl opt">,</span> Even<span class="hl opt">,</span> W<span class="hl opt">,</span> H<span class="hl opt">);</span>
      Even_inst<span class="hl opt">.</span>m_vec <span class="hl opt">:=</span>
         Shift_Right <span class="hl opt">(</span>Even_inst<span class="hl opt">.</span>m_vec<span class="hl opt">,</span> <span class="hl kwb">Natural</span> <span class="hl opt">(</span>Even_inst<span class="hl opt">.</span>m_offset<span class="hl opt">));</span>

      <span class="hl slc">-- shift down one line</span>
      shiftUpLines <span class="hl opt">(</span>pts<span class="hl opt">, -</span><span class="hl num">1</span><span class="hl opt">);</span>
      shiftToX0 <span class="hl opt">(</span>pts<span class="hl opt">,</span> Odd_inst<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">,</span> W<span class="hl opt">);</span>

      <span class="hl slc">-- shift the bitmask back one line</span>
      Odd_inst<span class="hl opt">.</span>m_vec <span class="hl opt">:=</span> Shift_Right <span class="hl opt">(</span>Odd_inst<span class="hl opt">.</span>m_vec<span class="hl opt">,</span> N_COL<span class="hl opt">);</span>
      Set_Ok_Positions <span class="hl opt">(</span>target<span class="hl opt">,</span> Odd<span class="hl opt">,</span> W<span class="hl opt">,</span> H<span class="hl opt">);</span>
      Odd_inst<span class="hl opt">.</span>m_vec <span class="hl opt">:=</span>
         Shift_Right <span class="hl opt">(</span>Odd_inst<span class="hl opt">.</span>m_vec<span class="hl opt">,</span> <span class="hl kwb">Natural</span> <span class="hl opt">(</span>Odd_inst<span class="hl opt">.</span>m_offset<span class="hl opt">));</span>
   <span class="hl kwa">end</span> gen_orientation<span class="hl opt">;</span>

   <span class="hl kwa">procedure</span> shiftUpLines <span class="hl opt">(</span>pts <span class="hl opt">:</span> <span class="hl kwa">in out</span> TPts<span class="hl opt">;</span> shift <span class="hl opt">:</span> Integer_8<span class="hl opt">)</span> <span class="hl kwa">is</span>
   <span class="hl kwa">begin</span>
      <span class="hl slc">--  vertical shifts have a twist if shift is odd and Y is odd</span>
      <span class="hl kwa">for</span> iPt <span class="hl kwa">in</span> TElement<span class="hl kwd">'Range</span> <span class="hl kwa">loop</span>
         <span class="hl kwa">if</span> <span class="hl opt">(</span>shift <span class="hl kwa">mod</span> <span class="hl num">2</span> <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">)</span> <span class="hl kwa">and</span> <span class="hl opt">(</span>pts <span class="hl opt">(</span>iPt<span class="hl opt">,</span> dimy<span class="hl opt">)</span> <span class="hl kwa">mod</span> <span class="hl num">2</span><span class="hl opt">) =</span> <span class="hl num">1</span> <span class="hl kwa">then</span>
            pts <span class="hl opt">(</span>iPt<span class="hl opt">,</span> dimx<span class="hl opt">) :=</span> pts <span class="hl opt">(</span>iPt<span class="hl opt">,</span> dimx<span class="hl opt">) +</span> <span class="hl num">1</span><span class="hl opt">;</span>
         <span class="hl kwa">end if</span><span class="hl opt">;</span>
         pts <span class="hl opt">(</span>iPt<span class="hl opt">,</span> dimy<span class="hl opt">) :=</span> pts <span class="hl opt">(</span>iPt<span class="hl opt">,</span> dimy<span class="hl opt">) -</span> shift<span class="hl opt">;</span>
      <span class="hl kwa">end loop</span><span class="hl opt">;</span>
   <span class="hl kwa">end</span> shiftUpLines<span class="hl opt">;</span>

   <span class="hl kwa">procedure</span> shiftToX0
     <span class="hl opt">(</span>pts       <span class="hl opt">:</span> <span class="hl kwa">in out</span> TPts<span class="hl opt">;</span>
      Inst      <span class="hl opt">:</span> <span class="hl kwa">in out</span> Instance<span class="hl opt">;</span>
      Offsetrow <span class="hl opt">:</span> Integer_8<span class="hl opt">;</span>
      W         <span class="hl opt">:</span> <span class="hl kwa">out</span> Integer_8<span class="hl opt">)</span>
   <span class="hl kwa">is</span>
      x          <span class="hl opt">:</span> Integer_8<span class="hl opt">;</span>
      Offset     <span class="hl opt">:</span> Integer_8<span class="hl opt">;</span>
      Xmin<span class="hl opt">,</span> Xmax <span class="hl opt">:</span> Integer_8 <span class="hl opt">:=</span> pts <span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> dimx<span class="hl opt">);</span>
   <span class="hl kwa">begin</span>
      <span class="hl slc">--determine shift</span>
      <span class="hl kwa">for</span> iPt <span class="hl kwa">in</span> <span class="hl num">1</span> <span class="hl opt">..</span> TElement<span class="hl kwd">'Last</span> <span class="hl kwa">loop</span>
         x <span class="hl opt">:=</span> pts <span class="hl opt">(</span>iPt<span class="hl opt">,</span> dimx<span class="hl opt">);</span>
         <span class="hl kwa">if</span> x <span class="hl opt">&lt;</span> Xmin <span class="hl kwa">then</span>
            Xmin <span class="hl opt">:=</span> x<span class="hl opt">;</span>
         <span class="hl kwa">elsif</span> x <span class="hl opt">&gt;</span> Xmax <span class="hl kwa">then</span>
            Xmax <span class="hl opt">:=</span> x<span class="hl opt">;</span>
         <span class="hl kwa">end if</span><span class="hl opt">;</span>
      <span class="hl kwa">end loop</span><span class="hl opt">;</span>

      Offset <span class="hl opt">:=</span> N_ELEM<span class="hl opt">;</span>
      <span class="hl kwa">for</span> iPt <span class="hl kwa">in</span> TElement<span class="hl kwd">'Range</span> <span class="hl kwa">loop</span>

         pts <span class="hl opt">(</span>iPt<span class="hl opt">,</span> dimx<span class="hl opt">) :=</span> pts <span class="hl opt">(</span>iPt<span class="hl opt">,</span> dimx<span class="hl opt">) -</span> Xmin<span class="hl opt">;</span>
         <span class="hl slc">--  check offset -- leftmost cell on top line</span>
         <span class="hl kwa">if</span> <span class="hl opt">(</span>pts <span class="hl opt">(</span>iPt<span class="hl opt">,</span> dimy<span class="hl opt">) =</span> Offsetrow<span class="hl opt">)</span> <span class="hl kwa">and</span>
            <span class="hl opt">(</span>pts <span class="hl opt">(</span>iPt<span class="hl opt">,</span> dimx<span class="hl opt">) &lt;</span> Offset<span class="hl opt">)</span>
         <span class="hl kwa">then</span>
            Offset <span class="hl opt">:=</span> pts <span class="hl opt">(</span>iPt<span class="hl opt">,</span> dimx<span class="hl opt">);</span>
         <span class="hl kwa">end if</span><span class="hl opt">;</span>
      <span class="hl kwa">end loop</span><span class="hl opt">;</span>

      Inst<span class="hl opt">.</span>m_offset <span class="hl opt">:=</span> Offset<span class="hl opt">;</span>
      Inst<span class="hl opt">.</span>m_vec    <span class="hl opt">:=</span> toBitVector <span class="hl opt">(</span>pts<span class="hl opt">);</span>
      W             <span class="hl opt">:=</span> Xmax <span class="hl opt">-</span> Xmin<span class="hl opt">;</span>
   <span class="hl kwa">end</span> shiftToX0<span class="hl opt">;</span>

   <span class="hl kwa">procedure</span> Set_Ok_Positions
     <span class="hl opt">(</span>Self  <span class="hl opt">:</span> <span class="hl kwa">in out</span> Piece<span class="hl opt">;</span>
      isOdd <span class="hl opt">:</span> Parity<span class="hl opt">;</span>
      W<span class="hl opt">,</span> H  <span class="hl opt">:</span> Integer_8<span class="hl opt">)</span>
   <span class="hl kwa">is</span>
      Y        <span class="hl opt">:</span> Integer_8<span class="hl opt">;</span>
      Inst     <span class="hl opt">:</span> Instance <span class="hl kwa">renames</span> Self<span class="hl opt">.</span>m_instance <span class="hl opt">(</span>isOdd<span class="hl opt">);</span>
      PosMask  <span class="hl opt">:</span> Unsigned_64 <span class="hl opt">:=</span>
         Shift_Left <span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">,</span> N_COL <span class="hl opt">*</span> <span class="hl kwb">Natural</span> <span class="hl opt">(</span>Parity_to_Row <span class="hl opt">(</span>isOdd<span class="hl opt">)));</span>
      PieceVec <span class="hl opt">:</span> BitVecs<span class="hl opt">;</span>
   <span class="hl kwa">begin</span>
      Inst<span class="hl opt">.</span>m_allowed <span class="hl opt">:=</span> <span class="hl num">0</span><span class="hl opt">;</span>

      Y <span class="hl opt">:=</span> Integer_8 <span class="hl opt">(</span>Parity_to_Row <span class="hl opt">(</span>isOdd<span class="hl opt">));</span>
      <span class="hl kwa">while</span> Y <span class="hl opt">&lt;</span> N_ROW <span class="hl opt">-</span> H <span class="hl kwa">loop</span>

         <span class="hl kwa">if</span> Inst<span class="hl opt">.</span>m_offset <span class="hl opt">/=</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
            PosMask <span class="hl opt">:=</span> Shift_Left <span class="hl opt">(</span>PosMask<span class="hl opt">,</span> <span class="hl kwb">Natural</span> <span class="hl opt">(</span>Inst<span class="hl opt">.</span>m_offset<span class="hl opt">));</span>
         <span class="hl kwa">end if</span><span class="hl opt">;</span>

         <span class="hl kwa">for</span> Xpos <span class="hl kwa">in</span> <span class="hl num">0</span> <span class="hl opt">.. (</span>N_COL <span class="hl opt">-</span> <span class="hl num">1</span> <span class="hl opt">-</span> Inst<span class="hl opt">.</span>m_offset<span class="hl opt">)</span> <span class="hl kwa">loop</span>
            <span class="hl slc">--  check if the new position is on the board</span>

            <span class="hl kwa">if</span> Xpos <span class="hl opt">&lt; (</span>N_COL <span class="hl opt">-</span> W<span class="hl opt">)</span> <span class="hl kwa">then</span>
               <span class="hl slc">--move it to the desired location</span>
               PieceVec <span class="hl opt">:=</span> Shift_Left <span class="hl opt">(</span>Inst<span class="hl opt">.</span>m_vec<span class="hl opt">,</span> <span class="hl kwb">Natural</span> <span class="hl opt">(</span>Xpos<span class="hl opt">));</span>
               <span class="hl kwa">if not</span> Has_Bad_Islands_Single <span class="hl opt">(</span>PieceVec<span class="hl opt">,</span> Trow <span class="hl opt">(</span>Y<span class="hl opt">))</span> <span class="hl kwa">then</span>
                  <span class="hl slc">-- position is allowed</span>
                  Inst<span class="hl opt">.</span>m_allowed <span class="hl opt">:=</span> Inst<span class="hl opt">.</span>m_allowed <span class="hl kwa">or</span> PosMask<span class="hl opt">;</span>
               <span class="hl kwa">end if</span><span class="hl opt">;</span>
            <span class="hl kwa">end if</span><span class="hl opt">;</span>
            PosMask <span class="hl opt">:=</span> Shift_Left <span class="hl opt">(</span>PosMask<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">);</span>
         <span class="hl kwa">end loop</span><span class="hl opt">;</span>

         <span class="hl kwa">exit when</span> <span class="hl opt">(</span>Y <span class="hl opt">&gt;</span> N_ROW <span class="hl opt">-</span> <span class="hl num">3</span><span class="hl opt">);</span>
         Y       <span class="hl opt">:=</span> Y <span class="hl opt">+</span> <span class="hl num">2</span><span class="hl opt">;</span>
         PosMask <span class="hl opt">:=</span> Shift_Left <span class="hl opt">(</span>PosMask<span class="hl opt">,</span> N_COL<span class="hl opt">);</span>
      <span class="hl kwa">end loop</span><span class="hl opt">;</span>

   <span class="hl kwa">end</span> Set_Ok_Positions<span class="hl opt">;</span>

   <span class="hl kwa">procedure</span> Gen_All_Orientations <span class="hl kwa">is</span>
      refpiece  <span class="hl opt">:</span> BitVecs<span class="hl opt">;</span>
      n<span class="hl opt">,</span> npiece <span class="hl opt">:</span> Unsigned_8 <span class="hl opt">:=</span> <span class="hl num">0</span><span class="hl opt">;</span>
      Mask      <span class="hl opt">:</span> Unsigned_64<span class="hl opt">;</span>
      Inst      <span class="hl opt">:</span> Instance<span class="hl opt">;</span>
   <span class="hl kwa">begin</span>
      <span class="hl slc">-- Filling s_basePiece</span>
      <span class="hl kwa">for</span> iPiece <span class="hl kwa">in</span> Piecenr<span class="hl kwd">'Range</span> <span class="hl kwa">loop</span>
         refpiece <span class="hl opt">:=</span> BaseVecs <span class="hl opt">(</span>iPiece<span class="hl opt">);</span>
         <span class="hl kwa">for</span> iOrient <span class="hl kwa">in</span> Orientation<span class="hl kwd">'Range</span> <span class="hl kwa">loop</span>
            <span class="hl kwa">declare</span>
               P <span class="hl opt">:</span> Piece <span class="hl kwa">renames</span> s_basePiece <span class="hl opt">(</span>iPiece<span class="hl opt">,</span> iOrient<span class="hl opt">);</span>
            <span class="hl kwa">begin</span>
               gen_orientation <span class="hl opt">(</span>refpiece<span class="hl opt">,</span> iOrient<span class="hl opt">,</span> P<span class="hl opt">);</span>
               <span class="hl kwa">if</span> <span class="hl opt">(</span>iPiece <span class="hl opt">=</span> SKIP_PIECE<span class="hl opt">)</span> <span class="hl kwa">and</span>
                  <span class="hl opt">((</span>Unsigned_8 <span class="hl opt">(</span>iOrient <span class="hl opt">/</span> <span class="hl num">3</span><span class="hl opt">)</span> <span class="hl kwa">and</span> <span class="hl num">1</span><span class="hl opt">) /=</span> <span class="hl num">0</span><span class="hl opt">)</span>
               <span class="hl kwa">then</span>
                  P<span class="hl opt">.</span>m_instance <span class="hl opt">(</span>Even<span class="hl opt">).</span>m_allowed <span class="hl opt">:=</span> <span class="hl num">0</span><span class="hl opt">;</span>
                  P<span class="hl opt">.</span>m_instance <span class="hl opt">(</span>Odd<span class="hl opt">).</span>m_allowed  <span class="hl opt">:=</span> <span class="hl num">0</span><span class="hl opt">;</span>
               <span class="hl kwa">end if</span><span class="hl opt">;</span>
            <span class="hl kwa">end</span><span class="hl opt">;</span>
         <span class="hl kwa">end loop</span><span class="hl opt">;</span>
      <span class="hl kwa">end loop</span><span class="hl opt">;</span>

      <span class="hl slc">-- Filling array g_okPieces</span>
      <span class="hl kwa">for</span> iPiece <span class="hl kwa">in</span> Piecenr<span class="hl kwd">'Range</span> <span class="hl kwa">loop</span>
         <span class="hl kwa">for</span> iOrient <span class="hl kwa">in</span> Orientation<span class="hl kwd">'Range</span> <span class="hl kwa">loop</span>

            Mask <span class="hl opt">:=</span> <span class="hl num">1</span><span class="hl opt">;</span>
            <span class="hl kwa">for</span> iRow <span class="hl kwa">in</span> Trow<span class="hl kwd">'Range</span> <span class="hl kwa">loop</span>
               Inst <span class="hl opt">:=</span> getPiece <span class="hl opt">(</span>iPiece<span class="hl opt">,</span> iOrient<span class="hl opt">,</span> Row_Parity <span class="hl opt">(</span>iRow<span class="hl opt">));</span>
               <span class="hl kwa">for</span> iCol <span class="hl kwa">in</span> Tcol<span class="hl kwd">'Range</span> <span class="hl kwa">loop</span>
                  <span class="hl kwa">declare</span>
                     Allowed <span class="hl opt">:</span> OkPieces <span class="hl kwa">renames</span> g_okPieces <span class="hl opt">(</span>iRow<span class="hl opt">,</span> iCol<span class="hl opt">);</span>
                     nPiece  <span class="hl opt">:</span> ExtOrientation <span class="hl kwa">renames</span> Allowed<span class="hl opt">.</span>nPieces <span class="hl opt">(</span>iPiece<span class="hl opt">);</span>
                  <span class="hl kwa">begin</span>
                     <span class="hl kwa">if</span> <span class="hl opt">((</span>Inst<span class="hl opt">.</span>m_allowed <span class="hl kwa">and</span> Mask<span class="hl opt">) /=</span> <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">then</span>
                        nPiece                            <span class="hl opt">:=</span> nPiece <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span>
                        Allowed<span class="hl opt">.</span>pieceVec <span class="hl opt">(</span>iPiece<span class="hl opt">,</span> nPiece<span class="hl opt">) :=</span>
                           Shift_Left <span class="hl opt">(</span>Inst<span class="hl opt">.</span>m_vec<span class="hl opt">,</span> <span class="hl kwb">Natural</span> <span class="hl opt">(</span>iCol<span class="hl opt">));</span>
                     <span class="hl kwa">end if</span><span class="hl opt">;</span>
                  <span class="hl kwa">end</span><span class="hl opt">;</span>
                  Mask <span class="hl opt">:=</span> Shift_Left <span class="hl opt">(</span>Mask<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">);</span>
               <span class="hl kwa">end loop</span><span class="hl opt">;</span>
            <span class="hl kwa">end loop</span><span class="hl opt">;</span>

         <span class="hl kwa">end loop</span><span class="hl opt">;</span>
      <span class="hl kwa">end loop</span><span class="hl opt">;</span>
   <span class="hl kwa">end</span> Gen_All_Orientations<span class="hl opt">;</span>

<span class="hl kwa">end</span> Meteors<span class="hl opt">.</span>Pieces<span class="hl opt">;</span>
<span class="hl slc">------------------------------------------------------------------------------</span>
<span class="hl slc">--   Operations On Board</span>
<span class="hl slc">------------------------------------------------------------------------------</span>
<span class="hl kwa">with</span> Meteors<span class="hl opt">.</span>Pieces<span class="hl opt">;</span>   <span class="hl kwa">use</span> Meteors<span class="hl opt">.</span>Pieces<span class="hl opt">;</span>
<span class="hl kwa">with</span> Meteors<span class="hl opt">.</span>Solution<span class="hl opt">;</span> <span class="hl kwa">use</span> Meteors<span class="hl opt">.</span>Solution<span class="hl opt">;</span>

<span class="hl kwa">package</span> Meteors<span class="hl opt">.</span>Board <span class="hl kwa">is</span>

   L_EDGE_MASK <span class="hl opt">:</span> <span class="hl kwa">constant</span> BitVecs <span class="hl opt">:=</span>
      <span class="hl num">2</span>#<span class="hl num">0100</span>_0010_0001_0000_1000_0100_0010_0001#<span class="hl opt">;</span>
   R_EDGE_MASK <span class="hl opt">:</span> <span class="hl kwa">constant</span> BitVecs <span class="hl opt">:=</span> Shift_Left <span class="hl opt">(</span>L_EDGE_MASK<span class="hl opt">,</span> <span class="hl num">4</span><span class="hl opt">);</span>
   TOP_ROW     <span class="hl opt">:</span> <span class="hl kwa">constant</span> BitVecs <span class="hl opt">:=</span> Shift_Left <span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">,</span> N_COL<span class="hl opt">) -</span> <span class="hl num">1</span><span class="hl opt">;</span>
   ROW_0_MASK  <span class="hl opt">:</span> <span class="hl kwa">constant</span> BitVecs <span class="hl opt">:=</span>
      TOP_ROW <span class="hl kwa">or</span>
      Shift_Left <span class="hl opt">(</span>TOP_ROW<span class="hl opt">,</span> <span class="hl num">10</span><span class="hl opt">)</span> <span class="hl kwa">or</span>
      Shift_Left <span class="hl opt">(</span>TOP_ROW<span class="hl opt">,</span> <span class="hl num">20</span><span class="hl opt">)</span> <span class="hl kwa">or</span>
      Shift_Left <span class="hl opt">(</span>TOP_ROW<span class="hl opt">,</span> <span class="hl num">30</span><span class="hl opt">);</span>
   ROW_1_MASK  <span class="hl opt">:</span> <span class="hl kwa">constant</span> BitVecs <span class="hl opt">:=</span> Shift_Left <span class="hl opt">(</span>ROW_0_MASK<span class="hl opt">,</span> <span class="hl num">5</span><span class="hl opt">);</span>
   BOARD_MASK  <span class="hl opt">:</span> <span class="hl kwa">constant</span> BitVecs <span class="hl opt">:=</span> Shift_Left <span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">30</span><span class="hl opt">) -</span> <span class="hl num">1</span><span class="hl opt">;</span>
   LAST_ROW    <span class="hl opt">:</span> <span class="hl kwa">constant</span> BitVecs <span class="hl opt">:=</span> Shift_Left <span class="hl opt">(</span>TOP_ROW<span class="hl opt">,</span> <span class="hl num">5</span> <span class="hl opt">*</span> N_COL<span class="hl opt">);</span>

   <span class="hl kwa">type</span> Goodbad <span class="hl kwa">is</span> <span class="hl opt">(</span>Good<span class="hl opt">,</span> Bad<span class="hl opt">,</span> Always_Bad<span class="hl opt">);</span>

   <span class="hl kwa">type</span> Fixed <span class="hl kwa">is</span> <span class="hl opt">(</span>Open<span class="hl opt">,</span> Closed<span class="hl opt">);</span>

   <span class="hl kwa">type</span> Has_Bad_Array <span class="hl kwa">is array</span> <span class="hl opt">(</span>Fixed<span class="hl opt">,</span> Parity<span class="hl opt">)</span> <span class="hl kwa">of</span> BitVecs<span class="hl opt">;</span>
   <span class="hl kwa">type</span> Is_Known_Array <span class="hl kwa">is array</span> <span class="hl opt">(</span>Fixed<span class="hl opt">,</span> Parity<span class="hl opt">)</span> <span class="hl kwa">of</span> BitVecs<span class="hl opt">;</span>
   <span class="hl kwa">type</span> AlwaysBad_Array <span class="hl kwa">is array</span> <span class="hl opt">(</span>Parity<span class="hl opt">)</span> <span class="hl kwa">of</span> BitVecs<span class="hl opt">;</span>

   <span class="hl kwa">type</span> islandinfo <span class="hl kwa">is record</span>
      has_bad   <span class="hl opt">:</span> Has_Bad_Array   <span class="hl opt">:= (</span><span class="hl kwa">others</span> <span class="hl opt">=&gt; (</span><span class="hl kwa">others</span> <span class="hl opt">=&gt;</span> <span class="hl num">0</span><span class="hl opt">));</span>
      is_known  <span class="hl opt">:</span> Is_Known_Array  <span class="hl opt">:= (</span><span class="hl kwa">others</span> <span class="hl opt">=&gt; (</span><span class="hl kwa">others</span> <span class="hl opt">=&gt;</span> <span class="hl num">0</span><span class="hl opt">));</span>
      alwaysBad <span class="hl opt">:</span> AlwaysBad_Array <span class="hl opt">:= (</span><span class="hl kwa">others</span> <span class="hl opt">=&gt;</span> <span class="hl num">0</span><span class="hl opt">);</span>
   <span class="hl kwa">end record</span><span class="hl opt">;</span>

   MAX_ISLAND_OFFSET <span class="hl opt">:</span> <span class="hl kwa">constant</span> <span class="hl opt">:=</span> <span class="hl num">1024</span><span class="hl opt">;</span>
   g_islandInfo      <span class="hl opt">:</span> <span class="hl kwa">array</span> <span class="hl opt">(</span><span class="hl num">0</span> <span class="hl opt">..</span> MAX_ISLAND_OFFSET <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">)</span> <span class="hl kwa">of</span> islandinfo<span class="hl opt">;</span>

   <span class="hl kwa">procedure</span> badregion
     <span class="hl opt">(</span>to_fill <span class="hl opt">:</span> <span class="hl kwa">in out</span> BitVecs<span class="hl opt">;</span>
      rnew    <span class="hl opt">:</span> BitVecs<span class="hl opt">;</span>
      Isbad   <span class="hl opt">:</span> <span class="hl kwa">out</span> <span class="hl kwb">Boolean</span><span class="hl opt">);</span>

   <span class="hl kwa">function</span> Has_Bad_Islands <span class="hl opt">(</span>boardVec <span class="hl opt">:</span> BitVecs<span class="hl opt">;</span> row <span class="hl opt">:</span> Trow<span class="hl opt">)</span> <span class="hl kwa">return</span> Goodbad<span class="hl opt">;</span>

   <span class="hl kwa">function</span> Calc_Bad_Islands
     <span class="hl opt">(</span>boardVec <span class="hl opt">:</span> BitVecs<span class="hl opt">;</span>
      row      <span class="hl opt">:</span> Trow<span class="hl opt">)</span>
      <span class="hl kwa">return</span>     Goodbad<span class="hl opt">;</span>

   <span class="hl kwa">procedure</span> Calc_Always_Bad<span class="hl opt">;</span>

   <span class="hl kwa">function</span> Has_Bad_Islands_Single
     <span class="hl opt">(</span>boardVec <span class="hl opt">:</span> BitVecs<span class="hl opt">;</span>
      row      <span class="hl opt">:</span> Trow<span class="hl opt">)</span>
      <span class="hl kwa">return</span>     <span class="hl kwb">Boolean</span><span class="hl opt">;</span>

   <span class="hl kwa">procedure</span> Gen_All_Solutions
     <span class="hl opt">(</span>boardVec     <span class="hl opt">:</span> BitVecs<span class="hl opt">;</span>
      placedPieces <span class="hl opt">:</span> BitVecs<span class="hl opt">;</span>
      Row          <span class="hl opt">:</span> Trow<span class="hl opt">);</span>

   <span class="hl kwa">procedure</span> Record_Solution <span class="hl opt">(</span>s <span class="hl opt">:</span> <span class="hl kwa">in out</span> Soln<span class="hl opt">);</span>

   m_minSoln            <span class="hl opt">:</span> Soln <span class="hl opt">:=</span> init <span class="hl opt">(</span>N_PIECE_TYPE<span class="hl opt">);</span>
   m_curSoln<span class="hl opt">,</span> m_maxSoln <span class="hl opt">:</span> Soln <span class="hl opt">:=</span> init <span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">);</span>

   M_NSoln   <span class="hl opt">:</span> <span class="hl kwb">Natural</span> <span class="hl opt">:=</span> <span class="hl num">0</span><span class="hl opt">;</span>
   Max_NSoln <span class="hl opt">:</span> <span class="hl kwb">Natural</span> <span class="hl opt">:=</span> <span class="hl num">3000</span><span class="hl opt">;</span> <span class="hl slc">-- above 2098</span>

   g_firstRegion <span class="hl opt">:</span> <span class="hl kwa">constant array</span> <span class="hl opt">(</span><span class="hl num">0</span> <span class="hl opt">..</span> <span class="hl num">31</span><span class="hl opt">)</span> <span class="hl kwa">of</span> BitVecs <span class="hl opt">:= (</span>
      <span class="hl num">16</span>#<span class="hl num">00</span>#<span class="hl opt">,</span> <span class="hl num">16</span>#<span class="hl num">01</span>#<span class="hl opt">,</span> <span class="hl num">16</span>#<span class="hl num">02</span>#<span class="hl opt">,</span> <span class="hl num">16</span>#<span class="hl num">03</span>#<span class="hl opt">,</span>   <span class="hl num">16</span>#<span class="hl num">04</span>#<span class="hl opt">,</span> <span class="hl num">16</span>#<span class="hl num">01</span>#<span class="hl opt">,</span> <span class="hl num">16</span>#<span class="hl num">06</span>#<span class="hl opt">,</span> <span class="hl num">16</span>#<span class="hl num">07</span>#<span class="hl opt">,</span>
      <span class="hl num">16</span>#<span class="hl num">08</span>#<span class="hl opt">,</span> <span class="hl num">16</span>#<span class="hl num">01</span>#<span class="hl opt">,</span> <span class="hl num">16</span>#<span class="hl num">02</span>#<span class="hl opt">,</span> <span class="hl num">16</span>#<span class="hl num">03</span>#<span class="hl opt">,</span>   <span class="hl num">16</span>#<span class="hl num">0</span>c#<span class="hl opt">,</span> <span class="hl num">16</span>#<span class="hl num">01</span>#<span class="hl opt">,</span> <span class="hl num">16</span>#<span class="hl num">0</span>e#<span class="hl opt">,</span> <span class="hl num">16</span>#<span class="hl num">0</span>f#<span class="hl opt">,</span>

      <span class="hl num">16</span>#<span class="hl num">10</span>#<span class="hl opt">,</span> <span class="hl num">16</span>#<span class="hl num">01</span>#<span class="hl opt">,</span> <span class="hl num">16</span>#<span class="hl num">02</span>#<span class="hl opt">,</span> <span class="hl num">16</span>#<span class="hl num">03</span>#<span class="hl opt">,</span>   <span class="hl num">16</span>#<span class="hl num">04</span>#<span class="hl opt">,</span> <span class="hl num">16</span>#<span class="hl num">01</span>#<span class="hl opt">,</span> <span class="hl num">16</span>#<span class="hl num">06</span>#<span class="hl opt">,</span> <span class="hl num">16</span>#<span class="hl num">07</span>#<span class="hl opt">,</span>
      <span class="hl num">16</span>#<span class="hl num">18</span>#<span class="hl opt">,</span> <span class="hl num">16</span>#<span class="hl num">01</span>#<span class="hl opt">,</span> <span class="hl num">16</span>#<span class="hl num">02</span>#<span class="hl opt">,</span> <span class="hl num">16</span>#<span class="hl num">03</span>#<span class="hl opt">,</span>   <span class="hl num">16</span>#<span class="hl num">1</span>c#<span class="hl opt">,</span> <span class="hl num">16</span>#<span class="hl num">01</span>#<span class="hl opt">,</span> <span class="hl num">16</span>#<span class="hl num">1</span>e#<span class="hl opt">,</span> <span class="hl num">16</span>#<span class="hl num">1</span>f#<span class="hl opt">);</span>

   g_flip <span class="hl opt">:</span> <span class="hl kwa">constant array</span> <span class="hl opt">(</span><span class="hl num">0</span> <span class="hl opt">..</span> <span class="hl num">31</span><span class="hl opt">)</span> <span class="hl kwa">of</span> BitVecs <span class="hl opt">:= (</span>
     <span class="hl num">16</span>#<span class="hl num">00</span>#<span class="hl opt">,</span> <span class="hl num">16</span>#<span class="hl num">10</span>#<span class="hl opt">,</span> <span class="hl num">16</span>#<span class="hl num">08</span>#<span class="hl opt">,</span> <span class="hl num">16</span>#<span class="hl num">18</span>#<span class="hl opt">,</span> <span class="hl num">16</span>#<span class="hl num">04</span>#<span class="hl opt">,</span> <span class="hl num">16</span>#<span class="hl num">14</span>#<span class="hl opt">,</span> <span class="hl num">16</span>#<span class="hl num">0</span>c#<span class="hl opt">,</span> <span class="hl num">16</span>#<span class="hl num">1</span>c#<span class="hl opt">,</span>
     <span class="hl num">16</span>#<span class="hl num">02</span>#<span class="hl opt">,</span> <span class="hl num">16</span>#<span class="hl num">12</span>#<span class="hl opt">,</span> <span class="hl num">16</span>#<span class="hl num">0</span>a#<span class="hl opt">,</span> <span class="hl num">16</span>#<span class="hl num">1</span>a#<span class="hl opt">,</span> <span class="hl num">16</span>#<span class="hl num">06</span>#<span class="hl opt">,</span> <span class="hl num">16</span>#<span class="hl num">16</span>#<span class="hl opt">,</span> <span class="hl num">16</span>#<span class="hl num">0</span>e#<span class="hl opt">,</span> <span class="hl num">16</span>#<span class="hl num">1</span>e#<span class="hl opt">,</span>

     <span class="hl num">16</span>#<span class="hl num">01</span>#<span class="hl opt">,</span> <span class="hl num">16</span>#<span class="hl num">11</span>#<span class="hl opt">,</span> <span class="hl num">16</span>#<span class="hl num">09</span>#<span class="hl opt">,</span> <span class="hl num">16</span>#<span class="hl num">19</span>#<span class="hl opt">,</span> <span class="hl num">16</span>#<span class="hl num">05</span>#<span class="hl opt">,</span> <span class="hl num">16</span>#<span class="hl num">15</span>#<span class="hl opt">,</span> <span class="hl num">16</span>#<span class="hl num">0</span>d#<span class="hl opt">,</span> <span class="hl num">16</span>#<span class="hl num">1</span>d#<span class="hl opt">,</span>
     <span class="hl num">16</span>#<span class="hl num">03</span>#<span class="hl opt">,</span> <span class="hl num">16</span>#<span class="hl num">13</span>#<span class="hl opt">,</span> <span class="hl num">16</span>#<span class="hl num">0</span>b#<span class="hl opt">,</span> <span class="hl num">16</span>#<span class="hl num">1</span>b#<span class="hl opt">,</span> <span class="hl num">16</span>#<span class="hl num">07</span>#<span class="hl opt">,</span> <span class="hl num">16</span>#<span class="hl num">17</span>#<span class="hl opt">,</span> <span class="hl num">16</span>#<span class="hl num">0</span>f#<span class="hl opt">,</span> <span class="hl num">16</span>#<span class="hl num">1</span>f#<span class="hl opt">);</span>

<span class="hl kwa">end</span> Meteors<span class="hl opt">.</span>Board<span class="hl opt">;</span>
<span class="hl slc">------------------------------------------------------------------------------</span>
<span class="hl kwa">with</span> Meteors<span class="hl opt">.</span>Solution<span class="hl opt">;</span> <span class="hl kwa">use</span> Meteors<span class="hl opt">.</span>Solution<span class="hl opt">;</span>
<span class="hl kwa">with</span> Meteors<span class="hl opt">.</span>Pieces<span class="hl opt">;</span>   <span class="hl kwa">use</span> Meteors<span class="hl opt">.</span>Pieces<span class="hl opt">;</span>

<span class="hl kwa">package body</span> Meteors<span class="hl opt">.</span>Board <span class="hl kwa">is</span>

   <span class="hl kwa">procedure</span> badregion
     <span class="hl opt">(</span>to_fill <span class="hl opt">:</span> <span class="hl kwa">in out</span> BitVecs<span class="hl opt">;</span>
      rnew    <span class="hl opt">:</span> BitVecs<span class="hl opt">;</span>
      Isbad   <span class="hl opt">:</span> <span class="hl kwa">out</span> <span class="hl kwb">Boolean</span><span class="hl opt">)</span>
   <span class="hl kwa">is</span>
      <span class="hl kwa">function</span> count_ones <span class="hl opt">(</span>v <span class="hl opt">:</span> BitVecs<span class="hl opt">)</span> <span class="hl kwa">return</span> Integer_8 <span class="hl kwa">is</span>
         Result <span class="hl opt">:</span> Integer_8 <span class="hl opt">:=</span> <span class="hl num">0</span><span class="hl opt">;</span>
         Vect   <span class="hl opt">:</span> BitVecs   <span class="hl opt">:=</span> v<span class="hl opt">;</span>
      <span class="hl kwa">begin</span>
         <span class="hl kwa">while</span> Vect <span class="hl opt">/=</span> <span class="hl num">0</span> <span class="hl kwa">loop</span>
            Result <span class="hl opt">:=</span> Result <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span>
            Vect   <span class="hl opt">:=</span> Vect <span class="hl kwa">and</span> <span class="hl opt">(</span>Vect <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">);</span>
         <span class="hl kwa">end loop</span><span class="hl opt">;</span>
         <span class="hl kwa">return</span> Result<span class="hl opt">;</span>
      <span class="hl kwa">end</span> count_ones<span class="hl opt">;</span>

      lrnew                   <span class="hl opt">:</span> BitVecs <span class="hl opt">:=</span> rnew<span class="hl opt">;</span>
      region                  <span class="hl opt">:</span> BitVecs<span class="hl opt">;</span>
      Even_Region<span class="hl opt">,</span> Odd_Region <span class="hl opt">:</span> BitVecs<span class="hl opt">;</span>
      ncells                  <span class="hl opt">:</span> Integer_8<span class="hl opt">;</span>

   <span class="hl kwa">begin</span>
      <span class="hl slc">--  Grow empty region, until it doesn't change any more.</span>
      <span class="hl kwa">loop</span>
         region      <span class="hl opt">:=</span> lrnew<span class="hl opt">;</span>
         Even_Region <span class="hl opt">:=</span> region <span class="hl kwa">and</span> <span class="hl opt">(</span>ROW_0_MASK <span class="hl kwa">and not</span> L_EDGE_MASK<span class="hl opt">);</span>
         Odd_Region  <span class="hl opt">:=</span> region <span class="hl kwa">and</span> <span class="hl opt">(</span>ROW_1_MASK <span class="hl kwa">and not</span> R_EDGE_MASK<span class="hl opt">);</span>
         <span class="hl slc">--  simple grow up/down</span>
         lrnew <span class="hl opt">:=</span> lrnew <span class="hl kwa">or</span> Shift_Right <span class="hl opt">(</span>region<span class="hl opt">,</span> N_COL<span class="hl opt">);</span>
         lrnew <span class="hl opt">:=</span> lrnew <span class="hl kwa">or</span> Shift_Left <span class="hl opt">(</span>region<span class="hl opt">,</span> N_COL<span class="hl opt">);</span>

         <span class="hl slc">--  grow right/left</span>
         lrnew <span class="hl opt">:=</span> lrnew <span class="hl kwa">or</span> Shift_Right <span class="hl opt">(</span>region <span class="hl kwa">and not</span> L_EDGE_MASK<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">);</span>
         lrnew <span class="hl opt">:=</span> lrnew <span class="hl kwa">or</span> Shift_Left <span class="hl opt">(</span>region <span class="hl kwa">and not</span> R_EDGE_MASK<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">);</span>

         <span class="hl slc">--  tricky growth</span>
         lrnew <span class="hl opt">:=</span> lrnew <span class="hl kwa">or</span> Shift_Right <span class="hl opt">(</span>Even_Region<span class="hl opt">,</span> N_COL <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">);</span>
         lrnew <span class="hl opt">:=</span> lrnew <span class="hl kwa">or</span> Shift_Left <span class="hl opt">(</span>Even_Region<span class="hl opt">,</span> N_COL <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">);</span>
         lrnew <span class="hl opt">:=</span> lrnew <span class="hl kwa">or</span> Shift_Right <span class="hl opt">(</span>Odd_Region<span class="hl opt">,</span> N_COL <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">);</span>
         lrnew <span class="hl opt">:=</span> lrnew <span class="hl kwa">or</span> Shift_Left <span class="hl opt">(</span>Odd_Region<span class="hl opt">,</span> N_COL <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">);</span>
         <span class="hl slc">--clamp against existing pieces</span>
         lrnew <span class="hl opt">:=</span> lrnew <span class="hl kwa">and</span> to_fill<span class="hl opt">;</span>
         <span class="hl kwa">exit when</span> <span class="hl opt">(</span>lrnew <span class="hl opt">=</span> to_fill<span class="hl opt">)</span> <span class="hl kwa">or</span> <span class="hl opt">(</span>lrnew <span class="hl opt">=</span> region<span class="hl opt">);</span>
      <span class="hl kwa">end loop</span><span class="hl opt">;</span>

      <span class="hl slc">--  Subtract empty region from board.</span>
      to_fill <span class="hl opt">:=</span> to_fill <span class="hl kwa">xor</span> lrnew<span class="hl opt">;</span>
      ncells  <span class="hl opt">:=</span> count_ones <span class="hl opt">(</span>to_fill<span class="hl opt">);</span>
      Isbad   <span class="hl opt">:= (</span>ncells <span class="hl kwa">mod</span> N_ELEM<span class="hl opt">) /=</span> <span class="hl num">0</span><span class="hl opt">;</span>
   <span class="hl kwa">end</span> badregion<span class="hl opt">;</span>

   <span class="hl kwa">function</span> Has_Bad_Islands <span class="hl opt">(</span>boardVec <span class="hl opt">:</span> BitVecs<span class="hl opt">;</span> row <span class="hl opt">:</span> Trow<span class="hl opt">)</span> <span class="hl kwa">return</span> Goodbad <span class="hl kwa">is</span>
      iInfo         <span class="hl opt">:</span> <span class="hl kwb">Natural</span><span class="hl opt">;</span>
      Mask<span class="hl opt">,</span> lastrow <span class="hl opt">:</span> BitVecs<span class="hl opt">;</span>
      isodd         <span class="hl opt">:</span> Parity<span class="hl opt">;</span>
      isclosed      <span class="hl opt">:</span> Fixed<span class="hl opt">;</span>
      lboardVec     <span class="hl opt">:</span> BitVecs <span class="hl opt">:=</span> boardVec<span class="hl opt">;</span>

      lrow   <span class="hl opt">:</span> Trow <span class="hl opt">:=</span> row<span class="hl opt">;</span>
      Result <span class="hl opt">:</span> Goodbad<span class="hl opt">;</span>
   <span class="hl kwa">begin</span>
      <span class="hl slc">--  skip over any filled rows</span>
      <span class="hl kwa">while</span> <span class="hl opt">(</span>lboardVec <span class="hl kwa">and</span> TOP_ROW<span class="hl opt">) =</span> TOP_ROW <span class="hl kwa">loop</span>
         lboardVec <span class="hl opt">:=</span> Shift_Right <span class="hl opt">(</span>lboardVec<span class="hl opt">,</span> N_COL<span class="hl opt">);</span>
         <span class="hl kwa">if</span> lrow <span class="hl opt">=</span> Trow<span class="hl kwd">'Last</span> <span class="hl kwa">then</span> <span class="hl slc">-- the board is filled</span>
            <span class="hl kwa">return</span> Good<span class="hl opt">;</span>
         <span class="hl kwa">else</span>
            lrow <span class="hl opt">:=</span> lrow <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span>
         <span class="hl kwa">end if</span><span class="hl opt">;</span>
      <span class="hl kwa">end loop</span><span class="hl opt">;</span>

      iInfo <span class="hl opt">:=</span> <span class="hl kwb">Natural</span> <span class="hl opt">(</span>lboardVec <span class="hl kwa">and</span> <span class="hl opt">(</span>Shift_Left <span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">2</span> <span class="hl opt">*</span> N_COL<span class="hl opt">) -</span> <span class="hl num">1</span><span class="hl opt">));</span>
      <span class="hl kwa">declare</span>
         info <span class="hl opt">:</span> islandinfo <span class="hl kwa">renames</span> g_islandInfo <span class="hl opt">(</span>iInfo<span class="hl opt">);</span>
      <span class="hl kwa">begin</span>
         lastrow <span class="hl opt">:=</span> Shift_Right <span class="hl opt">(</span>lboardVec<span class="hl opt">,</span> <span class="hl num">2</span> <span class="hl opt">*</span> N_COL<span class="hl opt">)</span> <span class="hl kwa">and</span> TOP_ROW<span class="hl opt">;</span>
         Mask    <span class="hl opt">:=</span> Shift_Left <span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">,</span> <span class="hl kwb">Natural</span> <span class="hl opt">(</span>lastrow<span class="hl opt">));</span>
         isodd   <span class="hl opt">:=</span> Row_Parity <span class="hl opt">(</span>lrow<span class="hl opt">);</span>

         <span class="hl kwa">if</span> <span class="hl opt">(</span>info<span class="hl opt">.</span>alwaysBad <span class="hl opt">(</span>isodd<span class="hl opt">)</span> <span class="hl kwa">and</span> Mask<span class="hl opt">) /=</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
            <span class="hl kwa">return</span> Bad<span class="hl opt">;</span>
         <span class="hl kwa">end if</span><span class="hl opt">;</span>

         <span class="hl kwa">if</span> <span class="hl opt">(</span>lboardVec <span class="hl kwa">and</span> Shift_Left <span class="hl opt">(</span>TOP_ROW<span class="hl opt">,</span> N_COL <span class="hl opt">*</span> <span class="hl num">3</span><span class="hl opt">)) /=</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
            <span class="hl kwa">return</span> Calc_Bad_Islands <span class="hl opt">(</span>lboardVec<span class="hl opt">,</span> lrow<span class="hl opt">);</span>
         <span class="hl kwa">end if</span><span class="hl opt">;</span>
         <span class="hl kwa">if</span> lrow <span class="hl opt">&gt;</span> <span class="hl num">6</span> <span class="hl kwa">then</span> <span class="hl slc">-- we track 3 rows</span>
            isclosed <span class="hl opt">:=</span> Closed<span class="hl opt">;</span>
         <span class="hl kwa">else</span>
            isclosed <span class="hl opt">:=</span> Open<span class="hl opt">;</span>
         <span class="hl kwa">end if</span><span class="hl opt">;</span>
         <span class="hl kwa">declare</span>
            Isknownvector <span class="hl opt">:</span> BitVecs <span class="hl kwa">renames</span> info<span class="hl opt">.</span>is_known <span class="hl opt">(</span>isclosed<span class="hl opt">,</span> isodd<span class="hl opt">);</span>
            badislevector <span class="hl opt">:</span> BitVecs <span class="hl kwa">renames</span> info<span class="hl opt">.</span>has_bad <span class="hl opt">(</span>isclosed<span class="hl opt">,</span> isodd<span class="hl opt">);</span>
         <span class="hl kwa">begin</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>Isknownvector <span class="hl kwa">and</span> Mask<span class="hl opt">) /=</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
               <span class="hl kwa">if</span> <span class="hl opt">(</span>badislevector <span class="hl kwa">and</span> Mask<span class="hl opt">) =</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
                  <span class="hl kwa">return</span> Good<span class="hl opt">;</span>
               <span class="hl kwa">else</span>
                  <span class="hl kwa">return</span> Bad<span class="hl opt">;</span>
               <span class="hl kwa">end if</span><span class="hl opt">;</span>
            <span class="hl kwa">end if</span><span class="hl opt">;</span>

            <span class="hl kwa">if</span> lboardVec <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
               <span class="hl kwa">return</span> Good<span class="hl opt">;</span>
            <span class="hl kwa">end if</span><span class="hl opt">;</span>

            Result        <span class="hl opt">:=</span> Calc_Bad_Islands <span class="hl opt">(</span>lboardVec<span class="hl opt">,</span> lrow<span class="hl opt">);</span>
            Isknownvector <span class="hl opt">:=</span> Isknownvector <span class="hl kwa">or</span> Mask<span class="hl opt">;</span>
            <span class="hl kwa">if</span> Result <span class="hl opt">/=</span> Good <span class="hl kwa">then</span>
               badislevector <span class="hl opt">:=</span> badislevector <span class="hl kwa">or</span> Mask<span class="hl opt">;</span>
            <span class="hl kwa">end if</span><span class="hl opt">;</span>
         <span class="hl kwa">end</span><span class="hl opt">;</span>
         <span class="hl kwa">return</span> Result<span class="hl opt">;</span>
      <span class="hl kwa">end</span><span class="hl opt">;</span>
   <span class="hl kwa">end</span> Has_Bad_Islands<span class="hl opt">;</span>

   <span class="hl kwa">function</span> Calc_Bad_Islands
     <span class="hl opt">(</span>boardVec <span class="hl opt">:</span> BitVecs<span class="hl opt">;</span>
      row      <span class="hl opt">:</span> Trow<span class="hl opt">)</span>
      <span class="hl kwa">return</span>     Goodbad
   <span class="hl kwa">is</span>
      tofill<span class="hl opt">,</span> boardmask<span class="hl opt">,</span> bottom<span class="hl opt">,</span> startregion <span class="hl opt">:</span> BitVecs<span class="hl opt">;</span>
      Boardmaskshift                         <span class="hl opt">:</span> <span class="hl kwb">Natural</span><span class="hl opt">;</span>
      filled                                 <span class="hl opt">:</span> <span class="hl kwb">Boolean</span><span class="hl opt">;</span>
      Lrow                                   <span class="hl opt">:</span> Trow <span class="hl opt">:=</span> row<span class="hl opt">;</span>
      Isbad                                  <span class="hl opt">:</span> <span class="hl kwb">Boolean</span><span class="hl opt">;</span>
      Ipos                                   <span class="hl opt">:</span> <span class="hl kwb">Natural</span><span class="hl opt">;</span>
   <span class="hl kwa">begin</span>
      tofill <span class="hl opt">:=</span> <span class="hl kwa">not</span> boardVec<span class="hl opt">;</span>
      <span class="hl slc">--  Compensate for odd rows.</span>
      <span class="hl kwa">if</span> Row_Parity <span class="hl opt">(</span>Lrow<span class="hl opt">) =</span> Odd <span class="hl kwa">then</span>
         Lrow   <span class="hl opt">:=</span> Lrow <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">;</span>
         tofill <span class="hl opt">:=</span> Shift_Left <span class="hl opt">(</span>tofill<span class="hl opt">,</span> N_COL<span class="hl opt">);</span>
      <span class="hl kwa">end if</span><span class="hl opt">;</span>

      boardmask <span class="hl opt">:=</span> BOARD_MASK<span class="hl opt">;</span> <span class="hl slc">--  all but the first two bits</span>

      <span class="hl kwa">if</span> Lrow <span class="hl opt">&gt;</span> <span class="hl num">4</span> <span class="hl kwa">then</span>
         Boardmaskshift <span class="hl opt">:=</span> <span class="hl kwb">Natural</span> <span class="hl opt">(</span>Lrow <span class="hl opt">-</span> <span class="hl num">4</span><span class="hl opt">) *</span> N_COL<span class="hl opt">;</span>
         boardmask      <span class="hl opt">:=</span> Shift_Right <span class="hl opt">(</span>boardmask<span class="hl opt">,</span> Boardmaskshift<span class="hl opt">);</span>
      <span class="hl kwa">end if</span><span class="hl opt">;</span>
      tofill <span class="hl opt">:=</span> tofill <span class="hl kwa">and</span> boardmask<span class="hl opt">;</span>

      <span class="hl slc">--  a little pre-work to speed things up</span>
      bottom <span class="hl opt">:=</span> Shift_Left <span class="hl opt">(</span>TOP_ROW<span class="hl opt">,</span> <span class="hl num">5</span> <span class="hl opt">*</span> N_COL<span class="hl opt">);</span>
      filled <span class="hl opt">:= (</span>bottom <span class="hl kwa">and</span> tofill<span class="hl opt">) =</span> bottom<span class="hl opt">;</span>
      <span class="hl kwa">while</span> <span class="hl opt">(</span>bottom <span class="hl kwa">and</span> tofill<span class="hl opt">) =</span> bottom <span class="hl kwa">loop</span>
         tofill <span class="hl opt">:=</span> tofill <span class="hl kwa">xor</span> bottom<span class="hl opt">;</span>
         bottom <span class="hl opt">:=</span> Shift_Right <span class="hl opt">(</span>bottom<span class="hl opt">,</span> N_COL<span class="hl opt">);</span>
      <span class="hl kwa">end loop</span><span class="hl opt">;</span>

      <span class="hl kwa">if</span> filled <span class="hl kwa">or</span> <span class="hl opt">(</span>Lrow <span class="hl opt">&lt;</span> <span class="hl num">4</span><span class="hl opt">)</span> <span class="hl kwa">then</span>
         startregion <span class="hl opt">:=</span> bottom <span class="hl kwa">and</span> tofill<span class="hl opt">;</span>
      <span class="hl kwa">else</span>
         startregion <span class="hl opt">:=</span> g_firstRegion <span class="hl opt">(</span><span class="hl kwb">Natural</span> <span class="hl opt">(</span>tofill <span class="hl kwa">and</span> TOP_ROW<span class="hl opt">));</span>
         <span class="hl kwa">if</span> startregion <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
            startregion <span class="hl opt">:=</span> Shift_Right <span class="hl opt">(</span>tofill<span class="hl opt">,</span> N_COL<span class="hl opt">)</span> <span class="hl kwa">and</span> TOP_ROW<span class="hl opt">;</span>
            startregion <span class="hl opt">:=</span> g_firstRegion <span class="hl opt">(</span><span class="hl kwb">Natural</span> <span class="hl opt">(</span>startregion<span class="hl opt">));</span>
            startregion <span class="hl opt">:=</span> Shift_Left <span class="hl opt">(</span>startregion<span class="hl opt">,</span> N_COL<span class="hl opt">);</span>
         <span class="hl kwa">end if</span><span class="hl opt">;</span>
         startregion <span class="hl opt">:=</span> startregion <span class="hl kwa">or</span>
                        <span class="hl opt">(</span>Shift_Right <span class="hl opt">(</span>startregion<span class="hl opt">,</span> N_COL<span class="hl opt">)</span> <span class="hl kwa">and</span> tofill<span class="hl opt">);</span>
      <span class="hl kwa">end if</span><span class="hl opt">;</span>

      <span class="hl kwa">while</span> tofill <span class="hl opt">/=</span> <span class="hl num">0</span> <span class="hl kwa">loop</span>
         badregion <span class="hl opt">(</span>tofill<span class="hl opt">,</span> startregion<span class="hl opt">,</span> Isbad<span class="hl opt">);</span>
         <span class="hl kwa">if</span> Isbad <span class="hl kwa">then</span>
            <span class="hl kwa">if</span> tofill <span class="hl opt">/=</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
               <span class="hl kwa">return</span> Always_Bad<span class="hl opt">;</span>
            <span class="hl kwa">else</span>
               <span class="hl kwa">return</span> Bad<span class="hl opt">;</span>
            <span class="hl kwa">end if</span><span class="hl opt">;</span>
         <span class="hl kwa">end if</span><span class="hl opt">;</span>
         Ipos        <span class="hl opt">:=</span> Get_First_One <span class="hl opt">(</span>tofill<span class="hl opt">);</span>
         startregion <span class="hl opt">:=</span> Shift_Left <span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">,</span> Ipos<span class="hl opt">);</span>
      <span class="hl kwa">end loop</span><span class="hl opt">;</span>

      <span class="hl kwa">return</span> Good<span class="hl opt">;</span>
   <span class="hl kwa">end</span> Calc_Bad_Islands<span class="hl opt">;</span>

   <span class="hl kwa">procedure</span> Calc_Always_Bad <span class="hl kwa">is</span>

      <span class="hl kwa">function</span> Flip_Two_Rows <span class="hl opt">(</span>Bits <span class="hl opt">:</span> <span class="hl kwb">Integer</span><span class="hl opt">)</span> <span class="hl kwa">return</span> <span class="hl kwb">Integer</span> <span class="hl kwa">is</span>
         result  <span class="hl opt">:</span> <span class="hl kwb">Integer</span> <span class="hl opt">:=</span> <span class="hl num">0</span><span class="hl opt">;</span>
         Flipped <span class="hl opt">:</span> BitVecs <span class="hl opt">:=</span> Shift_Right <span class="hl opt">(</span>BitVecs <span class="hl opt">(</span>Bits<span class="hl opt">),</span> N_COL<span class="hl opt">);</span>
         interim <span class="hl opt">:</span> BitVecs <span class="hl opt">:=</span> BitVecs <span class="hl opt">(</span>Bits<span class="hl opt">)</span> <span class="hl kwa">and</span> TOP_ROW<span class="hl opt">;</span>
      <span class="hl kwa">begin</span>
         Flipped <span class="hl opt">:=</span> Shift_Left <span class="hl opt">(</span>g_flip <span class="hl opt">(</span><span class="hl kwb">Natural</span> <span class="hl opt">(</span>Flipped<span class="hl opt">)),</span> N_COL<span class="hl opt">);</span>
         result  <span class="hl opt">:=</span> <span class="hl kwb">Integer</span> <span class="hl opt">(</span>Flipped <span class="hl kwa">or</span> g_flip <span class="hl opt">(</span><span class="hl kwb">Natural</span> <span class="hl opt">(</span>interim<span class="hl opt">)));</span>
         <span class="hl kwa">return</span> result<span class="hl opt">;</span>
      <span class="hl kwa">end</span> Flip_Two_Rows<span class="hl opt">;</span>

      <span class="hl kwa">procedure</span> Markbad
        <span class="hl opt">(</span>Info   <span class="hl opt">:</span> <span class="hl kwa">in out</span> islandinfo<span class="hl opt">;</span>
         Mask   <span class="hl opt">:</span> <span class="hl kwa">in</span> BitVecs<span class="hl opt">;</span>
         Eo     <span class="hl opt">:</span> <span class="hl kwa">in</span> Parity<span class="hl opt">;</span>
         Always <span class="hl opt">:</span> <span class="hl kwa">in</span> <span class="hl kwb">Boolean</span><span class="hl opt">)</span>
      <span class="hl kwa">is</span>
      <span class="hl kwa">begin</span>
         Info<span class="hl opt">.</span>has_bad <span class="hl opt">(</span>Open<span class="hl opt">,</span> Eo<span class="hl opt">)   :=</span> Info<span class="hl opt">.</span>has_bad <span class="hl opt">(</span>Open<span class="hl opt">,</span> Eo<span class="hl opt">)</span> <span class="hl kwa">or</span> Mask<span class="hl opt">;</span>
         Info<span class="hl opt">.</span>has_bad <span class="hl opt">(</span>Closed<span class="hl opt">,</span> Eo<span class="hl opt">) :=</span> Info<span class="hl opt">.</span>has_bad <span class="hl opt">(</span>Closed<span class="hl opt">,</span> Eo<span class="hl opt">)</span> <span class="hl kwa">or</span> Mask<span class="hl opt">;</span>
         <span class="hl kwa">if</span> Always <span class="hl kwa">then</span>
            Info<span class="hl opt">.</span>alwaysBad <span class="hl opt">(</span>Eo<span class="hl opt">) :=</span> Info<span class="hl opt">.</span>alwaysBad <span class="hl opt">(</span>Eo<span class="hl opt">)</span> <span class="hl kwa">and</span> Mask<span class="hl opt">;</span>
         <span class="hl kwa">end if</span><span class="hl opt">;</span>
      <span class="hl kwa">end</span> Markbad<span class="hl opt">;</span>

      Mask<span class="hl opt">,</span> Flipmask<span class="hl opt">,</span> boardvec <span class="hl opt">:</span> BitVecs<span class="hl opt">;</span>
      hasbad                   <span class="hl opt">:</span> Goodbad<span class="hl opt">;</span>
      always                   <span class="hl opt">:</span> <span class="hl kwb">Boolean</span><span class="hl opt">;</span>

   <span class="hl kwa">begin</span>
      <span class="hl kwa">for</span> iWord <span class="hl kwa">in</span> <span class="hl num">1</span> <span class="hl opt">..</span> MAX_ISLAND_OFFSET <span class="hl opt">-</span> <span class="hl num">1</span> <span class="hl kwa">loop</span>
         <span class="hl kwa">declare</span>
            IsleInfo <span class="hl opt">:</span> islandinfo <span class="hl kwa">renames</span> g_islandInfo <span class="hl opt">(</span>iWord<span class="hl opt">);</span>
            flipped  <span class="hl opt">:</span> islandinfo <span class="hl kwa">renames</span> g_islandInfo <span class="hl opt">(</span>Flip_Two_Rows
                                                           <span class="hl opt">(</span>iWord<span class="hl opt">));</span>
         <span class="hl kwa">begin</span>
            Mask <span class="hl opt">:=</span> <span class="hl num">1</span><span class="hl opt">;</span>
            <span class="hl kwa">for</span> i <span class="hl kwa">in</span> <span class="hl num">0</span> <span class="hl opt">..</span> <span class="hl num">31</span> <span class="hl kwa">loop</span>

               boardvec <span class="hl opt">:=</span> Shift_Left <span class="hl opt">(</span>BitVecs <span class="hl opt">(</span>i<span class="hl opt">),</span> <span class="hl num">2</span> <span class="hl opt">*</span> N_COL<span class="hl opt">)</span> <span class="hl kwa">or</span>
                           BitVecs <span class="hl opt">(</span>iWord<span class="hl opt">);</span>

               <span class="hl kwa">if</span> <span class="hl opt">((</span>IsleInfo<span class="hl opt">.</span>is_known <span class="hl opt">(</span>Open<span class="hl opt">,</span> Even<span class="hl opt">)</span> <span class="hl kwa">and</span> Mask<span class="hl opt">) =</span> <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">then</span>
                  hasbad <span class="hl opt">:=</span> Calc_Bad_Islands <span class="hl opt">(</span>boardvec<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">);</span>
                  <span class="hl kwa">if</span> hasbad <span class="hl opt">/=</span> Good <span class="hl kwa">then</span>
                     always <span class="hl opt">:= (</span>hasbad <span class="hl opt">=</span> Always_Bad<span class="hl opt">);</span>
                     Markbad <span class="hl opt">(</span>IsleInfo<span class="hl opt">,</span> Mask<span class="hl opt">,</span> Even<span class="hl opt">,</span> always<span class="hl opt">);</span>
                     Flipmask <span class="hl opt">:=</span> Shift_Left <span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">,</span> <span class="hl kwb">Natural</span> <span class="hl opt">(</span>g_flip <span class="hl opt">(</span>i<span class="hl opt">)));</span>
                     Markbad <span class="hl opt">(</span>flipped<span class="hl opt">,</span> Flipmask<span class="hl opt">,</span> Odd<span class="hl opt">,</span> always<span class="hl opt">);</span>
                  <span class="hl kwa">end if</span><span class="hl opt">;</span>
               <span class="hl kwa">end if</span><span class="hl opt">;</span>
               Mask <span class="hl opt">:=</span> Shift_Left <span class="hl opt">(</span>Mask<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">);</span>
            <span class="hl kwa">end loop</span><span class="hl opt">;</span>
            IsleInfo<span class="hl opt">.</span>is_known <span class="hl opt">(</span>Open<span class="hl opt">,</span> Even<span class="hl opt">) :=</span> BitVecs <span class="hl opt">(</span>BitVecs<span class="hl kwd">'Last</span><span class="hl opt">);</span>
            flipped<span class="hl opt">.</span>is_known <span class="hl opt">(</span>Open<span class="hl opt">,</span> Odd<span class="hl opt">)   :=</span> BitVecs <span class="hl opt">(</span>BitVecs<span class="hl kwd">'Last</span><span class="hl opt">);</span>

         <span class="hl kwa">end</span><span class="hl opt">;</span>
      <span class="hl kwa">end loop</span><span class="hl opt">;</span>
   <span class="hl kwa">end</span> Calc_Always_Bad<span class="hl opt">;</span>

   <span class="hl kwa">function</span> has_bad_islands_single
     <span class="hl opt">(</span>boardVec <span class="hl opt">:</span> BitVecs<span class="hl opt">;</span>
      row      <span class="hl opt">:</span> Trow<span class="hl opt">)</span>
      <span class="hl kwa">return</span>     <span class="hl kwb">Boolean</span>
   <span class="hl kwa">is</span>
      Isbad                          <span class="hl opt">:</span> <span class="hl kwb">Boolean</span><span class="hl opt">;</span>
      tofill<span class="hl opt">,</span> startregion<span class="hl opt">,</span> boardmask <span class="hl opt">:</span> BitVecs<span class="hl opt">;</span>
      isodd                          <span class="hl opt">:</span> <span class="hl kwb">Boolean</span> <span class="hl opt">:=</span> Row_Parity <span class="hl opt">(</span>row<span class="hl opt">) =</span> Odd<span class="hl opt">;</span>
      lrow                           <span class="hl opt">:</span> Trow    <span class="hl opt">:=</span> row<span class="hl opt">;</span>
      Ipos                           <span class="hl opt">:</span> <span class="hl kwb">Natural</span><span class="hl opt">;</span>
   <span class="hl kwa">begin</span>
      tofill <span class="hl opt">:=</span> <span class="hl kwa">not</span> boardVec<span class="hl opt">;</span>
      <span class="hl kwa">if</span> isodd <span class="hl kwa">then</span>
         lrow   <span class="hl opt">:=</span> lrow <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">;</span>
         tofill <span class="hl opt">:=</span> Shift_Left <span class="hl opt">(</span>tofill<span class="hl opt">,</span> N_COL<span class="hl opt">);</span><span class="hl slc">--  shift to even aligned</span>
         tofill <span class="hl opt">:=</span> tofill <span class="hl kwa">or</span> TOP_ROW<span class="hl opt">;</span>
      <span class="hl kwa">end if</span><span class="hl opt">;</span>

      startregion <span class="hl opt">:=</span> TOP_ROW<span class="hl opt">;</span>
      boardmask   <span class="hl opt">:=</span> BOARD_MASK<span class="hl opt">;</span> <span class="hl slc">--  all but the first two bits</span>

      <span class="hl kwa">if</span> lrow <span class="hl opt">&gt;=</span> <span class="hl num">4</span> <span class="hl kwa">then</span>
         boardmask <span class="hl opt">:=</span> Shift_Right <span class="hl opt">(</span>boardmask<span class="hl opt">,</span> <span class="hl kwb">Natural</span> <span class="hl opt">(</span>lrow <span class="hl opt">-</span> <span class="hl num">4</span><span class="hl opt">) *</span> N_COL<span class="hl opt">);</span>
      <span class="hl kwa">elsif</span> isodd <span class="hl kwa">or</span> <span class="hl opt">(</span>lrow <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">then</span>
         startregion <span class="hl opt">:=</span> LAST_ROW<span class="hl opt">;</span>
      <span class="hl kwa">end if</span><span class="hl opt">;</span>

      tofill      <span class="hl opt">:=</span> tofill <span class="hl kwa">and</span> boardmask<span class="hl opt">;</span>
      startregion <span class="hl opt">:=</span> startregion <span class="hl kwa">and</span> tofill<span class="hl opt">;</span>

      <span class="hl kwa">while</span> tofill <span class="hl opt">/=</span> <span class="hl num">0</span> <span class="hl kwa">loop</span>
         badregion <span class="hl opt">(</span>tofill<span class="hl opt">,</span> startregion<span class="hl opt">,</span> Isbad<span class="hl opt">);</span>
         <span class="hl kwa">if</span> Isbad <span class="hl kwa">then</span>
            <span class="hl kwa">return</span> <span class="hl kwd">True</span><span class="hl opt">;</span>
         <span class="hl kwa">end if</span><span class="hl opt">;</span>
         Ipos        <span class="hl opt">:=</span> Get_First_One <span class="hl opt">(</span>tofill<span class="hl opt">);</span>
         startregion <span class="hl opt">:=</span> Shift_Left <span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">,</span> Ipos<span class="hl opt">);</span>
      <span class="hl kwa">end loop</span><span class="hl opt">;</span>
      <span class="hl kwa">return</span> <span class="hl kwd">False</span><span class="hl opt">;</span>
   <span class="hl kwa">end</span> has_bad_islands_single<span class="hl opt">;</span>

   <span class="hl kwa">procedure</span> Gen_All_Solutions
     <span class="hl opt">(</span>boardVec     <span class="hl opt">:</span> BitVecs<span class="hl opt">;</span>
      placedPieces <span class="hl opt">:</span> BitVecs<span class="hl opt">;</span>
      Row          <span class="hl opt">:</span> Trow<span class="hl opt">)</span>
   <span class="hl kwa">is</span>

      l_boardVec     <span class="hl opt">:</span> BitVecs <span class="hl opt">:=</span> boardVec<span class="hl opt">;</span>
      l_placedPieces <span class="hl opt">:</span> BitVecs <span class="hl opt">:=</span> placedPieces<span class="hl opt">;</span>
      l_Row          <span class="hl opt">:</span> Trow    <span class="hl opt">:=</span> Row<span class="hl opt">;</span>

      ALL_PIECE_MASK <span class="hl opt">:</span> <span class="hl kwa">constant</span> BitVecs <span class="hl opt">:=</span> <span class="hl num">2</span>#<span class="hl num">11</span>_1111_1111#<span class="hl opt">;</span>

      INextFill           <span class="hl opt">:</span> Tcol<span class="hl opt">;</span>
      ipiece              <span class="hl opt">:</span> Piecenr<span class="hl opt">;</span>
      Piecemask<span class="hl opt">,</span> piecevec <span class="hl opt">:</span> BitVecs<span class="hl opt">;</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">while</span> <span class="hl opt">(</span>l_boardVec <span class="hl kwa">and</span> TOP_ROW<span class="hl opt">) =</span> TOP_ROW <span class="hl kwa">loop</span>
         l_boardVec <span class="hl opt">:=</span> Shift_Right <span class="hl opt">(</span>l_boardVec<span class="hl opt">,</span> N_COL<span class="hl opt">);</span>
         l_Row      <span class="hl opt">:=</span> l_Row <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span>
      <span class="hl kwa">end loop</span><span class="hl opt">;</span>

      INextFill <span class="hl opt">:=</span>
        Tcol <span class="hl opt">(</span>S_FirstOne <span class="hl opt">(</span><span class="hl kwb">Natural</span> <span class="hl opt">((</span><span class="hl kwa">not</span> l_boardVec<span class="hl opt">)</span> <span class="hl kwa">and</span> TOP_ROW<span class="hl opt">)));</span>
      <span class="hl kwa">declare</span>
         Allowed <span class="hl opt">:</span> OkPieces <span class="hl kwa">renames</span> g_okPieces <span class="hl opt">(</span>l_Row<span class="hl opt">,</span> INextFill<span class="hl opt">);</span>
      <span class="hl kwa">begin</span>
         ipiece    <span class="hl opt">:=</span> Piecenr <span class="hl opt">(</span>Get_First_One <span class="hl opt">(</span><span class="hl kwa">not</span> l_placedPieces<span class="hl opt">));</span>
         Piecemask <span class="hl opt">:=</span> Shift_Left <span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">,</span> <span class="hl kwb">Natural</span> <span class="hl opt">(</span>ipiece<span class="hl opt">));</span>
         <span class="hl kwa">loop</span>

         <span class="hl slc">-- go on only if we've not already used this piece</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>Piecemask <span class="hl kwa">and</span> l_placedPieces<span class="hl opt">) =</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
               l_placedPieces <span class="hl opt">:=</span> l_placedPieces <span class="hl kwa">or</span> Piecemask<span class="hl opt">;</span>

               <span class="hl kwa">for</span> Iorient <span class="hl kwa">in</span> <span class="hl num">0</span> <span class="hl opt">..</span> Allowed<span class="hl opt">.</span>nPieces <span class="hl opt">(</span>ipiece<span class="hl opt">)</span> <span class="hl kwa">loop</span>
                  piecevec <span class="hl opt">:=</span> Allowed<span class="hl opt">.</span>pieceVec <span class="hl opt">(</span>ipiece<span class="hl opt">,</span> Iorient<span class="hl opt">);</span>

                  <span class="hl slc">--check if piece conflicts with other pieces</span>
                  <span class="hl kwa">if</span> <span class="hl opt">(</span>piecevec <span class="hl kwa">and</span> l_boardVec<span class="hl opt">) =</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
                     <span class="hl slc">-- add the piece to the board</span>
                     l_boardVec <span class="hl opt">:=</span> l_boardVec <span class="hl kwa">or</span> piecevec<span class="hl opt">;</span>
                     <span class="hl kwa">if</span> Has_Bad_Islands <span class="hl opt">(</span>l_boardVec<span class="hl opt">,</span> l_Row<span class="hl opt">) =</span> Good <span class="hl kwa">then</span>

                        pushPiece <span class="hl opt">(</span>m_curSoln<span class="hl opt">,</span> piecevec<span class="hl opt">,</span> ipiece<span class="hl opt">,</span> l_Row<span class="hl opt">);</span>
                        <span class="hl slc">-- recur or record solution</span>
                        <span class="hl kwa">if</span> <span class="hl opt">(</span>l_placedPieces <span class="hl opt">/=</span> ALL_PIECE_MASK<span class="hl opt">)</span> <span class="hl kwa">then</span>
                           Gen_All_Solutions
                             <span class="hl opt">(</span>l_boardVec<span class="hl opt">,</span>
                              l_placedPieces<span class="hl opt">,</span>
                              l_Row<span class="hl opt">);</span>
                        <span class="hl kwa">else</span>
                           Record_Solution <span class="hl opt">(</span>m_curSoln<span class="hl opt">);</span>
                           popPiece <span class="hl opt">(</span>m_curSoln<span class="hl opt">);</span>
                           <span class="hl kwa">return</span><span class="hl opt">;</span>
                        <span class="hl kwa">end if</span><span class="hl opt">;</span>
                        <span class="hl kwa">if</span> M_NSoln <span class="hl opt">&gt;=</span> Max_NSoln <span class="hl kwa">then</span>
                           <span class="hl kwa">return</span><span class="hl opt">;</span>
                        <span class="hl kwa">end if</span><span class="hl opt">;</span>
                        popPiece <span class="hl opt">(</span>m_curSoln<span class="hl opt">);</span>
                     <span class="hl kwa">end if</span><span class="hl opt">;</span>
                     <span class="hl slc">-- remove the piece before continuing with a new piece</span>
                     l_boardVec <span class="hl opt">:=</span> l_boardVec <span class="hl kwa">xor</span> piecevec<span class="hl opt">;</span>
                  <span class="hl kwa">end if</span><span class="hl opt">;</span>
               <span class="hl kwa">end loop</span><span class="hl opt">;</span>

               l_placedPieces <span class="hl opt">:=</span> l_placedPieces <span class="hl kwa">xor</span> Piecemask<span class="hl opt">;</span>
            <span class="hl kwa">end if</span><span class="hl opt">;</span>
            <span class="hl kwa">exit when</span> ipiece <span class="hl opt">=</span> Piecenr<span class="hl kwd">'Last</span><span class="hl opt">;</span>
            ipiece    <span class="hl opt">:=</span> ipiece <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span>
            Piecemask <span class="hl opt">:=</span> Shift_Left <span class="hl opt">(</span>Piecemask<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">);</span>
         <span class="hl kwa">end loop</span><span class="hl opt">;</span>
      <span class="hl kwa">end</span><span class="hl opt">;</span>
   <span class="hl kwa">end</span> Gen_All_Solutions<span class="hl opt">;</span>

   <span class="hl kwa">procedure</span> record_solution <span class="hl opt">(</span>S <span class="hl opt">:</span> <span class="hl kwa">in out</span> Soln<span class="hl opt">)</span> <span class="hl kwa">is</span>
      spun <span class="hl opt">:</span> Soln<span class="hl opt">;</span>
   <span class="hl kwa">begin</span>
      setCells <span class="hl opt">(</span>s<span class="hl opt">);</span>
      M_NSoln <span class="hl opt">:=</span> M_NSoln <span class="hl opt">+</span> <span class="hl num">2</span><span class="hl opt">;</span> <span class="hl slc">--  add solution and its rotation</span>

      <span class="hl kwa">if</span> isEmpty <span class="hl opt">(</span>m_minSoln<span class="hl opt">)</span> <span class="hl kwa">then</span>
         m_minSoln <span class="hl opt">:=</span> s<span class="hl opt">;</span>
         m_maxSoln <span class="hl opt">:=</span> s<span class="hl opt">;</span>
         <span class="hl kwa">return</span><span class="hl opt">;</span>
      <span class="hl kwa">end if</span><span class="hl opt">;</span>

      <span class="hl kwa">if</span> s <span class="hl opt">&lt;</span> m_minSoln <span class="hl kwa">then</span>
         m_minSoln <span class="hl opt">:=</span> s<span class="hl opt">;</span>
      <span class="hl kwa">elsif</span> m_maxSoln <span class="hl opt">&lt;</span> s <span class="hl kwa">then</span>
         m_maxSoln <span class="hl opt">:=</span> s<span class="hl opt">;</span>
      <span class="hl kwa">end if</span><span class="hl opt">;</span>

      spin <span class="hl opt">(</span>s<span class="hl opt">,</span> spun<span class="hl opt">);</span>
      <span class="hl kwa">if</span> spun <span class="hl opt">&lt;</span> m_minSoln <span class="hl kwa">then</span>
         m_minSoln <span class="hl opt">:=</span> spun<span class="hl opt">;</span>
      <span class="hl kwa">elsif</span> m_maxSoln <span class="hl opt">&lt;</span> spun <span class="hl kwa">then</span>
         m_maxSoln <span class="hl opt">:=</span> spun<span class="hl opt">;</span>
      <span class="hl kwa">end if</span><span class="hl opt">;</span>
   <span class="hl kwa">end</span> record_solution<span class="hl opt">;</span>

<span class="hl kwa">end</span> Meteors<span class="hl opt">.</span>Board<span class="hl opt">;</span>
<span class="hl slc">------------------------------------------------------------------------------</span>
<span class="hl slc">--   Operations on Solutions</span>
<span class="hl slc">------------------------------------------------------------------------------</span>
<span class="hl kwa">package</span> Meteors<span class="hl opt">.</span>Solution <span class="hl kwa">is</span>

   <span class="hl kwa">type</span> Soln <span class="hl kwa">is private</span><span class="hl opt">;</span>

   <span class="hl kwa">procedure</span> setCells <span class="hl opt">(</span>Self <span class="hl opt">:</span> <span class="hl kwa">in out</span> Soln<span class="hl opt">);</span>
   <span class="hl slc">-- Left and right must be synched by setcells before comparaison.</span>
   <span class="hl kwa">function</span> <span class="hl str">&quot;&lt;&quot;</span> <span class="hl opt">(</span>Left <span class="hl opt">:</span> Soln<span class="hl opt">;</span> Right <span class="hl opt">:</span> Soln<span class="hl opt">)</span> <span class="hl kwa">return</span> <span class="hl kwb">Boolean</span><span class="hl opt">;</span>
   <span class="hl kwa">function</span> init <span class="hl opt">(</span>value <span class="hl opt">:</span> Ext_Piecenr <span class="hl opt">:=</span> No_Piece<span class="hl opt">)</span> <span class="hl kwa">return</span> Soln<span class="hl opt">;</span>
   <span class="hl kwa">procedure</span> spin <span class="hl opt">(</span>Self <span class="hl opt">:</span> <span class="hl kwa">in out</span> Soln<span class="hl opt">;</span> spun <span class="hl opt">:</span> <span class="hl kwa">out</span> Soln<span class="hl opt">);</span>

   <span class="hl kwa">function</span> isEmpty <span class="hl opt">(</span>Self <span class="hl opt">:</span> Soln<span class="hl opt">)</span> <span class="hl kwa">return</span> <span class="hl kwb">Boolean</span><span class="hl opt">;</span>

   <span class="hl kwa">procedure</span> popPiece <span class="hl opt">(</span>Self <span class="hl opt">:</span> <span class="hl kwa">in out</span> Soln<span class="hl opt">);</span>
   <span class="hl kwa">pragma</span> Inline <span class="hl opt">(</span>popPiece<span class="hl opt">);</span>

   <span class="hl kwa">procedure</span> pushPiece
     <span class="hl opt">(</span>Self     <span class="hl opt">:</span> <span class="hl kwa">in out</span> Soln<span class="hl opt">;</span>
      A_vec    <span class="hl opt">:</span> BitVecs<span class="hl opt">;</span>
      A_iPiece <span class="hl opt">:</span> Piecenr<span class="hl opt">;</span>
      A_row    <span class="hl opt">:</span> Trow<span class="hl opt">);</span>
   <span class="hl kwa">pragma</span> Inline <span class="hl opt">(</span>pushPiece<span class="hl opt">);</span>

   <span class="hl kwa">procedure</span> Output <span class="hl opt">(</span>Nbr_Sol <span class="hl opt">:</span> <span class="hl kwb">Natural</span><span class="hl opt">;</span> Smin<span class="hl opt">,</span> Smax <span class="hl opt">:</span> Soln<span class="hl opt">);</span>

<span class="hl kwa">private</span>
   <span class="hl kwa">type</span> Spieces <span class="hl kwa">is record</span>
      bitvec <span class="hl opt">:</span> BitVecs<span class="hl opt">;</span>
      ipiece <span class="hl opt">:</span> Piecenr<span class="hl opt">;</span>
      row    <span class="hl opt">:</span> Trow<span class="hl opt">;</span>
   <span class="hl kwa">end record</span><span class="hl opt">;</span>

   <span class="hl kwa">type</span> M_Pieces_Type <span class="hl kwa">is array</span> <span class="hl opt">(</span>Piecenr<span class="hl opt">)</span> <span class="hl kwa">of</span> Spieces<span class="hl opt">;</span>
   <span class="hl kwa">type</span> M_Cells_Type <span class="hl kwa">is array</span> <span class="hl opt">(</span>Trow<span class="hl opt">,</span> Tcol<span class="hl opt">)</span> <span class="hl kwa">of</span> Ext_Piecenr<span class="hl opt">;</span>

   <span class="hl kwa">type</span> Soln <span class="hl kwa">is record</span>
      m_pieces  <span class="hl opt">:</span> M_Pieces_Type<span class="hl opt">;</span>
      m_nPiece  <span class="hl opt">:</span> Ext_Piecenr <span class="hl opt">:=</span> <span class="hl num">0</span><span class="hl opt">;</span>
      m_cells   <span class="hl opt">:</span> M_Cells_Type<span class="hl opt">;</span>
      m_synched <span class="hl opt">:</span> <span class="hl kwb">Boolean</span>     <span class="hl opt">:=</span> <span class="hl kwd">True</span><span class="hl opt">;</span>
   <span class="hl kwa">end record</span><span class="hl opt">;</span>

<span class="hl kwa">end</span> Meteors<span class="hl opt">.</span>Solution<span class="hl opt">;</span>
<span class="hl slc">------------------------------------------------------------------------------</span>
<span class="hl kwa">with</span> Ada<span class="hl opt">.</span>Streams<span class="hl opt">.</span>Stream_IO<span class="hl opt">;</span> <span class="hl kwa">use</span> Ada<span class="hl opt">.</span>Streams<span class="hl opt">.</span>Stream_IO<span class="hl opt">;</span>
<span class="hl kwa">with</span> Unchecked_Conversion<span class="hl opt">;</span>
<span class="hl kwa">with</span> Ada<span class="hl opt">.</span>Text_IO<span class="hl opt">;</span>           <span class="hl kwa">use</span> Ada<span class="hl opt">.</span>Text_IO<span class="hl opt">;</span>

<span class="hl kwa">package body</span> Meteors<span class="hl opt">.</span>Solution <span class="hl kwa">is</span>

   <span class="hl kwa">procedure</span> setCells <span class="hl opt">(</span>Self <span class="hl opt">:</span> <span class="hl kwa">in out</span> Soln<span class="hl opt">)</span> <span class="hl kwa">is</span>
      nNewcells <span class="hl opt">:</span> <span class="hl kwb">Natural</span><span class="hl opt">;</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">if</span> Self<span class="hl opt">.</span>m_synched <span class="hl kwa">then</span>
         <span class="hl kwa">return</span><span class="hl opt">;</span>
      <span class="hl kwa">end if</span><span class="hl opt">;</span>
      <span class="hl kwa">for</span> iPiece <span class="hl kwa">in</span> <span class="hl num">0</span> <span class="hl opt">..</span> Self<span class="hl opt">.</span>m_nPiece <span class="hl opt">-</span> <span class="hl num">1</span> <span class="hl kwa">loop</span>
         <span class="hl kwa">declare</span>
            P         <span class="hl opt">:</span> Spieces <span class="hl kwa">renames</span> Self<span class="hl opt">.</span>m_pieces <span class="hl opt">(</span>iPiece<span class="hl opt">);</span>
            Vec       <span class="hl opt">:</span> BitVecs     <span class="hl opt">:=</span> P<span class="hl opt">.</span>bitvec<span class="hl opt">;</span>
            pID       <span class="hl opt">:</span> Ext_Piecenr <span class="hl opt">:=</span> P<span class="hl opt">.</span>ipiece<span class="hl opt">;</span>
            RowOffset <span class="hl opt">:</span> Trow        <span class="hl opt">:=</span> P<span class="hl opt">.</span>row<span class="hl opt">;</span>
         <span class="hl kwa">begin</span>
            nNewcells <span class="hl opt">:=</span> <span class="hl num">0</span><span class="hl opt">;</span>
            Outer <span class="hl opt">:</span> <span class="hl kwa">for</span> y <span class="hl kwa">in</span> RowOffset <span class="hl opt">..</span> Trow<span class="hl kwd">'Last</span> <span class="hl kwa">loop</span>
               <span class="hl kwa">for</span> x <span class="hl kwa">in</span> Tcol<span class="hl kwd">'Range</span> <span class="hl kwa">loop</span>
                  <span class="hl kwa">if</span> <span class="hl opt">((</span>Vec <span class="hl kwa">and</span> <span class="hl num">1</span><span class="hl opt">) /=</span> <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">then</span>
                     Self<span class="hl opt">.</span>m_cells <span class="hl opt">(</span>y<span class="hl opt">,</span> x<span class="hl opt">) :=</span> pID<span class="hl opt">;</span>
                     nNewcells           <span class="hl opt">:=</span> nNewcells <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span>
                     <span class="hl kwa">exit</span> Outer <span class="hl kwa">when</span> nNewcells <span class="hl opt">=</span> N_ELEM<span class="hl opt">;</span>
                  <span class="hl kwa">end if</span><span class="hl opt">;</span>
                  Vec <span class="hl opt">:=</span> Shift_Right <span class="hl opt">(</span>Vec<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">);</span>
               <span class="hl kwa">end loop</span><span class="hl opt">;</span>
            <span class="hl kwa">end loop</span> Outer<span class="hl opt">;</span>
         <span class="hl kwa">end</span><span class="hl opt">;</span>
      <span class="hl kwa">end loop</span><span class="hl opt">;</span>
      Self<span class="hl opt">.</span>m_synched <span class="hl opt">:=</span> <span class="hl kwd">True</span><span class="hl opt">;</span>
   <span class="hl kwa">end</span> setCells<span class="hl opt">;</span>

   <span class="hl kwa">function</span> <span class="hl str">&quot;&lt;&quot;</span> <span class="hl opt">(</span>Left <span class="hl opt">:</span> Soln<span class="hl opt">;</span> Right <span class="hl opt">:</span> Soln<span class="hl opt">)</span> <span class="hl kwa">return</span> <span class="hl kwb">Boolean</span> <span class="hl kwa">is</span>
      lval<span class="hl opt">,</span> rval <span class="hl opt">:</span> Ext_Piecenr<span class="hl opt">;</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">if not</span> <span class="hl opt">(</span>Left<span class="hl opt">.</span>m_synched <span class="hl kwa">and</span> Right<span class="hl opt">.</span>m_synched<span class="hl opt">)</span> <span class="hl kwa">then</span>
         <span class="hl kwa">raise</span> Constraint_Error<span class="hl opt">;</span>
      <span class="hl kwa">end if</span><span class="hl opt">;</span>
      <span class="hl kwa">if</span> Left<span class="hl opt">.</span>m_pieces <span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">).</span>ipiece <span class="hl opt">/=</span> Right<span class="hl opt">.</span>m_pieces <span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">).</span>ipiece <span class="hl kwa">then</span>
         <span class="hl kwa">return</span> Left<span class="hl opt">.</span>m_pieces <span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">).</span>ipiece <span class="hl opt">&lt;</span> Right<span class="hl opt">.</span>m_pieces <span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">).</span>ipiece<span class="hl opt">;</span>
      <span class="hl kwa">end if</span><span class="hl opt">;</span>

      <span class="hl kwa">for</span> y <span class="hl kwa">in</span> Trow<span class="hl kwd">'Range</span> <span class="hl kwa">loop</span>
         <span class="hl kwa">for</span> x <span class="hl kwa">in</span> Tcol<span class="hl kwd">'Range</span> <span class="hl kwa">loop</span>
            lval <span class="hl opt">:=</span> Left<span class="hl opt">.</span>m_cells <span class="hl opt">(</span>y<span class="hl opt">,</span> x<span class="hl opt">);</span>
            rval <span class="hl opt">:=</span> Right<span class="hl opt">.</span>m_cells <span class="hl opt">(</span>y<span class="hl opt">,</span> x<span class="hl opt">);</span>
            <span class="hl kwa">if</span> lval <span class="hl opt">/=</span> rval <span class="hl kwa">then</span>
               <span class="hl kwa">return</span> lval <span class="hl opt">&lt;</span> rval<span class="hl opt">;</span>
            <span class="hl kwa">end if</span><span class="hl opt">;</span>
         <span class="hl kwa">end loop</span><span class="hl opt">;</span>
      <span class="hl kwa">end loop</span><span class="hl opt">;</span>
      <span class="hl slc">--  solutions are equal</span>
      <span class="hl kwa">return</span> <span class="hl kwd">False</span><span class="hl opt">;</span>
   <span class="hl kwa">end</span> <span class="hl str">&quot;&lt;&quot;</span><span class="hl opt">;</span>

   <span class="hl kwa">function</span> init <span class="hl opt">(</span>value <span class="hl opt">:</span> Ext_Piecenr <span class="hl opt">:=</span> No_Piece<span class="hl opt">)</span> <span class="hl kwa">return</span> Soln <span class="hl kwa">is</span>
      Self <span class="hl opt">:</span> Soln<span class="hl opt">;</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">for</span> I <span class="hl kwa">in</span> Trow<span class="hl kwd">'Range</span> <span class="hl kwa">loop</span>
         <span class="hl kwa">for</span> J <span class="hl kwa">in</span> Tcol<span class="hl kwd">'Range</span> <span class="hl kwa">loop</span>
            Self<span class="hl opt">.</span>m_cells <span class="hl opt">(</span>I<span class="hl opt">,</span> J<span class="hl opt">) :=</span> value<span class="hl opt">;</span>
         <span class="hl kwa">end loop</span><span class="hl opt">;</span>
      <span class="hl kwa">end loop</span><span class="hl opt">;</span>
      Self<span class="hl opt">.</span>m_synched <span class="hl opt">:=</span> <span class="hl kwd">True</span><span class="hl opt">;</span>
      Self<span class="hl opt">.</span>m_nPiece  <span class="hl opt">:=</span> <span class="hl num">0</span><span class="hl opt">;</span>
      <span class="hl kwa">return</span> Self<span class="hl opt">;</span>
   <span class="hl kwa">end</span> init<span class="hl opt">;</span>

   <span class="hl kwa">procedure</span> spin <span class="hl opt">(</span>Self <span class="hl opt">:</span> <span class="hl kwa">in out</span> Soln<span class="hl opt">;</span> spun <span class="hl opt">:</span> <span class="hl kwa">out</span> Soln<span class="hl opt">)</span> <span class="hl kwa">is</span>
   <span class="hl kwa">begin</span>
      setCells <span class="hl opt">(</span>Self<span class="hl opt">);</span>
      <span class="hl slc">--  swap cells</span>
      <span class="hl kwa">for</span> y <span class="hl kwa">in</span> Trow<span class="hl kwd">'Range</span> <span class="hl kwa">loop</span>
         <span class="hl kwa">for</span> x <span class="hl kwa">in</span> Tcol<span class="hl kwd">'Range</span> <span class="hl kwa">loop</span>
            spun<span class="hl opt">.</span>m_cells <span class="hl opt">(</span>y<span class="hl opt">,</span> x<span class="hl opt">) :=</span>
              Self<span class="hl opt">.</span>m_cells <span class="hl opt">(</span>Trow<span class="hl kwd">'Last</span> <span class="hl opt">-</span> y<span class="hl opt">,</span> Tcol<span class="hl kwd">'Last</span> <span class="hl opt">-</span> x<span class="hl opt">);</span>
         <span class="hl kwa">end loop</span><span class="hl opt">;</span>
      <span class="hl kwa">end loop</span><span class="hl opt">;</span>
      <span class="hl slc">--  swap first and last pieces (the rest aren't used)</span>
      spun<span class="hl opt">.</span>m_pieces <span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">).</span>ipiece <span class="hl opt">:=</span> Self<span class="hl opt">.</span>m_pieces <span class="hl opt">(</span>Piecenr<span class="hl kwd">'Last</span><span class="hl opt">).</span>ipiece<span class="hl opt">;</span>
      spun<span class="hl opt">.</span>m_synched           <span class="hl opt">:=</span> <span class="hl kwd">True</span><span class="hl opt">;</span>
   <span class="hl kwa">end</span> spin<span class="hl opt">;</span>

   <span class="hl kwa">function</span> isEmpty <span class="hl opt">(</span>Self <span class="hl opt">:</span> Soln<span class="hl opt">)</span> <span class="hl kwa">return</span> <span class="hl kwb">Boolean</span> <span class="hl kwa">is</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">return</span> <span class="hl opt">(</span>Self<span class="hl opt">.</span>m_nPiece <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">);</span>
   <span class="hl kwa">end</span> isEmpty<span class="hl opt">;</span>

   <span class="hl kwa">procedure</span> popPiece <span class="hl opt">(</span>Self <span class="hl opt">:</span> <span class="hl kwa">in out</span> Soln<span class="hl opt">)</span> <span class="hl kwa">is</span>
   <span class="hl kwa">begin</span>
      Self<span class="hl opt">.</span>m_nPiece  <span class="hl opt">:=</span> Self<span class="hl opt">.</span>m_nPiece <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">;</span>
      Self<span class="hl opt">.</span>m_synched <span class="hl opt">:=</span> <span class="hl kwd">False</span><span class="hl opt">;</span>
   <span class="hl kwa">end</span> popPiece<span class="hl opt">;</span>

   <span class="hl kwa">procedure</span> pushPiece
     <span class="hl opt">(</span>Self     <span class="hl opt">:</span> <span class="hl kwa">in out</span> Soln<span class="hl opt">;</span>
      A_vec    <span class="hl opt">:</span> <span class="hl kwa">in</span> BitVecs<span class="hl opt">;</span>
      A_iPiece <span class="hl opt">:</span> <span class="hl kwa">in</span> Piecenr<span class="hl opt">;</span>
      A_row    <span class="hl opt">:</span> <span class="hl kwa">in</span> Trow<span class="hl opt">)</span>
   <span class="hl kwa">is</span>

      P <span class="hl opt">:</span> Spieces <span class="hl kwa">renames</span> Self<span class="hl opt">.</span>m_pieces <span class="hl opt">(</span>Self<span class="hl opt">.</span>m_nPiece<span class="hl opt">);</span>
   <span class="hl kwa">begin</span>
      P<span class="hl opt">.</span>bitvec       <span class="hl opt">:=</span> A_vec<span class="hl opt">;</span>
      P<span class="hl opt">.</span>ipiece       <span class="hl opt">:=</span> A_iPiece<span class="hl opt">;</span>
      P<span class="hl opt">.</span>row          <span class="hl opt">:=</span> A_row<span class="hl opt">;</span>
      Self<span class="hl opt">.</span>m_nPiece  <span class="hl opt">:=</span> Self<span class="hl opt">.</span>m_nPiece <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span>
      Self<span class="hl opt">.</span>m_synched <span class="hl opt">:=</span> <span class="hl kwd">False</span><span class="hl opt">;</span>
   <span class="hl kwa">end</span> pushPiece<span class="hl opt">;</span>

   <span class="hl kwa">procedure</span> Output <span class="hl opt">(</span>Nbr_Sol <span class="hl opt">:</span> <span class="hl kwb">Natural</span><span class="hl opt">;</span> Smin<span class="hl opt">,</span> Smax <span class="hl opt">:</span> Soln<span class="hl opt">)</span> <span class="hl kwa">is</span>
      <span class="hl kwa">use</span> Ada<span class="hl opt">.</span>Streams<span class="hl opt">,</span> ASCII<span class="hl opt">;</span>

      <span class="hl kwa">package</span> Int_IO <span class="hl kwa">is new</span> Integer_IO <span class="hl opt">(</span><span class="hl kwb">Integer</span><span class="hl opt">);</span>

      <span class="hl kwa">subtype</span> Item <span class="hl kwa">is</span> <span class="hl kwb">String</span> <span class="hl opt">(</span><span class="hl num">1</span> <span class="hl opt">..</span> <span class="hl num">254</span><span class="hl opt">);</span>

      <span class="hl kwa">subtype</span> Index <span class="hl kwa">is</span> Stream_Element_Offset <span class="hl kwa">range</span>
         Stream_Element_Offset <span class="hl opt">(</span>Item<span class="hl kwd">'First</span><span class="hl opt">) ..</span>
         Stream_Element_Offset <span class="hl opt">(</span>Item<span class="hl kwd">'Last</span><span class="hl opt">);</span>
      <span class="hl kwa">subtype</span> XBytes <span class="hl kwa">is</span> Stream_Element_Array <span class="hl opt">(</span>Index<span class="hl opt">);</span>
      <span class="hl kwa">function</span> To_Bytes <span class="hl kwa">is new</span> Unchecked_Conversion <span class="hl opt">(</span>
         Source <span class="hl opt">=&gt;</span> Item<span class="hl opt">,</span>
         Target <span class="hl opt">=&gt;</span> XBytes<span class="hl opt">);</span>

      Stdout <span class="hl opt">:</span> Stream_IO<span class="hl opt">.</span>File_Type<span class="hl opt">;</span>
      Result <span class="hl opt">:</span> Item<span class="hl opt">;</span>

      <span class="hl kwa">function</span> To_String <span class="hl opt">(</span>S <span class="hl opt">:</span> Soln<span class="hl opt">)</span> <span class="hl kwa">return</span> <span class="hl kwb">String</span> <span class="hl kwa">is</span>
         N   <span class="hl opt">:</span> <span class="hl kwb">Natural</span> <span class="hl opt">:=</span> <span class="hl num">0</span><span class="hl opt">;</span>
         Res <span class="hl opt">:</span> <span class="hl kwb">String</span> <span class="hl opt">(</span><span class="hl num">1</span> <span class="hl opt">..</span> <span class="hl num">116</span><span class="hl opt">);</span>
      <span class="hl kwa">begin</span>
         <span class="hl kwa">for</span> I <span class="hl kwa">in</span> Trow<span class="hl kwd">'Range</span> <span class="hl kwa">loop</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>I <span class="hl kwa">mod</span> <span class="hl num">2</span><span class="hl opt">) =</span> <span class="hl num">1</span> <span class="hl kwa">then</span><span class="hl slc">--  indent every second line</span>
               N       <span class="hl opt">:=</span> N <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span>
               Res <span class="hl opt">(</span>N<span class="hl opt">) :=</span> <span class="hl str">' '</span><span class="hl opt">;</span>
            <span class="hl kwa">end if</span><span class="hl opt">;</span>

            <span class="hl kwa">for</span> J <span class="hl kwa">in</span> Tcol<span class="hl kwd">'Range</span> <span class="hl kwa">loop</span>
               N <span class="hl opt">:=</span> N <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span>
               Int_IO<span class="hl opt">.</span>Put <span class="hl opt">(</span>Res <span class="hl opt">(</span>N <span class="hl opt">..</span> N<span class="hl opt">),</span> <span class="hl kwb">Integer</span> <span class="hl opt">(</span>S<span class="hl opt">.</span>m_cells <span class="hl opt">(</span>I<span class="hl opt">,</span> J<span class="hl opt">)));</span>
               N       <span class="hl opt">:=</span> N <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span>
               Res <span class="hl opt">(</span>N<span class="hl opt">) :=</span> <span class="hl str">' '</span><span class="hl opt">;</span>
            <span class="hl kwa">end loop</span><span class="hl opt">;</span>
            N       <span class="hl opt">:=</span> N <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span>
            Res <span class="hl opt">(</span>N<span class="hl opt">) :=</span> LF<span class="hl opt">;</span>
         <span class="hl kwa">end loop</span><span class="hl opt">;</span>
         N       <span class="hl opt">:=</span> N <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span>
         Res <span class="hl opt">(</span>N<span class="hl opt">) :=</span> LF<span class="hl opt">;</span>
         <span class="hl kwa">return</span> Res<span class="hl opt">;</span>
      <span class="hl kwa">end</span> To_String<span class="hl opt">;</span>

   <span class="hl kwa">begin</span>
      Int_IO<span class="hl opt">.</span>Put <span class="hl opt">(</span>Result <span class="hl opt">(</span><span class="hl num">1</span> <span class="hl opt">..</span> <span class="hl num">4</span><span class="hl opt">),</span> Nbr_Sol<span class="hl opt">);</span>
      Result <span class="hl opt">(</span><span class="hl num">5</span> <span class="hl opt">..</span> <span class="hl num">22</span><span class="hl opt">)    := (</span><span class="hl str">&quot; solutions found&quot;</span> <span class="hl opt">&amp;</span> LF <span class="hl opt">&amp;</span> LF<span class="hl opt">);</span>
      Result <span class="hl opt">(</span><span class="hl num">23</span> <span class="hl opt">..</span> <span class="hl num">138</span><span class="hl opt">)  := (</span>To_String <span class="hl opt">(</span>Smin<span class="hl opt">));</span>
      Result <span class="hl opt">(</span><span class="hl num">139</span> <span class="hl opt">..</span> <span class="hl num">254</span><span class="hl opt">) := (</span>To_String <span class="hl opt">(</span>Smax<span class="hl opt">));</span>

      Stream_IO<span class="hl opt">.</span>Open <span class="hl opt">(</span>File <span class="hl opt">=&gt;</span> Stdout<span class="hl opt">,</span> Mode <span class="hl opt">=&gt;</span> Out_File<span class="hl opt">,</span> Name <span class="hl opt">=&gt;</span> <span class="hl str">&quot;/dev/stdout&quot;</span><span class="hl opt">);</span>
      Stream_IO<span class="hl opt">.</span>Write <span class="hl opt">(</span>Stdout<span class="hl opt">,</span> To_Bytes <span class="hl opt">(</span>Result<span class="hl opt">));</span>
      Stream_IO<span class="hl opt">.</span>Close <span class="hl opt">(</span>Stdout<span class="hl opt">);</span>
   <span class="hl kwa">end</span> Output<span class="hl opt">;</span>

<span class="hl kwa">end</span> Meteors<span class="hl opt">.</span>Solution<span class="hl opt">;</span>
<span class="hl slc">------------------------------------------------------------------------------</span>
<span class="hl kwa">with</span> Meteors<span class="hl opt">;</span>          <span class="hl kwa">use</span> Meteors<span class="hl opt">;</span>
<span class="hl kwa">with</span> Meteors<span class="hl opt">.</span>Pieces<span class="hl opt">;</span>
<span class="hl kwa">with</span> Meteors<span class="hl opt">.</span>Solution<span class="hl opt">;</span> <span class="hl kwa">use</span> Meteors<span class="hl opt">.</span>Solution<span class="hl opt">;</span>
<span class="hl kwa">with</span> Meteors<span class="hl opt">.</span>Board<span class="hl opt">;</span>    <span class="hl kwa">use</span> Meteors<span class="hl opt">.</span>Board<span class="hl opt">;</span>
<span class="hl kwa">with</span> Ada<span class="hl opt">.</span>Command_Line<span class="hl opt">;</span> <span class="hl kwa">use</span> Ada<span class="hl opt">.</span>Command_Line<span class="hl opt">;</span>

<span class="hl kwa">procedure</span> Meteor <span class="hl kwa">is</span>
<span class="hl kwa">begin</span>
   <span class="hl kwa">if</span> Argument_Count <span class="hl opt">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
      <span class="hl slc">--Program will search only max number of solutions.</span>
      Max_NSoln <span class="hl opt">:=</span> <span class="hl kwb">Natural</span><span class="hl kwd">'Value</span> <span class="hl opt">(</span>Argument <span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">));</span>
   <span class="hl kwa">end if</span><span class="hl opt">;</span>
   Pieces<span class="hl opt">.</span>Gen_All_Orientations<span class="hl opt">;</span>
   Calc_Always_Bad<span class="hl opt">;</span>
   Gen_All_Solutions <span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">);</span>
   Output <span class="hl opt">(</span>M_NSoln<span class="hl opt">,</span> m_minSoln<span class="hl opt">,</span> m_maxSoln<span class="hl opt">);</span>
<span class="hl kwa">end</span> Meteor<span class="hl opt">;</span>
