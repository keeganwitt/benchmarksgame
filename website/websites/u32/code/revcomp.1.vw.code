<span class="hl com">&quot;* The Computer Language Benchmarks Game</span>
<span class="hl com">    http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com">   contributed by Eliot Miranda and Isaac Gouy *&quot;</span><span class="hl opt">!</span>


<span class="hl opt">!</span><span class="hl kwc">Tests</span> <span class="hl kwb">class methodsFor:</span> <span class="hl str">'benchmarking'</span><span class="hl opt">!</span>
<span class="hl kwb">reverseComplement:</span> sequence <span class="hl kwb">named:</span> sequenceName <span class="hl kwb">to:</span> output
   <span class="hl kwd">| complement newline lineLength n |</span>
   <span class="hl opt">(</span>sequenceName <span class="hl kwb">isNil</span><span class="hl opt">)</span> <span class="hl kwb">ifTrue:</span> <span class="hl opt">[^</span><span class="hl kwa">self</span><span class="hl opt">].</span>

   complement <span class="hl opt">:</span><span class="hl kwb">=</span> <span class="hl kwc">String</span> <span class="hl kwb">new:</span> <span class="hl num">128</span> <span class="hl kwb">withAll:</span> <span class="hl opt">$</span><span class="hl kwb">*</span><span class="hl opt">.</span>

   <span class="hl str">'ABCDGHKMNRSTVWY'</span> <span class="hl kwb">with:</span> 
   <span class="hl str">'TVGHCDMKNYSABWR'</span>
      <span class="hl kwb">do:</span> <span class="hl opt">[</span><span class="hl kwd">:a :b</span>|
         complement <span class="hl kwb">at:</span> a <span class="hl kwb">asInteger put:</span> b<span class="hl opt">.</span>
         complement <span class="hl kwb">at:</span> a <span class="hl kwb">asLowercase asInteger put:</span> b<span class="hl opt">].</span>

   newline <span class="hl opt">:</span><span class="hl kwb">=</span> <span class="hl kwc">Character</span> <span class="hl kwb">lf</span><span class="hl opt">.</span>
   lineLength <span class="hl opt">:</span><span class="hl kwb">=</span> <span class="hl num">60</span><span class="hl opt">.</span>
   n <span class="hl opt">:</span><span class="hl kwb">=</span> sequence <span class="hl kwb">size</span><span class="hl opt">.</span>

   output <span class="hl kwb">nextPutAll:</span> sequenceName<span class="hl opt">;</span> <span class="hl kwb">nextPut:</span> newline<span class="hl opt">.</span>

   <span class="hl opt">[</span>n &gt; <span class="hl num">0</span><span class="hl opt">]</span> <span class="hl kwb">whileTrue:</span> <span class="hl opt">[</span> 
         <span class="hl num">1</span> <span class="hl kwb">to:</span> <span class="hl opt">((</span>n &lt; <span class="hl kwb">lineLength</span><span class="hl opt">)</span> <span class="hl kwb">ifTrue:</span> <span class="hl opt">[</span>n<span class="hl opt">]</span> <span class="hl kwb">ifFalse:</span> <span class="hl opt">[</span>lineLength<span class="hl opt">])</span> <span class="hl kwb">do:</span>
            <span class="hl opt">[</span><span class="hl kwd">:i</span> | output <span class="hl kwb">nextPut:</span> 
               <span class="hl opt">(</span>complement <span class="hl kwb">at:</span> <span class="hl opt">(</span>sequence <span class="hl kwb">at:</span> n <span class="hl kwb">-</span> i <span class="hl kwb">+</span> <span class="hl num">1</span><span class="hl opt">)</span> <span class="hl kwb">asInteger</span><span class="hl opt">)].</span>
         output <span class="hl kwb">nextPut:</span> newline<span class="hl opt">.</span>
         n <span class="hl opt">:</span><span class="hl kwb">=</span> n <span class="hl kwb">-</span> lineLength<span class="hl opt">.</span> 
      <span class="hl opt">] ! !</span>


<span class="hl opt">!</span><span class="hl kwc">Tests</span> <span class="hl kwb">class methodsFor:</span> <span class="hl str">'benchmarking'</span><span class="hl opt">!</span>
<span class="hl kwb">readFasta:</span> sequenceName <span class="hl kwb">from:</span> input
   <span class="hl kwd">| prefix newline buffer description line char |</span>
   prefix <span class="hl opt">:</span><span class="hl kwb">=</span> <span class="hl str">'&gt;'</span>,sequenceName<span class="hl opt">.</span>
   newline <span class="hl opt">:</span><span class="hl kwb">=</span> <span class="hl kwc">Character</span> <span class="hl kwb">cr</span><span class="hl opt">.</span>

   <span class="hl com">&quot;* find start of particular fasta sequence *&quot;</span>
   <span class="hl opt">[(</span>input <span class="hl kwb">atEnd</span><span class="hl opt">)</span> <span class="hl kwb">or:</span> <span class="hl opt">[</span>
         <span class="hl opt">(</span>input <span class="hl kwb">peek =</span> <span class="hl opt">$</span>&gt;<span class="hl opt">)</span> 
            <span class="hl kwb">ifTrue:</span> <span class="hl opt">[((</span>line <span class="hl opt">:</span><span class="hl kwb">=</span> input <span class="hl kwb">upTo:</span> newline<span class="hl opt">)</span> 
               <span class="hl kwb">indexOfSubCollection:</span> prefix <span class="hl kwb">startingAt:</span> <span class="hl num">1</span><span class="hl opt">)</span> <span class="hl kwb">=</span> <span class="hl num">1</span><span class="hl opt">]</span>
            <span class="hl kwb">ifFalse:</span> <span class="hl opt">[</span>input <span class="hl kwb">skipThrough:</span> newline<span class="hl opt">.</span> <span class="hl kwa">false</span><span class="hl opt">]]</span>
      <span class="hl opt">]</span> <span class="hl kwb">whileFalse</span><span class="hl opt">.</span>

   <span class="hl com">&quot;* line-by-line read - it would be a lot faster to block read *&quot;</span>
   description <span class="hl opt">:</span><span class="hl kwb">=</span> line<span class="hl opt">.</span>
   buffer <span class="hl opt">:</span><span class="hl kwb">=</span> <span class="hl kwc">ReadWriteStream</span> <span class="hl kwb">on:</span> <span class="hl opt">(</span><span class="hl kwc">String</span> <span class="hl kwb">new:</span> <span class="hl num">1028</span><span class="hl opt">).</span>
   <span class="hl opt">[(</span>input <span class="hl kwb">atEnd</span><span class="hl opt">)</span> <span class="hl kwb">or:</span> <span class="hl opt">[(</span>char <span class="hl opt">:</span><span class="hl kwb">=</span> input <span class="hl kwb">peek</span><span class="hl opt">)</span> <span class="hl kwb">=</span> <span class="hl opt">$</span>&gt;<span class="hl opt">]]</span> <span class="hl kwb">whileFalse:</span> <span class="hl opt">[</span>
      <span class="hl opt">(</span>char <span class="hl kwb">=</span> <span class="hl opt">$;)</span> 
         <span class="hl kwb">ifTrue:</span> <span class="hl opt">[</span>input <span class="hl kwb">upTo:</span> newline<span class="hl opt">]</span> 
         <span class="hl kwb">ifFalse:</span> <span class="hl opt">[</span>buffer <span class="hl kwb">nextPutAll:</span> <span class="hl opt">(</span>input <span class="hl kwb">upTo:</span> newline<span class="hl opt">)]</span>
      <span class="hl opt">].</span>
   <span class="hl opt">^</span><span class="hl kwc">Association</span> <span class="hl kwb">key:</span> description <span class="hl kwb">value:</span> buffer <span class="hl kwb">contents</span> <span class="hl opt">! !</span>


<span class="hl opt">!</span><span class="hl kwc">Tests</span> <span class="hl kwb">class methodsFor:</span> <span class="hl str">'benchmark scripts'</span><span class="hl opt">!</span>
<span class="hl kwb">revcomp</span>
   <span class="hl kwd">| input output |</span>
   input <span class="hl opt">:</span><span class="hl kwb">=</span> <span class="hl kwa">self</span> <span class="hl kwb">stdinSpecial</span><span class="hl opt">.</span>
   output <span class="hl opt">:</span><span class="hl kwb">=</span> <span class="hl kwa">self</span> <span class="hl kwb">stdoutSpecial</span><span class="hl opt">.</span>

   <span class="hl opt">#(</span><span class="hl str">'ONE'</span> <span class="hl str">'TWO'</span> <span class="hl str">'THREE'</span><span class="hl opt">)</span> <span class="hl kwb">do:</span>
      <span class="hl opt">[</span><span class="hl kwd">:sequenceName</span>|   <span class="hl kwd">| fasta |</span>
         fasta <span class="hl opt">:</span><span class="hl kwb">=</span> <span class="hl kwa">self</span> <span class="hl kwb">readFasta:</span> sequenceName <span class="hl kwb">from:</span> input<span class="hl opt">.</span>
         <span class="hl kwa">self</span> <span class="hl kwb">reverseComplement:</span> fasta <span class="hl kwb">value named:</span> fasta <span class="hl kwb">key to:</span> output<span class="hl opt">.</span>
      <span class="hl opt">].</span>

   output <span class="hl kwb">flush</span><span class="hl opt">.</span> 
   <span class="hl opt">^</span><span class="hl str">''</span> <span class="hl opt">! !</span>
