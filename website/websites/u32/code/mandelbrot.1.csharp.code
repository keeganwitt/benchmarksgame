<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   Adapted by Antti Lankila from the earlier Isaac Gouy's implementation</span>
<span class="hl com">   Add multithread &amp; tweaks from C++ by The Anh Tran</span>
<span class="hl com">*/</span>

<span class="hl kwa">using</span> System<span class="hl opt">;</span>
<span class="hl kwa">using</span> System<span class="hl opt">.</span>Threading<span class="hl opt">;</span>
<span class="hl kwa">using</span> System<span class="hl opt">.</span>IO<span class="hl opt">;</span>

<span class="hl kwa">public class</span> MandelBrot
<span class="hl opt">{</span>
    <span class="hl kwa">private static</span> <span class="hl kwb">int</span>      N <span class="hl opt">=</span> <span class="hl num">200</span><span class="hl opt">;</span>
    <span class="hl kwa">private static</span> <span class="hl kwb">int</span>      width_bytes<span class="hl opt">;</span>
    
    <span class="hl kwa">private static</span> <span class="hl kwb">byte</span><span class="hl opt">[][]</span> data<span class="hl opt">;</span>
   <span class="hl kwa">private static</span> <span class="hl kwb">int</span><span class="hl opt">[]</span>    nbyte_each_line<span class="hl opt">;</span>


   <span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">Main</span> <span class="hl opt">(</span>String<span class="hl opt">[]</span> args<span class="hl opt">)</span>
   <span class="hl opt">{</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>args<span class="hl opt">.</span>Length <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">)</span>
         N <span class="hl opt">=</span> Int32<span class="hl opt">.</span><span class="hl kwd">Parse</span><span class="hl opt">(</span>args<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">]);</span>
      Console<span class="hl opt">.</span>Out<span class="hl opt">.</span><span class="hl kwd">WriteLine</span><span class="hl opt">(</span><span class="hl str">&quot;P4</span><span class="hl esc">\n</span><span class="hl str">{0} {0}&quot;</span><span class="hl opt">,</span> N<span class="hl opt">);</span>

      width_bytes <span class="hl opt">=</span> N<span class="hl opt">/</span><span class="hl num">8</span><span class="hl opt">;</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>width_bytes<span class="hl opt">*</span><span class="hl num">8</span> <span class="hl opt">&lt;</span> N<span class="hl opt">)</span>
         width_bytes <span class="hl opt">+=</span> <span class="hl num">1</span><span class="hl opt">;</span>

      nbyte_each_line <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwb">int</span><span class="hl opt">[</span>N<span class="hl opt">];</span>

        data <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwb">byte</span><span class="hl opt">[</span>N<span class="hl opt">][];</span>
        <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> N<span class="hl opt">;</span> i<span class="hl opt">++)</span>
            data<span class="hl opt">[</span>i<span class="hl opt">] =</span> <span class="hl kwa">new</span> <span class="hl kwb">byte</span><span class="hl opt">[</span>width_bytes<span class="hl opt">];</span>

      Thread<span class="hl opt">[]</span> threads <span class="hl opt">=</span> <span class="hl kwa">new</span> Thread<span class="hl opt">[</span>Environment<span class="hl opt">.</span>ProcessorCount<span class="hl opt">];</span>
      <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> threads<span class="hl opt">.</span>Length<span class="hl opt">;</span> i<span class="hl opt">++)</span>
      <span class="hl opt">{</span>
         threads<span class="hl opt">[</span>i<span class="hl opt">] =</span> <span class="hl kwa">new</span> <span class="hl kwd">Thread</span><span class="hl opt">(</span>MandelBrot<span class="hl opt">.</span>Calculate<span class="hl opt">);</span>
            threads<span class="hl opt">[</span>i<span class="hl opt">].</span><span class="hl kwd">Start</span><span class="hl opt">();</span>
      <span class="hl opt">}</span>

      <span class="hl kwa">foreach</span> <span class="hl opt">(</span>Thread t <span class="hl kwa">in</span> threads<span class="hl opt">)</span>
         t<span class="hl opt">.</span><span class="hl kwd">Join</span><span class="hl opt">();</span>

        Stream s <span class="hl opt">=</span> Console<span class="hl opt">.</span><span class="hl kwd">OpenStandardOutput</span><span class="hl opt">();</span>
      <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> y <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> y <span class="hl opt">&lt;</span> N<span class="hl opt">;</span> y<span class="hl opt">++)</span>
         s<span class="hl opt">.</span><span class="hl kwd">Write</span><span class="hl opt">(</span> data<span class="hl opt">[</span>y<span class="hl opt">],</span> <span class="hl num">0</span><span class="hl opt">,</span> nbyte_each_line<span class="hl opt">[</span>y<span class="hl opt">]);</span>
   <span class="hl opt">}</span>


   <span class="hl kwa">private static</span> <span class="hl kwb">int</span> current_line <span class="hl opt">= -</span><span class="hl num">1</span><span class="hl opt">;</span>

   <span class="hl kwa">private static</span> <span class="hl kwb">void</span> <span class="hl kwd">Calculate</span><span class="hl opt">()</span>
   <span class="hl opt">{</span>
      <span class="hl kwb">double</span> inverse_n <span class="hl opt">=</span> <span class="hl num">2.0</span> <span class="hl opt">/</span> N<span class="hl opt">;</span>

      <span class="hl kwb">int</span> y<span class="hl opt">;</span>
      <span class="hl kwa">while</span> <span class="hl opt">((</span>y <span class="hl opt">=</span> Interlocked<span class="hl opt">.</span><span class="hl kwd">Increment</span><span class="hl opt">(</span><span class="hl kwa">ref</span> current_line<span class="hl opt">)) &lt;</span> N<span class="hl opt">)</span> <span class="hl slc">// fetch a line</span>
      <span class="hl opt">{</span>
            <span class="hl kwb">byte</span><span class="hl opt">[]</span> pdata <span class="hl opt">=</span> data<span class="hl opt">[</span>y<span class="hl opt">];</span>

         <span class="hl kwb">int</span> byte_count  <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
            <span class="hl kwb">int</span> bit_num     <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
            <span class="hl kwb">int</span> byte_acc    <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>

            <span class="hl kwb">double</span> Civ <span class="hl opt">=</span> y <span class="hl opt">*</span> inverse_n <span class="hl opt">-</span> <span class="hl num">1.0</span><span class="hl opt">;</span>

         <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> x <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> x <span class="hl opt">&lt;</span> N<span class="hl opt">;</span> x<span class="hl opt">++)</span>
         <span class="hl opt">{</span>
            <span class="hl kwb">double</span> Crv <span class="hl opt">=</span> x <span class="hl opt">*</span> inverse_n <span class="hl opt">-</span> <span class="hl num">1.5</span><span class="hl opt">;</span>

            <span class="hl kwb">double</span> Zrv   <span class="hl opt">=</span> Crv<span class="hl opt">;</span>
            <span class="hl kwb">double</span> Ziv   <span class="hl opt">=</span> Civ<span class="hl opt">;</span>
            <span class="hl kwb">double</span> Trv   <span class="hl opt">=</span> Crv <span class="hl opt">*</span> Crv<span class="hl opt">;</span>
            <span class="hl kwb">double</span> Tiv   <span class="hl opt">=</span> Civ <span class="hl opt">*</span> Civ<span class="hl opt">;</span>

            <span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">49</span><span class="hl opt">;</span>
            <span class="hl kwa">do</span>
            <span class="hl opt">{</span>
               Ziv <span class="hl opt">= (</span>Zrv<span class="hl opt">*</span>Ziv<span class="hl opt">) + (</span>Zrv<span class="hl opt">*</span>Ziv<span class="hl opt">) +</span> Civ<span class="hl opt">;</span>
               Zrv <span class="hl opt">=</span> Trv <span class="hl opt">-</span> Tiv <span class="hl opt">+</span> Crv<span class="hl opt">;</span>

               Trv <span class="hl opt">=</span> Zrv <span class="hl opt">*</span> Zrv<span class="hl opt">;</span>
               Tiv <span class="hl opt">=</span> Ziv <span class="hl opt">*</span> Ziv<span class="hl opt">;</span>
            <span class="hl opt">}</span>   <span class="hl kwa">while</span> <span class="hl opt">( ((</span>Trv <span class="hl opt">+</span> Tiv<span class="hl opt">) &lt;=</span> <span class="hl num">4.0</span><span class="hl opt">) &amp;&amp; (--</span>i <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">) );</span>

            byte_acc <span class="hl opt">&lt;&lt;=</span> <span class="hl num">1</span><span class="hl opt">;</span>
            byte_acc |<span class="hl opt">= (</span>i <span class="hl opt">==</span> <span class="hl num">0</span><span class="hl opt">)</span> ? <span class="hl num">1</span> <span class="hl opt">:</span> <span class="hl num">0</span><span class="hl opt">;</span>

            <span class="hl kwa">if</span> <span class="hl opt">(++</span>bit_num <span class="hl opt">==</span> <span class="hl num">8</span><span class="hl opt">)</span>
            <span class="hl opt">{</span>
                    pdata<span class="hl opt">[</span>byte_count<span class="hl opt">] = (</span><span class="hl kwb">byte</span><span class="hl opt">)</span>byte_acc<span class="hl opt">;</span>
               byte_count<span class="hl opt">++;</span>
               bit_num <span class="hl opt">=</span> byte_acc <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
            <span class="hl opt">}</span>
         <span class="hl opt">}</span> <span class="hl slc">// end foreach (column)</span>

         <span class="hl kwa">if</span> <span class="hl opt">(</span>bit_num <span class="hl opt">!=</span> <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl slc">// write left over bits</span>
         <span class="hl opt">{</span>
            byte_acc <span class="hl opt">&lt;&lt;= (</span><span class="hl num">8</span> <span class="hl opt">- (</span>N <span class="hl opt">&amp;</span> <span class="hl num">7</span><span class="hl opt">));</span>
            pdata<span class="hl opt">[</span>byte_count<span class="hl opt">] = (</span><span class="hl kwb">byte</span><span class="hl opt">)</span>byte_acc<span class="hl opt">;</span>
            byte_count<span class="hl opt">++;</span>
         <span class="hl opt">}</span>

         nbyte_each_line<span class="hl opt">[</span>y<span class="hl opt">] =</span> byte_count<span class="hl opt">;</span>
      <span class="hl opt">}</span>
   <span class="hl opt">}</span>
<span class="hl opt">};</span>
