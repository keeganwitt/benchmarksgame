<span class="hl com">/*</span>
<span class="hl com"> * The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"> * Contributed by Premysl Hruby</span>
<span class="hl com"> * convert to C++ by The Anh Tran</span>
<span class="hl com"> */</span>

<span class="hl ppc">#include &lt;pthread.h&gt;</span>
<span class="hl ppc">#include &lt;sched.h&gt;</span>
<span class="hl ppc">#include &lt;cstdio&gt;</span>
<span class="hl ppc">#include &lt;cstdlib&gt;</span>

<span class="hl kwc">typedef</span> <span class="hl kwb">unsigned int</span> uint<span class="hl opt">;</span>

<span class="hl kwb">const</span> uint NUM_THREADS   <span class="hl opt">=</span> <span class="hl num">503</span><span class="hl opt">;</span>
<span class="hl kwb">const</span> uint STACK_SIZE   <span class="hl opt">=</span> <span class="hl num">16</span><span class="hl opt">*</span><span class="hl num">1024</span><span class="hl opt">;</span>


<span class="hl kwb">int</span>   token<span class="hl opt">;</span>

pthread_mutex_t      mutex   <span class="hl opt">[</span>NUM_THREADS<span class="hl opt">];</span>
pthread_t         threadid<span class="hl opt">[</span>NUM_THREADS<span class="hl opt">];</span>
<span class="hl kwb">char</span>            stacks   <span class="hl opt">[</span>NUM_THREADS<span class="hl opt">][</span>STACK_SIZE<span class="hl opt">];</span>


<span class="hl kwb">static</span>
<span class="hl kwb">void</span><span class="hl opt">*</span> <span class="hl kwd">thread_func</span><span class="hl opt">(</span> <span class="hl kwb">void</span> <span class="hl opt">*</span>num <span class="hl opt">)</span>
<span class="hl opt">{</span>
   <span class="hl kwb">size_t</span> thisnode      <span class="hl opt">=</span> <span class="hl kwa">reinterpret_cast</span><span class="hl opt">&lt;</span><span class="hl kwb">size_t</span><span class="hl opt">&gt;(</span>num<span class="hl opt">);</span>
   <span class="hl kwb">int</span> nextnode      <span class="hl opt">= (</span> thisnode <span class="hl opt">+</span> <span class="hl num">1</span> <span class="hl opt">) %</span> NUM_THREADS<span class="hl opt">;</span>

   pthread_mutex_t   <span class="hl opt">*</span>mutex_this_node <span class="hl opt">=</span> mutex <span class="hl opt">+</span> thisnode<span class="hl opt">;</span>
   pthread_mutex_t   <span class="hl opt">*</span>mutex_next_node <span class="hl opt">=</span> mutex <span class="hl opt">+</span> nextnode<span class="hl opt">;</span>

   <span class="hl kwa">while</span> <span class="hl opt">(</span><span class="hl kwa">true</span><span class="hl opt">)</span> 
   <span class="hl opt">{</span>
      <span class="hl kwd">pthread_mutex_lock</span><span class="hl opt">(</span> mutex_this_node <span class="hl opt">);</span>

      <span class="hl kwa">if</span> <span class="hl opt">(</span> token <span class="hl opt">&gt;</span> <span class="hl num">0</span> <span class="hl opt">)</span> 
      <span class="hl opt">{</span>
         token<span class="hl opt">--;</span>
         <span class="hl kwd">pthread_mutex_unlock</span><span class="hl opt">(</span> mutex_next_node <span class="hl opt">);</span>
      <span class="hl opt">}</span>
      <span class="hl kwa">else</span> 
      <span class="hl opt">{</span>
          <span class="hl kwd">printf</span><span class="hl opt">(</span> <span class="hl str">&quot;%d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> <span class="hl kwa">static_cast</span><span class="hl opt">&lt;</span><span class="hl kwb">int</span><span class="hl opt">&gt;(</span>thisnode <span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">) );</span>
          <span class="hl kwd">exit</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">);</span>
      <span class="hl opt">}</span>
   <span class="hl opt">}</span>

   <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>


<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span><span class="hl opt">**</span> args<span class="hl opt">)</span>
<span class="hl opt">{</span>
   <span class="hl kwa">if</span> <span class="hl opt">(</span>argc <span class="hl opt">&gt;=</span> <span class="hl num">2</span><span class="hl opt">)</span>
      token <span class="hl opt">=</span> <span class="hl kwd">atoi</span><span class="hl opt">(</span>args<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">]);</span>
   <span class="hl kwa">else</span>
      token <span class="hl opt">=</span> <span class="hl num">1000</span><span class="hl opt">;</span> <span class="hl slc">// test case</span>

   pthread_attr_t stack_attr<span class="hl opt">;</span>
   <span class="hl kwd">pthread_attr_init</span><span class="hl opt">(&amp;</span>stack_attr<span class="hl opt">);</span>

   <span class="hl kwa">for</span> <span class="hl opt">(</span>uint i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> NUM_THREADS<span class="hl opt">;</span> i<span class="hl opt">++)</span> 
   <span class="hl opt">{</span>
      <span class="hl slc">// init mutex objects</span>
      <span class="hl kwd">pthread_mutex_init</span><span class="hl opt">( &amp;(</span>mutex<span class="hl opt">[</span>i<span class="hl opt">]),</span> <span class="hl num">0</span><span class="hl opt">);</span>
      <span class="hl kwd">pthread_mutex_lock</span><span class="hl opt">( &amp;(</span>mutex<span class="hl opt">[</span>i<span class="hl opt">]) );</span>

      <span class="hl slc">// manual set stack space &amp; stack size for each thread</span>
      <span class="hl slc">// to reduce memory usage</span>
      <span class="hl kwd">pthread_attr_setstack</span><span class="hl opt">( &amp;</span>stack_attr<span class="hl opt">, &amp;(</span>stacks<span class="hl opt">[</span>i<span class="hl opt">]),</span> STACK_SIZE <span class="hl opt">);</span>

      <span class="hl slc">// create thread using specified stackspace</span>
      <span class="hl kwd">pthread_create</span><span class="hl opt">( &amp;(</span>threadid<span class="hl opt">[</span>i<span class="hl opt">]), &amp;</span>stack_attr<span class="hl opt">, &amp;</span>thread_func<span class="hl opt">,</span> <span class="hl kwa">reinterpret_cast</span><span class="hl opt">&lt;</span><span class="hl kwb">void</span><span class="hl opt">*&gt;(</span>i<span class="hl opt">) );</span>
   <span class="hl opt">}</span>

   <span class="hl slc">// start game</span>
   <span class="hl kwd">pthread_mutex_unlock</span><span class="hl opt">( &amp;(</span>mutex<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">]) );</span>

   <span class="hl slc">// wait for result</span>
   <span class="hl kwd">pthread_join</span><span class="hl opt">(</span> threadid<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">],</span> <span class="hl num">0</span> <span class="hl opt">);</span>

   <span class="hl kwa">return</span> <span class="hl num">1</span><span class="hl opt">;</span>
<span class="hl opt">}</span>

