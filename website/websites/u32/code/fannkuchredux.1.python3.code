<span class="hl slc"># The Computer Language Benchmarks Game</span>
<span class="hl slc"># http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">#</span>
<span class="hl slc"># contributed by Miroslav Rubanets</span>
<span class="hl slc"># algorithm is based on Java 6 source code by Oleg Mazurov</span>
<span class="hl slc"># source is based on Miroslav Rubanets' C++ submission.</span>
<span class="hl slc"># converted to python by Ian P. Cooke</span>

<span class="hl kwa">import</span> sys
<span class="hl kwa">from</span> multiprocessing <span class="hl kwa">import</span> cpu_count<span class="hl opt">,</span> Pool

MAX_PROBLEM_SIZE <span class="hl opt">=</span> <span class="hl num">12</span>
MAX_CPU_LIMIT <span class="hl opt">=</span> <span class="hl num">4</span>

<span class="hl kwa">class</span> Result<span class="hl opt">:</span>
    <span class="hl kwa">def</span> <span class="hl kwd">__init__</span><span class="hl opt">(</span>self<span class="hl opt">,</span> maxflips<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">,</span> checksum<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">):</span>
        self<span class="hl opt">.</span>maxflips <span class="hl opt">=</span> maxflips
        self<span class="hl opt">.</span>checksum <span class="hl opt">=</span> checksum
    <span class="hl kwa">def</span> <span class="hl kwd">accumulate</span><span class="hl opt">(</span>self<span class="hl opt">,</span> other<span class="hl opt">):</span>
        self<span class="hl opt">.</span>maxflips <span class="hl opt">=</span> <span class="hl kwb">max</span><span class="hl opt">(</span> self<span class="hl opt">.</span>maxflips<span class="hl opt">,</span> other<span class="hl opt">.</span>maxflips <span class="hl opt">);</span>
        self<span class="hl opt">.</span>checksum <span class="hl opt">+=</span> other<span class="hl opt">.</span>checksum<span class="hl opt">;</span>
        
<span class="hl kwa">class</span> PermutationGenerator<span class="hl opt">:</span>
    <span class="hl kwa">def</span> <span class="hl kwd">__init__</span><span class="hl opt">(</span>self<span class="hl opt">,</span> length<span class="hl opt">,</span> factorials<span class="hl opt">,</span> idx<span class="hl opt">):</span>
        self<span class="hl opt">.</span>perm <span class="hl opt">= [</span><span class="hl num">0</span><span class="hl opt">] *</span> MAX_PROBLEM_SIZE
        self<span class="hl opt">.</span>count <span class="hl opt">= [</span><span class="hl num">0</span><span class="hl opt">] *</span> MAX_PROBLEM_SIZE
        self<span class="hl opt">.</span>length <span class="hl opt">=</span> length
        self<span class="hl opt">.</span>factorials <span class="hl opt">=</span> factorials
        self<span class="hl opt">.</span><span class="hl kwd">first_permutation</span><span class="hl opt">(</span> idx <span class="hl opt">)</span>

    <span class="hl kwa">def</span> <span class="hl kwd">first_permutation</span><span class="hl opt">(</span> self<span class="hl opt">,</span> idx <span class="hl opt">):</span>
        pp <span class="hl opt">= [</span><span class="hl num">0</span><span class="hl opt">] *</span> MAX_PROBLEM_SIZE
        p <span class="hl opt">=</span>  <span class="hl kwb">list</span><span class="hl opt">(</span><span class="hl kwb">range</span><span class="hl opt">(</span>MAX_PROBLEM_SIZE<span class="hl opt">))</span>
        
        <span class="hl kwa">for</span> i <span class="hl kwa">in</span> <span class="hl kwb">range</span><span class="hl opt">(</span> self<span class="hl opt">.</span>length <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">, -</span><span class="hl num">1</span> <span class="hl opt">):</span>
            d <span class="hl opt">=</span> idx <span class="hl opt">//</span> self<span class="hl opt">.</span>factorials<span class="hl opt">[</span>i<span class="hl opt">]</span>
            self<span class="hl opt">.</span>count<span class="hl opt">[</span>i<span class="hl opt">] =</span> d
            idx <span class="hl opt">=</span> idx <span class="hl opt">%</span> self<span class="hl opt">.</span>factorials<span class="hl opt">[</span>i<span class="hl opt">]</span>
            pp<span class="hl opt">[:</span>i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">] =</span> p<span class="hl opt">[:</span>i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">]</span>
            <span class="hl kwa">for</span> j <span class="hl kwa">in</span> <span class="hl kwb">range</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">):</span>
                <span class="hl kwa">if</span> j<span class="hl opt">+</span>d <span class="hl opt">&lt;=</span> i<span class="hl opt">:</span>
                    p<span class="hl opt">[</span>j<span class="hl opt">] =</span> pp<span class="hl opt">[</span>j<span class="hl opt">+</span>d<span class="hl opt">]</span>
                <span class="hl kwa">else</span><span class="hl opt">:</span>
                    p<span class="hl opt">[</span>j<span class="hl opt">] =</span> pp<span class="hl opt">[</span>j<span class="hl opt">+</span>d<span class="hl opt">-</span>i<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">]</span>
        self<span class="hl opt">.</span>perm<span class="hl opt">[:</span>self<span class="hl opt">.</span>length<span class="hl opt">] =</span> p<span class="hl opt">[:</span>self<span class="hl opt">.</span>length<span class="hl opt">]</span>

    <span class="hl kwa">def</span> <span class="hl kwd">next_permutation</span><span class="hl opt">(</span> self <span class="hl opt">):</span>
        <span class="hl slc">#rotate</span>
        first <span class="hl opt">=</span> self<span class="hl opt">.</span>perm<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">]</span>
        self<span class="hl opt">.</span>perm<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] =</span> self<span class="hl opt">.</span>perm<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">]</span>
        self<span class="hl opt">.</span>perm<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">] =</span> first
        self<span class="hl opt">.</span>count<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">] +=</span> <span class="hl num">1</span>

        i<span class="hl opt">=</span><span class="hl num">1</span>
        <span class="hl kwa">while</span> self<span class="hl opt">.</span>count<span class="hl opt">[</span>i<span class="hl opt">] &gt;</span> i<span class="hl opt">:</span>
            self<span class="hl opt">.</span>count<span class="hl opt">[</span>i<span class="hl opt">] =</span> <span class="hl num">0</span>
            i <span class="hl opt">+=</span> <span class="hl num">1</span>
            <span class="hl kwa">if</span> i <span class="hl opt">&gt;=</span> MAX_PROBLEM_SIZE<span class="hl opt">:</span>
              <span class="hl kwa">break</span>
            self<span class="hl opt">.</span>count<span class="hl opt">[</span>i<span class="hl opt">] +=</span> <span class="hl num">1</span>
            <span class="hl slc">#rotate</span>
            first <span class="hl opt">=</span> self<span class="hl opt">.</span>perm<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">]</span>
            self<span class="hl opt">.</span>perm<span class="hl opt">[:</span>i<span class="hl opt">] =</span> self<span class="hl opt">.</span>perm<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">:</span>i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">]</span>
            self<span class="hl opt">.</span>perm<span class="hl opt">[</span>i<span class="hl opt">] =</span> first

<span class="hl kwa">def</span> <span class="hl kwd">task_body</span><span class="hl opt">(</span> length<span class="hl opt">,</span> factorials<span class="hl opt">,</span> first_index<span class="hl opt">,</span> last_index <span class="hl opt">):</span>
    <span class="hl kwa">try</span><span class="hl opt">:</span>
      g <span class="hl opt">=</span> <span class="hl kwd">PermutationGenerator</span><span class="hl opt">(</span>length<span class="hl opt">,</span> factorials<span class="hl opt">,</span> first_index<span class="hl opt">)</span>
      maxflips <span class="hl opt">=</span> <span class="hl num">0</span>
      checksum <span class="hl opt">=</span> <span class="hl num">0</span>
      <span class="hl kwa">for</span> i <span class="hl kwa">in</span> <span class="hl kwb">range</span><span class="hl opt">(</span>first_index<span class="hl opt">,</span> last_index<span class="hl opt">):</span>
          data <span class="hl opt">= [</span><span class="hl num">0</span><span class="hl opt">] *</span> MAX_PROBLEM_SIZE
          flips <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>        
          f <span class="hl opt">=</span>  g<span class="hl opt">.</span>perm<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">];</span>
          <span class="hl kwa">if</span> f <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">:</span>
              data<span class="hl opt">[:</span>length<span class="hl opt">] =</span> g<span class="hl opt">.</span>perm<span class="hl opt">[:</span>length<span class="hl opt">]</span>
              <span class="hl kwa">while True</span><span class="hl opt">:</span>
                  data<span class="hl opt">[:</span>f<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">] =</span> data<span class="hl opt">[</span>f<span class="hl opt">::-</span><span class="hl num">1</span><span class="hl opt">]</span> <span class="hl slc">#reverse</span>
                  flips <span class="hl opt">+=</span> <span class="hl num">1</span>
                  f <span class="hl opt">=</span> data<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">]</span>
                  <span class="hl kwa">if</span> f <span class="hl opt">==</span> <span class="hl num">0</span><span class="hl opt">:</span>
                      <span class="hl kwa">break</span>
          maxflips <span class="hl opt">=</span> <span class="hl kwb">max</span><span class="hl opt">(</span>maxflips<span class="hl opt">,</span> flips<span class="hl opt">)</span>
          checksum <span class="hl opt">+=</span>  flips <span class="hl kwa">if</span> i<span class="hl opt">%</span><span class="hl num">2</span> <span class="hl opt">==</span> <span class="hl num">0</span> <span class="hl kwa">else</span> <span class="hl opt">-</span>flips
          g<span class="hl opt">.</span><span class="hl kwd">next_permutation</span><span class="hl opt">()</span>
    <span class="hl kwa">except</span><span class="hl opt">:</span>
      <span class="hl kwa">import</span> traceback<span class="hl opt">;</span> traceback<span class="hl opt">.</span><span class="hl kwd">print_exc</span><span class="hl opt">()</span>

    <span class="hl kwa">return</span> <span class="hl kwd">Result</span><span class="hl opt">(</span>maxflips<span class="hl opt">=</span>maxflips<span class="hl opt">,</span> checksum<span class="hl opt">=</span>checksum<span class="hl opt">)</span>


<span class="hl kwa">def</span> <span class="hl kwd">create_factorials</span><span class="hl opt">(</span>length<span class="hl opt">):</span>
    factorials <span class="hl opt">= [</span><span class="hl num">0</span><span class="hl opt">] * (</span>MAX_PROBLEM_SIZE<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)</span>
    factorials<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] =</span> <span class="hl num">1</span>
    <span class="hl kwa">for</span> i <span class="hl kwa">in</span> <span class="hl kwb">range</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">,</span> length<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">):</span>
        factorials<span class="hl opt">[</span>i<span class="hl opt">] =</span> factorials<span class="hl opt">[</span>i<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">]*</span>i<span class="hl opt">;</span>
    <span class="hl kwa">return</span> factorials

usage <span class="hl opt">=</span> <span class="hl str">&quot;&quot;&quot;usage fannkuchredux number</span>
<span class="hl str">number has to be in range [3-12]</span><span class="hl esc">\n</span><span class="hl str">&quot;&quot;&quot;</span><span class="hl opt">;</span>

<span class="hl kwa">def</span> <span class="hl kwd">main</span><span class="hl opt">():</span>
    <span class="hl kwa">if</span> <span class="hl kwb">len</span><span class="hl opt">(</span>sys<span class="hl opt">.</span>argv<span class="hl opt">) &lt;</span> <span class="hl num">2</span><span class="hl opt">:</span>
        <span class="hl kwa">print</span><span class="hl opt">(</span>usage<span class="hl opt">)</span>
        <span class="hl kwa">return</span> <span class="hl num">1</span>

    length <span class="hl opt">=</span> <span class="hl kwb">int</span><span class="hl opt">(</span>sys<span class="hl opt">.</span>argv<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">])</span>
    <span class="hl kwa">if</span> length <span class="hl opt">&lt;</span> <span class="hl num">3</span> <span class="hl kwa">or</span> length <span class="hl opt">&gt;</span> MAX_PROBLEM_SIZE<span class="hl opt">:</span>
        <span class="hl kwa">print</span><span class="hl opt">(</span>usage<span class="hl opt">)</span>
        <span class="hl kwa">return</span> <span class="hl num">2</span>

    n <span class="hl opt">=</span> <span class="hl kwb">min</span><span class="hl opt">(</span> <span class="hl kwd">cpu_count</span><span class="hl opt">(),</span> MAX_CPU_LIMIT <span class="hl opt">)</span>
    processors <span class="hl opt">=</span> <span class="hl kwd">Pool</span><span class="hl opt">(</span>processes<span class="hl opt">=</span>n<span class="hl opt">)</span>

    factorials <span class="hl opt">=</span> <span class="hl kwd">create_factorials</span><span class="hl opt">(</span>length<span class="hl opt">)</span>

    result <span class="hl opt">=</span> <span class="hl kwd">Result</span><span class="hl opt">()</span>
    index <span class="hl opt">=</span> <span class="hl num">0</span>
    index_max <span class="hl opt">=</span> factorials<span class="hl opt">[</span>length<span class="hl opt">]</span>
    index_step <span class="hl opt">= (</span>index_max <span class="hl opt">+</span> n<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">) //</span> n
    <span class="hl kwa">for</span> i <span class="hl kwa">in</span> <span class="hl kwb">range</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span>n<span class="hl opt">):</span>
        processors<span class="hl opt">.</span><span class="hl kwd">apply_async</span><span class="hl opt">(</span>task_body<span class="hl opt">, [</span> length<span class="hl opt">,</span> factorials<span class="hl opt">,</span> index<span class="hl opt">,</span> index <span class="hl opt">+</span> index_step<span class="hl opt">],</span> callback<span class="hl opt">=</span>result<span class="hl opt">.</span>accumulate<span class="hl opt">)</span>
        index <span class="hl opt">+=</span> index_step

    processors<span class="hl opt">.</span><span class="hl kwd">close</span><span class="hl opt">()</span>
    processors<span class="hl opt">.</span><span class="hl kwd">join</span><span class="hl opt">()</span>
    processors<span class="hl opt">.</span><span class="hl kwd">terminate</span><span class="hl opt">()</span>
    
    <span class="hl kwa">print</span><span class="hl opt">(</span><span class="hl str">&quot;%d</span><span class="hl esc">\n</span><span class="hl str">Pfannkuchen(%d) = %d&quot;</span> <span class="hl opt">% (</span> result<span class="hl opt">.</span>checksum<span class="hl opt">,</span> length<span class="hl opt">,</span> result<span class="hl opt">.</span>maxflips<span class="hl opt">) )</span>
    <span class="hl kwa">return</span> <span class="hl num">0</span>

<span class="hl kwa">if</span> __name__ <span class="hl opt">==</span> <span class="hl str">&quot;__main__&quot;</span><span class="hl opt">:</span>
  <span class="hl kwd">main</span><span class="hl opt">()</span>
