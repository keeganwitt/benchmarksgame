<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com">   contributed by Isaac Gouy</span>
<span class="hl com">   modified by Meiko Rachimow</span>
<span class="hl com">   updated for 2.8 by Rex Kerr</span>
<span class="hl com">*/</span>

<span class="hl kwa">object</span> spectralnorm <span class="hl opt">{</span>
  <span class="hl kwa">def</span> <span class="hl kwd">main</span><span class="hl opt">(</span>args<span class="hl opt">:</span> Array<span class="hl opt">[</span>String<span class="hl opt">]) = {</span>
    <span class="hl kwa">val</span> n <span class="hl opt">= (</span><span class="hl kwa">if</span> <span class="hl opt">(</span>args<span class="hl opt">.</span>length<span class="hl opt">&gt;</span><span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwd">args</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">).</span>toInt <span class="hl kwa">else</span> <span class="hl num">100</span><span class="hl opt">)</span>
    <span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;%.09f</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">, (</span><span class="hl kwa">new</span> <span class="hl kwd">SpectralNorm</span><span class="hl opt">(</span>n<span class="hl opt">)).</span><span class="hl kwd">approximate</span><span class="hl opt">())</span>
  <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl kwa">class</span> <span class="hl kwd">SpectralNorm</span><span class="hl opt">(</span>n<span class="hl opt">:</span> Int<span class="hl opt">) {</span>

  <span class="hl slc">// Ordinary and transposed versions of infinite matrix</span>
  <span class="hl kwa">val</span> A <span class="hl opt">= (</span>i<span class="hl opt">:</span> Int<span class="hl opt">,</span> j<span class="hl opt">:</span> Int<span class="hl opt">) =&gt;</span> <span class="hl num">1.0</span><span class="hl opt">/((</span>i<span class="hl opt">+</span>j<span class="hl opt">)*(</span>i<span class="hl opt">+</span>j<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)/</span><span class="hl num">2</span> <span class="hl opt">+</span>i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)</span>
  <span class="hl kwa">val</span> At <span class="hl opt">= (</span>j<span class="hl opt">:</span> Int<span class="hl opt">,</span> i<span class="hl opt">:</span> Int<span class="hl opt">) =&gt;</span> <span class="hl num">1.0</span><span class="hl opt">/((</span>i<span class="hl opt">+</span>j<span class="hl opt">)*(</span>i<span class="hl opt">+</span>j<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)/</span><span class="hl num">2</span> <span class="hl opt">+</span>i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)</span>

  <span class="hl slc">// Matrix multiplication w &lt;- M*v</span>
  <span class="hl kwa">def</span> <span class="hl kwd">mult</span><span class="hl opt">(</span>v<span class="hl opt">:</span> Array<span class="hl opt">[</span>Double<span class="hl opt">],</span> w<span class="hl opt">:</span> Array<span class="hl opt">[</span>Double<span class="hl opt">],</span> M<span class="hl opt">: (</span>Int<span class="hl opt">,</span>Int<span class="hl opt">)=&gt;</span> Double <span class="hl opt">) {</span>
    <span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span>
    <span class="hl kwa">while</span> <span class="hl opt">(</span>i <span class="hl opt">&lt;</span> n<span class="hl opt">) {</span>
     <span class="hl kwa">var</span> s <span class="hl opt">=</span> <span class="hl num">0.0</span>
     <span class="hl kwa">var</span> j <span class="hl opt">=</span> <span class="hl num">0</span>
     <span class="hl kwa">while</span> <span class="hl opt">(</span>j <span class="hl opt">&lt;</span> n<span class="hl opt">) {</span> s <span class="hl opt">+=</span> <span class="hl kwd">M</span><span class="hl opt">(</span>i<span class="hl opt">,</span>j<span class="hl opt">)*</span><span class="hl kwd">v</span><span class="hl opt">(</span>j<span class="hl opt">);</span> j <span class="hl opt">+=</span> <span class="hl num">1</span> <span class="hl opt">}</span>
     <span class="hl kwd">w</span><span class="hl opt">(</span>i<span class="hl opt">) =</span>  s
     i <span class="hl opt">+=</span> <span class="hl num">1</span>
    <span class="hl opt">}</span>
  <span class="hl opt">}</span>

  <span class="hl kwa">def</span> <span class="hl kwd">approximate</span><span class="hl opt">() = {</span>
    <span class="hl kwa">val</span> u<span class="hl opt">,</span>v<span class="hl opt">,</span>w <span class="hl opt">=</span> Array<span class="hl opt">.</span><span class="hl kwd">fill</span><span class="hl opt">(</span>n<span class="hl opt">)(</span><span class="hl num">1.0</span><span class="hl opt">)</span>

    <span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span>
    <span class="hl kwa">while</span> <span class="hl opt">(</span>i <span class="hl opt">&lt;</span> <span class="hl num">10</span><span class="hl opt">) {</span>
      <span class="hl slc">// Multiply by matrix &amp; transpose</span>
      <span class="hl kwd">mult</span><span class="hl opt">(</span>u<span class="hl opt">,</span>w<span class="hl opt">,</span>A<span class="hl opt">)</span>
      <span class="hl kwd">mult</span><span class="hl opt">(</span>w<span class="hl opt">,</span>v<span class="hl opt">,</span>At<span class="hl opt">)</span>
      <span class="hl kwd">mult</span><span class="hl opt">(</span>v<span class="hl opt">,</span>w<span class="hl opt">,</span>A<span class="hl opt">)</span>
      <span class="hl kwd">mult</span><span class="hl opt">(</span>w<span class="hl opt">,</span>u<span class="hl opt">,</span>At<span class="hl opt">)</span>
      i <span class="hl opt">+=</span> <span class="hl num">1</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">var</span> vbv<span class="hl opt">,</span>vv <span class="hl opt">=</span> <span class="hl num">0.0</span>
    i <span class="hl opt">=</span> <span class="hl num">0</span>
    <span class="hl kwa">while</span> <span class="hl opt">(</span>i <span class="hl opt">&lt;</span> n<span class="hl opt">) {</span>
      vbv <span class="hl opt">+=</span> <span class="hl kwd">u</span><span class="hl opt">(</span>i<span class="hl opt">)*</span><span class="hl kwd">v</span><span class="hl opt">(</span>i<span class="hl opt">)</span>
      vv <span class="hl opt">+=</span> <span class="hl kwd">v</span><span class="hl opt">(</span>i<span class="hl opt">)*</span><span class="hl kwd">v</span><span class="hl opt">(</span>i<span class="hl opt">)</span>
      i <span class="hl opt">+=</span> <span class="hl num">1</span>
    <span class="hl opt">}</span>

    math<span class="hl opt">.</span><span class="hl kwd">sqrt</span><span class="hl opt">(</span>vbv<span class="hl opt">/</span>vv<span class="hl opt">)</span>
  <span class="hl opt">}</span>
<span class="hl opt">}</span>
