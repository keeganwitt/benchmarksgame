<span class="hl slc">;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;; http://benchmarksgame.alioth.debian.org/</span>

<span class="hl slc">;; Based on the Racket version of the benchmark by Matthew Flatt</span>
<span class="hl slc">;;; contributed by PheliX</span>

<span class="hl sym">(</span>ns pidigits
  <span class="hl sym">(:</span>gen<span class="hl sym">-</span>class<span class="hl sym">))</span>

<span class="hl sym">(</span>defn floor<span class="hl sym">-</span>ev <span class="hl sym">[</span>q r s t x<span class="hl sym">]</span>
  <span class="hl sym">(</span>quot <span class="hl sym">(+ (*</span> q x<span class="hl sym">)</span> r<span class="hl sym">) (+ (*</span> s x<span class="hl sym">)</span> t<span class="hl sym">)))</span>

<span class="hl sym">(</span>defn ncomp <span class="hl sym">[</span>q r s t q2 r2 s2 t2<span class="hl sym">]</span>
  <span class="hl sym">[(+ (*</span> q q2<span class="hl sym">) (*</span> r s2<span class="hl sym">))</span>
   <span class="hl sym">(+ (*</span> q r2<span class="hl sym">) (*</span> r t2<span class="hl sym">))</span>
   <span class="hl sym">(+ (*</span> s q2<span class="hl sym">) (*</span> t s2<span class="hl sym">))</span>
   <span class="hl sym">(+ (*</span> s r2<span class="hl sym">) (*</span> t t2<span class="hl sym">))])</span>

<span class="hl sym">(</span>defn digit <span class="hl sym">[</span>k q r s t n row col<span class="hl sym">]</span>
  <span class="hl sym">(</span>if <span class="hl sym">(&gt;</span> n <span class="hl num">0</span><span class="hl sym">)</span>
    <span class="hl sym">(</span>let <span class="hl sym">[</span>y <span class="hl sym">(</span>floor<span class="hl sym">-</span>ev q r s t <span class="hl num">3</span><span class="hl sym">)]</span>
      <span class="hl sym">(</span>if <span class="hl sym">(==</span> y <span class="hl sym">(</span>floor<span class="hl sym">-</span>ev q r s t <span class="hl num">4</span><span class="hl sym">))</span>
	<span class="hl sym">(</span>let <span class="hl sym">[[</span>q r s t<span class="hl sym">] (</span>ncomp <span class="hl num">10</span> <span class="hl sym">(* -</span><span class="hl num">10</span> y<span class="hl sym">)</span> <span class="hl num">0 1</span> q r s t<span class="hl sym">)]</span>
	  <span class="hl sym">(</span>if <span class="hl sym">(==</span> col <span class="hl num">10</span><span class="hl sym">)</span>
	    <span class="hl sym">(</span>let <span class="hl sym">[</span>row <span class="hl sym">(+</span> row <span class="hl num">10</span><span class="hl sym">)]</span>
	      <span class="hl sym">(</span>printf <span class="hl str">&quot;</span><span class="hl esc">\</span><span class="hl str">t:%d</span><span class="hl esc">\</span><span class="hl str">n%d&quot;</span> row y<span class="hl sym">)</span>
	      <span class="hl sym">(</span>recur k q r s t <span class="hl sym">(</span>dec n<span class="hl sym">)</span> row <span class="hl num">1</span><span class="hl sym">))</span>
	    <span class="hl sym">(</span>do <span class="hl sym">(</span>printf <span class="hl str">&quot;%d&quot;</span> y<span class="hl sym">)</span>
		<span class="hl sym">(</span>recur k q r s t <span class="hl sym">(</span>dec n<span class="hl sym">)</span> row <span class="hl sym">(</span>inc col<span class="hl sym">)))))</span>
	<span class="hl sym">(</span>let <span class="hl sym">[[</span>q r s t<span class="hl sym">] (</span>ncomp q r s t k <span class="hl sym">(*</span> <span class="hl num">2</span> <span class="hl sym">(</span>inc <span class="hl sym">(*</span> <span class="hl num">2</span> k<span class="hl sym">)))</span> <span class="hl num">0</span> <span class="hl sym">(</span>inc <span class="hl sym">(*</span> <span class="hl num">2</span> k<span class="hl sym">)))]</span>
	  <span class="hl sym">(</span>recur <span class="hl sym">(</span>inc k<span class="hl sym">)</span> q r s t n row col<span class="hl sym">))))</span>
    <span class="hl sym">(</span>printf <span class="hl str">&quot;%s</span><span class="hl esc">\</span><span class="hl str">t:%d</span><span class="hl esc">\</span><span class="hl str">n&quot;</span> <span class="hl sym">(</span>apply str <span class="hl sym">(</span>repeat <span class="hl sym">(-</span> <span class="hl num">10</span> col<span class="hl sym">)</span> <span class="hl str">&quot; &quot;</span><span class="hl sym">)) (+</span> row col<span class="hl sym">))))</span>

<span class="hl sym">(</span>defn <span class="hl sym">-</span>main <span class="hl sym">[&amp;</span> args<span class="hl sym">]</span>
  <span class="hl sym">(</span>let <span class="hl sym">[</span>n <span class="hl sym">(</span>try <span class="hl sym">(</span>Integer<span class="hl sym">/</span>parseInt <span class="hl sym">(</span>first args<span class="hl sym">))</span>
               <span class="hl sym">(</span>catch NumberFormatException e <span class="hl num">27</span><span class="hl sym">))]</span>
    <span class="hl sym">(</span>digit <span class="hl num">1 1 0 0 1</span> n <span class="hl num">0 0</span><span class="hl sym">))</span>
  <span class="hl sym">(</span>flush<span class="hl sym">))</span>
