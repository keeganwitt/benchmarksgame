<span class="hl slc">-- The Computer Language Benchmarks Game</span>
<span class="hl slc">-- http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">-- contributed by Mike Pall</span>

<span class="hl slc">-- Start of dynamically compiled chunk.</span>
<span class="hl kwa">local</span> chunk <span class="hl opt">= [=[</span>

<span class="hl slc">-- Factory function for multi-precision number (mpn) operations.</span>
<span class="hl kwa">local function</span> <span class="hl kwd">fmm</span><span class="hl opt">(</span>fa<span class="hl opt">,</span> fb<span class="hl opt">)</span>
  <span class="hl kwa">return</span> <span class="hl kwd">loadstring</span><span class="hl opt">(</span><span class="hl str">[[</span>
<span class="hl str">    return function(y, a, ka, b, kb)</span>
<span class="hl str">      local carry, n = 0, #a ]]</span><span class="hl opt">..(</span>fb <span class="hl opt">==</span> <span class="hl num">0</span> <span class="hl kwa">and</span> <span class="hl str">&quot;&quot;</span> <span class="hl kwa">or</span> <span class="hl str">[[</span>
<span class="hl str">      local na, nb = n, #b -- Need to adjust lengths. 1 element suffices here.</span>
<span class="hl str">      if na &gt; nb then b[na] = 0 elseif na &lt; nb then a[nb] = 0; n = nb end</span>
<span class="hl str">    ]]</span><span class="hl opt">)..</span><span class="hl str">[[</span>
<span class="hl str">      for i=1,n do -- Sum up all elements and propagate carry.</span>
<span class="hl str">        local x = a[i] ]]</span><span class="hl opt">..(</span>fa <span class="hl opt">==</span> <span class="hl num">2</span> <span class="hl kwa">and</span> <span class="hl str">&quot;*ka&quot;</span> <span class="hl kwa">or</span> <span class="hl str">&quot;&quot;</span><span class="hl opt">)..</span>
          <span class="hl opt">(</span>fb <span class="hl opt">==</span> <span class="hl num">2</span> <span class="hl kwa">and</span> <span class="hl str">&quot;+b[i]*kb&quot;</span> <span class="hl kwa">or</span> <span class="hl opt">(</span>fb <span class="hl opt">==</span> <span class="hl num">1</span> <span class="hl kwa">and</span> <span class="hl str">&quot;+b[i]&quot;</span> <span class="hl kwa">or</span> <span class="hl str">&quot;&quot;</span><span class="hl opt">))..</span><span class="hl str">[[ + carry</span>
<span class="hl str">        if x &lt; RADIX and x &gt;= 0 then carry = 0; y[i] = x -- Check for overflow.</span>
<span class="hl str">        else local d = x % RADIX; carry = (x-d) / RADIX; y[i] = d end</span>
<span class="hl str">      end</span>
<span class="hl str">      y[n+1] = nil -- Truncate target. 1 element suffices here.</span>
<span class="hl str">      if carry == 0 then while n &gt; 0 and y[n] == 0 do y[n] = nil end</span>
<span class="hl str">      elseif carry == -1 then y[n] = y[n] - RADIX else y[n+1] = carry end</span>
<span class="hl str">    ]]</span><span class="hl opt">..(</span>fb <span class="hl opt">==</span> <span class="hl num">0</span> <span class="hl kwa">and</span> <span class="hl str">&quot;&quot;</span> <span class="hl kwa">or</span> <span class="hl str">[[ -- Undo length adjustment.</span>
<span class="hl str">      if na &gt; nb then b[na] = nil elseif na &lt; nb and y ~= a then a[nb] = nil end</span>
<span class="hl str">    ]]</span><span class="hl opt">)..</span><span class="hl str">[[</span>
<span class="hl str">      return y</span>
<span class="hl str">    end]]</span><span class="hl opt">)()</span>
<span class="hl kwa">end</span>

<span class="hl slc">-- Generate needed mpn functions.</span>
<span class="hl kwa">local</span> mm_kk<span class="hl opt">,</span> mm_k1<span class="hl opt">,</span> mm_k0<span class="hl opt">,</span> mm_11 <span class="hl opt">=</span> <span class="hl kwd">fmm</span><span class="hl opt">(</span><span class="hl num">2</span><span class="hl opt">,</span> <span class="hl num">2</span><span class="hl opt">),</span> <span class="hl kwd">fmm</span><span class="hl opt">(</span><span class="hl num">2</span><span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">),</span> <span class="hl kwd">fmm</span><span class="hl opt">(</span><span class="hl num">2</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">),</span> <span class="hl kwd">fmm</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">)</span>

<span class="hl slc">-- Choose the most efficient mpn function for y = a*ka + b*kb at run-time.</span>
<span class="hl kwa">local function</span> <span class="hl kwd">mm</span><span class="hl opt">(</span>y<span class="hl opt">,</span> a<span class="hl opt">,</span> ka<span class="hl opt">,</span> b<span class="hl opt">,</span> kb<span class="hl opt">)</span>
  <span class="hl kwa">local</span> f <span class="hl opt">=</span> mm_kk
  <span class="hl kwa">if</span> kb <span class="hl opt">==</span> <span class="hl num">0</span> <span class="hl kwa">or</span> <span class="hl opt">#</span>b <span class="hl opt">==</span> <span class="hl num">0</span> <span class="hl kwa">then if</span> ka <span class="hl opt">==</span> <span class="hl num">1</span> <span class="hl kwa">then return</span> a <span class="hl kwa">else</span> f <span class="hl opt">=</span> mm_k0 <span class="hl kwa">end</span>
  <span class="hl kwa">elseif</span> kb <span class="hl opt">==</span> <span class="hl num">1</span> <span class="hl kwa">then if</span> ka <span class="hl opt">==</span> <span class="hl num">1</span> <span class="hl kwa">then</span> f <span class="hl opt">=</span> mm_11 <span class="hl kwa">else</span> f <span class="hl opt">=</span> mm_k1 <span class="hl kwa">end end</span>
  <span class="hl kwa">return</span> <span class="hl kwd">f</span><span class="hl opt">(</span>y<span class="hl opt">,</span> a<span class="hl opt">,</span> ka<span class="hl opt">,</span> b<span class="hl opt">,</span> kb<span class="hl opt">)</span>
<span class="hl kwa">end</span>

<span class="hl slc">-- Compose matrix with numbers on the right.</span>
<span class="hl kwa">local function</span> <span class="hl kwd">compose_r</span><span class="hl opt">(</span>aq<span class="hl opt">,</span>ar<span class="hl opt">,</span>as<span class="hl opt">,</span>at<span class="hl opt">,</span> bq<span class="hl opt">,</span>br<span class="hl opt">,</span>bs<span class="hl opt">,</span>bt<span class="hl opt">)</span>
  <span class="hl kwd">mm</span><span class="hl opt">(</span>ar<span class="hl opt">,</span> ar<span class="hl opt">,</span>bq<span class="hl opt">,</span> at<span class="hl opt">,</span>br<span class="hl opt">)</span> <span class="hl kwd">mm</span><span class="hl opt">(</span>at<span class="hl opt">,</span> at<span class="hl opt">,</span>bt<span class="hl opt">,</span> ar<span class="hl opt">,</span>bs<span class="hl opt">)</span>
  <span class="hl kwd">mm</span><span class="hl opt">(</span>as<span class="hl opt">,</span> as<span class="hl opt">,</span>bt<span class="hl opt">,</span> aq<span class="hl opt">,</span>bs<span class="hl opt">)</span> <span class="hl kwd">mm</span><span class="hl opt">(</span>aq<span class="hl opt">,</span> aq<span class="hl opt">,</span>bq<span class="hl opt">,</span> <span class="hl kwa">nil</span><span class="hl opt">,</span><span class="hl num">0</span><span class="hl opt">)</span>
<span class="hl kwa">end</span>

<span class="hl slc">-- Compose matrix with numbers on the left.</span>
<span class="hl kwa">local function</span> <span class="hl kwd">compose_l</span><span class="hl opt">(</span>aq<span class="hl opt">,</span>ar<span class="hl opt">,</span>as<span class="hl opt">,</span>at<span class="hl opt">,</span> bq<span class="hl opt">,</span>br<span class="hl opt">,</span>bs<span class="hl opt">,</span>bt<span class="hl opt">)</span>
  <span class="hl kwd">mm</span><span class="hl opt">(</span>ar<span class="hl opt">,</span> ar<span class="hl opt">,</span>bt<span class="hl opt">,</span> aq<span class="hl opt">,</span>br<span class="hl opt">)</span> <span class="hl kwd">mm</span><span class="hl opt">(</span>at<span class="hl opt">,</span> at<span class="hl opt">,</span>bt<span class="hl opt">,</span> as<span class="hl opt">,</span>br<span class="hl opt">)</span>
  <span class="hl kwd">mm</span><span class="hl opt">(</span>as<span class="hl opt">,</span> as<span class="hl opt">,</span>bq<span class="hl opt">,</span> at<span class="hl opt">,</span>bs<span class="hl opt">)</span> <span class="hl kwd">mm</span><span class="hl opt">(</span>aq<span class="hl opt">,</span> aq<span class="hl opt">,</span>bq<span class="hl opt">,</span> <span class="hl kwa">nil</span><span class="hl opt">,</span><span class="hl num">0</span><span class="hl opt">)</span>
<span class="hl kwa">end</span>

<span class="hl slc">-- Extract one digit.</span>
<span class="hl kwa">local</span> u<span class="hl opt">,</span> v<span class="hl opt">,</span> jj <span class="hl opt">= {}, {},</span> <span class="hl num">0</span>
<span class="hl kwa">local function</span> <span class="hl kwd">extract</span><span class="hl opt">(</span>q<span class="hl opt">,</span>r<span class="hl opt">,</span>s<span class="hl opt">,</span>t<span class="hl opt">,</span> j<span class="hl opt">)</span>
  <span class="hl kwa">local</span> u <span class="hl opt">=</span> j <span class="hl opt">==</span> jj <span class="hl opt">+</span> <span class="hl num">1</span> <span class="hl kwa">and</span> <span class="hl kwd">mm</span><span class="hl opt">(</span>u<span class="hl opt">,</span> u<span class="hl opt">,</span><span class="hl num">1</span><span class="hl opt">,</span> q<span class="hl opt">,</span><span class="hl num">1</span><span class="hl opt">)</span> <span class="hl kwa">or</span> <span class="hl kwd">mm</span><span class="hl opt">(</span>u<span class="hl opt">,</span> q<span class="hl opt">,</span>j<span class="hl opt">,</span> r<span class="hl opt">,</span><span class="hl num">1</span><span class="hl opt">);</span> jj <span class="hl opt">=</span> j
  <span class="hl kwa">local</span> v <span class="hl opt">=</span> <span class="hl kwd">mm</span><span class="hl opt">(</span>v<span class="hl opt">,</span> t<span class="hl opt">,</span><span class="hl num">1</span><span class="hl opt">,</span> s<span class="hl opt">,</span>j<span class="hl opt">)</span>
  <span class="hl kwa">local</span> nu<span class="hl opt">,</span> nv<span class="hl opt">,</span> y <span class="hl opt">= #</span>u<span class="hl opt">, #</span>v
  <span class="hl kwa">if</span> nu <span class="hl opt">==</span> nv <span class="hl kwa">then</span>
    <span class="hl kwa">if</span> nu <span class="hl opt">==</span> <span class="hl num">1</span> <span class="hl kwa">then</span> y <span class="hl opt">=</span> u<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">] /</span> v<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">]</span>
    <span class="hl kwa">else</span> y <span class="hl opt">= (</span>u<span class="hl opt">[</span>nu<span class="hl opt">]*</span>RADIX <span class="hl opt">+</span> u<span class="hl opt">[</span>nu<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">]) / (</span>v<span class="hl opt">[</span>nv<span class="hl opt">]*</span>RADIX <span class="hl opt">+</span> v<span class="hl opt">[</span>nv<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">])</span> <span class="hl kwa">end</span>
  <span class="hl kwa">elseif</span> nu <span class="hl opt">==</span> nv<span class="hl opt">+</span><span class="hl num">1</span> <span class="hl kwa">then</span> y <span class="hl opt">= (</span>u<span class="hl opt">[</span>nu<span class="hl opt">]*</span>RADIX <span class="hl opt">+</span> u<span class="hl opt">[</span>nv<span class="hl opt">]) /</span> v<span class="hl opt">[</span>nv<span class="hl opt">]</span>
  <span class="hl kwa">else return</span> <span class="hl num">0</span> <span class="hl kwa">end</span>
  <span class="hl kwa">return</span> math<span class="hl opt">.</span><span class="hl kwb">floor</span><span class="hl opt">(</span>y<span class="hl opt">)</span>
<span class="hl kwa">end</span>

<span class="hl slc">-- Coroutine which yields successive digits of PI.</span>
<span class="hl kwa">return</span> coroutine<span class="hl opt">.</span><span class="hl kwd">wrap</span><span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">()</span>
  <span class="hl kwa">local</span> q<span class="hl opt">,</span> r<span class="hl opt">,</span> s<span class="hl opt">,</span> t<span class="hl opt">,</span> k <span class="hl opt">= {</span><span class="hl num">1</span><span class="hl opt">}, {}, {}, {</span><span class="hl num">1</span><span class="hl opt">},</span> <span class="hl num">1</span>
  <span class="hl kwa">repeat</span>
    <span class="hl kwa">local</span> y <span class="hl opt">=</span> <span class="hl kwd">extract</span><span class="hl opt">(</span>q<span class="hl opt">,</span>r<span class="hl opt">,</span>s<span class="hl opt">,</span>t<span class="hl opt">,</span> <span class="hl num">3</span><span class="hl opt">)</span>
    <span class="hl kwa">if</span> y <span class="hl opt">==</span> <span class="hl kwd">extract</span><span class="hl opt">(</span>q<span class="hl opt">,</span>r<span class="hl opt">,</span>s<span class="hl opt">,</span>t<span class="hl opt">,</span> <span class="hl num">4</span><span class="hl opt">)</span> <span class="hl kwa">then</span>
      coroutine<span class="hl opt">.</span><span class="hl kwd">yield</span><span class="hl opt">(</span>y<span class="hl opt">)</span>
      <span class="hl kwd">compose_r</span><span class="hl opt">(</span>q<span class="hl opt">,</span>r<span class="hl opt">,</span>s<span class="hl opt">,</span>t<span class="hl opt">,</span>  <span class="hl num">10</span><span class="hl opt">, -</span><span class="hl num">10</span><span class="hl opt">*</span>y<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">)</span>
    <span class="hl kwa">else</span>
      <span class="hl kwd">compose_l</span><span class="hl opt">(</span>q<span class="hl opt">,</span>r<span class="hl opt">,</span>s<span class="hl opt">,</span>t<span class="hl opt">,</span>   k<span class="hl opt">,</span> <span class="hl num">4</span><span class="hl opt">*</span>k<span class="hl opt">+</span><span class="hl num">2</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">2</span><span class="hl opt">*</span>k<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)</span>
      k <span class="hl opt">=</span> k <span class="hl opt">+</span> <span class="hl num">1</span>
    <span class="hl kwa">end</span>
  <span class="hl kwa">until false</span>
<span class="hl kwa">end</span><span class="hl opt">)</span>

<span class="hl opt">]=]</span> <span class="hl slc">-- End of dynamically compiled chunk.</span>

<span class="hl kwa">local</span> N <span class="hl opt">=</span> <span class="hl kwb">tonumber</span><span class="hl opt">(</span>arg <span class="hl kwa">and</span> arg<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">])</span> <span class="hl kwa">or</span> <span class="hl num">27</span>
<span class="hl kwa">local</span> RADIX <span class="hl opt">=</span> N <span class="hl opt">&lt;</span> <span class="hl num">6500</span> <span class="hl kwa">and</span> <span class="hl num">2</span>^<span class="hl num">36</span> <span class="hl kwa">or</span> <span class="hl num">2</span>^<span class="hl num">32</span> <span class="hl slc">-- Avoid overflow.</span>

<span class="hl slc">-- Substitute radix and compile chunk.</span>
<span class="hl kwa">local</span> pidigit <span class="hl opt">=</span> <span class="hl kwd">loadstring</span><span class="hl opt">(</span><span class="hl kwb">string</span><span class="hl opt">.</span><span class="hl kwb">gsub</span><span class="hl opt">(</span>chunk<span class="hl opt">,</span> <span class="hl str">&quot;RADIX&quot;</span><span class="hl opt">,</span> <span class="hl kwb">tostring</span><span class="hl opt">(</span>RADIX<span class="hl opt">)))()</span>

<span class="hl slc">-- Print lines with 10 digits.</span>
<span class="hl kwa">for</span> i<span class="hl opt">=</span><span class="hl num">10</span><span class="hl opt">,</span>N<span class="hl opt">,</span><span class="hl num">10</span> <span class="hl kwa">do</span>
  <span class="hl kwa">for</span> j<span class="hl opt">=</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">10</span> <span class="hl kwa">do</span> io<span class="hl opt">.</span><span class="hl kwb">write</span><span class="hl opt">(</span><span class="hl kwd">pidigit</span><span class="hl opt">())</span> <span class="hl kwa">end</span>
  io<span class="hl opt">.</span><span class="hl kwb">write</span><span class="hl opt">(</span><span class="hl str">&quot;</span><span class="hl esc">\t</span><span class="hl str">:&quot;</span><span class="hl opt">,</span> i<span class="hl opt">,</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">)</span>
<span class="hl kwa">end</span>

<span class="hl slc">-- Print remaining digits (if any).</span>
<span class="hl kwa">local</span> n10 <span class="hl opt">=</span> N <span class="hl opt">%</span> <span class="hl num">10</span>
<span class="hl kwa">if</span> n10 <span class="hl opt">~=</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
  <span class="hl kwa">for</span> i<span class="hl opt">=</span><span class="hl num">1</span><span class="hl opt">,</span>n10 <span class="hl kwa">do</span> io<span class="hl opt">.</span><span class="hl kwb">write</span><span class="hl opt">(</span><span class="hl kwd">pidigit</span><span class="hl opt">())</span> <span class="hl kwa">end</span>
  io<span class="hl opt">.</span><span class="hl kwb">write</span><span class="hl opt">(</span><span class="hl kwb">string</span><span class="hl opt">.</span><span class="hl kwd">rep</span><span class="hl opt">(</span><span class="hl str">&quot; &quot;</span><span class="hl opt">,</span> <span class="hl num">10</span><span class="hl opt">-</span>n10<span class="hl opt">),</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span><span class="hl str">:&quot;</span><span class="hl opt">,</span> N<span class="hl opt">,</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">)</span>
<span class="hl kwa">end</span>

