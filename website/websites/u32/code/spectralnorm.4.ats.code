<span class="hl com">(*</span>
<span class="hl com">** The Computer Language Benchmarks Game</span>
<span class="hl com">** http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com">**</span>
<span class="hl com">** contributed by Hongwei Xi</span>
<span class="hl com">** contributed by Zhiqiang Ren</span>
<span class="hl com">**</span>
<span class="hl com">** compilation command:</span>
<span class="hl com">**   atscc -D_GNU_SOURCE -D_ATS_MULTITHREAD -O3 -msse2 spectral-norm2_smp.dats -o spectral-norm2_smp -lm -lpthread</span>
<span class="hl com">**</span>
<span class="hl com">*)</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">staload</span> <span class="hl kwd">M</span> <span class="hl opt">=</span> <span class="hl str">&quot;libc/SATS/math.sats&quot;</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">staload</span> <span class="hl str">&quot;libc/SATS/SIMD_v2df.sats&quot;</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl opt">%{^</span>
<span class="hl ppc">#include &lt;malloc.h&gt;</span>
<span class="hl kwa">static inline</span> ats_ptr_type
darr_make <span class="hl opt">(</span>ats_int_type n<span class="hl opt">,</span> ats_double_type f<span class="hl opt">) {</span>
  <span class="hl kwb">int</span> i<span class="hl opt">;</span> double <span class="hl opt">*</span>p0<span class="hl opt">, *</span>p <span class="hl opt">;</span>
  <span class="hl slc">// proper alignment is needed of v2df-processing</span>
  p0 <span class="hl opt">= (</span>double*)memalign<span class="hl opt">(</span><span class="hl num">64</span><span class="hl opt">,</span> n <span class="hl opt">*</span> sizeof<span class="hl opt">(</span>double<span class="hl opt">)) ;</span>
  p <span class="hl opt">=</span> p0<span class="hl opt">;</span> <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> n<span class="hl opt">; ++</span>i<span class="hl opt">) *</span>p<span class="hl opt">++ =</span> f <span class="hl opt">;</span>
  <span class="hl kwa">return</span> p0 <span class="hl opt">;</span>
<span class="hl opt">}</span> <span class="hl slc">// end of [darr_make]</span>
<span class="hl kwa">static inline</span> ats_void_type
darr_free <span class="hl opt">(</span>ats_ptr_type <span class="hl kwd">A</span><span class="hl opt">) {</span> free <span class="hl opt">(</span><span class="hl kwd">A</span><span class="hl opt">) ;</span> <span class="hl kwa">return</span> <span class="hl opt">; }</span>
<span class="hl opt">%}</span> <span class="hl slc">// end of [%{^]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">typedef</span> dbl <span class="hl opt">=</span> double
<span class="hl kwa">typedef</span> darr <span class="hl opt">(</span>n<span class="hl opt">:</span><span class="hl kwb">int</span><span class="hl opt">) =</span> &#64;<span class="hl opt">[</span>dbl<span class="hl opt">][</span>n<span class="hl opt">]</span> <span class="hl kwa">and</span> v2dfarr <span class="hl opt">(</span>n<span class="hl opt">:</span><span class="hl kwb">int</span><span class="hl opt">) =</span> &#64;<span class="hl opt">[</span>v2df<span class="hl opt">][</span>n<span class="hl opt">]</span>

<span class="hl kwa">extern</span>
<span class="hl kwa">fun</span> darr_make <span class="hl opt">{</span>n<span class="hl opt">:</span>nat<span class="hl opt">} (</span>n<span class="hl opt">:</span> <span class="hl kwb">int</span> n<span class="hl opt">,</span> ini<span class="hl opt">:</span> double<span class="hl opt">)</span>
  <span class="hl opt">: [</span>l<span class="hl opt">:</span>addr<span class="hl opt">] (</span>darr n &#64; l | ptr l<span class="hl opt">) =</span> <span class="hl str">&quot;darr_make&quot;</span>

<span class="hl kwa">extern fun</span> darr_free <span class="hl opt">{</span>n<span class="hl opt">:</span>nat<span class="hl opt">}</span>
  <span class="hl opt">{</span>l<span class="hl opt">:</span>addr<span class="hl opt">} (</span>pf<span class="hl opt">:</span> darr n &#64; l | p<span class="hl opt">:</span> ptr l<span class="hl opt">):</span> void <span class="hl opt">=</span> <span class="hl str">&quot;darr_free&quot;</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">macdef</span> denom <span class="hl opt">(</span>i<span class="hl opt">,</span> j<span class="hl opt">) =</span>
  <span class="hl opt">(,(</span>i<span class="hl opt">) + ,(</span>j<span class="hl opt">)) * (,(</span>i<span class="hl opt">) + ,(</span>j<span class="hl opt">) +</span> <span class="hl num">1</span><span class="hl opt">)</span> / <span class="hl num">2</span> <span class="hl opt">+ ,(</span>i<span class="hl opt">) +</span> <span class="hl num">1</span>
<span class="hl kwa">macdef</span> eval_A <span class="hl opt">(</span>i<span class="hl opt">,</span>j<span class="hl opt">) =</span> <span class="hl num">1.0</span> / denom <span class="hl opt">(,(</span>i<span class="hl opt">), ,(</span>j<span class="hl opt">))</span>

fn eval_A_0 <span class="hl opt">(</span>i<span class="hl opt">:</span> <span class="hl kwb">int</span><span class="hl opt">,</span> j<span class="hl opt">:</span> <span class="hl kwb">int</span><span class="hl opt">):</span> v2df <span class="hl opt">=</span> <span class="hl kwa">let</span> <span class="hl slc">// two divisions at a time</span>
  <span class="hl kwa">val</span> k1 <span class="hl opt">=</span> denom<span class="hl opt">(</span>i<span class="hl opt">,</span>j<span class="hl opt">);</span> <span class="hl kwa">val</span> k2 <span class="hl opt">=</span> denom <span class="hl opt">(</span>i<span class="hl opt">,</span>j<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)</span> <span class="hl kwa">in</span> v2df_1_1 / v2df_make_int_int <span class="hl opt">(</span>k1<span class="hl opt">,</span> k2<span class="hl opt">)</span>
<span class="hl kwa">end</span> <span class="hl slc">// end of [eval_A_0]</span>

fn eval_A_1 <span class="hl opt">(</span>i<span class="hl opt">:</span> <span class="hl kwb">int</span><span class="hl opt">,</span> j<span class="hl opt">:</span> <span class="hl kwb">int</span><span class="hl opt">):</span> v2df <span class="hl opt">=</span> <span class="hl kwa">let</span> <span class="hl slc">// two divisions at a time</span>
  <span class="hl kwa">val</span> k1 <span class="hl opt">=</span> denom<span class="hl opt">(</span>i<span class="hl opt">,</span>j<span class="hl opt">);</span> <span class="hl kwa">val</span> k2 <span class="hl opt">=</span> denom <span class="hl opt">(</span>i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">,</span>j<span class="hl opt">)</span> <span class="hl kwa">in</span> v2df_1_1 / v2df_make_int_int <span class="hl opt">(</span>k1<span class="hl opt">,</span> k2<span class="hl opt">)</span>
<span class="hl kwa">end</span> <span class="hl slc">// end of [eval_A_1]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">staload</span> <span class="hl str">&quot;libats/SATS/parworkshop.sats&quot;</span>
<span class="hl kwa">staload</span> _ <span class="hl opt">=</span> <span class="hl str">&quot;libats/DATS/parworkshop.dats&quot;</span>

<span class="hl com">(* ****** ****** *)</span>

viewtypedef work <span class="hl opt">= () -&lt;</span>lincloptr1<span class="hl opt">&gt;</span> void
viewtypedef <span class="hl kwd">WSptr</span> <span class="hl opt">(</span>l<span class="hl opt">:</span>addr<span class="hl opt">) =</span> <span class="hl kwd">WORKSHOPptr</span> <span class="hl opt">(</span>work<span class="hl opt">,</span> l<span class="hl opt">)</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">fun</span> fwork <span class="hl opt">{</span>lws<span class="hl opt">:</span>agz<span class="hl opt">}</span>
  <span class="hl opt">(</span>ws<span class="hl opt">: !</span><span class="hl kwd">WSptr</span> lws<span class="hl opt">,</span> wk<span class="hl opt">: &amp;</span>work <span class="hl opt">&gt;&gt;</span> work?<span class="hl opt">):</span> <span class="hl kwb">int</span> <span class="hl opt">=</span> <span class="hl kwa">let</span>
  <span class="hl kwa">val</span> wk <span class="hl opt">=</span> wk
  <span class="hl kwa">val</span> pfun <span class="hl opt">=</span> __cast <span class="hl opt">(</span>wk<span class="hl opt">)</span> where <span class="hl opt">{</span>
    <span class="hl kwa">extern</span> castfn __cast
      <span class="hl opt">(</span>wk<span class="hl opt">: !</span>work <span class="hl opt">&gt;&gt;</span> opt <span class="hl opt">(</span>work<span class="hl opt">,</span> i <span class="hl opt">&gt;=</span> <span class="hl num">1</span><span class="hl opt">)):</span> <span class="hl ppc">#[i:nat] uintptr i</span>
  <span class="hl opt">}</span> <span class="hl slc">// end of [val]</span>
<span class="hl kwa">in</span>
  <span class="hl kwa">if</span> pfun <span class="hl opt">&gt;= (</span>uintptr1_of_uint1<span class="hl opt">)</span><span class="hl num">1U</span> <span class="hl kwa">then let</span>
    prval <span class="hl opt">() =</span> opt_unsome <span class="hl opt">{</span>work<span class="hl opt">} (</span>wk<span class="hl opt">)</span>
    <span class="hl kwa">val</span> <span class="hl opt">() =</span> wk <span class="hl opt">()</span>
    <span class="hl kwa">val</span> <span class="hl opt">() =</span> cloptr_free <span class="hl opt">(</span>wk<span class="hl opt">)</span>
  <span class="hl kwa">in</span>
    <span class="hl num">1</span> <span class="hl slc">// the worker is to continue</span>
  <span class="hl kwa">end else let</span>
    <span class="hl kwa">val</span> u <span class="hl opt">=</span> uint1_of_uintptr1 <span class="hl opt">(</span>pfun<span class="hl opt">)</span>
    <span class="hl kwa">val</span> i <span class="hl opt">=</span> int_of_uint <span class="hl opt">(</span>u<span class="hl opt">)</span>
    prval <span class="hl opt">() =</span> opt_unnone <span class="hl opt">{</span>work<span class="hl opt">} (</span>wk<span class="hl opt">)</span>
    prval <span class="hl opt">() =</span> cleanup_top <span class="hl opt">{</span>work<span class="hl opt">} (</span>wk<span class="hl opt">)</span>
  <span class="hl kwa">in</span>
    ~i <span class="hl slc">// the worker is to pause or quit</span>
  <span class="hl kwa">end</span> <span class="hl slc">// end of [if]</span>
<span class="hl kwa">end</span> <span class="hl slc">// end of [fwork]</span>

<span class="hl com">(* ****** ****** *)</span>

infix <span class="hl num">0</span> <span class="hl opt">+=;</span> <span class="hl kwa">macdef</span> <span class="hl opt">+= (</span>x<span class="hl opt">,</span> d<span class="hl opt">) = (,(</span>x<span class="hl opt">) := ,(</span>x<span class="hl opt">) + ,(</span>d<span class="hl opt">))</span>

<span class="hl com">(* ****** ****** *)</span>

fn eval_A_times_u <span class="hl opt">{</span>lws<span class="hl opt">:</span>agz<span class="hl opt">} {</span><span class="hl kwd">N</span><span class="hl opt">:</span>nat<span class="hl opt">} {</span>l<span class="hl opt">:</span>addr<span class="hl opt">} (</span>
    ws<span class="hl opt">: !</span><span class="hl kwd">WSptr</span> lws<span class="hl opt">,</span> flag<span class="hl opt">:</span> <span class="hl kwb">int</span><span class="hl opt">,</span> <span class="hl kwd">N</span><span class="hl opt">:</span> <span class="hl kwb">int</span> <span class="hl kwd">N</span><span class="hl opt">,</span> u<span class="hl opt">: &amp;</span>darr <span class="hl kwd">N</span><span class="hl opt">,</span> tmp<span class="hl opt">: &amp;</span>darr <span class="hl kwd">N</span>
  <span class="hl opt">) :</span> void <span class="hl opt">=</span> <span class="hl kwa">let</span>
  <span class="hl kwa">val</span> <span class="hl kwd">N2</span> <span class="hl opt">=</span> <span class="hl kwd">N</span> / <span class="hl num">2</span><span class="hl opt">;</span> stadef <span class="hl kwd">N2</span> <span class="hl opt">=</span> <span class="hl kwd">N</span> / <span class="hl num">2</span>
  <span class="hl kwa">fun</span> loop2_0
    <span class="hl opt">{</span>i<span class="hl opt">,</span>j<span class="hl opt">:</span>nat | j <span class="hl opt">&lt;=</span> <span class="hl kwd">N2</span><span class="hl opt">} {</span>l<span class="hl opt">:</span>addr<span class="hl opt">} .&lt;</span><span class="hl kwd">N2</span><span class="hl opt">-</span>j<span class="hl opt">&gt;. (</span>
      pf<span class="hl opt">: !</span>v2dfarr <span class="hl opt">(</span><span class="hl kwd">N2</span><span class="hl opt">-</span>j<span class="hl opt">)</span> &#64; l
    | p_dd<span class="hl opt">:</span> ptr l<span class="hl opt">,</span> sum<span class="hl opt">: &amp;</span>v2df<span class="hl opt">,</span> i<span class="hl opt">:</span> <span class="hl kwb">int</span> i<span class="hl opt">,</span> j<span class="hl opt">:</span> <span class="hl kwb">int</span> j
    <span class="hl opt">) :&lt;</span>cloref1<span class="hl opt">&gt;</span> void <span class="hl opt">=</span>
    <span class="hl kwa">if</span> j <span class="hl opt">&lt;</span> <span class="hl kwd">N2</span> <span class="hl kwa">then let</span>
      prval <span class="hl opt">(</span>pf1<span class="hl opt">,</span> pf2<span class="hl opt">) =</span> array_v_uncons <span class="hl opt">{</span>v2df<span class="hl opt">} (</span>pf<span class="hl opt">)</span>
      <span class="hl kwa">val</span> <span class="hl opt">() =</span> sum <span class="hl opt">+= !</span>p_dd <span class="hl opt">*</span> eval_A_0 <span class="hl opt">(</span>i<span class="hl opt">,</span> <span class="hl num">2</span><span class="hl opt">*</span>j<span class="hl opt">)</span>
      <span class="hl kwa">val</span> <span class="hl opt">() =</span> loop2_0 <span class="hl opt">(</span>pf2 | p_dd <span class="hl opt">+</span> sizeof<span class="hl opt">&lt;</span>v2df<span class="hl opt">&gt;,</span> sum<span class="hl opt">,</span> i<span class="hl opt">,</span> j<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)</span>
    <span class="hl kwa">in</span>
      pf <span class="hl opt">:=</span> array_v_cons <span class="hl opt">{</span>v2df<span class="hl opt">} (</span>pf1<span class="hl opt">,</span> pf2<span class="hl opt">)</span>
    <span class="hl kwa">end</span> <span class="hl slc">// end of [if]</span>
  <span class="hl slc">// end of [loop2_0]</span>
  <span class="hl kwa">fun</span> loop2_1
    <span class="hl opt">{</span>i<span class="hl opt">,</span>j<span class="hl opt">:</span>nat | j <span class="hl opt">&lt;=</span> <span class="hl kwd">N2</span><span class="hl opt">} {</span>l<span class="hl opt">:</span>addr<span class="hl opt">} .&lt;</span><span class="hl kwd">N2</span><span class="hl opt">-</span>j<span class="hl opt">&gt;. (</span>
      pf<span class="hl opt">: !</span>v2dfarr <span class="hl opt">(</span><span class="hl kwd">N2</span><span class="hl opt">-</span>j<span class="hl opt">)</span> &#64; l
    | p_dd<span class="hl opt">:</span> ptr l<span class="hl opt">,</span> sum<span class="hl opt">: &amp;</span>v2df<span class="hl opt">,</span> i<span class="hl opt">:</span> <span class="hl kwb">int</span> i<span class="hl opt">,</span> j<span class="hl opt">:</span> <span class="hl kwb">int</span> j
    <span class="hl opt">) :&lt;</span>cloref1<span class="hl opt">&gt;</span> void <span class="hl opt">=</span>
    <span class="hl kwa">if</span> j <span class="hl opt">&lt;</span> <span class="hl kwd">N2</span> <span class="hl kwa">then let</span>
      prval <span class="hl opt">(</span>pf1<span class="hl opt">,</span> pf2<span class="hl opt">) =</span> array_v_uncons <span class="hl opt">{</span>v2df<span class="hl opt">} (</span>pf<span class="hl opt">)</span>
      <span class="hl kwa">val</span> <span class="hl opt">() =</span> sum <span class="hl opt">+= !</span>p_dd <span class="hl opt">*</span> eval_A_1 <span class="hl opt">(</span><span class="hl num">2</span><span class="hl opt">*</span>j<span class="hl opt">,</span> i<span class="hl opt">)</span>
      <span class="hl kwa">val</span> <span class="hl opt">() =</span> loop2_1 <span class="hl opt">(</span>pf2 | p_dd <span class="hl opt">+</span> sizeof<span class="hl opt">&lt;</span>v2df<span class="hl opt">&gt;,</span> sum<span class="hl opt">,</span> i<span class="hl opt">,</span> j<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)</span>
    <span class="hl kwa">in</span>
      pf <span class="hl opt">:=</span> array_v_cons <span class="hl opt">{</span>v2df<span class="hl opt">} (</span>pf1<span class="hl opt">,</span> pf2<span class="hl opt">)</span>
    <span class="hl kwa">end</span> <span class="hl slc">// end of [if]</span>
  <span class="hl slc">// end of [loop2_1]</span>
<span class="hl slc">//</span>
  <span class="hl kwa">fun</span> loop1
    <span class="hl opt">{</span>i<span class="hl opt">,</span>i1<span class="hl opt">:</span>nat| i <span class="hl opt">&lt;=</span> i1<span class="hl opt">;</span> i1 <span class="hl opt">&lt;=</span> <span class="hl kwd">N</span><span class="hl opt">} {</span>l<span class="hl opt">:</span>addr<span class="hl opt">} .&lt;</span>i1<span class="hl opt">-</span>i<span class="hl opt">&gt;. (</span>
      pf<span class="hl opt">: !</span>darr <span class="hl kwd">N</span> &#64; l | i<span class="hl opt">:</span><span class="hl kwb">int</span> i<span class="hl opt">,</span> i1<span class="hl opt">:</span> <span class="hl kwb">int</span> i1<span class="hl opt">,</span> p_u<span class="hl opt">:</span> ptr l<span class="hl opt">,</span> tmp<span class="hl opt">: &amp;</span>darr <span class="hl kwd">N</span>
    <span class="hl opt">) :&lt;</span>cloref1<span class="hl opt">&gt;</span> void <span class="hl opt">=</span> <span class="hl kwa">let</span>
    viewdef <span class="hl kwd">V1</span> <span class="hl opt">=</span> darr <span class="hl kwd">N</span> &#64; l<span class="hl opt">;</span> viewdef <span class="hl kwd">V2</span> <span class="hl opt">=</span> v2dfarr <span class="hl opt">(</span><span class="hl kwd">N2</span><span class="hl opt">)</span> &#64; l
  <span class="hl kwa">in</span>
    <span class="hl kwa">if</span> i <span class="hl opt">&lt;</span> i1 <span class="hl kwa">then let</span>
      prval <span class="hl opt">(</span>pf1<span class="hl opt">,</span> fpf2<span class="hl opt">) =</span> __cast <span class="hl opt">(</span>pf<span class="hl opt">)</span> where <span class="hl opt">{</span>
        <span class="hl kwa">extern</span> prfun __cast <span class="hl opt">(</span>pf<span class="hl opt">:</span> darr <span class="hl kwd">N</span> &#64; l<span class="hl opt">): (</span><span class="hl kwd">V2</span><span class="hl opt">,</span> <span class="hl kwd">V2</span> <span class="hl opt">-&lt;</span>lin<span class="hl opt">,</span>prf<span class="hl opt">&gt;</span> <span class="hl kwd">V1</span><span class="hl opt">)</span>
      <span class="hl opt">}</span>
      var sum<span class="hl opt">:</span> v2df <span class="hl opt">=</span> v2df_0_0
      <span class="hl kwa">val</span> <span class="hl opt">() =</span> <span class="hl kwa">if</span> flag <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
        loop2_0 <span class="hl opt">(</span>pf1 | p_u<span class="hl opt">,</span> sum<span class="hl opt">,</span> i<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">else</span> loop2_1 <span class="hl opt">(</span>pf1 | p_u<span class="hl opt">,</span> sum<span class="hl opt">,</span> i<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">)</span>
      <span class="hl slc">// end of [if]</span>
      prval <span class="hl opt">() =</span> pf <span class="hl opt">:=</span> fpf2 <span class="hl opt">(</span>pf1<span class="hl opt">)</span>
      <span class="hl kwa">val</span> <span class="hl opt">() =</span> tmp<span class="hl opt">.[</span>i<span class="hl opt">] :=</span> v2df_get_fst<span class="hl opt">(</span>sum<span class="hl opt">) +</span> v2df_get_snd<span class="hl opt">(</span>sum<span class="hl opt">)</span>
      <span class="hl kwa">val</span> <span class="hl opt">() =</span> <span class="hl kwa">if</span> <span class="hl kwd">N</span> <span class="hl opt">&gt;</span> <span class="hl kwd">N2</span><span class="hl opt">+</span><span class="hl kwd">N2</span> <span class="hl kwa">then</span> tmp<span class="hl opt">.[</span>i<span class="hl opt">] +=</span> eval_A<span class="hl opt">(</span>i<span class="hl opt">,</span><span class="hl kwd">N</span><span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">) *</span> p_u<span class="hl opt">-&gt;[</span><span class="hl kwd">N</span><span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">]</span>
    <span class="hl kwa">in</span>
      loop1 <span class="hl opt">(</span>pf | i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">,</span> i1<span class="hl opt">,</span> p_u<span class="hl opt">,</span> tmp<span class="hl opt">)</span>
    <span class="hl kwa">end</span> <span class="hl slc">// end of [if]</span>
  <span class="hl kwa">end</span> <span class="hl slc">// end of [loop1]</span>
  <span class="hl kwa">fun</span> loop1_ <span class="hl opt">{</span>i<span class="hl opt">,</span>i1<span class="hl opt">:</span>nat| i <span class="hl opt">&lt;=</span> i1<span class="hl opt">;</span> i1 <span class="hl opt">&lt;=</span> <span class="hl kwd">N</span><span class="hl opt">} {</span>l<span class="hl opt">,</span>l_tmp<span class="hl opt">:</span>addr<span class="hl opt">}</span>
    <span class="hl opt">(</span>i<span class="hl opt">:</span> <span class="hl kwb">int</span> i<span class="hl opt">,</span> i1<span class="hl opt">:</span> <span class="hl kwb">int</span> i1<span class="hl opt">,</span> p_u<span class="hl opt">:</span> ptr l<span class="hl opt">,</span> p_tmp<span class="hl opt">:</span> ptr l_tmp<span class="hl opt">):&lt;</span>cloref1<span class="hl opt">&gt;</span> void <span class="hl opt">=</span> <span class="hl kwa">let</span>
    <span class="hl kwa">extern</span> prfun __vintr <span class="hl opt">{</span>v<span class="hl opt">:</span>view<span class="hl opt">} ():</span> v
    <span class="hl kwa">extern</span> prfun __velim <span class="hl opt">{</span>v<span class="hl opt">:</span>view<span class="hl opt">} (</span>pf<span class="hl opt">:</span> v<span class="hl opt">):</span> void
    prval pf <span class="hl opt">=</span> __vintr <span class="hl opt">{</span>darr <span class="hl kwd">N</span> &#64; l<span class="hl opt">} ()</span>
    prval pf_tmp <span class="hl opt">=</span> __vintr <span class="hl opt">{</span>darr <span class="hl kwd">N</span> &#64; l_tmp<span class="hl opt">} ()</span>
    <span class="hl kwa">val</span> <span class="hl opt">() =</span> loop1 <span class="hl opt">(</span>pf | i<span class="hl opt">,</span> i1<span class="hl opt">,</span> p_u<span class="hl opt">, !</span>p_tmp<span class="hl opt">)</span>
    prval <span class="hl opt">() =</span> __velim <span class="hl opt">(</span>pf<span class="hl opt">)</span> <span class="hl kwa">and</span> <span class="hl opt">() =</span> __velim <span class="hl opt">(</span>pf_tmp<span class="hl opt">)</span>
  <span class="hl kwa">in</span>
    <span class="hl slc">// nothing</span>
  <span class="hl kwa">end</span> <span class="hl slc">// end of [loop1_]</span>
<span class="hl slc">//</span>
  <span class="hl kwa">val</span> nworker <span class="hl opt">=</span> workshop_get_nworker <span class="hl opt">(</span>ws<span class="hl opt">)</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> assert_errmsg <span class="hl opt">(</span>nworker <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl ppc">#LOCATION)</span>
  <span class="hl kwa">val</span> <span class="hl kwd">INC</span> <span class="hl opt">= (</span><span class="hl kwd">N</span><span class="hl opt">+</span>nworker<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">)</span>/nworker/<span class="hl num">64</span>
  <span class="hl kwa">val</span> <span class="hl kwd">INC</span> <span class="hl opt">=</span> max <span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">, (</span>int1_of_int<span class="hl opt">)</span><span class="hl kwd">INC</span><span class="hl opt">)</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> assert_errmsg <span class="hl opt">(</span><span class="hl kwd">INC</span> <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl ppc">#LOCATION)</span>
  <span class="hl kwa">fun</span> split <span class="hl opt">{</span>lws<span class="hl opt">:</span>agz<span class="hl opt">} {</span>i<span class="hl opt">:</span>nat | i <span class="hl opt">&lt;=</span> <span class="hl kwd">N</span><span class="hl opt">} {</span>l<span class="hl opt">,</span>l_tmp<span class="hl opt">:</span>addr<span class="hl opt">}</span>
    <span class="hl opt">(</span>ws<span class="hl opt">: !</span><span class="hl kwd">WSptr</span> lws<span class="hl opt">,</span> i<span class="hl opt">:</span> <span class="hl kwb">int</span> i<span class="hl opt">,</span> p_u<span class="hl opt">:</span> ptr l<span class="hl opt">,</span> p_tmp<span class="hl opt">:</span> ptr l_tmp<span class="hl opt">):&lt;</span>cloref1<span class="hl opt">&gt;</span> void <span class="hl opt">=</span>
    <span class="hl kwa">if</span> i <span class="hl opt">&lt;</span> <span class="hl kwd">N</span> <span class="hl kwa">then let</span>
      <span class="hl kwa">val</span> i1 <span class="hl opt">=</span> min <span class="hl opt">(</span>i <span class="hl opt">+</span> <span class="hl kwd">INC</span><span class="hl opt">,</span> <span class="hl kwd">N</span><span class="hl opt">)</span>
      <span class="hl kwa">val</span> f <span class="hl opt">=</span> lam <span class="hl opt">():</span> void <span class="hl opt">=&lt;</span>lincloptr1<span class="hl opt">&gt;</span> loop1_ <span class="hl opt">(</span>i<span class="hl opt">,</span> i1<span class="hl opt">,</span> p_u<span class="hl opt">,</span> p_tmp<span class="hl opt">)</span>
      <span class="hl kwa">val</span> <span class="hl opt">() =</span> workshop_insert_work <span class="hl opt">(</span>ws<span class="hl opt">,</span> f<span class="hl opt">)</span>
    <span class="hl kwa">in</span>
      split <span class="hl opt">(</span>ws<span class="hl opt">,</span> i1<span class="hl opt">,</span> p_u<span class="hl opt">,</span> p_tmp<span class="hl opt">)</span>
    <span class="hl kwa">end</span> <span class="hl slc">// end of [if]</span>
  <span class="hl slc">// end of [split]</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> split <span class="hl opt">(</span>ws<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">, &amp;</span>u<span class="hl opt">, &amp;</span>tmp<span class="hl opt">)</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> workshop_wait_blocked_all <span class="hl opt">(</span>ws<span class="hl opt">)</span>
<span class="hl kwa">in</span>
  <span class="hl slc">// nothing</span>
<span class="hl kwa">end</span> <span class="hl slc">// end of [eval_A_times_u]</span>

<span class="hl com">(* ****** ****** *)</span>

fn eval_AtA_times_u <span class="hl opt">{</span>lws<span class="hl opt">:</span>agz<span class="hl opt">} {</span><span class="hl kwd">N</span><span class="hl opt">:</span>nat<span class="hl opt">} (</span>
  ws<span class="hl opt">: !</span><span class="hl kwd">WSptr</span> lws<span class="hl opt">,</span> <span class="hl kwd">N</span><span class="hl opt">:</span> <span class="hl kwb">int</span> <span class="hl kwd">N</span><span class="hl opt">,</span> u<span class="hl opt">: &amp;</span>darr <span class="hl kwd">N</span><span class="hl opt">,</span> v<span class="hl opt">: &amp;</span>darr <span class="hl kwd">N</span><span class="hl opt">,</span> tmp<span class="hl opt">: &amp;</span>darr <span class="hl kwd">N</span>
<span class="hl opt">) :</span> void <span class="hl opt">= ()</span> where <span class="hl opt">{</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> eval_A_times_u <span class="hl opt">(</span>ws<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl kwd">N</span><span class="hl opt">,</span> u<span class="hl opt">,</span> tmp<span class="hl opt">);</span> <span class="hl kwa">val</span> <span class="hl opt">() =</span> eval_A_times_u <span class="hl opt">(</span>ws<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">,</span> <span class="hl kwd">N</span><span class="hl opt">,</span> tmp<span class="hl opt">,</span> v<span class="hl opt">)</span>
<span class="hl opt">}</span> <span class="hl slc">// end of [eval_AtA_times_u]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">staload</span> <span class="hl str">&quot;libc/SATS/sched.sats&quot;</span>
<span class="hl kwa">staload</span> <span class="hl kwd">TYPES</span> <span class="hl opt">=</span> <span class="hl str">&quot;libc/sys/SATS/types.sats&quot;</span>
<span class="hl kwa">macdef</span> pid_t <span class="hl opt">=</span> $<span class="hl kwc">TYPES</span><span class="hl opt">.</span>pid_of_int

<span class="hl kwa">extern fun</span> ncore_get <span class="hl opt">():</span> <span class="hl kwb">int</span>
<span class="hl kwa">implement</span> ncore_get <span class="hl opt">() =</span> <span class="hl kwa">let</span>
  var cs<span class="hl opt">:</span> cpu_set0_t <span class="hl slc">// uninitialized</span>
  prval <span class="hl opt">() =</span> cpusetinit <span class="hl opt">(</span>cs<span class="hl opt">)</span> <span class="hl slc">// not a real initialization</span>
  stavar nset<span class="hl opt">:</span> <span class="hl kwb">int</span>
  <span class="hl kwa">val</span> nset <span class="hl opt">=</span> cpusetsize_get <span class="hl opt">(</span>cs<span class="hl opt">)</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> assert_errmsg <span class="hl opt">(</span>nset <span class="hl opt">&gt;=</span> <span class="hl num">2</span><span class="hl opt">,</span> <span class="hl ppc">#LOCATION)</span>
  <span class="hl kwa">val</span> err <span class="hl opt">=</span> sched_getaffinity <span class="hl opt">((</span>pid_t<span class="hl opt">)</span><span class="hl num">0</span><span class="hl opt">,</span> nset<span class="hl opt">,</span> cs<span class="hl opt">)</span>
  var count<span class="hl opt">:</span> <span class="hl kwd">Nat</span> <span class="hl opt">=</span> <span class="hl num">0</span>
  var i<span class="hl opt">:</span> natLte <span class="hl num">16</span> <span class="hl slc">// uninitialized</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> <span class="hl kwa">for</span><span class="hl opt">* (</span>cs<span class="hl opt">:</span> cpu_set_t nset<span class="hl opt">) =&gt;</span>
    <span class="hl opt">(</span>i <span class="hl opt">:=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> <span class="hl num">16</span><span class="hl opt">;</span> i <span class="hl opt">:=</span> i <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">)</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">CPU_ISSET</span> <span class="hl opt">(</span>i<span class="hl opt">,</span> cs<span class="hl opt">) &gt;</span> <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">then</span> count <span class="hl opt">:=</span> count <span class="hl opt">+</span> <span class="hl num">1</span>
  <span class="hl slc">// end of [val]</span>
<span class="hl kwa">in</span>
  count
<span class="hl kwa">end</span> <span class="hl slc">// end of [ncore_get]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl ppc">#define QSZ 1024</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">implement</span> main <span class="hl opt">(</span>argc<span class="hl opt">,</span> argv<span class="hl opt">) =</span> <span class="hl kwa">let</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> assert_errmsg
    <span class="hl opt">(</span>argc <span class="hl opt">&gt;=</span> <span class="hl num">2</span><span class="hl opt">,</span> <span class="hl str">&quot;Exit: wrong command format!</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">)</span>
  <span class="hl kwa">val</span> <span class="hl opt">[</span><span class="hl kwd">N</span><span class="hl opt">:</span><span class="hl kwb">int</span><span class="hl opt">]</span> <span class="hl kwd">N</span> <span class="hl opt">=</span> int1_of_string argv<span class="hl opt">.[</span><span class="hl num">1</span><span class="hl opt">]</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> assert_errmsg <span class="hl opt">(</span>
    <span class="hl kwd">N</span> <span class="hl opt">&gt;=</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl str">&quot;The input integer needs to be a natural number.</span><span class="hl esc">\n</span><span class="hl str">&quot;</span>
  <span class="hl opt">)</span>
<span class="hl slc">//</span>
  <span class="hl kwa">val</span> <span class="hl kwd">NCORE</span> <span class="hl opt">=</span> ncore_get <span class="hl opt">()</span>
  <span class="hl slc">// val () = (print &quot;NCORE = &quot;; print NCORE; print_newline ())</span>
<span class="hl slc">//</span>
  <span class="hl kwa">val</span> nworker <span class="hl opt">=</span>
    <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(</span>argc <span class="hl opt">&gt;=</span> <span class="hl num">3</span><span class="hl opt">)</span> <span class="hl kwa">then</span> int_of argv<span class="hl opt">.[</span><span class="hl num">2</span><span class="hl opt">]</span> <span class="hl kwa">else</span> <span class="hl kwd">NCORE</span><span class="hl opt">):</span> <span class="hl kwb">int</span>
  <span class="hl kwa">val</span> nworker <span class="hl opt">=</span> int1_of_int <span class="hl opt">(</span>nworker<span class="hl opt">)</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> assert_errmsg <span class="hl opt">(</span>nworker <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl ppc">#LOCATION)  </span>
<span class="hl slc">//</span>
  <span class="hl kwa">val</span> ws <span class="hl opt">=</span> workshop_make<span class="hl opt">&lt;</span>work<span class="hl opt">&gt; (</span><span class="hl kwd">QSZ</span><span class="hl opt">,</span> fwork<span class="hl opt">)</span>
  <span class="hl kwa">val</span> _err <span class="hl opt">=</span> workshop_add_nworker <span class="hl opt">(</span>ws<span class="hl opt">,</span> nworker<span class="hl opt">)</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> assert_errmsg <span class="hl opt">(</span>_err <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl ppc">#LOCATION)</span>
<span class="hl slc">//</span>
  <span class="hl kwa">val</span> <span class="hl opt">(</span>pf_u | p_u<span class="hl opt">) =</span> darr_make <span class="hl opt">(</span><span class="hl kwd">N</span><span class="hl opt">,</span> <span class="hl num">1.0</span><span class="hl opt">)</span>
  <span class="hl kwa">val</span> <span class="hl opt">(</span>pf_v | p_v<span class="hl opt">) =</span> darr_make <span class="hl opt">(</span><span class="hl kwd">N</span><span class="hl opt">,</span> <span class="hl num">0.0</span><span class="hl opt">)</span>
  <span class="hl kwa">val</span> <span class="hl opt">(</span>pf_tmp | p_tmp<span class="hl opt">) =</span> darr_make <span class="hl opt">(</span><span class="hl kwd">N</span><span class="hl opt">,</span> <span class="hl num">0.0</span><span class="hl opt">)</span>
<span class="hl slc">//  </span>
  <span class="hl ppc">#define TIMES 10</span>
  var i<span class="hl opt">:</span> <span class="hl kwd">Nat</span> <span class="hl slc">// uninitialized</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> <span class="hl kwa">for</span>
    <span class="hl opt">(</span>i <span class="hl opt">:=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> <span class="hl kwd">TIMES</span><span class="hl opt">;</span> i <span class="hl opt">:=</span> i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)</span> <span class="hl kwa">let</span>
    <span class="hl kwa">val</span> <span class="hl opt">() =</span> eval_AtA_times_u <span class="hl opt">(</span>ws<span class="hl opt">,</span> <span class="hl kwd">N</span><span class="hl opt">, !</span>p_u<span class="hl opt">, !</span>p_v<span class="hl opt">, !</span>p_tmp<span class="hl opt">)</span>
    <span class="hl kwa">val</span> <span class="hl opt">() =</span> eval_AtA_times_u <span class="hl opt">(</span>ws<span class="hl opt">,</span> <span class="hl kwd">N</span><span class="hl opt">, !</span>p_v<span class="hl opt">, !</span>p_u<span class="hl opt">, !</span>p_tmp<span class="hl opt">)</span>
  <span class="hl kwa">in</span> <span class="hl com">(*nothing*)</span> <span class="hl kwa">end</span>
<span class="hl slc">//</span>
  var vBv<span class="hl opt">:</span> double <span class="hl opt">=</span> <span class="hl num">0.0</span> <span class="hl kwa">and</span> vv<span class="hl opt">:</span> double <span class="hl opt">=</span> <span class="hl num">0.0</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">:=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> <span class="hl kwd">N</span><span class="hl opt">;</span> i <span class="hl opt">:=</span> i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)</span> <span class="hl kwa">let</span>
    <span class="hl kwa">val</span> ui <span class="hl opt">=</span> p_u<span class="hl opt">-&gt;[</span>i<span class="hl opt">]</span> <span class="hl kwa">and</span> vi <span class="hl opt">=</span> p_v<span class="hl opt">-&gt;[</span>i<span class="hl opt">]</span> <span class="hl kwa">in</span> vBv <span class="hl opt">+=</span> ui<span class="hl opt">*</span>vi<span class="hl opt">;</span> vv <span class="hl opt">+=</span> vi<span class="hl opt">*</span>vi
  <span class="hl kwa">end</span> <span class="hl slc">// end of [val]</span>
<span class="hl slc">//</span>
  <span class="hl slc">// val () = printf (&quot;vBv = %f and vv = %f\n&quot;, &#64;(vBv, vv))</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> darr_free <span class="hl opt">(</span>pf_u | p_u<span class="hl opt">)</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> darr_free <span class="hl opt">(</span>pf_v | p_v<span class="hl opt">)</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> darr_free <span class="hl opt">(</span>pf_tmp | p_tmp<span class="hl opt">)</span>
<span class="hl slc">//</span>
  var i<span class="hl opt">:</span> <span class="hl kwd">Nat</span> <span class="hl opt">=</span> <span class="hl num">0</span>
  <span class="hl kwa">val</span> nworker <span class="hl opt">=</span> workshop_get_nworker <span class="hl opt">(</span>ws<span class="hl opt">)</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> <span class="hl kwa">while</span> <span class="hl opt">(</span>i <span class="hl opt">&lt;</span> nworker<span class="hl opt">)</span> <span class="hl kwa">let</span>
    <span class="hl kwa">val</span> _quit <span class="hl opt">=</span> $extval <span class="hl opt">(</span>work<span class="hl opt">,</span> <span class="hl str">&quot;(void*)0&quot;</span><span class="hl opt">)</span>
    <span class="hl kwa">val</span> <span class="hl opt">() =</span> workshop_insert_work <span class="hl opt">(</span>ws<span class="hl opt">,</span> _quit<span class="hl opt">)</span> <span class="hl kwa">in</span> i <span class="hl opt">:=</span> i <span class="hl opt">+</span> <span class="hl num">1</span>
  <span class="hl kwa">end</span> <span class="hl slc">// end of [val]</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> workshop_wait_quit_all <span class="hl opt">(</span>ws<span class="hl opt">)</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> workshop_free_vt_exn <span class="hl opt">(</span>ws<span class="hl opt">)</span>
<span class="hl slc">//</span>
<span class="hl kwa">in</span>
  printf<span class="hl opt">(</span><span class="hl str">&quot;%0.9f</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> &#64;<span class="hl opt">(</span>$<span class="hl kwc">M</span><span class="hl opt">.</span>sqrt <span class="hl opt">(</span>vBv/vv<span class="hl opt">)))</span>
<span class="hl kwa">end</span> <span class="hl slc">// end of [main]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl com">(* end of [spectral-norm3.dats] *)</span>
