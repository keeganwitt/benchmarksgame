<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   conversion to Scala by Rex Kerr</span>
<span class="hl com">   from Java version by Oleg Mazurov and Isaac Gouy</span>
<span class="hl com">*/</span>

<span class="hl kwa">object</span> fannkuchredux
<span class="hl opt">{</span>
  <span class="hl kwa">def</span> <span class="hl kwd">fannkuch</span><span class="hl opt">(</span>n<span class="hl opt">:</span> Int<span class="hl opt">):</span> Int <span class="hl opt">= {</span>
    <span class="hl kwa">val</span> perm1 <span class="hl opt">=</span> Array<span class="hl opt">.</span><span class="hl kwd">range</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span>n<span class="hl opt">)</span>
    <span class="hl kwa">val</span> perm<span class="hl opt">,</span> count <span class="hl opt">=</span> <span class="hl kwa">new</span> Array<span class="hl opt">[</span>Int<span class="hl opt">](</span>n<span class="hl opt">)</span>
    <span class="hl kwa">var</span> f<span class="hl opt">,</span> i<span class="hl opt">,</span> k<span class="hl opt">,</span> r<span class="hl opt">,</span> flips<span class="hl opt">,</span> nperm<span class="hl opt">,</span> checksum <span class="hl opt">=</span> <span class="hl num">0</span>

    r <span class="hl opt">=</span> n
    <span class="hl kwa">while</span> <span class="hl opt">(</span>r<span class="hl opt">&gt;</span><span class="hl num">0</span><span class="hl opt">) {</span>
      i <span class="hl opt">=</span> <span class="hl num">0</span>
      <span class="hl kwa">while</span> <span class="hl opt">(</span>r <span class="hl opt">!=</span> <span class="hl num">1</span><span class="hl opt">) {</span> <span class="hl kwd">count</span><span class="hl opt">(</span>r<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">) =</span> r<span class="hl opt">;</span> r <span class="hl opt">-=</span> <span class="hl num">1</span> <span class="hl opt">}</span>
      <span class="hl kwa">while</span> <span class="hl opt">(</span>i <span class="hl opt">&lt;</span> n<span class="hl opt">) {</span> <span class="hl kwd">perm</span><span class="hl opt">(</span>i<span class="hl opt">) =</span> <span class="hl kwd">perm1</span><span class="hl opt">(</span>i<span class="hl opt">);</span> i <span class="hl opt">+=</span> <span class="hl num">1</span> <span class="hl opt">}</span>
      
      <span class="hl slc">// Count flips and update max  and checksum</span>
      f <span class="hl opt">=</span> <span class="hl num">0</span>
      k <span class="hl opt">=</span> <span class="hl kwd">perm</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">)</span>
      <span class="hl kwa">while</span> <span class="hl opt">(</span>k <span class="hl opt">!=</span> <span class="hl num">0</span><span class="hl opt">) {</span>
        i <span class="hl opt">=</span> <span class="hl num">0</span>
        <span class="hl kwa">while</span> <span class="hl opt">(</span><span class="hl num">2</span><span class="hl opt">*</span>i <span class="hl opt">&lt;</span> k<span class="hl opt">) {</span>
          <span class="hl kwa">val</span> t <span class="hl opt">=</span> <span class="hl kwd">perm</span><span class="hl opt">(</span>i<span class="hl opt">);</span> <span class="hl kwd">perm</span><span class="hl opt">(</span>i<span class="hl opt">) =</span> <span class="hl kwd">perm</span><span class="hl opt">(</span>k<span class="hl opt">-</span>i<span class="hl opt">);</span> <span class="hl kwd">perm</span><span class="hl opt">(</span>k<span class="hl opt">-</span>i<span class="hl opt">) =</span> t
          i <span class="hl opt">+=</span> <span class="hl num">1</span>
        <span class="hl opt">}</span>
        k <span class="hl opt">=</span> <span class="hl kwd">perm</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">)</span>
        f <span class="hl opt">+=</span> <span class="hl num">1</span>
      <span class="hl opt">}</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>f<span class="hl opt">&gt;</span>flips<span class="hl opt">)</span> flips <span class="hl opt">=</span> f
      <span class="hl kwa">if</span> <span class="hl opt">((</span>nperm<span class="hl opt">&amp;</span><span class="hl num">0x1</span><span class="hl opt">)==</span><span class="hl num">0</span><span class="hl opt">)</span> checksum <span class="hl opt">+=</span> f
      <span class="hl kwa">else</span> checksum <span class="hl opt">-=</span> f

      <span class="hl slc">// Use incremental change to generate another permutation</span>
      <span class="hl kwa">var</span> go <span class="hl opt">=</span> true
      <span class="hl kwa">while</span> <span class="hl opt">(</span>go<span class="hl opt">) {</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>r <span class="hl opt">==</span> n<span class="hl opt">) {</span>
          <span class="hl kwd">println</span><span class="hl opt">(</span>checksum<span class="hl opt">)</span>
          <span class="hl kwa">return</span> flips
        <span class="hl opt">}</span>
        <span class="hl kwa">val</span> p0 <span class="hl opt">=</span> <span class="hl kwd">perm1</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">)</span>
        i <span class="hl opt">=</span> <span class="hl num">0</span>
        <span class="hl kwa">while</span> <span class="hl opt">(</span>i <span class="hl opt">&lt;</span> r<span class="hl opt">) {</span>
          <span class="hl kwa">val</span> j <span class="hl opt">=</span> i<span class="hl opt">+</span><span class="hl num">1</span>
          <span class="hl kwd">perm1</span><span class="hl opt">(</span>i<span class="hl opt">) =</span> <span class="hl kwd">perm1</span><span class="hl opt">(</span>j<span class="hl opt">)</span>
          i <span class="hl opt">=</span> j
        <span class="hl opt">}</span>
        <span class="hl kwd">perm1</span><span class="hl opt">(</span>r<span class="hl opt">) =</span> p0

        <span class="hl kwd">count</span><span class="hl opt">(</span>r<span class="hl opt">) -=</span> <span class="hl num">1</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">count</span><span class="hl opt">(</span>r<span class="hl opt">) &gt;</span> <span class="hl num">0</span><span class="hl opt">)</span> go <span class="hl opt">=</span> false
        <span class="hl kwa">else</span> r <span class="hl opt">+=</span> <span class="hl num">1</span>
      <span class="hl opt">}</span>
      nperm <span class="hl opt">+=</span> <span class="hl num">1</span>
    <span class="hl opt">}</span>
    flips
  <span class="hl opt">}</span>

  <span class="hl kwa">def</span> <span class="hl kwd">main</span><span class="hl opt">(</span>args<span class="hl opt">:</span> Array<span class="hl opt">[</span>String<span class="hl opt">]) {</span>
    <span class="hl kwa">val</span> n <span class="hl opt">= (</span><span class="hl kwa">if</span> <span class="hl opt">(</span>args<span class="hl opt">.</span>length <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwd">args</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">).</span>toInt <span class="hl kwa">else</span> <span class="hl num">7</span><span class="hl opt">)</span>
    <span class="hl kwd">println</span><span class="hl opt">(</span><span class="hl str">&quot;Pfannkuchen(&quot;</span><span class="hl opt">+</span>n<span class="hl opt">+</span><span class="hl str">&quot;) = &quot;</span><span class="hl opt">+</span><span class="hl kwd">fannkuch</span><span class="hl opt">(</span>n<span class="hl opt">))</span>
  <span class="hl opt">}</span>
<span class="hl opt">}</span>
