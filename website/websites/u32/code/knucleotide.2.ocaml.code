<span class="hl com">(* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * contributed by Troestler Christophe</span>
<span class="hl com"> * modified by Mauricio Fernandez</span>
<span class="hl com"> *)</span>

<span class="hl kwa">module</span> <span class="hl kwd">C</span><span class="hl opt">(</span><span class="hl kwd">S</span> <span class="hl opt">:</span> <span class="hl kwa">sig</span>
           <span class="hl kwa">val</span> k <span class="hl opt">:</span> <span class="hl kwb">int</span>
           <span class="hl kwa">val</span> dna <span class="hl opt">:</span> <span class="hl kwb">string</span>
         <span class="hl kwa">end</span><span class="hl opt">) =</span>
<span class="hl kwa">struct</span>
  <span class="hl kwa">let</span> dna<span class="hl opt">,</span> k <span class="hl opt">=</span> <span class="hl kwc">S</span><span class="hl opt">.</span>dna<span class="hl opt">,</span> <span class="hl kwc">S</span><span class="hl opt">.</span>k

  <span class="hl kwa">module</span> <span class="hl kwd">K</span> <span class="hl opt">=</span> <span class="hl kwa">struct</span>
    <span class="hl kwa">type</span> t <span class="hl opt">=</span> <span class="hl kwb">int</span>
    <span class="hl kwa">let</span> equal k1 k2 <span class="hl opt">=</span>
      <span class="hl kwa">let rec</span> cmp n ka kb <span class="hl opt">=</span>
        <span class="hl kwa">if</span> n <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl kwa">then true</span>
        <span class="hl kwa">else if</span> dna<span class="hl opt">.[</span>ka<span class="hl opt">] =</span> dna<span class="hl opt">.[</span>kb<span class="hl opt">]</span> <span class="hl kwa">then</span> cmp <span class="hl opt">(</span>n <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">) (</span>ka <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">) (</span>kb <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">)</span>
        <span class="hl kwa">else false</span>
      <span class="hl kwa">in</span> cmp k k1 k2

    <span class="hl kwa">let</span> hash n <span class="hl opt">=</span>
      <span class="hl kwa">let</span> h <span class="hl opt">=</span> <span class="hl kwb">ref</span> <span class="hl num">0</span> <span class="hl kwa">in</span>
        <span class="hl kwa">for</span> i <span class="hl opt">=</span> n <span class="hl kwa">to</span> n <span class="hl opt">+</span> k <span class="hl opt">-</span> <span class="hl num">1</span> <span class="hl kwa">do</span> h <span class="hl opt">:= !</span>h <span class="hl opt">*</span> <span class="hl num">5</span> <span class="hl opt">+</span> <span class="hl kwc">Char</span><span class="hl opt">.</span>code dna<span class="hl opt">.[</span>i<span class="hl opt">]</span> <span class="hl kwa">done</span><span class="hl opt">;</span>
        <span class="hl opt">!</span>h
  <span class="hl kwa">end</span>

  <span class="hl kwa">let</span> c <span class="hl opt">=</span> <span class="hl num">0x40000</span>
  <span class="hl kwa">include</span> <span class="hl kwc">Hashtbl</span><span class="hl opt">.</span><span class="hl kwd">Make</span><span class="hl opt">(</span><span class="hl kwd">K</span><span class="hl opt">)</span>
  <span class="hl kwa">let</span> h <span class="hl opt">=</span> create c

  <span class="hl kwa">let</span> count <span class="hl opt">() =</span> 
    <span class="hl kwa">for</span> i <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> <span class="hl kwc">String</span><span class="hl opt">.</span>length dna <span class="hl opt">-</span> k <span class="hl opt">-</span> <span class="hl num">1</span> <span class="hl kwa">do</span>
      <span class="hl kwa">try</span> incr <span class="hl opt">(</span>find h i<span class="hl opt">)</span> <span class="hl kwa">with</span> <span class="hl kwd">Not_found</span> <span class="hl opt">-&gt;</span> add h i <span class="hl opt">(</span><span class="hl kwb">ref</span> <span class="hl num">1</span><span class="hl opt">)</span>
    <span class="hl kwa">done</span>

  <span class="hl kwa">let</span> compare_freq <span class="hl opt">((</span>k1<span class="hl opt">:</span><span class="hl kwb">string</span><span class="hl opt">),(</span>f1<span class="hl opt">:</span><span class="hl kwb">float</span><span class="hl opt">)) (</span>k2<span class="hl opt">,</span> f2<span class="hl opt">) =</span>
    <span class="hl kwa">if</span> f1 <span class="hl opt">&gt;</span> f2 <span class="hl kwa">then</span> <span class="hl opt">-</span><span class="hl num">1</span> <span class="hl kwa">else if</span> f1 <span class="hl opt">&lt;</span> f2 <span class="hl kwa">then</span> <span class="hl num">1</span> <span class="hl kwa">else</span> <span class="hl kwc">String</span><span class="hl opt">.</span>compare k1 k2

  <span class="hl kwa">let</span> write_frequencies <span class="hl opt">() =</span>
    count <span class="hl opt">();</span>
    <span class="hl kwa">let</span> tot <span class="hl opt">=</span> <span class="hl kwb">float</span><span class="hl opt">(</span>fold <span class="hl opt">(</span><span class="hl kwa">fun</span> _ n t <span class="hl opt">-&gt; !</span>n <span class="hl opt">+</span> t<span class="hl opt">)</span> h <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">in</span>
    <span class="hl kwa">let</span> frq <span class="hl opt">=</span>
      fold <span class="hl opt">(</span><span class="hl kwa">fun</span> off n l <span class="hl opt">-&gt;</span> 
              <span class="hl opt">(</span><span class="hl kwc">String</span><span class="hl opt">.</span>sub dna off k<span class="hl opt">,</span> <span class="hl num">100</span><span class="hl opt">. *.</span> <span class="hl kwb">float</span> <span class="hl opt">!</span>n <span class="hl opt">/.</span> tot<span class="hl opt">) ::</span> l<span class="hl opt">)</span> h <span class="hl opt">[]</span> <span class="hl kwa">in</span>
    <span class="hl kwa">let</span> frq <span class="hl opt">=</span> <span class="hl kwc">List</span><span class="hl opt">.</span>sort compare_freq frq <span class="hl kwa">in</span>
      <span class="hl kwc">String</span><span class="hl opt">.</span>concat <span class="hl str">&quot;&quot;</span> 
        <span class="hl opt">(</span><span class="hl kwc">List</span><span class="hl opt">.</span>map <span class="hl opt">(</span><span class="hl kwa">fun</span> <span class="hl opt">(</span>k<span class="hl opt">,</span>f<span class="hl opt">) -&gt;</span> <span class="hl kwc">Printf</span><span class="hl opt">.</span>sprintf <span class="hl str">&quot;%s %.3f</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> k f<span class="hl opt">)</span> frq<span class="hl opt">)</span>

  <span class="hl kwa">let</span> write_count seq <span class="hl opt">=</span>
    <span class="hl kwa">assert</span> <span class="hl opt">(</span><span class="hl kwc">String</span><span class="hl opt">.</span>length seq <span class="hl opt">=</span> k<span class="hl opt">);</span>
    count <span class="hl opt">();</span>
    <span class="hl kwc">String</span><span class="hl opt">.</span>blit seq <span class="hl num">0</span> dna <span class="hl num">0</span> k<span class="hl opt">;</span>
    <span class="hl kwc">Printf</span><span class="hl opt">.</span>sprintf <span class="hl str">&quot;%d</span><span class="hl esc">\t</span><span class="hl str">%s&quot;</span> <span class="hl opt">(</span><span class="hl kwa">try</span> <span class="hl opt">!(</span>find h <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">with</span> <span class="hl kwd">Not_found</span> <span class="hl opt">-&gt;</span> <span class="hl num">0</span><span class="hl opt">)</span> seq
<span class="hl kwa">end</span>

<span class="hl com">(* Extract DNA sequence &quot;THREE&quot; from stdin *)</span>
<span class="hl kwa">let</span> dna_three <span class="hl opt">=</span>
  <span class="hl kwa">let</span> is_not_three s <span class="hl opt">=</span> <span class="hl kwa">try</span> <span class="hl kwc">String</span><span class="hl opt">.</span>sub s <span class="hl num">0 6</span> <span class="hl opt">&lt;&gt;</span> <span class="hl str">&quot;&gt;THREE&quot;</span> <span class="hl kwa">with</span> _ <span class="hl opt">-&gt;</span> <span class="hl kwa">true in</span>
  <span class="hl kwa">while</span> is_not_three<span class="hl opt">(</span>input_line stdin<span class="hl opt">)</span> <span class="hl kwa">do</span> <span class="hl opt">()</span> <span class="hl kwa">done</span><span class="hl opt">;</span>
  <span class="hl kwa">let</span> buf <span class="hl opt">=</span> <span class="hl kwc">Buffer</span><span class="hl opt">.</span>create <span class="hl num">1000</span> <span class="hl kwa">in</span>
  <span class="hl com">(* Skip possible comment *)</span>
  <span class="hl opt">(</span><span class="hl kwa">try while true do</span>
     <span class="hl kwa">let</span> line <span class="hl opt">=</span> input_line stdin <span class="hl kwa">in</span>
     <span class="hl kwa">if</span> line<span class="hl opt">.[</span><span class="hl num">0</span><span class="hl opt">] &lt;&gt;</span> <span class="hl str">';'</span> <span class="hl kwa">then</span>
       <span class="hl opt">(</span><span class="hl kwc">Buffer</span><span class="hl opt">.</span>add_string buf <span class="hl opt">(</span><span class="hl kwc">String</span><span class="hl opt">.</span>uppercase line<span class="hl opt">);</span> raise <span class="hl kwd">Exit</span><span class="hl opt">)</span>
   <span class="hl kwa">done with</span> _ <span class="hl opt">-&gt; ());</span>
  <span class="hl com">(* Read the DNA sequence *)</span>
  <span class="hl opt">(</span><span class="hl kwa">try while true do</span>
       <span class="hl kwa">let</span> line <span class="hl opt">=</span> input_line stdin <span class="hl kwa">in</span>
       <span class="hl kwa">if</span> line<span class="hl opt">.[</span><span class="hl num">0</span><span class="hl opt">] =</span> <span class="hl str">'&gt;'</span> <span class="hl kwa">then</span> raise <span class="hl kwd">End_of_file</span><span class="hl opt">;</span>
       <span class="hl kwc">Buffer</span><span class="hl opt">.</span>add_string buf <span class="hl opt">(</span><span class="hl kwc">String</span><span class="hl opt">.</span>uppercase line<span class="hl opt">)</span>
   <span class="hl kwa">done with</span> <span class="hl kwd">End_of_file</span> <span class="hl opt">-&gt; ());</span>
  <span class="hl kwc">Buffer</span><span class="hl opt">.</span>contents buf

<span class="hl kwa">let</span> invoke <span class="hl opt">(</span>f <span class="hl opt">:</span> <span class="hl str">'a -&gt; '</span>b<span class="hl opt">)</span> x <span class="hl opt">:</span> <span class="hl kwb">unit</span> <span class="hl opt">-&gt;</span> <span class="hl str">'b =</span>
<span class="hl str">  let input, output = Unix.pipe() in</span>
<span class="hl str">  match Unix.fork() with</span>
<span class="hl str">  | -1 -&gt; Unix.close input; Unix.close output; (let v = f x in fun () -&gt; v)</span>
<span class="hl str">  | 0 -&gt;</span>
<span class="hl str">      Unix.close input;</span>
<span class="hl str">      let output = Unix.out_channel_of_descr output in</span>
<span class="hl str">        Marshal.to_channel output (try `Res(f x) with e -&gt; `Exn e) [];</span>
<span class="hl str">        close_out output;</span>
<span class="hl str">        exit 0</span>
<span class="hl str">  | pid -&gt;</span>
<span class="hl str">      Unix.close output;</span>
<span class="hl str">      let input = Unix.in_channel_of_descr input in fun () -&gt;</span>
<span class="hl str">        let v = Marshal.from_channel input in</span>
<span class="hl str">        ignore (Unix.waitpid [] pid);</span>
<span class="hl str">        close_in input;</span>
<span class="hl str">        match v with `Res x -&gt; x | `Exn e -&gt; raise e</span>
<span class="hl str"></span>
<span class="hl str">let parallelize f l =</span>
<span class="hl str">  List.iter (fun g -&gt; print_endline (g ())) (List.map (invoke f) l)</span>
<span class="hl str"></span>
<span class="hl str">let () =</span>
<span class="hl str">  parallelize</span>
<span class="hl str">    (fun i -&gt; </span>
<span class="hl str">       let module M = C(struct let k = i let dna = dna_three end) in</span>
<span class="hl str">         M.write_frequencies ()) [1; 2];</span>
<span class="hl str">  parallelize</span>
<span class="hl str">    (fun k -&gt; </span>
<span class="hl str">       let module M = C(struct let k = String.length k let dna = dna_three end) in</span>
<span class="hl str">         M.write_count k)</span>
<span class="hl str">    [&quot;GGT&quot;; &quot;GGTA&quot;; &quot;GGTATT&quot;; &quot;GGTATTTTAATT&quot;; &quot;GGTATTTTAATTTATAGT&quot;]</span>
