<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * contributed by Enotus 2010-11-26</span>
<span class="hl com"> *</span>
<span class="hl com"> */</span>

<span class="hl kwa">import</span> java<span class="hl opt">.</span>io<span class="hl opt">.*;</span>
<span class="hl kwa">import</span> java<span class="hl opt">.</span>util<span class="hl opt">.*;</span>
<span class="hl kwa">import</span> java<span class="hl opt">.</span>util<span class="hl opt">.</span>concurrent<span class="hl opt">.</span>atomic<span class="hl opt">.</span>AtomicInteger<span class="hl opt">;</span>

<span class="hl kwa">public final class</span> regexdna <span class="hl opt">{</span>

   <span class="hl kwa">static final class</span> ByteString<span class="hl opt">{</span>
      <span class="hl kwa">final</span> <span class="hl kwb">byte</span><span class="hl opt">[]</span> data<span class="hl opt">;</span>
      <span class="hl kwd">ByteString</span><span class="hl opt">(</span><span class="hl kwb">int</span> size<span class="hl opt">){</span>data<span class="hl opt">=</span><span class="hl kwa">new</span> <span class="hl kwb">byte</span><span class="hl opt">[</span>size<span class="hl opt">];}</span>
      <span class="hl kwd">ByteString</span><span class="hl opt">(</span>String s<span class="hl opt">){</span>data<span class="hl opt">=</span>s<span class="hl opt">.</span><span class="hl kwd">getBytes</span><span class="hl opt">();}</span>
      <span class="hl kwd">ByteString</span><span class="hl opt">(</span><span class="hl kwb">byte</span><span class="hl opt">[]</span> od<span class="hl opt">,</span><span class="hl kwb">int</span> op<span class="hl opt">,</span><span class="hl kwb">int</span> ol<span class="hl opt">){</span>data<span class="hl opt">=</span><span class="hl kwa">new</span> <span class="hl kwb">byte</span><span class="hl opt">[</span>ol<span class="hl opt">];</span>System<span class="hl opt">.</span><span class="hl kwd">arraycopy</span><span class="hl opt">(</span>od<span class="hl opt">,</span> op<span class="hl opt">,</span> data<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> ol<span class="hl opt">);}</span>
      <span class="hl kwb">int</span> <span class="hl kwd">length</span><span class="hl opt">(){</span><span class="hl kwa">return</span> data<span class="hl opt">.</span>length<span class="hl opt">;}</span>
      <span class="hl kwa">public</span> String <span class="hl kwd">toString</span><span class="hl opt">(){</span><span class="hl kwa">return new</span> <span class="hl kwd">String</span><span class="hl opt">(</span>data<span class="hl opt">);}</span>
      <span class="hl kwa">public</span> <span class="hl kwb">int</span> <span class="hl kwd">hashCode</span><span class="hl opt">(){</span><span class="hl kwa">return</span> Arrays<span class="hl opt">.</span><span class="hl kwd">hashCode</span><span class="hl opt">(</span>data<span class="hl opt">);}</span>
      <span class="hl kwa">public</span> <span class="hl kwb">boolean</span> <span class="hl kwd">equals</span><span class="hl opt">(</span>Object obj<span class="hl opt">){</span>
         <span class="hl kwa">if</span><span class="hl opt">(</span>obj<span class="hl opt">!=</span>null <span class="hl opt">&amp;&amp;</span> <span class="hl kwd">getClass</span><span class="hl opt">()==</span>obj<span class="hl opt">.</span><span class="hl kwd">getClass</span><span class="hl opt">() &amp;&amp;</span> Arrays<span class="hl opt">.</span><span class="hl kwd">equals</span><span class="hl opt">(</span>data<span class="hl opt">, ((</span>ByteString<span class="hl opt">)</span> obj<span class="hl opt">).</span>data<span class="hl opt">))</span> <span class="hl kwa">return</span> true<span class="hl opt">;</span>
         <span class="hl kwa">else return</span> false<span class="hl opt">;</span>
      <span class="hl opt">}</span>
   <span class="hl opt">}</span>
   <span class="hl kwa">static final class</span> ByteBuilder<span class="hl opt">{</span>
      <span class="hl kwb">byte</span><span class="hl opt">[]</span> data<span class="hl opt">;</span><span class="hl kwb">int</span> size<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span>
      <span class="hl kwd">ByteBuilder</span><span class="hl opt">(</span><span class="hl kwb">int</span> size<span class="hl opt">){</span>data<span class="hl opt">=</span><span class="hl kwa">new</span> <span class="hl kwb">byte</span><span class="hl opt">[</span>size<span class="hl opt">];}</span>
      <span class="hl kwb">int</span> <span class="hl kwd">length</span><span class="hl opt">(){</span><span class="hl kwa">return</span> size<span class="hl opt">;}</span>
      <span class="hl kwb">void</span> <span class="hl kwd">append</span><span class="hl opt">(</span><span class="hl kwb">byte</span><span class="hl opt">[]</span> od<span class="hl opt">,</span><span class="hl kwb">int</span> op<span class="hl opt">,</span><span class="hl kwb">int</span> ol<span class="hl opt">){</span>
         <span class="hl kwa">if</span><span class="hl opt">(</span>data<span class="hl opt">.</span>length<span class="hl opt">&lt;(</span>size<span class="hl opt">+=</span>ol<span class="hl opt">))</span> data<span class="hl opt">=</span>Arrays<span class="hl opt">.</span><span class="hl kwd">copyOf</span><span class="hl opt">(</span>data<span class="hl opt">,</span>size<span class="hl opt">*</span><span class="hl num">2</span><span class="hl opt">);</span>
         System<span class="hl opt">.</span><span class="hl kwd">arraycopy</span><span class="hl opt">(</span>od<span class="hl opt">,</span>op<span class="hl opt">,</span>data<span class="hl opt">,</span>size<span class="hl opt">-</span>ol<span class="hl opt">,</span>ol<span class="hl opt">);</span>
      <span class="hl opt">}</span>
      ByteString <span class="hl kwd">toByteString</span><span class="hl opt">(){</span><span class="hl kwa">return new</span> <span class="hl kwd">ByteString</span><span class="hl opt">(</span>data<span class="hl opt">,</span><span class="hl num">0</span><span class="hl opt">,</span>size<span class="hl opt">);}</span>
   <span class="hl opt">}</span>

   <span class="hl kwa">static final class</span> Matcher<span class="hl opt">{</span>
      <span class="hl kwa">static final</span> <span class="hl kwb">int</span> transSize<span class="hl opt">=</span><span class="hl num">128</span><span class="hl opt">;</span>
      <span class="hl kwa">static final class</span> State<span class="hl opt">{</span>
         <span class="hl kwa">final</span> State<span class="hl opt">[]</span> trans<span class="hl opt">=</span><span class="hl kwa">new</span> State<span class="hl opt">[</span>transSize<span class="hl opt">];</span><span class="hl kwb">boolean</span> isFinal<span class="hl opt">;</span><span class="hl kwb">int</span> start<span class="hl opt">;</span>
         <span class="hl kwb">void</span> <span class="hl kwd">copyFrom</span><span class="hl opt">(</span>State o<span class="hl opt">){</span>System<span class="hl opt">.</span><span class="hl kwd">arraycopy</span><span class="hl opt">(</span>o<span class="hl opt">.</span>trans<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> trans<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> transSize<span class="hl opt">);</span>isFinal<span class="hl opt">=</span>o<span class="hl opt">.</span>isFinal<span class="hl opt">;}</span>
      <span class="hl opt">}</span>

      <span class="hl kwa">final</span> <span class="hl kwb">byte</span><span class="hl opt">[]</span> inData<span class="hl opt">;</span><span class="hl kwa">final</span> <span class="hl kwb">int</span> inSize<span class="hl opt">;</span>
      <span class="hl kwa">final</span> State rootState<span class="hl opt">=</span><span class="hl kwa">new</span> <span class="hl kwd">State</span><span class="hl opt">();</span><span class="hl kwa">final</span> State<span class="hl opt">[]</span> root<span class="hl opt">=</span>rootState<span class="hl opt">.</span>trans<span class="hl opt">;</span>
      <span class="hl kwa">final</span> State<span class="hl opt">[]</span> active<span class="hl opt">;</span><span class="hl kwb">int</span> act<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span>

      <span class="hl kwa">private</span> List<span class="hl opt">&lt;</span>Character<span class="hl opt">&gt;</span> <span class="hl kwd">getCharList</span><span class="hl opt">(</span><span class="hl kwb">char</span> c<span class="hl opt">){</span>
         List<span class="hl opt">&lt;</span>Character<span class="hl opt">&gt;</span> cc<span class="hl opt">=</span><span class="hl kwa">new</span> ArrayList<span class="hl opt">&lt;</span>Character<span class="hl opt">&gt;();</span>
         <span class="hl kwa">if</span><span class="hl opt">(</span>c<span class="hl opt">==</span><span class="hl str">'.'</span><span class="hl opt">){</span>
            <span class="hl kwa">for</span><span class="hl opt">(</span><span class="hl kwb">int</span> i<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span>i<span class="hl opt">&lt;</span>transSize<span class="hl opt">;</span>i<span class="hl opt">++)</span> <span class="hl kwa">if</span><span class="hl opt">(</span>i<span class="hl opt">!=</span><span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl opt">)</span> cc<span class="hl opt">.</span><span class="hl kwd">add</span><span class="hl opt">((</span><span class="hl kwb">char</span><span class="hl opt">)</span>i<span class="hl opt">);</span>
         <span class="hl opt">}</span><span class="hl kwa">else if</span><span class="hl opt">(</span>Character<span class="hl opt">.</span><span class="hl kwd">isLetter</span><span class="hl opt">(</span>c<span class="hl opt">)){</span>
            cc<span class="hl opt">.</span><span class="hl kwd">add</span><span class="hl opt">(</span>Character<span class="hl opt">.</span><span class="hl kwd">toLowerCase</span><span class="hl opt">(</span>c<span class="hl opt">));</span>
            cc<span class="hl opt">.</span><span class="hl kwd">add</span><span class="hl opt">(</span>Character<span class="hl opt">.</span><span class="hl kwd">toUpperCase</span><span class="hl opt">(</span>c<span class="hl opt">));</span>
         <span class="hl opt">}</span><span class="hl kwa">else</span><span class="hl opt">{</span>
            cc<span class="hl opt">.</span><span class="hl kwd">add</span><span class="hl opt">(</span>c<span class="hl opt">);</span>
         <span class="hl opt">}</span>
         <span class="hl kwa">return</span> cc<span class="hl opt">;</span>
      <span class="hl opt">}</span>
      
      <span class="hl kwb">int</span> <span class="hl kwd">addBar</span><span class="hl opt">(</span>String pattern<span class="hl opt">,</span><span class="hl kwb">int</span> index<span class="hl opt">,</span>List<span class="hl opt">&lt;</span>State<span class="hl opt">&gt;</span> ss<span class="hl opt">){</span>
         <span class="hl kwa">for</span><span class="hl opt">(</span>State s<span class="hl opt">:</span>ss<span class="hl opt">)</span>s<span class="hl opt">.</span>isFinal<span class="hl opt">=</span>true<span class="hl opt">;</span>
         ss<span class="hl opt">.</span><span class="hl kwd">clear</span><span class="hl opt">();</span>ss<span class="hl opt">.</span><span class="hl kwd">add</span><span class="hl opt">(</span>rootState<span class="hl opt">);</span>
         <span class="hl kwa">return</span> index<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">;</span>
      <span class="hl opt">}</span>
      <span class="hl kwb">int</span> <span class="hl kwd">addPar</span><span class="hl opt">(</span>String pattern<span class="hl opt">,</span><span class="hl kwb">int</span> index<span class="hl opt">,</span>List<span class="hl opt">&lt;</span>State<span class="hl opt">&gt;</span> ss<span class="hl opt">){</span>
         State ns<span class="hl opt">=</span><span class="hl kwa">new</span> <span class="hl kwd">State</span><span class="hl opt">();</span>
         List<span class="hl opt">&lt;</span>State<span class="hl opt">&gt;</span> nss<span class="hl opt">=</span><span class="hl kwa">new</span> ArrayList<span class="hl opt">&lt;</span>State<span class="hl opt">&gt;();</span>nss<span class="hl opt">.</span><span class="hl kwd">add</span><span class="hl opt">(</span>ns<span class="hl opt">);</span>
         index<span class="hl opt">++;</span>
         <span class="hl kwb">char</span> pc<span class="hl opt">;</span>
         <span class="hl kwa">while</span><span class="hl opt">((</span>pc<span class="hl opt">=</span>pattern<span class="hl opt">.</span><span class="hl kwd">charAt</span><span class="hl opt">(</span>index<span class="hl opt">++))!=</span><span class="hl str">']'</span><span class="hl opt">){</span>
            <span class="hl kwa">for</span><span class="hl opt">(</span><span class="hl kwb">char</span> c<span class="hl opt">:</span><span class="hl kwd">getCharList</span><span class="hl opt">(</span>pc<span class="hl opt">))</span>
               <span class="hl kwa">for</span><span class="hl opt">(</span>State s<span class="hl opt">:</span>ss<span class="hl opt">)</span>
                  <span class="hl kwa">if</span><span class="hl opt">(</span>s<span class="hl opt">.</span>trans<span class="hl opt">[</span>c<span class="hl opt">]!=</span>null<span class="hl opt">)</span>nss<span class="hl opt">.</span><span class="hl kwd">add</span><span class="hl opt">(</span>s<span class="hl opt">.</span>trans<span class="hl opt">[</span>c<span class="hl opt">]);</span>
                  <span class="hl kwa">else</span> s<span class="hl opt">.</span>trans<span class="hl opt">[</span>c<span class="hl opt">]=</span>ns<span class="hl opt">;</span>
         <span class="hl opt">}</span>
         ss<span class="hl opt">.</span><span class="hl kwd">clear</span><span class="hl opt">();</span>ss<span class="hl opt">.</span><span class="hl kwd">addAll</span><span class="hl opt">(</span>nss<span class="hl opt">);</span>
         <span class="hl kwa">return</span> index<span class="hl opt">;</span>
      <span class="hl opt">}</span>
      <span class="hl kwb">int</span> <span class="hl kwd">addPointStar</span><span class="hl opt">(</span>String pattern<span class="hl opt">,</span><span class="hl kwb">int</span> index<span class="hl opt">,</span>List<span class="hl opt">&lt;</span>State<span class="hl opt">&gt;</span> ss<span class="hl opt">){</span>
         State ns<span class="hl opt">=</span><span class="hl kwa">new</span> <span class="hl kwd">State</span><span class="hl opt">();</span>
         ss<span class="hl opt">.</span><span class="hl kwd">add</span><span class="hl opt">(</span>ns<span class="hl opt">);</span>
         <span class="hl kwa">for</span><span class="hl opt">(</span><span class="hl kwb">char</span> c<span class="hl opt">:</span><span class="hl kwd">getCharList</span><span class="hl opt">(</span>pattern<span class="hl opt">.</span><span class="hl kwd">charAt</span><span class="hl opt">(</span>index<span class="hl opt">)))</span>
            <span class="hl kwa">for</span><span class="hl opt">(</span>State s<span class="hl opt">:</span>ss<span class="hl opt">){</span>
               <span class="hl kwa">if</span><span class="hl opt">(</span>s<span class="hl opt">.</span>trans<span class="hl opt">[</span>c<span class="hl opt">]!=</span>null<span class="hl opt">)</span>ns<span class="hl opt">.</span><span class="hl kwd">copyFrom</span><span class="hl opt">(</span>s<span class="hl opt">.</span>trans<span class="hl opt">[</span>c<span class="hl opt">]);</span>
               s<span class="hl opt">.</span>trans<span class="hl opt">[</span>c<span class="hl opt">]=</span>ns<span class="hl opt">;</span>
            <span class="hl opt">}</span>
         <span class="hl kwa">return</span> index<span class="hl opt">+</span><span class="hl num">2</span><span class="hl opt">;</span>
      <span class="hl opt">}</span>
      <span class="hl kwb">int</span> <span class="hl kwd">addCharConcat</span><span class="hl opt">(</span>String pattern<span class="hl opt">,</span><span class="hl kwb">int</span> index<span class="hl opt">,</span>List<span class="hl opt">&lt;</span>State<span class="hl opt">&gt;</span> ss<span class="hl opt">){</span>
         State ns<span class="hl opt">=</span><span class="hl kwa">new</span> <span class="hl kwd">State</span><span class="hl opt">();</span>
         <span class="hl kwa">for</span><span class="hl opt">(</span><span class="hl kwb">char</span> c<span class="hl opt">:</span><span class="hl kwd">getCharList</span><span class="hl opt">(</span>pattern<span class="hl opt">.</span><span class="hl kwd">charAt</span><span class="hl opt">(</span>index<span class="hl opt">)))</span>
            <span class="hl kwa">for</span><span class="hl opt">(</span>State s<span class="hl opt">:</span>ss<span class="hl opt">){</span>
               <span class="hl kwa">if</span><span class="hl opt">(</span>s<span class="hl opt">.</span>trans<span class="hl opt">[</span>c<span class="hl opt">]!=</span>null<span class="hl opt">)</span>ns<span class="hl opt">.</span><span class="hl kwd">copyFrom</span><span class="hl opt">(</span>s<span class="hl opt">.</span>trans<span class="hl opt">[</span>c<span class="hl opt">]);</span>
               s<span class="hl opt">.</span>trans<span class="hl opt">[</span>c<span class="hl opt">]=</span>ns<span class="hl opt">;</span>
            <span class="hl opt">}</span>
         ss<span class="hl opt">.</span><span class="hl kwd">clear</span><span class="hl opt">();</span>ss<span class="hl opt">.</span><span class="hl kwd">add</span><span class="hl opt">(</span>ns<span class="hl opt">);</span>
         <span class="hl kwa">return</span> index<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">;</span>
      <span class="hl opt">}</span>
      <span class="hl kwd">Matcher</span><span class="hl opt">(</span>String pattern<span class="hl opt">,</span>ByteString ins<span class="hl opt">){</span>
         List<span class="hl opt">&lt;</span>State<span class="hl opt">&gt;</span> ss<span class="hl opt">=</span><span class="hl kwa">new</span> ArrayList<span class="hl opt">&lt;</span>State<span class="hl opt">&gt;();</span>
         ss<span class="hl opt">.</span><span class="hl kwd">add</span><span class="hl opt">(</span>rootState<span class="hl opt">);</span>
         
         <span class="hl kwa">for</span><span class="hl opt">(</span><span class="hl kwb">int</span> i<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span>i<span class="hl opt">&lt;</span>pattern<span class="hl opt">.</span><span class="hl kwd">length</span><span class="hl opt">();){</span>
            <span class="hl kwa">if</span><span class="hl opt">(</span>pattern<span class="hl opt">.</span><span class="hl kwd">charAt</span><span class="hl opt">(</span>i<span class="hl opt">)==</span><span class="hl str">'|'</span><span class="hl opt">){</span>
               i<span class="hl opt">=</span><span class="hl kwd">addBar</span><span class="hl opt">(</span>pattern<span class="hl opt">,</span>i<span class="hl opt">,</span>ss<span class="hl opt">);</span>
            <span class="hl opt">}</span><span class="hl kwa">else if</span><span class="hl opt">(</span>pattern<span class="hl opt">.</span><span class="hl kwd">charAt</span><span class="hl opt">(</span>i<span class="hl opt">)==</span><span class="hl str">'['</span><span class="hl opt">){</span>
               i<span class="hl opt">=</span><span class="hl kwd">addPar</span><span class="hl opt">(</span>pattern<span class="hl opt">,</span>i<span class="hl opt">,</span>ss<span class="hl opt">);</span>
            <span class="hl opt">}</span><span class="hl kwa">else if</span><span class="hl opt">(</span>pattern<span class="hl opt">.</span><span class="hl kwd">charAt</span><span class="hl opt">(</span>i<span class="hl opt">)==</span><span class="hl str">'.'</span> <span class="hl opt">&amp;&amp;</span> i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">&lt;</span>pattern<span class="hl opt">.</span><span class="hl kwd">length</span><span class="hl opt">() &amp;&amp;</span> pattern<span class="hl opt">.</span><span class="hl kwd">charAt</span><span class="hl opt">(</span>i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)==</span><span class="hl str">'*'</span><span class="hl opt">){</span>
               i<span class="hl opt">=</span><span class="hl kwd">addPointStar</span><span class="hl opt">(</span>pattern<span class="hl opt">,</span>i<span class="hl opt">,</span>ss<span class="hl opt">);</span>
            <span class="hl opt">}</span><span class="hl kwa">else</span><span class="hl opt">{</span>
               i<span class="hl opt">=</span><span class="hl kwd">addCharConcat</span><span class="hl opt">(</span>pattern<span class="hl opt">,</span>i<span class="hl opt">,</span>ss<span class="hl opt">);</span>
            <span class="hl opt">}</span>
         <span class="hl opt">}</span>
         <span class="hl kwd">addBar</span><span class="hl opt">(</span>pattern<span class="hl opt">,</span><span class="hl num">0</span><span class="hl opt">,</span>ss<span class="hl opt">);</span>

         active<span class="hl opt">=</span><span class="hl kwa">new</span> State<span class="hl opt">[</span>pattern<span class="hl opt">.</span><span class="hl kwd">length</span><span class="hl opt">()];</span>
         inData<span class="hl opt">=</span>ins<span class="hl opt">.</span>data<span class="hl opt">;</span>inSize<span class="hl opt">=</span>inData<span class="hl opt">.</span>length<span class="hl opt">;</span>
      <span class="hl opt">}</span>

      <span class="hl kwb">int</span> start<span class="hl opt">=-</span><span class="hl num">1</span><span class="hl opt">;</span>
      <span class="hl kwb">int</span> <span class="hl kwd">startFind</span><span class="hl opt">(</span><span class="hl kwb">int</span> index<span class="hl opt">){</span>
         <span class="hl kwa">while</span><span class="hl opt">(</span>index<span class="hl opt">&lt;</span>inSize<span class="hl opt">){</span>
            <span class="hl kwb">int</span> c<span class="hl opt">=</span>inData<span class="hl opt">[</span>index<span class="hl opt">++];</span>

            <span class="hl kwb">int</span> nct<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span>
            <span class="hl kwa">for</span><span class="hl opt">(</span><span class="hl kwb">int</span> ct<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span>ct<span class="hl opt">&lt;</span>act<span class="hl opt">;</span>ct<span class="hl opt">++){</span>
               State s<span class="hl opt">=</span>active<span class="hl opt">[</span>ct<span class="hl opt">];</span>State ns<span class="hl opt">=</span>s<span class="hl opt">.</span>trans<span class="hl opt">[</span>c<span class="hl opt">];</span>
               <span class="hl kwa">if</span><span class="hl opt">(</span>ns<span class="hl opt">!=</span>null<span class="hl opt">)</span>   <span class="hl kwa">if</span><span class="hl opt">(</span>ns<span class="hl opt">.</span>isFinal<span class="hl opt">){</span>act<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span>start<span class="hl opt">=</span>s<span class="hl opt">.</span>start<span class="hl opt">;</span><span class="hl kwa">return</span> index<span class="hl opt">;}</span>
                           <span class="hl kwa">else</span><span class="hl opt">{</span>ns<span class="hl opt">.</span>start<span class="hl opt">=</span>s<span class="hl opt">.</span>start<span class="hl opt">;</span>active<span class="hl opt">[</span>nct<span class="hl opt">++]=</span>ns<span class="hl opt">;}</span>
            <span class="hl opt">}</span>
            act<span class="hl opt">=</span>nct<span class="hl opt">;</span>

            State ns<span class="hl opt">=</span>root<span class="hl opt">[</span>c<span class="hl opt">];</span>
            <span class="hl kwa">if</span><span class="hl opt">(</span>ns<span class="hl opt">!=</span>null<span class="hl opt">)</span>   <span class="hl kwa">if</span><span class="hl opt">(</span>ns<span class="hl opt">.</span>isFinal<span class="hl opt">){</span>act<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span>start<span class="hl opt">=</span>index<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">;</span><span class="hl kwa">return</span> index<span class="hl opt">;}</span>
                        <span class="hl kwa">else</span><span class="hl opt">{</span>ns<span class="hl opt">.</span>start<span class="hl opt">=</span>index<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">;</span>active<span class="hl opt">[</span>act<span class="hl opt">++]=</span>ns<span class="hl opt">;}</span>
         <span class="hl opt">}</span>
         <span class="hl kwa">return</span> <span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">;</span>
      <span class="hl opt">}</span>
      
      <span class="hl kwb">int</span> <span class="hl kwd">find</span><span class="hl opt">(</span><span class="hl kwb">int</span> index<span class="hl opt">){</span>
         <span class="hl kwa">while</span><span class="hl opt">(</span>index<span class="hl opt">&lt;</span>inSize<span class="hl opt">){</span>
            <span class="hl kwb">int</span> c0<span class="hl opt">=</span>inData<span class="hl opt">[</span>index<span class="hl opt">++];</span>

            <span class="hl kwb">int</span> nct<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span>
            <span class="hl kwa">for</span><span class="hl opt">(</span><span class="hl kwb">int</span> ct<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span>ct<span class="hl opt">&lt;</span>act<span class="hl opt">;</span>ct<span class="hl opt">++){</span>
               State ns<span class="hl opt">=</span>active<span class="hl opt">[</span>ct<span class="hl opt">].</span>trans<span class="hl opt">[</span>c0<span class="hl opt">];</span>
               <span class="hl kwa">if</span><span class="hl opt">(</span>ns<span class="hl opt">!=</span>null<span class="hl opt">)</span>   <span class="hl kwa">if</span><span class="hl opt">(</span>ns<span class="hl opt">.</span>isFinal<span class="hl opt">){</span>act<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span> <span class="hl kwa">return</span> index<span class="hl opt">;}</span>
                           <span class="hl kwa">else</span> active<span class="hl opt">[</span>nct<span class="hl opt">++]=</span>ns<span class="hl opt">;</span>
            <span class="hl opt">}</span>
            act<span class="hl opt">=</span>nct<span class="hl opt">;</span>

            State ns<span class="hl opt">=</span>root<span class="hl opt">[</span>c0<span class="hl opt">];</span>
            <span class="hl kwa">if</span><span class="hl opt">(</span>ns<span class="hl opt">!=</span>null<span class="hl opt">)</span>   <span class="hl kwa">if</span><span class="hl opt">(</span>ns<span class="hl opt">.</span>isFinal<span class="hl opt">){</span>act<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span> <span class="hl kwa">return</span> index<span class="hl opt">;}</span>
                        <span class="hl kwa">else</span> active<span class="hl opt">[</span>act<span class="hl opt">++]=</span>ns<span class="hl opt">;</span>
         <span class="hl opt">}</span>
         <span class="hl kwa">return</span> <span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">;</span>
      <span class="hl opt">}</span>
   <span class="hl opt">}</span>


   <span class="hl kwa">static final</span> String<span class="hl opt">[]</span> pat1<span class="hl opt">={</span><span class="hl str">&quot;agggtaaa|tttaccct&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span><span class="hl opt">,</span>
      <span class="hl str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span><span class="hl opt">,</span>
      <span class="hl str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span><span class="hl opt">,</span>
      <span class="hl str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span><span class="hl opt">,</span>
      <span class="hl str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span><span class="hl opt">};</span>
   <span class="hl kwa">static final</span> Map<span class="hl opt">&lt;</span>ByteString<span class="hl opt">,</span>ByteString<span class="hl opt">&gt;</span> pat2 <span class="hl opt">=</span> <span class="hl kwa">new</span> HashMap<span class="hl opt">&lt;</span>ByteString<span class="hl opt">,</span>ByteString<span class="hl opt">&gt;();</span>
      <span class="hl kwa">static</span><span class="hl opt">{</span>
      pat2<span class="hl opt">.</span><span class="hl kwd">put</span><span class="hl opt">(</span><span class="hl kwa">new</span> <span class="hl kwd">ByteString</span><span class="hl opt">(</span><span class="hl str">&quot;W&quot;</span><span class="hl opt">),</span> <span class="hl kwa">new</span> <span class="hl kwd">ByteString</span><span class="hl opt">(</span><span class="hl str">&quot;(a|t)&quot;</span><span class="hl opt">));</span>
      pat2<span class="hl opt">.</span><span class="hl kwd">put</span><span class="hl opt">(</span><span class="hl kwa">new</span> <span class="hl kwd">ByteString</span><span class="hl opt">(</span><span class="hl str">&quot;Y&quot;</span><span class="hl opt">),</span> <span class="hl kwa">new</span> <span class="hl kwd">ByteString</span><span class="hl opt">(</span><span class="hl str">&quot;(c|t)&quot;</span><span class="hl opt">));</span>
      pat2<span class="hl opt">.</span><span class="hl kwd">put</span><span class="hl opt">(</span><span class="hl kwa">new</span> <span class="hl kwd">ByteString</span><span class="hl opt">(</span><span class="hl str">&quot;K&quot;</span><span class="hl opt">),</span> <span class="hl kwa">new</span> <span class="hl kwd">ByteString</span><span class="hl opt">(</span><span class="hl str">&quot;(g|t)&quot;</span><span class="hl opt">));</span>
      pat2<span class="hl opt">.</span><span class="hl kwd">put</span><span class="hl opt">(</span><span class="hl kwa">new</span> <span class="hl kwd">ByteString</span><span class="hl opt">(</span><span class="hl str">&quot;M&quot;</span><span class="hl opt">),</span> <span class="hl kwa">new</span> <span class="hl kwd">ByteString</span><span class="hl opt">(</span><span class="hl str">&quot;(a|c)&quot;</span><span class="hl opt">));</span>
      pat2<span class="hl opt">.</span><span class="hl kwd">put</span><span class="hl opt">(</span><span class="hl kwa">new</span> <span class="hl kwd">ByteString</span><span class="hl opt">(</span><span class="hl str">&quot;S&quot;</span><span class="hl opt">),</span> <span class="hl kwa">new</span> <span class="hl kwd">ByteString</span><span class="hl opt">(</span><span class="hl str">&quot;(c|g)&quot;</span><span class="hl opt">));</span>
      pat2<span class="hl opt">.</span><span class="hl kwd">put</span><span class="hl opt">(</span><span class="hl kwa">new</span> <span class="hl kwd">ByteString</span><span class="hl opt">(</span><span class="hl str">&quot;R&quot;</span><span class="hl opt">),</span> <span class="hl kwa">new</span> <span class="hl kwd">ByteString</span><span class="hl opt">(</span><span class="hl str">&quot;(a|g)&quot;</span><span class="hl opt">));</span>
      pat2<span class="hl opt">.</span><span class="hl kwd">put</span><span class="hl opt">(</span><span class="hl kwa">new</span> <span class="hl kwd">ByteString</span><span class="hl opt">(</span><span class="hl str">&quot;B&quot;</span><span class="hl opt">),</span> <span class="hl kwa">new</span> <span class="hl kwd">ByteString</span><span class="hl opt">(</span><span class="hl str">&quot;(c|g|t)&quot;</span><span class="hl opt">));</span>
      pat2<span class="hl opt">.</span><span class="hl kwd">put</span><span class="hl opt">(</span><span class="hl kwa">new</span> <span class="hl kwd">ByteString</span><span class="hl opt">(</span><span class="hl str">&quot;D&quot;</span><span class="hl opt">),</span> <span class="hl kwa">new</span> <span class="hl kwd">ByteString</span><span class="hl opt">(</span><span class="hl str">&quot;(a|g|t)&quot;</span><span class="hl opt">));</span>
      pat2<span class="hl opt">.</span><span class="hl kwd">put</span><span class="hl opt">(</span><span class="hl kwa">new</span> <span class="hl kwd">ByteString</span><span class="hl opt">(</span><span class="hl str">&quot;V&quot;</span><span class="hl opt">),</span> <span class="hl kwa">new</span> <span class="hl kwd">ByteString</span><span class="hl opt">(</span><span class="hl str">&quot;(a|c|g)&quot;</span><span class="hl opt">));</span>
      pat2<span class="hl opt">.</span><span class="hl kwd">put</span><span class="hl opt">(</span><span class="hl kwa">new</span> <span class="hl kwd">ByteString</span><span class="hl opt">(</span><span class="hl str">&quot;H&quot;</span><span class="hl opt">),</span> <span class="hl kwa">new</span> <span class="hl kwd">ByteString</span><span class="hl opt">(</span><span class="hl str">&quot;(a|c|t)&quot;</span><span class="hl opt">));</span>
      pat2<span class="hl opt">.</span><span class="hl kwd">put</span><span class="hl opt">(</span><span class="hl kwa">new</span> <span class="hl kwd">ByteString</span><span class="hl opt">(</span><span class="hl str">&quot;N&quot;</span><span class="hl opt">),</span> <span class="hl kwa">new</span> <span class="hl kwd">ByteString</span><span class="hl opt">(</span><span class="hl str">&quot;(a|c|g|t)&quot;</span><span class="hl opt">));</span>
   <span class="hl opt">}</span>
   <span class="hl kwa">static final</span> AtomicInteger pat1Ct<span class="hl opt">=</span><span class="hl kwa">new</span> <span class="hl kwd">AtomicInteger</span><span class="hl opt">();</span>
   
   <span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">main</span><span class="hl opt">(</span>String<span class="hl opt">[]</span> args<span class="hl opt">)</span> <span class="hl kwa">throws</span> Exception <span class="hl opt">{</span>
      <span class="hl kwa">final</span> ByteString s1<span class="hl opt">;</span><span class="hl kwb">int</span> s1Size<span class="hl opt">;{</span>
         s1Size<span class="hl opt">=</span>System<span class="hl opt">.</span><span class="hl kwa">in</span><span class="hl opt">.</span><span class="hl kwd">available</span><span class="hl opt">();</span>
         s1<span class="hl opt">=</span><span class="hl kwa">new</span> <span class="hl kwd">ByteString</span><span class="hl opt">(</span>s1Size<span class="hl opt">);</span>
         System<span class="hl opt">.</span><span class="hl kwa">in</span><span class="hl opt">.</span><span class="hl kwd">read</span><span class="hl opt">(</span>s1<span class="hl opt">.</span>data<span class="hl opt">);</span>
      <span class="hl opt">}</span>

      <span class="hl kwa">final</span> ByteString s2<span class="hl opt">;</span><span class="hl kwb">int</span> s2Size<span class="hl opt">;{</span>
         ByteBuilder bb<span class="hl opt">=</span><span class="hl kwa">new</span> <span class="hl kwd">ByteBuilder</span><span class="hl opt">(</span>s1Size<span class="hl opt">);</span>
         Matcher m<span class="hl opt">=</span><span class="hl kwa">new</span> <span class="hl kwd">Matcher</span><span class="hl opt">(</span><span class="hl str">&quot;&gt;.*</span><span class="hl esc">\n</span><span class="hl str">|</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> s1<span class="hl opt">);</span>
         <span class="hl kwb">int</span> inPos<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">,</span>index<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span>
         <span class="hl kwa">while</span><span class="hl opt">((</span>index<span class="hl opt">=</span>m<span class="hl opt">.</span><span class="hl kwd">startFind</span><span class="hl opt">(</span>index<span class="hl opt">))&gt;=</span><span class="hl num">0</span><span class="hl opt">){</span>
            bb<span class="hl opt">.</span><span class="hl kwd">append</span><span class="hl opt">(</span>s1<span class="hl opt">.</span>data<span class="hl opt">,</span> inPos<span class="hl opt">,</span> m<span class="hl opt">.</span>start<span class="hl opt">-</span>inPos<span class="hl opt">);</span>
            inPos<span class="hl opt">=</span>index<span class="hl opt">;</span>
         <span class="hl opt">}</span>
         bb<span class="hl opt">.</span><span class="hl kwd">append</span><span class="hl opt">(</span>s1<span class="hl opt">.</span>data<span class="hl opt">,</span> inPos<span class="hl opt">,</span> s1<span class="hl opt">.</span><span class="hl kwd">length</span><span class="hl opt">()-</span>inPos<span class="hl opt">);</span>
         s2<span class="hl opt">=</span>bb<span class="hl opt">.</span><span class="hl kwd">toByteString</span><span class="hl opt">();</span>
         s2Size<span class="hl opt">=</span>s2<span class="hl opt">.</span><span class="hl kwd">length</span><span class="hl opt">();</span>
      <span class="hl opt">}</span>

      <span class="hl kwa">final</span> <span class="hl kwb">int</span><span class="hl opt">[]</span> pat1res<span class="hl opt">=</span><span class="hl kwa">new</span> <span class="hl kwb">int</span><span class="hl opt">[</span>pat1<span class="hl opt">.</span>length<span class="hl opt">];{</span>
         Thread<span class="hl opt">[]</span> pool<span class="hl opt">=</span><span class="hl kwa">new</span> Thread<span class="hl opt">[</span>pat1<span class="hl opt">.</span>length<span class="hl opt">];</span>
         <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span>i<span class="hl opt">&lt;</span>pool<span class="hl opt">.</span>length<span class="hl opt">;</span>i<span class="hl opt">++)</span>
            pool<span class="hl opt">[</span>i<span class="hl opt">]=</span><span class="hl kwa">new</span> <span class="hl kwd">Thread</span><span class="hl opt">(){</span>
               <span class="hl kwa">public</span> <span class="hl kwb">void</span> <span class="hl kwd">run</span><span class="hl opt">() {</span>
                   <span class="hl kwb">int</span> r<span class="hl opt">;</span> <span class="hl kwa">while</span><span class="hl opt">((</span>r<span class="hl opt">=</span>pat1Ct<span class="hl opt">.</span><span class="hl kwd">getAndIncrement</span><span class="hl opt">())&lt;</span>pat1res<span class="hl opt">.</span>length<span class="hl opt">){</span>
                     Matcher m<span class="hl opt">=</span><span class="hl kwa">new</span> <span class="hl kwd">Matcher</span><span class="hl opt">(</span>pat1<span class="hl opt">[</span>r<span class="hl opt">],</span>s2<span class="hl opt">);</span>
                     <span class="hl kwb">int</span> count<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">,</span>index<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span><span class="hl kwa">while</span><span class="hl opt">((</span>index<span class="hl opt">=</span>m<span class="hl opt">.</span><span class="hl kwd">find</span><span class="hl opt">(</span>index<span class="hl opt">))&gt;=</span><span class="hl num">0</span><span class="hl opt">)</span> count<span class="hl opt">++;</span>
                     pat1res<span class="hl opt">[</span>r<span class="hl opt">]=</span>count<span class="hl opt">;</span>
                   <span class="hl opt">}</span>
               <span class="hl opt">}</span>
            <span class="hl opt">};</span>
         <span class="hl kwa">for</span> <span class="hl opt">(</span>Thread t<span class="hl opt">:</span>pool<span class="hl opt">)</span> t<span class="hl opt">.</span><span class="hl kwd">start</span><span class="hl opt">();</span>
         <span class="hl kwa">for</span> <span class="hl opt">(</span>Thread t<span class="hl opt">:</span>pool<span class="hl opt">)</span> t<span class="hl opt">.</span><span class="hl kwd">join</span><span class="hl opt">();</span>
      <span class="hl opt">}</span>

      <span class="hl kwb">int</span> s3Size<span class="hl opt">;{</span>
         ByteBuilder bb<span class="hl opt">=</span><span class="hl kwa">new</span> <span class="hl kwd">ByteBuilder</span><span class="hl opt">(</span>s1Size<span class="hl opt">*</span><span class="hl num">3</span><span class="hl opt">/</span><span class="hl num">2</span><span class="hl opt">);</span>
         Matcher m<span class="hl opt">=</span><span class="hl kwa">new</span> <span class="hl kwd">Matcher</span><span class="hl opt">(</span><span class="hl str">&quot;[WYKMSRBDVHN]&quot;</span><span class="hl opt">,</span> s2<span class="hl opt">);</span>
         <span class="hl kwb">int</span> inPos<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">,</span>index<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span>
         <span class="hl kwa">while</span><span class="hl opt">((</span>index<span class="hl opt">=</span>m<span class="hl opt">.</span><span class="hl kwd">startFind</span><span class="hl opt">(</span>index<span class="hl opt">))&gt;=</span><span class="hl num">0</span><span class="hl opt">){</span>
            bb<span class="hl opt">.</span><span class="hl kwd">append</span><span class="hl opt">(</span>s2<span class="hl opt">.</span>data<span class="hl opt">,</span> inPos<span class="hl opt">,</span> m<span class="hl opt">.</span>start<span class="hl opt">-</span>inPos<span class="hl opt">);</span>
            ByteString rep<span class="hl opt">=</span>pat2<span class="hl opt">.</span><span class="hl kwd">get</span><span class="hl opt">(</span><span class="hl kwa">new</span> <span class="hl kwd">ByteString</span><span class="hl opt">(</span>s2<span class="hl opt">.</span>data<span class="hl opt">,</span>m<span class="hl opt">.</span>start<span class="hl opt">,</span>index<span class="hl opt">-</span>m<span class="hl opt">.</span>start<span class="hl opt">));</span>
            bb<span class="hl opt">.</span><span class="hl kwd">append</span><span class="hl opt">(</span>rep<span class="hl opt">.</span>data<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> rep<span class="hl opt">.</span><span class="hl kwd">length</span><span class="hl opt">());</span>
            inPos<span class="hl opt">=</span>index<span class="hl opt">;</span>
         <span class="hl opt">}</span>
         bb<span class="hl opt">.</span><span class="hl kwd">append</span><span class="hl opt">(</span>s2<span class="hl opt">.</span>data<span class="hl opt">,</span> inPos<span class="hl opt">,</span> s2<span class="hl opt">.</span><span class="hl kwd">length</span><span class="hl opt">()-</span>inPos<span class="hl opt">);</span>
         s3Size<span class="hl opt">=</span>bb<span class="hl opt">.</span><span class="hl kwd">length</span><span class="hl opt">();</span>
      <span class="hl opt">}</span>

      <span class="hl kwa">for</span><span class="hl opt">(</span><span class="hl kwb">int</span> i<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span>i<span class="hl opt">&lt;</span>pat1<span class="hl opt">.</span>length<span class="hl opt">;</span>i<span class="hl opt">++)</span>System<span class="hl opt">.</span>out<span class="hl opt">.</span><span class="hl kwd">println</span><span class="hl opt">(</span>pat1<span class="hl opt">[</span>i<span class="hl opt">]+</span><span class="hl str">&quot; &quot;</span><span class="hl opt">+</span>pat1res<span class="hl opt">[</span>i<span class="hl opt">]);</span>
      System<span class="hl opt">.</span>out<span class="hl opt">.</span><span class="hl kwd">println</span><span class="hl opt">();</span>
      System<span class="hl opt">.</span>out<span class="hl opt">.</span><span class="hl kwd">println</span><span class="hl opt">(</span>s1Size<span class="hl opt">);</span>
      System<span class="hl opt">.</span>out<span class="hl opt">.</span><span class="hl kwd">println</span><span class="hl opt">(</span>s2Size<span class="hl opt">);</span>
      System<span class="hl opt">.</span>out<span class="hl opt">.</span><span class="hl kwd">println</span><span class="hl opt">(</span>s3Size<span class="hl opt">);</span>
   <span class="hl opt">}</span>
<span class="hl opt">}</span>
