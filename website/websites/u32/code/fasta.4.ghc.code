<span class="hl slc">--</span>
<span class="hl slc">-- The Computer Language Benchmarks Game</span>
<span class="hl slc">-- http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">--</span>
<span class="hl slc">-- Contributed by Don Stewart</span>
<span class="hl slc">-- A lazy bytestring solution.</span>
<span class="hl slc">-- Unnecessary strictness annotations removed by Sterling Clover 2/08</span>
<span class="hl slc">--</span>
<span class="hl slc">-- Adding cached version of the list, where the first 4 entries are</span>
<span class="hl slc">-- lifted into the data constructor by Scott West 03/10</span>
<span class="hl slc">--</span>
<span class="hl slc">-- Add:</span>
<span class="hl slc">-- -optc-mfpmath=sse -optc-msse2</span>
<span class="hl slc">--</span>
<span class="hl slc">-- Replace Caching mechanism with Unboxed Arrays by Silvio Frischknecht</span>

<span class="hl kwd">module</span> Main <span class="hl kwd">where</span>

<span class="hl kwd">import</span> System<span class="hl opt">.</span>Environment
<span class="hl kwd">import</span> Data<span class="hl opt">.</span>Word
<span class="hl kwd">import</span> Control<span class="hl opt">.</span>Arrow

<span class="hl kwd">import</span> Data<span class="hl opt">.</span>List

<span class="hl kwd">import</span> Data<span class="hl opt">.</span><span class="hl kwb">Array</span><span class="hl opt">.</span>IArray
<span class="hl kwd">import</span> Data<span class="hl opt">.</span><span class="hl kwb">Array</span><span class="hl opt">.</span>Unboxed
<span class="hl kwd">import</span> Data<span class="hl opt">.</span><span class="hl kwb">Array</span><span class="hl opt">.</span>Base

<span class="hl kwd">import qualified</span> Data<span class="hl opt">.</span>ByteString<span class="hl opt">.</span>Lazy <span class="hl kwd">as</span> L
<span class="hl kwd">import qualified</span> Data<span class="hl opt">.</span>ByteString<span class="hl opt">.</span>Lazy<span class="hl opt">.</span>Char8 <span class="hl kwd">as</span> C <span class="hl opt">(</span>pack<span class="hl opt">)</span>
<span class="hl kwd">import qualified</span> Data<span class="hl opt">.</span>ByteString <span class="hl kwd">as</span> S
<span class="hl kwd">import qualified</span> Data<span class="hl opt">.</span>ByteString<span class="hl opt">.</span>Char8 <span class="hl kwd">as</span> BSC
<span class="hl kwd">import</span> Data<span class="hl opt">.</span>ByteString<span class="hl opt">.</span>Internal

main <span class="hl opt">=</span> <span class="hl kwd">do</span>
    n <span class="hl opt">&lt;-</span> <span class="hl kwc">getArgs</span> <span class="hl opt">&gt;&gt;=</span> <span class="hl kwc">readIO</span> <span class="hl opt">.</span> <span class="hl kwc">head</span>
    writeFasta  <span class="hl str">&quot;ONE&quot;</span>   <span class="hl str">&quot;Homo sapiens alu&quot;</span>       <span class="hl opt">(</span>n<span class="hl opt">*</span><span class="hl num">2</span><span class="hl opt">) (</span>L<span class="hl opt">.</span><span class="hl kwc">cycle</span> alu<span class="hl opt">)</span>
    g <span class="hl opt">&lt;-</span> unfold <span class="hl str">&quot;TWO&quot;</span>   <span class="hl str">&quot;IUB ambiguity codes&quot;</span>    <span class="hl opt">(</span>n<span class="hl opt">*</span><span class="hl num">3</span><span class="hl opt">) (</span>mkProbs <span class="hl opt">$</span> cdfize iubs<span class="hl opt">)</span> <span class="hl num">42</span>
    unfold      <span class="hl str">&quot;THREE&quot;</span> <span class="hl str">&quot;Homo sapiens frequency&quot;</span> <span class="hl opt">(</span>n<span class="hl opt">*</span><span class="hl num">5</span><span class="hl opt">) (</span>mkProbs <span class="hl opt">$</span> cdfize homs<span class="hl opt">)</span> g

<span class="hl slc">------------------------------------------------------------------------</span>
<span class="hl slc">--</span>
<span class="hl slc">-- lazily unfold the randomised dna sequences</span>
<span class="hl slc">--</span>

unfold <span class="hl opt">::</span> <span class="hl kwb">String</span> <span class="hl opt">-&gt;</span> <span class="hl kwb">String</span> <span class="hl opt">-&gt;</span> <span class="hl kwb">Int</span> <span class="hl opt">-&gt;</span> Probs <span class="hl opt">-&gt;</span> <span class="hl kwb">Int</span> <span class="hl opt">-&gt;</span> <span class="hl kwb">IO Int</span>
unfold lab ttl n probs gen <span class="hl opt">=</span>
    <span class="hl kwc">putStrLn</span> <span class="hl opt">(</span><span class="hl str">&quot;&gt;&quot;</span> <span class="hl opt">++</span> lab <span class="hl opt">++</span> <span class="hl str">&quot; &quot;</span> <span class="hl opt">++</span> ttl<span class="hl opt">) &gt;&gt;</span> unroll probs n gen

unroll <span class="hl opt">::</span> Probs <span class="hl opt">-&gt;</span> <span class="hl kwb">Int</span> <span class="hl opt">-&gt;</span> <span class="hl kwb">Int</span> <span class="hl opt">-&gt;</span> <span class="hl kwb">IO Int</span>
unroll probs <span class="hl opt">=</span> loop
    <span class="hl kwd">where</span>
        loop <span class="hl num">0</span> r   <span class="hl opt">=</span> <span class="hl kwc">return</span> r
        loop i <span class="hl opt">!</span>r <span class="hl opt">=</span> <span class="hl kwd">case</span> S<span class="hl opt">.</span>unfoldrN m <span class="hl opt">(</span>look probs<span class="hl opt">)</span> r <span class="hl kwd">of</span>
                        <span class="hl opt">(</span>s<span class="hl opt">,</span> Just r<span class="hl opt">') -&gt;</span> <span class="hl kwd">do</span>
                            BSC<span class="hl opt">.</span><span class="hl kwc">putStrLn</span> s
                            loop <span class="hl opt">(</span>i<span class="hl opt">-</span>m<span class="hl opt">)</span> r<span class="hl opt">'</span>
            <span class="hl kwd">where</span> m <span class="hl opt">=</span> <span class="hl kwc">min</span> i <span class="hl num">60</span>

look <span class="hl opt">::</span> Probs <span class="hl opt">-&gt;</span> <span class="hl kwb">Int</span> <span class="hl opt">-&gt;</span> <span class="hl kwb">Maybe</span> <span class="hl opt">(</span>Word8<span class="hl opt">,</span> <span class="hl kwb">Int</span><span class="hl opt">)</span>
look cr k <span class="hl opt">=</span> Just <span class="hl opt">(</span>choose cr d<span class="hl opt">,</span> j<span class="hl opt">)</span>
  <span class="hl kwd">where</span> <span class="hl opt">(</span>d<span class="hl opt">,</span>j<span class="hl opt">) =</span> rand k

<span class="hl slc">-- Chunk the list into parts, still can represent any list of the</span>
<span class="hl slc">-- symbol/probability pairs.</span>
<span class="hl kwd">type</span> Probs <span class="hl opt">= (</span>UArray <span class="hl kwb">Int</span> Word8<span class="hl opt">,</span>UArray <span class="hl kwb">Int Float</span><span class="hl opt">)</span>

mkProbs <span class="hl opt">:: [(</span>Word8<span class="hl opt">,</span><span class="hl kwb">Float</span><span class="hl opt">)] -&gt;</span>Â Probs
mkProbs <span class="hl kwa">list</span> <span class="hl opt">=</span> 
    <span class="hl opt">(</span><span class="hl kwc">listArray</span> <span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">, (</span><span class="hl kwa">length list</span><span class="hl opt">) -</span><span class="hl num">1</span><span class="hl opt">) (</span><span class="hl kwc">map fst</span> <span class="hl kwa">list</span><span class="hl opt">)</span>
    <span class="hl opt">,</span><span class="hl kwc">listArray</span> <span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">, (</span><span class="hl kwa">length list</span><span class="hl opt">) -</span><span class="hl num">1</span><span class="hl opt">) (</span><span class="hl kwc">map snd</span> <span class="hl kwa">list</span><span class="hl opt">))</span>

cdfize <span class="hl opt">:: [(</span>Word8<span class="hl opt">,</span><span class="hl kwb">Float</span><span class="hl opt">)] -&gt; [(</span>Word8<span class="hl opt">,</span><span class="hl kwb">Float</span><span class="hl opt">)]</span>
cdfize ds <span class="hl opt">=</span> <span class="hl kwc">init</span> cdf<span class="hl opt">' ++ [(</span>s<span class="hl opt">,</span> <span class="hl num">1.0</span><span class="hl opt">)]</span>
    <span class="hl kwd">where</span>
      <span class="hl opt">(</span>s<span class="hl opt">,</span> _<span class="hl opt">) =</span> <span class="hl kwc">last</span> cdf<span class="hl opt">'</span>
      cdf<span class="hl opt">' = (</span><span class="hl kwc">snd</span> <span class="hl opt">.</span> <span class="hl kwc">mapAccumL</span> go <span class="hl num">0</span><span class="hl opt">)</span> ds
      go c <span class="hl opt">(</span>sym<span class="hl opt">,</span> prob<span class="hl opt">) = (</span>c <span class="hl opt">+</span> prob<span class="hl opt">, (</span>sym<span class="hl opt">,</span> c<span class="hl opt">+</span>prob<span class="hl opt">))</span>

choose <span class="hl opt">::</span> Probs <span class="hl opt">-&gt;</span> <span class="hl kwb">Float</span> <span class="hl opt">-&gt;</span> Word8
choose <span class="hl opt">(</span>vals<span class="hl opt">,</span>probs<span class="hl opt">)</span> rand <span class="hl opt">=</span> choose<span class="hl opt">'</span> start <span class="hl kwd">where</span>
    choose<span class="hl opt">'</span> current
        | rand <span class="hl opt">&lt;=</span> probs `unsafeAt` current <span class="hl opt">=</span> vals `unsafeAt` current
        | <span class="hl kwc">otherwise</span> <span class="hl opt">=</span> choose<span class="hl opt">' (</span><span class="hl kwc">succ</span> current<span class="hl opt">)</span>
    <span class="hl opt">(</span>start<span class="hl opt">,</span> end<span class="hl opt">) =</span> <span class="hl kwc">bounds</span> probs

<span class="hl slc">------------------------------------------------------------------------</span>
<span class="hl slc">--</span>
<span class="hl slc">-- only demand as much of the infinite sequence as we require</span>

writeFasta label title n s <span class="hl opt">=</span> <span class="hl kwd">do</span>
     <span class="hl kwc">putStrLn</span> <span class="hl opt">$</span> <span class="hl str">&quot;&gt;&quot;</span> <span class="hl opt">++</span> label <span class="hl opt">++</span> <span class="hl str">&quot; &quot;</span> <span class="hl opt">++</span> title
     <span class="hl kwd">let</span> <span class="hl opt">(</span>t<span class="hl opt">:</span>ts<span class="hl opt">) =</span> L<span class="hl opt">.</span>toChunks s
     go ts t n
  <span class="hl kwd">where</span>
     go ss s n
        | l60 <span class="hl opt">&amp;&amp;</span> n60 <span class="hl opt">=</span> BSC<span class="hl opt">.</span><span class="hl kwc">putStrLn</span> l               <span class="hl opt">&gt;&gt;</span> go ss        r <span class="hl opt">(</span>n<span class="hl opt">-</span><span class="hl num">60</span><span class="hl opt">)</span>
        |        n60 <span class="hl opt">=</span> BSC<span class="hl opt">.</span><span class="hl kwc">putStr</span> s <span class="hl opt">&gt;&gt;</span> BSC<span class="hl opt">.</span><span class="hl kwc">putStrLn</span> a <span class="hl opt">&gt;&gt;</span> go <span class="hl opt">(</span><span class="hl kwc">tail</span> ss<span class="hl opt">)</span> b <span class="hl opt">(</span>n<span class="hl opt">-</span><span class="hl num">60</span><span class="hl opt">)</span>
        | n <span class="hl opt">&lt;=</span> ln    <span class="hl opt">=</span> BSC<span class="hl opt">.</span><span class="hl kwc">putStrLn</span> <span class="hl opt">(</span>S<span class="hl opt">.</span><span class="hl kwc">take</span> n s<span class="hl opt">)</span>
        | <span class="hl kwc">otherwise</span>  <span class="hl opt">=</span> BSC<span class="hl opt">.</span><span class="hl kwc">putStr</span> s <span class="hl opt">&gt;&gt;</span> BSC<span class="hl opt">.</span><span class="hl kwc">putStrLn</span> <span class="hl opt">(</span>S<span class="hl opt">.</span><span class="hl kwc">take</span> <span class="hl opt">(</span>n<span class="hl opt">-</span>ln<span class="hl opt">) (</span><span class="hl kwc">head</span> ss<span class="hl opt">))</span>
        <span class="hl kwd">where</span>
            ln   <span class="hl opt">=</span> S<span class="hl opt">.</span><span class="hl kwa">length</span> s
            l60  <span class="hl opt">=</span> ln <span class="hl opt">&gt;=</span> <span class="hl num">60</span>
            n60  <span class="hl opt">=</span> n  <span class="hl opt">&gt;=</span> <span class="hl num">60</span>
            <span class="hl opt">(</span>l<span class="hl opt">,</span>r<span class="hl opt">) =</span> S<span class="hl opt">.</span><span class="hl kwc">splitAt</span> <span class="hl num">60</span> s
            <span class="hl opt">(</span>a<span class="hl opt">,</span>b<span class="hl opt">) =</span> S<span class="hl opt">.</span><span class="hl kwc">splitAt</span> <span class="hl opt">(</span><span class="hl num">60</span><span class="hl opt">-</span>ln<span class="hl opt">) (</span><span class="hl kwc">head</span> ss<span class="hl opt">)</span>

<span class="hl slc">------------------------------------------------------------------------</span>
im<span class="hl opt">,</span> ia<span class="hl opt">,</span> ic <span class="hl opt">::</span> <span class="hl kwb">Int</span>
im  <span class="hl opt">=</span> <span class="hl num">139968</span>
ia  <span class="hl opt">=</span> <span class="hl num">3877</span>
ic  <span class="hl opt">=</span> <span class="hl num">29573</span>

<span class="hl kwd">type</span> R <span class="hl opt">= (</span><span class="hl kwb">Float</span><span class="hl opt">,</span><span class="hl kwb">Int</span><span class="hl opt">)</span>

rand <span class="hl opt">::</span> <span class="hl kwb">Int</span> <span class="hl opt">-&gt;</span> R
rand seed <span class="hl opt">= (</span>newran<span class="hl opt">,</span>newseed<span class="hl opt">)</span>
    <span class="hl kwd">where</span>
        newseed <span class="hl opt">= (</span>seed <span class="hl opt">*</span> ia <span class="hl opt">+</span> ic<span class="hl opt">)</span> `<span class="hl kwc">rem</span>` im
        newran  <span class="hl opt">=</span>  <span class="hl num">1.0</span> <span class="hl opt">*</span> <span class="hl kwc">fromIntegral</span> newseed <span class="hl opt">/</span> imd
        imd      <span class="hl opt">=</span> <span class="hl kwc">fromIntegral</span> im

<span class="hl slc">------------------------------------------------------------------------</span>

alu <span class="hl opt">=</span> C<span class="hl opt">.</span>pack
        <span class="hl str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG\</span>
<span class="hl str">        \GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA\</span>
<span class="hl str">        \CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT\</span>
<span class="hl str">        \ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA\</span>
<span class="hl str">        \GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG\</span>
<span class="hl str">        \AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC\</span>
<span class="hl str">        \AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span>

iubs<span class="hl opt">,</span> homs <span class="hl opt">:: [(</span>Word8<span class="hl opt">,</span> <span class="hl kwb">Float</span><span class="hl opt">)]</span>
iubs <span class="hl opt">=</span> <span class="hl kwc">map</span> <span class="hl opt">(</span>c2w <span class="hl opt">***</span> <span class="hl kwc">id</span><span class="hl opt">)</span>
        <span class="hl opt">[('</span>a<span class="hl opt">',</span><span class="hl num">0.27</span><span class="hl opt">),('</span>c<span class="hl opt">',</span><span class="hl num">0.12</span><span class="hl opt">),('</span>g<span class="hl opt">',</span><span class="hl num">0.12</span><span class="hl opt">),('</span>t<span class="hl opt">',</span><span class="hl num">0.27</span><span class="hl opt">),('</span>B<span class="hl opt">',</span><span class="hl num">0.02</span><span class="hl opt">)</span>
        <span class="hl opt">,('</span>D<span class="hl opt">',</span><span class="hl num">0.02</span><span class="hl opt">),('</span>H<span class="hl opt">',</span><span class="hl num">0.02</span><span class="hl opt">),('</span>K<span class="hl opt">',</span><span class="hl num">0.02</span><span class="hl opt">),('</span>M<span class="hl opt">',</span><span class="hl num">0.02</span><span class="hl opt">),('</span>N<span class="hl opt">',</span><span class="hl num">0.02</span><span class="hl opt">)</span>
        <span class="hl opt">,('</span>R<span class="hl opt">',</span><span class="hl num">0.02</span><span class="hl opt">),('</span>S<span class="hl opt">',</span><span class="hl num">0.02</span><span class="hl opt">),('</span>V<span class="hl opt">',</span><span class="hl num">0.02</span><span class="hl opt">),('</span>W<span class="hl opt">',</span><span class="hl num">0.02</span><span class="hl opt">),('</span>Y<span class="hl opt">',</span><span class="hl num">0.02</span><span class="hl opt">)]</span>

homs <span class="hl opt">=</span> <span class="hl kwc">map</span> <span class="hl opt">(</span>c2w <span class="hl opt">***</span> <span class="hl kwc">id</span><span class="hl opt">)</span>
        <span class="hl opt">[('</span>a<span class="hl opt">',</span><span class="hl num">0.3029549426680</span><span class="hl opt">),('</span>c<span class="hl opt">',</span><span class="hl num">0.1979883004921</span><span class="hl opt">)</span>
        <span class="hl opt">,('</span>g<span class="hl opt">',</span><span class="hl num">0.1975473066391</span><span class="hl opt">),('</span>t<span class="hl opt">',</span><span class="hl num">0.3015094502008</span><span class="hl opt">)]</span>
