<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * contributed by K P anonymous</span>
<span class="hl com"> * fixed by Andrew Martin</span>
<span class="hl com"> */</span>

<span class="hl kwa">package</span> main

<span class="hl kwa">import</span> <span class="hl opt">(</span>
   <span class="hl str">&quot;bufio&quot;</span>
   <span class="hl str">&quot;os&quot;</span>
<span class="hl opt">)</span>

<span class="hl kwa">const</span> lineSize <span class="hl opt">=</span> <span class="hl num">60</span>

<span class="hl kwa">var</span> complement <span class="hl opt">= [</span><span class="hl num">256</span><span class="hl opt">]</span><span class="hl kwb">uint8</span><span class="hl opt">{</span>
   <span class="hl str">'A'</span><span class="hl opt">:</span> <span class="hl str">'T'</span><span class="hl opt">,</span> <span class="hl str">'a'</span><span class="hl opt">:</span> <span class="hl str">'T'</span><span class="hl opt">,</span>
   <span class="hl str">'C'</span><span class="hl opt">:</span> <span class="hl str">'G'</span><span class="hl opt">,</span> <span class="hl str">'c'</span><span class="hl opt">:</span> <span class="hl str">'G'</span><span class="hl opt">,</span>
   <span class="hl str">'G'</span><span class="hl opt">:</span> <span class="hl str">'C'</span><span class="hl opt">,</span> <span class="hl str">'g'</span><span class="hl opt">:</span> <span class="hl str">'C'</span><span class="hl opt">,</span>
   <span class="hl str">'T'</span><span class="hl opt">:</span> <span class="hl str">'A'</span><span class="hl opt">,</span> <span class="hl str">'t'</span><span class="hl opt">:</span> <span class="hl str">'A'</span><span class="hl opt">,</span>
   <span class="hl str">'U'</span><span class="hl opt">:</span> <span class="hl str">'A'</span><span class="hl opt">,</span> <span class="hl str">'u'</span><span class="hl opt">:</span> <span class="hl str">'A'</span><span class="hl opt">,</span>
   <span class="hl str">'M'</span><span class="hl opt">:</span> <span class="hl str">'K'</span><span class="hl opt">,</span> <span class="hl str">'m'</span><span class="hl opt">:</span> <span class="hl str">'K'</span><span class="hl opt">,</span>
   <span class="hl str">'R'</span><span class="hl opt">:</span> <span class="hl str">'Y'</span><span class="hl opt">,</span> <span class="hl str">'r'</span><span class="hl opt">:</span> <span class="hl str">'Y'</span><span class="hl opt">,</span>
   <span class="hl str">'W'</span><span class="hl opt">:</span> <span class="hl str">'W'</span><span class="hl opt">,</span> <span class="hl str">'w'</span><span class="hl opt">:</span> <span class="hl str">'W'</span><span class="hl opt">,</span>
   <span class="hl str">'S'</span><span class="hl opt">:</span> <span class="hl str">'S'</span><span class="hl opt">,</span> <span class="hl str">'s'</span><span class="hl opt">:</span> <span class="hl str">'S'</span><span class="hl opt">,</span>
   <span class="hl str">'Y'</span><span class="hl opt">:</span> <span class="hl str">'R'</span><span class="hl opt">,</span> <span class="hl str">'y'</span><span class="hl opt">:</span> <span class="hl str">'R'</span><span class="hl opt">,</span>
   <span class="hl str">'K'</span><span class="hl opt">:</span> <span class="hl str">'M'</span><span class="hl opt">,</span> <span class="hl str">'k'</span><span class="hl opt">:</span> <span class="hl str">'M'</span><span class="hl opt">,</span>
   <span class="hl str">'V'</span><span class="hl opt">:</span> <span class="hl str">'B'</span><span class="hl opt">,</span> <span class="hl str">'v'</span><span class="hl opt">:</span> <span class="hl str">'B'</span><span class="hl opt">,</span>
   <span class="hl str">'H'</span><span class="hl opt">:</span> <span class="hl str">'D'</span><span class="hl opt">,</span> <span class="hl str">'h'</span><span class="hl opt">:</span> <span class="hl str">'D'</span><span class="hl opt">,</span>
   <span class="hl str">'D'</span><span class="hl opt">:</span> <span class="hl str">'H'</span><span class="hl opt">,</span> <span class="hl str">'d'</span><span class="hl opt">:</span> <span class="hl str">'H'</span><span class="hl opt">,</span>
   <span class="hl str">'B'</span><span class="hl opt">:</span> <span class="hl str">'V'</span><span class="hl opt">,</span> <span class="hl str">'b'</span><span class="hl opt">:</span> <span class="hl str">'V'</span><span class="hl opt">,</span>
   <span class="hl str">'N'</span><span class="hl opt">:</span> <span class="hl str">'N'</span><span class="hl opt">,</span> <span class="hl str">'n'</span><span class="hl opt">:</span> <span class="hl str">'N'</span><span class="hl opt">,</span>
<span class="hl opt">}</span>

<span class="hl kwa">func</span> <span class="hl kwd">main</span><span class="hl opt">() {</span>
   in <span class="hl opt">:=</span> bufio<span class="hl opt">.</span><span class="hl kwd">NewReaderSize</span><span class="hl opt">(</span>os<span class="hl opt">.</span>Stdin<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">&lt;&lt;</span><span class="hl num">18</span><span class="hl opt">)</span>
   buf <span class="hl opt">:=</span> <span class="hl kwb">make</span><span class="hl opt">([]</span><span class="hl kwb">byte</span><span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">&lt;&lt;</span><span class="hl num">20</span><span class="hl opt">)</span>
   line<span class="hl opt">,</span> err <span class="hl opt">:=</span> in<span class="hl opt">.</span><span class="hl kwd">ReadSlice</span><span class="hl opt">(</span><span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl opt">)</span>
   <span class="hl kwa">for</span> err <span class="hl opt">==</span> <span class="hl kwb">nil</span> <span class="hl opt">{</span>
      os<span class="hl opt">.</span>Stdout<span class="hl opt">.</span><span class="hl kwd">Write</span><span class="hl opt">(</span>line<span class="hl opt">)</span>

      <span class="hl slc">// Accumulate reversed complement in buf[w:]</span>
      nchar <span class="hl opt">:=</span> <span class="hl num">0</span>
      w <span class="hl opt">:=</span> <span class="hl kwb">len</span><span class="hl opt">(</span>buf<span class="hl opt">)</span>
      <span class="hl kwa">for</span> <span class="hl opt">{</span>
         line<span class="hl opt">,</span> err <span class="hl opt">=</span> in<span class="hl opt">.</span><span class="hl kwd">ReadSlice</span><span class="hl opt">(</span><span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl opt">)</span>
         <span class="hl kwa">if</span> err <span class="hl opt">!=</span> <span class="hl kwb">nil</span> || line<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] ==</span> <span class="hl str">'&gt;'</span> <span class="hl opt">{</span>
            <span class="hl kwa">break</span>
         <span class="hl opt">}</span>
         line <span class="hl opt">=</span> line<span class="hl opt">[</span><span class="hl num">0</span> <span class="hl opt">:</span> <span class="hl kwb">len</span><span class="hl opt">(</span>line<span class="hl opt">)-</span><span class="hl num">1</span><span class="hl opt">]</span>
         nchar <span class="hl opt">+=</span> <span class="hl kwb">len</span><span class="hl opt">(</span>line<span class="hl opt">)</span>
         <span class="hl kwa">if</span> <span class="hl kwb">len</span><span class="hl opt">(</span>line<span class="hl opt">)+</span>nchar<span class="hl opt">/</span>lineSize<span class="hl opt">+</span><span class="hl num">128</span> <span class="hl opt">&gt;=</span> w <span class="hl opt">{</span>
            nbuf <span class="hl opt">:=</span> <span class="hl kwb">make</span><span class="hl opt">([]</span><span class="hl kwb">byte</span><span class="hl opt">,</span> <span class="hl kwb">len</span><span class="hl opt">(</span>buf<span class="hl opt">)*</span><span class="hl num">5</span><span class="hl opt">)</span>
            <span class="hl kwd">copy</span><span class="hl opt">(</span>nbuf<span class="hl opt">[</span><span class="hl kwb">len</span><span class="hl opt">(</span>nbuf<span class="hl opt">)-</span><span class="hl kwb">len</span><span class="hl opt">(</span>buf<span class="hl opt">):],</span> buf<span class="hl opt">)</span>
            w <span class="hl opt">+=</span> <span class="hl kwb">len</span><span class="hl opt">(</span>nbuf<span class="hl opt">) -</span> <span class="hl kwb">len</span><span class="hl opt">(</span>buf<span class="hl opt">)</span>
            buf <span class="hl opt">=</span> nbuf
         <span class="hl opt">}</span>

         <span class="hl kwa">for</span> i<span class="hl opt">,</span> c <span class="hl opt">:=</span> <span class="hl kwa">range</span> line <span class="hl opt">{</span>
            buf<span class="hl opt">[</span>w<span class="hl opt">-</span>i<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">] =</span> complement<span class="hl opt">[</span>c<span class="hl opt">]</span>
         <span class="hl opt">}</span>
         w <span class="hl opt">-=</span> <span class="hl kwb">len</span><span class="hl opt">(</span>line<span class="hl opt">)</span>
      <span class="hl opt">}</span>

      <span class="hl slc">// Copy down to beginning of buffer, inserting newlines.</span>
      <span class="hl slc">// The loop left room for the newlines and 128 bytes of padding.</span>
      i <span class="hl opt">:=</span> <span class="hl num">0</span>
      <span class="hl kwa">for</span> j <span class="hl opt">:=</span> w<span class="hl opt">;</span> j <span class="hl opt">&lt;</span> <span class="hl kwb">len</span><span class="hl opt">(</span>buf<span class="hl opt">);</span> j <span class="hl opt">+=</span> lineSize <span class="hl opt">{</span>
         i <span class="hl opt">+=</span> <span class="hl kwd">copy</span><span class="hl opt">(</span>buf<span class="hl opt">[</span>i<span class="hl opt">:</span>i<span class="hl opt">+</span>lineSize<span class="hl opt">],</span> buf<span class="hl opt">[</span>j<span class="hl opt">:])</span>
         buf<span class="hl opt">[</span>i<span class="hl opt">] =</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span>
         i<span class="hl opt">++</span>
      <span class="hl opt">}</span>
      os<span class="hl opt">.</span>Stdout<span class="hl opt">.</span><span class="hl kwd">Write</span><span class="hl opt">(</span>buf<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">:</span>i<span class="hl opt">])</span>
   <span class="hl opt">}</span>
<span class="hl opt">}</span>
