<span class="hl slc">-- The Computer Language Benchmarks Game</span>
<span class="hl slc">-- http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">-- contributed by Mike Pall</span>

<span class="hl slc">-- Generate a decision tree based solver for the meteor puzzle.</span>
<span class="hl kwa">local function</span> <span class="hl kwd">generatesolver</span><span class="hl opt">(</span>countinit<span class="hl opt">)</span>
  <span class="hl kwa">local</span> pairs<span class="hl opt">,</span> ipairs<span class="hl opt">,</span> <span class="hl kwb">format</span> <span class="hl opt">=</span> pairs<span class="hl opt">,</span> ipairs<span class="hl opt">,</span> <span class="hl kwb">string</span><span class="hl opt">.</span><span class="hl kwb">format</span>
  <span class="hl kwa">local</span> byte<span class="hl opt">,</span> <span class="hl kwb">min</span><span class="hl opt">,</span> <span class="hl kwb">sort</span> <span class="hl opt">=</span> <span class="hl kwb">string</span><span class="hl opt">.</span>byte<span class="hl opt">,</span> math<span class="hl opt">.</span><span class="hl kwb">min</span><span class="hl opt">,</span> <span class="hl kwb">table</span><span class="hl opt">.</span><span class="hl kwb">sort</span>

  <span class="hl slc">-- Cached position to distance lookup.</span>
  <span class="hl kwa">local</span> dist <span class="hl opt">=</span> <span class="hl kwd">setmetatable</span><span class="hl opt">({}, {</span> __index <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>t<span class="hl opt">,</span> xy<span class="hl opt">)</span>
    <span class="hl kwa">local</span> x <span class="hl opt">=</span> xy<span class="hl opt">%</span><span class="hl num">10</span><span class="hl opt">;</span> <span class="hl kwa">local</span> y <span class="hl opt">= (</span>xy<span class="hl opt">-</span>x<span class="hl opt">)/</span><span class="hl num">10</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>x<span class="hl opt">+</span>y<span class="hl opt">)%</span><span class="hl num">2</span> <span class="hl opt">==</span> <span class="hl num">1</span> <span class="hl kwa">then</span> y <span class="hl opt">=</span> y <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span> x <span class="hl opt">=</span> <span class="hl num">10</span> <span class="hl opt">-</span> x <span class="hl kwa">end</span>
    <span class="hl kwa">local</span> d <span class="hl opt">=</span> xy <span class="hl opt">+</span> <span class="hl num">256</span><span class="hl opt">*</span>x<span class="hl opt">*</span>x <span class="hl opt">+</span> <span class="hl num">1024</span><span class="hl opt">*</span>y<span class="hl opt">*</span>y<span class="hl opt">;</span> t<span class="hl opt">[</span>xy<span class="hl opt">] =</span> d<span class="hl opt">;</span> <span class="hl kwa">return</span> d
  <span class="hl kwa">end</span><span class="hl opt">})</span>

  <span class="hl slc">-- Generate an optimized decision tree (within 4% of a hand-tuned tree).</span>
  <span class="hl kwa">local</span> dtree <span class="hl opt">= {}</span>
  <span class="hl kwa">local</span> rot <span class="hl opt">= {</span> <span class="hl kwa">nil</span><span class="hl opt">, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {} }</span>
  <span class="hl kwa">for</span> k<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">9</span> <span class="hl kwa">do</span>
    <span class="hl slc">-- Generate 10 initial pieces from line noise. :-)</span>
    <span class="hl kwa">local</span> t <span class="hl opt">= {</span> <span class="hl num">60</span><span class="hl opt">,</span> <span class="hl num">62</span><span class="hl opt">,</span> <span class="hl kwd">byte</span><span class="hl opt">(</span><span class="hl str">&quot;&#64;BMBIK&#64;KT&#64;GPIKR&#64;IKIKT&#64;GK&#64;KM&#64;BG&quot;</span><span class="hl opt">,</span> k<span class="hl opt">*</span><span class="hl num">3</span><span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">,</span> k<span class="hl opt">*</span><span class="hl num">3</span><span class="hl opt">+</span><span class="hl num">3</span><span class="hl opt">) }</span>
    rot<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">] =</span> t
    <span class="hl kwa">for</span> i<span class="hl opt">,</span>xy <span class="hl kwa">in</span> <span class="hl kwd">ipairs</span><span class="hl opt">(</span>t<span class="hl opt">)</span> <span class="hl kwa">do</span>
      <span class="hl kwa">local</span> x <span class="hl opt">=</span> xy<span class="hl opt">%</span><span class="hl num">10</span><span class="hl opt">;</span> <span class="hl kwa">local</span> y <span class="hl opt">= (</span>xy<span class="hl opt">-</span>x<span class="hl opt">-</span><span class="hl num">60</span><span class="hl opt">)/</span><span class="hl num">10</span>
      <span class="hl slc">-- Add 11 more variations by rotating and flipping.</span>
      <span class="hl kwa">for</span> j<span class="hl opt">=</span><span class="hl num">2</span><span class="hl opt">,</span><span class="hl num">12</span> <span class="hl kwa">do</span>
	<span class="hl kwa">if</span> j <span class="hl opt">==</span> <span class="hl num">7</span> <span class="hl kwa">then</span> y <span class="hl opt">= -</span>y <span class="hl kwa">else</span> x<span class="hl opt">,</span>y <span class="hl opt">= (</span>x<span class="hl opt">+</span><span class="hl num">3</span><span class="hl opt">*</span>y<span class="hl opt">)/</span><span class="hl num">2</span><span class="hl opt">, (</span>y<span class="hl opt">-</span>x<span class="hl opt">)/</span><span class="hl num">2</span> <span class="hl kwa">end</span>
	rot<span class="hl opt">[</span>j<span class="hl opt">][</span>i<span class="hl opt">] =</span> x<span class="hl opt">+</span><span class="hl num">10</span><span class="hl opt">*</span>y
      <span class="hl kwa">end</span>
    <span class="hl kwa">end</span>
    <span class="hl kwa">for</span> i<span class="hl opt">,</span>v <span class="hl kwa">in</span> <span class="hl kwd">ipairs</span><span class="hl opt">(</span>rot<span class="hl opt">)</span> <span class="hl kwa">do</span>
      <span class="hl slc">-- Exploit symmetry and leave out half of the orientations of one piece.</span>
      <span class="hl slc">-- The selected piece gives the best reduction of the solution space.</span>
      <span class="hl kwa">if</span> k <span class="hl opt">~=</span> <span class="hl num">3</span> <span class="hl kwa">or</span> i<span class="hl opt">%</span><span class="hl num">2</span> <span class="hl opt">==</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
	<span class="hl slc">-- Normalize to origin, add distance, sort by distance from origin.</span>
	<span class="hl kwa">local</span> m <span class="hl opt">=</span> <span class="hl kwb">min</span><span class="hl opt">(</span>v<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">],</span> v<span class="hl opt">[</span><span class="hl num">2</span><span class="hl opt">],</span> v<span class="hl opt">[</span><span class="hl num">3</span><span class="hl opt">],</span> v<span class="hl opt">[</span><span class="hl num">4</span><span class="hl opt">],</span> v<span class="hl opt">[</span><span class="hl num">5</span><span class="hl opt">])</span>
	<span class="hl kwa">for</span> i<span class="hl opt">=</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">5</span> <span class="hl kwa">do</span> v<span class="hl opt">[</span>i<span class="hl opt">] =</span> dist<span class="hl opt">[</span>v<span class="hl opt">[</span>i<span class="hl opt">]-</span>m<span class="hl opt">]</span> <span class="hl kwa">end</span>
	<span class="hl kwb">sort</span><span class="hl opt">(</span>v<span class="hl opt">)</span>
	<span class="hl slc">-- Insert into decision tree in distance order.</span>
	<span class="hl kwa">local</span> tt <span class="hl opt">=</span> dtree
	<span class="hl kwa">for</span> i<span class="hl opt">=</span><span class="hl num">2</span><span class="hl opt">,</span><span class="hl num">4</span> <span class="hl kwa">do</span>
	  <span class="hl kwa">local</span> xy <span class="hl opt">=</span> v<span class="hl opt">[</span>i<span class="hl opt">]%</span><span class="hl num">256</span>
	  <span class="hl kwa">local</span> tn <span class="hl opt">=</span> tt<span class="hl opt">[</span>xy<span class="hl opt">]</span>
	  <span class="hl kwa">if not</span> tn <span class="hl kwa">then</span> tn <span class="hl opt">= {};</span> tt<span class="hl opt">[</span>xy<span class="hl opt">] =</span> tn <span class="hl kwa">end</span> <span class="hl slc">-- Create nodes as needed.</span>
	  tt <span class="hl opt">=</span> tn
	<span class="hl kwa">end</span>
	tt<span class="hl opt">[</span>v<span class="hl opt">[</span><span class="hl num">5</span><span class="hl opt">]%</span><span class="hl num">256</span><span class="hl opt">] =</span> k <span class="hl slc">-- Leaves hold the piece numbers.</span>
      <span class="hl kwa">end</span>
    <span class="hl kwa">end</span>
  <span class="hl kwa">end</span>

  <span class="hl slc">-- Lookup table to validate a cell and to find its successor.</span>
  <span class="hl kwa">local</span> ok <span class="hl opt">= {}</span>
  <span class="hl kwa">for</span> i<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">150</span> <span class="hl kwa">do</span> ok<span class="hl opt">[</span>i<span class="hl opt">] =</span> <span class="hl kwa">false end</span>
  <span class="hl kwa">for</span> i<span class="hl opt">=</span><span class="hl num">99</span><span class="hl opt">,</span><span class="hl num">0</span><span class="hl opt">,-</span><span class="hl num">1</span> <span class="hl kwa">do</span>
    <span class="hl kwa">local</span> x <span class="hl opt">=</span> i<span class="hl opt">%</span><span class="hl num">10</span>
    <span class="hl kwa">if</span> <span class="hl opt">((</span>i<span class="hl opt">-</span>x<span class="hl opt">)/</span><span class="hl num">10</span><span class="hl opt">+</span>x<span class="hl opt">)%</span><span class="hl num">2</span> <span class="hl opt">==</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
      ok<span class="hl opt">[</span>i<span class="hl opt">] =</span> i <span class="hl opt">+ (</span>ok<span class="hl opt">[</span>i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">]</span> <span class="hl kwa">and</span> <span class="hl num">1</span> <span class="hl kwa">or</span> <span class="hl opt">(</span>ok<span class="hl opt">[</span>i<span class="hl opt">+</span><span class="hl num">2</span><span class="hl opt">]</span> <span class="hl kwa">and</span> <span class="hl num">2</span> <span class="hl kwa">or</span> <span class="hl num">3</span><span class="hl opt">))</span>
    <span class="hl kwa">end</span>
  <span class="hl kwa">end</span>

  <span class="hl kwa">local</span> s <span class="hl opt">=</span> <span class="hl str">&quot;local u0,u1,u2,u3,u4,u5,u6,u7,u8,u9&quot;</span> <span class="hl slc">-- Piece use flags.</span>
  <span class="hl kwa">for</span> p<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">99</span> <span class="hl kwa">do if</span> ok<span class="hl opt">[</span>p<span class="hl opt">]</span> <span class="hl kwa">then</span> s <span class="hl opt">=</span> s<span class="hl opt">..</span><span class="hl str">&quot;,b&quot;</span><span class="hl opt">..</span>p <span class="hl kwa">end end</span> <span class="hl slc">-- Board cells.</span>
  s <span class="hl opt">=</span> s<span class="hl opt">..</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">..</span><span class="hl str">[[</span>
<span class="hl str">local countinit = ...</span>
<span class="hl str">local count = countinit</span>
<span class="hl str">local bmin, bmax, pcs = 9, 0, {}</span>
<span class="hl str">local smin, smax</span>
<span class="hl str">local write, reverse = io.write, string.reverse</span>
<span class="hl str"></span>
<span class="hl str">-- Print min/max boards.</span>
<span class="hl str">local function printboard(s)</span>
<span class="hl str">  local flip = true</span>
<span class="hl str">  for x in string.gmatch(string.gsub(s, &quot;.&quot;, &quot;%1 &quot;), &quot;..........&quot;) do</span>
<span class="hl str">    write(x, flip and &quot;\n &quot; or &quot;\n&quot;)</span>
<span class="hl str">    flip = not flip</span>
<span class="hl str">  end</span>
<span class="hl str">  write(&quot;\n&quot;)</span>
<span class="hl str">end</span>
<span class="hl str"></span>
<span class="hl str">-- Print result.</span>
<span class="hl str">local function printresult()</span>
<span class="hl str">  write(countinit-count, &quot; solutions found\n\n&quot;)</span>
<span class="hl str">  printboard(smin)</span>
<span class="hl str">  printboard(smax)</span>
<span class="hl str">end</span>
<span class="hl str"></span>
<span class="hl str">-- Generate piece lookup array from the order of use.</span>
<span class="hl str">local function genp()</span>
<span class="hl str">  local p = pcs</span>
<span class="hl str">  p[u0] = &quot;0&quot; p[u1] = &quot;1&quot; p[u2] = &quot;2&quot; p[u3] = &quot;3&quot; p[u4] = &quot;4&quot;</span>
<span class="hl str">  p[u5] = &quot;5&quot; p[u6] = &quot;6&quot; p[u7] = &quot;7&quot; p[u8] = &quot;8&quot; p[u9] = &quot;9&quot;</span>
<span class="hl str">  return p</span>
<span class="hl str">end</span>
<span class="hl str"></span>
<span class="hl str">-- Goal function.</span>
<span class="hl str">local function f91(k)</span>
<span class="hl str">  if k ~= 10 then return end</span>
<span class="hl str">  count = count - 2 -- Need to count the symmetric solution, too.</span>
<span class="hl str">  repeat</span>
<span class="hl str">    -- Quick precheck before constructing the string.</span>
<span class="hl str">    local b0, b99 = b0, b99</span>
<span class="hl str">    if b0 &lt;= bmin then bmin = b0 elseif b0 &gt;= bmax then bmax = b0</span>
<span class="hl str">    elseif b99 &lt;= bmin then bmin = b99 elseif b99 &gt;= bmax then bmax = b99</span>
<span class="hl str">    else break end</span>
<span class="hl str">    -- Translate the filled board to a string.</span>
<span class="hl str">    local p = genp()</span>
<span class="hl str">    local s = p[b0] ]]</span>
  <span class="hl kwa">for</span> p<span class="hl opt">=</span><span class="hl num">2</span><span class="hl opt">,</span><span class="hl num">99</span> <span class="hl kwa">do if</span> ok<span class="hl opt">[</span>p<span class="hl opt">]</span> <span class="hl kwa">then</span> s <span class="hl opt">=</span> s<span class="hl opt">..</span><span class="hl str">&quot;..p[b&quot;</span><span class="hl opt">..</span>p<span class="hl opt">..</span><span class="hl str">&quot;]&quot;</span> <span class="hl kwa">end end</span>
  s <span class="hl opt">=</span> s<span class="hl opt">..</span><span class="hl str">[[</span>
<span class="hl str">    -- Remember min/max boards, dito for the symmetric board.</span>
<span class="hl str">    if not smin then smin = s; smax = s</span>
<span class="hl str">    elseif s &lt; smin then smin = s elseif s &gt; smax then smax = s end</span>
<span class="hl str">    s = reverse(s)</span>
<span class="hl str">    if s &lt; smin then smin = s elseif s &gt; smax then smax = s end</span>
<span class="hl str">  until true</span>
<span class="hl str">  if count &lt;= 0 then error(&quot;&quot;) end -- Early abort if max count given.</span>
<span class="hl str">end</span>
<span class="hl str">local f93 = f91</span>
<span class="hl str">]]</span>

  <span class="hl slc">-- Recursively prune the decision tree and convert it to Lua code.</span>
  <span class="hl kwa">local function</span> <span class="hl kwd">codetree</span><span class="hl opt">(</span>tree<span class="hl opt">,</span> d<span class="hl opt">,</span> p<span class="hl opt">,</span> pn<span class="hl opt">)</span>
    <span class="hl kwa">local</span> found<span class="hl opt">,</span> s <span class="hl opt">=</span> <span class="hl kwa">false</span><span class="hl opt">,</span> <span class="hl str">&quot;&quot;</span>
    d <span class="hl opt">=</span> d <span class="hl opt">+</span> <span class="hl num">1</span>
    <span class="hl kwa">for</span> a<span class="hl opt">,</span>t <span class="hl kwa">in</span> <span class="hl kwd">pairs</span><span class="hl opt">(</span>tree<span class="hl opt">)</span> <span class="hl kwa">do</span>
      <span class="hl kwa">local</span> b <span class="hl opt">=</span> p<span class="hl opt">+</span>a
      <span class="hl kwa">local</span> pp <span class="hl opt">=</span> ok<span class="hl opt">[</span>b<span class="hl opt">]</span>
      <span class="hl kwa">if</span> pp <span class="hl kwa">then</span> <span class="hl slc">-- Prune the tree on-the-fly.</span>
	<span class="hl kwa">if</span> b <span class="hl opt">~=</span> pn <span class="hl kwa">then</span> pp <span class="hl opt">=</span> pn <span class="hl kwa">end</span> <span class="hl slc">-- Find maximum successor function.</span>
	<span class="hl kwa">if</span> d <span class="hl opt">==</span> <span class="hl num">5</span> <span class="hl kwa">then</span> <span class="hl slc">-- Try to place the last cell of a piece and advance.</span>
	  found <span class="hl opt">=</span> <span class="hl kwa">true</span>
	  s <span class="hl opt">=</span> <span class="hl kwb">format</span><span class="hl opt">(</span><span class="hl str">&quot;%sif not u%d and not b%d then b%d=k u%d=k f%d(k) u%d=N b%d=N end</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span>
		     s<span class="hl opt">,</span> t<span class="hl opt">,</span> b<span class="hl opt">,</span> b<span class="hl opt">,</span> t<span class="hl opt">,</span> pp<span class="hl opt">,</span> t<span class="hl opt">,</span> b<span class="hl opt">)</span>
	<span class="hl kwa">else</span> <span class="hl slc">-- Try to place an intermediate cell.</span>
	  <span class="hl kwa">local</span> st <span class="hl opt">=</span> <span class="hl kwd">codetree</span><span class="hl opt">(</span>t<span class="hl opt">,</span> d<span class="hl opt">,</span> p<span class="hl opt">,</span> pp<span class="hl opt">)</span>
	  <span class="hl kwa">if</span> st <span class="hl kwa">then</span> <span class="hl slc">-- But only if the subtree is not empty.</span>
	    found <span class="hl opt">=</span> <span class="hl kwa">true</span>
	    s <span class="hl opt">=</span> <span class="hl kwb">format</span><span class="hl opt">(</span><span class="hl str">&quot;%sif not b%d then b%d=k</span><span class="hl esc">\n</span><span class="hl str">%sb%d=N end</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> s<span class="hl opt">,</span> b<span class="hl opt">,</span> b<span class="hl opt">,</span> st<span class="hl opt">,</span> b<span class="hl opt">)</span>
	  <span class="hl kwa">end</span>
	<span class="hl kwa">end</span>
      <span class="hl kwa">end</span>
    <span class="hl kwa">end</span>
    <span class="hl kwa">return</span> found <span class="hl kwa">and</span> s
  <span class="hl kwa">end</span>

  <span class="hl slc">-- Embed the decision tree into a function hierarchy.</span>
  <span class="hl kwa">for</span> p<span class="hl opt">=</span><span class="hl num">88</span><span class="hl opt">,</span><span class="hl num">0</span><span class="hl opt">,-</span><span class="hl num">1</span> <span class="hl kwa">do</span>
    <span class="hl kwa">local</span> pn <span class="hl opt">=</span> ok<span class="hl opt">[</span>p<span class="hl opt">]</span>
    <span class="hl kwa">if</span> pn <span class="hl kwa">then</span>
      s <span class="hl opt">=</span> <span class="hl kwb">format</span><span class="hl opt">(</span><span class="hl str">&quot;%slocal function f%d(k)</span><span class="hl esc">\n</span><span class="hl str">local N if b%d then return f%d(k) end k=k+1 b%d=k</span><span class="hl esc">\n</span><span class="hl str">%sb%d=N end</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span>
	    s<span class="hl opt">,</span> p<span class="hl opt">,</span> p<span class="hl opt">,</span> pn<span class="hl opt">,</span> p<span class="hl opt">,</span> <span class="hl kwd">codetree</span><span class="hl opt">(</span>dtree<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">,</span> p<span class="hl opt">,</span> pn<span class="hl opt">),</span> p<span class="hl opt">)</span>
    <span class="hl kwa">end</span>
  <span class="hl kwa">end</span>

  <span class="hl slc">-- Compile and return solver function and result getter.</span>
  <span class="hl kwa">return</span> <span class="hl kwd">loadstring</span><span class="hl opt">(</span>s<span class="hl opt">..</span><span class="hl str">&quot;return f0, printresult</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;solver&quot;</span><span class="hl opt">)(</span>countinit<span class="hl opt">)</span>
<span class="hl kwa">end</span>

<span class="hl slc">-- The optimizer for LuaJIT 1.1.x is not helpful here, so turn it off.</span>
<span class="hl kwa">if</span> jit <span class="hl kwa">and</span> jit<span class="hl opt">.</span>opt <span class="hl kwa">and</span> jit<span class="hl opt">.</span>version_num <span class="hl opt">&lt;</span> <span class="hl num">10200</span> <span class="hl kwa">then</span>
  jit<span class="hl opt">.</span>opt<span class="hl opt">.</span><span class="hl kwd">start</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">)</span>
  jit<span class="hl opt">.</span><span class="hl kwd">off</span><span class="hl opt">(</span>generatesolver<span class="hl opt">)</span>
<span class="hl kwa">end</span>

<span class="hl slc">-- Run the solver protected to get partial results (max count or ctrl-c).</span>
<span class="hl kwa">local</span> solver<span class="hl opt">,</span> printresult <span class="hl opt">=</span> <span class="hl kwd">generatesolver</span><span class="hl opt">(</span><span class="hl kwb">tonumber</span><span class="hl opt">(</span>arg <span class="hl kwa">and</span> arg<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">])</span> <span class="hl kwa">or</span> <span class="hl num">10000</span><span class="hl opt">)</span>
<span class="hl kwd">pcall</span><span class="hl opt">(</span>solver<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">)</span>
<span class="hl kwd">printresult</span><span class="hl opt">()</span>

