<span class="hl slc"># The Computer Language Benchmarks Game</span>
<span class="hl slc"># http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">#</span>
<span class="hl slc"># submitted by Ian Osgood</span>
<span class="hl slc"># modified by Sokolov Yura</span>
<span class="hl slc"># modified by bearophile</span>
<span class="hl slc"># modified by jacek2v: few changes in algorytm, added multiprocessing, used str.count (nucleo newer overlapping)</span>

<span class="hl kwa">from</span> sys <span class="hl kwa">import</span> stdin
<span class="hl kwa">from</span> collections <span class="hl kwa">import</span> defaultdict
<span class="hl kwa">from</span> multiprocessing <span class="hl kwa">import</span> Process<span class="hl opt">,</span> Pool<span class="hl opt">,</span> cpu_count

<span class="hl kwa">def</span> <span class="hl kwd">gen_freq</span><span class="hl opt">(</span>seq<span class="hl opt">,</span> frame<span class="hl opt">):</span>
    frequences <span class="hl opt">=</span> <span class="hl kwd">defaultdict</span><span class="hl opt">(</span><span class="hl kwb">int</span><span class="hl opt">)</span>
    ns <span class="hl opt">=</span> <span class="hl kwb">len</span><span class="hl opt">(</span>seq<span class="hl opt">) +</span> <span class="hl num">1</span> <span class="hl opt">-</span> frame
    <span class="hl kwa">for</span> ii <span class="hl kwa">in</span> <span class="hl kwb">range</span><span class="hl opt">(</span>ns<span class="hl opt">):</span>
        frequences<span class="hl opt">[</span>seq<span class="hl opt">[</span>ii<span class="hl opt">:</span>ii <span class="hl opt">+</span> frame<span class="hl opt">]] +=</span> <span class="hl num">1</span>
    <span class="hl kwa">return</span> ns<span class="hl opt">,</span> frequences

<span class="hl kwa">def</span> <span class="hl kwd">sort_seq</span><span class="hl opt">(</span>seq<span class="hl opt">,</span> length<span class="hl opt">):</span>
    n<span class="hl opt">,</span> frequences <span class="hl opt">=</span> <span class="hl kwd">gen_freq</span><span class="hl opt">(</span>seq<span class="hl opt">,</span> length<span class="hl opt">)</span>
    <span class="hl slc">#l = sorted(frequences.items(), reverse=True, key=lambda (seq,freq): (freq,seq))</span>
    l <span class="hl opt">=</span> <span class="hl kwb">sorted</span><span class="hl opt">(</span><span class="hl kwb">list</span><span class="hl opt">(</span>frequences<span class="hl opt">.</span><span class="hl kwd">items</span><span class="hl opt">()),</span> reverse<span class="hl opt">=</span><span class="hl kwa">True</span><span class="hl opt">,</span> key<span class="hl opt">=</span><span class="hl kwa">lambda</span> seq_freq<span class="hl opt">: (</span>seq_freq<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">],</span>seq_freq<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">]))</span>
    <span class="hl kwa">return</span> <span class="hl opt">[(</span>st<span class="hl opt">,</span> <span class="hl num">100.0</span><span class="hl opt">*</span>fr<span class="hl opt">/</span>n<span class="hl opt">)</span> <span class="hl kwa">for</span> st<span class="hl opt">,</span> fr <span class="hl kwa">in</span> l<span class="hl opt">]</span>

<span class="hl kwa">def</span> <span class="hl kwd">find_seq</span><span class="hl opt">(</span>seq<span class="hl opt">,</span> nucleo<span class="hl opt">):</span>
    count <span class="hl opt">=</span> seq<span class="hl opt">.</span><span class="hl kwd">count</span><span class="hl opt">(</span>nucleo<span class="hl opt">)</span>
    <span class="hl kwa">return</span> nucleo<span class="hl opt">,</span> count

<span class="hl kwa">def</span> <span class="hl kwd">load</span><span class="hl opt">():</span>
    <span class="hl kwa">for</span> line <span class="hl kwa">in</span> stdin<span class="hl opt">:</span>
        <span class="hl kwa">if</span> line<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">:</span><span class="hl num">3</span><span class="hl opt">] ==</span> <span class="hl str">&quot;&gt;TH&quot;</span><span class="hl opt">:</span>
            <span class="hl kwa">break</span>
    seq <span class="hl opt">= []</span>
    <span class="hl kwa">for</span> line <span class="hl kwa">in</span> stdin<span class="hl opt">:</span>
        <span class="hl kwa">if</span> line<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">]</span> <span class="hl kwa">in</span> <span class="hl str">&quot;&gt;;&quot;</span><span class="hl opt">:</span>
            <span class="hl kwa">break</span>
        seq<span class="hl opt">.</span><span class="hl kwd">append</span><span class="hl opt">(</span> line<span class="hl opt">[:-</span><span class="hl num">1</span><span class="hl opt">] )</span>
    <span class="hl kwa">return</span> seq

<span class="hl kwa">def</span> <span class="hl kwd">main</span><span class="hl opt">():</span>
    nucleos <span class="hl opt">=</span> <span class="hl str">&quot;GGT GGTA GGTATT GGTATTTTAATT GGTATTTTAATTTATAGT&quot;</span>
    sequence <span class="hl opt">=</span> <span class="hl str">&quot;&quot;</span><span class="hl opt">.</span><span class="hl kwd">join</span><span class="hl opt">(</span><span class="hl kwd">load</span><span class="hl opt">()).</span><span class="hl kwd">upper</span><span class="hl opt">()</span>
    plres <span class="hl opt">= []</span>
    pl <span class="hl opt">=</span> <span class="hl kwd">Pool</span><span class="hl opt">(</span>processes<span class="hl opt">=</span><span class="hl kwd">cpu_count</span><span class="hl opt">() +</span> <span class="hl num">1</span><span class="hl opt">)</span>
    
    <span class="hl kwa">for</span> nl <span class="hl kwa">in</span> <span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">2</span><span class="hl opt">:</span>
        plres<span class="hl opt">.</span><span class="hl kwd">append</span><span class="hl opt">(</span>pl<span class="hl opt">.</span><span class="hl kwd">apply_async</span><span class="hl opt">(</span>sort_seq<span class="hl opt">, (</span>sequence<span class="hl opt">,</span> nl<span class="hl opt">, )))</span>
    <span class="hl kwa">for</span> se <span class="hl kwa">in</span> nucleos<span class="hl opt">.</span><span class="hl kwd">split</span><span class="hl opt">():</span>
        plres<span class="hl opt">.</span><span class="hl kwd">append</span><span class="hl opt">(</span>pl<span class="hl opt">.</span><span class="hl kwd">apply_async</span><span class="hl opt">(</span>find_seq<span class="hl opt">, (</span>sequence<span class="hl opt">,</span> se<span class="hl opt">, )))</span>
    pl<span class="hl opt">.</span><span class="hl kwd">close</span><span class="hl opt">()</span>
    pl<span class="hl opt">.</span><span class="hl kwd">join</span><span class="hl opt">()</span>

    <span class="hl kwa">for</span> ii <span class="hl kwa">in</span> <span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">1</span><span class="hl opt">:</span>
        <span class="hl kwa">print</span><span class="hl opt">(</span><span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl opt">.</span><span class="hl kwd">join</span><span class="hl opt">(</span><span class="hl str">&quot;%s %.3f&quot;</span> <span class="hl opt">% (</span>st<span class="hl opt">,</span> fr<span class="hl opt">)</span> <span class="hl kwa">for</span> st<span class="hl opt">,</span>fr <span class="hl kwa">in</span> plres<span class="hl opt">[</span>ii<span class="hl opt">].</span><span class="hl kwd">get</span><span class="hl opt">()))</span>
        <span class="hl kwa">print</span><span class="hl opt">(</span><span class="hl str">''</span><span class="hl opt">)</span>
    <span class="hl kwa">for</span> ii <span class="hl kwa">in</span> <span class="hl kwb">range</span><span class="hl opt">(</span><span class="hl num">2</span><span class="hl opt">,</span> <span class="hl kwb">len</span><span class="hl opt">(</span>nucleos<span class="hl opt">.</span><span class="hl kwd">split</span><span class="hl opt">()) +</span> <span class="hl num">2</span><span class="hl opt">):</span>
        <span class="hl kwa">print</span><span class="hl opt">(</span><span class="hl str">&quot;%d</span><span class="hl esc">\t</span><span class="hl str">%s&quot;</span> <span class="hl opt">% (</span>plres<span class="hl opt">[</span>ii<span class="hl opt">].</span><span class="hl kwd">get</span><span class="hl opt">()[</span><span class="hl num">1</span><span class="hl opt">],</span> plres<span class="hl opt">[</span>ii<span class="hl opt">].</span><span class="hl kwd">get</span><span class="hl opt">()[</span><span class="hl num">0</span><span class="hl opt">]))</span>
<span class="hl kwd">main</span><span class="hl opt">()</span>
