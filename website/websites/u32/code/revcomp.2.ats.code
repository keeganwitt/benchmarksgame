<span class="hl com">(*</span>
<span class="hl com">** The Computer Language Benchmarks Game</span>
<span class="hl com">** http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com">**</span>
<span class="hl com">** contributed by Hongwei Xi</span>
<span class="hl com">**</span>
<span class="hl com">** compilation command:</span>
<span class="hl com">**   atscc -O3 -fomit-frame-pointer reverse-complement2.dats -o reverse-complement2</span>
<span class="hl com">*)</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">staload</span> <span class="hl str">&quot;libc/SATS/stdio.sats&quot;</span>

<span class="hl com">(* ****** ****** *)</span>

sta l_iubcmpltarr<span class="hl opt">:</span> addr
<span class="hl kwa">extern</span> prval
  pfbox_iubcmpltarr<span class="hl opt">:</span> vbox <span class="hl opt">(</span>bytes<span class="hl opt">(</span><span class="hl kwd">BYTE_MAX</span><span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)</span> &#64; l_iubcmpltarr<span class="hl opt">)</span>
<span class="hl kwa">val</span> p_iubcmpltarr <span class="hl opt">=</span> $extval <span class="hl opt">(</span>ptr l_iubcmpltarr<span class="hl opt">,</span> <span class="hl str">&quot;&amp;iubcmpltarr[0]&quot;</span><span class="hl opt">)</span>

fn iubcmplt_get <span class="hl opt">(</span>b<span class="hl opt">:</span> byte<span class="hl opt">):</span> byte <span class="hl opt">=</span> <span class="hl kwa">let</span>
  <span class="hl kwa">val</span> i <span class="hl opt">=</span> int1_of_byte <span class="hl opt">(</span>b<span class="hl opt">);</span> prval vbox pf <span class="hl opt">=</span> pfbox_iubcmpltarr <span class="hl kwa">in</span>
  p_iubcmpltarr<span class="hl opt">-&gt;[</span>i<span class="hl opt">]</span>
<span class="hl kwa">end</span> <span class="hl slc">// end of [iubcmplt_get]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl com">(* [reverse buf] reverse-complement the string [buf] in place. *)</span>
fn reverse_buf <span class="hl opt">{</span>pos<span class="hl opt">,</span>bsz<span class="hl opt">:</span>nat | <span class="hl num">0</span> <span class="hl opt">&lt;</span> pos<span class="hl opt">;</span> pos <span class="hl opt">&lt;=</span> bsz<span class="hl opt">}</span>
  <span class="hl opt">(</span>buf<span class="hl opt">: &amp;</span>bytes<span class="hl opt">(</span>bsz<span class="hl opt">),</span> pos<span class="hl opt">:</span> size_t pos<span class="hl opt">):</span> void <span class="hl opt">=</span> loop <span class="hl opt">(</span>buf<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> pos<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">)</span> where <span class="hl opt">{</span>
  <span class="hl kwa">fun</span> loop <span class="hl opt">{</span>i<span class="hl opt">:</span>nat | i <span class="hl opt">&lt;</span> pos<span class="hl opt">} .&lt;</span>pos<span class="hl opt">-</span>i<span class="hl opt">&gt;.</span>
    <span class="hl opt">(</span>buf<span class="hl opt">: &amp;</span>bytes<span class="hl opt">(</span>bsz<span class="hl opt">),</span> i<span class="hl opt">:</span> size_t i<span class="hl opt">,</span> j<span class="hl opt">:</span> size_t <span class="hl opt">(</span>pos<span class="hl opt">-</span>i<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">)):</span> void <span class="hl opt">=</span>
    <span class="hl kwa">if</span> i <span class="hl opt">&lt;</span> j <span class="hl kwa">then let</span>
      <span class="hl kwa">val</span> bufi <span class="hl opt">=</span> buf<span class="hl opt">.[</span>i<span class="hl opt">]</span> <span class="hl kwa">and</span> bufj <span class="hl opt">=</span> buf<span class="hl opt">.[</span>j<span class="hl opt">]</span>
      <span class="hl kwa">val</span> <span class="hl opt">() =</span> buf<span class="hl opt">.[</span>i<span class="hl opt">] :=</span> iubcmplt_get bufj <span class="hl kwa">and</span> <span class="hl opt">() =</span> buf<span class="hl opt">.[</span>j<span class="hl opt">] :=</span> iubcmplt_get bufi
    <span class="hl kwa">in</span>
      loop <span class="hl opt">(</span>buf<span class="hl opt">,</span> i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">,</span> j<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">)</span>
    <span class="hl kwa">end</span> <span class="hl com">(* end of [if] *)</span>
  <span class="hl slc">// end of [loop]</span>
<span class="hl opt">}</span> <span class="hl slc">// end of [reverse_buf]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl ppc">#define LINE 128</span>
<span class="hl ppc">#define BUFSZ 1024</span>

<span class="hl ppc">#define WIDTH 60</span>
<span class="hl kwa">macdef</span> <span class="hl kwd">WIDTH_sz</span> <span class="hl opt">=</span> size1_of_int1 <span class="hl opt">(</span><span class="hl kwd">WIDTH</span><span class="hl opt">)</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl slc">// *_unlocked I/O functions are used to implement these two:</span>
<span class="hl kwa">extern fun</span> fputc <span class="hl opt">(</span>c<span class="hl opt">:</span> char<span class="hl opt">,</span> out<span class="hl opt">:</span> <span class="hl kwd">FILEref</span><span class="hl opt">):</span> void <span class="hl opt">=</span> <span class="hl str">&quot;fasta_fputc&quot;</span>
<span class="hl kwa">extern fun</span> fwrite_byte <span class="hl opt">{</span>bsz<span class="hl opt">,</span>n<span class="hl opt">:</span>nat | n <span class="hl opt">&lt;=</span> bsz<span class="hl opt">} {</span>l<span class="hl opt">:</span>addr<span class="hl opt">}</span>
  <span class="hl opt">(</span>pf<span class="hl opt">: !</span>bytes <span class="hl opt">(</span>bsz<span class="hl opt">)</span> &#64; l | p<span class="hl opt">:</span> ptr l<span class="hl opt">,</span> n<span class="hl opt">:</span> size_t n<span class="hl opt">,</span> out<span class="hl opt">:</span> <span class="hl kwd">FILEref</span><span class="hl opt">):&lt;&gt;</span> sizeLte n
  <span class="hl opt">=</span> <span class="hl str">&quot;fasta_fwrite_byte&quot;</span>

<span class="hl slc">// no proofs are provided for the following two theorems:</span>
<span class="hl kwa">extern</span> praxi bytes_v_split <span class="hl opt">{</span>n<span class="hl opt">,</span>i<span class="hl opt">:</span>nat | i <span class="hl opt">&lt;=</span> n<span class="hl opt">}</span>
  <span class="hl opt">{</span>l<span class="hl opt">:</span>addr<span class="hl opt">} (</span>pf<span class="hl opt">:</span> bytes <span class="hl opt">(</span>n<span class="hl opt">)</span> &#64; l<span class="hl opt">):</span> &#64;<span class="hl opt">(</span>bytes <span class="hl opt">(</span>i<span class="hl opt">)</span> &#64; l<span class="hl opt">,</span> bytes <span class="hl opt">(</span>n<span class="hl opt">-</span>i<span class="hl opt">)</span> &#64; l<span class="hl opt">+</span>i<span class="hl opt">)</span>
<span class="hl kwa">extern</span> praxi bytes_v_unsplit <span class="hl opt">{</span>n1<span class="hl opt">,</span>n2<span class="hl opt">:</span>nat<span class="hl opt">}</span>
  <span class="hl opt">{</span>l<span class="hl opt">:</span>addr<span class="hl opt">} (</span>pf1<span class="hl opt">:</span> bytes<span class="hl opt">(</span>n1<span class="hl opt">)</span> &#64; l<span class="hl opt">,</span> pf2<span class="hl opt">:</span> bytes<span class="hl opt">(</span>n2<span class="hl opt">)</span> &#64; l<span class="hl opt">+</span>n1<span class="hl opt">):</span> bytes <span class="hl opt">(</span>n1<span class="hl opt">+</span>n2<span class="hl opt">)</span> &#64; l

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">fun</span> fasta_print <span class="hl opt">{</span>n<span class="hl opt">,</span>sz<span class="hl opt">:</span>nat | n <span class="hl opt">&lt;=</span> sz<span class="hl opt">} {</span>l<span class="hl opt">:</span>addr<span class="hl opt">}</span>
  <span class="hl opt">(</span>pf<span class="hl opt">: !</span>bytes <span class="hl opt">(</span>sz<span class="hl opt">)</span> &#64; l | p<span class="hl opt">:</span> ptr l<span class="hl opt">,</span> n<span class="hl opt">:</span> size_t n<span class="hl opt">):</span> void <span class="hl opt">=</span>
  <span class="hl kwa">if</span> n <span class="hl opt">&gt;</span> <span class="hl kwd">WIDTH_sz</span> <span class="hl kwa">then let</span>
    <span class="hl kwa">val</span> _ <span class="hl opt">=</span> fwrite_byte <span class="hl opt">(</span>pf | p<span class="hl opt">,</span> <span class="hl kwd">WIDTH_sz</span><span class="hl opt">,</span> stdout_ref<span class="hl opt">)</span>
    <span class="hl kwa">val</span> <span class="hl opt">() =</span> fputc <span class="hl opt">(</span><span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl opt">,</span> stdout_ref<span class="hl opt">)</span>
    prval <span class="hl opt">(</span>pf1<span class="hl opt">,</span> pf2<span class="hl opt">) =</span> bytes_v_split <span class="hl opt">{</span>sz<span class="hl opt">,</span><span class="hl kwd">WIDTH</span><span class="hl opt">} (</span>pf<span class="hl opt">)</span>
    <span class="hl kwa">val</span> <span class="hl opt">() =</span> fasta_print <span class="hl opt">(</span>pf2 | p <span class="hl opt">+</span> <span class="hl kwd">WIDTH_sz</span><span class="hl opt">,</span> n <span class="hl opt">-</span> <span class="hl kwd">WIDTH</span><span class="hl opt">)</span>
    <span class="hl kwa">val</span> <span class="hl opt">() =</span> pf <span class="hl opt">:=</span> bytes_v_unsplit <span class="hl opt">(</span>pf1<span class="hl opt">,</span> pf2<span class="hl opt">)</span>
  <span class="hl kwa">in</span>
    <span class="hl slc">// empty</span>
  <span class="hl kwa">end else let</span>
    <span class="hl kwa">val</span> _ <span class="hl opt">=</span> fwrite_byte <span class="hl opt">(</span>pf | p<span class="hl opt">,</span> n<span class="hl opt">,</span> stdout_ref<span class="hl opt">)</span>
    <span class="hl kwa">val</span> <span class="hl opt">() =</span> fputc <span class="hl opt">(</span><span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl opt">,</span> stdout_ref<span class="hl opt">)</span>
  <span class="hl kwa">in</span>
    <span class="hl slc">// empty</span>
  <span class="hl kwa">end</span> <span class="hl slc">// end of [if]    </span>
<span class="hl slc">// end of [fasta_print]</span>

<span class="hl com">(* ****** ****** *)</span>

fn fwrite_buf
  <span class="hl opt">{</span>pos<span class="hl opt">,</span>len<span class="hl opt">,</span>bsz<span class="hl opt">:</span>nat | pos <span class="hl opt">+</span> len <span class="hl opt">&lt;=</span> bsz<span class="hl opt">} {</span>l_buf<span class="hl opt">:</span>addr<span class="hl opt">} (</span>
    pf<span class="hl opt">: !</span>bytes <span class="hl opt">(</span>bsz<span class="hl opt">)</span> &#64; l_buf
  | p_buf<span class="hl opt">:</span> ptr l_buf<span class="hl opt">,</span> pos<span class="hl opt">:</span> size_t pos<span class="hl opt">,</span> len<span class="hl opt">:</span> size_t len<span class="hl opt">,</span> file<span class="hl opt">:</span> <span class="hl kwd">FILEref</span>
  <span class="hl opt">) :</span> void <span class="hl opt">= ()</span> where <span class="hl opt">{</span>
  prval <span class="hl opt">(</span>pf1<span class="hl opt">,</span> pf2<span class="hl opt">) =</span> bytes_v_split <span class="hl opt">{</span>bsz<span class="hl opt">,</span>pos<span class="hl opt">} (</span>pf<span class="hl opt">)</span>
  <span class="hl kwa">val</span> _ <span class="hl opt">=</span> fwrite_byte <span class="hl opt">(</span>pf2 | p_buf <span class="hl opt">+</span> pos<span class="hl opt">,</span> len<span class="hl opt">,</span> file<span class="hl opt">)</span>
  prval <span class="hl opt">() =</span> pf <span class="hl opt">:=</span> bytes_v_unsplit <span class="hl opt">(</span>pf1<span class="hl opt">,</span> pf2<span class="hl opt">)</span>
<span class="hl opt">}</span> <span class="hl com">/* end of [fwrite_buf] */</span>

<span class="hl kwa">typedef</span> sizeBtw <span class="hl opt">(</span>lb<span class="hl opt">:</span><span class="hl kwb">int</span><span class="hl opt">,</span> ub<span class="hl opt">:</span><span class="hl kwb">int</span><span class="hl opt">) = [</span>i<span class="hl opt">:</span><span class="hl kwb">int</span> | lb <span class="hl opt">&lt;=</span> i<span class="hl opt">;</span> i <span class="hl opt">&lt;</span> ub<span class="hl opt">]</span> size_t i

fn fread_buf_line
  <span class="hl opt">{</span>pos<span class="hl opt">,</span>len<span class="hl opt">,</span>bsz<span class="hl opt">:</span>nat | <span class="hl num">0</span> <span class="hl opt">&lt;</span> len<span class="hl opt">;</span> pos <span class="hl opt">+</span> len <span class="hl opt">&lt;=</span> bsz<span class="hl opt">} {</span>l_buf<span class="hl opt">:</span>addr<span class="hl opt">} (</span>
    pf<span class="hl opt">: !</span>bytes <span class="hl opt">(</span>bsz<span class="hl opt">)</span> &#64; l_buf
  | p_buf<span class="hl opt">:</span> ptr l_buf<span class="hl opt">,</span> pos<span class="hl opt">:</span> size_t pos<span class="hl opt">,</span> len<span class="hl opt">:</span> <span class="hl kwb">int</span> len<span class="hl opt">,</span> inp<span class="hl opt">: &amp;</span><span class="hl kwd">FILE</span> r
  <span class="hl opt">) :</span> sizeBtw <span class="hl opt">(</span>pos<span class="hl opt">,</span> pos<span class="hl opt">+</span>len<span class="hl opt">) =</span> <span class="hl kwa">let</span>
  prval <span class="hl opt">(</span>pf1<span class="hl opt">,</span> pf2<span class="hl opt">) =</span> bytes_v_split <span class="hl opt">{</span>bsz<span class="hl opt">,</span>pos<span class="hl opt">} (</span>pf<span class="hl opt">)</span>
  <span class="hl kwa">val</span> p_beg <span class="hl opt">=</span> p_buf<span class="hl opt">+</span>pos
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> fgets_exn <span class="hl opt">(</span>file_mode_lte_r_r<span class="hl opt">,</span> pf2 | p_beg<span class="hl opt">,</span> len<span class="hl opt">,</span> inp<span class="hl opt">)</span>
  <span class="hl kwa">val</span> n <span class="hl opt">=</span> strbuf_length <span class="hl opt">(!</span>p_beg<span class="hl opt">)</span>
  <span class="hl kwa">val</span> pos1 <span class="hl opt">=</span> pos <span class="hl opt">+</span> n
<span class="hl kwa">in</span>
  case<span class="hl opt">+</span> <span class="hl num">0</span> <span class="hl kwa">of</span>
  | _ <span class="hl kwa">when</span> n <span class="hl opt">&gt;</span> <span class="hl num">0</span> <span class="hl opt">=&gt;</span> <span class="hl kwa">let</span>
      <span class="hl kwa">val</span> c <span class="hl opt">=</span> strbuf_get_char_at <span class="hl opt">(!</span>p_beg<span class="hl opt">,</span> n<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">)</span>
      prval pf2 <span class="hl opt">=</span> bytes_v_of_strbuf_v <span class="hl opt">(</span>pf2<span class="hl opt">)</span>
      prval <span class="hl opt">() =</span> pf <span class="hl opt">:=</span> bytes_v_unsplit <span class="hl opt">(</span>pf1<span class="hl opt">,</span> pf2<span class="hl opt">)</span>
    <span class="hl kwa">in</span>
      <span class="hl kwa">if</span> c <span class="hl opt">=</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span> <span class="hl kwa">then</span> pos1 <span class="hl opt">-</span> <span class="hl num">1</span> <span class="hl kwa">else</span> pos1
    <span class="hl kwa">end</span> <span class="hl slc">// end of [_ when ...]</span>
  | _ <span class="hl opt">=&gt;</span> pos1 where <span class="hl opt">{</span>
      prval pf2 <span class="hl opt">=</span> bytes_v_of_strbuf_v <span class="hl opt">(</span>pf2<span class="hl opt">)</span>
      prval <span class="hl opt">() =</span> pf <span class="hl opt">:=</span> bytes_v_unsplit <span class="hl opt">(</span>pf1<span class="hl opt">,</span> pf2<span class="hl opt">)</span>
    <span class="hl opt">}</span> <span class="hl slc">// end of [_]</span>
<span class="hl kwa">end</span> <span class="hl com">(* end of [fread_buf_line] *)</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">implement</span>
main <span class="hl opt">(</span>argc<span class="hl opt">,</span> argv<span class="hl opt">) =</span> <span class="hl kwa">let</span>
<span class="hl slc">//</span>
<span class="hl kwa">macdef</span> <span class="hl kwd">GT</span> <span class="hl opt">=</span> byte_of_char <span class="hl str">'&gt;'</span> 
<span class="hl slc">//</span>
<span class="hl kwa">fun</span> loop <span class="hl opt">{</span>pos<span class="hl opt">:</span>nat<span class="hl opt">}</span>
  <span class="hl opt">{</span>bsz<span class="hl opt">:</span><span class="hl kwb">int</span> | bsz <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">} {</span>l_buf<span class="hl opt">:</span>addr<span class="hl opt">} (</span>
  pf_gc<span class="hl opt">:</span> freebyte_gc_v <span class="hl opt">(</span>bsz<span class="hl opt">,</span> l_buf<span class="hl opt">),</span> pf_buf<span class="hl opt">:</span> bytes <span class="hl opt">(</span>bsz<span class="hl opt">)</span> &#64; l_buf
| inp<span class="hl opt">: &amp;</span><span class="hl kwd">FILE</span> r<span class="hl opt">,</span> p_buf<span class="hl opt">:</span> ptr l_buf<span class="hl opt">,</span> bsz<span class="hl opt">:</span> size_t bsz<span class="hl opt">,</span> pos<span class="hl opt">:</span> size_t pos
<span class="hl opt">) :</span> void <span class="hl opt">=</span> <span class="hl kwa">begin</span>
  <span class="hl kwa">if</span> pos <span class="hl opt">+</span> <span class="hl kwd">LINE</span> <span class="hl opt">&lt;=</span> bsz <span class="hl kwa">then let</span>
    <span class="hl kwa">val</span> pos_new <span class="hl opt">=</span> fread_buf_line <span class="hl opt">(</span>pf_buf | p_buf<span class="hl opt">,</span> pos<span class="hl opt">,</span> <span class="hl kwd">LINE</span><span class="hl opt">,</span> inp<span class="hl opt">)</span>
  <span class="hl kwa">in</span>
    <span class="hl kwa">if</span> pos_new <span class="hl opt">&gt;</span> pos <span class="hl kwa">then begin</span>
      <span class="hl kwa">if</span> p_buf<span class="hl opt">-&gt;[</span>pos<span class="hl opt">] =</span> <span class="hl kwd">GT</span> <span class="hl kwa">then let</span>
        <span class="hl kwa">val</span> <span class="hl opt">() =</span> <span class="hl kwa">if</span> pos <span class="hl opt">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then let</span>
          <span class="hl kwa">val</span> <span class="hl opt">() =</span> reverse_buf <span class="hl opt">(!</span>p_buf<span class="hl opt">,</span> pos<span class="hl opt">)</span> <span class="hl kwa">in</span> fasta_print <span class="hl opt">(</span>pf_buf | p_buf<span class="hl opt">,</span> pos<span class="hl opt">)</span>
        <span class="hl kwa">end</span> <span class="hl slc">// end of [val]</span>
        <span class="hl kwa">val</span> <span class="hl opt">() =</span> fwrite_buf <span class="hl opt">(</span>pf_buf | p_buf<span class="hl opt">,</span> pos<span class="hl opt">,</span> pos_new<span class="hl opt">-</span>pos<span class="hl opt">,</span> stdout_ref<span class="hl opt">)</span>
        <span class="hl kwa">val</span> <span class="hl opt">() =</span> fputc <span class="hl opt">(</span><span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl opt">,</span> stdout_ref<span class="hl opt">)</span>
      <span class="hl kwa">in</span>
        loop <span class="hl opt">(</span>pf_gc<span class="hl opt">,</span> pf_buf | inp<span class="hl opt">,</span> p_buf<span class="hl opt">,</span> bsz<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">)</span>
      <span class="hl kwa">end else begin</span>
        loop <span class="hl opt">(</span>pf_gc<span class="hl opt">,</span> pf_buf | inp<span class="hl opt">,</span> p_buf<span class="hl opt">,</span> bsz<span class="hl opt">,</span> pos_new<span class="hl opt">)</span>
      <span class="hl kwa">end</span> <span class="hl com">(* end of [if] *)</span>
    <span class="hl kwa">end else let</span>
      <span class="hl kwa">val</span> <span class="hl opt">() =</span> <span class="hl kwa">if</span> pos <span class="hl opt">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then let</span>
        <span class="hl kwa">val</span> <span class="hl opt">() =</span> reverse_buf <span class="hl opt">(!</span>p_buf<span class="hl opt">,</span> pos<span class="hl opt">)</span>
        <span class="hl kwa">val</span> <span class="hl opt">() =</span> fasta_print <span class="hl opt">(</span>pf_buf | p_buf<span class="hl opt">,</span> pos<span class="hl opt">);</span>
      <span class="hl kwa">in</span>
        <span class="hl slc">// empty</span>
      <span class="hl kwa">end</span> <span class="hl slc">// end of [val]</span>
      <span class="hl kwa">val</span> <span class="hl opt">() =</span> free_gc <span class="hl opt">(</span>pf_gc<span class="hl opt">,</span> pf_buf | p_buf<span class="hl opt">)</span>
    <span class="hl kwa">in</span>
      <span class="hl slc">// empty</span>
    <span class="hl kwa">end</span> <span class="hl com">(* end of [if] *)</span>
  <span class="hl kwa">end else let</span>
    <span class="hl kwa">val</span> bsz <span class="hl opt">=</span> bsz <span class="hl opt">+</span> bsz
    <span class="hl kwa">val</span> <span class="hl opt">(</span>pf_gc<span class="hl opt">,</span> pf_buf | p_buf<span class="hl opt">) =</span> realloc_gc <span class="hl opt">(</span>pf_gc<span class="hl opt">,</span> pf_buf | p_buf<span class="hl opt">,</span> bsz<span class="hl opt">)</span>
    prval pf_buf <span class="hl opt">=</span> bytes_v_of_b0ytes_v pf_buf
  <span class="hl kwa">in</span>
    loop <span class="hl opt">(</span>pf_gc<span class="hl opt">,</span> pf_buf | inp<span class="hl opt">,</span> p_buf<span class="hl opt">,</span> bsz<span class="hl opt">,</span> pos<span class="hl opt">)</span>
  <span class="hl kwa">end</span> <span class="hl slc">// end of [if]</span>
<span class="hl kwa">end</span> <span class="hl com">(* end of [loop] *)</span>

<span class="hl kwa">val</span> <span class="hl opt">() =</span> iubcmpltarr_initialize <span class="hl opt">()</span> where <span class="hl opt">{</span>
  <span class="hl kwa">extern fun</span> iubcmpltarr_initialize <span class="hl opt">():</span> void <span class="hl opt">=</span> <span class="hl str">&quot;iubcmpltarr_initialize&quot;</span>
<span class="hl opt">}</span> <span class="hl slc">// end of [val]</span>

<span class="hl kwa">val</span> <span class="hl opt">(</span>pf_gc<span class="hl opt">,</span> pf_buf | p_buf<span class="hl opt">) =</span> malloc_gc <span class="hl opt">(</span><span class="hl kwd">BUFSZ</span><span class="hl opt">)</span>
prval pf_buf <span class="hl opt">=</span> bytes_v_of_b0ytes_v pf_buf
<span class="hl kwa">val</span> <span class="hl opt">(</span>pf_stdin | p_stdin<span class="hl opt">) =</span> stdin_get <span class="hl opt">()</span>
<span class="hl kwa">val</span> <span class="hl opt">() =</span> loop <span class="hl opt">(</span>pf_gc<span class="hl opt">,</span> pf_buf | <span class="hl opt">!</span>p_stdin<span class="hl opt">,</span> p_buf<span class="hl opt">,</span> <span class="hl kwd">BUFSZ</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">)</span>
<span class="hl kwa">val</span> <span class="hl opt">() =</span> stdin_view_set <span class="hl opt">(</span>pf_stdin | <span class="hl com">(*none*)</span><span class="hl opt">)</span>

<span class="hl kwa">in</span>
  <span class="hl slc">// empty</span>
<span class="hl kwa">end</span> <span class="hl slc">// end of [main]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl opt">%{^</span>

<span class="hl slc">// reuse some existing C code for initialization</span>

<span class="hl ppc">#include &lt;errno.h&gt;</span>

<span class="hl kwa">static</span> unsigned char iubpairs<span class="hl opt">[][</span><span class="hl num">2</span><span class="hl opt">] = {</span>
    <span class="hl opt">{</span>    <span class="hl kwb">'A'</span><span class="hl opt">,</span>    <span class="hl kwb">'T'</span>    <span class="hl opt">},</span>
    <span class="hl opt">{</span>    <span class="hl kwb">'C'</span><span class="hl opt">,</span>    <span class="hl kwb">'G'</span>    <span class="hl opt">},</span>
    <span class="hl opt">{</span>    <span class="hl kwb">'B'</span><span class="hl opt">,</span>    <span class="hl kwb">'V'</span>    <span class="hl opt">},</span>
    <span class="hl opt">{</span>    <span class="hl kwb">'D'</span><span class="hl opt">,</span>    <span class="hl kwb">'H'</span>    <span class="hl opt">},</span>
    <span class="hl opt">{</span>    <span class="hl kwb">'K'</span><span class="hl opt">,</span>    <span class="hl kwb">'M'</span>    <span class="hl opt">},</span>
    <span class="hl opt">{</span>    <span class="hl kwb">'R'</span><span class="hl opt">,</span>    <span class="hl kwb">'Y'</span>    <span class="hl opt">},</span>
    <span class="hl opt">{</span>    <span class="hl str">'</span><span class="hl esc">\000</span><span class="hl str">'</span><span class="hl opt">,</span>   <span class="hl str">'</span><span class="hl esc">\000</span><span class="hl str">'</span>   <span class="hl opt">}</span>
<span class="hl opt">} ;</span>

<span class="hl ppc">#define BYTE_MAX 255</span>
<span class="hl kwa">static</span> unsigned char iubcmpltarr<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">+</span><span class="hl kwd">BYTE_MAX</span><span class="hl opt">];</span>

<span class="hl kwd">ATSinline</span><span class="hl opt">()</span>
ats_void_type iubcmpltarr_initialize <span class="hl opt">() {</span>
  <span class="hl kwb">int</span> i<span class="hl opt">;</span>
  <span class="hl kwa">for</span> <span class="hl opt">(</span>i<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;=</span> <span class="hl kwd">BYTE_MAX</span><span class="hl opt">;</span> i<span class="hl opt">++) {</span>
    iubcmpltarr<span class="hl opt">[</span>i<span class="hl opt">] = (</span>unsigned char<span class="hl opt">)</span> i<span class="hl opt">;</span>
  <span class="hl opt">}</span>
  <span class="hl kwa">for</span> <span class="hl opt">(</span>i<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span> iubpairs<span class="hl opt">[</span>i<span class="hl opt">][</span><span class="hl num">0</span><span class="hl opt">] !=</span> <span class="hl str">'\0'</span><span class="hl opt">;</span> i<span class="hl opt">++) {</span>
    iubcmpltarr<span class="hl opt">[</span>iubpairs<span class="hl opt">[</span>i<span class="hl opt">][</span><span class="hl num">0</span><span class="hl opt">]] =</span> iubpairs<span class="hl opt">[</span>i<span class="hl opt">][</span><span class="hl num">1</span><span class="hl opt">];</span>
    iubcmpltarr<span class="hl opt">[</span>iubpairs<span class="hl opt">[</span>i<span class="hl opt">][</span><span class="hl num">1</span><span class="hl opt">]] =</span> iubpairs<span class="hl opt">[</span>i<span class="hl opt">][</span><span class="hl num">0</span><span class="hl opt">];</span>
    iubcmpltarr<span class="hl opt">[</span>tolower<span class="hl opt">(</span>iubpairs<span class="hl opt">[</span>i<span class="hl opt">][</span><span class="hl num">0</span><span class="hl opt">])] =</span> iubpairs<span class="hl opt">[</span>i<span class="hl opt">][</span><span class="hl num">1</span><span class="hl opt">];</span>
    iubcmpltarr<span class="hl opt">[</span>tolower<span class="hl opt">(</span>iubpairs<span class="hl opt">[</span>i<span class="hl opt">][</span><span class="hl num">1</span><span class="hl opt">])] =</span> iubpairs<span class="hl opt">[</span>i<span class="hl opt">][</span><span class="hl num">0</span><span class="hl opt">];</span>
  <span class="hl opt">}</span>
<span class="hl opt">}</span> <span class="hl com">/* end of [iubcmpltarr_initialize] */</span>

<span class="hl slc">// locked/unlocked: does it really matter?</span>

ats_void_type
fasta_fputc <span class="hl opt">(</span>
  ats_char_type c<span class="hl opt">,</span> ats_ptr_type out
<span class="hl opt">) {</span>
  fputc_unlocked <span class="hl opt">((</span>char<span class="hl opt">)</span>c<span class="hl opt">, (</span><span class="hl kwd">FILE</span>*)out<span class="hl opt">) ;</span> <span class="hl kwa">return</span> <span class="hl opt">;</span>
<span class="hl opt">}</span> <span class="hl slc">// end of [fasta_fputc]</span>

ats_size_type
fasta_fwrite_byte
  <span class="hl opt">(</span>ats_ptr_type buf<span class="hl opt">,</span> ats_size_type n<span class="hl opt">,</span> ats_ptr_type fil<span class="hl opt">) {</span>
  <span class="hl kwa">return</span> fwrite_unlocked <span class="hl opt">((</span>void*)buf<span class="hl opt">, (</span>size_t<span class="hl opt">)</span><span class="hl num">1</span><span class="hl opt">, (</span>size_t<span class="hl opt">)</span>n<span class="hl opt">, (</span><span class="hl kwd">FILE</span>*)fil<span class="hl opt">) ;</span>
<span class="hl opt">}</span> <span class="hl slc">// end of [fasta_fwrite_byte]</span>

<span class="hl opt">%}</span> <span class="hl slc">// end of [%{^]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl com">(* end of [reverse-complement2.dats] *)</span>
