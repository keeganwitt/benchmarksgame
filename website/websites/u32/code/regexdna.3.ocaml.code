<span class="hl com">(* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * Contributed by Christophe TROESTLER</span>
<span class="hl com"> * Parallelized by Jon Harrop</span>
<span class="hl com"> * Modified by Mauricio Fernandez</span>
<span class="hl com"> *)</span>

<span class="hl kwa">open</span> <span class="hl kwd">Printf</span>

<span class="hl com">(* semi-standard function for process-based parallelism *)</span>
<span class="hl kwa">let</span> invoke <span class="hl opt">(</span>f <span class="hl opt">:</span> <span class="hl str">'a -&gt; '</span>b<span class="hl opt">)</span> x <span class="hl opt">:</span> <span class="hl kwb">unit</span> <span class="hl opt">-&gt;</span> <span class="hl str">'b =</span>
<span class="hl str">  let input, output = Unix.pipe() in</span>
<span class="hl str">  match Unix.fork() with</span>
<span class="hl str">  | -1 -&gt; Unix.close input; Unix.close output; (let v = f x in fun () -&gt; v)</span>
<span class="hl str">  | 0 -&gt;</span>
<span class="hl str">      Unix.close input;</span>
<span class="hl str">      let output = Unix.out_channel_of_descr output in</span>
<span class="hl str">        Marshal.to_channel output (try `Res(f x) with e -&gt; `Exn e) [];</span>
<span class="hl str">        close_out output;</span>
<span class="hl str">        exit 0</span>
<span class="hl str">  | pid -&gt;</span>
<span class="hl str">      Unix.close output;</span>
<span class="hl str">      let input = Unix.in_channel_of_descr input in fun () -&gt;</span>
<span class="hl str">        let v = Marshal.from_channel input in</span>
<span class="hl str">        ignore (Unix.waitpid [] pid);</span>
<span class="hl str">        close_in input;</span>
<span class="hl str">        match v with `Res x -&gt; x | `Exn e -&gt; raise e</span>
<span class="hl str"></span>
<span class="hl str">let variants = [&quot;agggtaaa</span><span class="hl esc">\\</span><span class="hl str">|tttaccct&quot;;          &quot;[cgt]gggtaaa</span><span class="hl esc">\\</span><span class="hl str">|tttaccc[acg]&quot;;</span>
<span class="hl str">                &quot;a[act]ggtaaa</span><span class="hl esc">\\</span><span class="hl str">|tttacc[agt]t&quot;;  &quot;ag[act]gtaaa</span><span class="hl esc">\\</span><span class="hl str">|tttac[agt]ct&quot;;</span>
<span class="hl str">                &quot;agg[act]taaa</span><span class="hl esc">\\</span><span class="hl str">|ttta[agt]cct&quot;;  &quot;aggg[acg]aaa</span><span class="hl esc">\\</span><span class="hl str">|ttt[cgt]ccct&quot;;</span>
<span class="hl str">                &quot;agggt[cgt]aa</span><span class="hl esc">\\</span><span class="hl str">|tt[acg]accct&quot;;  &quot;agggta[cgt]a</span><span class="hl esc">\\</span><span class="hl str">|t[acg]taccct&quot;;</span>
<span class="hl str">                &quot;agggtaa[cgt]</span><span class="hl esc">\\</span><span class="hl str">|[acg]ttaccct&quot;]</span>
<span class="hl str"></span>
<span class="hl str">(* Remove the &quot;</span><span class="hl esc">\\</span><span class="hl str">&quot; which is mandatory in OCaml regex. *)</span>
<span class="hl str">let re_bs = Str.regexp_string &quot;</span><span class="hl esc">\\</span><span class="hl str">&quot;</span>
<span class="hl str">let to_string = Str.global_replace re_bs &quot;&quot;</span>
<span class="hl str"></span>
<span class="hl str">let subst = [&quot;B&quot;, &quot;(c|g|t)&quot;; &quot;D&quot;, &quot;(a|g|t)&quot;;   &quot;H&quot;, &quot;(a|c|t)&quot;; &quot;K&quot;, &quot;(g|t)&quot;;</span>
<span class="hl str">             &quot;M&quot;, &quot;(a|c)&quot;;   &quot;N&quot;, &quot;(a|c|g|t)&quot;; &quot;R&quot;, &quot;(a|g)&quot;;   &quot;S&quot;, &quot;(c|g)&quot;;</span>
<span class="hl str">             &quot;V&quot;, &quot;(a|c|g)&quot;; &quot;W&quot;, &quot;(a|t)&quot;;     &quot;Y&quot;, &quot;(c|t)&quot;]</span>
<span class="hl str"></span>
<span class="hl str">(* Read all of a redirected FASTA format file from stdin. *)</span>
<span class="hl str">let file_data, file_length =</span>
<span class="hl str">  let b = Buffer.create 0xFFFF and s = String.create 0xFFF and r = ref 1 in</span>
<span class="hl str">  while !r &gt; 0 do</span>
<span class="hl str">    r := input stdin s 0 0xFFF;   Buffer.add_substring b s 0 !r</span>
<span class="hl str">  done;</span>
<span class="hl str">  Buffer.contents b, Buffer.length b</span>
<span class="hl str"></span>
<span class="hl str">(* Remove FASTA sequence descriptions and all linefeed characters.  *)</span>
<span class="hl str">let dna = Str.global_replace (Str.regexp &quot;^&gt;.*$</span><span class="hl esc">\\</span><span class="hl str">|</span><span class="hl esc">\n</span><span class="hl str">&quot;) &quot;&quot; file_data</span>
<span class="hl str">let code_length = String.length dna</span>
<span class="hl str"></span>
<span class="hl str">(* Count matches of [re]. *)</span>
<span class="hl str">let count re s =</span>
<span class="hl str">  let re = Str.regexp_case_fold re and i = ref 0 and n = ref 0 in</span>
<span class="hl str">  try</span>
<span class="hl str">    while true do i := 1 + Str.search_forward re s !i; incr n done; assert false</span>
<span class="hl str">  with Not_found -&gt; !n</span>
<span class="hl str"></span>
<span class="hl str"></span>
<span class="hl str">let () =</span>
<span class="hl str">  List.iter (fun f -&gt; print_endline(f()))</span>
<span class="hl str">    (List.map</span>
<span class="hl str">       (invoke</span>
<span class="hl str">	  (fun re -&gt; sprintf &quot;%s %i&quot; (to_string re) (count re dna)))</span>
<span class="hl str">       variants);</span>
<span class="hl str">  let b = ref dna in</span>
<span class="hl str">  List.iter (fun (re, s) -&gt;</span>
<span class="hl str">               b := Str.global_replace (Str.regexp_case_fold re) s !b) subst;</span>
<span class="hl str">  printf &quot;</span><span class="hl esc">\n</span><span class="hl str">%i</span><span class="hl esc">\n</span><span class="hl str">%i</span><span class="hl esc">\n</span><span class="hl str">%i</span><span class="hl esc">\n</span><span class="hl str">&quot; file_length code_length (String.length !b)</span>
