<span class="hl slc">! The Computer Language Benchmarks Game</span>
<span class="hl slc">! http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">! </span>
<span class="hl slc">! Compilation:</span>
<span class="hl slc">!  Single-core: ifort -fast knucleotide2.f90</span>
<span class="hl slc">!  Multi-core : ifort -fast -openmp knucleotide2.f90</span>
<span class="hl slc">!</span>
<span class="hl slc">! contributed by Steve Decker</span>
<span class="hl slc">! modified by Andrei Jirnyi:</span>
<span class="hl slc">! - added OpenMP parallelization (very naively)</span>
<span class="hl slc">! - changed the hash function to FNV hash:</span>
<span class="hl slc">!   see http://www.isthe.com/chongo/tech/comp/fnv/</span>
<span class="hl slc">!   (ifort is better at multiplication on intel cpu's)</span>
<span class="hl slc">! - changed internal string comparison to a library call :)</span>
<span class="hl slc">! - I/O is unoptimized and very slow (&gt;10 sec.) --</span>
<span class="hl slc">!   there is much to gain there.</span>
<span class="hl slc">! - Sequences are in ASCII format; it seems that the C/C++</span>
<span class="hl slc">!   programs are compressing these. much to gain there too.</span>
<span class="hl slc">! - IMPORTANT NOTE: this is a DIRTY HACK!!</span>
<span class="hl slc">!   this code probably contains various NASTY BUGS.</span>

<span class="hl kwa">module</span> knuc_mod
  <span class="hl kwa">use</span><span class="hl opt">,</span> <span class="hl kwa">intrinsic</span> <span class="hl opt">::</span> iso_c_binding
  <span class="hl kwa">implicit none</span>
  private
  public <span class="hl opt">::</span> init_table<span class="hl opt">,</span> read_frame<span class="hl opt">,</span> keys_of_given_len<span class="hl opt">,</span> cnt

  <span class="hl kwa">integer</span><span class="hl opt">,</span> <span class="hl kwa">parameter</span> <span class="hl opt">::</span> MaxWordLen <span class="hl opt">=</span> <span class="hl num">18</span>
  <span class="hl kwa">type</span><span class="hl opt">,</span> public <span class="hl opt">::</span> <span class="hl kwa">key</span>
     <span class="hl kwa">integer</span>                   <span class="hl opt">::</span> count <span class="hl opt">=</span> <span class="hl num">0</span>
     <span class="hl kwa">character</span><span class="hl opt">(</span>len<span class="hl opt">=</span>MaxWordLen<span class="hl opt">) ::</span> word <span class="hl opt">=</span> <span class="hl str">&quot;&quot;</span>
  <span class="hl kwa">end type key</span>

  <span class="hl kwa">type</span><span class="hl opt">,</span> public <span class="hl opt">::</span> table
     <span class="hl kwa">integer</span> <span class="hl opt">::</span> hashBits<span class="hl opt">,</span> maxWords<span class="hl opt">,</span> nWords
     <span class="hl kwa">type</span><span class="hl opt">(</span><span class="hl kwa">key</span><span class="hl opt">),</span> allocatable<span class="hl opt">,</span> <span class="hl kwa">dimension</span><span class="hl opt">(:) ::</span> words
  <span class="hl kwa">end type</span> table

  <span class="hl kwa">interface</span>
     <span class="hl slc">! what's wrong with using a standard library?! :)</span>
     <span class="hl kwa">integer</span><span class="hl opt">(</span>c_int<span class="hl opt">)</span> <span class="hl kwa">function</span> <span class="hl kwd">strncmp</span><span class="hl opt">(</span>s1<span class="hl opt">,</span>s2<span class="hl opt">,</span>n<span class="hl opt">)</span> <span class="hl kwd">bind</span><span class="hl opt">(</span>C<span class="hl opt">)</span>
       import
       <span class="hl kwa">character</span><span class="hl opt">(</span>kind<span class="hl opt">=</span>c_char<span class="hl opt">),</span>  <span class="hl kwd">intent</span><span class="hl opt">(</span>in<span class="hl opt">) ::</span> <span class="hl kwd">s1</span><span class="hl opt">(*)</span>
       <span class="hl kwa">character</span><span class="hl opt">(</span>kind<span class="hl opt">=</span>c_char<span class="hl opt">),</span>  <span class="hl kwd">intent</span><span class="hl opt">(</span>in<span class="hl opt">)  ::</span> <span class="hl kwd">s2</span><span class="hl opt">(*)</span>
       <span class="hl kwa">integer</span><span class="hl opt">(</span>c_size_t<span class="hl opt">),</span> value<span class="hl opt">,</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>in<span class="hl opt">) ::</span> n
     <span class="hl kwa">end function</span> strncmp

  <span class="hl kwa">end interface</span>

<span class="hl kwa">contains</span>

  pure <span class="hl kwa">subroutine</span> <span class="hl kwd">init_table</span><span class="hl opt">(</span>kNuc<span class="hl opt">,</span> nBits<span class="hl opt">)</span>
    <span class="hl kwa">type</span><span class="hl opt">(</span>table<span class="hl opt">),</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>out<span class="hl opt">) ::</span> kNuc
    <span class="hl kwa">integer</span><span class="hl opt">,</span>     <span class="hl kwd">intent</span><span class="hl opt">(</span>in<span class="hl opt">)  ::</span> nBits

    kNuc <span class="hl opt">=</span> <span class="hl kwd">table</span><span class="hl opt">(</span>nBits<span class="hl opt">,</span> <span class="hl num">2</span><span class="hl opt">**</span>nBits<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl kwd">null</span><span class="hl opt">())</span>
    <span class="hl kwd">allocate</span><span class="hl opt">(</span>kNuc<span class="hl opt">%</span><span class="hl kwd">words</span><span class="hl opt">(</span>kNuc<span class="hl opt">%</span>maxWords<span class="hl opt">))</span>
  <span class="hl kwa">end subroutine</span> init_table

  <span class="hl kwa">subroutine</span> <span class="hl kwd">read_frame</span><span class="hl opt">(</span>buf<span class="hl opt">,</span> n<span class="hl opt">,</span> length<span class="hl opt">,</span> kNuc<span class="hl opt">)</span>
    <span class="hl kwa">character</span><span class="hl opt">,</span> <span class="hl kwa">dimension</span><span class="hl opt">(:),</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>in<span class="hl opt">)    ::</span> buf
    <span class="hl kwa">integer</span><span class="hl opt">,</span>                 <span class="hl kwd">intent</span><span class="hl opt">(</span>in<span class="hl opt">)    ::</span> n<span class="hl opt">,</span> length
    <span class="hl kwa">type</span><span class="hl opt">(</span>table<span class="hl opt">),</span>             <span class="hl kwd">intent</span><span class="hl opt">(</span>inout<span class="hl opt">) ::</span> kNuc

    <span class="hl kwa">integer</span>               <span class="hl opt">::</span> i<span class="hl opt">,</span> j
    <span class="hl kwa">character</span><span class="hl opt">(</span>len<span class="hl opt">=</span>length<span class="hl opt">) ::</span> word

    <span class="hl kwa">do</span> i <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">,</span> n
       <span class="hl kwa">do</span> j <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">,</span> length
          <span class="hl kwd">word</span><span class="hl opt">(</span>j<span class="hl opt">:</span>j<span class="hl opt">) =</span> <span class="hl kwd">buf</span><span class="hl opt">(</span>i<span class="hl opt">+</span>j<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">)</span>
       <span class="hl kwa">end do</span>
       <span class="hl kwa">call</span> <span class="hl kwd">add</span><span class="hl opt">(</span>kNuc<span class="hl opt">,</span> word<span class="hl opt">)</span>
    <span class="hl kwa">end do</span>
  <span class="hl kwa">end subroutine</span> read_frame

  <span class="hl kwa">subroutine</span> <span class="hl kwd">add</span><span class="hl opt">(</span>kNuc<span class="hl opt">,</span> word<span class="hl opt">)</span>
    <span class="hl kwa">type</span><span class="hl opt">(</span>table<span class="hl opt">),</span>      <span class="hl kwd">intent</span><span class="hl opt">(</span>inout<span class="hl opt">) ::</span> kNuc
    <span class="hl kwa">character</span><span class="hl opt">(</span>len<span class="hl opt">=*),</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>in<span class="hl opt">)    ::</span> word

    <span class="hl kwa">integer</span> <span class="hl opt">::</span> m

    m <span class="hl opt">=</span> <span class="hl kwd">hash_value</span><span class="hl opt">(</span>word<span class="hl opt">,</span> kNuc<span class="hl opt">%</span>maxWords<span class="hl opt">)</span>
    <span class="hl kwa">do</span>
       <span class="hl kwa">if</span> <span class="hl opt">(</span>kNuc<span class="hl opt">%</span><span class="hl kwd">words</span><span class="hl opt">(</span>m<span class="hl opt">)%</span>count <span class="hl opt">==</span> <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">then</span> 
          kNuc<span class="hl opt">%</span><span class="hl kwd">words</span><span class="hl opt">(</span>m<span class="hl opt">) =</span> <span class="hl kwa">key</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">,</span> word<span class="hl opt">)</span>
          kNuc<span class="hl opt">%</span>nWords <span class="hl opt">=</span> kNuc<span class="hl opt">%</span>nWords <span class="hl opt">+</span> <span class="hl num">1</span>
          <span class="hl kwa">if</span> <span class="hl opt">(</span>kNuc<span class="hl opt">%</span>nWords <span class="hl opt">&gt;</span> kNuc<span class="hl opt">%</span>maxWords<span class="hl opt">/</span><span class="hl num">2</span><span class="hl opt">)</span> <span class="hl kwa">call</span> <span class="hl kwd">resize_table</span><span class="hl opt">(</span>kNuc<span class="hl opt">)</span>
          exit
       <span class="hl kwa">else if</span> <span class="hl opt">(</span><span class="hl kwd">strncmp</span><span class="hl opt">(</span>kNuc<span class="hl opt">%</span><span class="hl kwd">words</span><span class="hl opt">(</span>m<span class="hl opt">)%</span>word<span class="hl opt">,</span>word<span class="hl opt">,</span><span class="hl kwd">int</span><span class="hl opt">(</span><span class="hl kwd">len</span><span class="hl opt">(</span>word<span class="hl opt">),</span>c_size_t<span class="hl opt">)) ==</span> <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">then</span> 
          kNuc<span class="hl opt">%</span><span class="hl kwd">words</span><span class="hl opt">(</span>m<span class="hl opt">)%</span>count <span class="hl opt">=</span> kNuc<span class="hl opt">%</span><span class="hl kwd">words</span><span class="hl opt">(</span>m<span class="hl opt">)%</span>count <span class="hl opt">+</span> <span class="hl num">1</span>
          exit
       <span class="hl kwa">end if</span>
       m <span class="hl opt">=</span> <span class="hl kwd">merge</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">,</span> m<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">,</span> m <span class="hl opt">==</span> kNuc<span class="hl opt">%</span>maxWords<span class="hl opt">)</span>
    <span class="hl kwa">end do</span>
  <span class="hl kwa">end subroutine</span> add

  <span class="hl kwa">subroutine</span> <span class="hl kwd">resize_table</span><span class="hl opt">(</span>kNuc<span class="hl opt">)</span>
    <span class="hl kwa">type</span><span class="hl opt">(</span>table<span class="hl opt">),</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>inout<span class="hl opt">) ::</span> kNuc

    <span class="hl kwa">integer</span>     <span class="hl opt">::</span> i<span class="hl opt">,</span> m
    <span class="hl kwa">type</span><span class="hl opt">(</span>table<span class="hl opt">) ::</span> temp

    temp <span class="hl opt">=</span> <span class="hl kwd">table</span><span class="hl opt">(</span>kNuc<span class="hl opt">%</span>hashBits <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">2</span> <span class="hl opt">*</span> kNuc<span class="hl opt">%</span>maxWords<span class="hl opt">,</span> kNuc<span class="hl opt">%</span>nWords<span class="hl opt">,</span> <span class="hl kwd">null</span><span class="hl opt">())</span>
    <span class="hl kwd">allocate</span><span class="hl opt">(</span>temp<span class="hl opt">%</span><span class="hl kwd">words</span><span class="hl opt">(</span>temp<span class="hl opt">%</span>maxWords<span class="hl opt">))</span>

    <span class="hl kwa">do</span> i <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">,</span> kNuc<span class="hl opt">%</span>maxWords
       <span class="hl kwa">if</span> <span class="hl opt">(</span>kNuc<span class="hl opt">%</span><span class="hl kwd">words</span><span class="hl opt">(</span>i<span class="hl opt">)%</span>count <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">then</span>
          m <span class="hl opt">=</span> <span class="hl kwd">hash_value</span><span class="hl opt">(</span><span class="hl kwd">trim</span><span class="hl opt">(</span>kNuc<span class="hl opt">%</span><span class="hl kwd">words</span><span class="hl opt">(</span>i<span class="hl opt">)%</span>word<span class="hl opt">),</span> temp<span class="hl opt">%</span>maxWords<span class="hl opt">)</span>
          <span class="hl kwa">do</span>
             <span class="hl kwa">if</span> <span class="hl opt">(</span>temp<span class="hl opt">%</span><span class="hl kwd">words</span><span class="hl opt">(</span>m<span class="hl opt">)%</span>count <span class="hl opt">==</span> <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">then</span>
                temp<span class="hl opt">%</span><span class="hl kwd">words</span><span class="hl opt">(</span>m<span class="hl opt">) =</span> kNuc<span class="hl opt">%</span><span class="hl kwd">words</span><span class="hl opt">(</span>i<span class="hl opt">)</span>
                exit
             <span class="hl kwa">end if</span>
             m <span class="hl opt">=</span> <span class="hl kwd">merge</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">,</span> m<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">,</span> m <span class="hl opt">==</span> temp<span class="hl opt">%</span>maxWords<span class="hl opt">)</span>
          <span class="hl kwa">end do</span>
       <span class="hl kwa">end if</span>
    <span class="hl kwa">end do</span>

    kNuc <span class="hl opt">=</span> temp
  <span class="hl kwa">end subroutine</span> resize_table

  pure <span class="hl kwa">function</span> <span class="hl kwd">keys_of_given_len</span><span class="hl opt">(</span>kNuc<span class="hl opt">,</span> length<span class="hl opt">)</span>
    <span class="hl kwa">type</span><span class="hl opt">(</span>table<span class="hl opt">),</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>in<span class="hl opt">) ::</span> kNuc
    <span class="hl kwa">integer</span><span class="hl opt">,</span>     <span class="hl kwd">intent</span><span class="hl opt">(</span>in<span class="hl opt">) ::</span> length
    <span class="hl kwa">type</span><span class="hl opt">(</span><span class="hl kwa">key</span><span class="hl opt">),</span> <span class="hl kwa">dimension</span><span class="hl opt">(</span><span class="hl num">4</span><span class="hl opt">**</span>length<span class="hl opt">) ::</span> keys_of_given_len

    <span class="hl kwa">integer</span> <span class="hl opt">::</span> i<span class="hl opt">,</span> n

    n <span class="hl opt">=</span> <span class="hl num">1</span>
    <span class="hl kwa">do</span> i <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">,</span> kNuc<span class="hl opt">%</span>maxWords
       <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">len_trim</span><span class="hl opt">(</span>kNuc<span class="hl opt">%</span><span class="hl kwd">words</span><span class="hl opt">(</span>i<span class="hl opt">)%</span>word<span class="hl opt">) ==</span> length<span class="hl opt">)</span> <span class="hl kwa">then</span>
          <span class="hl kwd">keys_of_given_len</span><span class="hl opt">(</span>n<span class="hl opt">) =</span> kNuc<span class="hl opt">%</span><span class="hl kwd">words</span><span class="hl opt">(</span>i<span class="hl opt">)</span>
          n <span class="hl opt">=</span> n <span class="hl opt">+</span> <span class="hl num">1</span>
          <span class="hl kwa">if</span> <span class="hl opt">(</span>n <span class="hl opt">&gt;</span> <span class="hl kwd">size</span><span class="hl opt">(</span>keys_of_given_len<span class="hl opt">))</span> exit
       <span class="hl kwa">end if</span>
    <span class="hl kwa">end do</span>
  <span class="hl kwa">end function</span> keys_of_given_len

  <span class="hl kwa">integer function</span> <span class="hl kwd">cnt</span><span class="hl opt">(</span>kNuc<span class="hl opt">,</span> string<span class="hl opt">)</span>
    <span class="hl kwa">type</span><span class="hl opt">(</span>table<span class="hl opt">),</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>in<span class="hl opt">)      ::</span> kNuc
    <span class="hl kwa">character</span><span class="hl opt">(</span>len<span class="hl opt">=*),</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>in<span class="hl opt">) ::</span> string

    <span class="hl kwa">integer</span> <span class="hl opt">::</span> m

    m <span class="hl opt">=</span> <span class="hl kwd">hash_value</span><span class="hl opt">(</span>string<span class="hl opt">,</span> kNuc<span class="hl opt">%</span>maxWords<span class="hl opt">)</span>
    <span class="hl kwa">do</span>
       <span class="hl kwa">if</span> <span class="hl opt">(</span>kNuc<span class="hl opt">%</span><span class="hl kwd">words</span><span class="hl opt">(</span>m<span class="hl opt">)%</span>word <span class="hl opt">==</span> string <span class="hl opt">.</span>or<span class="hl opt">.</span> kNuc<span class="hl opt">%</span><span class="hl kwd">words</span><span class="hl opt">(</span>m<span class="hl opt">)%</span>count <span class="hl opt">==</span> <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">then</span>
          cnt <span class="hl opt">=</span> kNuc<span class="hl opt">%</span><span class="hl kwd">words</span><span class="hl opt">(</span>m<span class="hl opt">)%</span>count
          exit
       <span class="hl kwa">end if</span>
       m <span class="hl opt">=</span> <span class="hl kwd">merge</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">,</span> m<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">,</span> m <span class="hl opt">==</span> kNuc<span class="hl opt">%</span>maxWords<span class="hl opt">)</span>
    <span class="hl kwa">end do</span>
  <span class="hl kwa">end function</span> cnt


  <span class="hl kwa">integer function</span> <span class="hl kwd">hash_value</span><span class="hl opt">(</span><span class="hl kwa">key</span><span class="hl opt">,</span> range<span class="hl opt">)</span>
    <span class="hl kwa">character</span><span class="hl opt">(</span>len<span class="hl opt">=*),</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>in<span class="hl opt">) ::</span> <span class="hl kwa">key</span>
    <span class="hl kwa">integer</span><span class="hl opt">,</span>          <span class="hl kwd">intent</span><span class="hl opt">(</span>in<span class="hl opt">) ::</span> range

    <span class="hl kwa">integer</span> <span class="hl opt">::</span> i<span class="hl opt">,</span>  tmp
    
    tmp <span class="hl opt">=</span> <span class="hl kwd">ieor</span><span class="hl opt">(</span><span class="hl num">2166136261</span> <span class="hl opt">*</span> <span class="hl num">16777619</span><span class="hl opt">,</span> <span class="hl kwd">iachar</span><span class="hl opt">(</span><span class="hl kwa">key</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">:</span><span class="hl num">1</span><span class="hl opt">)))</span>

    <span class="hl kwa">do</span> i<span class="hl opt">=</span><span class="hl num">2</span><span class="hl opt">,</span><span class="hl kwd">len</span><span class="hl opt">(</span><span class="hl kwa">key</span><span class="hl opt">)</span>
       tmp <span class="hl opt">=</span> tmp <span class="hl opt">*</span> <span class="hl num">16777619</span>
       tmp <span class="hl opt">=</span> <span class="hl kwd">ieor</span><span class="hl opt">(</span>tmp<span class="hl opt">,</span><span class="hl kwd">iachar</span><span class="hl opt">(</span><span class="hl kwa">key</span><span class="hl opt">(</span>i<span class="hl opt">:</span>i<span class="hl opt">)))</span>
    <span class="hl kwa">end do</span>
    hash_value <span class="hl opt">=</span> <span class="hl kwd">iand</span><span class="hl opt">(</span>tmp<span class="hl opt">,</span> range <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">) +</span> <span class="hl num">1</span>
        
  <span class="hl kwa">end function</span> hash_value

<span class="hl kwa">end module</span> knuc_mod

<span class="hl kwa">program</span> knucleotide
  <span class="hl kwa">use</span> knuc_mod
  <span class="hl kwa">implicit none</span>

  <span class="hl kwa">integer</span><span class="hl opt">,</span> <span class="hl kwa">parameter</span> <span class="hl opt">::</span> LineLen <span class="hl opt">=</span> <span class="hl num">60</span><span class="hl opt">,</span> InitialTableSize <span class="hl opt">=</span> <span class="hl num">1</span>

  <span class="hl kwa">integer</span> <span class="hl opt">::</span> bufferSize <span class="hl opt">=</span> <span class="hl num">16384</span><span class="hl opt">,</span> istat<span class="hl opt">,</span> n <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">,</span> i
  <span class="hl kwa">logical</span> <span class="hl opt">::</span> atThirdPart <span class="hl opt">= .</span>false<span class="hl opt">.</span>
  
  <span class="hl kwa">type</span><span class="hl opt">(</span>table<span class="hl opt">) ::</span> kn<span class="hl opt">,</span> <span class="hl kwd">kn1</span><span class="hl opt">(</span><span class="hl num">7</span><span class="hl opt">)</span>
  <span class="hl slc">! having just one kn1 should work too (I think!!) --</span>
  <span class="hl slc">!  but for some reason for me it does not (with 12.0.3).</span>
  <span class="hl slc">!  Perhaps bugs in the code are to blame.</span>
  <span class="hl slc">!  Seems to work with 12.1.0, but better safe than sorry.</span>
  
  <span class="hl kwa">character</span><span class="hl opt">(</span>len<span class="hl opt">=</span>LineLen<span class="hl opt">) ::</span> line
  <span class="hl kwa">character</span><span class="hl opt">(</span>len<span class="hl opt">=</span><span class="hl num">1</span><span class="hl opt">) ::</span> <span class="hl kwd">line1</span><span class="hl opt">(</span>LineLen<span class="hl opt">)</span>
  <span class="hl kwa">equivalence</span><span class="hl opt">(</span>line<span class="hl opt">,</span>line1<span class="hl opt">)</span>
  <span class="hl kwa">character</span><span class="hl opt">,</span> <span class="hl kwa">dimension</span><span class="hl opt">(:),</span> allocatable <span class="hl opt">::</span> buffer<span class="hl opt">,</span> tempBuffer

  <span class="hl kwa">character</span><span class="hl opt">,</span> <span class="hl kwa">dimension</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">:</span><span class="hl num">116</span><span class="hl opt">),</span> <span class="hl kwa">parameter</span> <span class="hl opt">:: &amp;</span>
       Codes <span class="hl opt">= (/ (</span><span class="hl str">&quot; &quot;</span><span class="hl opt">,</span>i <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">64</span><span class="hl opt">),</span> <span class="hl str">&quot;A&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot; &quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;C&quot;</span><span class="hl opt">,  &amp;</span>
       <span class="hl opt">(</span><span class="hl str">&quot; &quot;</span><span class="hl opt">,</span> i <span class="hl opt">=</span> <span class="hl num">68</span><span class="hl opt">,</span> <span class="hl num">70</span><span class="hl opt">),</span> <span class="hl str">&quot;G&quot;</span><span class="hl opt">, (</span><span class="hl str">&quot; &quot;</span><span class="hl opt">,</span> i <span class="hl opt">=</span> <span class="hl num">72</span><span class="hl opt">,</span> <span class="hl num">83</span><span class="hl opt">),</span> <span class="hl str">&quot;T&quot;</span><span class="hl opt">, (</span><span class="hl str">&quot; &quot;</span><span class="hl opt">,</span> i <span class="hl opt">=</span> <span class="hl num">85</span><span class="hl opt">,</span> <span class="hl num">96</span><span class="hl opt">),  &amp;</span>
       <span class="hl str">&quot;A&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot; &quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;C&quot;</span><span class="hl opt">, (</span><span class="hl str">&quot; &quot;</span><span class="hl opt">,</span> i <span class="hl opt">=</span> <span class="hl num">100</span><span class="hl opt">,</span> <span class="hl num">102</span><span class="hl opt">),</span> <span class="hl str">&quot;G&quot;</span><span class="hl opt">, (</span><span class="hl str">&quot; &quot;</span><span class="hl opt">,</span> i <span class="hl opt">=</span> <span class="hl num">104</span><span class="hl opt">,</span> <span class="hl num">115</span><span class="hl opt">),</span> <span class="hl str">&quot;T&quot;</span> <span class="hl opt">/)</span>

  <span class="hl kwa">character</span><span class="hl opt">(</span>len<span class="hl opt">=</span><span class="hl num">40</span><span class="hl opt">),</span> <span class="hl kwa">dimension</span><span class="hl opt">(</span><span class="hl num">5</span><span class="hl opt">) ::</span> lines<span class="hl opt">,</span> lines1
  <span class="hl kwa">integer</span> <span class="hl opt">::</span> <span class="hl kwd">lenghts</span><span class="hl opt">(</span><span class="hl num">5</span><span class="hl opt">)</span>
  
  <span class="hl kwd">allocate</span><span class="hl opt">(</span><span class="hl kwd">buffer</span><span class="hl opt">(</span>bufferSize<span class="hl opt">))</span>

  <span class="hl slc">! Read FASTA file line-by-line, extracting sequence three, and converting to</span>
  <span class="hl slc">! uppercase.</span>
  <span class="hl slc">! This is very slow and can certainly be optimized a lot further.</span>
  <span class="hl kwa">do</span>
     <span class="hl kwa">read</span><span class="hl opt">(*,</span> <span class="hl str">&quot;(a)&quot;</span><span class="hl opt">,</span> iostat<span class="hl opt">=</span>istat<span class="hl opt">)</span> line
     <span class="hl kwa">if</span> <span class="hl opt">(</span>istat <span class="hl opt">/=</span> <span class="hl num">0</span><span class="hl opt">)</span> exit
     <span class="hl kwa">if</span> <span class="hl opt">(.</span>not<span class="hl opt">.</span> atThirdPart<span class="hl opt">)</span> <span class="hl kwa">then</span>
        atThirdPart <span class="hl opt">=</span> <span class="hl kwd">line</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">:</span><span class="hl num">3</span><span class="hl opt">) ==</span> <span class="hl str">&quot;&gt;TH&quot;</span>
     <span class="hl kwa">else</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>n<span class="hl opt">+</span>LineLen <span class="hl opt">&gt;</span> bufferSize<span class="hl opt">)</span> <span class="hl kwa">then</span>
           <span class="hl kwd">allocate</span><span class="hl opt">(</span><span class="hl kwd">tempBuffer</span><span class="hl opt">(</span><span class="hl num">2</span><span class="hl opt">*</span>bufferSize<span class="hl opt">))</span>
           <span class="hl kwd">tempBuffer</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">:</span>bufferSize<span class="hl opt">) =</span> buffer
           <span class="hl kwd">tempBuffer</span><span class="hl opt">(</span>bufferSize<span class="hl opt">+</span><span class="hl num">1</span> <span class="hl opt">: ) =</span> <span class="hl str">&quot; &quot;</span>
           <span class="hl kwa">call</span> <span class="hl kwd">move_alloc</span><span class="hl opt">(</span>tempBuffer<span class="hl opt">,</span> buffer<span class="hl opt">)</span>
           bufferSize <span class="hl opt">=</span> <span class="hl num">2</span><span class="hl opt">*</span>bufferSize
        <span class="hl kwa">end if</span>
        <span class="hl kwd">buffer</span><span class="hl opt">(</span>n<span class="hl opt">+</span><span class="hl num">1</span> <span class="hl opt">:</span> n<span class="hl opt">+</span>LineLen<span class="hl opt">) =</span> <span class="hl kwd">Codes</span><span class="hl opt">(</span><span class="hl kwd">iachar</span><span class="hl opt">(</span>line1<span class="hl opt">))</span>
        n <span class="hl opt">=</span> n <span class="hl opt">+</span> LineLen
     <span class="hl kwa">end if</span>
  <span class="hl kwa">end do</span>
  n <span class="hl opt">=</span> <span class="hl kwd">minloc</span><span class="hl opt">(</span><span class="hl kwd">iachar</span><span class="hl opt">(</span>buffer<span class="hl opt">),</span><span class="hl num">1</span><span class="hl opt">) -</span> <span class="hl num">1</span>


  <span class="hl kwa">call</span> <span class="hl kwd">init_table</span><span class="hl opt">(</span>kn<span class="hl opt">,</span> InitialTableSize<span class="hl opt">)</span>

  <span class="hl kwd">lines</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">) =</span> <span class="hl str">&quot;GGT&quot;</span>
  <span class="hl kwd">lines</span><span class="hl opt">(</span><span class="hl num">2</span><span class="hl opt">) =</span> <span class="hl str">&quot;GGTA&quot;</span>
  <span class="hl kwd">lines</span><span class="hl opt">(</span><span class="hl num">3</span><span class="hl opt">) =</span> <span class="hl str">&quot;GGTATT&quot;</span>
  <span class="hl kwd">lines</span><span class="hl opt">(</span><span class="hl num">4</span><span class="hl opt">) =</span> <span class="hl str">&quot;GGTATTTTAATT&quot;</span>
  <span class="hl kwd">lines</span><span class="hl opt">(</span><span class="hl num">5</span><span class="hl opt">) =</span> <span class="hl str">&quot;GGTATTTTAATTTATAGT&quot;</span>
  lenghts <span class="hl opt">= [</span><span class="hl num">3</span><span class="hl opt">,</span> <span class="hl num">4</span><span class="hl opt">,</span> <span class="hl num">6</span><span class="hl opt">,</span> <span class="hl num">12</span><span class="hl opt">,</span> <span class="hl num">18</span><span class="hl opt">]</span>

  <span class="hl slc">!$omp  parallel default(firstprivate) &amp;</span>
  <span class="hl slc">!$omp&amp; shared(lines, lines1, kn, lenghts)</span>

  <span class="hl slc">!$omp do schedule(dynamic,1)  </span>
  <span class="hl kwa">do</span> i<span class="hl opt">=</span><span class="hl num">5</span><span class="hl opt">,</span><span class="hl num">1</span><span class="hl opt">,-</span><span class="hl num">1</span>
     <span class="hl kwd">kn1</span><span class="hl opt">(</span>i<span class="hl opt">) =</span> kn  <span class="hl slc">! not sure if an array is really needed here...</span>
     <span class="hl kwa">call</span> <span class="hl kwd">write_count</span><span class="hl opt">(</span><span class="hl kwd">kn1</span><span class="hl opt">(</span>i<span class="hl opt">),</span> <span class="hl kwd">lines</span><span class="hl opt">(</span>i<span class="hl opt">)(</span><span class="hl num">1</span><span class="hl opt">:</span><span class="hl kwd">lenghts</span><span class="hl opt">(</span>i<span class="hl opt">)),</span> <span class="hl kwd">lines1</span><span class="hl opt">(</span>i<span class="hl opt">))</span>
  <span class="hl kwa">end do</span>
  <span class="hl slc">!$omp end do nowait</span>

  <span class="hl slc">!$omp do schedule(dynamic,1)</span>
  <span class="hl kwa">do</span> i<span class="hl opt">=</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">2</span>
     <span class="hl kwd">kn1</span><span class="hl opt">(</span>i<span class="hl opt">+</span><span class="hl num">5</span><span class="hl opt">) =</span> kn
     <span class="hl kwa">call</span> <span class="hl kwd">write_frequencies</span><span class="hl opt">(</span><span class="hl kwd">kn1</span><span class="hl opt">(</span>i<span class="hl opt">+</span><span class="hl num">5</span><span class="hl opt">),</span>i<span class="hl opt">)</span>
  <span class="hl kwa">end do</span>
  <span class="hl slc">!$omp end do nowait</span>

  <span class="hl slc">!$omp end parallel</span>

  <span class="hl kwa">do</span> i<span class="hl opt">=</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">5</span>
     <span class="hl kwa">write</span><span class="hl opt">(*,</span><span class="hl str">'(a)'</span><span class="hl opt">)</span> <span class="hl kwd">trim</span><span class="hl opt">(</span><span class="hl kwd">adjustl</span><span class="hl opt">(</span><span class="hl kwd">lines1</span><span class="hl opt">(</span>i<span class="hl opt">)))</span>
  <span class="hl kwa">end do</span>

<span class="hl kwa">contains</span>

  <span class="hl kwa">subroutine</span> <span class="hl kwd">write_frequencies</span><span class="hl opt">(</span>kn<span class="hl opt">,</span> length<span class="hl opt">)</span>
    <span class="hl kwa">integer</span><span class="hl opt">,</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>in<span class="hl opt">) ::</span> length
    <span class="hl kwa">type</span><span class="hl opt">(</span>table<span class="hl opt">) ::</span> kn

    <span class="hl kwa">integer</span> <span class="hl opt">::</span> numNuc<span class="hl opt">,</span> i<span class="hl opt">,</span> j
    <span class="hl kwa">type</span><span class="hl opt">(</span><span class="hl kwa">key</span><span class="hl opt">),</span> <span class="hl kwa">dimension</span><span class="hl opt">(</span><span class="hl num">4</span><span class="hl opt">**</span>length<span class="hl opt">) ::</span> nucleotides
    <span class="hl kwa">type</span><span class="hl opt">(</span><span class="hl kwa">key</span><span class="hl opt">) ::</span> temp

    numNuc <span class="hl opt">=</span> n <span class="hl opt">-</span> length <span class="hl opt">+</span> <span class="hl num">1</span>

    <span class="hl kwa">call</span> <span class="hl kwd">read_frame</span><span class="hl opt">(</span>buffer<span class="hl opt">,</span> numNuc<span class="hl opt">,</span> length<span class="hl opt">,</span> kn<span class="hl opt">)</span>

    nucleotides <span class="hl opt">=</span> <span class="hl kwd">keys_of_given_len</span><span class="hl opt">(</span>kn<span class="hl opt">,</span> length<span class="hl opt">)</span>

    <span class="hl slc">! Insertion sort</span>
    <span class="hl kwa">do</span> i <span class="hl opt">=</span> <span class="hl num">2</span><span class="hl opt">,</span> <span class="hl kwd">size</span><span class="hl opt">(</span>nucleotides<span class="hl opt">)</span>
       temp <span class="hl opt">=</span> <span class="hl kwd">nucleotides</span><span class="hl opt">(</span>i<span class="hl opt">)</span>
       <span class="hl kwa">do</span> j <span class="hl opt">=</span> i<span class="hl opt">,</span> <span class="hl num">2</span><span class="hl opt">, -</span><span class="hl num">1</span>
          <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">nucleotides</span><span class="hl opt">(</span>j<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">)%</span>count <span class="hl opt">&gt;</span> temp<span class="hl opt">%</span>count <span class="hl opt">.</span>or<span class="hl opt">.  &amp;</span>
               <span class="hl kwd">nucleotides</span><span class="hl opt">(</span>j<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">)%</span>count <span class="hl opt">==</span> temp<span class="hl opt">%</span>count <span class="hl opt">.</span>and<span class="hl opt">.  &amp;</span>
               <span class="hl kwd">nucleotides</span><span class="hl opt">(</span>j<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">)%</span>word <span class="hl opt">&lt;</span> temp<span class="hl opt">%</span>word<span class="hl opt">)</span> exit
          <span class="hl kwd">nucleotides</span><span class="hl opt">(</span>j<span class="hl opt">) =</span> <span class="hl kwd">nucleotides</span><span class="hl opt">(</span>j<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">)</span>
       <span class="hl kwa">end do</span>
       <span class="hl kwd">nucleotides</span><span class="hl opt">(</span>j<span class="hl opt">) =</span> temp
    <span class="hl kwa">end do</span>

    <span class="hl kwa">do</span> i <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">,</span> <span class="hl kwd">size</span><span class="hl opt">(</span>nucleotides<span class="hl opt">)</span>
       <span class="hl kwa">write</span><span class="hl opt">(*,</span> <span class="hl str">&quot;(a2,f6.3)&quot;</span><span class="hl opt">)</span> <span class="hl kwd">nucleotides</span><span class="hl opt">(</span>i<span class="hl opt">)%</span><span class="hl kwd">word</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">:</span><span class="hl num">2</span><span class="hl opt">),  &amp;</span>
            <span class="hl num">100</span><span class="hl opt">. *</span> <span class="hl kwd">nucleotides</span><span class="hl opt">(</span>i<span class="hl opt">)%</span>count <span class="hl opt">/</span> <span class="hl kwa">real</span><span class="hl opt">(</span>numNuc<span class="hl opt">)</span>
    <span class="hl kwa">end do</span>
    <span class="hl kwa">write</span><span class="hl opt">(*,</span> <span class="hl str">&quot;(a)&quot;</span><span class="hl opt">)</span> <span class="hl str">&quot;&quot;</span>
  <span class="hl kwa">end subroutine</span> write_frequencies

  <span class="hl kwa">subroutine</span> <span class="hl kwd">write_count</span><span class="hl opt">(</span>kn<span class="hl opt">,</span> string<span class="hl opt">,</span> string1<span class="hl opt">)</span>
    <span class="hl kwa">character</span><span class="hl opt">(</span>len<span class="hl opt">=*),</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>in<span class="hl opt">) ::</span> string
    <span class="hl kwa">character</span><span class="hl opt">(</span>len<span class="hl opt">=</span><span class="hl num">40</span><span class="hl opt">),</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>out<span class="hl opt">) ::</span> string1
    <span class="hl kwa">type</span><span class="hl opt">(</span>table<span class="hl opt">) ::</span> kn

    <span class="hl kwa">character</span><span class="hl opt">,</span> <span class="hl kwa">parameter</span> <span class="hl opt">::</span> tab <span class="hl opt">=</span> <span class="hl kwd">achar</span><span class="hl opt">(</span><span class="hl num">9</span><span class="hl opt">)</span>
    <span class="hl kwa">integer</span> <span class="hl opt">::</span> length<span class="hl opt">,</span> numNuc

    length <span class="hl opt">=</span> <span class="hl kwd">len</span><span class="hl opt">(</span>string<span class="hl opt">)</span>
    numNuc <span class="hl opt">=</span> n <span class="hl opt">-</span> length <span class="hl opt">+</span> <span class="hl num">1</span>

    <span class="hl kwa">call</span> <span class="hl kwd">read_frame</span><span class="hl opt">(</span>buffer<span class="hl opt">,</span> numNuc<span class="hl opt">,</span> length<span class="hl opt">,</span> kn<span class="hl opt">)</span>

    <span class="hl kwa">write</span><span class="hl opt">(</span>string1<span class="hl opt">,</span> <span class="hl str">&quot;(i0,a)&quot;</span><span class="hl opt">)</span> <span class="hl kwd">cnt</span><span class="hl opt">(</span>kn<span class="hl opt">,</span> string<span class="hl opt">),</span> tab<span class="hl opt">//</span>string
  <span class="hl kwa">end subroutine</span> write_count

<span class="hl kwa">end program</span> knucleotide
