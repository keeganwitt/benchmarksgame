<span class="hl com">(* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * contributed by Don Syme</span>
<span class="hl com"> * based on C# contribution by Isaac Gouy, Antti Lankila, A.Nahr, The Anh Tran</span>
<span class="hl com"> * Uses native pointer access to one big pinned blob, plus simple task runner</span>
<span class="hl com"> *)</span>

<span class="hl ppc">#nowarn</span> <span class="hl pps">&quot;9&quot;</span><span class="hl ppc"></span>

<span class="hl kwa">open</span> <span class="hl kwd">System</span>
<span class="hl kwa">open</span> <span class="hl kwd">System</span><span class="hl opt">.</span><span class="hl kwd">IO</span>
<span class="hl kwa">open</span> <span class="hl kwd">System</span><span class="hl opt">.</span><span class="hl kwd">Collections</span><span class="hl opt">.</span><span class="hl kwd">Generic</span>
<span class="hl kwa">open</span> <span class="hl kwd">System</span><span class="hl opt">.</span><span class="hl kwd">Text</span>
<span class="hl kwa">open</span> <span class="hl kwd">System</span><span class="hl opt">.</span><span class="hl kwd">Threading</span>
<span class="hl kwa">open</span> <span class="hl kwd">System</span><span class="hl opt">.</span><span class="hl kwd">Runtime</span><span class="hl opt">.</span><span class="hl kwd">InteropServices</span>
<span class="hl kwa">open</span> <span class="hl kwd">Microsoft</span><span class="hl opt">.</span><span class="hl kwd">FSharp</span><span class="hl opt">.</span><span class="hl kwd">NativeInterop</span>

<span class="hl kwa">let</span> toBytes <span class="hl opt">(</span>s<span class="hl opt">:</span> <span class="hl kwb">string</span><span class="hl opt">) =</span> s<span class="hl opt">.</span><span class="hl kwd">ToCharArray</span><span class="hl opt">()</span> |<span class="hl opt">&gt;</span> <span class="hl kwd">Array</span><span class="hl opt">.</span>map byte
<span class="hl kwa">let</span> toString <span class="hl opt">(</span>s<span class="hl opt">:</span> byte <span class="hl opt">[]) =</span> <span class="hl kwd">String</span><span class="hl opt">(</span>s |<span class="hl opt">&gt;</span> <span class="hl kwd">Array</span><span class="hl opt">.</span>map char<span class="hl opt">)</span>
<span class="hl kwa">let</span> prefixes <span class="hl opt">= [</span>| <span class="hl str">&quot;ggt&quot;</span><span class="hl opt">;</span> <span class="hl str">&quot;ggta&quot;</span><span class="hl opt">;</span> <span class="hl str">&quot;ggtatt&quot;</span><span class="hl opt">;</span> <span class="hl str">&quot;ggtattttaatt&quot;</span><span class="hl opt">;</span> <span class="hl str">&quot;ggtattttaatttatagt&quot;</span> |<span class="hl opt">]</span>

<span class="hl kwa">let</span> prefixBytes <span class="hl opt">=</span> 
    <span class="hl opt">[</span>| <span class="hl kwa">for</span> p <span class="hl kwa">in</span> prefixes <span class="hl opt">-&gt;</span> toBytes p |<span class="hl opt">]</span>

<span class="hl kwa">let</span> prefixLengths <span class="hl opt">=</span> 
    <span class="hl opt">[</span>| <span class="hl kwa">for</span> p <span class="hl kwa">in</span> prefixBytes <span class="hl opt">-&gt;</span> p<span class="hl opt">.</span><span class="hl kwd">Length</span> |<span class="hl opt">]</span>

<span class="hl kwa">let</span> prefixOffsets <span class="hl opt">=</span> <span class="hl kwd">Array</span><span class="hl opt">.</span>scan <span class="hl opt">(+)</span> <span class="hl num">0</span> prefixLengths
<span class="hl kwa">let</span> dnaStart <span class="hl opt">=</span> prefixOffsets<span class="hl opt">.[</span>prefixLengths<span class="hl opt">.</span><span class="hl kwd">Length</span><span class="hl opt">]</span>

<span class="hl kwa">let</span> createDNA<span class="hl opt">() =</span> 
    <span class="hl slc">//let input = File.OpenText(&quot;knucleotide-input-2500000.txt&quot;)</span>
    <span class="hl kwa">let</span> input <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">StreamReader</span><span class="hl opt">(</span><span class="hl kwd">Console</span><span class="hl opt">.</span><span class="hl kwd">OpenStandardInput</span><span class="hl opt">())</span>
    
    <span class="hl kwa">let</span> text <span class="hl opt">=</span> 
        seq <span class="hl opt">{</span> 
            <span class="hl kwa">while true do</span>
                yield input<span class="hl opt">.</span><span class="hl kwd">ReadLine</span><span class="hl opt">()</span>
        <span class="hl opt">}</span>
        |<span class="hl opt">&gt;</span> <span class="hl kwd">Seq</span><span class="hl opt">.</span>takeWhile <span class="hl opt">(</span><span class="hl kwa">fun</span> x <span class="hl opt">-&gt;</span> x <span class="hl opt">&lt;&gt;</span> <span class="hl kwa">null</span><span class="hl opt">)</span>
        |<span class="hl opt">&gt;</span> <span class="hl kwd">Seq</span><span class="hl opt">.</span>skipWhile <span class="hl opt">(</span><span class="hl kwa">fun</span> x <span class="hl opt">-&gt;</span> not <span class="hl opt">(</span>x<span class="hl opt">.</span><span class="hl kwd">StartsWith</span><span class="hl opt">(</span><span class="hl str">&quot;&gt;THREE&quot;</span><span class="hl opt">)))</span>
        |<span class="hl opt">&gt;</span> <span class="hl kwd">Seq</span><span class="hl opt">.</span>skip <span class="hl num">1</span>
        |<span class="hl opt">&gt;</span> <span class="hl kwd">String</span><span class="hl opt">.</span>concat <span class="hl str">&quot;&quot;</span>
    
    <span class="hl slc">// convert the text to a pinned array of bytes</span>
    <span class="hl kwa">let</span> bytes <span class="hl opt">=</span> 
        text
        |<span class="hl opt">&gt;</span> toBytes
        |<span class="hl opt">&gt;</span> <span class="hl kwd">Array</span><span class="hl opt">.</span>append <span class="hl opt">(</span><span class="hl kwd">Array</span><span class="hl opt">.</span>concat prefixBytes<span class="hl opt">)</span>
    
    <span class="hl kwa">let</span> h <span class="hl opt">=</span> <span class="hl kwd">GCHandle</span><span class="hl opt">.</span><span class="hl kwd">Alloc</span><span class="hl opt">(</span>bytes<span class="hl opt">,</span> <span class="hl kwd">GCHandleType</span><span class="hl opt">.</span><span class="hl kwd">Pinned</span><span class="hl opt">)</span>
    <span class="hl kwa">let</span> addr <span class="hl opt">=</span> h<span class="hl opt">.</span><span class="hl kwd">AddrOfPinnedObject</span><span class="hl opt">()</span> |<span class="hl opt">&gt;</span> <span class="hl kwd">NativePtr</span><span class="hl opt">.</span>ofNativeInt
    addr<span class="hl opt">,</span> bytes<span class="hl opt">.</span><span class="hl kwd">Length</span>

<span class="hl kwa">let</span> dna<span class="hl opt">,</span> dnaLength <span class="hl opt">=</span> createDNA<span class="hl opt">()</span>
<span class="hl kwa">let inline</span> readDNA i <span class="hl opt">=</span> <span class="hl kwd">NativePtr</span><span class="hl opt">.</span>get dna i

<span class="hl kwa">let inline</span> readDNABytes s n <span class="hl opt">=</span> 
    <span class="hl kwa">let</span> res <span class="hl opt">=</span> <span class="hl kwd">Array</span><span class="hl opt">.</span>zeroCreate n
    <span class="hl kwa">for</span> i <span class="hl kwa">in</span> <span class="hl num">0</span><span class="hl opt">..</span>n <span class="hl opt">-</span> <span class="hl num">1</span> <span class="hl kwa">do</span>
        res<span class="hl opt">.[</span>i<span class="hl opt">] &lt;-</span> <span class="hl kwd">NativePtr</span><span class="hl opt">.</span>get dna <span class="hl opt">(</span>s <span class="hl opt">+</span> i<span class="hl opt">)</span>
    res

<span class="hl kwa">let</span> keyHash <span class="hl opt">(</span>k<span class="hl opt">,</span> n<span class="hl opt">) =</span> 
    <span class="hl kwa">let mutable</span> hash <span class="hl opt">=</span> <span class="hl num">0</span>
    <span class="hl kwa">for</span> i <span class="hl kwa">in</span> <span class="hl num">0</span><span class="hl opt">..</span>n <span class="hl opt">-</span> <span class="hl num">1</span> <span class="hl kwa">do</span>
        hash <span class="hl opt">&lt;-</span> hash <span class="hl opt">*</span> <span class="hl num">31</span> <span class="hl opt">+</span> <span class="hl kwb">int</span> <span class="hl opt">(</span>readDNA <span class="hl opt">(</span>k <span class="hl opt">+</span> i<span class="hl opt">))</span>
    hash

<span class="hl kwa">let</span> keyText <span class="hl opt">(</span>k<span class="hl opt">,</span> n<span class="hl opt">) =</span> toString<span class="hl opt">(</span>readDNABytes k n<span class="hl opt">).</span><span class="hl kwd">ToUpper</span><span class="hl opt">()</span>

<span class="hl kwa">type</span> <span class="hl kwd">Value</span> <span class="hl opt">=</span> 
    <span class="hl opt">{</span> <span class="hl kwa">mutable</span> value<span class="hl opt">:</span> <span class="hl kwb">int</span>
      key<span class="hl opt">:</span> <span class="hl kwb">int</span> <span class="hl opt">*</span> <span class="hl kwb">int</span> <span class="hl opt">}</span>

<span class="hl kwa">let</span> generateFrequencies <span class="hl opt">(</span>frameSize<span class="hl opt">) =</span> 
    <span class="hl kwa">let</span> freq <span class="hl opt">=</span> <span class="hl kwd">Dictionary</span><span class="hl opt">&lt;</span><span class="hl kwb">int</span><span class="hl opt">,</span> <span class="hl kwd">Value</span><span class="hl opt">&gt;()</span>
    <span class="hl kwa">let mutable</span> v <span class="hl opt">=</span> <span class="hl kwd">Unchecked</span><span class="hl opt">.</span>defaultof<span class="hl opt">&lt;</span><span class="hl kwd">Value</span><span class="hl opt">&gt;</span>
    <span class="hl kwa">for</span> i <span class="hl kwa">in</span> dnaStart<span class="hl opt">..</span>dnaLength <span class="hl opt">-</span> frameSize <span class="hl kwa">do</span>
        <span class="hl kwa">let</span> h <span class="hl opt">=</span> keyHash <span class="hl opt">(</span>i<span class="hl opt">,</span> frameSize<span class="hl opt">)</span>
        <span class="hl kwa">if</span> freq<span class="hl opt">.</span><span class="hl kwd">TryGetValue</span><span class="hl opt">(</span>h<span class="hl opt">, &amp;</span>v<span class="hl opt">)</span> <span class="hl kwa">then</span> v<span class="hl opt">.</span>value <span class="hl opt">&lt;-</span> v<span class="hl opt">.</span>value <span class="hl opt">+</span> <span class="hl num">1</span>
        <span class="hl kwa">else</span> freq<span class="hl opt">.</span><span class="hl kwd">Add</span><span class="hl opt">(</span>h<span class="hl opt">, {</span> value <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span> key <span class="hl opt">= (</span>i<span class="hl opt">,</span> frameSize<span class="hl opt">) })</span>
    freq

<span class="hl kwa">let</span> writeCount <span class="hl opt">(</span>n<span class="hl opt">:</span> <span class="hl kwb">int</span><span class="hl opt">) =</span> 
    <span class="hl kwa">let</span> freq <span class="hl opt">=</span> generateFrequencies <span class="hl opt">(</span>prefixLengths<span class="hl opt">.[</span>n<span class="hl opt">])</span>
    <span class="hl kwa">let</span> hash <span class="hl opt">=</span> keyHash <span class="hl opt">(</span>prefixOffsets<span class="hl opt">.[</span>n<span class="hl opt">],</span> prefixLengths<span class="hl opt">.[</span>n<span class="hl opt">])</span>
    
    <span class="hl kwa">let</span> count <span class="hl opt">=</span> 
        <span class="hl kwa">if</span> freq<span class="hl opt">.</span><span class="hl kwd">ContainsKey</span><span class="hl opt">(</span>hash<span class="hl opt">)</span> <span class="hl kwa">then</span> freq<span class="hl opt">.[</span>hash<span class="hl opt">].</span>value
        <span class="hl kwa">else</span> <span class="hl num">0</span>
    <span class="hl kwd">String</span><span class="hl opt">.</span><span class="hl kwd">Format</span><span class="hl opt">(</span><span class="hl str">&quot;{0}</span><span class="hl esc">\t</span><span class="hl str">{1}&quot;</span><span class="hl opt">,</span> count<span class="hl opt">,</span> prefixes<span class="hl opt">.[</span>n<span class="hl opt">].</span><span class="hl kwd">ToUpper</span><span class="hl opt">())</span>

<span class="hl kwa">type</span> <span class="hl kwd">Pair</span> <span class="hl opt">=</span> <span class="hl kwd">KeyValuePair</span><span class="hl opt">&lt;</span><span class="hl kwb">int</span><span class="hl opt">,</span> <span class="hl kwd">Value</span><span class="hl opt">&gt;</span>

<span class="hl kwa">let</span> writeFrequencies <span class="hl opt">(</span>nucleotideLength<span class="hl opt">) =</span> 
    <span class="hl kwa">let</span> freq <span class="hl opt">=</span> generateFrequencies <span class="hl opt">(</span>nucleotideLength<span class="hl opt">)</span>
    <span class="hl kwa">let</span> items <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">ResizeArray</span><span class="hl opt">&lt;</span><span class="hl kwd">Pair</span><span class="hl opt">&gt;(</span>freq<span class="hl opt">)</span>
    items<span class="hl opt">.</span><span class="hl kwd">Sort</span><span class="hl opt">(</span><span class="hl kwa">fun</span> <span class="hl opt">(</span>p1<span class="hl opt">:</span> <span class="hl kwd">Pair</span><span class="hl opt">) (</span>p2<span class="hl opt">:</span> <span class="hl kwd">Pair</span><span class="hl opt">) -&gt;</span> 
        <span class="hl kwa">let</span> c <span class="hl opt">=</span> p2<span class="hl opt">.</span><span class="hl kwd">Value</span><span class="hl opt">.</span>value <span class="hl opt">-</span> p1<span class="hl opt">.</span><span class="hl kwd">Value</span><span class="hl opt">.</span>value
        <span class="hl kwa">if</span> c <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl kwa">then</span> keyText<span class="hl opt">(</span>p1<span class="hl opt">.</span><span class="hl kwd">Value</span><span class="hl opt">.</span>key<span class="hl opt">).</span><span class="hl kwd">CompareTo</span><span class="hl opt">(</span>keyText<span class="hl opt">(</span>p2<span class="hl opt">.</span><span class="hl kwd">Value</span><span class="hl opt">.</span>key<span class="hl opt">))</span>
        <span class="hl kwa">else</span> c<span class="hl opt">)</span>
    <span class="hl kwa">let</span> buf <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">StringBuilder</span><span class="hl opt">()</span>
    <span class="hl kwa">let</span> sum <span class="hl opt">=</span> dnaLength <span class="hl opt">-</span> dnaStart <span class="hl opt">-</span> nucleotideLength <span class="hl opt">+</span> <span class="hl num">1</span>
    <span class="hl kwa">for</span> element <span class="hl kwa">in</span> items <span class="hl kwa">do</span>
        <span class="hl kwa">let</span> percent <span class="hl opt">=</span> double element<span class="hl opt">.</span><span class="hl kwd">Value</span><span class="hl opt">.</span>value <span class="hl opt">*</span> <span class="hl num">100.0</span> <span class="hl opt">/</span> double sum
        buf<span class="hl opt">.</span><span class="hl kwd">AppendFormat</span><span class="hl opt">(</span><span class="hl str">&quot;{0} {1:f3}</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> keyText element<span class="hl opt">.</span><span class="hl kwd">Value</span><span class="hl opt">.</span>key<span class="hl opt">,</span> percent<span class="hl opt">)</span> |<span class="hl opt">&gt;</span> ignore
    buf<span class="hl opt">.</span><span class="hl kwd">ToString</span><span class="hl opt">()</span>

<span class="hl kwa">let</span> runTasks <span class="hl opt">(</span>tasks<span class="hl opt">: (</span><span class="hl kwb">unit</span> <span class="hl opt">-&gt;</span> <span class="hl str">'T) []) = </span>
<span class="hl str">    let taskCount = ref tasks.Length</span>
<span class="hl str">    let results = Array.zeroCreate tasks.Length</span>
<span class="hl str">    </span>
<span class="hl str">    let rec worker() = </span>
<span class="hl str">        let j = Interlocked.Decrement(&amp;taskCount.contents)</span>
<span class="hl str">        if j &gt;= 0 then </span>
<span class="hl str">            results.[j] &lt;- tasks.[j]()</span>
<span class="hl str">            worker()</span>
<span class="hl str">    </span>
<span class="hl str">    let threads = </span>
<span class="hl str">        Array.init Environment.ProcessorCount (fun i -&gt; </span>
<span class="hl str">            let t = new Thread(worker)</span>
<span class="hl str">            t.Start()</span>
<span class="hl str">            t)</span>
<span class="hl str">    </span>
<span class="hl str">    for t in threads do</span>
<span class="hl str">        t.Join()</span>
<span class="hl str">    results</span>
<span class="hl str"></span>
<span class="hl str">let results = </span>
<span class="hl str">    runTasks [| yield (fun () -&gt; writeFrequencies 1)</span>
<span class="hl str">                yield (fun () -&gt; writeFrequencies 2)</span>
<span class="hl str">                for i in 0..prefixes.Length - 1 do</span>
<span class="hl str">                    yield (fun () -&gt; writeCount i) |]</span>
<span class="hl str"></span>
<span class="hl str">//let endTime = System.DateTime.Now.Ticks</span>
<span class="hl str">for s in results do</span>
<span class="hl str">    Console.Out.WriteLine(s)</span>
