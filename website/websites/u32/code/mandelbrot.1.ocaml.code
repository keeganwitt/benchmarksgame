<span class="hl com">(*</span>
<span class="hl com"> * The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * Contributed by Paolo Ribeca</span>
<span class="hl com"> *</span>
<span class="hl com"> * (Very loosely based on previous version Ocaml #3,</span>
<span class="hl com"> *  which had been contributed by</span>
<span class="hl com"> *   Christophe TROESTLER</span>
<span class="hl com"> *  and enhanced by</span>
<span class="hl com"> *   Christian Szegedy and Yaron Minsky)</span>
<span class="hl com"> *)</span>

<span class="hl kwa">let</span> niter <span class="hl opt">=</span> <span class="hl num">50</span>
<span class="hl kwa">let</span> limit <span class="hl opt">=</span> <span class="hl num">4</span><span class="hl opt">.</span>
<span class="hl kwa">let</span> workers <span class="hl opt">=</span> <span class="hl num">64</span>

<span class="hl kwa">let</span> worker w h_lo h_hi <span class="hl opt">=</span>
  <span class="hl kwa">let</span> buf <span class="hl opt">=</span>
    <span class="hl kwc">String</span><span class="hl opt">.</span>create <span class="hl opt">((</span>w <span class="hl opt">/</span> <span class="hl num">8</span> <span class="hl opt">+ (</span><span class="hl kwa">if</span> w <span class="hl kwa">mod</span> <span class="hl num">8</span> <span class="hl opt">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span> <span class="hl num">1</span> <span class="hl kwa">else</span> <span class="hl num">0</span><span class="hl opt">)) * (</span>h_hi <span class="hl opt">-</span> h_lo<span class="hl opt">))</span>
  <span class="hl kwa">and</span> ptr <span class="hl opt">=</span> <span class="hl kwb">ref</span> <span class="hl num">0</span> <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> fw <span class="hl opt">=</span> <span class="hl kwb">float</span> w <span class="hl opt">/.</span> <span class="hl num">2</span><span class="hl opt">.</span> <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> fh <span class="hl opt">=</span> fw <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> red_w <span class="hl opt">=</span> w <span class="hl opt">-</span> <span class="hl num">1</span> <span class="hl kwa">and</span> red_h_hi <span class="hl opt">=</span> h_hi <span class="hl opt">-</span> <span class="hl num">1</span> <span class="hl kwa">and</span> byte <span class="hl opt">=</span> <span class="hl kwb">ref</span> <span class="hl num">0</span> <span class="hl kwa">in</span>
  <span class="hl kwa">for</span> y <span class="hl opt">=</span> h_lo <span class="hl kwa">to</span> red_h_hi <span class="hl kwa">do</span>
    <span class="hl kwa">let</span> ci <span class="hl opt">=</span> <span class="hl kwb">float</span> y <span class="hl opt">/.</span> fh <span class="hl opt">-.</span> <span class="hl num">1</span><span class="hl opt">.</span> <span class="hl kwa">in</span>
    <span class="hl kwa">for</span> x <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> red_w <span class="hl kwa">do</span>
      <span class="hl kwa">let</span> cr <span class="hl opt">=</span> <span class="hl kwb">float</span> x <span class="hl opt">/.</span> fw <span class="hl opt">-.</span> <span class="hl num">1.5</span>
      <span class="hl kwa">and</span> zr <span class="hl opt">=</span> <span class="hl kwb">ref</span> <span class="hl num">0</span><span class="hl opt">.</span> <span class="hl kwa">and</span> zi <span class="hl opt">=</span> <span class="hl kwb">ref</span> <span class="hl num">0</span><span class="hl opt">.</span> <span class="hl kwa">and</span> trmti <span class="hl opt">=</span> <span class="hl kwb">ref</span> <span class="hl num">0</span><span class="hl opt">.</span> <span class="hl kwa">and</span> n <span class="hl opt">=</span> <span class="hl kwb">ref</span> <span class="hl num">0</span> <span class="hl kwa">in</span>
      <span class="hl kwa">begin try</span>
	<span class="hl kwa">while true do</span>
	  zi <span class="hl opt">:=</span> <span class="hl num">2</span><span class="hl opt">. *. !</span>zr <span class="hl opt">*. !</span>zi <span class="hl opt">+.</span> ci<span class="hl opt">;</span>
	  zr <span class="hl opt">:= !</span>trmti <span class="hl opt">+.</span> cr<span class="hl opt">;</span>
	  <span class="hl kwa">let</span> tr <span class="hl opt">= !</span>zr <span class="hl opt">*. !</span>zr <span class="hl kwa">and</span> ti <span class="hl opt">= !</span>zi <span class="hl opt">*. !</span>zi <span class="hl kwa">in</span>
	  <span class="hl kwa">if</span> tr <span class="hl opt">+.</span> ti <span class="hl opt">&gt;</span> limit <span class="hl kwa">then begin</span>
	    byte <span class="hl opt">:= !</span>byte <span class="hl kwa">lsl</span> <span class="hl num">1</span><span class="hl opt">;</span>
	    raise <span class="hl kwd">Exit</span>
	  <span class="hl kwa">end else if</span> incr n<span class="hl opt">; !</span>n <span class="hl opt">=</span> niter <span class="hl kwa">then begin</span>
	    byte <span class="hl opt">:= (!</span>byte <span class="hl kwa">lsl</span> <span class="hl num">1</span><span class="hl opt">)</span> <span class="hl kwa">lor</span> <span class="hl num">0x01</span><span class="hl opt">;</span>
	    raise <span class="hl kwd">Exit</span>
	  <span class="hl kwa">end else</span>
	    trmti <span class="hl opt">:=</span> tr <span class="hl opt">-.</span> ti
	<span class="hl kwa">done</span>
      <span class="hl kwa">with</span> <span class="hl kwd">Exit</span> <span class="hl opt">-&gt; ()</span>
      <span class="hl kwa">end</span><span class="hl opt">;</span>
      <span class="hl kwa">if</span> x <span class="hl kwa">mod</span> <span class="hl num">8</span> <span class="hl opt">=</span> <span class="hl num">7</span> <span class="hl kwa">then begin</span>
	buf<span class="hl opt">.[!</span>ptr<span class="hl opt">] &lt;- (</span><span class="hl kwc">Char</span><span class="hl opt">.</span>chr <span class="hl opt">!</span>byte<span class="hl opt">);</span>
	incr ptr<span class="hl opt">;</span>
	byte <span class="hl opt">:=</span> <span class="hl num">0</span>
      <span class="hl kwa">end</span>
    <span class="hl kwa">done</span><span class="hl opt">;</span>
    <span class="hl kwa">let</span> rem <span class="hl opt">=</span> w <span class="hl kwa">mod</span> <span class="hl num">8</span> <span class="hl kwa">in</span>
    <span class="hl kwa">if</span> rem <span class="hl opt">!=</span> <span class="hl num">0</span> <span class="hl kwa">then begin</span>
      buf<span class="hl opt">.[!</span>ptr<span class="hl opt">] &lt;- (</span><span class="hl kwc">Char</span><span class="hl opt">.</span>chr <span class="hl opt">(!</span>byte <span class="hl kwa">lsl</span> <span class="hl opt">(</span><span class="hl num">8</span> <span class="hl opt">-</span> rem<span class="hl opt">)));</span>
      incr ptr<span class="hl opt">;</span>
      byte <span class="hl opt">:=</span> <span class="hl num">0</span>
    <span class="hl kwa">end</span>
  <span class="hl kwa">done</span><span class="hl opt">;</span>
  buf

<span class="hl kwa">let</span> _ <span class="hl opt">=</span>
  <span class="hl kwa">let</span> w <span class="hl opt">=</span> int_of_string <span class="hl opt">(</span><span class="hl kwc">Array</span><span class="hl opt">.</span>get <span class="hl kwc">Sys</span><span class="hl opt">.</span>argv <span class="hl num">1</span><span class="hl opt">)</span> <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> rows <span class="hl opt">=</span> w <span class="hl opt">/</span> workers <span class="hl kwa">and</span> rem <span class="hl opt">=</span> w <span class="hl kwa">mod</span> workers <span class="hl kwa">in</span>
  <span class="hl kwc">Printf</span><span class="hl opt">.</span>printf <span class="hl str">&quot;P4</span><span class="hl esc">\n</span><span class="hl str">%i %i</span><span class="hl esc">\n</span><span class="hl str">%!&quot;</span> w w<span class="hl opt">;</span>
  <span class="hl kwa">let rec</span> spawn i <span class="hl opt">=</span>
    <span class="hl kwa">if</span> i <span class="hl opt">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
      <span class="hl kwa">let</span> red_i <span class="hl opt">=</span> i <span class="hl opt">-</span> <span class="hl num">1</span> <span class="hl kwa">in</span>
      <span class="hl kwa">match</span> <span class="hl kwc">Unix</span><span class="hl opt">.</span>fork <span class="hl opt">()</span> <span class="hl kwa">with</span>
      | <span class="hl num">0</span> <span class="hl opt">-&gt;</span> spawn red_i
      | pid <span class="hl opt">-&gt;</span>
	  <span class="hl kwa">let</span> buf <span class="hl opt">=</span>
	    worker w <span class="hl opt">(</span>red_i <span class="hl opt">*</span> rows <span class="hl opt">+</span> min red_i rem<span class="hl opt">) (</span>i <span class="hl opt">*</span> rows <span class="hl opt">+</span> min i rem<span class="hl opt">)</span> <span class="hl kwa">in</span>
	  <span class="hl kwa">match</span> <span class="hl kwc">Unix</span><span class="hl opt">.</span>waitpid <span class="hl opt">[]</span> pid <span class="hl kwa">with</span>
	  | _<span class="hl opt">,</span> <span class="hl kwc">Unix</span><span class="hl opt">.</span><span class="hl kwd">WEXITED</span> <span class="hl num">0</span> <span class="hl opt">-&gt;</span>
	      <span class="hl kwc">Printf</span><span class="hl opt">.</span>printf <span class="hl str">&quot;%s%!&quot;</span> buf<span class="hl opt">;</span>
	      exit <span class="hl num">0</span>
	  | _ <span class="hl opt">-&gt;</span> <span class="hl kwa">assert false</span>
    <span class="hl kwa">else</span>
      exit <span class="hl num">0</span> <span class="hl kwa">in</span>
  spawn workers
