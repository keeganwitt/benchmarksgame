<span class="hl slc">;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;; http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">;;</span>
<span class="hl slc">;; contributed by Kenneth Jonsson</span>

<span class="hl opt">(</span><span class="hl kwa">ns</span> threadring <span class="hl opt">(:</span>gen-class<span class="hl opt">))</span>

<span class="hl opt">(</span><span class="hl kwa">defn</span> pass-token <span class="hl opt">[</span> slot value <span class="hl opt">]</span>
    <span class="hl opt">(</span><span class="hl kwa">when</span> <span class="hl opt">(</span><span class="hl kwa">zero</span>? value<span class="hl opt">)</span>
        <span class="hl opt">(</span><span class="hl kwa">println</span> <span class="hl opt">(:</span>id slot<span class="hl opt">))</span>
        <span class="hl opt">(</span><span class="hl kwa">System</span><span class="hl opt">/</span>exit <span class="hl num">0</span><span class="hl opt">))</span>
    <span class="hl opt">(</span><span class="hl kwa">send</span> <span class="hl opt">(:</span>next slot<span class="hl opt">)</span> pass-token <span class="hl opt">(</span><span class="hl kwa">dec</span> value<span class="hl opt">))</span>
    slot<span class="hl opt">)</span>

<span class="hl opt">(</span><span class="hl kwa">defn</span> create-ring-and-start <span class="hl opt">[</span> _ ring-sz initial-value <span class="hl opt">]</span>
    <span class="hl slc">; &quot;send&quot; will be defered until the state of the current agent has</span>
    <span class="hl slc">; been set to the state returned by this function</span>
    <span class="hl opt">(</span><span class="hl kwa">send</span> <span class="hl opt">*</span>agent<span class="hl opt">*</span> pass-token initial-value<span class="hl opt">)</span>
    <span class="hl slc">; create a ring of &quot;ring-sz&quot; agents linked via &quot;:next&quot;</span>
    <span class="hl opt">{ :</span>id <span class="hl num">1</span>
      <span class="hl opt">:</span>next <span class="hl opt">(</span><span class="hl kwa">reduce</span> <span class="hl opt">(</span><span class="hl kwa">fn</span> <span class="hl opt">[</span> next-slot id <span class="hl opt">]</span>
                        <span class="hl opt">(</span><span class="hl kwa">agent</span> <span class="hl opt">{ :</span>next next-slot <span class="hl opt">:</span>id id <span class="hl opt">}))</span>
                        <span class="hl opt">*</span>agent<span class="hl opt">*</span>
                        <span class="hl opt">(</span><span class="hl kwa">range</span> ring-sz <span class="hl num">1</span> -<span class="hl num">1</span><span class="hl opt">)) })</span>

<span class="hl opt">(</span><span class="hl kwa">defn</span> -main <span class="hl opt">[ &amp;</span> args <span class="hl opt">]</span>
    <span class="hl opt">(</span><span class="hl kwa">send</span> <span class="hl opt">(</span><span class="hl kwa">agent</span> nil<span class="hl opt">)</span>
          create-ring-and-start
	  <span class="hl num">503</span>
          <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">empty</span>? args<span class="hl opt">)</span> <span class="hl num">1000</span> <span class="hl opt">(</span><span class="hl kwa">Integer</span><span class="hl opt">/</span>parseInt <span class="hl opt">(</span><span class="hl kwa">first</span> args<span class="hl opt">)))))</span>
