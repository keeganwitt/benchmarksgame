<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">Based on C contribution by Alex Burlyga</span>
<span class="hl com">Based on Java contribution by Michael Barker</span>
<span class="hl com">Based on the original C++ contribution by The Anh Tran </span>
<span class="hl com">Based on the #5 C contribution by Dmitry Vyukov </span>
<span class="hl com">Contributed &amp; Modified by Andrew Moon</span>
<span class="hl com"></span>
<span class="hl com">Each chameneous creature is a standard OS thread.</span>
<span class="hl com">Data exchange mechanism is gcc built-in atomic ops.</span>
<span class="hl com">*/</span>


<span class="hl ppc">#include &lt;cstdlib&gt;</span>
<span class="hl ppc">#include &lt;cstdio&gt;</span>
<span class="hl ppc">#include &lt;iostream&gt;</span>
<span class="hl ppc">#include &lt;string&gt;</span>

<span class="hl kwa">using namespace</span> std<span class="hl opt">;</span>

<span class="hl kwb">struct</span> CPUs <span class="hl opt">{</span>
   <span class="hl kwb">enum</span> <span class="hl opt">{</span> perslot <span class="hl opt">=</span> <span class="hl num">2</span> <span class="hl opt">};</span>
   <span class="hl kwd">CPUs</span><span class="hl opt">() {</span>
      <span class="hl kwa">for</span> <span class="hl opt">(</span> <span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> <span class="hl num">33</span><span class="hl opt">;</span> i<span class="hl opt">++ )</span>
         <span class="hl kwd">CPU_ZERO</span><span class="hl opt">( &amp;</span>affinities<span class="hl opt">[</span>i<span class="hl opt">] );</span>
      cpu_set_t <span class="hl opt">&amp;</span>cs <span class="hl opt">=</span> affinities<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">];</span>
      <span class="hl kwd">sched_getaffinity</span><span class="hl opt">(</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl kwa">sizeof</span><span class="hl opt">(</span>cs<span class="hl opt">), &amp;</span>cs <span class="hl opt">);</span>

      count <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
      <span class="hl kwa">for</span> <span class="hl opt">(</span> <span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> CPU_SETSIZE<span class="hl opt">;</span> i<span class="hl opt">++ ) {</span>
         <span class="hl kwa">if</span> <span class="hl opt">(</span> <span class="hl kwd">CPU_ISSET</span><span class="hl opt">(</span> i<span class="hl opt">, &amp;</span>cs <span class="hl opt">) ) {</span>
            <span class="hl kwd">CPU_SET</span><span class="hl opt">(</span> i<span class="hl opt">, &amp;</span>affinities<span class="hl opt">[(</span>count <span class="hl opt">/</span> perslot<span class="hl opt">) +</span> <span class="hl num">1</span><span class="hl opt">] );</span>
            count<span class="hl opt">++;</span>
         <span class="hl opt">}</span>
      <span class="hl opt">}</span>
      mod <span class="hl opt">= (</span> count <span class="hl opt">&gt;</span> <span class="hl num">2</span> <span class="hl opt">)</span> ? count <span class="hl opt">&gt;&gt;</span> <span class="hl num">1</span> <span class="hl opt">:</span> <span class="hl num">1</span><span class="hl opt">;</span>
   <span class="hl opt">}</span>
   
   cpu_set_t <span class="hl opt">*</span><span class="hl kwd">getaffinity</span><span class="hl opt">(</span> <span class="hl kwb">int</span> slot <span class="hl opt">) {</span> 
      <span class="hl kwa">return</span> <span class="hl opt">&amp;</span>affinities<span class="hl opt">[</span> slot ? <span class="hl opt">(</span> slot <span class="hl opt">%</span> mod <span class="hl opt">) +</span> <span class="hl num">1</span> <span class="hl opt">:</span> <span class="hl num">0</span> <span class="hl opt">];</span> 
   <span class="hl opt">}</span>

   <span class="hl kwb">int</span> count<span class="hl opt">,</span> mod<span class="hl opt">;</span>
   cpu_set_t affinities<span class="hl opt">[</span><span class="hl num">33</span><span class="hl opt">];</span> <span class="hl slc">// up to 64 cores!</span>
<span class="hl opt">}</span> cpus<span class="hl opt">;</span>

<span class="hl slc">// kludge to make running on a single core at least SOMEWHAT performant</span>
<span class="hl kwb">struct</span> SingleCoreYield <span class="hl opt">{</span>
   <span class="hl kwd">SingleCoreYield</span><span class="hl opt">() :</span> <span class="hl kwd">counter</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">) {}</span>
   <span class="hl kwb">void</span> <span class="hl kwd">Run</span><span class="hl opt">() {</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span> cpus<span class="hl opt">.</span>count <span class="hl opt">&lt;=</span> <span class="hl num">1</span> <span class="hl opt">||</span> counter<span class="hl opt">++ &gt;</span> <span class="hl num">20000</span> <span class="hl opt">) {</span>
         <span class="hl kwd">sched_yield</span><span class="hl opt">();</span>
         counter <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
      <span class="hl opt">}</span>
   <span class="hl opt">}</span>

<span class="hl kwc">protected</span><span class="hl opt">:</span>
   <span class="hl kwb">int</span> counter<span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl kwb">enum</span> Color <span class="hl opt">{</span> blue <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">,</span> red<span class="hl opt">,</span> yellow<span class="hl opt">,</span> Invalid <span class="hl opt">};</span>

<span class="hl slc">// stream operator to write a color</span>
ostream <span class="hl opt">&amp;</span><span class="hl kwc">operator</span><span class="hl opt">&lt;&lt; (</span> ostream <span class="hl opt">&amp;</span>s<span class="hl opt">,</span> <span class="hl kwb">const</span> Color <span class="hl opt">&amp;</span>c <span class="hl opt">) {</span>
   <span class="hl kwb">static const char</span> <span class="hl opt">*</span>names<span class="hl opt">[] = {</span> <span class="hl str">&quot;blue&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;red&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;yellow&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;Invalid&quot;</span> <span class="hl opt">};</span>
   s <span class="hl opt">&lt;&lt;</span> names<span class="hl opt">[</span>c<span class="hl opt">];</span>
   <span class="hl kwa">return</span> s<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl slc">// +operator to add colors</span>
Color <span class="hl kwc">operator</span><span class="hl opt">+(</span> <span class="hl kwb">const</span> Color <span class="hl opt">&amp;</span>c1<span class="hl opt">,</span> <span class="hl kwb">const</span> Color <span class="hl opt">&amp;</span>c2 <span class="hl opt">) {</span>
   <span class="hl kwa">switch</span> <span class="hl opt">(</span> c1 <span class="hl opt">) {</span>
      <span class="hl kwa">case</span> blue<span class="hl opt">:</span> <span class="hl kwa">switch</span> <span class="hl opt">(</span> c2 <span class="hl opt">) {</span>
         <span class="hl kwa">case</span> blue<span class="hl opt">:</span>   <span class="hl kwa">return</span> blue<span class="hl opt">;</span>
         <span class="hl kwa">case</span> red<span class="hl opt">:</span>    <span class="hl kwa">return</span> yellow<span class="hl opt">;</span>
         <span class="hl kwa">case</span> yellow<span class="hl opt">:</span> <span class="hl kwa">return</span> red<span class="hl opt">;</span>
         <span class="hl kwa">default</span><span class="hl opt">:;</span>
      <span class="hl opt">}</span>
      <span class="hl kwa">case</span> red<span class="hl opt">:</span> <span class="hl kwa">switch</span> <span class="hl opt">(</span> c2 <span class="hl opt">) {</span>
         <span class="hl kwa">case</span> blue<span class="hl opt">:</span>   <span class="hl kwa">return</span> yellow<span class="hl opt">;</span>
         <span class="hl kwa">case</span> red<span class="hl opt">:</span>    <span class="hl kwa">return</span> red<span class="hl opt">;</span>
         <span class="hl kwa">case</span> yellow<span class="hl opt">:</span> <span class="hl kwa">return</span> blue<span class="hl opt">;</span>
         <span class="hl kwa">default</span><span class="hl opt">:;</span>
      <span class="hl opt">}</span>
      <span class="hl kwa">case</span> yellow<span class="hl opt">:</span> <span class="hl kwa">switch</span> <span class="hl opt">(</span> c2 <span class="hl opt">) {</span>
         <span class="hl kwa">case</span> blue<span class="hl opt">:</span>   <span class="hl kwa">return</span> red<span class="hl opt">;</span>
         <span class="hl kwa">case</span> red<span class="hl opt">:</span>    <span class="hl kwa">return</span> blue<span class="hl opt">;</span>
         <span class="hl kwa">case</span> yellow<span class="hl opt">:</span> <span class="hl kwa">return</span> yellow<span class="hl opt">;</span>
         <span class="hl kwa">default</span><span class="hl opt">:;</span>
      <span class="hl opt">}</span>
      <span class="hl kwa">default</span><span class="hl opt">:;</span>
   <span class="hl opt">}</span>
   <span class="hl kwa">return</span> Invalid<span class="hl opt">;</span>
<span class="hl opt">}</span>


<span class="hl slc">// spells out a number as named digits</span>
string <span class="hl kwd">SpellNumber</span><span class="hl opt">(</span> <span class="hl kwb">int</span> n <span class="hl opt">) {</span>
   <span class="hl kwb">static const char</span> <span class="hl opt">*</span>numbers<span class="hl opt">[] = {</span>
      <span class="hl str">&quot; zero&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot; one&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot; two&quot;</span><span class="hl opt">,</span>
      <span class="hl str">&quot; three&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot; four&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot; five&quot;</span><span class="hl opt">,</span>
      <span class="hl str">&quot; six&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot; seven&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot; eight&quot;</span><span class="hl opt">,</span>
      <span class="hl str">&quot; nine&quot;</span>
   <span class="hl opt">};</span>

   string str<span class="hl opt">;</span>
   <span class="hl kwa">do</span> <span class="hl opt">{</span>
      str<span class="hl opt">.</span><span class="hl kwd">insert</span><span class="hl opt">(</span> <span class="hl num">0</span><span class="hl opt">,</span> numbers<span class="hl opt">[</span>n <span class="hl opt">%</span> <span class="hl num">10</span><span class="hl opt">] );</span>
      n <span class="hl opt">/=</span> <span class="hl num">10</span><span class="hl opt">;</span>
   <span class="hl opt">}</span> <span class="hl kwa">while</span> <span class="hl opt">(</span> n <span class="hl opt">);</span>

   <span class="hl kwa">return</span> str<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwb">struct</span> MeetingPlace<span class="hl opt">;</span>

<span class="hl kwb">struct</span> Creature <span class="hl opt">{</span>
   <span class="hl kwd">Creature</span><span class="hl opt">() :</span> <span class="hl kwd">id</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">),</span> <span class="hl kwd">count</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">),</span> <span class="hl kwd">sameCount</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">),</span> <span class="hl kwd">met</span><span class="hl opt">(</span><span class="hl kwa">false</span><span class="hl opt">) {}</span>

   <span class="hl slc">// output our total visits and self visits, returning total visits</span>
   <span class="hl kwb">int</span> <span class="hl kwd">Display</span><span class="hl opt">()</span> <span class="hl kwb">const</span> <span class="hl opt">{</span>
      cout <span class="hl opt">&lt;&lt;</span> count <span class="hl opt">&lt;&lt;</span> <span class="hl kwd">SpellNumber</span><span class="hl opt">(</span>sameCount<span class="hl opt">) &lt;&lt;</span> endl<span class="hl opt">;</span>
      <span class="hl kwa">return</span> count<span class="hl opt">;</span>
   <span class="hl opt">}</span>

   <span class="hl kwb">void</span> <span class="hl kwd">Meet</span><span class="hl opt">(</span> Creature <span class="hl opt">*</span>other <span class="hl opt">) {</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span> id <span class="hl opt">==</span> other<span class="hl opt">-&gt;</span>id <span class="hl opt">) {</span>
         sameCount<span class="hl opt">++;</span>
         other<span class="hl opt">-&gt;</span>sameCount<span class="hl opt">++;</span>
      <span class="hl opt">}</span>

      count<span class="hl opt">++;</span>
      other<span class="hl opt">-&gt;</span>count<span class="hl opt">++;</span>

      Color newcolor <span class="hl opt">=</span> color <span class="hl opt">+</span> other<span class="hl opt">-&gt;</span>color<span class="hl opt">;</span>
      other<span class="hl opt">-&gt;</span>color <span class="hl opt">=</span> color <span class="hl opt">=</span> newcolor<span class="hl opt">;</span>
      other<span class="hl opt">-&gt;</span>met <span class="hl opt">=</span> <span class="hl kwa">true</span><span class="hl opt">;</span>
   <span class="hl opt">}</span>

   <span class="hl kwb">void</span> <span class="hl kwd">Init</span><span class="hl opt">(</span> MeetingPlace <span class="hl opt">*</span>mp<span class="hl opt">,</span> Color c <span class="hl opt">);</span>
   <span class="hl kwb">void</span> <span class="hl kwd">Run</span><span class="hl opt">();</span>

   <span class="hl kwb">void</span> <span class="hl kwd">Start</span><span class="hl opt">(</span> <span class="hl kwb">int</span> affinity <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl opt">) {</span>
      <span class="hl kwd">pthread_attr_init</span><span class="hl opt">( &amp;</span>threadAttr <span class="hl opt">);</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span> cpus<span class="hl opt">.</span>count <span class="hl opt">&gt;=</span> <span class="hl num">4</span> <span class="hl opt">) {</span>
         cpu_set_t <span class="hl opt">*</span>cores <span class="hl opt">=</span> cpus<span class="hl opt">.</span><span class="hl kwd">getaffinity</span><span class="hl opt">(</span> affinity <span class="hl opt">);</span>
         <span class="hl kwd">pthread_attr_setaffinity_np</span><span class="hl opt">( &amp;</span>threadAttr<span class="hl opt">,</span> <span class="hl kwa">sizeof</span><span class="hl opt">(</span>cpu_set_t<span class="hl opt">),</span> cores <span class="hl opt">);</span>
      <span class="hl opt">}</span>
      <span class="hl kwd">pthread_create</span><span class="hl opt">( &amp;</span>threadHandle<span class="hl opt">, &amp;</span>threadAttr<span class="hl opt">, &amp;</span>Creature<span class="hl opt">::</span>ThreadRun<span class="hl opt">,</span> <span class="hl kwa">this</span> <span class="hl opt">);</span>
   <span class="hl opt">}</span>

   <span class="hl kwb">static void</span> <span class="hl opt">*</span><span class="hl kwd">ThreadRun</span><span class="hl opt">(</span> <span class="hl kwb">void</span> <span class="hl opt">*</span>param <span class="hl opt">) {</span>
      <span class="hl opt">((</span>Creature<span class="hl opt">*)</span>param<span class="hl opt">)-&gt;</span><span class="hl kwd">Run</span><span class="hl opt">();</span>
      <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
   <span class="hl opt">}</span>

   <span class="hl kwb">void</span> <span class="hl kwd">Wait</span><span class="hl opt">()</span> <span class="hl kwb">const</span> <span class="hl opt">{</span>
      <span class="hl kwd">pthread_join</span><span class="hl opt">(</span> threadHandle<span class="hl opt">,</span> NULL <span class="hl opt">);</span>
   <span class="hl opt">}</span>

   <span class="hl kwb">void</span> <span class="hl kwd">WaitUntilMet</span><span class="hl opt">() {</span>
      SingleCoreYield yield<span class="hl opt">;</span>
      <span class="hl kwa">while</span> <span class="hl opt">( !</span>met <span class="hl opt">)</span>
         yield<span class="hl opt">.</span><span class="hl kwd">Run</span><span class="hl opt">();</span>
      met <span class="hl opt">=</span> <span class="hl kwa">false</span><span class="hl opt">;</span>
   <span class="hl opt">}</span>

   <span class="hl kwb">int</span> id<span class="hl opt">,</span> count<span class="hl opt">,</span> sameCount<span class="hl opt">;</span>
   <span class="hl kwc">volatile</span> <span class="hl kwb">bool</span> met<span class="hl opt">;</span> <span class="hl slc">// met is set from other threads, don't cache in a register</span>
   Color initialColor<span class="hl opt">,</span> color<span class="hl opt">;</span>

<span class="hl kwc">protected</span><span class="hl opt">:</span>
   pthread_t threadHandle<span class="hl opt">;</span>
   pthread_attr_t threadAttr<span class="hl opt">;</span>
   MeetingPlace <span class="hl opt">*</span>place<span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl kwb">struct</span> MeetingPlace <span class="hl opt">{</span>
   <span class="hl slc">// max # of creatures is ( 1 &lt;&lt; S ) - 1, max # of meetings is ( 1 &lt;&lt; ( 32 - S ) ) - 1</span>
   <span class="hl kwb">enum</span> <span class="hl opt">{</span> S <span class="hl opt">=</span> <span class="hl num">4</span><span class="hl opt">,</span> creatureMask <span class="hl opt">= (</span><span class="hl num">1</span> <span class="hl opt">&lt;&lt;</span> S<span class="hl opt">) -</span> <span class="hl num">1</span> <span class="hl opt">};</span>
   <span class="hl kwd">MeetingPlace</span><span class="hl opt">(</span> <span class="hl kwb">int</span> N <span class="hl opt">) :</span> <span class="hl kwd">state</span><span class="hl opt">(</span>N <span class="hl opt">&lt;&lt;</span> S<span class="hl opt">),</span> <span class="hl kwd">idGenerator</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">) {</span> creatures <span class="hl opt">=</span> <span class="hl kwa">new</span> Creature <span class="hl opt">*[</span>N<span class="hl opt">]; }</span>
   <span class="hl opt">~</span><span class="hl kwd">MeetingPlace</span><span class="hl opt">() {</span> <span class="hl kwa">delete</span><span class="hl opt">[]</span> creatures<span class="hl opt">; }</span>
   
   <span class="hl kwb">void</span> <span class="hl kwd">Register</span><span class="hl opt">(</span> Creature <span class="hl opt">&amp;</span>creature <span class="hl opt">) {</span>
      creature<span class="hl opt">.</span>id <span class="hl opt">=</span> idGenerator<span class="hl opt">++;</span>
      creatures<span class="hl opt">[</span>creature<span class="hl opt">.</span>id<span class="hl opt">] = &amp;</span>creature<span class="hl opt">;</span>
   <span class="hl opt">}</span>

   <span class="hl kwb">void</span> <span class="hl kwd">MeetUp</span><span class="hl opt">(</span> Creature <span class="hl opt">*</span>creature <span class="hl opt">) {</span>
      <span class="hl kwb">int</span> useState <span class="hl opt">=</span> state<span class="hl opt">;</span>
      <span class="hl kwa">while</span> <span class="hl opt">(</span> <span class="hl kwa">true</span> <span class="hl opt">) {</span>
         <span class="hl kwb">int</span> waiting <span class="hl opt">=</span> useState <span class="hl opt">&amp;</span> creatureMask<span class="hl opt">,</span> tryState <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
         <span class="hl kwa">if</span> <span class="hl opt">(</span> waiting <span class="hl opt">)</span>
            <span class="hl slc">// there's a waiting creature, set the new state to meetingCount - 1</span>
            tryState <span class="hl opt">= ( (</span> useState <span class="hl opt">&amp; ~</span>creatureMask <span class="hl opt">) - (</span> <span class="hl num">1</span> <span class="hl opt">&lt;&lt;</span> S <span class="hl opt">) );</span>
         <span class="hl kwa">else if</span> <span class="hl opt">(</span> useState <span class="hl opt">)</span>
            <span class="hl slc">// nobody waiting and meetings left, set ourselves to the waiting creature</span>
            tryState <span class="hl opt">=</span> useState <span class="hl opt">|</span> creature<span class="hl opt">-&gt;</span>id<span class="hl opt">;</span>
         <span class="hl kwa">else</span>
            <span class="hl slc">// nobody waiting and no meetings left, we're done</span>
            <span class="hl kwa">return</span><span class="hl opt">;</span>

         <span class="hl kwb">int</span> oldState <span class="hl opt">=</span> <span class="hl kwd">__sync_val_compare_and_swap</span><span class="hl opt">( &amp;</span>state<span class="hl opt">,</span> useState<span class="hl opt">,</span> tryState <span class="hl opt">);</span>
         <span class="hl kwa">if</span> <span class="hl opt">(</span> oldState <span class="hl opt">==</span> useState <span class="hl opt">) {</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span> waiting <span class="hl opt">)</span>
               creature<span class="hl opt">-&gt;</span><span class="hl kwd">Meet</span><span class="hl opt">(</span> creatures<span class="hl opt">[</span>waiting<span class="hl opt">] );</span>
            <span class="hl kwa">else</span>
               creature<span class="hl opt">-&gt;</span><span class="hl kwd">WaitUntilMet</span><span class="hl opt">();</span>
            useState <span class="hl opt">=</span> state<span class="hl opt">;</span>
         <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
            useState <span class="hl opt">=</span> oldState<span class="hl opt">;</span>
         <span class="hl opt">}</span>
      <span class="hl opt">}</span>
   <span class="hl opt">}</span>

<span class="hl kwc">protected</span><span class="hl opt">:</span>
   <span class="hl kwc">volatile</span> <span class="hl kwb">int</span> state<span class="hl opt">;</span> <span class="hl slc">// state is read &amp; set from other threads, don't cache in a register</span>
   <span class="hl kwb">int</span> idGenerator<span class="hl opt">;</span>
   Creature <span class="hl opt">**</span>creatures<span class="hl opt">;</span>
<span class="hl opt">};</span>



<span class="hl kwb">void</span> Creature<span class="hl opt">::</span><span class="hl kwd">Init</span><span class="hl opt">(</span> MeetingPlace <span class="hl opt">*</span>mp<span class="hl opt">,</span> Color c <span class="hl opt">) {</span>
   place <span class="hl opt">=</span> mp<span class="hl opt">;</span>
   initialColor <span class="hl opt">=</span> color <span class="hl opt">=</span> c<span class="hl opt">;</span>
   place<span class="hl opt">-&gt;</span><span class="hl kwd">Register</span><span class="hl opt">( *</span><span class="hl kwa">this</span> <span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwb">void</span> Creature<span class="hl opt">::</span><span class="hl kwd">Run</span><span class="hl opt">() {</span>
   place<span class="hl opt">-&gt;</span><span class="hl kwd">MeetUp</span><span class="hl opt">(</span> <span class="hl kwa">this</span> <span class="hl opt">);</span>
<span class="hl opt">}</span>


<span class="hl kwc">template</span><span class="hl opt">&lt;</span> <span class="hl kwb">int</span> ncolor <span class="hl opt">&gt;</span>
<span class="hl kwb">struct</span> Game <span class="hl opt">{</span>
   <span class="hl kwd">Game</span><span class="hl opt">(</span> <span class="hl kwb">int</span> meetings<span class="hl opt">,</span> <span class="hl kwb">const</span> <span class="hl kwd">Color</span> <span class="hl opt">(&amp;</span>color<span class="hl opt">)[</span>ncolor<span class="hl opt">] ) :</span> <span class="hl kwd">meetingPlace</span><span class="hl opt">(</span>meetings<span class="hl opt">) {</span>
      <span class="hl kwa">for</span> <span class="hl opt">(</span> <span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> ncolor<span class="hl opt">;</span> i<span class="hl opt">++ )</span>
         creatures<span class="hl opt">[</span>i<span class="hl opt">].</span><span class="hl kwd">Init</span><span class="hl opt">( &amp;</span>meetingPlace<span class="hl opt">,</span> color<span class="hl opt">[</span>i<span class="hl opt">] );</span>
   <span class="hl opt">}</span>
   
   <span class="hl kwb">void</span> <span class="hl kwd">Start</span><span class="hl opt">(</span>  <span class="hl kwb">int</span> affinity <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl opt">) {</span>
      <span class="hl kwa">for</span> <span class="hl opt">(</span> <span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> ncolor<span class="hl opt">;</span> i<span class="hl opt">++ )</span>
         creatures<span class="hl opt">[</span>i<span class="hl opt">].</span><span class="hl kwd">Start</span><span class="hl opt">(</span> affinity <span class="hl opt">);</span>
   <span class="hl opt">}</span>

   <span class="hl kwb">void</span> <span class="hl kwd">Wait</span><span class="hl opt">() {</span>
      <span class="hl kwa">for</span> <span class="hl opt">(</span> <span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> ncolor<span class="hl opt">;</span> i<span class="hl opt">++ )</span>
         creatures<span class="hl opt">[</span>i<span class="hl opt">].</span><span class="hl kwd">Wait</span><span class="hl opt">();</span>
   <span class="hl opt">}</span>

   <span class="hl kwb">void</span> <span class="hl kwd">Display</span><span class="hl opt">() {</span>
      <span class="hl slc">// display the initial color list</span>
      <span class="hl kwa">for</span> <span class="hl opt">(</span> <span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> ncolor<span class="hl opt">;</span> i<span class="hl opt">++ )</span>
         cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot; &quot;</span> <span class="hl opt">&lt;&lt;</span> creatures<span class="hl opt">[</span>i<span class="hl opt">].</span>initialColor<span class="hl opt">;</span>
      cout <span class="hl opt">&lt;&lt;</span> endl<span class="hl opt">;</span>

      <span class="hl slc">// output each creature and sum up the total visits</span>
      <span class="hl kwb">int</span> total <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
      <span class="hl kwa">for</span> <span class="hl opt">(</span> <span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> ncolor<span class="hl opt">;</span> i<span class="hl opt">++ )</span>
         total <span class="hl opt">+=</span> creatures<span class="hl opt">[</span>i<span class="hl opt">].</span><span class="hl kwd">Display</span><span class="hl opt">();</span>
      cout <span class="hl opt">&lt;&lt;</span> <span class="hl kwd">SpellNumber</span><span class="hl opt">(</span>total<span class="hl opt">) &lt;&lt;</span> endl <span class="hl opt">&lt;&lt;</span> endl<span class="hl opt">;</span>
   <span class="hl opt">}</span>

<span class="hl kwc">protected</span><span class="hl opt">:</span>
   MeetingPlace meetingPlace<span class="hl opt">;</span>
   Creature creatures<span class="hl opt">[</span>ncolor<span class="hl opt">];</span>
<span class="hl opt">};</span>


<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span> <span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">const char</span> <span class="hl opt">*</span>argv<span class="hl opt">[] ) {</span>
   <span class="hl kwb">const</span> Color r1<span class="hl opt">[] = {</span>
      blue<span class="hl opt">,</span> red<span class="hl opt">,</span> yellow
   <span class="hl opt">};</span>

   <span class="hl kwb">const</span> Color r2<span class="hl opt">[] = {</span>
      blue<span class="hl opt">,</span> red<span class="hl opt">,</span> yellow<span class="hl opt">,</span>
      red<span class="hl opt">,</span> yellow<span class="hl opt">,</span> blue<span class="hl opt">,</span>
      red<span class="hl opt">,</span> yellow<span class="hl opt">,</span> red<span class="hl opt">,</span>
      blue
   <span class="hl opt">};</span>

   <span class="hl kwa">for</span> <span class="hl opt">(</span> <span class="hl kwb">int</span> c1 <span class="hl opt">=</span> blue<span class="hl opt">;</span> c1 <span class="hl opt">&lt;=</span> yellow<span class="hl opt">;</span> c1<span class="hl opt">++ )</span>
      <span class="hl kwa">for</span> <span class="hl opt">(</span> <span class="hl kwb">int</span> c2 <span class="hl opt">=</span> blue<span class="hl opt">;</span> c2 <span class="hl opt">&lt;=</span> yellow<span class="hl opt">;</span> c2<span class="hl opt">++ )</span>
         cout <span class="hl opt">&lt;&lt;</span> r1<span class="hl opt">[</span>c1<span class="hl opt">] &lt;&lt;</span> <span class="hl str">&quot; + &quot;</span> <span class="hl opt">&lt;&lt;</span> r1<span class="hl opt">[</span>c2<span class="hl opt">] &lt;&lt;</span> <span class="hl str">&quot; -&gt; &quot;</span> <span class="hl opt">&lt;&lt; (</span> r1<span class="hl opt">[</span>c1<span class="hl opt">] +</span> r1<span class="hl opt">[</span>c2<span class="hl opt">] ) &lt;&lt;</span> endl<span class="hl opt">;</span>
   cout <span class="hl opt">&lt;&lt;</span> endl<span class="hl opt">;</span>

   <span class="hl kwb">int</span> n <span class="hl opt">= (</span> argc <span class="hl opt">&gt;=</span> <span class="hl num">2</span> <span class="hl opt">)</span> ? <span class="hl kwd">atoi</span><span class="hl opt">(</span> argv<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">] ) :</span> <span class="hl num">6000000</span><span class="hl opt">;</span>

   Game<span class="hl opt">&lt;</span> <span class="hl num">3</span><span class="hl opt">&gt;</span> <span class="hl kwd">g1</span><span class="hl opt">(</span> n<span class="hl opt">,</span> r1 <span class="hl opt">);</span> 
   Game<span class="hl opt">&lt;</span><span class="hl num">10</span><span class="hl opt">&gt;</span> <span class="hl kwd">g2</span><span class="hl opt">(</span> n<span class="hl opt">,</span> r2 <span class="hl opt">);</span>
   <span class="hl kwa">if</span> <span class="hl opt">(</span> cpus<span class="hl opt">.</span>count <span class="hl opt">&lt;</span> <span class="hl num">4</span> <span class="hl opt">) {</span>
      g1<span class="hl opt">.</span><span class="hl kwd">Start</span><span class="hl opt">();</span> g1<span class="hl opt">.</span><span class="hl kwd">Wait</span><span class="hl opt">();</span>
      g2<span class="hl opt">.</span><span class="hl kwd">Start</span><span class="hl opt">();</span> g2<span class="hl opt">.</span><span class="hl kwd">Wait</span><span class="hl opt">();</span>
   <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
      g1<span class="hl opt">.</span><span class="hl kwd">Start</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">);</span> g2<span class="hl opt">.</span><span class="hl kwd">Start</span><span class="hl opt">(</span><span class="hl num">2</span><span class="hl opt">);</span>
      g1<span class="hl opt">.</span><span class="hl kwd">Wait</span><span class="hl opt">();</span> g2<span class="hl opt">.</span><span class="hl kwd">Wait</span><span class="hl opt">();</span>
   <span class="hl opt">}</span>
   g1<span class="hl opt">.</span><span class="hl kwd">Display</span><span class="hl opt">();</span>
   g2<span class="hl opt">.</span><span class="hl kwd">Display</span><span class="hl opt">();</span>
<span class="hl opt">}</span>
