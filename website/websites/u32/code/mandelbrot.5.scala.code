<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com">   original contributed by Isaac Gouy</span>
<span class="hl com">   made to use single array and parallelized by Stephen Marsh</span>
<span class="hl com">   converted to Scala 2.8 by Rex Kerr</span>
<span class="hl com">   made to use parallel collections and removed synchronized blocks by Steve Vickers</span>
<span class="hl com">*/</span>
<span class="hl kwa">import</span> java<span class="hl opt">.</span>io<span class="hl opt">.</span>BufferedOutputStream

<span class="hl kwa">object</span> mandelbrot <span class="hl opt">{</span>
	<span class="hl kwa">var</span> size<span class="hl opt">:</span> Int <span class="hl opt">=</span> <span class="hl num">0</span>
	<span class="hl kwa">var</span> bytesPerRow<span class="hl opt">:</span> Int <span class="hl opt">=</span> <span class="hl num">0</span>
	<span class="hl kwa">var</span> nextRow <span class="hl opt">=</span> <span class="hl num">0</span>
	<span class="hl kwa">val</span> limitSquared <span class="hl opt">=</span> <span class="hl num">4.0</span>
	<span class="hl kwa">val</span> max <span class="hl opt">=</span> <span class="hl num">50</span>

	<span class="hl kwa">def</span> <span class="hl kwd">main</span><span class="hl opt">(</span>args<span class="hl opt">:</span> Array<span class="hl opt">[</span>String<span class="hl opt">]) {</span>
		size <span class="hl opt">=</span> <span class="hl kwd">args</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">).</span>toInt
		bytesPerRow <span class="hl opt">= (</span>size<span class="hl opt">+</span><span class="hl num">7</span><span class="hl opt">)/</span><span class="hl num">8</span> <span class="hl slc">// ceiling of (size / 8)</span>

		<span class="hl kwd">println</span><span class="hl opt">(</span><span class="hl str">&quot;P4</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> <span class="hl opt">+</span> size <span class="hl opt">+</span> <span class="hl str">&quot; &quot;</span> <span class="hl opt">+</span> size<span class="hl opt">)</span>
		<span class="hl kwa">val</span> w <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">BufferedOutputStream</span><span class="hl opt">(</span>System<span class="hl opt">.</span>out<span class="hl opt">)</span>

		<span class="hl opt">(</span><span class="hl num">0</span> until size<span class="hl opt">).</span>par<span class="hl opt">.</span><span class="hl kwd">map</span> <span class="hl opt">(</span>CalculateRow<span class="hl opt">.</span>apply<span class="hl opt">).</span>zipWithIndex<span class="hl opt">.</span>toVector<span class="hl opt">.</span><span class="hl kwd">sortBy</span> <span class="hl opt">(</span>_<span class="hl opt">.</span>_2<span class="hl opt">)</span> foreach <span class="hl opt">{</span>
			<span class="hl kwa">case</span> <span class="hl opt">(</span>bitmap<span class="hl opt">,</span> y<span class="hl opt">) =&gt;</span>

			w<span class="hl opt">.</span><span class="hl kwd">write</span><span class="hl opt">(</span>bitmap<span class="hl opt">)</span>
			<span class="hl opt">}</span>

		w<span class="hl opt">.</span>close
	<span class="hl opt">}</span>

	<span class="hl kwa">object</span> CalculateRow <span class="hl opt">{</span>
		<span class="hl kwa">def</span> <span class="hl kwd">apply</span> <span class="hl opt">(</span>y <span class="hl opt">:</span> Int<span class="hl opt">) :</span> Array<span class="hl opt">[</span>Byte<span class="hl opt">] = {</span>
			<span class="hl kwa">val</span> bitmap <span class="hl opt">=</span> <span class="hl kwa">new</span> Array<span class="hl opt">[</span>Byte<span class="hl opt">] (</span>bytesPerRow<span class="hl opt">);</span>
			<span class="hl kwa">var</span> bits <span class="hl opt">=</span> <span class="hl num">0</span>
			<span class="hl kwa">var</span> bitnum <span class="hl opt">=</span> <span class="hl num">0</span>
			<span class="hl kwa">var</span> x <span class="hl opt">=</span> <span class="hl num">0</span>
			<span class="hl kwa">var</span> aindex <span class="hl opt">=</span> <span class="hl num">0</span>

			<span class="hl kwa">while</span> <span class="hl opt">(</span>x <span class="hl opt">&lt;</span> size<span class="hl opt">) {</span>

				<span class="hl kwa">val</span> cr <span class="hl opt">=</span> <span class="hl num">2.0</span> <span class="hl opt">*</span> x <span class="hl opt">/</span> size <span class="hl opt">-</span> <span class="hl num">1.5</span>
				<span class="hl kwa">val</span> ci <span class="hl opt">=</span> <span class="hl num">2.0</span> <span class="hl opt">*</span> y <span class="hl opt">/</span> size <span class="hl opt">-</span> <span class="hl num">1.0</span>

				<span class="hl kwa">var</span> zr<span class="hl opt">,</span> tr<span class="hl opt">,</span> zi<span class="hl opt">,</span> ti <span class="hl opt">=</span> <span class="hl num">0.0</span>

				<span class="hl kwa">var</span> j <span class="hl opt">=</span> max
				<span class="hl kwa">do</span> <span class="hl opt">{</span>
					zi <span class="hl opt">=</span> <span class="hl num">2.0</span> <span class="hl opt">*</span> zr <span class="hl opt">*</span> zi <span class="hl opt">+</span> ci
					zr <span class="hl opt">=</span> tr <span class="hl opt">-</span> ti <span class="hl opt">+</span> cr
					ti <span class="hl opt">=</span> zi<span class="hl opt">*</span>zi
					tr <span class="hl opt">=</span> zr<span class="hl opt">*</span>zr

					j <span class="hl opt">=</span> j <span class="hl opt">-</span> <span class="hl num">1</span>
				<span class="hl opt">}</span> <span class="hl kwa">while</span> <span class="hl opt">(!(</span>tr <span class="hl opt">+</span> ti <span class="hl opt">&gt;</span> limitSquared<span class="hl opt">) &amp;&amp;</span> j <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">)</span>

				bits <span class="hl opt">=</span> bits <span class="hl opt">&lt;&lt;</span> <span class="hl num">1</span>
				<span class="hl kwa">if</span> <span class="hl opt">(!(</span>tr <span class="hl opt">+</span> ti <span class="hl opt">&gt;</span> limitSquared<span class="hl opt">))</span> bits <span class="hl opt">+=</span> <span class="hl num">1</span>
				bitnum <span class="hl opt">+=</span> <span class="hl num">1</span>

				<span class="hl kwa">if</span> <span class="hl opt">(</span>x <span class="hl opt">==</span> size <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">) {</span>
					bits <span class="hl opt">=</span> bits <span class="hl opt">&lt;&lt; (</span><span class="hl num">8</span> <span class="hl opt">-</span> bitnum<span class="hl opt">)</span>
					bitnum <span class="hl opt">=</span> <span class="hl num">8</span>
				<span class="hl opt">}</span>

				<span class="hl kwa">if</span> <span class="hl opt">(</span>bitnum <span class="hl opt">==</span> <span class="hl num">8</span><span class="hl opt">) {</span>
					<span class="hl kwd">bitmap</span><span class="hl opt">(</span>aindex<span class="hl opt">) =</span> bits<span class="hl opt">.</span>toByte
					aindex <span class="hl opt">+=</span> <span class="hl num">1</span>
					bits <span class="hl opt">=</span> <span class="hl num">0</span>
					bitnum <span class="hl opt">=</span> <span class="hl num">0</span>
				<span class="hl opt">}</span>

				x <span class="hl opt">+=</span> <span class="hl num">1</span>
			<span class="hl opt">}</span>

			bitmap<span class="hl opt">;</span>
		<span class="hl opt">}</span>
	<span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl slc">// vim: set ts=4 sw=4 noet:</span>
