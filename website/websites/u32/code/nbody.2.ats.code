<span class="hl com">(*</span>
<span class="hl com">** The Computer Language Benchmarks Game</span>
<span class="hl com">** http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com">**</span>
<span class="hl com">** contributed by Hongwei Xi</span>
<span class="hl com">**</span>
<span class="hl com">** compilation command:</span>
<span class="hl com">**   atscc -msse2 -mfpmath=sse -O3 n-body.dats -o n-body -lm</span>
<span class="hl com">*)</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">staload</span> <span class="hl str">&quot;libc/SATS/math.sats&quot;</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">typedef</span> planet <span class="hl opt">=</span> &#64;<span class="hl opt">{</span>
  x<span class="hl opt">=</span> double<span class="hl opt">,</span> y<span class="hl opt">=</span> double<span class="hl opt">,</span> z<span class="hl opt">=</span> double
<span class="hl opt">,</span> vx<span class="hl opt">=</span> double<span class="hl opt">,</span> vy<span class="hl opt">=</span> double<span class="hl opt">,</span> vz<span class="hl opt">=</span> double
<span class="hl opt">,</span> mass<span class="hl opt">=</span> double
<span class="hl opt">}</span> <span class="hl slc">// end of [planet]</span>

<span class="hl kwa">typedef</span> planetarr <span class="hl opt">(</span>n<span class="hl opt">:</span><span class="hl kwb">int</span><span class="hl opt">) =</span> &#64;<span class="hl opt">[</span>planet<span class="hl opt">][</span>n<span class="hl opt">]</span>

<span class="hl com">(* ****** ****** *)</span>

infix <span class="hl num">0</span> <span class="hl opt">+= -=</span>  <span class="hl slc">// for similar C notation</span>
<span class="hl kwa">macdef</span> <span class="hl opt">+= (</span>x<span class="hl opt">,</span> d<span class="hl opt">) = (,(</span>x<span class="hl opt">) := ,(</span>x<span class="hl opt">) + ,(</span>d<span class="hl opt">))</span>
<span class="hl kwa">macdef</span> <span class="hl opt">-= (</span>x<span class="hl opt">,</span> d<span class="hl opt">) = (,(</span>x<span class="hl opt">) := ,(</span>x<span class="hl opt">) - ,(</span>d<span class="hl opt">))</span>

fn advance <span class="hl opt">{</span>n<span class="hl opt">:</span>pos<span class="hl opt">}</span>
  <span class="hl opt">(</span>bodies<span class="hl opt">: &amp;</span>planetarr n<span class="hl opt">,</span> n<span class="hl opt">:</span> <span class="hl kwb">int</span> n<span class="hl opt">,</span> dt<span class="hl opt">:</span> double<span class="hl opt">):&lt;&gt;</span> void <span class="hl opt">= ()</span> where <span class="hl opt">{</span>
  <span class="hl kwa">fun</span> loop_inner
    <span class="hl opt">{</span>l1<span class="hl opt">:</span>addr<span class="hl opt">} {</span>n2<span class="hl opt">:</span>nat<span class="hl opt">} {</span>l2<span class="hl opt">:</span>addr<span class="hl opt">} .&lt;</span>n2<span class="hl opt">&gt;. (</span>
      pf1<span class="hl opt">: !</span>planet &#64; l1<span class="hl opt">,</span> pf2<span class="hl opt">: !</span>planetarr n2 &#64; l2
    | p1<span class="hl opt">:</span> ptr l1<span class="hl opt">,</span> p2<span class="hl opt">:</span> ptr l2<span class="hl opt">,</span> n2<span class="hl opt">:</span> <span class="hl kwb">int</span> n2<span class="hl opt">,</span> dt<span class="hl opt">:</span> double
    <span class="hl opt">) :&lt;&gt;</span> void <span class="hl opt">=</span>
    <span class="hl kwa">if</span> n2 <span class="hl opt">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then let</span>
      prval <span class="hl opt">(</span>pf21<span class="hl opt">,</span> pf22<span class="hl opt">) =</span> array_v_uncons <span class="hl opt">{</span>planet<span class="hl opt">} (</span>pf2<span class="hl opt">)</span>
      <span class="hl kwa">val</span> dx <span class="hl opt">=</span> p1<span class="hl opt">-&gt;</span>x <span class="hl opt">-</span> p2<span class="hl opt">-&gt;</span>x <span class="hl kwa">and</span> dy <span class="hl opt">=</span> p1<span class="hl opt">-&gt;</span>y <span class="hl opt">-</span> p2<span class="hl opt">-&gt;</span>y <span class="hl kwa">and</span> dz <span class="hl opt">=</span> p1<span class="hl opt">-&gt;</span>z <span class="hl opt">-</span> p2<span class="hl opt">-&gt;</span>z
      <span class="hl kwa">val</span> dist2 <span class="hl opt">=</span> dx <span class="hl opt">*</span> dx <span class="hl opt">+</span> dy <span class="hl opt">*</span> dy <span class="hl opt">+</span> dz <span class="hl opt">*</span> dz
      <span class="hl kwa">val</span> dist <span class="hl opt">=</span> sqrt <span class="hl opt">(</span>dist2<span class="hl opt">)</span>
      <span class="hl kwa">val</span> mag <span class="hl opt">=</span> dt / <span class="hl opt">(</span>dist <span class="hl opt">*</span> dist2<span class="hl opt">)</span>
<span class="hl slc">//</span>
      <span class="hl kwa">val</span> mass <span class="hl opt">=</span> p2<span class="hl opt">-&gt;</span>mass
      <span class="hl kwa">val</span> <span class="hl opt">() =</span> p1<span class="hl opt">-&gt;</span>vx <span class="hl opt">-=</span> dx <span class="hl opt">*</span> mass <span class="hl opt">*</span> mag
      <span class="hl kwa">val</span> <span class="hl opt">() =</span> p1<span class="hl opt">-&gt;</span>vy <span class="hl opt">-=</span> dy <span class="hl opt">*</span> mass <span class="hl opt">*</span> mag
      <span class="hl kwa">val</span> <span class="hl opt">() =</span> p1<span class="hl opt">-&gt;</span>vz <span class="hl opt">-=</span> dz <span class="hl opt">*</span> mass <span class="hl opt">*</span> mag
<span class="hl slc">//</span>
      <span class="hl kwa">val</span> mass <span class="hl opt">=</span> p1<span class="hl opt">-&gt;</span>mass
      <span class="hl kwa">val</span> <span class="hl opt">() =</span> p2<span class="hl opt">-&gt;</span>vx <span class="hl opt">+=</span> dx <span class="hl opt">*</span> mass <span class="hl opt">*</span> mag
      <span class="hl kwa">val</span> <span class="hl opt">() =</span> p2<span class="hl opt">-&gt;</span>vy <span class="hl opt">+=</span> dy <span class="hl opt">*</span> mass <span class="hl opt">*</span> mag
      <span class="hl kwa">val</span> <span class="hl opt">() =</span> p2<span class="hl opt">-&gt;</span>vz <span class="hl opt">+=</span> dz <span class="hl opt">*</span> mass <span class="hl opt">*</span> mag
<span class="hl slc">//</span>
      <span class="hl kwa">val</span> <span class="hl opt">() =</span> loop_inner <span class="hl opt">(</span>pf1<span class="hl opt">,</span> pf22 | p1<span class="hl opt">,</span> p2<span class="hl opt">+</span>sizeof<span class="hl opt">&lt;</span>planet<span class="hl opt">&gt;,</span> n2<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">,</span> dt<span class="hl opt">)</span>
      prval <span class="hl opt">() =</span> pf2 <span class="hl opt">:=</span> array_v_cons <span class="hl opt">{</span>planet<span class="hl opt">} (</span>pf21<span class="hl opt">,</span> pf22<span class="hl opt">)</span>
    <span class="hl kwa">in</span>
      <span class="hl slc">// empty</span>
    <span class="hl kwa">end</span> <span class="hl slc">// end of [if]</span>
  <span class="hl slc">// end of [loop_inner]</span>
  <span class="hl kwa">fun</span> loop_outer <span class="hl opt">{</span>n1<span class="hl opt">:</span>pos<span class="hl opt">} {</span>l1<span class="hl opt">:</span>addr<span class="hl opt">} .&lt;</span>n1<span class="hl opt">&gt;. (</span>
      pf1<span class="hl opt">: !</span>planetarr n1 &#64; l1 | p1<span class="hl opt">:</span> ptr l1<span class="hl opt">,</span> n1<span class="hl opt">:</span> <span class="hl kwb">int</span> n1<span class="hl opt">,</span> dt<span class="hl opt">:</span> double
    <span class="hl opt">) :&lt;&gt;</span> void <span class="hl opt">=</span>
    <span class="hl kwa">if</span> n1 <span class="hl opt">&gt;=</span> <span class="hl num">2</span> <span class="hl kwa">then let</span>
      prval <span class="hl opt">(</span>pf11<span class="hl opt">,</span> pf12<span class="hl opt">) =</span> array_v_uncons <span class="hl opt">{</span>planet<span class="hl opt">} (</span>pf1<span class="hl opt">)</span>
      <span class="hl kwa">val</span> p2 <span class="hl opt">=</span> p1<span class="hl opt">+</span>sizeof<span class="hl opt">&lt;</span>planet<span class="hl opt">&gt;</span> <span class="hl kwa">and</span> n2 <span class="hl opt">=</span> n1<span class="hl opt">-</span><span class="hl num">1</span>
      <span class="hl kwa">val</span> <span class="hl opt">() =</span> loop_inner <span class="hl opt">(</span>pf11<span class="hl opt">,</span> pf12 | p1<span class="hl opt">,</span> p2<span class="hl opt">,</span> n2<span class="hl opt">,</span> dt<span class="hl opt">)</span>
      <span class="hl kwa">val</span> <span class="hl opt">() =</span> loop_outer <span class="hl opt">(</span>pf12 | p2<span class="hl opt">,</span> n2<span class="hl opt">,</span> dt<span class="hl opt">)</span>
      prval <span class="hl opt">() =</span> pf1 <span class="hl opt">:=</span> array_v_cons <span class="hl opt">{</span>planet<span class="hl opt">} (</span>pf11<span class="hl opt">,</span> pf12<span class="hl opt">)</span>
    <span class="hl kwa">in</span>
      <span class="hl slc">// empty</span>
    <span class="hl kwa">end</span> <span class="hl slc">// end of [if]</span>
  <span class="hl slc">// end of [loop_outer]</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> loop_outer <span class="hl opt">(</span>view&#64; bodies | <span class="hl opt">&amp;</span>bodies<span class="hl opt">,</span> n<span class="hl opt">,</span> dt<span class="hl opt">)</span>
  <span class="hl kwa">fun</span> loop <span class="hl opt">{</span>n1<span class="hl opt">:</span>nat<span class="hl opt">} {</span>l1<span class="hl opt">:</span>addr<span class="hl opt">} .&lt;</span>n1<span class="hl opt">&gt;. (</span>
      pf1<span class="hl opt">: !</span>planetarr n1 &#64; l1 | p1<span class="hl opt">:</span> ptr l1<span class="hl opt">,</span> n1<span class="hl opt">:</span> <span class="hl kwb">int</span> n1<span class="hl opt">,</span> dt<span class="hl opt">:</span> double
    <span class="hl opt">) :&lt;&gt;</span> void <span class="hl opt">=</span>
    <span class="hl kwa">if</span> n1 <span class="hl opt">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then let</span>
      prval <span class="hl opt">(</span>pf11<span class="hl opt">,</span> pf12<span class="hl opt">) =</span> array_v_uncons <span class="hl opt">{</span>planet<span class="hl opt">} (</span>pf1<span class="hl opt">)</span>
      <span class="hl kwa">val</span> <span class="hl opt">() =</span> p1<span class="hl opt">-&gt;</span>x <span class="hl opt">+=</span> dt <span class="hl opt">*</span> p1<span class="hl opt">-&gt;</span>vx
      <span class="hl kwa">val</span> <span class="hl opt">() =</span> p1<span class="hl opt">-&gt;</span>y <span class="hl opt">+=</span> dt <span class="hl opt">*</span> p1<span class="hl opt">-&gt;</span>vy
      <span class="hl kwa">val</span> <span class="hl opt">() =</span> p1<span class="hl opt">-&gt;</span>z <span class="hl opt">+=</span> dt <span class="hl opt">*</span> p1<span class="hl opt">-&gt;</span>vz
      <span class="hl kwa">val</span> <span class="hl opt">() =</span> loop <span class="hl opt">(</span>pf12 | p1<span class="hl opt">+</span>sizeof<span class="hl opt">&lt;</span>planet<span class="hl opt">&gt;,</span> n1<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">,</span> dt<span class="hl opt">)</span>
      prval <span class="hl opt">() =</span> pf1 <span class="hl opt">:=</span> array_v_cons <span class="hl opt">{</span>planet<span class="hl opt">} (</span>pf11<span class="hl opt">,</span> pf12<span class="hl opt">)</span>
    <span class="hl kwa">in</span>
      <span class="hl slc">// empty</span>
    <span class="hl kwa">end</span> <span class="hl slc">// end of [if]</span>
  <span class="hl slc">// end of [loop]</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> loop <span class="hl opt">(</span>view&#64; bodies | <span class="hl opt">&amp;</span>bodies<span class="hl opt">,</span> n<span class="hl opt">,</span> dt<span class="hl opt">)</span>
<span class="hl opt">}</span> <span class="hl slc">// end of [advance]</span>

fn energy <span class="hl opt">{</span>n<span class="hl opt">:</span>pos<span class="hl opt">}</span>
  <span class="hl opt">(</span>bodies<span class="hl opt">: &amp;</span>planetarr n<span class="hl opt">,</span> n<span class="hl opt">:</span> <span class="hl kwb">int</span> n<span class="hl opt">):&lt;&gt;</span> double <span class="hl opt">=</span> e where <span class="hl opt">{</span>
  <span class="hl kwa">fun</span> loop_inner
    <span class="hl opt">{</span>l1<span class="hl opt">:</span>addr<span class="hl opt">} {</span>n2<span class="hl opt">:</span>nat<span class="hl opt">} {</span>l2<span class="hl opt">:</span>addr<span class="hl opt">} .&lt;</span>n2<span class="hl opt">&gt;. (</span>
      pf1<span class="hl opt">: !</span>planet &#64; l1<span class="hl opt">,</span> pf2<span class="hl opt">: !</span>planetarr n2 &#64; l2
    | p1<span class="hl opt">:</span> ptr l1<span class="hl opt">,</span> p2<span class="hl opt">:</span> ptr l2<span class="hl opt">,</span> n2<span class="hl opt">:</span> <span class="hl kwb">int</span> n2<span class="hl opt">,</span> e<span class="hl opt">: &amp;</span>double
    <span class="hl opt">) :&lt;&gt;</span> void <span class="hl opt">=</span>
    <span class="hl kwa">if</span> n2 <span class="hl opt">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then let</span>
      prval <span class="hl opt">(</span>pf21<span class="hl opt">,</span> pf22<span class="hl opt">) =</span> array_v_uncons <span class="hl opt">{</span>planet<span class="hl opt">} (</span>pf2<span class="hl opt">)</span>
      <span class="hl kwa">val</span> dx <span class="hl opt">=</span> p1<span class="hl opt">-&gt;</span>x <span class="hl opt">-</span> p2<span class="hl opt">-&gt;</span>x
      <span class="hl kwa">and</span> dy <span class="hl opt">=</span> p1<span class="hl opt">-&gt;</span>y <span class="hl opt">-</span> p2<span class="hl opt">-&gt;</span>y
      <span class="hl kwa">and</span> dz <span class="hl opt">=</span> p1<span class="hl opt">-&gt;</span>z <span class="hl opt">-</span> p2<span class="hl opt">-&gt;</span>z
      <span class="hl kwa">val</span> dist <span class="hl opt">=</span> sqrt <span class="hl opt">(</span>dx <span class="hl opt">*</span> dx <span class="hl opt">+</span> dy <span class="hl opt">*</span> dy <span class="hl opt">+</span> dz <span class="hl opt">*</span> dz<span class="hl opt">)</span>
      <span class="hl kwa">val</span> <span class="hl opt">() =</span> e <span class="hl opt">-= (</span>p1<span class="hl opt">-&gt;</span>mass <span class="hl opt">*</span> p2<span class="hl opt">-&gt;</span>mass<span class="hl opt">)</span> / dist
      <span class="hl kwa">val</span> <span class="hl opt">() =</span> loop_inner <span class="hl opt">(</span>pf1<span class="hl opt">,</span> pf22 | p1<span class="hl opt">,</span> p2<span class="hl opt">+</span>sizeof<span class="hl opt">&lt;</span>planet<span class="hl opt">&gt;,</span> n2<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">,</span> e<span class="hl opt">)</span>
      prval <span class="hl opt">() =</span> pf2 <span class="hl opt">:=</span> array_v_cons <span class="hl opt">{</span>planet<span class="hl opt">} (</span>pf21<span class="hl opt">,</span> pf22<span class="hl opt">)</span>
    <span class="hl kwa">in</span>
      <span class="hl slc">// empty</span>
    <span class="hl kwa">end</span> <span class="hl slc">// end of [if]</span>
  <span class="hl slc">// end of [loop_inner]</span>
  <span class="hl kwa">fun</span> loop_outer <span class="hl opt">{</span>n1<span class="hl opt">:</span>nat<span class="hl opt">} {</span>l1<span class="hl opt">:</span>addr<span class="hl opt">} .&lt;</span>n1<span class="hl opt">&gt;. (</span>
      pf1<span class="hl opt">: !</span>planetarr n1 &#64; l1 | p1<span class="hl opt">:</span> ptr l1<span class="hl opt">,</span> n1<span class="hl opt">:</span> <span class="hl kwb">int</span> n1<span class="hl opt">,</span> e<span class="hl opt">: &amp;</span>double
    <span class="hl opt">) :&lt;&gt;</span> void <span class="hl opt">=</span>
    <span class="hl kwa">if</span> n1 <span class="hl opt">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then let</span>
      prval <span class="hl opt">(</span>pf11<span class="hl opt">,</span> pf12<span class="hl opt">) =</span> array_v_uncons <span class="hl opt">{</span>planet<span class="hl opt">} (</span>pf1<span class="hl opt">)</span>
      <span class="hl kwa">val</span> vx <span class="hl opt">=</span> p1<span class="hl opt">-&gt;</span>vx <span class="hl kwa">and</span> vy <span class="hl opt">=</span> p1<span class="hl opt">-&gt;</span>vy <span class="hl kwa">and</span> vz <span class="hl opt">=</span> p1<span class="hl opt">-&gt;</span>vz
      <span class="hl kwa">val</span> <span class="hl opt">() =</span> e <span class="hl opt">+=</span> <span class="hl num">0.5</span> <span class="hl opt">*</span> p1<span class="hl opt">-&gt;</span>mass <span class="hl opt">* (</span>vx <span class="hl opt">*</span> vx <span class="hl opt">+</span> vy <span class="hl opt">*</span> vy <span class="hl opt">+</span> vz <span class="hl opt">*</span> vz<span class="hl opt">)</span>
      <span class="hl kwa">val</span> p2 <span class="hl opt">=</span> p1<span class="hl opt">+</span>sizeof<span class="hl opt">&lt;</span>planet<span class="hl opt">&gt;</span> <span class="hl kwa">and</span> n2 <span class="hl opt">=</span> n1<span class="hl opt">-</span><span class="hl num">1</span>
      <span class="hl kwa">val</span> <span class="hl opt">() =</span> loop_inner <span class="hl opt">(</span>pf11<span class="hl opt">,</span> pf12 | p1<span class="hl opt">,</span> p2<span class="hl opt">,</span> n2<span class="hl opt">,</span> e<span class="hl opt">)</span>
      <span class="hl kwa">val</span> <span class="hl opt">() =</span> loop_outer <span class="hl opt">(</span>pf12 | p2<span class="hl opt">,</span> n2<span class="hl opt">,</span> e<span class="hl opt">)</span>
      prval <span class="hl opt">() =</span> pf1 <span class="hl opt">:=</span> array_v_cons <span class="hl opt">{</span>planet<span class="hl opt">} (</span>pf11<span class="hl opt">,</span> pf12<span class="hl opt">)</span>
    <span class="hl kwa">in</span>
      <span class="hl slc">// empty</span>
    <span class="hl kwa">end</span> <span class="hl slc">// end of [loop_outer]</span>
  <span class="hl slc">// end of [loop_outer]</span>
  var e<span class="hl opt">:</span> double <span class="hl opt">=</span> <span class="hl num">0.0</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> loop_outer <span class="hl opt">(</span>view&#64; bodies | <span class="hl opt">&amp;</span>bodies<span class="hl opt">,</span> n<span class="hl opt">,</span> e<span class="hl opt">)</span>
<span class="hl opt">}</span> <span class="hl slc">// end of [energy]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl ppc">#define PI 3.1415926535898</span>
<span class="hl ppc">#define SOLAR_MASS (4.0 * PI * PI)</span>

fn offmoment <span class="hl opt">{</span>n<span class="hl opt">:</span>pos<span class="hl opt">}</span>
  <span class="hl opt">(</span>bodies<span class="hl opt">: &amp;</span>planetarr n<span class="hl opt">,</span> n<span class="hl opt">:</span> <span class="hl kwb">int</span> n<span class="hl opt">):&lt;&gt;</span> void <span class="hl opt">= ()</span> where <span class="hl opt">{</span>
  var px<span class="hl opt">:</span> double <span class="hl opt">=</span> <span class="hl num">0.0</span> <span class="hl kwa">and</span> py<span class="hl opt">:</span> double <span class="hl opt">=</span> <span class="hl num">0.0</span> <span class="hl kwa">and</span> pz<span class="hl opt">:</span> double <span class="hl opt">=</span> <span class="hl num">0.0</span>
  var i<span class="hl opt">:</span> natLte <span class="hl opt">(</span>n<span class="hl opt">)</span> <span class="hl slc">// uninitialized</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> <span class="hl kwa">for</span><span class="hl opt">* {</span>i<span class="hl opt">:</span> nat | i <span class="hl opt">&lt;=</span> n<span class="hl opt">} .&lt;</span>n<span class="hl opt">-</span>i<span class="hl opt">&gt;.</span> 
    <span class="hl opt">(</span>i<span class="hl opt">:</span> <span class="hl kwb">int</span> i<span class="hl opt">) =&gt; (</span>i <span class="hl opt">:=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> n<span class="hl opt">;</span> i <span class="hl opt">:=</span> i <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">)</span> <span class="hl kwa">let</span>
    <span class="hl kwa">val</span> mass <span class="hl opt">=</span> bodies<span class="hl opt">.[</span>i<span class="hl opt">].</span>mass
    <span class="hl kwa">val</span> <span class="hl opt">() =</span> px <span class="hl opt">+=</span> bodies<span class="hl opt">.[</span>i<span class="hl opt">].</span>vx <span class="hl opt">*</span> mass
    <span class="hl kwa">val</span> <span class="hl opt">() =</span> py <span class="hl opt">+=</span> bodies<span class="hl opt">.[</span>i<span class="hl opt">].</span>vy <span class="hl opt">*</span> mass
    <span class="hl kwa">val</span> <span class="hl opt">() =</span> pz <span class="hl opt">+=</span> bodies<span class="hl opt">.[</span>i<span class="hl opt">].</span>vz <span class="hl opt">*</span> mass
  <span class="hl kwa">in</span>
    <span class="hl slc">// empty</span>
  <span class="hl kwa">end</span> <span class="hl slc">// end of [val]</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> bodies<span class="hl opt">.[</span><span class="hl num">0</span><span class="hl opt">].</span>vx <span class="hl opt">:=</span> ~ px / <span class="hl kwd">SOLAR_MASS</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> bodies<span class="hl opt">.[</span><span class="hl num">0</span><span class="hl opt">].</span>vy <span class="hl opt">:=</span> ~ py / <span class="hl kwd">SOLAR_MASS</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> bodies<span class="hl opt">.[</span><span class="hl num">0</span><span class="hl opt">].</span>vz <span class="hl opt">:=</span> ~ pz / <span class="hl kwd">SOLAR_MASS</span>
<span class="hl opt">}</span> <span class="hl slc">// end of [offset]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl ppc">#define N 5</span>

sta l_theBodies<span class="hl opt">:</span> addr
<span class="hl kwa">extern</span> prval pfbox_theBodies<span class="hl opt">:</span> vbox <span class="hl opt">(</span>planetarr<span class="hl opt">(</span><span class="hl kwd">N</span><span class="hl opt">)</span> &#64; l_theBodies<span class="hl opt">)</span>
<span class="hl kwa">val</span> p_theBodies <span class="hl opt">=</span> $extval <span class="hl opt">(</span>ptr <span class="hl opt">(</span>l_theBodies<span class="hl opt">),</span> <span class="hl str">&quot;&amp;theBodies[0]&quot;</span><span class="hl opt">)</span>

<span class="hl kwa">implement</span> main <span class="hl opt">(</span>argc<span class="hl opt">,</span> argv<span class="hl opt">) = ()</span> where <span class="hl opt">{</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> <span class="hl kwa">assert</span> <span class="hl opt">(</span>argc <span class="hl opt">=</span> <span class="hl num">2</span><span class="hl opt">)</span>
  <span class="hl kwa">val</span> n <span class="hl opt">=</span> int1_of <span class="hl opt">(</span>argv<span class="hl opt">.[</span><span class="hl num">1</span><span class="hl opt">]);</span> <span class="hl kwa">val</span> <span class="hl opt">() =</span> <span class="hl kwa">assert</span> <span class="hl opt">(</span>n <span class="hl opt">&gt;=</span> <span class="hl num">2</span><span class="hl opt">)</span>
  prval vbox <span class="hl opt">(</span>pf_theBodies<span class="hl opt">) =</span> pfbox_theBodies
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> offmoment <span class="hl opt">(!</span>p_theBodies<span class="hl opt">,</span> <span class="hl kwd">N</span><span class="hl opt">)</span>
  <span class="hl kwa">val</span> e_beg <span class="hl opt">=</span> energy <span class="hl opt">(!</span>p_theBodies<span class="hl opt">,</span> <span class="hl kwd">N</span><span class="hl opt">)</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> $effmask_ref <span class="hl opt">(</span>printf <span class="hl opt">(</span><span class="hl str">&quot;%.9f</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> &#64;<span class="hl opt">(</span>e_beg<span class="hl opt">)))</span>
  var i<span class="hl opt">:</span> <span class="hl kwb">int</span> <span class="hl slc">// unintialized ()</span>
  <span class="hl kwa">val</span> dt <span class="hl opt">=</span> <span class="hl num">0.01</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">:=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> n<span class="hl opt">;</span> i <span class="hl opt">:=</span> i <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">)</span> advance <span class="hl opt">(!</span>p_theBodies<span class="hl opt">,</span> <span class="hl kwd">N</span><span class="hl opt">,</span> dt<span class="hl opt">)</span>
  <span class="hl kwa">val</span> e_fin <span class="hl opt">=</span> energy <span class="hl opt">(!</span>p_theBodies<span class="hl opt">,</span> <span class="hl kwd">N</span><span class="hl opt">)</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> $effmask_ref <span class="hl opt">(</span>printf <span class="hl opt">(</span><span class="hl str">&quot;%.9f</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> &#64;<span class="hl opt">(</span>e_fin<span class="hl opt">)))</span>
<span class="hl opt">}</span> <span class="hl slc">// end of [main]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl slc">// reuse some existing C code for initialization</span>

<span class="hl opt">%{^</span> <span class="hl slc">// put at the beginning</span>

<span class="hl ppc">#define PI 3.1415926535898</span>
<span class="hl ppc">#define SOLAR_MASS (4.0 * PI * PI)</span>
<span class="hl ppc">#define DAYS_PER_YEAR 365.24</span>

<span class="hl ppc">#define NBODY 5</span>

<span class="hl kwa">struct</span> planet <span class="hl opt">{</span>
  double x<span class="hl opt">;</span> double y<span class="hl opt">;</span> double z<span class="hl opt">;</span> double vx<span class="hl opt">;</span> double vy<span class="hl opt">;</span> double vz<span class="hl opt">;</span> double mass<span class="hl opt">;</span>
<span class="hl opt">} ;</span>

<span class="hl kwa">struct</span> planet theBodies<span class="hl opt">[</span><span class="hl kwd">NBODY</span><span class="hl opt">] = {</span>
  <span class="hl opt">{</span> <span class="hl com">/* sun */</span>
    <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl kwd">SOLAR_MASS</span>
  <span class="hl opt">}</span>
<span class="hl opt">, {</span> <span class="hl com">/* jupiter */</span>
    <span class="hl num">4.84143144246472090e+00</span><span class="hl opt">,</span>
   <span class="hl opt">-</span><span class="hl num">1.16032004402742839e+00</span><span class="hl opt">,</span>
   <span class="hl opt">-</span><span class="hl num">1.03622044471123109e-01</span><span class="hl opt">,</span>
    <span class="hl num">1.66007664274403694e-03</span> <span class="hl opt">*</span> <span class="hl kwd">DAYS_PER_YEAR</span><span class="hl opt">,</span>
    <span class="hl num">7.69901118419740425e-03</span> <span class="hl opt">*</span> <span class="hl kwd">DAYS_PER_YEAR</span><span class="hl opt">,</span>
   <span class="hl opt">-</span><span class="hl num">6.90460016972063023e-05</span> <span class="hl opt">*</span> <span class="hl kwd">DAYS_PER_YEAR</span><span class="hl opt">,</span>
    <span class="hl num">9.54791938424326609e-04</span> <span class="hl opt">*</span> <span class="hl kwd">SOLAR_MASS</span>
  <span class="hl opt">}</span>
<span class="hl opt">, {</span>  <span class="hl com">/* saturn */</span>
    <span class="hl num">8.34336671824457987e+00</span><span class="hl opt">,</span>
    <span class="hl num">4.12479856412430479e+00</span><span class="hl opt">,</span>
   <span class="hl opt">-</span><span class="hl num">4.03523417114321381e-01</span><span class="hl opt">,</span>
   <span class="hl opt">-</span><span class="hl num">2.76742510726862411e-03</span> <span class="hl opt">*</span> <span class="hl kwd">DAYS_PER_YEAR</span><span class="hl opt">,</span>
    <span class="hl num">4.99852801234917238e-03</span> <span class="hl opt">*</span> <span class="hl kwd">DAYS_PER_YEAR</span><span class="hl opt">,</span>
    <span class="hl num">2.30417297573763929e-05</span> <span class="hl opt">*</span> <span class="hl kwd">DAYS_PER_YEAR</span><span class="hl opt">,</span>
    <span class="hl num">2.85885980666130812e-04</span> <span class="hl opt">*</span> <span class="hl kwd">SOLAR_MASS</span>
  <span class="hl opt">}</span>
<span class="hl opt">, {</span> <span class="hl com">/* uranus */</span>
    <span class="hl num">1.28943695621391310e+01</span><span class="hl opt">,</span>
   <span class="hl opt">-</span><span class="hl num">1.51111514016986312e+01</span><span class="hl opt">,</span>
   <span class="hl opt">-</span><span class="hl num">2.23307578892655734e-01</span><span class="hl opt">,</span>
    <span class="hl num">2.96460137564761618e-03</span> <span class="hl opt">*</span> <span class="hl kwd">DAYS_PER_YEAR</span><span class="hl opt">,</span>
    <span class="hl num">2.37847173959480950e-03</span> <span class="hl opt">*</span> <span class="hl kwd">DAYS_PER_YEAR</span><span class="hl opt">,</span>
   <span class="hl opt">-</span><span class="hl num">2.96589568540237556e-05</span> <span class="hl opt">*</span> <span class="hl kwd">DAYS_PER_YEAR</span><span class="hl opt">,</span>
    <span class="hl num">4.36624404335156298e-05</span> <span class="hl opt">*</span> <span class="hl kwd">SOLAR_MASS</span>
  <span class="hl opt">}</span>
<span class="hl opt">, {</span> <span class="hl com">/* neptune */</span>
    <span class="hl num">1.53796971148509165e+01</span><span class="hl opt">,</span>
   <span class="hl opt">-</span><span class="hl num">2.59193146099879641e+01</span><span class="hl opt">,</span>
    <span class="hl num">1.79258772950371181e-01</span><span class="hl opt">,</span>
    <span class="hl num">2.68067772490389322e-03</span> <span class="hl opt">*</span> <span class="hl kwd">DAYS_PER_YEAR</span><span class="hl opt">,</span>
    <span class="hl num">1.62824170038242295e-03</span> <span class="hl opt">*</span> <span class="hl kwd">DAYS_PER_YEAR</span><span class="hl opt">,</span>
   <span class="hl opt">-</span><span class="hl num">9.51592254519715870e-05</span> <span class="hl opt">*</span> <span class="hl kwd">DAYS_PER_YEAR</span><span class="hl opt">,</span>
    <span class="hl num">5.15138902046611451e-05</span> <span class="hl opt">*</span> <span class="hl kwd">SOLAR_MASS</span>
  <span class="hl opt">}</span>
<span class="hl opt">} ;</span>

<span class="hl opt">%}</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl com">(* end of [n-body2.dats] *)</span>
