<span class="hl slc">-----------------------------------------</span>
<span class="hl slc">-- The Computer Language Benchmarks Game</span>
<span class="hl slc">-- http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">-- </span>
<span class="hl slc">-- Contributed by Jim Rogers</span>
<span class="hl slc">-----------------------------------------</span>
<span class="hl kwa">package</span> Spectral_Utils <span class="hl kwa">is</span>
   <span class="hl kwa">type</span> Matrix <span class="hl kwa">is array</span><span class="hl opt">(</span><span class="hl kwb">Natural</span> <span class="hl kwa">range</span> <span class="hl opt">&lt;&gt;)</span> <span class="hl kwa">of</span> <span class="hl kwb">Long_Float</span><span class="hl opt">;</span>
   
   <span class="hl kwa">function</span> Eval_A<span class="hl opt">(</span>I<span class="hl opt">,</span> J <span class="hl opt">:</span> <span class="hl kwb">Integer</span><span class="hl opt">)</span> <span class="hl kwa">return</span> <span class="hl kwb">Long_Float</span><span class="hl opt">;</span>
   <span class="hl kwa">procedure</span> Eval_A_Times<span class="hl opt">(</span>U <span class="hl opt">:</span> Matrix<span class="hl opt">;</span> Au <span class="hl opt">:</span> <span class="hl kwa">out</span> Matrix<span class="hl opt">);</span>
   <span class="hl kwa">procedure</span> Eval_At_Times<span class="hl opt">(</span>U <span class="hl opt">:</span> Matrix<span class="hl opt">;</span> Au <span class="hl opt">:</span> <span class="hl kwa">out</span> Matrix<span class="hl opt">);</span>
   <span class="hl kwa">procedure</span> Eval_Ata_Times_U<span class="hl opt">(</span>U <span class="hl opt">:</span> Matrix<span class="hl opt">;</span> Atau <span class="hl opt">:</span> <span class="hl kwa">out</span> Matrix<span class="hl opt">);</span>
<span class="hl kwa">end</span> Spectral_Utils<span class="hl opt">;</span>

<span class="hl slc">-----------------------------------------</span>
<span class="hl slc">-- The Great Computer Language Shootout</span>
<span class="hl slc">--</span>
<span class="hl slc">-- Contributed by Jim Rogers</span>
<span class="hl slc">-----------------------------------------</span>
<span class="hl kwa">package body</span> Spectral_Utils <span class="hl kwa">is</span>

   <span class="hl kwa">function</span> Eval_A <span class="hl opt">(</span>I<span class="hl opt">,</span> J <span class="hl opt">:</span> <span class="hl kwb">Integer</span><span class="hl opt">)</span> <span class="hl kwa">return</span> <span class="hl kwb">Long_Float</span> <span class="hl kwa">is</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">return</span> <span class="hl num">1.0</span> <span class="hl opt">/</span> <span class="hl kwb">Long_Float</span><span class="hl opt">((</span>I <span class="hl opt">+</span> J<span class="hl opt">) * (</span>I <span class="hl opt">+</span> J <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">) /</span><span class="hl num">2</span> <span class="hl opt">+</span> I <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">);</span>
   <span class="hl kwa">end</span> Eval_A<span class="hl opt">;</span>
   
   <span class="hl kwa">procedure</span> Eval_A_Times <span class="hl opt">(</span>U <span class="hl opt">:</span> Matrix<span class="hl opt">;</span> Au <span class="hl opt">:</span> <span class="hl kwa">out</span> Matrix<span class="hl opt">)</span> <span class="hl kwa">is</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">for</span> I <span class="hl kwa">in</span> Au<span class="hl kwd">'range</span> <span class="hl kwa">loop</span>
         Au<span class="hl opt">(</span>I<span class="hl opt">) :=</span> <span class="hl num">0.0</span><span class="hl opt">;</span>
         <span class="hl kwa">for</span> J <span class="hl kwa">in</span> U<span class="hl kwd">'range</span> <span class="hl kwa">loop</span>
            Au<span class="hl opt">(</span>I<span class="hl opt">) :=</span> Au<span class="hl opt">(</span>I<span class="hl opt">) +</span> Eval_A<span class="hl opt">(</span>I<span class="hl opt">,</span> J<span class="hl opt">) *</span> U<span class="hl opt">(</span>J<span class="hl opt">);</span>
         <span class="hl kwa">end loop</span><span class="hl opt">;</span>
      <span class="hl kwa">end loop</span><span class="hl opt">;</span>
   <span class="hl kwa">end</span> Eval_A_Times<span class="hl opt">;</span>
   
   <span class="hl kwa">procedure</span> Eval_At_Times <span class="hl opt">(</span>U <span class="hl opt">:</span> Matrix<span class="hl opt">;</span> Au <span class="hl opt">:</span> <span class="hl kwa">out</span> Matrix<span class="hl opt">)</span> <span class="hl kwa">is</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">for</span> I <span class="hl kwa">in</span> Au<span class="hl kwd">'range</span> <span class="hl kwa">loop</span>
         Au<span class="hl opt">(</span>I<span class="hl opt">) :=</span> <span class="hl num">0.0</span><span class="hl opt">;</span>
         <span class="hl kwa">for</span> J <span class="hl kwa">in</span> U<span class="hl kwd">'range</span> <span class="hl kwa">loop</span>
            Au<span class="hl opt">(</span>I<span class="hl opt">) :=</span> Au<span class="hl opt">(</span>I<span class="hl opt">) +</span> Eval_A<span class="hl opt">(</span>J<span class="hl opt">,</span> I<span class="hl opt">) *</span> U<span class="hl opt">(</span>J<span class="hl opt">);</span>
         <span class="hl kwa">end loop</span><span class="hl opt">;</span>
      <span class="hl kwa">end loop</span><span class="hl opt">;</span>
   <span class="hl kwa">end</span> Eval_At_Times<span class="hl opt">;</span>
   
   <span class="hl kwa">procedure</span> Eval_Ata_Times_U <span class="hl opt">(</span>U <span class="hl opt">:</span> Matrix<span class="hl opt">;</span> Atau <span class="hl opt">:</span> <span class="hl kwa">out</span> Matrix<span class="hl opt">)</span> <span class="hl kwa">is</span>
      V <span class="hl opt">:</span> Matrix<span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">..</span>U<span class="hl kwd">'Length</span> <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">);</span>
   <span class="hl kwa">begin</span>
      Eval_A_Times<span class="hl opt">(</span>U<span class="hl opt">,</span> V<span class="hl opt">);</span>
      Eval_At_Times<span class="hl opt">(</span>V<span class="hl opt">,</span> Atau<span class="hl opt">);</span>
   <span class="hl kwa">end</span> Eval_Ata_Times_U<span class="hl opt">;</span>
   
<span class="hl kwa">end</span> Spectral_Utils<span class="hl opt">;</span>

<span class="hl slc">-----------------------------------------------------------</span>
<span class="hl slc">-- The Great Computer Language Shootout</span>
<span class="hl slc">--</span>
<span class="hl slc">-- Contributed by Jim Rogers</span>
<span class="hl slc">-----------------------------------------------------------</span>

<span class="hl kwa">with</span> Ada<span class="hl opt">.</span>Text_Io<span class="hl opt">;</span>
<span class="hl kwa">with</span> Ada<span class="hl opt">.</span>Numerics<span class="hl opt">.</span>Generic_Elementary_Functions <span class="hl opt">;</span>
<span class="hl kwa">with</span> Ada<span class="hl opt">.</span>Command_Line<span class="hl opt">;</span> <span class="hl kwa">use</span> Ada<span class="hl opt">.</span>Command_Line<span class="hl opt">;</span>
<span class="hl kwa">with</span> Spectral_Utils<span class="hl opt">;</span> <span class="hl kwa">use</span> Spectral_Utils<span class="hl opt">;</span>

<span class="hl kwa">procedure</span> SpectralNorm <span class="hl kwa">is</span>
   <span class="hl kwa">package</span> Long_Io <span class="hl kwa">is new</span> Ada<span class="hl opt">.</span>Text_Io<span class="hl opt">.</span>Float_Io<span class="hl opt">(</span><span class="hl kwb">Long_Float</span><span class="hl opt">);</span>
   <span class="hl kwa">package</span> Long_Funcs <span class="hl kwa">is new</span> Ada<span class="hl opt">.</span>Numerics<span class="hl opt">.</span>Generic_Elementary_Functions<span class="hl opt">(</span><span class="hl kwb">Long_Float</span><span class="hl opt">);</span>
   <span class="hl kwa">use</span> Long_Funcs<span class="hl opt">;</span>
   N <span class="hl opt">:</span> <span class="hl kwb">Natural</span> <span class="hl opt">:=</span> <span class="hl num">100</span><span class="hl opt">;</span>
   Vbv<span class="hl opt">,</span> vv <span class="hl opt">:</span> <span class="hl kwb">Long_Float</span> <span class="hl opt">:=</span> <span class="hl num">0.0</span><span class="hl opt">;</span>
<span class="hl kwa">begin</span>
   <span class="hl kwa">if</span> Argument_Count <span class="hl opt">=</span> <span class="hl num">1</span> <span class="hl kwa">then</span>
      N <span class="hl opt">:=</span> <span class="hl kwb">Natural</span><span class="hl kwd">'Value</span><span class="hl opt">(</span>Argument<span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">));</span>
   <span class="hl kwa">end if</span><span class="hl opt">;</span>
   
   <span class="hl kwa">declare</span>
      U <span class="hl opt">:</span> Matrix<span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">..</span>N<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">) := (</span><span class="hl kwa">Others</span> <span class="hl opt">=&gt;</span> <span class="hl num">1.0</span><span class="hl opt">);</span>
      V <span class="hl opt">:</span> Matrix<span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">..</span>N<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">) := (</span><span class="hl kwa">Others</span> <span class="hl opt">=&gt;</span> <span class="hl num">0.0</span><span class="hl opt">);</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">for</span> I <span class="hl kwa">in</span> <span class="hl num">1</span><span class="hl opt">.</span><span class="hl num">.10</span> <span class="hl kwa">loop</span>
         Eval_Ata_Times_U<span class="hl opt">(</span>U<span class="hl opt">,</span> V<span class="hl opt">);</span>
         Eval_Ata_Times_U<span class="hl opt">(</span>V<span class="hl opt">,</span> U<span class="hl opt">);</span>
      <span class="hl kwa">end loop</span><span class="hl opt">;</span>
      <span class="hl kwa">for</span> I <span class="hl kwa">in</span> V<span class="hl kwd">'range</span> <span class="hl kwa">loop</span>
         Vbv <span class="hl opt">:=</span> Vbv <span class="hl opt">+</span> U<span class="hl opt">(</span>I<span class="hl opt">) *</span> V<span class="hl opt">(</span>I<span class="hl opt">);</span>
         Vv <span class="hl opt">:=</span> Vv <span class="hl opt">+</span> V<span class="hl opt">(</span>I<span class="hl opt">)*</span>V<span class="hl opt">(</span>I<span class="hl opt">);</span>
      <span class="hl kwa">end loop</span><span class="hl opt">;</span>
   <span class="hl kwa">end</span><span class="hl opt">;</span>
   Long_Io<span class="hl opt">.</span>Put<span class="hl opt">(</span>Item <span class="hl opt">=&gt;</span> Sqrt<span class="hl opt">(</span>Vbv<span class="hl opt">/</span>Vv<span class="hl opt">),</span> Fore <span class="hl opt">=&gt;</span> <span class="hl num">1</span><span class="hl opt">,</span> Aft <span class="hl opt">=&gt;</span> <span class="hl num">9</span><span class="hl opt">,</span> Exp <span class="hl opt">=&gt;</span> <span class="hl num">0</span><span class="hl opt">);</span>
   Ada<span class="hl opt">.</span>Text_Io<span class="hl opt">.</span>New_Line<span class="hl opt">;</span>
<span class="hl kwa">end</span> SpectralNorm<span class="hl opt">;</span>





