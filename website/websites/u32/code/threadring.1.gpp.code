<span class="hl com">/*</span>
<span class="hl com">* The Computer Language Benchmarks Game</span>
<span class="hl com">* http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">* contributed by Premysl Hruby</span>
<span class="hl com">*/</span>


<span class="hl ppc">#include &lt;stdio.h&gt;</span>
<span class="hl ppc">#include &lt;stdlib.h&gt;</span>
<span class="hl ppc">#include &lt;iostream&gt;</span>
<span class="hl ppc">#include &lt;pthread.h&gt;</span>
<span class="hl ppc">#include &lt;sched.h&gt;</span>

<span class="hl kwc">typedef</span> <span class="hl kwb">unsigned int</span> uint<span class="hl opt">;</span>

<span class="hl kwb">const</span> uint NUM_THREADS   <span class="hl opt">=</span> <span class="hl num">503</span><span class="hl opt">;</span>
<span class="hl kwb">const</span> uint STACK_SIZE   <span class="hl opt">=</span> <span class="hl num">16</span><span class="hl opt">*</span><span class="hl num">1024</span><span class="hl opt">;</span>

<span class="hl kwb">int</span> token <span class="hl opt">= -</span><span class="hl num">1</span><span class="hl opt">;</span>

<span class="hl kwc">class</span> RingThread<span class="hl opt">;</span>
RingThread<span class="hl opt">*</span> rt_arr<span class="hl opt">[</span>NUM_THREADS<span class="hl opt">] = {</span><span class="hl num">0</span><span class="hl opt">};</span>

<span class="hl kwc">class</span> RingThread
<span class="hl opt">{</span>
<span class="hl kwc">private</span><span class="hl opt">:</span>
   pthread_mutex_t   m_mutex<span class="hl opt">;</span>
   uint   node_id<span class="hl opt">;</span>
   uint   next_id<span class="hl opt">;</span>

<span class="hl kwc">public</span><span class="hl opt">:</span>

   <span class="hl kwd">RingThread</span><span class="hl opt">(</span> <span class="hl kwb">int</span> id <span class="hl opt">)</span>
   <span class="hl opt">{</span>
      <span class="hl slc">//mutex type is PTHREAD_MUTEX_NORMAL</span>
      <span class="hl slc">// we want self lock behaviour</span>
      <span class="hl kwd">pthread_mutex_init</span><span class="hl opt">( &amp;</span>m_mutex<span class="hl opt">,</span> <span class="hl num">0</span> <span class="hl opt">);</span>

      node_id <span class="hl opt">=</span> id<span class="hl opt">;</span>
      next_id <span class="hl opt">=</span> id <span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">;</span>

      <span class="hl kwa">if</span> <span class="hl opt">(</span>next_id <span class="hl opt">==</span> NUM_THREADS<span class="hl opt">)</span>
         next_id <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
   <span class="hl opt">}</span>

   <span class="hl kwc">inline</span> <span class="hl kwb">void</span> <span class="hl kwd">AcquireLock</span><span class="hl opt">()</span>
   <span class="hl opt">{</span>
      <span class="hl slc">// type is PTHREAD_MUTEX_NORMAL, therefore, try to lock to a locked </span>
      <span class="hl slc">// mutex will result deadlock. However, other thread will unlock for this</span>
      <span class="hl slc">// mutex</span>
      <span class="hl kwd">pthread_mutex_lock</span><span class="hl opt">( &amp;</span>m_mutex <span class="hl opt">);</span>
   <span class="hl opt">}</span>
   <span class="hl kwc">inline</span> <span class="hl kwb">void</span> <span class="hl kwd">ReleaseLock</span><span class="hl opt">()</span>
   <span class="hl opt">{</span>
      <span class="hl kwd">pthread_mutex_unlock</span><span class="hl opt">( &amp;</span>m_mutex <span class="hl opt">);</span>
   <span class="hl opt">}</span>

   <span class="hl kwb">static void</span><span class="hl opt">*</span> <span class="hl kwd">Run</span><span class="hl opt">(</span> <span class="hl kwb">void</span><span class="hl opt">*</span> param <span class="hl opt">)</span>
   <span class="hl opt">{</span>
      RingThread<span class="hl opt">*</span> prt <span class="hl opt">= (</span>RingThread<span class="hl opt">*)</span>param<span class="hl opt">;</span>

      <span class="hl kwa">while</span> <span class="hl opt">(</span><span class="hl kwa">true</span><span class="hl opt">)</span>
      <span class="hl opt">{</span>
         <span class="hl slc">// is my turn???</span>
         prt<span class="hl opt">-&gt;</span><span class="hl kwd">AcquireLock</span><span class="hl opt">();</span>

         <span class="hl kwa">if</span> <span class="hl opt">(</span>token <span class="hl opt">!=</span> <span class="hl num">0</span><span class="hl opt">)</span>
            token<span class="hl opt">--;</span>
         <span class="hl kwa">else</span> <span class="hl slc">// this turn is the end of token passing</span>
         <span class="hl opt">{</span>
            std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt; (</span>prt<span class="hl opt">-&gt;</span>node_id <span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">) &lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
            <span class="hl kwd">exit</span><span class="hl opt">(</span> <span class="hl num">0</span> <span class="hl opt">);</span> <span class="hl slc">// a fast way to terminate :D</span>
         <span class="hl opt">}</span>

         rt_arr<span class="hl opt">[</span> prt<span class="hl opt">-&gt;</span>next_id <span class="hl opt">]-&gt;</span><span class="hl kwd">ReleaseLock</span><span class="hl opt">();</span> <span class="hl slc">// release lock for next thread</span>
         <span class="hl kwd">sched_yield</span><span class="hl opt">();</span> <span class="hl slc">// my turn is finished. Yield cpu for next thread</span>
      <span class="hl opt">}</span>
   <span class="hl opt">}</span>
<span class="hl opt">};</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span><span class="hl opt">**</span> argv<span class="hl opt">)</span>
<span class="hl opt">{</span>
   token <span class="hl opt">= (</span>argc <span class="hl opt">==</span> <span class="hl num">2</span><span class="hl opt">)</span> ? <span class="hl kwd">atoi</span><span class="hl opt">(</span> argv<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">] ) :</span> <span class="hl num">1000</span><span class="hl opt">;</span>
   <span class="hl slc">//std::cout &lt;&lt; token;</span>

   <span class="hl slc">// must set stack size for each thread. Otherwise, can't spawn 503 threads :)</span>
   pthread_attr_t stack_att<span class="hl opt">;</span>
   <span class="hl kwd">pthread_attr_init</span><span class="hl opt">( &amp;</span>stack_att <span class="hl opt">);</span>
   <span class="hl kwd">pthread_attr_setstacksize</span><span class="hl opt">( &amp;</span>stack_att<span class="hl opt">,</span> STACK_SIZE <span class="hl opt">);</span>
   pthread_t ht<span class="hl opt">;</span>

   <span class="hl kwa">for</span> <span class="hl opt">(</span>uint i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> NUM_THREADS<span class="hl opt">;</span> i<span class="hl opt">++)</span>
   <span class="hl opt">{</span>
      RingThread<span class="hl opt">*</span> r <span class="hl opt">=</span>  <span class="hl kwa">new</span> <span class="hl kwd">RingThread</span><span class="hl opt">(</span> i <span class="hl opt">);</span>

      rt_arr<span class="hl opt">[</span>i<span class="hl opt">] =</span> r<span class="hl opt">;</span>
      r<span class="hl opt">-&gt;</span><span class="hl kwd">AcquireLock</span><span class="hl opt">();</span>

      <span class="hl kwd">pthread_create</span><span class="hl opt">( &amp;</span>ht<span class="hl opt">, &amp;</span>stack_att<span class="hl opt">, &amp;</span>RingThread<span class="hl opt">::</span>Run<span class="hl opt">, (</span><span class="hl kwb">void</span><span class="hl opt">*)</span>r <span class="hl opt">);</span>
   <span class="hl opt">}</span>

   <span class="hl slc">// let's roll</span>
   rt_arr<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">]-&gt;</span><span class="hl kwd">ReleaseLock</span><span class="hl opt">();</span>

   <span class="hl slc">// wait for result</span>
   <span class="hl kwd">pthread_join</span><span class="hl opt">(</span> ht<span class="hl opt">,</span> <span class="hl num">0</span> <span class="hl opt">);</span>

   <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>

