<span class="hl com">(* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   Adapted by Antti Lankila from the earlier Isaac Gouy's implementation</span>
<span class="hl com">   Add multithread &amp; tweaks from C++ by The Anh Tran</span>
<span class="hl com">   Ported to F# by Don Syme</span>
<span class="hl com">   Add memory reduction and performance tweaks by Jomo Fisher</span>
<span class="hl com">*)</span>

<span class="hl kwa">open</span> <span class="hl kwd">System</span>
<span class="hl kwa">open</span> <span class="hl kwd">System</span><span class="hl opt">.</span><span class="hl kwd">Threading</span>
<span class="hl kwa">open</span> <span class="hl kwd">System</span><span class="hl opt">.</span><span class="hl kwd">IO</span>

<span class="hl kwa">let</span> out <span class="hl opt">=</span> <span class="hl kwd">Console</span><span class="hl opt">.</span><span class="hl kwd">OpenStandardOutput</span><span class="hl opt">()</span>

<span class="hl slc">// Helper type to accumulate a bit array</span>
<span class="hl kwa">type</span> <span class="hl kwd">BitAccumulator</span><span class="hl opt">(</span>n<span class="hl opt">) =</span> 
    <span class="hl kwa">let</span> numBytes <span class="hl opt">= (</span>n<span class="hl opt">+</span><span class="hl num">7</span><span class="hl opt">)/</span><span class="hl num">8</span>
    <span class="hl kwa">let</span> numBits <span class="hl opt">=</span> n <span class="hl opt">&amp;&amp;&amp;</span> <span class="hl num">7</span>
    <span class="hl kwa">let mutable</span> byteCount <span class="hl opt">=</span> <span class="hl num">0</span>
    <span class="hl kwa">let mutable</span> bitNum <span class="hl opt">=</span> <span class="hl num">0</span>
    <span class="hl kwa">let mutable</span> byteAcc <span class="hl opt">=</span> <span class="hl num">0</span>
    <span class="hl kwa">let mutable</span> pdata <span class="hl opt">:</span> byte array <span class="hl opt">=</span> <span class="hl kwd">Array</span><span class="hl opt">.</span>zeroCreate numBytes

    <span class="hl kwa">member</span> x<span class="hl opt">.</span><span class="hl kwd">Reinit</span><span class="hl opt">() =</span> 
        byteCount <span class="hl opt">&lt;-</span> <span class="hl num">0</span>
        bitNum <span class="hl opt">&lt;-</span> <span class="hl num">0</span>
        byteAcc <span class="hl opt">&lt;-</span> <span class="hl num">0</span>       

    <span class="hl kwa">member</span> x<span class="hl opt">.</span><span class="hl kwd">Add</span> b <span class="hl opt">=</span>     
        byteAcc <span class="hl opt">&lt;- (</span>byteAcc <span class="hl opt">&lt;&lt;&lt;</span> <span class="hl num">1</span><span class="hl opt">)</span> ||| <span class="hl opt">(</span><span class="hl kwa">if</span> b <span class="hl kwa">then</span> <span class="hl num">1</span> <span class="hl kwa">else</span> <span class="hl num">0</span><span class="hl opt">);</span>

        bitNum <span class="hl opt">&lt;-</span> bitNum <span class="hl opt">+</span> <span class="hl num">1</span>
        <span class="hl kwa">if</span> bitNum <span class="hl opt">=</span> <span class="hl num">8</span> <span class="hl kwa">then</span> 
           pdata<span class="hl opt">.[</span>byteCount<span class="hl opt">] &lt;-</span> byte byteAcc<span class="hl opt">;</span>
           byteCount <span class="hl opt">&lt;-</span> byteCount <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span>
           byteAcc <span class="hl opt">&lt;-</span> <span class="hl num">0</span><span class="hl opt">;</span>
           bitNum <span class="hl opt">&lt;-</span> <span class="hl num">0</span><span class="hl opt">;</span>

    <span class="hl kwa">member</span> x<span class="hl opt">.</span><span class="hl kwd">Close</span><span class="hl opt">() =</span>     
        <span class="hl slc">// write left over bits</span>
        <span class="hl kwa">if</span> bitNum <span class="hl opt">&lt;&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
            byteAcc <span class="hl opt">&lt;-</span> byteAcc <span class="hl opt">&lt;&lt;&lt; (</span><span class="hl num">8</span> <span class="hl opt">-</span> numBits<span class="hl opt">)</span>
            pdata<span class="hl opt">.[</span>byteCount<span class="hl opt">] &lt;-</span> byte byteAcc
            byteCount <span class="hl opt">&lt;-</span> byteCount<span class="hl opt">+</span><span class="hl num">1</span>

    <span class="hl kwa">member</span> x<span class="hl opt">.</span><span class="hl kwd">Data</span> <span class="hl opt">=</span> pdata
    <span class="hl kwa">member</span> x<span class="hl opt">.</span><span class="hl kwd">ByteCount</span> <span class="hl opt">=</span> byteCount

<span class="hl kwa">type</span> <span class="hl kwd">ThreadState</span><span class="hl opt">(</span>n<span class="hl opt">) =</span> 
    <span class="hl kwa">let</span> ba <span class="hl opt">=</span> <span class="hl kwd">BitAccumulator</span><span class="hl opt">(</span>n<span class="hl opt">)</span>
    <span class="hl kwa">let mutable</span> finishedLine <span class="hl opt">= -</span><span class="hl num">1</span>
    <span class="hl kwa">member</span> ts<span class="hl opt">.</span><span class="hl kwd">BitAccumulator</span> <span class="hl opt">=</span> ba
    <span class="hl kwa">member</span> ts<span class="hl opt">.</span><span class="hl kwd">IsReadyToWork</span> <span class="hl opt">=</span> finishedLine <span class="hl opt">= -</span><span class="hl num">1</span>
    <span class="hl kwa">member</span> ts<span class="hl opt">.</span><span class="hl kwd">SetFinishedLine</span><span class="hl opt">(</span>lineNumber<span class="hl opt">) =</span>
        finishedLine <span class="hl opt">&lt;-</span> lineNumber
    <span class="hl kwa">member</span> ts<span class="hl opt">.</span><span class="hl kwd">TryWriteLine</span><span class="hl opt">(</span>nextLine<span class="hl opt">) =</span> 
        <span class="hl kwa">if</span> finishedLine <span class="hl opt">=</span> nextLine <span class="hl kwa">then</span>
            out<span class="hl opt">.</span><span class="hl kwd">Write</span><span class="hl opt">(</span> ba<span class="hl opt">.</span><span class="hl kwd">Data</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> ba<span class="hl opt">.</span><span class="hl kwd">ByteCount</span><span class="hl opt">);</span>
            finishedLine <span class="hl opt">&lt;- -</span><span class="hl num">1</span>
            ba<span class="hl opt">.</span><span class="hl kwd">Reinit</span><span class="hl opt">()</span>
            <span class="hl kwa">true</span>
        <span class="hl kwa">else false</span>

<span class="hl slc">// Initialize an array by a parallel init using all available processors</span>
<span class="hl kwa">let</span> parallelArrayInit n f <span class="hl opt">=</span> 
    <span class="hl kwa">let</span> currentLine <span class="hl opt">=</span> <span class="hl kwb">ref</span> <span class="hl opt">-</span><span class="hl num">1</span>
    <span class="hl kwa">let</span> lastWritten <span class="hl opt">=</span> <span class="hl kwb">ref</span> <span class="hl opt">-</span><span class="hl num">1</span>
    <span class="hl kwa">let rec</span> loop <span class="hl opt">(</span>ts<span class="hl opt">:</span><span class="hl kwd">ThreadState</span><span class="hl opt">) =</span> 
        <span class="hl kwa">if</span> ts<span class="hl opt">.</span><span class="hl kwd">IsReadyToWork</span> <span class="hl kwa">then</span> 
            <span class="hl kwa">let</span> y <span class="hl opt">=</span> <span class="hl kwd">Interlocked</span><span class="hl opt">.</span><span class="hl kwd">Increment</span><span class="hl opt">(&amp;</span>currentLine<span class="hl opt">.</span>contents<span class="hl opt">)</span>
            <span class="hl kwa">if</span> y <span class="hl opt">&lt;</span> n <span class="hl kwa">then</span> 
                f ts<span class="hl opt">.</span><span class="hl kwd">BitAccumulator</span> y
                ts<span class="hl opt">.</span><span class="hl kwd">SetFinishedLine</span><span class="hl opt">(</span>y<span class="hl opt">)</span>
                loop<span class="hl opt">(</span>ts<span class="hl opt">)</span>
        elif ts<span class="hl opt">.</span><span class="hl kwd">TryWriteLine</span><span class="hl opt">(!</span>lastWritten <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">)</span> <span class="hl kwa">then</span>
            <span class="hl kwd">Interlocked</span><span class="hl opt">.</span><span class="hl kwd">Increment</span><span class="hl opt">(&amp;</span>lastWritten<span class="hl opt">.</span>contents<span class="hl opt">)</span> |<span class="hl opt">&gt;</span> ignore
            loop<span class="hl opt">(</span>ts<span class="hl opt">)</span>
        <span class="hl kwa">else</span> loop<span class="hl opt">(</span>ts<span class="hl opt">)</span>

    <span class="hl kwd">Async</span><span class="hl opt">.</span><span class="hl kwd">Parallel</span> <span class="hl opt">[</span> <span class="hl kwa">for</span> i <span class="hl kwa">in</span> <span class="hl num">1</span> <span class="hl opt">..</span> <span class="hl kwd">Environment</span><span class="hl opt">.</span><span class="hl kwd">ProcessorCount</span> <span class="hl opt">-&gt;</span> async <span class="hl opt">{</span><span class="hl kwa">do</span> loop<span class="hl opt">(</span><span class="hl kwd">ThreadState</span><span class="hl opt">(</span>n<span class="hl opt">)) } ]</span> 
       |<span class="hl opt">&gt;</span> <span class="hl kwd">Async</span><span class="hl opt">.</span><span class="hl kwd">Ignore</span> 
       |<span class="hl opt">&gt;</span> <span class="hl kwd">Async</span><span class="hl opt">.</span><span class="hl kwd">RunSynchronously</span>

<span class="hl opt">[&lt;</span><span class="hl kwd">EntryPoint</span><span class="hl opt">&gt;]</span>
<span class="hl kwa">let</span> main args <span class="hl opt">=</span>
    <span class="hl kwa">let</span> start <span class="hl opt">=</span> <span class="hl kwd">System</span><span class="hl opt">.</span><span class="hl kwd">DateTime</span><span class="hl opt">.</span><span class="hl kwd">Now</span>
    <span class="hl kwa">let</span> numLines <span class="hl opt">=</span> <span class="hl kwa">if</span> <span class="hl opt">(</span>args<span class="hl opt">.</span><span class="hl kwd">Length</span> <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">then</span> <span class="hl kwb">int</span> args<span class="hl opt">.[</span><span class="hl num">0</span><span class="hl opt">]</span> <span class="hl kwa">else</span> <span class="hl num">200</span> 
    <span class="hl kwd">Console</span><span class="hl opt">.</span><span class="hl kwd">Out</span><span class="hl opt">.</span><span class="hl kwd">Write</span><span class="hl opt">(</span><span class="hl str">&quot;P4</span><span class="hl esc">\n</span><span class="hl str">{0} {0}</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> numLines<span class="hl opt">);</span>
    <span class="hl kwa">let</span> inversen <span class="hl opt">=</span> <span class="hl num">2.0</span> <span class="hl opt">/</span> <span class="hl kwb">float</span> numLines<span class="hl opt">;</span>

    parallelArrayInit numLines <span class="hl opt">(</span><span class="hl kwa">fun</span> ba y <span class="hl opt">-&gt;</span> 

        <span class="hl kwa">let</span> civ <span class="hl opt">=</span> <span class="hl kwb">float</span> y <span class="hl opt">*</span> inversen <span class="hl opt">-</span> <span class="hl num">1.0</span><span class="hl opt">;</span>

        <span class="hl kwa">for</span> x <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> numLines <span class="hl opt">-</span> <span class="hl num">1</span> <span class="hl kwa">do</span> 
            <span class="hl kwa">let</span> crv <span class="hl opt">=</span> <span class="hl kwb">float</span> x <span class="hl opt">*</span> inversen <span class="hl opt">-</span> <span class="hl num">1.5</span><span class="hl opt">;</span>

            <span class="hl kwa">let rec</span> innerLoop i zrv ziv trv tiv <span class="hl opt">=</span> 
               <span class="hl kwa">let</span> ziv <span class="hl opt">= (</span>zrv<span class="hl opt">*</span>ziv<span class="hl opt">) + (</span>zrv<span class="hl opt">*</span>ziv<span class="hl opt">) +</span> civ<span class="hl opt">;</span>
               <span class="hl kwa">let</span> zrv <span class="hl opt">=</span> trv <span class="hl opt">-</span> tiv <span class="hl opt">+</span> crv<span class="hl opt">;</span>

               <span class="hl kwa">let</span> trv <span class="hl opt">=</span> zrv <span class="hl opt">*</span> zrv<span class="hl opt">;</span>
               <span class="hl kwa">let</span> tiv <span class="hl opt">=</span> ziv <span class="hl opt">*</span> ziv<span class="hl opt">;</span>
               <span class="hl kwa">if</span> <span class="hl opt">((</span>trv <span class="hl opt">+</span> tiv<span class="hl opt">) &lt;=</span> <span class="hl num">4.0</span><span class="hl opt">) &amp;&amp; (</span>i <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">then</span> 
                   innerLoop <span class="hl opt">(</span>i<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">)</span> zrv ziv trv tiv
               <span class="hl kwa">else</span>
                   i

            <span class="hl kwa">let</span> i <span class="hl opt">=</span> innerLoop <span class="hl num">49</span> crv civ <span class="hl opt">(</span>crv <span class="hl opt">*</span> crv<span class="hl opt">) (</span>civ <span class="hl opt">*</span> civ<span class="hl opt">)</span>
            ba<span class="hl opt">.</span><span class="hl kwd">Add</span> <span class="hl opt">((</span>i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">))</span>
        ba<span class="hl opt">.</span><span class="hl kwd">Close</span><span class="hl opt">())</span>

    <span class="hl num">0</span>

