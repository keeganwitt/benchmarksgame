<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * contributed by Ledrug Katz</span>
<span class="hl com"> *</span>
<span class="hl com"> */</span>

<span class="hl ppc">#include &lt;stdio.h&gt;</span>
<span class="hl ppc">#include &lt;stdlib.h&gt;</span>
<span class="hl ppc">#include &lt;stdint.h&gt;</span>

<span class="hl com">/* this depends highly on the platform.  It might be faster to use</span>
<span class="hl com">   char type on 32-bit systems; it might be faster to use unsigned. */</span>

<span class="hl kwc">typedef</span> <span class="hl kwb">int</span> elem<span class="hl opt">;</span>

elem s<span class="hl opt">[</span><span class="hl num">16</span><span class="hl opt">],</span> t<span class="hl opt">[</span><span class="hl num">16</span><span class="hl opt">];</span>

<span class="hl kwb">int</span> maxflips <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl kwb">int</span> max_n<span class="hl opt">;</span>
<span class="hl kwb">int</span> odd <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl kwb">int</span> checksum <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>

<span class="hl kwb">int</span> <span class="hl kwd">flip</span><span class="hl opt">()</span>
<span class="hl opt">{</span>
   <span class="hl kwc">register</span> <span class="hl kwb">int</span> i<span class="hl opt">;</span>
   <span class="hl kwc">register</span> elem <span class="hl opt">*</span>x<span class="hl opt">, *</span>y<span class="hl opt">,</span> c<span class="hl opt">;</span>

   <span class="hl kwa">for</span> <span class="hl opt">(</span>x <span class="hl opt">=</span> t<span class="hl opt">,</span> y <span class="hl opt">=</span> s<span class="hl opt">,</span> i <span class="hl opt">=</span> max_n<span class="hl opt">;</span> i<span class="hl opt">--; )</span>
      <span class="hl opt">*</span>x<span class="hl opt">++ = *</span>y<span class="hl opt">++;</span>
   i <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span>
   <span class="hl kwa">do</span> <span class="hl opt">{</span>
      <span class="hl kwa">for</span> <span class="hl opt">(</span>x <span class="hl opt">=</span> t<span class="hl opt">,</span> y <span class="hl opt">=</span> t <span class="hl opt">+</span> t<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">];</span> x <span class="hl opt">&lt;</span> y<span class="hl opt">; )</span>
         c <span class="hl opt">= *</span>x<span class="hl opt">, *</span>x<span class="hl opt">++ = *</span>y<span class="hl opt">, *</span>y<span class="hl opt">-- =</span> c<span class="hl opt">;</span>
      i<span class="hl opt">++;</span>
   <span class="hl opt">}</span> <span class="hl kwa">while</span> <span class="hl opt">(</span>t<span class="hl opt">[</span>t<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">]]);</span>
   <span class="hl kwa">return</span> i<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwc">inline</span> <span class="hl kwb">void</span> <span class="hl kwd">rotate</span><span class="hl opt">(</span><span class="hl kwb">int</span> n<span class="hl opt">)</span>
<span class="hl opt">{</span>
   elem c<span class="hl opt">;</span>
   <span class="hl kwc">register</span> <span class="hl kwb">int</span> i<span class="hl opt">;</span>
   c <span class="hl opt">=</span> s<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">];</span>
   <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span> i <span class="hl opt">&lt;=</span> n<span class="hl opt">;</span> i<span class="hl opt">++)</span> s<span class="hl opt">[</span>i<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">] =</span> s<span class="hl opt">[</span>i<span class="hl opt">];</span>
   s<span class="hl opt">[</span>n<span class="hl opt">] =</span> c<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl com">/* Tompkin-Paige iterative perm generation */</span>
<span class="hl kwb">void</span> <span class="hl kwd">tk</span><span class="hl opt">(</span><span class="hl kwb">int</span> n<span class="hl opt">)</span>
<span class="hl opt">{</span>
   <span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">,</span> f<span class="hl opt">;</span>
   elem c<span class="hl opt">[</span><span class="hl num">16</span><span class="hl opt">] = {</span><span class="hl num">0</span><span class="hl opt">};</span>

   <span class="hl kwa">while</span> <span class="hl opt">(</span>i <span class="hl opt">&lt;</span> n<span class="hl opt">) {</span>
      <span class="hl kwd">rotate</span><span class="hl opt">(</span>i<span class="hl opt">);</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>c<span class="hl opt">[</span>i<span class="hl opt">] &gt;=</span> i<span class="hl opt">) {</span>
         c<span class="hl opt">[</span>i<span class="hl opt">++] =</span> <span class="hl num">0</span><span class="hl opt">;</span>
         <span class="hl kwa">continue</span><span class="hl opt">;</span>
      <span class="hl opt">}</span>

      c<span class="hl opt">[</span>i<span class="hl opt">]++;</span>
      i <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span>
      odd <span class="hl opt">= ~</span>odd<span class="hl opt">;</span>
      <span class="hl kwa">if</span> <span class="hl opt">(*</span>s<span class="hl opt">) {</span>
         f <span class="hl opt">=</span> s<span class="hl opt">[</span>s<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">]]</span> ? <span class="hl kwd">flip</span><span class="hl opt">() :</span> <span class="hl num">1</span><span class="hl opt">;</span>
         <span class="hl kwa">if</span> <span class="hl opt">(</span>f <span class="hl opt">&gt;</span> maxflips<span class="hl opt">)</span> maxflips <span class="hl opt">=</span> f<span class="hl opt">;</span>
         checksum <span class="hl opt">+=</span> odd ? <span class="hl opt">-</span>f <span class="hl opt">:</span> f<span class="hl opt">;</span>
      <span class="hl opt">}</span>
   <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span> <span class="hl opt">**</span>v<span class="hl opt">)</span>
<span class="hl opt">{</span>
   <span class="hl kwb">int</span> i<span class="hl opt">;</span>

   <span class="hl kwa">if</span> <span class="hl opt">(</span>argc <span class="hl opt">&lt;</span> <span class="hl num">2</span><span class="hl opt">) {</span>
      <span class="hl kwd">fprintf</span><span class="hl opt">(</span>stderr<span class="hl opt">,</span> <span class="hl str">&quot;usage: %s number</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> v<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">]);</span>
      <span class="hl kwd">exit</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">);</span>
   <span class="hl opt">}</span>

   max_n <span class="hl opt">=</span> <span class="hl kwd">atoi</span><span class="hl opt">(</span>v<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">]);</span>
   <span class="hl kwa">if</span> <span class="hl opt">(</span>max_n <span class="hl opt">&lt;</span> <span class="hl num">3</span> <span class="hl opt">||</span> max_n <span class="hl opt">&gt;</span> <span class="hl num">15</span><span class="hl opt">) {</span>
      <span class="hl kwd">fprintf</span><span class="hl opt">(</span>stderr<span class="hl opt">,</span> <span class="hl str">&quot;range: must be 3 &lt;= n &lt;= 12</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">);</span>
      <span class="hl kwd">exit</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">);</span>
   <span class="hl opt">}</span>

   <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> max_n<span class="hl opt">;</span> i<span class="hl opt">++)</span> s<span class="hl opt">[</span>i<span class="hl opt">] =</span> i<span class="hl opt">;</span>
   <span class="hl kwd">tk</span><span class="hl opt">(</span>max_n<span class="hl opt">);</span>

   <span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;%d</span><span class="hl esc">\n</span><span class="hl str">Pfannkuchen(%d) = %d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> checksum<span class="hl opt">,</span> max_n<span class="hl opt">,</span> maxflips<span class="hl opt">);</span>

   <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
