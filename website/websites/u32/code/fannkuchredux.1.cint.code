<span class="hl com">/*</span><span class="hl com"> * The Computer Language Benchmarks Game</span><span class="hl com"> * http://benchmarksgame.alioth.debian.org/</span><span class="hl com"> *</span><span class="hl com"> * converted to C by Joseph Pich√©</span><span class="hl com"> * from Java version by Oleg Mazurov and Isaac Gouy</span><span class="hl com"> *</span><span class="hl com"> * modified by Isaac Gouy for CINT</span><span class="hl com"> *</span><span class="hl com"> */</span><span class="hl dir">#include &lt;stdio.h&gt;</span><span class="hl dir">#include &lt;stdlib.h&gt;</span><span class="hl kwc">inline</span> <span class="hl kwb">static int</span> <span class="hl kwd">max</span><span class="hl sym">(</span><span class="hl kwb">int</span> a<span class="hl sym">,</span> <span class="hl kwb">int</span> b<span class="hl sym">)</span><span class="hl sym">{</span>    <span class="hl kwa">return</span> a <span class="hl sym">&gt;</span> b ? a <span class="hl sym">:</span> b<span class="hl sym">;</span><span class="hl sym">}</span><span class="hl kwb">static int</span> <span class="hl kwd">fannkuchredux</span><span class="hl sym">(</span><span class="hl kwb">int</span> n<span class="hl sym">)</span><span class="hl sym">{</span>    <span class="hl kwb">int</span><span class="hl sym">*</span> perm<span class="hl sym">;</span>    <span class="hl kwb">int</span><span class="hl sym">*</span> perm1<span class="hl sym">;</span>    <span class="hl kwb">int</span><span class="hl sym">*</span> count<span class="hl sym">;</span>    <span class="hl kwb">int</span> maxFlipsCount <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>    <span class="hl kwb">int</span> permCount <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>    <span class="hl kwb">int</span> checksum <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>    <span class="hl kwb">int</span> i<span class="hl sym">;</span>    perm  <span class="hl sym">=</span> <span class="hl kwd">calloc</span><span class="hl sym">(</span>n<span class="hl sym">,</span> <span class="hl kwa">sizeof</span><span class="hl sym">(*</span>perm <span class="hl sym">));</span>    perm1 <span class="hl sym">=</span> <span class="hl kwd">calloc</span><span class="hl sym">(</span>n<span class="hl sym">,</span> <span class="hl kwa">sizeof</span><span class="hl sym">(*</span>perm1<span class="hl sym">));</span>    count <span class="hl sym">=</span> <span class="hl kwd">calloc</span><span class="hl sym">(</span>n<span class="hl sym">,</span> <span class="hl kwa">sizeof</span><span class="hl sym">(*</span>count<span class="hl sym">));</span>    <span class="hl kwa">for</span> <span class="hl sym">(</span>i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> i<span class="hl sym">&lt;</span>n<span class="hl sym">;</span> i<span class="hl sym">+=</span><span class="hl num">1</span><span class="hl sym">)</span>        perm1<span class="hl sym">[</span>i<span class="hl sym">] =</span> i<span class="hl sym">;</span>    <span class="hl kwb">int</span> r <span class="hl sym">=</span> n<span class="hl sym">;</span>    <span class="hl kwa">while</span> <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">) {</span>        <span class="hl kwa">while</span> <span class="hl sym">(</span>r <span class="hl sym">!=</span> <span class="hl num">1</span><span class="hl sym">) {</span>            count<span class="hl sym">[</span>r<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">] =</span> r<span class="hl sym">;</span>            r <span class="hl sym">-=</span> <span class="hl num">1</span><span class="hl sym">;</span>        <span class="hl sym">}</span>        <span class="hl kwa">for</span> <span class="hl sym">(</span>i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> i<span class="hl sym">&lt;</span>n<span class="hl sym">;</span> i<span class="hl sym">+=</span><span class="hl num">1</span><span class="hl sym">)</span>            perm<span class="hl sym">[</span>i<span class="hl sym">] =</span> perm1<span class="hl sym">[</span>i<span class="hl sym">];</span>        <span class="hl kwb">int</span> flipsCount <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>        <span class="hl kwb">int</span> k<span class="hl sym">;</span>        <span class="hl kwa">while</span> <span class="hl sym">( !((</span>k <span class="hl sym">=</span> perm<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]) ==</span> <span class="hl num">0</span><span class="hl sym">) ) {</span>            <span class="hl kwb">int</span> k2 <span class="hl sym">= (</span>k<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">) &gt;&gt;</span> <span class="hl num">1</span><span class="hl sym">;</span>            <span class="hl kwa">for</span> <span class="hl sym">(</span>i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> i<span class="hl sym">&lt;</span>k2<span class="hl sym">;</span> i<span class="hl sym">++) {</span>                <span class="hl kwb">int</span> temp <span class="hl sym">=</span> perm<span class="hl sym">[</span>i<span class="hl sym">];</span> perm<span class="hl sym">[</span>i<span class="hl sym">] =</span> perm<span class="hl sym">[</span>k<span class="hl sym">-</span>i<span class="hl sym">];</span> perm<span class="hl sym">[</span>k<span class="hl sym">-</span>i<span class="hl sym">] =</span> temp<span class="hl sym">;</span>            <span class="hl sym">}</span>            flipsCount <span class="hl sym">+=</span> <span class="hl num">1</span><span class="hl sym">;</span>        <span class="hl sym">}</span>        maxFlipsCount <span class="hl sym">=</span> <span class="hl kwd">max</span><span class="hl sym">(</span>maxFlipsCount<span class="hl sym">,</span> flipsCount<span class="hl sym">);</span>        checksum <span class="hl sym">+=</span> permCount <span class="hl sym">%</span> <span class="hl num">2</span> <span class="hl sym">==</span> <span class="hl num">0</span> ? flipsCount <span class="hl sym">: -</span>flipsCount<span class="hl sym">;</span>        <span class="hl com">/* Use incremental change to generate another permutation */</span>        <span class="hl kwa">while</span> <span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">) {</span>            <span class="hl kwa">if</span> <span class="hl sym">(</span>r <span class="hl sym">==</span> n<span class="hl sym">) {</span>                <span class="hl kwd">printf</span><span class="hl sym">(</span><span class="hl str">&quot;%d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> checksum<span class="hl sym">);</span>                <span class="hl kwa">return</span> maxFlipsCount<span class="hl sym">;</span>            <span class="hl sym">}</span>            <span class="hl kwb">int</span> perm0 <span class="hl sym">=</span> perm1<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">];</span>            i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>            <span class="hl kwa">while</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;</span> r<span class="hl sym">) {</span>                <span class="hl kwb">int</span> j <span class="hl sym">=</span> i <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>                perm1<span class="hl sym">[</span>i<span class="hl sym">] =</span> perm1<span class="hl sym">[</span>j<span class="hl sym">];</span>                i <span class="hl sym">=</span> j<span class="hl sym">;</span>            <span class="hl sym">}</span>            perm1<span class="hl sym">[</span>r<span class="hl sym">] =</span> perm0<span class="hl sym">;</span>            count<span class="hl sym">[</span>r<span class="hl sym">] =</span> count<span class="hl sym">[</span>r<span class="hl sym">] -</span> <span class="hl num">1</span><span class="hl sym">;</span>            <span class="hl kwa">if</span> <span class="hl sym">(</span>count<span class="hl sym">[</span>r<span class="hl sym">] &gt;</span> <span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwa">break</span><span class="hl sym">;</span>            r<span class="hl sym">++;</span>        <span class="hl sym">}</span>        permCount<span class="hl sym">++;</span>    <span class="hl sym">}</span><span class="hl sym">}</span><span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwb">int</span> argc<span class="hl sym">,</span> <span class="hl kwb">char</span> <span class="hl sym">**</span> argv<span class="hl sym">)</span><span class="hl sym">{</span>    <span class="hl kwb">int</span> n <span class="hl sym">=</span> <span class="hl kwd">atoi</span><span class="hl sym">(</span>argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]);</span>    <span class="hl kwd">printf</span><span class="hl sym">(</span><span class="hl str">&quot;Pfannkuchen(%d) = %d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> n<span class="hl sym">,</span> <span class="hl kwd">fannkuchredux</span><span class="hl sym">(</span>n<span class="hl sym">));</span>    <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span><span class="hl sym">}</span>