<span class="hl opt">#</span>lang racket<span class="hl opt">/</span>base

<span class="hl slc">;;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;;; http://benchmarksgame.alioth.debian.org/</span>

<span class="hl slc">;;; Translated directly from the C# version by Isaac Gouy</span>
<span class="hl slc">;;; contributed by Matthew Flatt</span>

<span class="hl slc">;; This version uses unsafe operations</span>

<span class="hl opt">(</span><span class="hl kwa">require</span> racket<span class="hl opt">/</span>cmdline
	 racket<span class="hl opt">/</span>require <span class="hl opt">(</span><span class="hl kwa">for-syntax</span> racket<span class="hl opt">/</span>base<span class="hl opt">)</span>
	 <span class="hl opt">(</span><span class="hl kwa">rename-in</span>
          <span class="hl opt">(</span><span class="hl kwa">filtered-in</span>
           <span class="hl opt">(</span><span class="hl kwa">lambda</span> <span class="hl opt">(</span><span class="hl kwa">name</span><span class="hl opt">) (</span><span class="hl kwa">regexp-replace</span> <span class="hl opt">#</span>rx<span class="hl str">&quot;unsafe-&quot;</span> name <span class="hl str">&quot;&quot;</span><span class="hl opt">))</span>
           racket<span class="hl opt">/</span>unsafe<span class="hl opt">/</span>ops<span class="hl opt">)</span>
          <span class="hl opt">[</span>fx-<span class="hl opt">&gt;</span>fl -<span class="hl opt">&gt;</span>fl<span class="hl opt">])</span>
         <span class="hl opt">(</span><span class="hl kwa">only-in</span> racket<span class="hl opt">/</span>flonum make-flvector<span class="hl opt">))</span>


<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">Approximate</span> n<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">([</span>u <span class="hl opt">(</span><span class="hl kwa">make-flvector</span> n <span class="hl num">1.0</span><span class="hl opt">)]</span>
        <span class="hl opt">[</span>v <span class="hl opt">(</span><span class="hl kwa">make-flvector</span> n <span class="hl num">0.0</span><span class="hl opt">)])</span>
    <span class="hl slc">;; 20 steps of the power method</span>
    <span class="hl opt">(</span><span class="hl kwa">for</span> <span class="hl opt">([</span>i <span class="hl opt">(</span><span class="hl kwa">in-range</span> <span class="hl num">10</span><span class="hl opt">)])</span>
      <span class="hl opt">(</span><span class="hl kwa">MultiplyAtAv</span> n u v<span class="hl opt">)</span>
      <span class="hl opt">(</span><span class="hl kwa">MultiplyAtAv</span> n v u<span class="hl opt">))</span>
    
    <span class="hl slc">;; B=AtA         A multiplied by A transposed</span>
    <span class="hl slc">;; v.Bv /(v.v)   eigenvalue of v</span>
    <span class="hl opt">(</span><span class="hl kwa">let</span> loop <span class="hl opt">([</span>i <span class="hl num">0</span><span class="hl opt">][</span>vBv <span class="hl num">0.0</span><span class="hl opt">][</span>vv <span class="hl num">0.0</span><span class="hl opt">])</span>
      <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(=</span> i n<span class="hl opt">)</span>
          <span class="hl opt">(</span><span class="hl kwa">flsqrt</span> <span class="hl opt">(</span><span class="hl kwa">fl</span><span class="hl opt">/</span> vBv vv<span class="hl opt">))</span>
          <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">([</span>vi <span class="hl opt">(</span><span class="hl kwa">flvector-ref</span> v i<span class="hl opt">)])</span>
            <span class="hl opt">(</span><span class="hl kwa">loop</span> <span class="hl opt">(</span><span class="hl kwa">add1</span> i<span class="hl opt">)</span>
                  <span class="hl opt">(</span><span class="hl kwa">fl</span><span class="hl opt">+</span> vBv <span class="hl opt">(</span><span class="hl kwa">fl</span><span class="hl opt">* (</span><span class="hl kwa">flvector-ref</span> u i<span class="hl opt">)</span> vi<span class="hl opt">))</span>
                  <span class="hl opt">(</span><span class="hl kwa">fl</span><span class="hl opt">+</span> vv <span class="hl opt">(</span><span class="hl kwa">fl</span><span class="hl opt">*</span> vi vi<span class="hl opt">))))))))</span>

<span class="hl slc">;; return element i,j of infinite matrix A</span>
<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">A</span> i j<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">fl</span><span class="hl opt">/</span> <span class="hl num">1.0</span> <span class="hl opt">(</span><span class="hl kwa">fl</span><span class="hl opt">+ (</span><span class="hl kwa">fl</span><span class="hl opt">* (</span><span class="hl kwa">-</span><span class="hl opt">&gt;</span>fl <span class="hl opt">(+</span> i j<span class="hl opt">))</span>
                     <span class="hl opt">(</span><span class="hl kwa">fl</span><span class="hl opt">/ (</span><span class="hl kwa">-</span><span class="hl opt">&gt;</span>fl <span class="hl opt">(+</span> i <span class="hl opt">(+</span> j <span class="hl num">1</span><span class="hl opt">)))</span> <span class="hl num">2.0</span><span class="hl opt">))</span> 
                <span class="hl opt">(</span><span class="hl kwa">-</span><span class="hl opt">&gt;</span>fl <span class="hl opt">(+</span> i <span class="hl num">1</span><span class="hl opt">)))))</span>

<span class="hl slc">;; multiply vector v by matrix A</span>
<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">MultiplyAv</span> n v Av<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">for</span> <span class="hl opt">([</span>i <span class="hl opt">(</span><span class="hl kwa">in-range</span> n<span class="hl opt">)])</span>
    <span class="hl opt">(</span><span class="hl kwa">flvector-set</span><span class="hl opt">!</span> Av i 
                   <span class="hl opt">(</span><span class="hl kwa">for</span><span class="hl opt">/</span>fold <span class="hl opt">([</span>r <span class="hl num">0.0</span><span class="hl opt">])</span>
                       <span class="hl opt">([</span>j <span class="hl opt">(</span><span class="hl kwa">in-range</span> n<span class="hl opt">)])</span>
                     <span class="hl opt">(</span><span class="hl kwa">fl</span><span class="hl opt">+</span> r <span class="hl opt">(</span><span class="hl kwa">fl</span><span class="hl opt">* (</span><span class="hl kwa">A</span> i j<span class="hl opt">) (</span><span class="hl kwa">flvector-ref</span> v j<span class="hl opt">)))))))</span>

<span class="hl slc">;; multiply vector v by matrix A transposed</span>
<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">MultiplyAtv</span> n v Atv<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">for</span> <span class="hl opt">([</span>i <span class="hl opt">(</span><span class="hl kwa">in-range</span> n<span class="hl opt">)])</span>
    <span class="hl opt">(</span><span class="hl kwa">flvector-set</span><span class="hl opt">!</span> Atv i
                   <span class="hl opt">(</span><span class="hl kwa">for</span><span class="hl opt">/</span>fold <span class="hl opt">([</span>r <span class="hl num">0.0</span><span class="hl opt">])</span>
                       <span class="hl opt">([</span>j <span class="hl opt">(</span><span class="hl kwa">in-range</span> n<span class="hl opt">)])</span>
                     <span class="hl opt">(</span><span class="hl kwa">fl</span><span class="hl opt">+</span> r <span class="hl opt">(</span><span class="hl kwa">fl</span><span class="hl opt">* (</span><span class="hl kwa">A</span> j i<span class="hl opt">) (</span><span class="hl kwa">flvector-ref</span> v j<span class="hl opt">)))))))</span>

<span class="hl slc">;; multiply vector v by matrix A and then by matrix A transposed </span>
<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">MultiplyAtAv</span> n v AtAv<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">([</span>u <span class="hl opt">(</span><span class="hl kwa">make-flvector</span> n <span class="hl num">0.0</span><span class="hl opt">)])</span>
    <span class="hl opt">(</span><span class="hl kwa">MultiplyAv</span> n v u<span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl kwa">MultiplyAtv</span> n u AtAv<span class="hl opt">)))</span>

<span class="hl opt">(</span><span class="hl kwa">printf</span> <span class="hl str">&quot;~a</span><span class="hl esc">\n</span><span class="hl str">&quot;</span>
        <span class="hl opt">(</span><span class="hl kwa">real-</span><span class="hl opt">&gt;</span>decimal-string
         <span class="hl opt">(</span><span class="hl kwa">Approximate</span> <span class="hl opt">(</span><span class="hl kwa">command-line</span> <span class="hl opt">#:</span>args <span class="hl opt">(</span><span class="hl kwa">n</span><span class="hl opt">) (</span><span class="hl kwa">string-</span><span class="hl opt">&gt;</span>number n<span class="hl opt">)))</span>
         <span class="hl num">9</span><span class="hl opt">))</span>
