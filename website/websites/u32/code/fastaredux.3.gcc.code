<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"> * </span>
<span class="hl com"> *  contributed by Petr Prokhorenkov</span>
<span class="hl com"> */</span>

<span class="hl ppc">#include &lt;stdio.h&gt;</span>
<span class="hl ppc">#include &lt;stdlib.h&gt;</span>
<span class="hl ppc">#include &lt;string.h&gt;</span>

<span class="hl ppc">#define ARRAY_SIZE(a) (sizeof(a)/sizeof(a[0]))</span>
<span class="hl ppc">#define unlikely(x) __builtin_expect((x), 0)</span>

<span class="hl ppc">#define IM 139968</span>
<span class="hl ppc">#define IA 3877</span>
<span class="hl ppc">#define IC 29573</span>

<span class="hl ppc">#define LINE_LEN 60</span>
<span class="hl ppc">#define LOOKUP_SIZE 4096</span>
<span class="hl ppc">#define LOOKUP_SCALE ((float)(LOOKUP_SIZE - 1))</span>

<span class="hl kwc">typedef</span> <span class="hl kwb">unsigned</span> random_t<span class="hl opt">;</span>

<span class="hl kwb">void</span>
<span class="hl kwd">random_init</span><span class="hl opt">(</span>random_t <span class="hl opt">*</span>random<span class="hl opt">) {</span>
    <span class="hl opt">*</span>random <span class="hl opt">=</span> <span class="hl num">42</span><span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl slc">// Special version with result rescaled to LOOKUP_SCALE.</span>
<span class="hl kwb">static</span> <span class="hl kwc">inline</span>
<span class="hl kwb">float</span>
<span class="hl kwd">random_next_lookup</span><span class="hl opt">(</span>random_t <span class="hl opt">*</span>random<span class="hl opt">) {</span>
    <span class="hl opt">*</span>random <span class="hl opt">= (*</span>random<span class="hl opt">*</span>IA <span class="hl opt">+</span> IC<span class="hl opt">)%</span>IM<span class="hl opt">;</span>

    <span class="hl kwa">return</span> <span class="hl opt">(*</span>random<span class="hl opt">)*(</span>LOOKUP_SCALE<span class="hl opt">/</span>IM<span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwb">struct</span> amino_acid <span class="hl opt">{</span>
   <span class="hl kwb">char</span> sym<span class="hl opt">;</span>
   <span class="hl kwb">float</span> prob<span class="hl opt">;</span>
   <span class="hl kwb">float</span> cprob_lookup<span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl kwb">void</span>
<span class="hl kwd">repeat</span><span class="hl opt">(</span><span class="hl kwb">const char</span> <span class="hl opt">*</span>alu<span class="hl opt">,</span> <span class="hl kwb">const char</span> <span class="hl opt">*</span>title<span class="hl opt">,</span> <span class="hl kwb">int</span> n<span class="hl opt">) {</span>
    <span class="hl kwb">int</span> len <span class="hl opt">=</span> <span class="hl kwd">strlen</span><span class="hl opt">(</span>alu<span class="hl opt">);</span>
    <span class="hl kwb">char</span> buffer<span class="hl opt">[</span>len <span class="hl opt">+</span> LINE_LEN<span class="hl opt">];</span>
    <span class="hl kwb">int</span> pos <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>

    <span class="hl kwd">memcpy</span><span class="hl opt">(</span>buffer<span class="hl opt">,</span> alu<span class="hl opt">,</span> len<span class="hl opt">);</span>
    <span class="hl kwd">memcpy</span><span class="hl opt">(</span>buffer <span class="hl opt">+</span> len<span class="hl opt">,</span> alu<span class="hl opt">,</span> LINE_LEN<span class="hl opt">);</span>

    <span class="hl kwd">fputs_unlocked</span><span class="hl opt">(</span>title<span class="hl opt">,</span> stdout<span class="hl opt">);</span>
    <span class="hl kwa">while</span> <span class="hl opt">(</span>n <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">) {</span>
        <span class="hl kwb">int</span> bytes <span class="hl opt">=</span> n <span class="hl opt">&gt;</span> LINE_LEN ? LINE_LEN <span class="hl opt">:</span> n<span class="hl opt">;</span>

        <span class="hl kwd">fwrite_unlocked</span><span class="hl opt">(</span>buffer <span class="hl opt">+</span> pos<span class="hl opt">,</span> bytes<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">,</span> stdout<span class="hl opt">);</span>
        pos <span class="hl opt">+=</span> bytes<span class="hl opt">;</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>pos <span class="hl opt">&gt;</span> len<span class="hl opt">) {</span>
            pos <span class="hl opt">-=</span> len<span class="hl opt">;</span>
        <span class="hl opt">}</span>
        <span class="hl kwd">fputc_unlocked</span><span class="hl opt">(</span><span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl opt">,</span> stdout<span class="hl opt">);</span>
        n <span class="hl opt">-=</span> bytes<span class="hl opt">;</span>
    <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl com">/*</span>
<span class="hl com"> * Lookup table contains mapping from real values to cumulative</span>
<span class="hl com"> * probabilities. Careful selection of table size allows lookup</span>
<span class="hl com"> * virtually in constant time.</span>
<span class="hl com"> *</span>
<span class="hl com"> * All cumulative probabilities are rescaled to LOOKUP_SCALE,</span>
<span class="hl com"> * this allows to save one multiplication operation on each iteration</span>
<span class="hl com"> * in randomize().</span>
<span class="hl com"> */</span>

<span class="hl kwb">void</span> <span class="hl opt">*</span>
<span class="hl kwd">fill_lookup</span><span class="hl opt">(</span><span class="hl kwb">struct</span> amino_acid <span class="hl opt">**</span>lookup<span class="hl opt">,</span> <span class="hl kwb">struct</span> amino_acid <span class="hl opt">*</span>amino_acid<span class="hl opt">,</span> <span class="hl kwb">int</span> amino_acid_size<span class="hl opt">) {</span>
    <span class="hl kwb">float</span> p <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> amino_acid_size<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
        p <span class="hl opt">+=</span> amino_acid<span class="hl opt">[</span>i<span class="hl opt">].</span>prob<span class="hl opt">;</span>
        amino_acid<span class="hl opt">[</span>i<span class="hl opt">].</span>cprob_lookup <span class="hl opt">=</span> p<span class="hl opt">*</span>LOOKUP_SCALE<span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl slc">// Prevent rounding error.</span>
    amino_acid<span class="hl opt">[</span>amino_acid_size <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">].</span>cprob_lookup <span class="hl opt">=</span> LOOKUP_SIZE <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">;</span>

    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">,</span> j <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> LOOKUP_SIZE<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
        <span class="hl kwa">while</span> <span class="hl opt">(</span>amino_acid<span class="hl opt">[</span>j<span class="hl opt">].</span>cprob_lookup <span class="hl opt">&lt;</span> i<span class="hl opt">) {</span>
            j<span class="hl opt">++;</span>
        <span class="hl opt">}</span>
        lookup<span class="hl opt">[</span>i<span class="hl opt">] = &amp;</span>amino_acid<span class="hl opt">[</span>j<span class="hl opt">];</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwb">void</span>
<span class="hl kwd">randomize</span><span class="hl opt">(</span><span class="hl kwb">struct</span> amino_acid <span class="hl opt">*</span>amino_acid<span class="hl opt">,</span> <span class="hl kwb">int</span> amino_acid_size<span class="hl opt">,</span>
        <span class="hl kwb">const char</span> <span class="hl opt">*</span>title<span class="hl opt">,</span> <span class="hl kwb">int</span> n<span class="hl opt">,</span> random_t <span class="hl opt">*</span>rand<span class="hl opt">) {</span>
    <span class="hl kwb">struct</span> amino_acid <span class="hl opt">*</span>lookup<span class="hl opt">[</span>LOOKUP_SIZE<span class="hl opt">];</span>
    <span class="hl kwb">char</span> line_buffer<span class="hl opt">[</span>LINE_LEN <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">];</span>
    <span class="hl kwb">int</span> i<span class="hl opt">,</span> j<span class="hl opt">;</span>

    line_buffer<span class="hl opt">[</span>LINE_LEN<span class="hl opt">] =</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl opt">;</span>

    <span class="hl kwd">fill_lookup</span><span class="hl opt">(</span>lookup<span class="hl opt">,</span> amino_acid<span class="hl opt">,</span> amino_acid_size<span class="hl opt">);</span>

    <span class="hl kwd">fputs_unlocked</span><span class="hl opt">(</span>title<span class="hl opt">,</span> stdout<span class="hl opt">);</span>

    <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">,</span> j <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> n<span class="hl opt">;</span> i<span class="hl opt">++,</span> j<span class="hl opt">++) {</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>j <span class="hl opt">==</span> LINE_LEN<span class="hl opt">) {</span>
            <span class="hl kwd">fwrite_unlocked</span><span class="hl opt">(</span>line_buffer<span class="hl opt">,</span> LINE_LEN <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">,</span> stdout<span class="hl opt">);</span>
            j <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
        <span class="hl opt">}</span>

        <span class="hl kwb">float</span> r <span class="hl opt">=</span> <span class="hl kwd">random_next_lookup</span><span class="hl opt">(</span>rand<span class="hl opt">);</span>
        <span class="hl kwb">struct</span> amino_acid <span class="hl opt">*</span>u <span class="hl opt">=</span> lookup<span class="hl opt">[(</span><span class="hl kwb">short</span><span class="hl opt">)</span>r<span class="hl opt">];</span>
        <span class="hl kwa">while</span> <span class="hl opt">(</span><span class="hl kwd">unlikely</span><span class="hl opt">(</span>u<span class="hl opt">-&gt;</span>cprob_lookup <span class="hl opt">&lt;</span> r<span class="hl opt">)) {</span>
            <span class="hl opt">++</span>u<span class="hl opt">;</span>
        <span class="hl opt">}</span>
        line_buffer<span class="hl opt">[</span>j<span class="hl opt">] =</span> u<span class="hl opt">-&gt;</span>sym<span class="hl opt">;</span>
    <span class="hl opt">}</span>
    line_buffer<span class="hl opt">[</span>j<span class="hl opt">] =</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl opt">;</span>
    <span class="hl kwd">fwrite_unlocked</span><span class="hl opt">(</span>line_buffer<span class="hl opt">,</span> j <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">,</span> stdout<span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwb">struct</span> amino_acid amino_acid<span class="hl opt">[] = {</span>
   <span class="hl opt">{</span> <span class="hl str">'a'</span><span class="hl opt">,</span> <span class="hl num">0.27</span> <span class="hl opt">},</span>
   <span class="hl opt">{</span> <span class="hl str">'c'</span><span class="hl opt">,</span> <span class="hl num">0.12</span> <span class="hl opt">},</span>
   <span class="hl opt">{</span> <span class="hl str">'g'</span><span class="hl opt">,</span> <span class="hl num">0.12</span> <span class="hl opt">},</span>
   <span class="hl opt">{</span> <span class="hl str">'t'</span><span class="hl opt">,</span> <span class="hl num">0.27</span> <span class="hl opt">},</span>

   <span class="hl opt">{</span> <span class="hl str">'B'</span><span class="hl opt">,</span> <span class="hl num">0.02</span> <span class="hl opt">},</span>
   <span class="hl opt">{</span> <span class="hl str">'D'</span><span class="hl opt">,</span> <span class="hl num">0.02</span> <span class="hl opt">},</span>
   <span class="hl opt">{</span> <span class="hl str">'H'</span><span class="hl opt">,</span> <span class="hl num">0.02</span> <span class="hl opt">},</span>
   <span class="hl opt">{</span> <span class="hl str">'K'</span><span class="hl opt">,</span> <span class="hl num">0.02</span> <span class="hl opt">},</span>
   <span class="hl opt">{</span> <span class="hl str">'M'</span><span class="hl opt">,</span> <span class="hl num">0.02</span> <span class="hl opt">},</span>
   <span class="hl opt">{</span> <span class="hl str">'N'</span><span class="hl opt">,</span> <span class="hl num">0.02</span> <span class="hl opt">},</span>
   <span class="hl opt">{</span> <span class="hl str">'R'</span><span class="hl opt">,</span> <span class="hl num">0.02</span> <span class="hl opt">},</span>
   <span class="hl opt">{</span> <span class="hl str">'S'</span><span class="hl opt">,</span> <span class="hl num">0.02</span> <span class="hl opt">},</span>
   <span class="hl opt">{</span> <span class="hl str">'V'</span><span class="hl opt">,</span> <span class="hl num">0.02</span> <span class="hl opt">},</span>
   <span class="hl opt">{</span> <span class="hl str">'W'</span><span class="hl opt">,</span> <span class="hl num">0.02</span> <span class="hl opt">},</span>
   <span class="hl opt">{</span> <span class="hl str">'Y'</span><span class="hl opt">,</span> <span class="hl num">0.02</span> <span class="hl opt">},</span>
<span class="hl opt">};</span>

<span class="hl kwb">struct</span> amino_acid homo_sapiens<span class="hl opt">[] = {</span>
   <span class="hl opt">{</span> <span class="hl str">'a'</span><span class="hl opt">,</span> <span class="hl num">0.3029549426680</span> <span class="hl opt">},</span>
   <span class="hl opt">{</span> <span class="hl str">'c'</span><span class="hl opt">,</span> <span class="hl num">0.1979883004921</span> <span class="hl opt">},</span>
   <span class="hl opt">{</span> <span class="hl str">'g'</span><span class="hl opt">,</span> <span class="hl num">0.1975473066391</span> <span class="hl opt">},</span>
   <span class="hl opt">{</span> <span class="hl str">'t'</span><span class="hl opt">,</span> <span class="hl num">0.3015094502008</span> <span class="hl opt">},</span>
<span class="hl opt">};</span>

<span class="hl kwb">static const char</span> alu<span class="hl opt">[] =</span>
   <span class="hl str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTG&quot;</span>
   <span class="hl str">&quot;GGAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGA&quot;</span>
   <span class="hl str">&quot;GACCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAA&quot;</span>
   <span class="hl str">&quot;AATACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAAT&quot;</span>
   <span class="hl str">&quot;CCCAGCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAAC&quot;</span>
   <span class="hl str">&quot;CCGGGAGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTG&quot;</span>
   <span class="hl str">&quot;CACTCCAGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span><span class="hl opt">;</span>

<span class="hl kwb">int</span>
<span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">const char</span> <span class="hl opt">**</span>argv<span class="hl opt">) {</span>
    <span class="hl kwb">int</span> n <span class="hl opt">=</span> argc <span class="hl opt">&gt;</span> <span class="hl num">1</span> ? <span class="hl kwd">atoi</span><span class="hl opt">(</span> argv<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">] ) :</span> <span class="hl num">512</span><span class="hl opt">;</span>
    random_t rand<span class="hl opt">;</span>

    <span class="hl kwd">random_init</span><span class="hl opt">(&amp;</span>rand<span class="hl opt">);</span>

    <span class="hl kwd">repeat</span><span class="hl opt">(</span>alu<span class="hl opt">,</span> <span class="hl str">&quot;&gt;ONE Homo sapiens alu</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> n<span class="hl opt">*</span><span class="hl num">2</span><span class="hl opt">);</span>
    <span class="hl kwd">randomize</span><span class="hl opt">(</span>amino_acid<span class="hl opt">,</span> <span class="hl kwd">ARRAY_SIZE</span><span class="hl opt">(</span>amino_acid<span class="hl opt">),</span>
            <span class="hl str">&quot;&gt;TWO IUB ambiguity codes</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> n<span class="hl opt">*</span><span class="hl num">3</span><span class="hl opt">, &amp;</span>rand<span class="hl opt">);</span>
    <span class="hl kwd">randomize</span><span class="hl opt">(</span>homo_sapiens<span class="hl opt">,</span> <span class="hl kwd">ARRAY_SIZE</span><span class="hl opt">(</span>homo_sapiens<span class="hl opt">),</span>
            <span class="hl str">&quot;&gt;THREE Homo sapiens frequency</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> n<span class="hl opt">*</span><span class="hl num">5</span><span class="hl opt">, &amp;</span>rand<span class="hl opt">);</span>

    <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
