<span class="hl com">/* The Computer Language Shootout</span>
<span class="hl com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by Greg Buchholz</span>
<span class="hl com">   </span>
<span class="hl com">   for the debian (AMD) machine...</span>
<span class="hl com">   compile flags:  -O3 -ffast-math -march=athlon-xp -funroll-loops</span>
<span class="hl com"></span>
<span class="hl com">   for the gp4 (Intel) machine...</span>
<span class="hl com">   compile flags:  -O3 -ffast-math -march=pentium4 -funroll-loops</span>
<span class="hl com">*/</span>

<span class="hl dir">#include&lt;stdio.h&gt;</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span> <span class="hl sym">(</span><span class="hl kwb">int</span> argc<span class="hl sym">,</span> <span class="hl kwb">char</span> <span class="hl sym">**</span>argv<span class="hl sym">)</span>
<span class="hl sym">{</span>
    <span class="hl kwb">int</span> w<span class="hl sym">,</span> h<span class="hl sym">,</span> bit_num <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
    <span class="hl kwb">char</span> byte_acc <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
    <span class="hl kwb">int</span> i<span class="hl sym">,</span> iter <span class="hl sym">=</span> <span class="hl num">50</span><span class="hl sym">;</span>
    <span class="hl kwb">double</span> x<span class="hl sym">,</span> y<span class="hl sym">,</span> limit <span class="hl sym">=</span> <span class="hl num">2.0</span><span class="hl sym">;</span>
    <span class="hl kwb">double</span> Zr<span class="hl sym">,</span> Zi<span class="hl sym">,</span> Cr<span class="hl sym">,</span> Ci<span class="hl sym">,</span> Tr<span class="hl sym">,</span> Ti<span class="hl sym">;</span>
    
    w <span class="hl sym">=</span> h <span class="hl sym">=</span> <span class="hl kwd">atoi</span><span class="hl sym">(</span>argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]);</span>

    <span class="hl kwd">printf</span><span class="hl sym">(</span><span class="hl str">&quot;P4</span><span class="hl esc">\n</span><span class="hl str">%d %d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span>w<span class="hl sym">,</span>h<span class="hl sym">);</span>

    <span class="hl kwa">for</span><span class="hl sym">(</span>y<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span>y<span class="hl sym">&lt;</span>h<span class="hl sym">;++</span>y<span class="hl sym">)</span> 
    <span class="hl sym">{</span>
        <span class="hl kwa">for</span><span class="hl sym">(</span>x<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span>x<span class="hl sym">&lt;</span>w<span class="hl sym">;++</span>x<span class="hl sym">)</span>
        <span class="hl sym">{</span>
            Zr <span class="hl sym">=</span> Zi <span class="hl sym">=</span> Tr <span class="hl sym">=</span> Ti <span class="hl sym">=</span> <span class="hl num">0.0</span><span class="hl sym">;</span>
            Cr <span class="hl sym">= (</span><span class="hl num">2.0</span><span class="hl sym">*</span>x<span class="hl sym">/</span>w <span class="hl sym">-</span> <span class="hl num">1.5</span><span class="hl sym">);</span> Ci<span class="hl sym">=(</span><span class="hl num">2.0</span><span class="hl sym">*</span>y<span class="hl sym">/</span>h <span class="hl sym">-</span> <span class="hl num">1.0</span><span class="hl sym">);</span>
        
            <span class="hl kwa">for</span> <span class="hl sym">(</span>i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span>i<span class="hl sym">&lt;</span>iter <span class="hl sym">&amp;&amp; (</span>Tr<span class="hl sym">+</span>Ti <span class="hl sym">&lt;=</span> limit<span class="hl sym">*</span>limit<span class="hl sym">);++</span>i<span class="hl sym">)</span>
            <span class="hl sym">{</span>
                Zi <span class="hl sym">=</span> <span class="hl num">2.0</span><span class="hl sym">*</span>Zr<span class="hl sym">*</span>Zi <span class="hl sym">+</span> Ci<span class="hl sym">;</span>
                Zr <span class="hl sym">=</span> Tr <span class="hl sym">-</span> Ti <span class="hl sym">+</span> Cr<span class="hl sym">;</span>
                Tr <span class="hl sym">=</span> Zr <span class="hl sym">*</span> Zr<span class="hl sym">;</span>
                Ti <span class="hl sym">=</span> Zi <span class="hl sym">*</span> Zi<span class="hl sym">;</span>
            <span class="hl sym">}</span>
       
            byte_acc <span class="hl sym">&lt;&lt;=</span> <span class="hl num">1</span><span class="hl sym">;</span> 
            <span class="hl kwa">if</span><span class="hl sym">(</span>Tr<span class="hl sym">+</span>Ti <span class="hl sym">&lt;=</span> limit<span class="hl sym">*</span>limit<span class="hl sym">)</span> byte_acc <span class="hl sym">|=</span> <span class="hl num">0x01</span><span class="hl sym">;</span>
                
            <span class="hl sym">++</span>bit_num<span class="hl sym">;</span> 

            <span class="hl kwa">if</span><span class="hl sym">(</span>bit_num <span class="hl sym">==</span> <span class="hl num">8</span><span class="hl sym">)</span>
            <span class="hl sym">{</span>
                <span class="hl kwd">putc</span><span class="hl sym">(</span>byte_acc<span class="hl sym">,</span>stdout<span class="hl sym">);</span>
                byte_acc <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
                bit_num <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
            <span class="hl sym">}</span>
            <span class="hl kwa">else if</span><span class="hl sym">(</span>x <span class="hl sym">==</span> w<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span>
            <span class="hl sym">{</span>
                byte_acc <span class="hl sym">&lt;&lt;= (</span><span class="hl num">8</span><span class="hl sym">-</span>w<span class="hl sym">%</span><span class="hl num">8</span><span class="hl sym">);</span>
                <span class="hl kwd">putc</span><span class="hl sym">(</span>byte_acc<span class="hl sym">,</span>stdout<span class="hl sym">);</span>
                byte_acc <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
                bit_num <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
            <span class="hl sym">}</span>
        <span class="hl sym">}</span>
    <span class="hl sym">}</span>	
<span class="hl sym">}</span>

