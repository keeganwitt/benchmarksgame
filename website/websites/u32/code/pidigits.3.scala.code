<span class="hl com">/* </span>
<span class="hl com"> * The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"> * contributed by Rex Kerr</span>
<span class="hl com"> * based on version by John Nilsson as modified by Geoff Reedy</span>
<span class="hl com">*/</span>

<span class="hl kwa">object</span> pidigits <span class="hl opt">{</span>
  <span class="hl kwa">type</span> I <span class="hl opt">=</span> BigInt
  <span class="hl kwa">import</span> BigInt<span class="hl opt">.</span>_
    
  <span class="hl kwa">class</span> <span class="hl kwd">LFT</span><span class="hl opt">(</span>q<span class="hl opt">:</span>I<span class="hl opt">,</span> r<span class="hl opt">:</span>I<span class="hl opt">,</span> t<span class="hl opt">:</span>I<span class="hl opt">) {</span>
    <span class="hl kwa">def</span> <span class="hl kwd">compose</span><span class="hl opt">(</span>k<span class="hl opt">:</span> Int<span class="hl opt">) =</span> <span class="hl kwa">new</span> <span class="hl kwd">LFT</span><span class="hl opt">(</span>q<span class="hl opt">*</span>k<span class="hl opt">, (</span>q<span class="hl opt">*(</span><span class="hl num">4</span><span class="hl opt">*</span>k<span class="hl opt">+</span><span class="hl num">2</span><span class="hl opt">))+(</span>r<span class="hl opt">*(</span><span class="hl num">2</span><span class="hl opt">*</span>k<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)),</span> t<span class="hl opt">*(</span><span class="hl num">2</span><span class="hl opt">*</span>k<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">))</span>
    <span class="hl kwa">def</span> extract <span class="hl opt">= {</span>
      <span class="hl kwa">val</span> <span class="hl opt">(</span>y<span class="hl opt">,</span>rem<span class="hl opt">) = (</span>q<span class="hl opt">*</span><span class="hl num">3</span> <span class="hl opt">+</span> r<span class="hl opt">) /%</span> t
      <span class="hl kwa">if</span><span class="hl opt">((</span>rem <span class="hl opt">+</span> q<span class="hl opt">) &lt;</span> t<span class="hl opt">)</span> <span class="hl kwd">Some</span><span class="hl opt">(</span>y<span class="hl opt">.</span>intValue<span class="hl opt">)</span> <span class="hl kwa">else</span> None
    <span class="hl opt">}</span>
    <span class="hl kwa">def</span> <span class="hl kwd">next</span><span class="hl opt">(</span>y<span class="hl opt">:</span> Int<span class="hl opt">) =</span> <span class="hl kwa">new</span> <span class="hl kwd">LFT</span><span class="hl opt">(</span>q<span class="hl opt">*</span><span class="hl num">10</span><span class="hl opt">, (</span>r<span class="hl opt">-(</span>t<span class="hl opt">*</span>y<span class="hl opt">))*</span><span class="hl num">10</span><span class="hl opt">,</span> t<span class="hl opt">)</span>
  <span class="hl opt">}</span>

  <span class="hl kwa">def</span> pi_digits <span class="hl opt">= {</span>
    <span class="hl kwa">def</span> <span class="hl kwd">digits</span><span class="hl opt">(</span>z<span class="hl opt">:</span> LFT<span class="hl opt">,</span> k<span class="hl opt">:</span> Int<span class="hl opt">):</span> Stream<span class="hl opt">[</span>Int<span class="hl opt">] =</span> z extract match <span class="hl opt">{</span>
      <span class="hl kwa">case</span> <span class="hl kwd">Some</span><span class="hl opt">(</span>y<span class="hl opt">) =&gt;</span> Stream<span class="hl opt">.</span><span class="hl kwd">cons</span><span class="hl opt">(</span>y<span class="hl opt">,</span><span class="hl kwd">digits</span><span class="hl opt">(</span>z next y<span class="hl opt">,</span>k<span class="hl opt">))</span>
      <span class="hl kwa">case</span> None    <span class="hl opt">=&gt;</span> <span class="hl kwd">digits</span><span class="hl opt">(</span>z compose k<span class="hl opt">,</span>k<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)</span>
    <span class="hl opt">}</span>
    <span class="hl kwd">digits</span><span class="hl opt">(</span><span class="hl kwa">new</span> <span class="hl kwd">LFT</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">1</span><span class="hl opt">),</span><span class="hl num">1</span><span class="hl opt">)</span>
  <span class="hl opt">}</span>

  <span class="hl kwa">def</span> by<span class="hl opt">[</span>T<span class="hl opt">](</span>s<span class="hl opt">:</span> Stream<span class="hl opt">[</span>T<span class="hl opt">],</span> n<span class="hl opt">:</span> Int<span class="hl opt">):</span> Stream<span class="hl opt">[</span>Stream<span class="hl opt">[</span>T<span class="hl opt">]] =</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>s<span class="hl opt">.</span>isEmpty<span class="hl opt">)</span> Stream<span class="hl opt">.</span>empty
    <span class="hl kwa">else</span> Stream<span class="hl opt">.</span><span class="hl kwd">cons</span><span class="hl opt">(</span>s take n<span class="hl opt">,</span> <span class="hl kwd">by</span><span class="hl opt">(</span>s drop n<span class="hl opt">,</span> n<span class="hl opt">))</span>

  <span class="hl kwa">def</span> <span class="hl kwd">main</span><span class="hl opt">(</span>args<span class="hl opt">:</span> Array<span class="hl opt">[</span>String<span class="hl opt">]):</span> Unit <span class="hl opt">=</span>
    <span class="hl kwa">for</span> <span class="hl opt">((</span>d<span class="hl opt">,</span>n<span class="hl opt">) &lt;-</span> <span class="hl kwd">by</span><span class="hl opt">(</span>pi_digits take <span class="hl kwd">args</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">).</span>toInt<span class="hl opt">,</span> <span class="hl num">10</span><span class="hl opt">).</span>zipWithIndex<span class="hl opt">)</span>
      <span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;%-10s</span><span class="hl esc">\t</span><span class="hl str">:%d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span>d<span class="hl opt">.</span>mkString<span class="hl opt">,</span><span class="hl num">10</span><span class="hl opt">*</span>n<span class="hl opt">+</span>d<span class="hl opt">.</span>length<span class="hl opt">)</span>
<span class="hl opt">}</span>
