<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by Kannan Goundan</span>
<span class="hl com">   modified by Isaac Gouy</span>
<span class="hl com">   optimized by David Pollak</span>
<span class="hl com">   updated to 2.8 by Rex Kerr</span>
<span class="hl com">   modified by Piotr Tarsa</span>
<span class="hl com">*/</span>

<span class="hl kwa">sealed abstract class</span> <span class="hl kwd">Node</span><span class="hl opt">(</span>i<span class="hl opt">:</span> Int<span class="hl opt">,</span> left<span class="hl opt">:</span> Node<span class="hl opt">,</span> right<span class="hl opt">:</span> Node<span class="hl opt">) {</span>
  <span class="hl kwa">def</span> isum<span class="hl opt">:</span> Int
<span class="hl opt">}</span>
<span class="hl kwa">case class</span> <span class="hl kwd">NonLeaf</span><span class="hl opt">(</span>i<span class="hl opt">:</span> Int<span class="hl opt">,</span> left<span class="hl opt">:</span> Node<span class="hl opt">,</span> right<span class="hl opt">:</span> Node<span class="hl opt">)</span> <span class="hl kwa">extends</span> <span class="hl kwd">Node</span><span class="hl opt">(</span>i<span class="hl opt">,</span> left<span class="hl opt">,</span> right<span class="hl opt">) {</span>
  <span class="hl kwa">def</span> isum<span class="hl opt">:</span> Int <span class="hl opt">=</span> i <span class="hl opt">+</span> left<span class="hl opt">.</span>isum <span class="hl opt">-</span> right<span class="hl opt">.</span>isum
<span class="hl opt">}</span>
<span class="hl kwa">case class</span> <span class="hl kwd">Leaf</span><span class="hl opt">(</span>i<span class="hl opt">:</span> Int<span class="hl opt">)</span> <span class="hl kwa">extends</span> <span class="hl kwd">Node</span><span class="hl opt">(</span>i<span class="hl opt">,</span> NullNode<span class="hl opt">,</span> NullNode<span class="hl opt">) {</span>
  <span class="hl kwa">def</span> isum<span class="hl opt">:</span> Int <span class="hl opt">=</span> i
<span class="hl opt">}</span>
<span class="hl kwa">case object</span> NullNode <span class="hl kwa">extends</span> <span class="hl kwd">Node</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl kwa">new</span> <span class="hl kwd">Leaf</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">),</span> <span class="hl kwa">new</span> <span class="hl kwd">Leaf</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">)) {</span>
  <span class="hl kwa">def</span> isum<span class="hl opt">:</span> Int <span class="hl opt">=</span> <span class="hl num">0</span>
<span class="hl opt">}</span>

<span class="hl kwa">object</span> Tree <span class="hl opt">{</span>
  <span class="hl kwa">def</span> <span class="hl kwd">apply</span><span class="hl opt">(</span>i<span class="hl opt">:</span> Int<span class="hl opt">,</span> depth<span class="hl opt">:</span> Int<span class="hl opt">):</span> Node <span class="hl opt">= {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>depth <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwd">NonLeaf</span><span class="hl opt">(</span>i<span class="hl opt">,</span> <span class="hl kwd">Tree</span><span class="hl opt">(</span>i <span class="hl opt">*</span> <span class="hl num">2</span> <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">,</span> depth <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">),</span> <span class="hl kwd">Tree</span><span class="hl opt">(</span>i <span class="hl opt">*</span> <span class="hl num">2</span><span class="hl opt">,</span> depth <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">))</span>
    <span class="hl kwa">else</span> <span class="hl kwd">Leaf</span><span class="hl opt">(</span>i<span class="hl opt">)</span>
  <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl kwa">object</span> binarytrees <span class="hl opt">{</span>
  <span class="hl kwa">def</span> <span class="hl kwd">main</span><span class="hl opt">(</span>args<span class="hl opt">:</span> Array<span class="hl opt">[</span>String<span class="hl opt">]) = {</span>
    <span class="hl kwa">val</span> n <span class="hl opt">=</span> <span class="hl kwa">try</span><span class="hl opt">{</span> <span class="hl kwd">args</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">).</span>toInt <span class="hl opt">}</span> <span class="hl kwa">catch</span> <span class="hl opt">{</span> <span class="hl kwa">case</span> _ <span class="hl opt">=&gt;</span> <span class="hl num">1</span> <span class="hl opt">}</span>
    <span class="hl kwa">val</span> minDepth <span class="hl opt">=</span> <span class="hl num">4</span>
    <span class="hl kwa">val</span> maxDepth <span class="hl opt">=</span> n <span class="hl kwd">max</span> <span class="hl opt">(</span>minDepth <span class="hl opt">+</span> <span class="hl num">2</span><span class="hl opt">)</span>

    <span class="hl kwa">def</span> <span class="hl kwd">print</span><span class="hl opt">(</span>name<span class="hl opt">:</span> String<span class="hl opt">,</span> depth<span class="hl opt">:</span> Int<span class="hl opt">,</span> check<span class="hl opt">:</span> Int<span class="hl opt">) =</span>
      <span class="hl kwd">println</span><span class="hl opt">(</span>name <span class="hl opt">+</span> <span class="hl str">&quot; of depth &quot;</span> <span class="hl opt">+</span> depth <span class="hl opt">+</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span> <span class="hl str">check: &quot;</span> <span class="hl opt">+</span> check<span class="hl opt">)</span>

    <span class="hl kwd">print</span><span class="hl opt">(</span><span class="hl str">&quot;stretch tree&quot;</span><span class="hl opt">,</span> maxDepth <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">,</span> <span class="hl kwd">Tree</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> maxDepth <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">).</span>isum<span class="hl opt">)</span>
    <span class="hl kwa">val</span> longLivedTree <span class="hl opt">=</span> <span class="hl kwd">Tree</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> maxDepth<span class="hl opt">)</span>
    minDepth to maxDepth by <span class="hl num">2</span> foreach <span class="hl opt">{</span>
      depth <span class="hl opt">=&gt;</span>
      <span class="hl kwa">val</span> iterations <span class="hl opt">=</span> <span class="hl num">1</span> <span class="hl opt">&lt;&lt; (</span>maxDepth <span class="hl opt">-</span> depth <span class="hl opt">+</span> minDepth<span class="hl opt">)</span>
      <span class="hl kwa">var</span> i<span class="hl opt">,</span> sum <span class="hl opt">=</span> <span class="hl num">0</span>
      <span class="hl kwa">while</span> <span class="hl opt">(</span>i <span class="hl opt">&lt;</span> iterations<span class="hl opt">) {</span>
        i <span class="hl opt">+=</span> <span class="hl num">1</span>
        sum <span class="hl opt">+=</span> <span class="hl kwd">Tree</span><span class="hl opt">(</span>i<span class="hl opt">,</span> depth<span class="hl opt">).</span>isum <span class="hl opt">+</span> <span class="hl kwd">Tree</span><span class="hl opt">(-</span>i<span class="hl opt">,</span> depth<span class="hl opt">).</span>isum
      <span class="hl opt">}</span>
      <span class="hl kwd">print</span><span class="hl opt">(</span>iterations <span class="hl opt">*</span><span class="hl num">2</span>  <span class="hl opt">+</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span> <span class="hl str">trees&quot;</span><span class="hl opt">,</span> depth<span class="hl opt">,</span> sum<span class="hl opt">)</span>
    <span class="hl opt">}</span>
    <span class="hl kwd">print</span><span class="hl opt">(</span><span class="hl str">&quot;long lived tree&quot;</span><span class="hl opt">,</span> maxDepth<span class="hl opt">,</span> longLivedTree<span class="hl opt">.</span>isum<span class="hl opt">)</span>
  <span class="hl opt">}</span>
<span class="hl opt">}</span>
