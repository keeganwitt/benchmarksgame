<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * contributed by The Go Authors.</span>
<span class="hl com"> * Based on C program by Joern Inge Vestgaarden</span>
<span class="hl com"> * and Jorge Peixoto de Morais Neto.</span>
<span class="hl com"> * flag.Arg hack by Isaac Gouy</span>
<span class="hl com"> */</span>

<span class="hl kwa">package</span> main

<span class="hl kwa">import</span> <span class="hl opt">(</span>
   <span class="hl str">&quot;bufio&quot;</span>
   <span class="hl str">&quot;flag&quot;</span>
   <span class="hl str">&quot;os&quot;</span>
   <span class="hl str">&quot;strconv&quot;</span>
<span class="hl opt">)</span>

<span class="hl kwa">var</span> out <span class="hl opt">*</span>bufio<span class="hl opt">.</span>Writer

<span class="hl kwa">var</span> n <span class="hl opt">=</span> <span class="hl num">0</span>

<span class="hl kwa">const</span> WIDTH <span class="hl opt">=</span> <span class="hl num">60</span> <span class="hl slc">// Fold lines after WIDTH bytes</span>

<span class="hl kwa">func</span> <span class="hl kwd">min</span><span class="hl opt">(</span>a<span class="hl opt">,</span> b <span class="hl kwb">int</span><span class="hl opt">)</span> <span class="hl kwb">int</span> <span class="hl opt">{</span>
   <span class="hl kwa">if</span> a <span class="hl opt">&lt;</span> b <span class="hl opt">{</span>
      <span class="hl kwa">return</span> a
   <span class="hl opt">}</span>
   <span class="hl kwa">return</span> b
<span class="hl opt">}</span>

<span class="hl kwa">type</span> AminoAcid <span class="hl kwa">struct</span> <span class="hl opt">{</span>
   p <span class="hl kwb">float64</span>
   c <span class="hl kwb">byte</span>
<span class="hl opt">}</span>

<span class="hl kwa">func</span> <span class="hl kwd">AccumulateProbabilities</span><span class="hl opt">(</span>genelist <span class="hl opt">[]</span>AminoAcid<span class="hl opt">) {</span>
   <span class="hl kwa">for</span> i <span class="hl opt">:=</span> <span class="hl num">1</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> <span class="hl kwb">len</span><span class="hl opt">(</span>genelist<span class="hl opt">);</span> i<span class="hl opt">++ {</span>
      genelist<span class="hl opt">[</span>i<span class="hl opt">].</span>p <span class="hl opt">+=</span> genelist<span class="hl opt">[</span>i<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">].</span>p
   <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl slc">// RepeatFasta prints the characters of the byte slice s. When it</span>
<span class="hl slc">// reaches the end of the slice, it goes back to the beginning.</span>
<span class="hl slc">// It stops after generating count characters.</span>
<span class="hl slc">// After each WIDTH characters it prints a newline.</span>
<span class="hl slc">// It assumes that WIDTH &lt;= len(s) + 1.</span>
<span class="hl kwa">func</span> <span class="hl kwd">RepeatFasta</span><span class="hl opt">(</span>s <span class="hl opt">[]</span><span class="hl kwb">byte</span><span class="hl opt">,</span> count <span class="hl kwb">int</span><span class="hl opt">) {</span>
   pos <span class="hl opt">:=</span> <span class="hl num">0</span>
   s2 <span class="hl opt">:=</span> <span class="hl kwb">make</span><span class="hl opt">([]</span><span class="hl kwb">byte</span><span class="hl opt">,</span> <span class="hl kwb">len</span><span class="hl opt">(</span>s<span class="hl opt">)+</span>WIDTH<span class="hl opt">)</span>
   <span class="hl kwd">copy</span><span class="hl opt">(</span>s2<span class="hl opt">,</span> s<span class="hl opt">)</span>
   <span class="hl kwd">copy</span><span class="hl opt">(</span>s2<span class="hl opt">[</span><span class="hl kwb">len</span><span class="hl opt">(</span>s<span class="hl opt">):],</span> s<span class="hl opt">)</span>
   <span class="hl kwa">for</span> count <span class="hl opt">&gt;</span> <span class="hl num">0</span> <span class="hl opt">{</span>
      line <span class="hl opt">:=</span> <span class="hl kwd">min</span><span class="hl opt">(</span>WIDTH<span class="hl opt">,</span> count<span class="hl opt">)</span>
      out<span class="hl opt">.</span><span class="hl kwd">Write</span><span class="hl opt">(</span>s2<span class="hl opt">[</span>pos <span class="hl opt">:</span> pos<span class="hl opt">+</span>line<span class="hl opt">])</span>
      out<span class="hl opt">.</span><span class="hl kwd">WriteByte</span><span class="hl opt">(</span><span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl opt">)</span>
      pos <span class="hl opt">+=</span> line
      <span class="hl kwa">if</span> pos <span class="hl opt">&gt;=</span> <span class="hl kwb">len</span><span class="hl opt">(</span>s<span class="hl opt">) {</span>
         pos <span class="hl opt">-=</span> <span class="hl kwb">len</span><span class="hl opt">(</span>s<span class="hl opt">)</span>
      <span class="hl opt">}</span>
      count <span class="hl opt">-=</span> line
   <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl kwa">var</span> lastrandom <span class="hl kwb">uint32</span> <span class="hl opt">=</span> <span class="hl num">42</span>

<span class="hl kwa">const</span> <span class="hl opt">(</span>
   IM <span class="hl opt">=</span> <span class="hl num">139968</span>
   IA <span class="hl opt">=</span> <span class="hl num">3877</span>
   IC <span class="hl opt">=</span> <span class="hl num">29573</span>
<span class="hl opt">)</span>

<span class="hl slc">// Each element of genelist is a struct with a character and</span>
<span class="hl slc">// a floating point number p between 0 and 1.</span>
<span class="hl slc">// RandomFasta generates a random float r and</span>
<span class="hl slc">// finds the first element such that p &gt;= r.</span>
<span class="hl slc">// This is a weighted random selection.</span>
<span class="hl slc">// RandomFasta then prints the character of the array element.</span>
<span class="hl slc">// This sequence is repeated count times.</span>
<span class="hl slc">// Between each WIDTH consecutive characters, the function prints a newline.</span>
<span class="hl kwa">func</span> <span class="hl kwd">RandomFasta</span><span class="hl opt">(</span>genelist <span class="hl opt">[]</span>AminoAcid<span class="hl opt">,</span> count <span class="hl kwb">int</span><span class="hl opt">) {</span>
   buf <span class="hl opt">:=</span> <span class="hl kwb">make</span><span class="hl opt">([]</span><span class="hl kwb">byte</span><span class="hl opt">,</span> WIDTH<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)</span>
   <span class="hl kwa">for</span> count <span class="hl opt">&gt;</span> <span class="hl num">0</span> <span class="hl opt">{</span>
      line <span class="hl opt">:=</span> <span class="hl kwd">min</span><span class="hl opt">(</span>WIDTH<span class="hl opt">,</span> count<span class="hl opt">)</span>
      <span class="hl kwa">for</span> pos <span class="hl opt">:=</span> <span class="hl num">0</span><span class="hl opt">;</span> pos <span class="hl opt">&lt;</span> line<span class="hl opt">;</span> pos<span class="hl opt">++ {</span>
         lastrandom <span class="hl opt">= (</span>lastrandom<span class="hl opt">*</span>IA <span class="hl opt">+</span> IC<span class="hl opt">) %</span> IM
         <span class="hl slc">// Integer to float conversions are faster if the integer is signed.</span>
         r <span class="hl opt">:=</span> <span class="hl kwb">float64</span><span class="hl opt">(</span><span class="hl kwb">int</span><span class="hl opt">(</span>lastrandom<span class="hl opt">)) /</span> IM
         <span class="hl kwa">for</span> _<span class="hl opt">,</span> v <span class="hl opt">:=</span> <span class="hl kwa">range</span> genelist <span class="hl opt">{</span>
            <span class="hl kwa">if</span> v<span class="hl opt">.</span>p <span class="hl opt">&gt;=</span> r <span class="hl opt">{</span>
               buf<span class="hl opt">[</span>pos<span class="hl opt">] =</span> v<span class="hl opt">.</span>c
               <span class="hl kwa">break</span>
            <span class="hl opt">}</span>
         <span class="hl opt">}</span>
      <span class="hl opt">}</span>
      buf<span class="hl opt">[</span>line<span class="hl opt">] =</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span>
      out<span class="hl opt">.</span><span class="hl kwd">Write</span><span class="hl opt">(</span>buf<span class="hl opt">[</span><span class="hl num">0</span> <span class="hl opt">:</span> line<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">])</span>
      count <span class="hl opt">-=</span> line
   <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl kwa">func</span> <span class="hl kwd">main</span><span class="hl opt">() {</span>
   out <span class="hl opt">=</span> bufio<span class="hl opt">.</span><span class="hl kwd">NewWriter</span><span class="hl opt">(</span>os<span class="hl opt">.</span>Stdout<span class="hl opt">)</span>
   <span class="hl kwa">defer</span> out<span class="hl opt">.</span><span class="hl kwd">Flush</span><span class="hl opt">()</span>

   flag<span class="hl opt">.</span><span class="hl kwd">Parse</span><span class="hl opt">()</span>
   <span class="hl kwa">if</span> flag<span class="hl opt">.</span><span class="hl kwd">NArg</span><span class="hl opt">() &gt;</span> <span class="hl num">0</span> <span class="hl opt">{</span> n<span class="hl opt">,</span>_ <span class="hl opt">=</span> strconv<span class="hl opt">.</span><span class="hl kwd">Atoi</span><span class="hl opt">(</span> flag<span class="hl opt">.</span><span class="hl kwd">Arg</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">) ) }</span>

   iub <span class="hl opt">:= []</span>AminoAcid<span class="hl opt">{</span>
      AminoAcid<span class="hl opt">{</span><span class="hl num">0.27</span><span class="hl opt">,</span> <span class="hl str">'a'</span><span class="hl opt">},</span>
      AminoAcid<span class="hl opt">{</span><span class="hl num">0.12</span><span class="hl opt">,</span> <span class="hl str">'c'</span><span class="hl opt">},</span>
      AminoAcid<span class="hl opt">{</span><span class="hl num">0.12</span><span class="hl opt">,</span> <span class="hl str">'g'</span><span class="hl opt">},</span>
      AminoAcid<span class="hl opt">{</span><span class="hl num">0.27</span><span class="hl opt">,</span> <span class="hl str">'t'</span><span class="hl opt">},</span>
      AminoAcid<span class="hl opt">{</span><span class="hl num">0.02</span><span class="hl opt">,</span> <span class="hl str">'B'</span><span class="hl opt">},</span>
      AminoAcid<span class="hl opt">{</span><span class="hl num">0.02</span><span class="hl opt">,</span> <span class="hl str">'D'</span><span class="hl opt">},</span>
      AminoAcid<span class="hl opt">{</span><span class="hl num">0.02</span><span class="hl opt">,</span> <span class="hl str">'H'</span><span class="hl opt">},</span>
      AminoAcid<span class="hl opt">{</span><span class="hl num">0.02</span><span class="hl opt">,</span> <span class="hl str">'K'</span><span class="hl opt">},</span>
      AminoAcid<span class="hl opt">{</span><span class="hl num">0.02</span><span class="hl opt">,</span> <span class="hl str">'M'</span><span class="hl opt">},</span>
      AminoAcid<span class="hl opt">{</span><span class="hl num">0.02</span><span class="hl opt">,</span> <span class="hl str">'N'</span><span class="hl opt">},</span>
      AminoAcid<span class="hl opt">{</span><span class="hl num">0.02</span><span class="hl opt">,</span> <span class="hl str">'R'</span><span class="hl opt">},</span>
      AminoAcid<span class="hl opt">{</span><span class="hl num">0.02</span><span class="hl opt">,</span> <span class="hl str">'S'</span><span class="hl opt">},</span>
      AminoAcid<span class="hl opt">{</span><span class="hl num">0.02</span><span class="hl opt">,</span> <span class="hl str">'V'</span><span class="hl opt">},</span>
      AminoAcid<span class="hl opt">{</span><span class="hl num">0.02</span><span class="hl opt">,</span> <span class="hl str">'W'</span><span class="hl opt">},</span>
      AminoAcid<span class="hl opt">{</span><span class="hl num">0.02</span><span class="hl opt">,</span> <span class="hl str">'Y'</span><span class="hl opt">},</span>
   <span class="hl opt">}</span>

   homosapiens <span class="hl opt">:= []</span>AminoAcid<span class="hl opt">{</span>
      AminoAcid<span class="hl opt">{</span><span class="hl num">0.3029549426680</span><span class="hl opt">,</span> <span class="hl str">'a'</span><span class="hl opt">},</span>
      AminoAcid<span class="hl opt">{</span><span class="hl num">0.1979883004921</span><span class="hl opt">,</span> <span class="hl str">'c'</span><span class="hl opt">},</span>
      AminoAcid<span class="hl opt">{</span><span class="hl num">0.1975473066391</span><span class="hl opt">,</span> <span class="hl str">'g'</span><span class="hl opt">},</span>
      AminoAcid<span class="hl opt">{</span><span class="hl num">0.3015094502008</span><span class="hl opt">,</span> <span class="hl str">'t'</span><span class="hl opt">},</span>
   <span class="hl opt">}</span>

   <span class="hl kwd">AccumulateProbabilities</span><span class="hl opt">(</span>iub<span class="hl opt">)</span>
   <span class="hl kwd">AccumulateProbabilities</span><span class="hl opt">(</span>homosapiens<span class="hl opt">)</span>

   alu <span class="hl opt">:= []</span><span class="hl kwb">byte</span><span class="hl opt">(</span>
      <span class="hl str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span> <span class="hl opt">+</span>
         <span class="hl str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span> <span class="hl opt">+</span>
         <span class="hl str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span> <span class="hl opt">+</span>
         <span class="hl str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span> <span class="hl opt">+</span>
         <span class="hl str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span> <span class="hl opt">+</span>
         <span class="hl str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span> <span class="hl opt">+</span>
         <span class="hl str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span><span class="hl opt">)</span>

   out<span class="hl opt">.</span><span class="hl kwd">WriteString</span><span class="hl opt">(</span><span class="hl str">&quot;&gt;ONE Homo sapiens alu</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">)</span>
   <span class="hl kwd">RepeatFasta</span><span class="hl opt">(</span>alu<span class="hl opt">,</span> <span class="hl num">2</span><span class="hl opt">*</span>n<span class="hl opt">)</span>
   out<span class="hl opt">.</span><span class="hl kwd">WriteString</span><span class="hl opt">(</span><span class="hl str">&quot;&gt;TWO IUB ambiguity codes</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">)</span>
   <span class="hl kwd">RandomFasta</span><span class="hl opt">(</span>iub<span class="hl opt">,</span> <span class="hl num">3</span><span class="hl opt">*</span>n<span class="hl opt">)</span>
   out<span class="hl opt">.</span><span class="hl kwd">WriteString</span><span class="hl opt">(</span><span class="hl str">&quot;&gt;THREE Homo sapiens frequency</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">)</span>
   <span class="hl kwd">RandomFasta</span><span class="hl opt">(</span>homosapiens<span class="hl opt">,</span> <span class="hl num">5</span><span class="hl opt">*</span>n<span class="hl opt">)</span>
<span class="hl opt">}</span>

