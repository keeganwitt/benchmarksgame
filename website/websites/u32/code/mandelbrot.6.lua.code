<span class="hl slc">-- The Computer Language Benchmarks Game</span>
<span class="hl slc">-- http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">-- contributed by Mike Pall</span>
<span class="hl slc">-- modified by Rob Kendrick to be parallel</span>
<span class="hl slc">-- modified by Isaac Gouy</span>

<span class="hl slc">-- called with the following arguments on the command line;</span>
<span class="hl slc">-- 1: size of mandelbrot to generate</span>
<span class="hl slc">-- 2: number of children to spawn (defaults to 6, which works well on 4-way)</span>
<span class="hl slc">-- If this is a child, then there will be additional parameters;</span>
<span class="hl slc">-- 3: start row</span>
<span class="hl slc">-- 4: end row</span>
<span class="hl slc">--</span>
<span class="hl slc">-- Children buffer up their output and emit it to stdout when</span>
<span class="hl slc">-- finished, to avoid stalling due to a full pipe.</span>

<span class="hl kwa">local</span> width <span class="hl opt">=</span> <span class="hl kwb">tonumber</span><span class="hl opt">(</span>arg <span class="hl kwa">and</span> arg<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">])</span> <span class="hl kwa">or</span> <span class="hl num">100</span>
<span class="hl kwa">local</span> children <span class="hl opt">=</span> <span class="hl kwb">tonumber</span><span class="hl opt">(</span>arg <span class="hl kwa">and</span> arg<span class="hl opt">[</span><span class="hl num">2</span><span class="hl opt">])</span> <span class="hl kwa">or</span> <span class="hl num">6</span>
<span class="hl kwa">local</span> srow <span class="hl opt">=</span> <span class="hl kwb">tonumber</span><span class="hl opt">(</span>arg <span class="hl kwa">and</span> arg<span class="hl opt">[</span><span class="hl num">3</span><span class="hl opt">])</span>
<span class="hl kwa">local</span> erow <span class="hl opt">=</span> <span class="hl kwb">tonumber</span><span class="hl opt">(</span>arg <span class="hl kwa">and</span> arg<span class="hl opt">[</span><span class="hl num">4</span><span class="hl opt">])</span>

<span class="hl kwa">local</span> height<span class="hl opt">,</span> wscale <span class="hl opt">=</span> width<span class="hl opt">,</span> <span class="hl num">2</span><span class="hl opt">/</span>width
<span class="hl kwa">local</span> m<span class="hl opt">,</span> limit2 <span class="hl opt">=</span> <span class="hl num">50</span><span class="hl opt">,</span> <span class="hl num">4.0</span>
<span class="hl kwa">local</span> <span class="hl kwb">write</span><span class="hl opt">,</span> char <span class="hl opt">=</span> io<span class="hl opt">.</span><span class="hl kwb">write</span><span class="hl opt">,</span> <span class="hl kwb">string</span><span class="hl opt">.</span>char

<span class="hl kwa">if not</span> srow <span class="hl kwa">then</span>
   <span class="hl slc">-- we are the parent process.  emit the header, and then spawn children</span>
   
   <span class="hl kwa">local</span> workunit <span class="hl opt">=</span> math<span class="hl opt">.</span><span class="hl kwb">floor</span><span class="hl opt">(</span>width <span class="hl opt">/ (</span>children <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">))</span>
   <span class="hl kwa">local</span> handles <span class="hl opt">= { }</span>
   
   <span class="hl kwb">write</span><span class="hl opt">(</span><span class="hl str">&quot;P4</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> width<span class="hl opt">,</span> <span class="hl str">&quot; &quot;</span><span class="hl opt">,</span> height<span class="hl opt">,</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">)</span>
   
   children <span class="hl opt">=</span> children <span class="hl opt">-</span> <span class="hl num">1</span>
   
   <span class="hl kwa">for</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">,</span> children <span class="hl kwa">do</span>
      <span class="hl kwa">local</span> cs<span class="hl opt">,</span> ce
      
      <span class="hl kwa">if</span> i <span class="hl opt">==</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
         cs <span class="hl opt">=</span> <span class="hl num">0</span>
         ce <span class="hl opt">=</span> workunit
      <span class="hl kwa">elseif</span> i <span class="hl opt">==</span> children <span class="hl kwa">then</span>
         cs <span class="hl opt">= (</span>workunit <span class="hl opt">*</span> i<span class="hl opt">) +</span> <span class="hl num">1</span>
         ce <span class="hl opt">=</span> width <span class="hl opt">-</span> <span class="hl num">1</span>
      <span class="hl kwa">else</span>
         cs <span class="hl opt">= (</span>workunit <span class="hl opt">*</span> i<span class="hl opt">) +</span> <span class="hl num">1</span>
         ce <span class="hl opt">=</span> cs <span class="hl opt">+</span> workunit <span class="hl opt">-</span> <span class="hl num">1</span>
      <span class="hl kwa">end</span>
      
      handles<span class="hl opt">[</span>i <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">] =</span> io<span class="hl opt">.</span><span class="hl kwd">popen</span><span class="hl opt">((</span><span class="hl str">&quot;%s %s %d %d %d %d&quot;</span><span class="hl opt">):</span><span class="hl kwb">format</span><span class="hl opt">(</span>
         arg<span class="hl opt">[-</span><span class="hl num">1</span><span class="hl opt">],</span> arg<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">],</span> width<span class="hl opt">,</span> children <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">,</span> cs<span class="hl opt">,</span> ce<span class="hl opt">))</span>
   <span class="hl kwa">end</span>
   
   <span class="hl slc">-- collect answers, and emit</span>
   <span class="hl kwa">for</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">,</span> children <span class="hl kwa">do</span>
      <span class="hl kwb">write</span><span class="hl opt">(</span>handles<span class="hl opt">[</span>i <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">]:</span><span class="hl kwb">read</span> <span class="hl str">&quot;*a&quot;</span><span class="hl opt">)</span>
   <span class="hl kwa">end</span>
   
<span class="hl kwa">else</span>
   <span class="hl slc">-- we are a child process.  do the work allocated to us.</span>
   <span class="hl kwa">local</span> obuff <span class="hl opt">= { }</span>
   <span class="hl kwa">for</span> y<span class="hl opt">=</span>srow<span class="hl opt">,</span>erow <span class="hl kwa">do</span>
     <span class="hl kwa">local</span> Ci <span class="hl opt">=</span> <span class="hl num">2</span><span class="hl opt">*</span>y <span class="hl opt">/</span> height <span class="hl opt">-</span> <span class="hl num">1</span>
     <span class="hl kwa">for</span> xb<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">,</span>width<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">8</span> <span class="hl kwa">do</span>
      <span class="hl kwa">local</span> bits <span class="hl opt">=</span> <span class="hl num">0</span>
      <span class="hl kwa">local</span> xbb <span class="hl opt">=</span> xb<span class="hl opt">+</span><span class="hl num">7</span>
      <span class="hl kwa">for</span> x<span class="hl opt">=</span>xb<span class="hl opt">,</span>xbb <span class="hl opt">&lt;</span> width <span class="hl kwa">and</span> xbb <span class="hl kwa">or</span> width<span class="hl opt">-</span><span class="hl num">1</span> <span class="hl kwa">do</span>
        bits <span class="hl opt">=</span> bits <span class="hl opt">+</span> bits
        <span class="hl kwa">local</span> Zr<span class="hl opt">,</span> Zi<span class="hl opt">,</span> Zrq<span class="hl opt">,</span> Ziq <span class="hl opt">=</span> <span class="hl num">0.0</span><span class="hl opt">,</span> <span class="hl num">0.0</span><span class="hl opt">,</span> <span class="hl num">0.0</span><span class="hl opt">,</span> <span class="hl num">0.0</span>
        <span class="hl kwa">local</span> Cr <span class="hl opt">=</span> x <span class="hl opt">*</span> wscale <span class="hl opt">-</span> <span class="hl num">1.5</span>
        <span class="hl kwa">for</span> i<span class="hl opt">=</span><span class="hl num">1</span><span class="hl opt">,</span>m <span class="hl kwa">do</span>
         <span class="hl kwa">local</span> Zri <span class="hl opt">=</span> Zr<span class="hl opt">*</span>Zi
         Zr <span class="hl opt">=</span> Zrq <span class="hl opt">-</span> Ziq <span class="hl opt">+</span> Cr
         Zi <span class="hl opt">=</span> Zri <span class="hl opt">+</span> Zri <span class="hl opt">+</span> Ci
         Zrq <span class="hl opt">=</span> Zr<span class="hl opt">*</span>Zr
         Ziq <span class="hl opt">=</span> Zi<span class="hl opt">*</span>Zi
         <span class="hl kwa">if</span> Zrq <span class="hl opt">+</span> Ziq <span class="hl opt">&gt;</span> limit2 <span class="hl kwa">then</span>
           bits <span class="hl opt">=</span> bits <span class="hl opt">+</span> <span class="hl num">1</span>
           <span class="hl kwa">break</span>
         <span class="hl kwa">end</span>
        <span class="hl kwa">end</span>
      <span class="hl kwa">end</span>
      <span class="hl kwa">if</span> xbb <span class="hl opt">&gt;=</span> width <span class="hl kwa">then</span>
        <span class="hl kwa">for</span> x<span class="hl opt">=</span>width<span class="hl opt">,</span>xbb <span class="hl kwa">do</span> bits <span class="hl opt">=</span> bits <span class="hl opt">+</span> bits <span class="hl opt">+</span> <span class="hl num">1</span> <span class="hl kwa">end</span>
      <span class="hl kwa">end</span>
      obuff<span class="hl opt">[#</span>obuff <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">] =</span> <span class="hl kwd">char</span><span class="hl opt">(</span><span class="hl num">255</span> <span class="hl opt">-</span> bits<span class="hl opt">)</span>
     <span class="hl kwa">end</span>
   <span class="hl kwa">end</span>
   
   <span class="hl kwb">write</span><span class="hl opt">(</span><span class="hl kwb">table</span><span class="hl opt">.</span><span class="hl kwd">concat</span><span class="hl opt">(</span>obuff<span class="hl opt">))</span>
<span class="hl kwa">end</span>
