<span class="hl com">(* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * Contributed by Troestler Christophe</span>
<span class="hl com"> * Modified by Fabrice Le Fessant for</span>
<span class="hl com"> *  - tree type more compact</span>
<span class="hl com"> *  - better GC parameters</span>
<span class="hl com"> *  - loops replaced by recursive functions</span>
<span class="hl com"> *)</span>

<span class="hl kwa">type</span> <span class="hl str">'a tree = Leaf of '</span>a | <span class="hl kwd">Node</span> <span class="hl kwa">of</span> <span class="hl str">'a tree * '</span>a <span class="hl opt">*</span> <span class="hl str">'a tree</span>
<span class="hl str"></span>
<span class="hl str">let rec make d i =</span>
<span class="hl str">  if d = 0 then Leaf i</span>
<span class="hl str">  else</span>
<span class="hl str">    let l = make (d-1) (2*i - 1) in</span>
<span class="hl str">    let r = make (d-1) (2*i) in</span>
<span class="hl str">      Node(l, i, r)</span>
<span class="hl str"></span>
<span class="hl str">let rec check = function Leaf i -&gt; i | Node(l, i, r) -&gt;</span>
<span class="hl str">  let i = i + check l in</span>
<span class="hl str">    i - check r</span>
<span class="hl str"></span>
<span class="hl str">let min_depth = 4</span>
<span class="hl str">let n = if Array.length Sys.argv &lt;&gt; 2 then 0 else int_of_string Sys.argv.(1)</span>
<span class="hl str">let max_depth = max (min_depth + 2) n</span>
<span class="hl str">let stretch_depth = max_depth + 1</span>
<span class="hl str"></span>
<span class="hl str">let _ =</span>
<span class="hl str">  let gc = Gc.get () in</span>
<span class="hl str">    gc.Gc.max_overhead &lt;- 1000000;</span>
<span class="hl str">    gc.Gc.space_overhead &lt;- 500;</span>
<span class="hl str">    gc.Gc.major_heap_increment &lt;- 10_000_000;</span>
<span class="hl str">    gc.Gc.minor_heap_size &lt;- 10_000_000;</span>
<span class="hl str">    Gc.set gc</span>
<span class="hl str"></span>
<span class="hl str">let () =</span>
<span class="hl str">  let c = check (make stretch_depth 0) in</span>
<span class="hl str">  Printf.printf &quot;stretch tree of depth %i</span><span class="hl esc">\t</span> <span class="hl str">check: %i</span><span class="hl esc">\n</span><span class="hl str">&quot; stretch_depth c</span>
<span class="hl str"></span>
<span class="hl str">let long_lived_tree = make max_depth 0</span>
<span class="hl str"></span>
<span class="hl str"></span>
<span class="hl str">let rec iter i niter c d =</span>
<span class="hl str">  if i &lt;= niter then</span>
<span class="hl str">    let c = c + check(make d i) in</span>
<span class="hl str">    let c = c + check(make d (-i)) in</span>
<span class="hl str">    iter (i+1) niter c d</span>
<span class="hl str">  else</span>
<span class="hl str">    Printf.printf &quot;%i</span><span class="hl esc">\t</span> <span class="hl str">trees of depth %i</span><span class="hl esc">\t</span> <span class="hl str">check: %i</span><span class="hl esc">\n</span><span class="hl str">&quot; (2 * niter) d c</span>
<span class="hl str"></span>
<span class="hl str"></span>
<span class="hl str">let rec loop_depths d =</span>
<span class="hl str">  let niter = 1 lsl (max_depth - d + min_depth) in</span>
<span class="hl str">    iter 1 niter 0 d;</span>
<span class="hl str">    if d &lt; max_depth then</span>
<span class="hl str">      loop_depths (d+2)</span>
<span class="hl str"></span>
<span class="hl str">let () =</span>
<span class="hl str">  flush stdout;</span>
<span class="hl str">  loop_depths min_depth;</span>
<span class="hl str">  Printf.printf &quot;long lived tree of depth %i</span><span class="hl esc">\t</span> <span class="hl str">check: %i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span>
<span class="hl str">    max_depth (check long_lived_tree)</span>
<span class="hl str"></span>
