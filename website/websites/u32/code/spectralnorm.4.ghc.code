<span class="hl slc">--</span>
<span class="hl slc">-- The Computer Language Benchmarks Game</span>
<span class="hl slc">-- http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">--</span>
<span class="hl slc">-- Modified by Ryan Trinkle: 1) change from divInt# to uncheckedIShiftRA#</span>
<span class="hl slc">--                           2) changed -optc-O to -optc-O3</span>
<span class="hl slc">--                           3) added -optc-ffast-math</span>
<span class="hl slc">-- Translation from Clean by Don Stewart</span>
<span class="hl slc">-- Parallelized by Louis Wasserman</span>
<span class="hl slc">--</span>
<span class="hl slc">-- Should be compiled with:</span>
<span class="hl slc">-- 	-threaded -funbox-strict-fields -O2 -fvia-c -optc-O3 </span>
<span class="hl slc">-- 	-fexcess-precision -optc-ffast-math </span>
<span class="hl slc">-- Should be run with:</span>
<span class="hl slc">-- 	+RTS -N&lt;number of cores&gt;</span>

<span class="hl kwd">import</span> System<span class="hl opt">.</span>Environment
<span class="hl kwd">import</span> Foreign<span class="hl opt">.</span>Marshal<span class="hl opt">.</span><span class="hl kwb">Array</span>
<span class="hl kwd">import</span> Foreign
<span class="hl kwd">import</span> Text<span class="hl opt">.</span>Printf
<span class="hl kwd">import</span> Control<span class="hl opt">.</span>Concurrent
<span class="hl kwd">import</span> Control<span class="hl opt">.</span>Monad
<span class="hl kwd">import</span> GHC<span class="hl opt">.</span>Base
<span class="hl kwd">import</span> GHC<span class="hl opt">.</span>Conc

<span class="hl kwd">type</span> Reals <span class="hl opt">=</span> Ptr <span class="hl kwb">Double</span>

main <span class="hl opt">=</span> <span class="hl kwd">do</span>
    n <span class="hl opt">&lt;-</span> <span class="hl kwc">getArgs</span> <span class="hl opt">&gt;&gt;=</span> <span class="hl kwc">readIO</span> <span class="hl opt">.</span> <span class="hl kwc">head</span>
    allocaArray n <span class="hl opt">$ \</span> u <span class="hl opt">-&gt;</span> allocaArray n <span class="hl opt">$ \</span> v <span class="hl opt">-&gt;</span> <span class="hl kwd">do</span>
      forM_ <span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">..</span>n<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">] $ \</span>i <span class="hl opt">-&gt;</span> pokeElemOff u i <span class="hl num">1</span> <span class="hl opt">&gt;&gt;</span> pokeElemOff v i <span class="hl num">0</span>

      powerMethod <span class="hl num">10</span> n u v
      printf <span class="hl str">&quot;%.9f</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> <span class="hl opt">=&lt;&lt;</span> eigenvalue n u v <span class="hl num">0 0 0</span>

<span class="hl slc">------------------------------------------------------------------------</span>

eigenvalue <span class="hl opt">::</span> <span class="hl kwb">Int</span> <span class="hl opt">-&gt;</span> Reals <span class="hl opt">-&gt;</span> Reals <span class="hl opt">-&gt;</span> <span class="hl kwb">Int</span> <span class="hl opt">-&gt;</span> <span class="hl kwb">Double</span> <span class="hl opt">-&gt;</span> <span class="hl kwb">Double</span> <span class="hl opt">-&gt;</span> <span class="hl kwb">IO Double</span>
eigenvalue <span class="hl opt">!</span>n <span class="hl opt">!</span>u <span class="hl opt">!</span>v <span class="hl opt">!</span>i <span class="hl opt">!</span>vBv <span class="hl opt">!</span>vv
    | i <span class="hl opt">&lt;</span> n     <span class="hl opt">=</span> <span class="hl kwd">do</span>	ui <span class="hl opt">&lt;-</span> peekElemOff u i
			vi <span class="hl opt">&lt;-</span> peekElemOff v i
			eigenvalue n u v <span class="hl opt">(</span>i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">) (</span>vBv <span class="hl opt">+</span> ui <span class="hl opt">*</span> vi<span class="hl opt">) (</span>vv <span class="hl opt">+</span> vi <span class="hl opt">*</span> vi<span class="hl opt">)</span>
    | <span class="hl kwc">otherwise</span> <span class="hl opt">=</span> <span class="hl kwc">return</span> <span class="hl opt">$!</span> <span class="hl kwc">sqrt</span> <span class="hl opt">$!</span> vBv <span class="hl opt">/</span> vv

<span class="hl slc">------------------------------------------------------------------------</span>

<span class="hl slc">-- Essentially borrowed from the Java implementation.</span>
<span class="hl kwd">data</span> CyclicBarrier <span class="hl opt">=</span> Cyclic <span class="hl opt">!</span><span class="hl kwb">Int</span> <span class="hl opt">!(</span>MVar <span class="hl opt">(</span><span class="hl kwb">Int</span><span class="hl opt">, [</span>MVar <span class="hl opt">()]))</span>

await <span class="hl opt">::</span> CyclicBarrier <span class="hl opt">-&gt;</span> <span class="hl kwb">IO</span> <span class="hl opt">()</span>
await <span class="hl opt">(</span>Cyclic k waitsVar<span class="hl opt">) =</span> <span class="hl kwd">do</span>
	<span class="hl opt">(</span>x<span class="hl opt">,</span> waits<span class="hl opt">) &lt;-</span> takeMVar waitsVar
	<span class="hl kwd">if</span> x <span class="hl opt">&lt;=</span> <span class="hl num">1</span> <span class="hl kwd">then do</span>
		<span class="hl kwc">mapM_</span> <span class="hl opt">(</span>`putMVar` <span class="hl opt">())</span> waits
		putMVar waitsVar <span class="hl opt">(</span>k<span class="hl opt">, [])</span>
	  <span class="hl kwd">else do</span>
	  	var <span class="hl opt">&lt;-</span> newEmptyMVar
	  	putMVar waitsVar <span class="hl opt">(</span>x<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">,</span>var<span class="hl opt">:</span>waits<span class="hl opt">)</span>
	  	takeMVar var

newCyclicBarrier <span class="hl opt">::</span> <span class="hl kwb">Int</span> <span class="hl opt">-&gt;</span> <span class="hl kwb">IO</span> CyclicBarrier
newCyclicBarrier k <span class="hl opt">=</span> <span class="hl kwc">liftM</span> <span class="hl opt">(</span>Cyclic k<span class="hl opt">) (</span>newMVar <span class="hl opt">(</span>k<span class="hl opt">, []))</span>

powerMethod <span class="hl opt">::</span> <span class="hl kwb">Int</span> <span class="hl opt">-&gt;</span> <span class="hl kwb">Int</span> <span class="hl opt">-&gt;</span> Reals <span class="hl opt">-&gt;</span> Reals <span class="hl opt">-&gt;</span> <span class="hl kwb">IO</span> <span class="hl opt">()</span>
powerMethod z n u v <span class="hl opt">=</span> allocaArray n <span class="hl opt">$ \ !</span>t <span class="hl opt">-&gt;</span> <span class="hl kwd">do</span>
	<span class="hl kwd">let</span> chunk <span class="hl opt">= (</span>n <span class="hl opt">+</span> numCapabilities <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">)</span> `quotInt` numCapabilities
	<span class="hl opt">!</span>barrier <span class="hl opt">&lt;-</span> newCyclicBarrier <span class="hl opt">$! (</span>n <span class="hl opt">+</span> chunk <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">)</span> `quotInt` chunk
	<span class="hl kwd">let</span> timesAtAv <span class="hl opt">!</span>s <span class="hl opt">!</span>d l r <span class="hl opt">=</span> <span class="hl kwd">do</span>
		timesAv n s t l r
		await barrier
		timesAtv n t d l r
		await barrier
	<span class="hl kwd">let</span> thread <span class="hl opt">!</span>l <span class="hl opt">!</span>r <span class="hl opt">=</span> <span class="hl kwc">foldr</span> <span class="hl opt">(&gt;&gt;) (</span><span class="hl kwc">return</span> <span class="hl opt">()) $</span> <span class="hl kwc">replicate</span> z <span class="hl opt">$</span> <span class="hl kwd">do</span>
		timesAtAv u v l r
		timesAtAv v u l r
	<span class="hl kwd">let</span> go l <span class="hl opt">=</span> <span class="hl kwd">case</span> l <span class="hl opt">+</span> chunk <span class="hl kwd">of</span>
		r | r <span class="hl opt">&lt;</span> n	<span class="hl opt">-&gt;</span> forkIO <span class="hl opt">(</span>thread l r<span class="hl opt">) &gt;&gt;</span> go r
		  | <span class="hl kwc">otherwise</span>	<span class="hl opt">-&gt;</span> thread l n
	go <span class="hl num">0</span>

timesAv <span class="hl opt">::</span> <span class="hl kwb">Int</span> <span class="hl opt">-&gt;</span> Reals <span class="hl opt">-&gt;</span> Reals <span class="hl opt">-&gt;</span> <span class="hl kwb">Int</span> <span class="hl opt">-&gt;</span> <span class="hl kwb">Int</span> <span class="hl opt">-&gt;</span> <span class="hl kwb">IO</span> <span class="hl opt">()</span>
timesAv <span class="hl opt">!</span>n <span class="hl opt">!</span>u <span class="hl opt">!</span>au <span class="hl opt">!</span>l <span class="hl opt">!</span>r <span class="hl opt">=</span> go l <span class="hl kwd">where</span>
    go <span class="hl opt">::</span> <span class="hl kwb">Int</span> <span class="hl opt">-&gt;</span> <span class="hl kwb">IO</span> <span class="hl opt">()</span>
    go <span class="hl opt">!</span>i <span class="hl opt">=</span> <span class="hl kwc">when</span> <span class="hl opt">(</span>i <span class="hl opt">&lt;</span> r<span class="hl opt">) $</span> <span class="hl kwd">do</span>
	<span class="hl kwd">let</span> avsum <span class="hl opt">!</span>j <span class="hl opt">!</span>acc
		| j <span class="hl opt">&lt;</span> n <span class="hl opt">=</span> <span class="hl kwd">do</span>
			<span class="hl opt">!</span>uj <span class="hl opt">&lt;-</span> peekElemOff u j
			avsum <span class="hl opt">(</span>j<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">) (</span>acc <span class="hl opt">+ ((</span>aij i j<span class="hl opt">) *</span> uj<span class="hl opt">))</span>
		| <span class="hl kwc">otherwise</span> <span class="hl opt">=</span> pokeElemOff au i acc <span class="hl opt">&gt;&gt;</span> go <span class="hl opt">(</span>i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)</span>
	avsum <span class="hl num">0 0</span>

timesAtv <span class="hl opt">::</span> <span class="hl kwb">Int</span> <span class="hl opt">-&gt;</span> Reals <span class="hl opt">-&gt;</span> Reals <span class="hl opt">-&gt;</span> <span class="hl kwb">Int</span> <span class="hl opt">-&gt;</span> <span class="hl kwb">Int</span> <span class="hl opt">-&gt;</span> <span class="hl kwb">IO</span> <span class="hl opt">()</span>
timesAtv <span class="hl opt">!</span>n <span class="hl opt">!</span>u <span class="hl opt">!</span>a <span class="hl opt">!</span>l <span class="hl opt">!</span>r <span class="hl opt">=</span> go l
  <span class="hl kwd">where</span>
    go <span class="hl opt">::</span> <span class="hl kwb">Int</span> <span class="hl opt">-&gt;</span> <span class="hl kwb">IO</span> <span class="hl opt">()</span>
    go <span class="hl opt">!</span>i <span class="hl opt">=</span> <span class="hl kwc">when</span> <span class="hl opt">(</span>i <span class="hl opt">&lt;</span> r<span class="hl opt">) $</span> <span class="hl kwd">do</span>
	<span class="hl kwd">let</span> atvsum <span class="hl opt">!</span>j <span class="hl opt">!</span>acc 
		| j <span class="hl opt">&lt;</span> n	<span class="hl opt">=</span> <span class="hl kwd">do</span>	<span class="hl opt">!</span>uj <span class="hl opt">&lt;-</span> peekElemOff u j
				atvsum <span class="hl opt">(</span>j<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">) (</span>acc <span class="hl opt">+ ((</span>aij j i<span class="hl opt">) *</span> uj<span class="hl opt">))</span>
		| <span class="hl kwc">otherwise</span> <span class="hl opt">=</span> pokeElemOff a i acc <span class="hl opt">&gt;&gt;</span> go <span class="hl opt">(</span>i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)</span>
	atvsum <span class="hl num">0 0</span>

<span class="hl slc">--</span>
<span class="hl slc">-- manually unbox the inner loop:</span>
<span class="hl slc">-- aij i j = 1 / fromIntegral ((i+j) * (i+j+1) `div` 2 + i + 1)</span>
<span class="hl slc">--</span>
aij <span class="hl opt">(</span>I<span class="hl opt">#</span> i<span class="hl opt">) (</span>I<span class="hl opt">#</span> j<span class="hl opt">) =</span> D<span class="hl opt"># (</span>
    <span class="hl kwd">case</span> i <span class="hl opt">+#</span> j <span class="hl kwd">of</span>
        n <span class="hl opt">-&gt;</span> <span class="hl num">1.0</span><span class="hl opt">## /##</span> int2Double<span class="hl opt">#</span> 
        	<span class="hl opt">(((</span>n <span class="hl opt">*# (</span>n<span class="hl opt">+#</span><span class="hl num">1</span><span class="hl opt">#))</span> `uncheckedIShiftRA<span class="hl opt">#</span>` <span class="hl num">1</span><span class="hl opt">#) +# (</span>i <span class="hl opt">+#</span> <span class="hl num">1</span><span class="hl opt">#)))</span>
