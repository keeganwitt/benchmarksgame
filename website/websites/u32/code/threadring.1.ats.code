<span class="hl com">(*</span>
<span class="hl com">** The Computer Language Benchmarks Game</span>
<span class="hl com">** http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com">**</span>
<span class="hl com">** contributed by Hongwei Xi</span>
<span class="hl com">**</span>
<span class="hl com">** compilation command:</span>
<span class="hl com">**   atscc -O3 -fomit-frame-pointer thread-ring.dats -o thread-ring -lpthread</span>
<span class="hl com">*)</span>

<span class="hl opt">%{^</span>

<span class="hl ppc">#include &lt;stdio.h&gt;</span>
<span class="hl ppc">#include &lt;stdlib.h&gt;</span>
<span class="hl ppc">#include &lt;pthread.h&gt;</span>
<span class="hl ppc">#include &lt;string.h&gt;</span>
<span class="hl ppc">#include &lt;limits.h&gt;</span>

<span class="hl ppc">#define NTHREAD (503)</span>

<span class="hl kwa">static</span> pthread_mutex_t mutex0 <span class="hl opt">;</span>
<span class="hl kwa">static</span> pthread_mutex_t mutexarr<span class="hl opt">[</span><span class="hl kwd">NTHREAD</span><span class="hl opt">] ;</span>
<span class="hl kwa">typedef struct</span> <span class="hl opt">{</span> char _<span class="hl opt">[</span><span class="hl kwd">PTHREAD_STACK_MIN</span><span class="hl opt">] ; }</span> threadstack <span class="hl opt">;</span>
<span class="hl kwa">static</span> threadstack threadstackarr<span class="hl opt">[</span><span class="hl kwd">NTHREAD</span><span class="hl opt">] ;</span>

<span class="hl kwa">static inline</span>
ats_void_type lock_acquire <span class="hl opt">(</span>ats_int_type i<span class="hl opt">) {</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>i <span class="hl opt">==</span> <span class="hl num">0</span><span class="hl opt">) {</span>
    pthread_mutex_lock <span class="hl opt">(&amp;</span>mutex0<span class="hl opt">) ;</span>
  <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
    pthread_mutex_lock <span class="hl opt">(&amp;</span>mutexarr<span class="hl opt">[</span>i<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">]) ;</span>
  <span class="hl opt">}</span>
  <span class="hl kwa">return</span> <span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwa">static inline</span>
ats_void_type lock_release <span class="hl opt">(</span>ats_int_type i<span class="hl opt">) {</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>i <span class="hl opt">==</span> <span class="hl num">0</span><span class="hl opt">) {</span>
    pthread_mutex_unlock <span class="hl opt">(&amp;</span>mutex0<span class="hl opt">) ;</span>
  <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
    pthread_mutex_unlock <span class="hl opt">(&amp;</span>mutexarr<span class="hl opt">[</span>i<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">]) ;</span>
  <span class="hl opt">}</span>
  <span class="hl kwa">return</span> <span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl opt">%}</span>

<span class="hl ppc">#define NTHREAD (503)</span>

<span class="hl opt">%{^</span>

<span class="hl kwa">static</span> ats_int_type the_answer <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl opt">;</span>

<span class="hl kwa">static inline</span>
ats_int_type the_answer_get <span class="hl opt">() {</span> <span class="hl kwa">return</span> the_answer <span class="hl opt">; }</span>

<span class="hl kwa">static inline</span>
ats_void_type the_answer_set <span class="hl opt">(</span>ats_int_type n<span class="hl opt">) {</span> the_answer <span class="hl opt">=</span> n <span class="hl opt">;</span> <span class="hl kwa">return</span> <span class="hl opt">; }</span>

<span class="hl com">/* ****** ****** */</span>

<span class="hl kwa">static</span> ats_int_type the_token <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl opt">;</span>

<span class="hl kwa">static inline</span>
ats_int_type the_token_get <span class="hl opt">() {</span> <span class="hl kwa">return</span> the_token <span class="hl opt">; }</span>

<span class="hl kwa">static inline</span>
ats_void_type the_token_set <span class="hl opt">(</span>ats_int_type n<span class="hl opt">) {</span> the_token <span class="hl opt">=</span> n <span class="hl opt">;</span> <span class="hl kwa">return</span> <span class="hl opt">; }</span>

<span class="hl opt">%}</span>

absview ticket_v

<span class="hl kwa">extern fun</span> the_answer_get <span class="hl opt">(</span>pf<span class="hl opt">: !</span>ticket_v | <span class="hl com">(*nil*)</span><span class="hl opt">):</span> <span class="hl kwb">int</span> <span class="hl opt">=</span> <span class="hl str">&quot;the_answer_get&quot;</span>
<span class="hl kwa">extern fun</span> the_answer_set <span class="hl opt">(</span>pf<span class="hl opt">: !</span>ticket_v | n<span class="hl opt">:</span> <span class="hl kwb">int</span><span class="hl opt">):</span> void <span class="hl opt">=</span> <span class="hl str">&quot;the_answer_set&quot;</span>

<span class="hl kwa">extern fun</span> the_token_get <span class="hl opt">(</span>pf<span class="hl opt">: !</span>ticket_v | <span class="hl com">(*nil*)</span><span class="hl opt">):</span> <span class="hl kwb">int</span> <span class="hl opt">=</span> <span class="hl str">&quot;the_token_get&quot;</span>
<span class="hl kwa">extern fun</span> the_token_set <span class="hl opt">(</span>pf<span class="hl opt">: !</span>ticket_v | n<span class="hl opt">:</span> <span class="hl kwb">int</span><span class="hl opt">):</span> void <span class="hl opt">=</span> <span class="hl str">&quot;the_token_set&quot;</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">extern fun</span> lock_acquire <span class="hl opt">(</span>i<span class="hl opt">:</span> natLte <span class="hl kwd">NTHREAD</span><span class="hl opt">): (</span>ticket_v | void<span class="hl opt">)</span>
  <span class="hl opt">=</span> <span class="hl str">&quot;lock_acquire&quot;</span>

<span class="hl kwa">extern fun</span> lock_release <span class="hl opt">(</span>pf<span class="hl opt">:</span> ticket_v | i<span class="hl opt">:</span> natLte <span class="hl kwd">NTHREAD</span><span class="hl opt">):</span> void
  <span class="hl opt">=</span> <span class="hl str">&quot;lock_release&quot;</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">extern fun</span> fthread
  <span class="hl opt">{</span>i<span class="hl opt">:</span><span class="hl kwb">int</span> | <span class="hl num">1</span> <span class="hl opt">&lt;=</span> i<span class="hl opt">;</span> i <span class="hl opt">&lt;=</span> <span class="hl kwd">NTHREAD</span><span class="hl opt">} (</span>i<span class="hl opt">:</span> <span class="hl kwb">int</span> i<span class="hl opt">):</span> void <span class="hl opt">=</span> <span class="hl str">&quot;fthread&quot;</span>

<span class="hl kwa">implement</span> fthread <span class="hl opt">(</span>i<span class="hl opt">) =</span> <span class="hl kwa">let</span>
<span class="hl com">(*</span>
<span class="hl com">  val () = (prerr &quot;fthread: i = &quot;; prerr i ; prerr_newline ())</span>
<span class="hl com">*)</span>
  <span class="hl kwa">val</span> <span class="hl opt">(</span>pf | <span class="hl opt">()) =</span> lock_acquire <span class="hl opt">(</span>i<span class="hl opt">)</span>
  <span class="hl kwa">val</span> n <span class="hl opt">=</span> the_token_get <span class="hl opt">(</span>pf | <span class="hl com">(*nil*)</span><span class="hl opt">)</span>
<span class="hl com">(*</span>
<span class="hl com">  val () = (prerr &quot;fthread: n = &quot;; prerr n ; prerr_newline ())</span>
<span class="hl com">*)</span>
  <span class="hl kwa">val</span> i1 <span class="hl opt">=</span> i <span class="hl opt">+</span> <span class="hl num">1</span>
  <span class="hl kwa">val</span> i1 <span class="hl opt">= (</span><span class="hl kwa">if</span> i1 <span class="hl opt">&lt;=</span> <span class="hl kwd">NTHREAD</span> <span class="hl kwa">then</span> i1 <span class="hl kwa">else</span> <span class="hl num">1</span><span class="hl opt">):</span> natLte <span class="hl kwd">NTHREAD</span>
<span class="hl kwa">in</span>
  <span class="hl kwa">if</span> n <span class="hl opt">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then let</span>
    <span class="hl kwa">val</span> <span class="hl opt">() =</span> the_token_set <span class="hl opt">(</span>pf | n <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">);</span> <span class="hl kwa">val</span> <span class="hl opt">() =</span> lock_release <span class="hl opt">(</span>pf | i1<span class="hl opt">)</span>
  <span class="hl kwa">in</span>
    fthread <span class="hl opt">(</span>i<span class="hl opt">)</span>
  <span class="hl kwa">end else begin</span>
    the_answer_set <span class="hl opt">(</span>pf | i<span class="hl opt">);</span> lock_release <span class="hl opt">(</span>pf | <span class="hl num">0</span><span class="hl opt">)</span>
  <span class="hl kwa">end</span> <span class="hl slc">// end of [if]</span>
<span class="hl kwa">end</span> <span class="hl slc">// end of [fthread]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">extern fun</span> initialization <span class="hl opt">(</span>n<span class="hl opt">:</span> <span class="hl kwd">Nat</span><span class="hl opt">): (</span>ticket_v | void<span class="hl opt">) =</span> <span class="hl str">&quot;initialization&quot;</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">implement</span> main <span class="hl opt">(</span>argc<span class="hl opt">,</span> argv<span class="hl opt">) =</span> <span class="hl kwa">let</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> <span class="hl kwa">assert</span> <span class="hl opt">(</span>argc <span class="hl opt">&gt;=</span> <span class="hl num">2</span><span class="hl opt">)</span>
  <span class="hl kwa">val</span> n <span class="hl opt">=</span> int1_of_string <span class="hl opt">(</span>argv<span class="hl opt">.[</span><span class="hl num">1</span><span class="hl opt">])</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> <span class="hl kwa">assert</span> <span class="hl opt">(</span>n <span class="hl opt">&gt;=</span> <span class="hl num">0</span><span class="hl opt">)</span>
  <span class="hl kwa">val</span> <span class="hl opt">(</span>pf | <span class="hl opt">()) =</span> initialization <span class="hl opt">(</span>n<span class="hl opt">)</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> lock_release <span class="hl opt">(</span>pf | <span class="hl num">1</span><span class="hl opt">)</span>
  <span class="hl kwa">val</span> <span class="hl opt">(</span>pf | <span class="hl opt">()) =</span> lock_acquire <span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">)</span>
  <span class="hl kwa">val</span> ans <span class="hl opt">=</span> the_answer_get <span class="hl opt">(</span>pf | <span class="hl com">(*nil*)</span><span class="hl opt">)</span>
  prval <span class="hl opt">() =</span> __leak <span class="hl opt">(</span>pf<span class="hl opt">)</span> where <span class="hl opt">{</span>
    <span class="hl kwa">extern</span> prfun __leak <span class="hl opt">(</span>pf<span class="hl opt">:</span> ticket_v<span class="hl opt">):</span> void
  <span class="hl opt">}</span>
<span class="hl kwa">in</span>
  print ans<span class="hl opt">;</span> print_newline <span class="hl opt">()</span>
<span class="hl kwa">end</span> <span class="hl slc">// end of [main]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl opt">%{</span>$

ats_void_type initialization <span class="hl opt">(</span>ats_int_type n<span class="hl opt">) {</span>
  <span class="hl kwb">int</span> i<span class="hl opt">;</span>
  pthread_t tid <span class="hl opt">;</span>
  pthread_mutex_t <span class="hl opt">*</span>p_mutex <span class="hl opt">;</span>
  pthread_attr_t thread_attr <span class="hl opt">;</span>
  threadstack <span class="hl opt">*</span>p_threadstack <span class="hl opt">;</span>

  the_token <span class="hl opt">=</span> n <span class="hl opt">;</span>

  pthread_mutex_init <span class="hl opt">(&amp;</span>mutex0<span class="hl opt">,</span> <span class="hl kwd">NULL</span><span class="hl opt">) ;</span>
  pthread_mutex_lock <span class="hl opt">(&amp;</span>mutex0<span class="hl opt">) ;</span>

  pthread_attr_init <span class="hl opt">(&amp;</span>thread_attr<span class="hl opt">) ;</span>

  i <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl opt">;</span>
  p_mutex <span class="hl opt">= &amp;</span>mutexarr<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] ;</span>
  p_threadstack <span class="hl opt">= &amp;</span>threadstackarr<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] ;</span>
  <span class="hl kwa">while</span> <span class="hl opt">(</span>i <span class="hl opt">&lt;</span> <span class="hl kwd">NTHREAD</span><span class="hl opt">) {</span>
    pthread_mutex_init <span class="hl opt">(</span>p_mutex<span class="hl opt">,</span> <span class="hl kwd">NULL</span><span class="hl opt">);</span> pthread_mutex_lock <span class="hl opt">(</span>p_mutex<span class="hl opt">);</span>
    pthread_attr_setstack <span class="hl opt">(&amp;</span>thread_attr<span class="hl opt">,</span> p_threadstack<span class="hl opt">,</span> sizeof<span class="hl opt">(</span>threadstack<span class="hl opt">)) ;</span>
    pthread_create<span class="hl opt">(&amp;</span>tid<span class="hl opt">, &amp;</span>thread_attr<span class="hl opt">, (</span>void<span class="hl opt">*</span> <span class="hl com">(*)(void*)</span><span class="hl opt">)</span>fthread<span class="hl opt">, (</span>void*)<span class="hl opt">(</span>intptr_t<span class="hl opt">)(</span>i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)) ;</span>
    i <span class="hl opt">+=</span> <span class="hl num">1</span> <span class="hl opt">;</span> p_mutex <span class="hl opt">+=</span> <span class="hl num">1</span> <span class="hl opt">;</span> p_threadstack <span class="hl opt">+=</span> <span class="hl num">1</span> <span class="hl opt">;</span>
  <span class="hl opt">}</span>

  fprintf <span class="hl opt">(</span>stderr<span class="hl opt">,</span> <span class="hl str">&quot;PTHREAD_STACK_MIN = %i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> <span class="hl kwd">PTHREAD_STACK_MIN</span><span class="hl opt">) ;</span>
  <span class="hl kwa">return</span> <span class="hl opt">;</span>
<span class="hl opt">}</span> <span class="hl slc">// end of [initialization]</span>

<span class="hl opt">%}</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl com">(* end of [thread-ring] *)</span>
