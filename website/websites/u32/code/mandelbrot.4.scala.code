<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * contributed by Benedikt Nordhoff</span>
<span class="hl com"> * direct translation from Java #2 by Stefan Krause et al.</span>
<span class="hl com"> */</span>

<span class="hl kwa">import</span> java<span class="hl opt">.</span>io<span class="hl opt">.</span>_
<span class="hl kwa">import</span> java<span class="hl opt">.</span>util<span class="hl opt">.</span>concurrent<span class="hl opt">.</span>atomic<span class="hl opt">.</span>_

<span class="hl kwa">object</span> mandelbrot <span class="hl opt">{</span>
  <span class="hl kwa">var</span> out<span class="hl opt">:</span>Array<span class="hl opt">[</span>Array<span class="hl opt">[</span>Byte<span class="hl opt">]] =</span> null
  <span class="hl kwa">var</span> yCt<span class="hl opt">:</span>AtomicInteger <span class="hl opt">=</span> null
  <span class="hl kwa">var</span> Crb<span class="hl opt">:</span>Array<span class="hl opt">[</span>Double<span class="hl opt">] =</span> null
  <span class="hl kwa">var</span> Cib<span class="hl opt">:</span>Array<span class="hl opt">[</span>Double<span class="hl opt">] =</span> null
  
  <span class="hl kwa">def</span> <span class="hl kwd">getByte</span><span class="hl opt">(</span>x<span class="hl opt">:</span>Int<span class="hl opt">,</span> y<span class="hl opt">:</span>Int<span class="hl opt">) :</span> Int <span class="hl opt">= {</span>
    <span class="hl kwa">var</span> res<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">for</span><span class="hl opt">(</span>i <span class="hl opt">&lt;-</span> <span class="hl num">0</span> until <span class="hl num">8</span> by <span class="hl num">2</span><span class="hl opt">){</span>
      <span class="hl kwa">var</span> Zr1<span class="hl opt">=</span><span class="hl kwd">Crb</span><span class="hl opt">(</span>x<span class="hl opt">+</span>i<span class="hl opt">)</span>
      <span class="hl kwa">var</span> Zi1<span class="hl opt">=</span><span class="hl kwd">Cib</span><span class="hl opt">(</span>y<span class="hl opt">)</span>
      
      <span class="hl kwa">var</span> Zr2<span class="hl opt">=</span><span class="hl kwd">Crb</span><span class="hl opt">(</span>x<span class="hl opt">+</span>i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)</span>
      <span class="hl kwa">var</span> Zi2<span class="hl opt">=</span><span class="hl kwd">Cib</span><span class="hl opt">(</span>y<span class="hl opt">)</span>
      
      <span class="hl kwa">var</span> b<span class="hl opt">=</span><span class="hl num">0</span>
      <span class="hl kwa">var</span> j<span class="hl opt">=</span><span class="hl num">49</span>
      <span class="hl kwa">var</span> goOn <span class="hl opt">=</span> true
      <span class="hl kwa">do</span><span class="hl opt">{</span>
        <span class="hl kwa">val</span> nZr1<span class="hl opt">=</span>Zr1<span class="hl opt">*</span>Zr1<span class="hl opt">-</span>Zi1<span class="hl opt">*</span>Zi1<span class="hl opt">+</span><span class="hl kwd">Crb</span><span class="hl opt">(</span>x<span class="hl opt">+</span>i<span class="hl opt">)</span>
        <span class="hl kwa">val</span> nZi1<span class="hl opt">=</span>Zr1<span class="hl opt">*</span>Zi1<span class="hl opt">+</span>Zr1<span class="hl opt">*</span>Zi1<span class="hl opt">+</span><span class="hl kwd">Cib</span><span class="hl opt">(</span>y<span class="hl opt">)</span>
        Zr1<span class="hl opt">=</span>nZr1<span class="hl opt">;</span>Zi1<span class="hl opt">=</span>nZi1
         
        <span class="hl kwa">val</span> nZr2<span class="hl opt">=</span>Zr2<span class="hl opt">*</span>Zr2<span class="hl opt">-</span>Zi2<span class="hl opt">*</span>Zi2<span class="hl opt">+</span><span class="hl kwd">Crb</span><span class="hl opt">(</span>x<span class="hl opt">+</span>i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">);</span>
        <span class="hl kwa">val</span> nZi2<span class="hl opt">=</span>Zr2<span class="hl opt">*</span>Zi2<span class="hl opt">+</span>Zr2<span class="hl opt">*</span>Zi2<span class="hl opt">+</span><span class="hl kwd">Cib</span><span class="hl opt">(</span>y<span class="hl opt">);</span>
        Zr2<span class="hl opt">=</span>nZr2<span class="hl opt">;</span>Zi2<span class="hl opt">=</span>nZi2<span class="hl opt">;</span>
         
        <span class="hl kwa">if</span><span class="hl opt">(</span>Zr1<span class="hl opt">*</span>Zr1<span class="hl opt">+</span>Zi1<span class="hl opt">*</span>Zi1<span class="hl opt">&gt;</span><span class="hl num">4</span><span class="hl opt">){</span>b<span class="hl opt">|=</span><span class="hl num">2</span><span class="hl opt">;</span>goOn <span class="hl opt">=</span> b <span class="hl opt">!=</span> <span class="hl num">3</span><span class="hl opt">}</span>
        <span class="hl kwa">if</span><span class="hl opt">(</span>Zr2<span class="hl opt">*</span>Zr2<span class="hl opt">+</span>Zi2<span class="hl opt">*</span>Zi2<span class="hl opt">&gt;</span><span class="hl num">4</span><span class="hl opt">){</span>b<span class="hl opt">|=</span><span class="hl num">1</span><span class="hl opt">;</span>goOn <span class="hl opt">=</span> b<span class="hl opt">!=</span><span class="hl num">3</span><span class="hl opt">}</span>
        j<span class="hl opt">-=</span><span class="hl num">1</span>
      <span class="hl opt">}</span><span class="hl kwa">while</span><span class="hl opt">(</span>j<span class="hl opt">&gt;</span><span class="hl num">0</span><span class="hl opt">&amp;&amp;</span> goOn<span class="hl opt">)</span>
      res<span class="hl opt">=(</span>res<span class="hl opt">&lt;&lt;</span><span class="hl num">2</span><span class="hl opt">)+</span>b<span class="hl opt">;</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return</span> res^<span class="hl opt">(-</span><span class="hl num">1</span><span class="hl opt">);</span>
  <span class="hl opt">}</span>

  <span class="hl kwa">def</span> <span class="hl kwd">putLine</span><span class="hl opt">(</span>y<span class="hl opt">:</span>Int<span class="hl opt">,</span> line<span class="hl opt">:</span>Array<span class="hl opt">[</span>Byte<span class="hl opt">]){</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span>xb <span class="hl opt">&lt;-</span> <span class="hl num">0</span> until line<span class="hl opt">.</span>length<span class="hl opt">)</span>
      <span class="hl kwd">line</span><span class="hl opt">(</span>xb<span class="hl opt">)=</span><span class="hl kwd">getByte</span><span class="hl opt">(</span>xb<span class="hl opt">*</span><span class="hl num">8</span><span class="hl opt">,</span>y<span class="hl opt">).</span>toByte
  <span class="hl opt">}</span>

  <span class="hl kwa">def</span> <span class="hl kwd">main</span><span class="hl opt">(</span>args<span class="hl opt">:</span>Array<span class="hl opt">[</span>String<span class="hl opt">]) {</span>
    <span class="hl kwa">var</span> N<span class="hl opt">=</span><span class="hl num">6000</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>args<span class="hl opt">.</span>length<span class="hl opt">&gt;=</span><span class="hl num">1</span><span class="hl opt">)</span> N <span class="hl opt">=</span> <span class="hl kwd">args</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">).</span>toInt
    
    Crb<span class="hl opt">=</span><span class="hl kwa">new</span> Array<span class="hl opt">[</span>Double<span class="hl opt">](</span>N<span class="hl opt">+</span><span class="hl num">7</span><span class="hl opt">);</span> Cib<span class="hl opt">=</span><span class="hl kwa">new</span> Array<span class="hl opt">[</span>Double<span class="hl opt">](</span>N<span class="hl opt">+</span><span class="hl num">7</span><span class="hl opt">)</span>
    <span class="hl kwa">val</span> invN<span class="hl opt">=</span><span class="hl num">2.0</span><span class="hl opt">/</span>N<span class="hl opt">;</span> <span class="hl kwa">for</span><span class="hl opt">(</span>i <span class="hl opt">&lt;-</span> <span class="hl num">0</span> until N<span class="hl opt">){</span> <span class="hl kwd">Cib</span><span class="hl opt">(</span>i<span class="hl opt">)=</span>i<span class="hl opt">*</span>invN<span class="hl opt">-</span><span class="hl num">1.0</span><span class="hl opt">;</span> <span class="hl kwd">Crb</span><span class="hl opt">(</span>i<span class="hl opt">)=</span>i<span class="hl opt">*</span>invN<span class="hl opt">-</span><span class="hl num">1.5</span><span class="hl opt">; }</span>
    yCt<span class="hl opt">=</span><span class="hl kwa">new</span> <span class="hl kwd">AtomicInteger</span><span class="hl opt">()</span>
    out<span class="hl opt">=</span>Array<span class="hl opt">.</span><span class="hl kwd">ofDim</span><span class="hl opt">(</span>N<span class="hl opt">,(</span>N<span class="hl opt">+</span><span class="hl num">7</span><span class="hl opt">)/</span><span class="hl num">8</span><span class="hl opt">)</span>
    
    <span class="hl kwa">val</span> pool<span class="hl opt">=</span><span class="hl kwa">new</span> Array<span class="hl opt">[</span>Thread<span class="hl opt">](</span><span class="hl num">2</span><span class="hl opt">*</span>Runtime<span class="hl opt">.</span><span class="hl kwd">getRuntime</span><span class="hl opt">().</span><span class="hl kwd">availableProcessors</span><span class="hl opt">())</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">&lt;-</span> <span class="hl num">0</span> until pool<span class="hl opt">.</span>length<span class="hl opt">)</span>
      <span class="hl kwd">pool</span><span class="hl opt">(</span>i<span class="hl opt">)=</span><span class="hl kwa">new</span> <span class="hl kwd">Thread</span><span class="hl opt">(){</span>
        <span class="hl kwa">override def</span> <span class="hl kwd">run</span><span class="hl opt">() {</span>
          <span class="hl kwa">var</span> y<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span> <span class="hl kwa">while</span><span class="hl opt">({</span>y<span class="hl opt">=</span>yCt<span class="hl opt">.</span><span class="hl kwd">getAndIncrement</span><span class="hl opt">();</span>y<span class="hl opt">}&lt;</span>out<span class="hl opt">.</span>length<span class="hl opt">)</span> <span class="hl kwd">putLine</span><span class="hl opt">(</span>y<span class="hl opt">,</span><span class="hl kwd">out</span><span class="hl opt">(</span>y<span class="hl opt">))</span>
        <span class="hl opt">}</span>
      <span class="hl opt">}</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span>t <span class="hl opt">&lt;-</span> pool<span class="hl opt">)</span> t<span class="hl opt">.</span><span class="hl kwd">start</span><span class="hl opt">()</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span>t <span class="hl opt">&lt;-</span> pool<span class="hl opt">)</span> t<span class="hl opt">.</span><span class="hl kwd">join</span><span class="hl opt">()</span>

    <span class="hl kwa">val</span> stream <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">BufferedOutputStream</span><span class="hl opt">(</span>System<span class="hl opt">.</span>out<span class="hl opt">)</span>
    stream<span class="hl opt">.</span><span class="hl kwd">write</span><span class="hl opt">((</span><span class="hl str">&quot;P4</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">+</span>N<span class="hl opt">+</span><span class="hl str">&quot; &quot;</span><span class="hl opt">+</span>N<span class="hl opt">+</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">).</span><span class="hl kwd">getBytes</span><span class="hl opt">())</span>
    <span class="hl kwa">for</span><span class="hl opt">(</span>i<span class="hl opt">&lt;-</span> <span class="hl num">0</span> until N<span class="hl opt">)</span> stream<span class="hl opt">.</span><span class="hl kwd">write</span><span class="hl opt">(</span><span class="hl kwd">out</span><span class="hl opt">(</span>i<span class="hl opt">))</span>
    stream<span class="hl opt">.</span><span class="hl kwd">close</span><span class="hl opt">()</span>
   <span class="hl opt">}</span>
<span class="hl opt">}</span>
