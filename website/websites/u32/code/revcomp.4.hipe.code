<span class="hl slc">% The Computer Language Benchmarks Game</span>
<span class="hl slc">% http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">%%</span>
<span class="hl slc">%% Based on two Erlang versions contributed by</span>
<span class="hl slc">%% Vlad Balin and Fredrik Svahn.</span>
<span class="hl slc">%%</span>
<span class="hl slc">%% contributed by Michael Pitidis</span>
<span class="hl slc">%%</span>

<span class="hl slc">%% This program performs reasonably with Erlang R12B3 5.6.3 (Debian Sid),</span>
<span class="hl slc">%% and about 5 times faster with Erlang R12B5 5.6.5 (Debian Sid),</span>
<span class="hl slc">%% but is horribly slow with Erlang R13A (erts-5.7, HiPE CVS), and requires</span>
<span class="hl slc">%% ridiculous amounts of memory (had to abort execution for the 25.000.000</span>
<span class="hl slc">%% test case).</span>

<span class="hl opt">-</span><span class="hl kwd">module</span><span class="hl opt">(</span>revcomp<span class="hl opt">).</span>

<span class="hl opt">-</span><span class="hl kwd">compile</span><span class="hl opt">([</span>native<span class="hl opt">, {</span>hipe<span class="hl opt">, [</span>o3<span class="hl opt">]},</span> inline<span class="hl opt">, {</span>inline_size<span class="hl opt">,</span> <span class="hl num">100</span><span class="hl opt">}]).</span>

<span class="hl slc">%-compile(export_all).</span>
<span class="hl opt">-</span><span class="hl kwd">export</span><span class="hl opt">([</span>main<span class="hl opt">/</span><span class="hl num">1</span><span class="hl opt">]).</span>

<span class="hl opt">-</span><span class="hl kwd">define</span><span class="hl opt">(</span>WIDTH<span class="hl opt">,</span> <span class="hl num">60</span><span class="hl opt">).</span>
<span class="hl opt">-</span><span class="hl kwd">define</span><span class="hl opt">(</span>WORKERS<span class="hl opt">,</span> <span class="hl num">4</span><span class="hl opt">).</span>

<span class="hl kwd">main</span><span class="hl opt">([</span>_Args<span class="hl opt">]) -&gt;</span>
  <span class="hl kwc">io</span><span class="hl opt">:</span><span class="hl kwd">setopts</span><span class="hl opt">([</span><span class="hl kwb">binary</span><span class="hl opt">]),</span>
  <span class="hl kwd">run_parallel</span><span class="hl opt">(),</span>
  <span class="hl kwb">halt</span><span class="hl opt">().</span>

<span class="hl slc">%% Set up one process for reading. Transformations and printing are</span>
<span class="hl slc">%% handled asynchronously in separate processes.</span>
<span class="hl kwd">run_parallel</span><span class="hl opt">() -&gt;</span>
  <span class="hl kwb">register</span><span class="hl opt">(</span>reader<span class="hl opt">,</span> <span class="hl kwb">self</span><span class="hl opt">()),</span>
  reader <span class="hl opt">!</span> go<span class="hl opt">,</span>
  <span class="hl kwd">loop</span><span class="hl opt">(&lt;&lt; &gt;&gt;).</span>

<span class="hl kwd">loop</span><span class="hl opt">(</span>Buf<span class="hl opt">) -&gt;</span>
  <span class="hl kwa">case</span> <span class="hl kwc">io</span><span class="hl opt">:</span><span class="hl kwd">get_line</span><span class="hl opt">(</span><span class="hl str">''</span><span class="hl opt">)</span> <span class="hl kwa">of</span>
    eof <span class="hl opt">-&gt;</span>
      <span class="hl kwa">receive</span> go <span class="hl opt">-&gt;</span> ok <span class="hl kwa">end</span><span class="hl opt">,</span>
      <span class="hl kwb">spawn</span><span class="hl opt">(</span><span class="hl kwa">fun</span><span class="hl opt">() -&gt;</span> <span class="hl kwd">flush</span><span class="hl opt">(&lt;&lt; &gt;&gt;,</span> Buf<span class="hl opt">)</span> <span class="hl kwa">end</span><span class="hl opt">),</span>
      <span class="hl kwa">receive</span> go <span class="hl opt">-&gt;</span> ok <span class="hl kwa">end</span><span class="hl opt">;</span>
    <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;&gt;&quot;</span><span class="hl opt">,</span> _<span class="hl opt">/</span>bytes <span class="hl opt">&gt;&gt; =</span> Comment <span class="hl opt">-&gt;</span>
      <span class="hl kwa">receive</span> go <span class="hl opt">-&gt;</span> ok <span class="hl kwa">end</span><span class="hl opt">,</span>
      <span class="hl kwb">spawn</span><span class="hl opt">(</span><span class="hl kwa">fun</span><span class="hl opt">() -&gt;</span> <span class="hl kwd">flush</span><span class="hl opt">(</span>Comment<span class="hl opt">,</span> Buf<span class="hl opt">)</span> <span class="hl kwa">end</span><span class="hl opt">),</span>
      <span class="hl kwd">loop</span><span class="hl opt">(&lt;&lt; &gt;&gt;);</span>
    Line <span class="hl opt">-&gt;</span>
      <span class="hl slc">% Strip newline and append.</span>
      S <span class="hl opt">=</span> <span class="hl kwb">size</span><span class="hl opt">(</span>Line<span class="hl opt">) -</span> <span class="hl num">1</span><span class="hl opt">,</span>
      <span class="hl opt">&lt;&lt;</span> <span class="hl kwc">Chunk</span><span class="hl opt">:</span>S<span class="hl opt">/</span>bytes<span class="hl opt">,</span> _ <span class="hl opt">&gt;&gt; =</span> Line<span class="hl opt">,</span>
      <span class="hl kwd">loop</span><span class="hl opt">(&lt;&lt;</span> Buf<span class="hl opt">/</span><span class="hl kwb">binary</span><span class="hl opt">,</span> Chunk<span class="hl opt">/</span><span class="hl kwb">binary</span> <span class="hl opt">&gt;&gt;)</span>
  <span class="hl kwa">end</span><span class="hl opt">.</span>

<span class="hl slc">%% Calculate the reverse complement of Buffer, and print it.</span>
<span class="hl slc">%% Calculation is done in chunks, each assigned a separate process.</span>
<span class="hl slc">%% The results are collected, and printed in the correct order.</span>
<span class="hl kwd">flush</span><span class="hl opt">(</span>Comment<span class="hl opt">,</span> Buffer<span class="hl opt">) -&gt;</span>
  <span class="hl kwb">register</span><span class="hl opt">(</span>collector<span class="hl opt">,</span> <span class="hl kwb">self</span><span class="hl opt">()),</span>
  <span class="hl kwc">io</span><span class="hl opt">:</span><span class="hl kwd">put_chars</span><span class="hl opt">(</span><span class="hl kwd">reverse_complement</span><span class="hl opt">(</span>Buffer<span class="hl opt">)),</span>
  <span class="hl kwc">io</span><span class="hl opt">:</span><span class="hl kwd">put_chars</span><span class="hl opt">(</span>Comment<span class="hl opt">),</span>
  <span class="hl kwb">unregister</span><span class="hl opt">(</span>collector<span class="hl opt">),</span>
  reader <span class="hl opt">!</span> go<span class="hl opt">.</span>

<span class="hl slc">%% Calculation is distributed among workers.</span>
<span class="hl slc">%% As a minor optimization, workers handle only chunks of the same size,</span>
<span class="hl slc">%% evenly divisible by ?WIDTH. The remainder is handled by the current</span>
<span class="hl slc">%% process, with a separate function.</span>
<span class="hl kwd">reverse_complement</span><span class="hl opt">(&lt;&lt; &gt;&gt;) -&gt;</span>
  <span class="hl opt">&lt;&lt; &gt;&gt;;</span>
<span class="hl kwd">reverse_complement</span><span class="hl opt">(</span>Buffer<span class="hl opt">) -&gt;</span>
  <span class="hl opt">{</span>Chunks<span class="hl opt">,</span> Left<span class="hl opt">} =</span> <span class="hl kwd">calculate_splits</span><span class="hl opt">(</span><span class="hl kwb">size</span><span class="hl opt">(</span>Buffer<span class="hl opt">),</span> ?WORKERS<span class="hl opt">),</span>
  Even <span class="hl opt">=</span> <span class="hl kwd">start_jobs</span><span class="hl opt">(</span>Buffer<span class="hl opt">,</span> Chunks<span class="hl opt">),</span>
  Last <span class="hl opt">=</span> <span class="hl kwd">revcomp_last</span><span class="hl opt">(</span>Buffer<span class="hl opt">,</span> Left<span class="hl opt">, &lt;&lt; &gt;&gt;),</span>
  <span class="hl kwd">collect</span><span class="hl opt">(</span>Even<span class="hl opt">) ++ [</span>Last<span class="hl opt">].</span>

<span class="hl kwd">start_jobs</span><span class="hl opt">(</span>_<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">) -&gt;</span>
  <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl kwd">start_jobs</span><span class="hl opt">(</span>Buffer<span class="hl opt">,</span> Chunks<span class="hl opt">) -&gt;</span>
  <span class="hl kwd">start_jobs</span><span class="hl opt">(</span>Buffer<span class="hl opt">,</span> Chunks<span class="hl opt">,</span> <span class="hl kwb">size</span><span class="hl opt">(</span>Buffer<span class="hl opt">),</span> <span class="hl num">0</span><span class="hl opt">).</span>

<span class="hl kwd">start_jobs</span><span class="hl opt">(</span>_<span class="hl opt">,</span> _<span class="hl opt">,</span> _<span class="hl opt">,</span> N <span class="hl opt">=</span> ?WORKERS<span class="hl opt">) -&gt;</span>
  N<span class="hl opt">;</span>
<span class="hl kwd">start_jobs</span><span class="hl opt">(</span>Buffer<span class="hl opt">,</span> Chunk<span class="hl opt">,</span> Size<span class="hl opt">,</span> N<span class="hl opt">)</span> <span class="hl kwa">when</span> Size <span class="hl opt">&gt;=</span> Chunk <span class="hl opt">-&gt;</span>
  <span class="hl kwd">new_job</span><span class="hl opt">({</span><span class="hl kwa">fun</span> revcomp_chunk<span class="hl opt">/</span><span class="hl num">4</span><span class="hl opt">, [</span>Buffer<span class="hl opt">,</span> Size <span class="hl opt">-</span> Chunk<span class="hl opt">,</span> Size<span class="hl opt">, &lt;&lt; &gt;&gt;]},</span> N<span class="hl opt">),</span>
  <span class="hl kwd">start_jobs</span><span class="hl opt">(</span>Buffer<span class="hl opt">,</span> Chunk<span class="hl opt">,</span> Size <span class="hl opt">-</span> Chunk<span class="hl opt">,</span> N <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">).</span>

<span class="hl slc">%% Specialized function which handles even chunks.</span>
<span class="hl kwd">revcomp_chunk</span><span class="hl opt">(</span>_<span class="hl opt">,</span> Start<span class="hl opt">,</span> Start<span class="hl opt">,</span> Acc<span class="hl opt">) -&gt;</span>
  Acc<span class="hl opt">;</span>
<span class="hl kwd">revcomp_chunk</span><span class="hl opt">(</span>Buffer<span class="hl opt">,</span> Start<span class="hl opt">,</span> Stop<span class="hl opt">,</span> Acc<span class="hl opt">) -&gt;</span>
  From <span class="hl opt">=</span> Stop <span class="hl opt">-</span> ?WIDTH<span class="hl opt">,</span>
  <span class="hl opt">&lt;&lt;</span> <span class="hl kwc">_</span><span class="hl opt">:</span>From<span class="hl opt">/</span>bytes<span class="hl opt">,</span> <span class="hl kwc">Line</span><span class="hl opt">:</span>?WIDTH<span class="hl opt">/</span>bytes<span class="hl opt">,</span> _<span class="hl opt">/</span>bytes <span class="hl opt">&gt;&gt; =</span> Buffer<span class="hl opt">,</span>
  RC <span class="hl opt">=</span> <span class="hl kwd">revcomp</span><span class="hl opt">(</span>Line<span class="hl opt">),</span>
  <span class="hl kwd">revcomp_chunk</span><span class="hl opt">(</span>Buffer<span class="hl opt">,</span> Start<span class="hl opt">,</span> From<span class="hl opt">, &lt;&lt;</span> Acc<span class="hl opt">/</span><span class="hl kwb">binary</span><span class="hl opt">,</span> RC<span class="hl opt">/</span><span class="hl kwb">binary</span> <span class="hl opt">&gt;&gt;).</span>

<span class="hl slc">%% Specialized function which handles the uneven chunk.</span>
<span class="hl kwd">revcomp_last</span><span class="hl opt">(</span>Buffer<span class="hl opt">,</span> Stop<span class="hl opt">,</span> Acc<span class="hl opt">)</span> <span class="hl kwa">when</span> Stop <span class="hl opt">&gt;</span> ?WIDTH <span class="hl opt">-&gt;</span>
  From <span class="hl opt">=</span> Stop <span class="hl opt">-</span> ?WIDTH<span class="hl opt">,</span>
  <span class="hl opt">&lt;&lt;</span> <span class="hl kwc">_</span><span class="hl opt">:</span>From<span class="hl opt">/</span>bytes<span class="hl opt">,</span> <span class="hl kwc">Line</span><span class="hl opt">:</span>?WIDTH<span class="hl opt">/</span>bytes<span class="hl opt">,</span> _<span class="hl opt">/</span>bytes <span class="hl opt">&gt;&gt; =</span> Buffer<span class="hl opt">,</span>
  RC <span class="hl opt">=</span> <span class="hl kwd">revcomp</span><span class="hl opt">(</span>Line<span class="hl opt">),</span>
  <span class="hl kwd">revcomp_last</span><span class="hl opt">(</span>Buffer<span class="hl opt">,</span> From<span class="hl opt">, &lt;&lt;</span> Acc<span class="hl opt">/</span><span class="hl kwb">binary</span><span class="hl opt">,</span> RC<span class="hl opt">/</span><span class="hl kwb">binary</span> <span class="hl opt">&gt;&gt;);</span>
<span class="hl kwd">revcomp_last</span><span class="hl opt">(</span>Buffer<span class="hl opt">,</span> Stop<span class="hl opt">,</span> Acc<span class="hl opt">) -&gt;</span>
  <span class="hl opt">&lt;&lt;</span> <span class="hl kwc">Line</span><span class="hl opt">:</span>Stop<span class="hl opt">/</span>bytes<span class="hl opt">,</span> _<span class="hl opt">/</span>bytes <span class="hl opt">&gt;&gt; =</span> Buffer<span class="hl opt">,</span>
  RC <span class="hl opt">=</span> <span class="hl kwd">revcomp</span><span class="hl opt">(</span>Line<span class="hl opt">),</span>
  <span class="hl opt">&lt;&lt;</span> Acc<span class="hl opt">/</span><span class="hl kwb">binary</span><span class="hl opt">,</span> RC<span class="hl opt">/</span><span class="hl kwb">binary</span> <span class="hl opt">&gt;&gt;.</span>

<span class="hl slc">%% Generate the reverse complement of a sequence, and append</span>
<span class="hl slc">%% a newline character.</span>
<span class="hl kwd">revcomp</span><span class="hl opt">(&lt;&lt; &gt;&gt;) -&gt;</span>
  <span class="hl opt">&lt;&lt; &gt;&gt;;</span>
<span class="hl kwd">revcomp</span><span class="hl opt">(</span>Line<span class="hl opt">) -&gt;</span>
  <span class="hl kwb">list_to_binary</span><span class="hl opt">(</span><span class="hl kwc">lists</span><span class="hl opt">:</span><span class="hl kwd">reverse</span><span class="hl opt">(</span>
      <span class="hl opt">[</span> <span class="hl num">10</span> | <span class="hl opt">[</span> <span class="hl kwd">complement</span><span class="hl opt">(</span>C<span class="hl opt">)</span> || C <span class="hl opt">&lt;-</span> <span class="hl kwb">binary_to_list</span><span class="hl opt">(</span>Line<span class="hl opt">)]])).</span>

<span class="hl kwd">calculate_splits</span><span class="hl opt">(</span>Size<span class="hl opt">,</span> Nodes<span class="hl opt">) -&gt;</span>
  Tmp <span class="hl opt">=</span> Size div Nodes<span class="hl opt">,</span>
  Rem <span class="hl opt">=</span> Tmp rem ?WIDTH<span class="hl opt">,</span>
  Chunks <span class="hl opt">=</span> Tmp <span class="hl opt">-</span> Rem<span class="hl opt">,</span>
  Left <span class="hl opt">= (</span>Size rem Nodes<span class="hl opt">) + (</span>Nodes <span class="hl opt">*</span> Rem<span class="hl opt">),</span>
  <span class="hl opt">{</span>Chunks<span class="hl opt">,</span> Left<span class="hl opt">}.</span>

<span class="hl kwd">complement</span><span class="hl opt">(</span> $A <span class="hl opt">) -&gt;</span> $T<span class="hl opt">;</span>
<span class="hl kwd">complement</span><span class="hl opt">(</span> $C <span class="hl opt">) -&gt;</span> $G<span class="hl opt">;</span>
<span class="hl kwd">complement</span><span class="hl opt">(</span> $G <span class="hl opt">) -&gt;</span> $C<span class="hl opt">;</span>
<span class="hl kwd">complement</span><span class="hl opt">(</span> $T <span class="hl opt">) -&gt;</span> $A<span class="hl opt">;</span>
<span class="hl kwd">complement</span><span class="hl opt">(</span> $U <span class="hl opt">) -&gt;</span> $A<span class="hl opt">;</span>
<span class="hl kwd">complement</span><span class="hl opt">(</span> $M <span class="hl opt">) -&gt;</span> $K<span class="hl opt">;</span>
<span class="hl kwd">complement</span><span class="hl opt">(</span> $R <span class="hl opt">) -&gt;</span> $Y<span class="hl opt">;</span>
<span class="hl kwd">complement</span><span class="hl opt">(</span> $Y <span class="hl opt">) -&gt;</span> $R<span class="hl opt">;</span>
<span class="hl kwd">complement</span><span class="hl opt">(</span> $K <span class="hl opt">) -&gt;</span> $M<span class="hl opt">;</span>
<span class="hl kwd">complement</span><span class="hl opt">(</span> $V <span class="hl opt">) -&gt;</span> $B<span class="hl opt">;</span>
<span class="hl kwd">complement</span><span class="hl opt">(</span> $H <span class="hl opt">) -&gt;</span> $D<span class="hl opt">;</span>
<span class="hl kwd">complement</span><span class="hl opt">(</span> $D <span class="hl opt">) -&gt;</span> $H<span class="hl opt">;</span>
<span class="hl kwd">complement</span><span class="hl opt">(</span> $B <span class="hl opt">) -&gt;</span> $V<span class="hl opt">;</span>
<span class="hl kwd">complement</span><span class="hl opt">(</span> $a <span class="hl opt">) -&gt;</span> $T<span class="hl opt">;</span>
<span class="hl kwd">complement</span><span class="hl opt">(</span> $c <span class="hl opt">) -&gt;</span> $G<span class="hl opt">;</span>
<span class="hl kwd">complement</span><span class="hl opt">(</span> $g <span class="hl opt">) -&gt;</span> $C<span class="hl opt">;</span>
<span class="hl kwd">complement</span><span class="hl opt">(</span> $t <span class="hl opt">) -&gt;</span> $A<span class="hl opt">;</span>
<span class="hl kwd">complement</span><span class="hl opt">(</span> $u <span class="hl opt">) -&gt;</span> $A<span class="hl opt">;</span>
<span class="hl kwd">complement</span><span class="hl opt">(</span> $m <span class="hl opt">) -&gt;</span> $K<span class="hl opt">;</span>
<span class="hl kwd">complement</span><span class="hl opt">(</span> $r <span class="hl opt">) -&gt;</span> $Y<span class="hl opt">;</span>
<span class="hl kwd">complement</span><span class="hl opt">(</span> $y <span class="hl opt">) -&gt;</span> $R<span class="hl opt">;</span>
<span class="hl kwd">complement</span><span class="hl opt">(</span> $k <span class="hl opt">) -&gt;</span> $M<span class="hl opt">;</span>
<span class="hl kwd">complement</span><span class="hl opt">(</span> $v <span class="hl opt">) -&gt;</span> $B<span class="hl opt">;</span>
<span class="hl kwd">complement</span><span class="hl opt">(</span> $h <span class="hl opt">) -&gt;</span> $D<span class="hl opt">;</span>
<span class="hl kwd">complement</span><span class="hl opt">(</span> $d <span class="hl opt">) -&gt;</span> $H<span class="hl opt">;</span>
<span class="hl kwd">complement</span><span class="hl opt">(</span> $b <span class="hl opt">) -&gt;</span> $V<span class="hl opt">;</span>
<span class="hl kwd">complement</span><span class="hl opt">(</span> $N <span class="hl opt">) -&gt;</span> $N<span class="hl opt">;</span>
<span class="hl kwd">complement</span><span class="hl opt">(</span> $S <span class="hl opt">) -&gt;</span> $S<span class="hl opt">;</span>
<span class="hl kwd">complement</span><span class="hl opt">(</span> $W <span class="hl opt">) -&gt;</span> $W<span class="hl opt">;</span>
<span class="hl kwd">complement</span><span class="hl opt">(</span> $n <span class="hl opt">) -&gt;</span> $N<span class="hl opt">;</span>
<span class="hl kwd">complement</span><span class="hl opt">(</span> $s <span class="hl opt">) -&gt;</span> $S<span class="hl opt">;</span>
<span class="hl kwd">complement</span><span class="hl opt">(</span> $w <span class="hl opt">) -&gt;</span> $W<span class="hl opt">.</span>

<span class="hl slc">%% Parallel helpers.</span>
<span class="hl kwd">new_job</span><span class="hl opt">({</span>Fun<span class="hl opt">,</span> Args<span class="hl opt">},</span> N<span class="hl opt">) -&gt;</span>
  <span class="hl kwb">spawn</span><span class="hl opt">(</span><span class="hl kwa">fun</span><span class="hl opt">() -&gt;</span> collector <span class="hl opt">! {</span>N<span class="hl opt">,</span> <span class="hl kwb">apply</span><span class="hl opt">(</span>Fun<span class="hl opt">,</span> Args<span class="hl opt">)}</span> <span class="hl kwa">end</span><span class="hl opt">).</span>

<span class="hl kwd">collect</span><span class="hl opt">(</span>N<span class="hl opt">) -&gt;</span> <span class="hl kwd">collect</span><span class="hl opt">(</span>N<span class="hl opt">, []).</span>
<span class="hl kwd">collect</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> Results<span class="hl opt">) -&gt; [</span> R || <span class="hl opt">{</span>_<span class="hl opt">,</span> R<span class="hl opt">} &lt;-</span> <span class="hl kwc">lists</span><span class="hl opt">:</span><span class="hl kwd">keysort</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">,</span> Results<span class="hl opt">) ];</span>
<span class="hl kwd">collect</span><span class="hl opt">(</span>N<span class="hl opt">,</span> Results<span class="hl opt">) -&gt;</span> <span class="hl kwa">receive</span> <span class="hl opt">{</span>K<span class="hl opt">,</span> R<span class="hl opt">} -&gt;</span> <span class="hl kwd">collect</span><span class="hl opt">(</span>N<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">, [{</span>K<span class="hl opt">,</span> R<span class="hl opt">}</span> | Results<span class="hl opt">])</span> <span class="hl kwa">end</span><span class="hl opt">.</span>
