<span class="hl slc">;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;;   http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">;;</span>
<span class="hl slc">;;   contributed by Alexey Voznyuk</span>
<span class="hl slc">;;</span>

<span class="hl opt">(</span><span class="hl kwa">defpackage</span> <span class="hl opt">#:</span>smp-utils
  <span class="hl opt">(:</span>use <span class="hl opt">:</span>cl <span class="hl opt">:</span>sb-alien <span class="hl opt">:</span>sb-thread<span class="hl opt">)</span>
  <span class="hl opt">(:</span>export <span class="hl opt">#:</span>affinity <span class="hl opt">#:</span>apic-core-map<span class="hl opt">))</span>

<span class="hl opt">(</span><span class="hl kwa">in-package</span> <span class="hl opt">:</span>smp-utils<span class="hl opt">)</span>

<span class="hl opt">(</span><span class="hl kwa">defun</span> cpuset-<span class="hl opt">&gt;</span>list <span class="hl opt">(</span><span class="hl kwa">cpuset</span><span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">loop</span> <span class="hl opt">:</span>for i <span class="hl opt">:</span>from <span class="hl num">0</span> <span class="hl opt">:</span>below <span class="hl num">128</span>
     <span class="hl opt">:</span>unless <span class="hl opt">(</span><span class="hl kwa">zerop</span> <span class="hl opt">(</span><span class="hl kwa">ldb</span> <span class="hl opt">(</span><span class="hl kwa">byte</span> <span class="hl num">1</span> <span class="hl opt">(</span><span class="hl kwa">mod</span> i <span class="hl num">8</span><span class="hl opt">)) (</span><span class="hl kwa">elt</span> cpuset <span class="hl opt">(</span><span class="hl kwa">truncate</span> i <span class="hl num">8</span><span class="hl opt">))))</span>
     <span class="hl opt">:</span>collect i<span class="hl opt">))</span>

<span class="hl opt">(</span><span class="hl kwa">defun</span> list-<span class="hl opt">&gt;</span>cpuset <span class="hl opt">(</span><span class="hl kwa">cpuset-list</span><span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">loop</span> <span class="hl opt">:</span>with cpuset <span class="hl opt">= (</span><span class="hl kwa">make-array</span> <span class="hl num">16</span> <span class="hl opt">:</span>element-type <span class="hl opt">'(</span><span class="hl kwa">unsigned-byte</span> <span class="hl num">8</span><span class="hl opt">))</span>
     <span class="hl opt">:</span>for i <span class="hl opt">:</span>from <span class="hl num">0</span> <span class="hl opt">:</span>below <span class="hl num">128</span>
     <span class="hl opt">:</span>when <span class="hl opt">(</span><span class="hl kwa">find</span> i cpuset-list <span class="hl opt">:</span>test <span class="hl opt">#'=)</span>
     <span class="hl opt">:</span>do <span class="hl opt">(</span><span class="hl kwa">setf</span> <span class="hl opt">(</span><span class="hl kwa">ldb</span> <span class="hl opt">(</span><span class="hl kwa">byte</span> <span class="hl num">1</span> <span class="hl opt">(</span><span class="hl kwa">mod</span> i <span class="hl num">8</span><span class="hl opt">)) (</span><span class="hl kwa">elt</span> cpuset <span class="hl opt">(</span><span class="hl kwa">truncate</span> i <span class="hl num">8</span><span class="hl opt">)))</span> <span class="hl num">1</span><span class="hl opt">)</span>
     <span class="hl opt">:</span>finally <span class="hl opt">(</span><span class="hl kwa">return</span> cpuset<span class="hl opt">)))</span>

<span class="hl opt">(</span><span class="hl kwa">defun</span> affinity <span class="hl opt">(</span><span class="hl kwa">thread</span><span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">with-alien</span> <span class="hl opt">((</span><span class="hl kwa">alien-cpuset</span> <span class="hl opt">(</span><span class="hl kwa">array</span> unsigned-char <span class="hl num">16</span><span class="hl opt">)))</span>
    <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">((</span><span class="hl kwa">retcode</span> <span class="hl opt">(</span><span class="hl kwa">alien-funcall</span> <span class="hl opt">(</span><span class="hl kwa">extern-alien</span> <span class="hl str">&quot;pthread_getaffinity_np&quot;</span> 
                                                <span class="hl opt">(</span><span class="hl kwa">function</span> int 
                                                          unsigned-long 
                                                          unsigned-long 
                                                          <span class="hl opt">(*</span> unsigned-char<span class="hl opt">)))</span>
                                  <span class="hl opt">(</span><span class="hl kwa">sb-thread</span><span class="hl opt">::</span>thread-os-thread thread<span class="hl opt">)</span>
                                  <span class="hl num">16</span>
                                  <span class="hl opt">(</span><span class="hl kwa">cast</span> alien-cpuset <span class="hl opt">(*</span> unsigned-char<span class="hl opt">)))))</span>
      <span class="hl opt">(</span><span class="hl kwa">when</span> <span class="hl opt">(</span><span class="hl kwa">zerop</span> retcode<span class="hl opt">)</span>
        <span class="hl opt">(</span><span class="hl kwa">values</span> t <span class="hl opt">(</span><span class="hl kwa">loop</span> <span class="hl opt">:</span>with cpuset <span class="hl opt">= (</span><span class="hl kwa">make-array</span> <span class="hl num">16</span> <span class="hl opt">:</span>element-type <span class="hl opt">'(</span><span class="hl kwa">unsigned-byte</span> <span class="hl num">8</span><span class="hl opt">))</span>
                     <span class="hl opt">:</span>for i <span class="hl opt">:</span>from <span class="hl num">0</span> <span class="hl opt">:</span>below <span class="hl num">16</span>
                     <span class="hl opt">:</span>do <span class="hl opt">(</span><span class="hl kwa">setf</span> <span class="hl opt">(</span><span class="hl kwa">elt</span> cpuset i<span class="hl opt">) (</span><span class="hl kwa">deref</span> alien-cpuset i<span class="hl opt">))</span>
                     <span class="hl opt">:</span>finally <span class="hl opt">(</span><span class="hl kwa">return</span> <span class="hl opt">(</span><span class="hl kwa">cpuset-</span><span class="hl opt">&gt;</span>list cpuset<span class="hl opt">))))))))</span>

<span class="hl opt">(</span><span class="hl kwa">defun</span> <span class="hl opt">(</span><span class="hl kwa">setf</span> affinity<span class="hl opt">) (</span><span class="hl kwa">affinity</span> thread<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">with-alien</span> <span class="hl opt">((</span><span class="hl kwa">alien-cpuset</span> <span class="hl opt">(</span><span class="hl kwa">array</span> unsigned-char <span class="hl num">16</span><span class="hl opt">)))</span>
    <span class="hl opt">(</span><span class="hl kwa">loop</span> <span class="hl opt">:</span>with cpuset <span class="hl opt">= (</span><span class="hl kwa">list-</span><span class="hl opt">&gt;</span>cpuset affinity<span class="hl opt">)</span>
       <span class="hl opt">:</span>for i <span class="hl opt">:</span>from <span class="hl num">0</span> <span class="hl opt">:</span>below <span class="hl num">16</span>
       <span class="hl opt">:</span>do <span class="hl opt">(</span><span class="hl kwa">setf</span> <span class="hl opt">(</span><span class="hl kwa">deref</span> alien-cpuset i<span class="hl opt">) (</span><span class="hl kwa">elt</span> cpuset i<span class="hl opt">)))</span>
    <span class="hl opt">(</span><span class="hl kwa">zerop</span> <span class="hl opt">(</span><span class="hl kwa">alien-funcall</span> <span class="hl opt">(</span><span class="hl kwa">extern-alien</span> <span class="hl str">&quot;pthread_setaffinity_np&quot;</span> 
                                        <span class="hl opt">(</span><span class="hl kwa">function</span> int 
                                                  unsigned-long 
                                                  unsigned-long 
                                                  <span class="hl opt">(*</span> unsigned-char<span class="hl opt">)))</span>
                          <span class="hl opt">(</span><span class="hl kwa">sb-thread</span><span class="hl opt">::</span>thread-os-thread thread<span class="hl opt">)</span>
                          <span class="hl num">16</span>
                          <span class="hl opt">(</span><span class="hl kwa">cast</span> alien-cpuset <span class="hl opt">(*</span> unsigned-char<span class="hl opt">))))))</span>

<span class="hl opt">(</span><span class="hl kwa">defun</span> apic-core-map <span class="hl opt">(</span><span class="hl kwa">cpuset-list</span><span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">((</span><span class="hl kwa">default-map</span> <span class="hl opt">(</span><span class="hl kwa">mapcar</span> <span class="hl opt">#'</span>list cpuset-list cpuset-list<span class="hl opt">)))</span>
    <span class="hl opt">(</span><span class="hl kwa">unless</span> <span class="hl opt">(</span><span class="hl kwa">probe-file</span> <span class="hl opt">#</span>p<span class="hl str">&quot;/proc/cpuinfo&quot;</span><span class="hl opt">)</span>
      <span class="hl opt">(</span><span class="hl kwa">return-from</span> apic-core-map default-map<span class="hl opt">))</span>
    <span class="hl opt">(</span><span class="hl kwa">with-open-file</span> <span class="hl opt">(</span><span class="hl kwa">cpuinfo</span> <span class="hl opt">#</span>p<span class="hl str">&quot;/proc/cpuinfo&quot;</span><span class="hl opt">)</span>
      <span class="hl opt">(</span><span class="hl kwa">flet</span> <span class="hl opt">((</span><span class="hl kwa">parse-key-value</span> <span class="hl opt">(</span><span class="hl kwa">line</span> key<span class="hl opt">)</span>
               <span class="hl opt">(</span><span class="hl kwa">when</span> <span class="hl opt">(</span><span class="hl kwa">and</span> <span class="hl opt">(&gt; (</span><span class="hl kwa">length</span> line<span class="hl opt">) (</span><span class="hl kwa">length</span> key<span class="hl opt">))</span>
                          <span class="hl opt">(</span><span class="hl kwa">string</span><span class="hl opt">=</span> line key <span class="hl opt">:</span>end1 <span class="hl opt">(</span><span class="hl kwa">length</span> key<span class="hl opt">)))</span>
                 <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">((</span><span class="hl kwa">value-offset</span> <span class="hl opt">(</span><span class="hl kwa">position</span> <span class="hl opt">#</span>\<span class="hl opt">:</span> line <span class="hl opt">:</span>start <span class="hl opt">(</span><span class="hl kwa">length</span> key<span class="hl opt">))))</span>
                   <span class="hl opt">(</span><span class="hl kwa">when</span> value-offset
                     <span class="hl opt">(</span><span class="hl kwa">parse-integer</span> line <span class="hl opt">:</span>start <span class="hl opt">(</span><span class="hl kwa">1</span><span class="hl opt">+</span> value-offset<span class="hl opt">) :</span>junk-allowed t<span class="hl opt">))))))</span>
        <span class="hl opt">(</span><span class="hl kwa">loop</span> <span class="hl opt">:</span>with current-cpu <span class="hl opt">=</span> nil
           <span class="hl opt">:</span>for line <span class="hl opt">= (</span><span class="hl kwa">read-line</span> cpuinfo nil nil<span class="hl opt">)</span>
           <span class="hl opt">:</span>while line
           <span class="hl opt">:</span>do <span class="hl opt">(</span><span class="hl kwa">multiple-value-bind</span> <span class="hl opt">(</span><span class="hl kwa">processor</span> apicid<span class="hl opt">)</span>
                   <span class="hl opt">(</span><span class="hl kwa">values</span> <span class="hl opt">(</span><span class="hl kwa">parse-key-value</span> line <span class="hl str">&quot;processor&quot;</span><span class="hl opt">)</span>
                           <span class="hl opt">(</span><span class="hl kwa">parse-key-value</span> line <span class="hl str">&quot;apicid&quot;</span><span class="hl opt">))</span>
                 <span class="hl opt">(</span><span class="hl kwa">cond</span> <span class="hl opt">((</span><span class="hl kwa">and</span> current-cpu apicid<span class="hl opt">) (</span><span class="hl kwa">setf</span> <span class="hl opt">(</span><span class="hl kwa">first</span> <span class="hl opt">(</span><span class="hl kwa">find</span> current-cpu default-map <span class="hl opt">:</span>key <span class="hl opt">#'</span>second<span class="hl opt">))</span> apicid
                                                       current-cpu nil<span class="hl opt">))</span>
                       <span class="hl opt">(</span><span class="hl kwa">processor</span> <span class="hl opt">(</span><span class="hl kwa">setf</span> current-cpu processor<span class="hl opt">))))</span>
           <span class="hl opt">:</span>finally <span class="hl opt">(</span><span class="hl kwa">return</span> <span class="hl opt">(</span><span class="hl kwa">sort</span> default-map <span class="hl opt">#'&lt; :</span>key <span class="hl opt">#'</span>first<span class="hl opt">)))))))</span>
  

<span class="hl opt">(</span><span class="hl kwa">defpackage</span> <span class="hl opt">#:</span>chameneos-redux
  <span class="hl opt">(:</span>use <span class="hl opt">:</span>cl <span class="hl opt">:</span>smp-utils<span class="hl opt">))</span>

<span class="hl opt">(</span><span class="hl kwa">in-package</span> <span class="hl opt">:</span>chameneos-redux<span class="hl opt">)</span>

<span class="hl slc">;;</span>
<span class="hl slc">;; Game DSL compiler</span>
<span class="hl slc">;;</span>

<span class="hl opt">(</span><span class="hl kwa">defmacro</span> declare-colors-map <span class="hl opt">(&amp;</span>rest transformations<span class="hl opt">)</span>
  <span class="hl opt">`(</span><span class="hl kwa">progn</span>
     <span class="hl opt">(</span><span class="hl kwa">defun</span> complement-color <span class="hl opt">(</span><span class="hl kwa">color-a</span> color-b<span class="hl opt">)</span>
       <span class="hl opt">(</span><span class="hl kwa">cond</span>
         <span class="hl opt">,&#64;(</span><span class="hl kwa">loop</span>
              <span class="hl opt">:</span>for <span class="hl opt">(</span><span class="hl kwa">test-a</span> kw-plus test-b kw-arrow test-result<span class="hl opt">) :</span>in transformations
              <span class="hl opt">:</span>do <span class="hl opt">(</span><span class="hl kwa">assert</span> <span class="hl opt">(</span><span class="hl kwa">and</span> <span class="hl opt">(</span><span class="hl kwa">eq</span> kw-plus <span class="hl opt">'+) (</span><span class="hl kwa">eq</span> kw-arrow <span class="hl opt">'</span>-<span class="hl opt">&gt;)))</span>
              <span class="hl opt">:</span>collect <span class="hl opt">`((</span><span class="hl kwa">and</span> <span class="hl opt">(</span><span class="hl kwa">eq</span> color-a <span class="hl opt">',</span>test-a<span class="hl opt">) (</span><span class="hl kwa">eq</span> color-b <span class="hl opt">',</span>test-b<span class="hl opt">))</span>
                         <span class="hl opt">',</span>test-result<span class="hl opt">))</span>
         <span class="hl opt">(</span><span class="hl kwa">t</span> <span class="hl opt">(</span><span class="hl kwa">error</span> <span class="hl str">&quot;Invalid colors combinations&quot;</span><span class="hl opt">))))</span>
     <span class="hl opt">(</span><span class="hl kwa">defun</span> print-colors <span class="hl opt">()</span>
       <span class="hl opt">(</span><span class="hl kwa">format</span> t <span class="hl str">&quot;~{~{~a + ~a -&gt; ~a~%~}~}~%&quot;</span>
               <span class="hl opt">(</span><span class="hl kwa">list</span> <span class="hl opt">,&#64;(</span><span class="hl kwa">loop</span>
                          <span class="hl opt">:</span>for <span class="hl opt">(</span><span class="hl kwa">test-a</span> kw-plus test-b<span class="hl opt">) :</span>in transformations
                          <span class="hl opt">:</span>collect <span class="hl opt">`(</span><span class="hl kwa">list</span> <span class="hl opt">,(</span><span class="hl kwa">string-downcase</span> <span class="hl opt">(</span><span class="hl kwa">string</span> test-a<span class="hl opt">))</span>
                                          <span class="hl opt">,(</span><span class="hl kwa">string-downcase</span> <span class="hl opt">(</span><span class="hl kwa">string</span> test-b<span class="hl opt">))</span>
                                          <span class="hl opt">(</span><span class="hl kwa">string-downcase</span>
                                           <span class="hl opt">(</span><span class="hl kwa">string</span> <span class="hl opt">(</span><span class="hl kwa">complement-color</span> <span class="hl opt">',</span>test-a
                                                                     <span class="hl opt">',</span>test-b<span class="hl opt">))))))))))</span>

<span class="hl opt">(</span><span class="hl kwa">defun</span> spell-number <span class="hl opt">(</span><span class="hl kwa">number</span><span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">with-output-to-string</span> <span class="hl opt">(</span><span class="hl kwa">result-string</span><span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl kwa">loop</span>
       <span class="hl opt">:</span>for char <span class="hl opt">:</span>across <span class="hl opt">(</span><span class="hl kwa">the</span> simple-string <span class="hl opt">(</span><span class="hl kwa">format</span> nil <span class="hl str">&quot;~a&quot;</span> number<span class="hl opt">))</span>
       <span class="hl opt">:</span>do <span class="hl opt">(</span><span class="hl kwa">format</span> result-string <span class="hl str">&quot; ~r&quot;</span> <span class="hl opt">(</span><span class="hl kwa">-</span> <span class="hl opt">(</span><span class="hl kwa">char-code</span> char<span class="hl opt">) (</span><span class="hl kwa">char-code</span> <span class="hl opt">#</span>\<span class="hl num">0</span><span class="hl opt">))))))</span>

<span class="hl opt">(</span><span class="hl kwa">defmacro</span> spin-wait <span class="hl opt">(</span><span class="hl kwa">condition</span> <span class="hl opt">&amp;</span>key no-spin<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">((</span><span class="hl kwa">yield-spin</span> <span class="hl opt">`(</span><span class="hl kwa">loop</span> <span class="hl opt">:</span>until <span class="hl opt">,</span>condition <span class="hl opt">:</span>do <span class="hl opt">(</span><span class="hl kwa">sb-thread</span><span class="hl opt">:</span>thread-yield<span class="hl opt">))))</span>
    <span class="hl opt">(</span><span class="hl kwa">if</span> no-spin
        yield-spin
        <span class="hl opt">`(</span><span class="hl kwa">loop</span>
            <span class="hl opt">:</span>repeat <span class="hl num">16384</span>
            <span class="hl opt">:</span>do <span class="hl opt">(</span><span class="hl kwa">when</span> <span class="hl opt">,</span>condition
                  <span class="hl opt">(</span><span class="hl kwa">return</span><span class="hl opt">))</span>
            <span class="hl opt">:</span>finally <span class="hl opt">,</span>yield-spin<span class="hl opt">))))</span>

<span class="hl opt">(</span><span class="hl kwa">defstruct</span> chameneo
  <span class="hl opt">(</span><span class="hl kwa">color</span> <span class="hl opt">'</span>none <span class="hl opt">:</span>type symbol<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">meet-count</span> <span class="hl num">0</span> <span class="hl opt">:</span>type fixnum<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">same-count</span> <span class="hl num">0</span> <span class="hl opt">:</span>type fixnum<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">meet-wait</span> nil <span class="hl opt">:</span>type boolean<span class="hl opt">))</span>

<span class="hl opt">(</span><span class="hl kwa">defmacro</span> with-games <span class="hl opt">((&amp;</span>rest descriptions<span class="hl opt">) &amp;</span>body body<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">null</span> descriptions<span class="hl opt">)</span>
      <span class="hl opt">`(</span><span class="hl kwa">progn</span> <span class="hl opt">,&#64;</span>body<span class="hl opt">)</span>
      <span class="hl opt">(</span><span class="hl kwa">destructuring-bind</span> <span class="hl opt">(</span><span class="hl kwa">game-name</span> <span class="hl opt">&amp;</span>rest colors<span class="hl opt">)</span>
          <span class="hl opt">(</span><span class="hl kwa">car</span> descriptions<span class="hl opt">)</span>
        <span class="hl opt">(</span><span class="hl kwa">let</span><span class="hl opt">* ((</span><span class="hl kwa">colors-count</span> <span class="hl opt">(</span><span class="hl kwa">length</span> colors<span class="hl opt">))</span>
               <span class="hl opt">(</span><span class="hl kwa">worker-binds</span> <span class="hl opt">(</span><span class="hl kwa">loop</span> <span class="hl opt">:</span>repeat colors-count <span class="hl opt">:</span>collect <span class="hl opt">(</span><span class="hl kwa">gensym</span><span class="hl opt">)))</span>
               <span class="hl opt">(</span><span class="hl kwa">chameneos</span> <span class="hl opt">(</span><span class="hl kwa">gensym</span> <span class="hl str">&quot;CHAMENEOS&quot;</span><span class="hl opt">))</span>
               <span class="hl opt">(</span><span class="hl kwa">action-cas</span> <span class="hl opt">(</span><span class="hl kwa">gensym</span> <span class="hl str">&quot;ACTION-CAS&quot;</span><span class="hl opt">)))</span>
          <span class="hl opt">`(</span><span class="hl kwa">let</span> <span class="hl opt">((,</span>chameneos <span class="hl opt">(</span><span class="hl kwa">coerce</span> <span class="hl opt">(</span><span class="hl kwa">list</span> <span class="hl opt">,&#64;(</span><span class="hl kwa">loop</span> <span class="hl opt">:</span>repeat colors-count <span class="hl opt">:</span>collect <span class="hl opt">`(</span><span class="hl kwa">make-chameneo</span><span class="hl opt">)))</span>
                                     <span class="hl opt">'</span>simple-vector<span class="hl opt">))</span>
                 <span class="hl opt">(,</span>action-cas <span class="hl opt">(</span><span class="hl kwa">list</span> <span class="hl num">0</span><span class="hl opt">))</span>
                 <span class="hl opt">,&#64;</span>worker-binds<span class="hl opt">)</span>
             <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> <span class="hl opt">(</span><span class="hl kwa">simple-vector</span> <span class="hl opt">,</span>colors-count<span class="hl opt">) ,</span>chameneos<span class="hl opt">)</span>
                      <span class="hl opt">(</span><span class="hl kwa">type</span> cons <span class="hl opt">,</span>action-cas<span class="hl opt">)</span>
                      <span class="hl opt">(</span><span class="hl kwa">type</span> <span class="hl opt">(</span><span class="hl kwa">or</span> null sb-thread<span class="hl opt">:</span>thread<span class="hl opt">) ,&#64;</span>worker-binds<span class="hl opt">))</span>
             <span class="hl opt">(</span><span class="hl kwa">flet</span> <span class="hl opt">((,(</span><span class="hl kwa">intern</span> <span class="hl opt">(</span><span class="hl kwa">format</span> nil <span class="hl str">&quot;RUN-~a&quot;</span> game-name<span class="hl opt">)) (</span><span class="hl kwa">count</span> threads-affinity smp-p<span class="hl opt">)</span>
                      <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> fixnum count<span class="hl opt">) (</span><span class="hl kwa">type</span> list threads-affinity<span class="hl opt">) (</span><span class="hl kwa">type</span> boolean smp-p<span class="hl opt">))</span>
                      <span class="hl opt">(</span><span class="hl kwa">setf</span> <span class="hl opt">(</span><span class="hl kwa">car</span> <span class="hl opt">,</span>action-cas<span class="hl opt">) (</span><span class="hl kwa">the</span> fixnum <span class="hl opt">(</span><span class="hl kwa">ash</span> count <span class="hl opt">,(</span><span class="hl kwa">integer-length</span> <span class="hl opt">(</span><span class="hl kwa">1</span><span class="hl opt">+</span> colors-count<span class="hl opt">)))))</span>
                      <span class="hl opt">(</span><span class="hl kwa">flet</span> <span class="hl opt">((</span><span class="hl kwa">color-worker</span> <span class="hl opt">(</span><span class="hl kwa">id</span> color<span class="hl opt">)</span>
                               <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> <span class="hl opt">(</span><span class="hl kwa">integer</span> <span class="hl num">0</span> <span class="hl opt">,(</span><span class="hl kwa">1-</span> colors-count<span class="hl opt">))</span> id<span class="hl opt">) (</span><span class="hl kwa">type</span> symbol color<span class="hl opt">))</span>
                               <span class="hl opt">(</span><span class="hl kwa">lambda</span> <span class="hl opt">()</span>
                                 <span class="hl opt">(</span><span class="hl kwa">setf</span> <span class="hl opt">(</span><span class="hl kwa">affinity</span> sb-thread<span class="hl opt">:*</span>current-thread<span class="hl opt">*)</span> threads-affinity<span class="hl opt">)</span>
                                 <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">((</span><span class="hl kwa">state</span> <span class="hl opt">(</span><span class="hl kwa">car</span> <span class="hl opt">,</span>action-cas<span class="hl opt">))</span>
                                       <span class="hl opt">(</span><span class="hl kwa">self</span> <span class="hl opt">(</span><span class="hl kwa">elt</span> <span class="hl opt">,</span>chameneos id<span class="hl opt">)))</span>
                                   <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> <span class="hl opt">(</span><span class="hl kwa">integer</span> <span class="hl num">0</span> <span class="hl opt">,</span>most-positive-fixnum<span class="hl opt">)</span> state<span class="hl opt">)</span>
                                            <span class="hl opt">(</span><span class="hl kwa">type</span> chameneo self<span class="hl opt">))</span>
                                   <span class="hl opt">(</span><span class="hl kwa">setf</span> <span class="hl opt">(</span><span class="hl kwa">chameneo-color</span> self<span class="hl opt">)</span> color<span class="hl opt">)</span>
                                   <span class="hl opt">(</span><span class="hl kwa">loop</span>
                                      <span class="hl opt">(</span><span class="hl kwa">when</span> <span class="hl opt">(</span><span class="hl kwa">zerop</span> state<span class="hl opt">)</span>
                                        <span class="hl opt">(</span><span class="hl kwa">return</span><span class="hl opt">))</span>
                                      <span class="hl opt">(</span><span class="hl kwa">let</span><span class="hl opt">* ((</span><span class="hl kwa">peer-id</span> <span class="hl opt">(</span><span class="hl kwa">logand</span> state <span class="hl opt">,(</span><span class="hl kwa">1-</span> <span class="hl opt">(</span><span class="hl kwa">ash</span> <span class="hl num">1</span> <span class="hl opt">(</span><span class="hl kwa">integer-length</span> <span class="hl opt">(</span><span class="hl kwa">1</span><span class="hl opt">+</span> colors-count<span class="hl opt">))))))</span>
                                             <span class="hl opt">(</span><span class="hl kwa">new-state</span> <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">zerop</span> peer-id<span class="hl opt">)</span>
                                                            <span class="hl opt">(</span><span class="hl kwa">logior</span> state <span class="hl opt">(</span><span class="hl kwa">1</span><span class="hl opt">+</span> id<span class="hl opt">))</span>
                                                            <span class="hl opt">(</span><span class="hl kwa">-</span> state peer-id <span class="hl opt">,(</span><span class="hl kwa">ash</span> <span class="hl num">1</span> <span class="hl opt">(</span><span class="hl kwa">integer-length</span> <span class="hl opt">(</span><span class="hl kwa">1</span><span class="hl opt">+</span> colors-count<span class="hl opt">)))))))</span>
                                        <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> <span class="hl opt">(</span><span class="hl kwa">integer</span> <span class="hl num">0</span> <span class="hl opt">,(</span><span class="hl kwa">1</span><span class="hl opt">+</span> colors-count<span class="hl opt">))</span> peer-id<span class="hl opt">)</span>
                                                 <span class="hl opt">(</span><span class="hl kwa">type</span> <span class="hl opt">(</span><span class="hl kwa">integer</span> <span class="hl num">0</span> <span class="hl opt">,</span>most-positive-fixnum<span class="hl opt">)</span> new-state<span class="hl opt">))</span>
                                        <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">((</span><span class="hl kwa">prev-state</span> <span class="hl opt">(</span><span class="hl kwa">sb-ext</span><span class="hl opt">:</span>compare-and-swap <span class="hl opt">(</span><span class="hl kwa">car</span> <span class="hl opt">,</span>action-cas<span class="hl opt">)</span> state new-state<span class="hl opt">)))</span>
                                          <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> <span class="hl opt">(</span><span class="hl kwa">integer</span> <span class="hl num">0</span> <span class="hl opt">,</span>most-positive-fixnum<span class="hl opt">)</span> prev-state<span class="hl opt">))</span>
                                          <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(=</span> prev-state state<span class="hl opt">)</span>
                                              <span class="hl opt">(</span><span class="hl kwa">progn</span> 
                                                <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">zerop</span> peer-id<span class="hl opt">)</span>
                                                    <span class="hl opt">(</span><span class="hl kwa">progn</span>
                                                      <span class="hl opt">(</span><span class="hl kwa">if</span> smp-p
                                                          <span class="hl opt">(</span><span class="hl kwa">spin-wait</span> <span class="hl opt">(</span><span class="hl kwa">chameneo-meet-wait</span> self<span class="hl opt">))</span>
                                                          <span class="hl opt">(</span><span class="hl kwa">spin-wait</span> <span class="hl opt">(</span><span class="hl kwa">chameneo-meet-wait</span> self<span class="hl opt">) :</span>no-spin t<span class="hl opt">))</span>
                                                      <span class="hl opt">(</span><span class="hl kwa">setf</span> <span class="hl opt">(</span><span class="hl kwa">chameneo-meet-wait</span> self<span class="hl opt">)</span> nil<span class="hl opt">))</span>
                                                    <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">((</span><span class="hl kwa">peer</span> <span class="hl opt">(</span><span class="hl kwa">elt</span> <span class="hl opt">,</span>chameneos <span class="hl opt">(</span><span class="hl kwa">1-</span> peer-id<span class="hl opt">))))</span>
                                                      <span class="hl opt">(</span><span class="hl kwa">when</span> <span class="hl opt">(=</span> id <span class="hl opt">(</span><span class="hl kwa">1-</span> peer-id<span class="hl opt">))</span>
                                                        <span class="hl opt">(</span><span class="hl kwa">incf</span> <span class="hl opt">(</span><span class="hl kwa">chameneo-same-count</span> self<span class="hl opt">))</span>
                                                        <span class="hl opt">(</span><span class="hl kwa">incf</span> <span class="hl opt">(</span><span class="hl kwa">chameneo-same-count</span> peer<span class="hl opt">)))</span>
                                                      <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">((</span><span class="hl kwa">new-color</span> <span class="hl opt">(</span><span class="hl kwa">complement-color</span> <span class="hl opt">(</span><span class="hl kwa">chameneo-color</span> self<span class="hl opt">)</span>
                                                                                         <span class="hl opt">(</span><span class="hl kwa">chameneo-color</span> peer<span class="hl opt">))))</span>
                                                        <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> symbol new-color<span class="hl opt">))</span>
                                                        <span class="hl opt">(</span><span class="hl kwa">setf</span> <span class="hl opt">(</span><span class="hl kwa">chameneo-color</span> self<span class="hl opt">)</span> new-color
                                                              <span class="hl opt">(</span><span class="hl kwa">chameneo-color</span> peer<span class="hl opt">)</span> new-color<span class="hl opt">)</span>
                                                        <span class="hl opt">(</span><span class="hl kwa">incf</span> <span class="hl opt">(</span><span class="hl kwa">chameneo-meet-count</span> self<span class="hl opt">))</span>
                                                        <span class="hl opt">(</span><span class="hl kwa">incf</span> <span class="hl opt">(</span><span class="hl kwa">chameneo-meet-count</span> peer<span class="hl opt">))</span>
                                                        <span class="hl opt">(</span><span class="hl kwa">setf</span> <span class="hl opt">(</span><span class="hl kwa">chameneo-meet-wait</span> peer<span class="hl opt">)</span> t<span class="hl opt">))))</span>
                                                <span class="hl opt">(</span><span class="hl kwa">setf</span> state <span class="hl opt">(</span><span class="hl kwa">car</span> <span class="hl opt">,</span>action-cas<span class="hl opt">)))</span>
                                              <span class="hl opt">(</span><span class="hl kwa">setf</span> state prev-state<span class="hl opt">)))))))))</span>
                        <span class="hl opt">,&#64;(</span><span class="hl kwa">loop</span> <span class="hl opt">:</span>for color <span class="hl opt">:</span>in colors <span class="hl opt">:</span>for thread-index <span class="hl opt">:</span>from <span class="hl num">0</span>
                             <span class="hl opt">:</span>collect <span class="hl opt">`(</span><span class="hl kwa">setf</span> <span class="hl opt">,(</span><span class="hl kwa">elt</span> worker-binds thread-index<span class="hl opt">)</span>
                                             <span class="hl opt">(</span><span class="hl kwa">sb-thread</span><span class="hl opt">:</span>make-thread <span class="hl opt">(</span><span class="hl kwa">color-worker</span> <span class="hl opt">,</span>thread-index <span class="hl opt">',</span>color<span class="hl opt">)</span>
                                                                    <span class="hl opt">:</span>name <span class="hl opt">,(</span><span class="hl kwa">format</span> nil <span class="hl str">&quot;chameneos-worker-~a-~a/~a&quot;</span>
                                                                                   <span class="hl opt">(</span><span class="hl kwa">string-downcase</span> <span class="hl opt">(</span><span class="hl kwa">string</span> color<span class="hl opt">))</span>
                                                                                   thread-index
                                                                                   colors-count<span class="hl opt">)))))</span>
                      nil<span class="hl opt">)</span>
                    <span class="hl opt">(,(</span><span class="hl kwa">intern</span> <span class="hl opt">(</span><span class="hl kwa">format</span> nil <span class="hl str">&quot;WAIT-~a&quot;</span> game-name<span class="hl opt">)) ()</span>
                      <span class="hl opt">,&#64;(</span><span class="hl kwa">loop</span> <span class="hl opt">:</span>for i <span class="hl opt">:</span>from <span class="hl num">0</span> <span class="hl opt">:</span>below colors-count <span class="hl opt">:</span>collect <span class="hl opt">`(</span><span class="hl kwa">sb-thread</span><span class="hl opt">:</span>join-thread <span class="hl opt">,(</span><span class="hl kwa">elt</span> worker-binds i<span class="hl opt">)))</span>
                      <span class="hl opt">(</span><span class="hl kwa">format</span> t <span class="hl opt">,(</span><span class="hl kwa">format</span> nil <span class="hl str">&quot;~{ ~a~}~~%&quot;</span> <span class="hl opt">(</span><span class="hl kwa">loop</span> <span class="hl opt">:</span>for color <span class="hl opt">:</span>in colors <span class="hl opt">:</span>collect <span class="hl opt">(</span><span class="hl kwa">string-downcase</span> <span class="hl opt">(</span><span class="hl kwa">string</span> color<span class="hl opt">)))))</span>
                      <span class="hl opt">(</span><span class="hl kwa">loop</span> <span class="hl opt">:</span>for i <span class="hl opt">:</span>from <span class="hl num">0</span> <span class="hl opt">:</span>below <span class="hl opt">,</span>colors-count
                         <span class="hl opt">:</span>summing <span class="hl opt">(</span><span class="hl kwa">chameneo-meet-count</span> <span class="hl opt">(</span><span class="hl kwa">elt</span> <span class="hl opt">,</span>chameneos i<span class="hl opt">)) :</span>into total <span class="hl opt">:</span>of-type fixnum
                         <span class="hl opt">:</span>do <span class="hl opt">(</span><span class="hl kwa">format</span> t <span class="hl str">&quot;~a~a~%&quot;</span>
                                     <span class="hl opt">(</span><span class="hl kwa">chameneo-meet-count</span> <span class="hl opt">(</span><span class="hl kwa">elt</span> <span class="hl opt">,</span>chameneos i<span class="hl opt">))</span>
                                     <span class="hl opt">(</span><span class="hl kwa">spell-number</span> <span class="hl opt">(</span><span class="hl kwa">chameneo-same-count</span> <span class="hl opt">(</span><span class="hl kwa">elt</span> <span class="hl opt">,</span>chameneos i<span class="hl opt">))))</span>
                         <span class="hl opt">:</span>finally <span class="hl opt">(</span><span class="hl kwa">format</span> t <span class="hl str">&quot;~a~%~%&quot;</span> <span class="hl opt">(</span><span class="hl kwa">spell-number</span> total<span class="hl opt">)))))</span>
               <span class="hl opt">(</span><span class="hl kwa">with-games</span> <span class="hl opt">(,&#64;(</span><span class="hl kwa">cdr</span> descriptions<span class="hl opt">))</span>
                 <span class="hl opt">,&#64;</span>body<span class="hl opt">)))))))</span>
                      

<span class="hl slc">;;</span>
<span class="hl slc">;; Game contents</span>
<span class="hl slc">;;</span>

<span class="hl opt">(</span><span class="hl kwa">progn</span>
  <span class="hl opt">(</span><span class="hl kwa">declare-colors-map</span>
   <span class="hl opt">(</span><span class="hl kwa">blue</span> <span class="hl opt">+</span> blue -<span class="hl opt">&gt;</span> blue<span class="hl opt">)</span>
   <span class="hl opt">(</span><span class="hl kwa">blue</span> <span class="hl opt">+</span> red -<span class="hl opt">&gt;</span> yellow<span class="hl opt">)</span>
   <span class="hl opt">(</span><span class="hl kwa">blue</span> <span class="hl opt">+</span> yellow -<span class="hl opt">&gt;</span> red<span class="hl opt">)</span>
   <span class="hl opt">(</span><span class="hl kwa">red</span> <span class="hl opt">+</span> blue -<span class="hl opt">&gt;</span> yellow<span class="hl opt">)</span>
   <span class="hl opt">(</span><span class="hl kwa">red</span> <span class="hl opt">+</span> red -<span class="hl opt">&gt;</span> red<span class="hl opt">)</span>
   <span class="hl opt">(</span><span class="hl kwa">red</span> <span class="hl opt">+</span> yellow -<span class="hl opt">&gt;</span> blue<span class="hl opt">)</span>
   <span class="hl opt">(</span><span class="hl kwa">yellow</span> <span class="hl opt">+</span> blue -<span class="hl opt">&gt;</span> red<span class="hl opt">)</span>
   <span class="hl opt">(</span><span class="hl kwa">yellow</span> <span class="hl opt">+</span> red -<span class="hl opt">&gt;</span> blue<span class="hl opt">)</span>
   <span class="hl opt">(</span><span class="hl kwa">yellow</span> <span class="hl opt">+</span> yellow -<span class="hl opt">&gt;</span> yellow<span class="hl opt">))</span>

  <span class="hl opt">(</span><span class="hl kwa">defun</span> run-games <span class="hl opt">(</span><span class="hl kwa">count</span> current-affinity<span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">optimize</span> <span class="hl opt">(</span><span class="hl kwa">speed</span> <span class="hl num">3</span><span class="hl opt">) (</span><span class="hl kwa">safety</span> <span class="hl num">0</span><span class="hl opt">) (</span><span class="hl kwa">debug</span> <span class="hl num">0</span><span class="hl opt">))</span>
             <span class="hl opt">(</span><span class="hl kwa">type</span> fixnum count<span class="hl opt">)</span>
             <span class="hl opt">(</span><span class="hl kwa">type</span> list current-affinity<span class="hl opt">))</span>
    <span class="hl opt">(</span><span class="hl kwa">let</span><span class="hl opt">* ((</span><span class="hl kwa">active-cores</span> <span class="hl opt">(</span><span class="hl kwa">length</span> current-affinity<span class="hl opt">))</span>
           <span class="hl opt">(</span><span class="hl kwa">smp-p</span> <span class="hl opt">(&gt;</span> active-cores <span class="hl num">1</span><span class="hl opt">)))</span>
      <span class="hl opt">(</span><span class="hl kwa">with-games</span> <span class="hl opt">((</span><span class="hl kwa">game-a</span> blue red yellow<span class="hl opt">)</span>
                   <span class="hl opt">(</span><span class="hl kwa">game-b</span> blue red yellow red yellow blue red yellow red blue<span class="hl opt">))</span>
        <span class="hl opt">(</span><span class="hl kwa">if</span> smp-p
            <span class="hl opt">(</span><span class="hl kwa">multiple-value-bind</span> <span class="hl opt">(</span><span class="hl kwa">affinity-a</span> affinity-b<span class="hl opt">)</span>
                <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(&lt;</span> active-cores <span class="hl num">4</span><span class="hl opt">)</span>
                    <span class="hl opt">(</span><span class="hl kwa">values</span> current-affinity current-affinity<span class="hl opt">)</span>
                    <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">((</span><span class="hl kwa">apic-map</span> <span class="hl opt">(</span><span class="hl kwa">apic-core-map</span> current-affinity<span class="hl opt">)))</span>
                      <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> list apic-map<span class="hl opt">))</span>
                      <span class="hl opt">(</span><span class="hl kwa">values</span> <span class="hl opt">(</span><span class="hl kwa">list</span> <span class="hl opt">(</span><span class="hl kwa">second</span> <span class="hl opt">(</span><span class="hl kwa">elt</span> apic-map <span class="hl num">0</span><span class="hl opt">)) (</span><span class="hl kwa">second</span> <span class="hl opt">(</span><span class="hl kwa">elt</span> apic-map <span class="hl num">1</span><span class="hl opt">)))</span>
                              <span class="hl opt">(</span><span class="hl kwa">list</span> <span class="hl opt">(</span><span class="hl kwa">second</span> <span class="hl opt">(</span><span class="hl kwa">elt</span> apic-map <span class="hl num">2</span><span class="hl opt">)) (</span><span class="hl kwa">second</span> <span class="hl opt">(</span><span class="hl kwa">elt</span> apic-map <span class="hl num">3</span><span class="hl opt">))))))</span>
              <span class="hl opt">(</span><span class="hl kwa">run-game-a</span> count affinity-a smp-p<span class="hl opt">)</span>
              <span class="hl opt">(</span><span class="hl kwa">run-game-b</span> count affinity-b smp-p<span class="hl opt">)</span>
              <span class="hl opt">(</span><span class="hl kwa">wait-game-a</span><span class="hl opt">)</span>
              <span class="hl opt">(</span><span class="hl kwa">wait-game-b</span><span class="hl opt">))</span>
            <span class="hl opt">(</span><span class="hl kwa">progn</span> <span class="hl opt">(</span><span class="hl kwa">run-game-a</span> count current-affinity smp-p<span class="hl opt">)</span>
                   <span class="hl opt">(</span><span class="hl kwa">wait-game-a</span><span class="hl opt">)</span>
                   <span class="hl opt">(</span><span class="hl kwa">run-game-b</span> count current-affinity smp-p<span class="hl opt">)</span>
                   <span class="hl opt">(</span><span class="hl kwa">wait-game-b</span><span class="hl opt">))))))</span>
  
  <span class="hl opt">(</span><span class="hl kwa">defun</span> main <span class="hl opt">(&amp;</span>optional force-count<span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl kwa">let</span><span class="hl opt">* ((</span><span class="hl kwa">args</span> <span class="hl opt">(</span><span class="hl kwa">cdr</span> sb-ext<span class="hl opt">:*</span>posix-argv<span class="hl opt">*))</span>
           <span class="hl opt">(</span><span class="hl kwa">count</span> <span class="hl opt">(</span><span class="hl kwa">or</span> force-count <span class="hl opt">(</span><span class="hl kwa">if</span> args <span class="hl opt">(</span><span class="hl kwa">parse-integer</span> <span class="hl opt">(</span><span class="hl kwa">car</span> args<span class="hl opt">))</span> <span class="hl num">600</span><span class="hl opt">))))</span>
      <span class="hl opt">(</span><span class="hl kwa">print-colors</span><span class="hl opt">)</span>
      <span class="hl opt">(</span><span class="hl kwa">multiple-value-bind</span> <span class="hl opt">(</span><span class="hl kwa">success-p</span> current-affinity<span class="hl opt">)</span>
          <span class="hl opt">(</span><span class="hl kwa">affinity</span> sb-thread<span class="hl opt">:*</span>current-thread<span class="hl opt">*)</span>
        <span class="hl opt">(</span><span class="hl kwa">unless</span> success-p
          <span class="hl opt">(</span><span class="hl kwa">error</span> <span class="hl str">&quot;Failed to retrieve current thread affinity&quot;</span><span class="hl opt">))</span>
        <span class="hl opt">(</span><span class="hl kwa">run-games</span> count current-affinity<span class="hl opt">)))))</span>


<span class="hl opt">(</span><span class="hl kwa">in-package</span> <span class="hl opt">:</span>cl-user<span class="hl opt">)</span>

<span class="hl opt">(</span><span class="hl kwa">defun</span> main <span class="hl opt">()</span>
  <span class="hl opt">(</span><span class="hl kwa">chameneos-redux</span><span class="hl opt">::</span>main<span class="hl opt">))</span>
