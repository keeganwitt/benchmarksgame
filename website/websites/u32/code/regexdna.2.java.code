<span class="hl com">/*</span>
<span class="hl com">   The Computer Language Benchmarks Game</span>
<span class="hl com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com">   contributed by The Anh Tran</span>
<span class="hl com"> */</span>


<span class="hl kwa">import</span> java<span class="hl opt">.</span>io<span class="hl opt">.*;</span>
<span class="hl kwa">import</span> java<span class="hl opt">.</span>util<span class="hl opt">.</span>concurrent<span class="hl opt">.*;</span>
<span class="hl kwa">import</span> java<span class="hl opt">.</span>util<span class="hl opt">.</span>concurrent<span class="hl opt">.</span>atomic<span class="hl opt">.*;</span>
<span class="hl kwa">import</span> java<span class="hl opt">.</span>util<span class="hl opt">.</span>regex<span class="hl opt">.*;</span>
<span class="hl kwa">import</span> java<span class="hl opt">.</span>util<span class="hl opt">.*;</span>


<span class="hl kwa">public class</span> regexdna
<span class="hl opt">{</span>
    <span class="hl slc">// source data is duplicated into 2 arrays</span>
    <span class="hl kwa">static</span> ArrayList<span class="hl opt">&lt;</span>StringBuilder<span class="hl opt">&gt;</span> source_as_segments <span class="hl opt">=</span> <span class="hl kwa">new</span> ArrayList<span class="hl opt">&lt;</span>StringBuilder<span class="hl opt">&gt;();;</span>
    <span class="hl kwa">static</span> ArrayList<span class="hl opt">&lt;</span>StringBuilder<span class="hl opt">&gt;</span> source_as_lines <span class="hl opt">=</span> <span class="hl kwa">new</span> ArrayList<span class="hl opt">&lt;</span>StringBuilder<span class="hl opt">&gt;();;</span>
    
    <span class="hl slc">// read data from stdin to StringBuilder</span>
    <span class="hl slc">// return initial data size</span>
    <span class="hl kwa">private static</span> <span class="hl kwb">int</span> <span class="hl kwd">ReadInput</span><span class="hl opt">(</span>StringBuilder sb<span class="hl opt">)</span>
    <span class="hl opt">{</span>
        <span class="hl kwa">try</span>
        <span class="hl opt">{</span>
            BufferedReader reader <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">BufferedReader</span> <span class="hl opt">(</span><span class="hl kwa">new</span> <span class="hl kwd">InputStreamReader</span> <span class="hl opt">(</span>System<span class="hl opt">.</span><span class="hl kwa">in</span><span class="hl opt">,</span> <span class="hl str">&quot;US-ASCII&quot;</span><span class="hl opt">));</span>
            
            <span class="hl kwb">char</span><span class="hl opt">[]</span> buf <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwb">char</span><span class="hl opt">[</span><span class="hl num">64</span> <span class="hl opt">*</span><span class="hl num">1024</span><span class="hl opt">];</span>
            <span class="hl kwb">int</span> read <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">,</span> total <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
            
            <span class="hl kwa">while</span> <span class="hl opt">((</span>read <span class="hl opt">=</span> reader<span class="hl opt">.</span><span class="hl kwd">read</span> <span class="hl opt">(</span>buf<span class="hl opt">)) != -</span><span class="hl num">1</span><span class="hl opt">)</span>
            <span class="hl opt">{</span>
                total <span class="hl opt">+=</span> read<span class="hl opt">;</span>
                sb<span class="hl opt">.</span><span class="hl kwd">append</span> <span class="hl opt">(</span>buf<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> read<span class="hl opt">);</span>
            <span class="hl opt">}</span>

            <span class="hl kwa">return</span> total<span class="hl opt">;</span>
        <span class="hl opt">}</span>
        <span class="hl kwa">catch</span> <span class="hl opt">(</span>IOException ie<span class="hl opt">)</span>
        <span class="hl opt">{</span>
            ie<span class="hl opt">.</span><span class="hl kwd">printStackTrace</span> <span class="hl opt">();</span>
        <span class="hl opt">}</span>
        
        <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>
    
    <span class="hl slc">// strip header and newline</span>
    <span class="hl slc">// duplicate each data line into 2 arrays</span>
    <span class="hl kwa">private static</span> <span class="hl kwb">int</span> <span class="hl kwd">StripHeader</span><span class="hl opt">(</span>StringBuilder sb<span class="hl opt">)</span>
    <span class="hl opt">{</span>
        Pattern pat <span class="hl opt">=</span> Pattern<span class="hl opt">.</span><span class="hl kwd">compile</span><span class="hl opt">(</span><span class="hl str">&quot;(&gt;.*</span><span class="hl esc">\n</span><span class="hl str">)|</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">);</span>
        Matcher mt <span class="hl opt">=</span> pat<span class="hl opt">.</span><span class="hl kwd">matcher</span><span class="hl opt">(</span>sb<span class="hl opt">);</span>   <span class="hl slc">// scan all data</span>
        
        StringBuilder desti <span class="hl opt">=</span> null<span class="hl opt">;</span>
        StringBuffer tmp <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">StringBuffer</span><span class="hl opt">();</span>
        
        <span class="hl kwa">while</span> <span class="hl opt">(</span>mt<span class="hl opt">.</span><span class="hl kwd">find</span><span class="hl opt">())</span>
        <span class="hl opt">{</span>
            mt<span class="hl opt">.</span><span class="hl kwd">appendReplacement</span><span class="hl opt">(</span>tmp<span class="hl opt">,</span> <span class="hl str">&quot;&quot;</span><span class="hl opt">);</span>

            <span class="hl kwa">if</span> <span class="hl opt">(</span>mt<span class="hl opt">.</span><span class="hl kwd">start</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">) &gt;=</span> <span class="hl num">0</span><span class="hl opt">)</span>   <span class="hl slc">// this is header line</span>
            <span class="hl opt">{</span>
                desti <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">StringBuilder</span><span class="hl opt">();</span>    <span class="hl slc">// alloc new dna sequence</span>
                source_as_segments<span class="hl opt">.</span><span class="hl kwd">add</span><span class="hl opt">(</span>desti<span class="hl opt">);</span>
            <span class="hl opt">}</span>

            desti<span class="hl opt">.</span><span class="hl kwd">append</span><span class="hl opt">(</span>tmp<span class="hl opt">);</span>  <span class="hl slc">// append this line to current dna sequence</span>
            source_as_lines<span class="hl opt">.</span><span class="hl kwd">add</span><span class="hl opt">(</span><span class="hl kwa">new</span> <span class="hl kwd">StringBuilder</span><span class="hl opt">(</span>tmp<span class="hl opt">));</span>    <span class="hl slc">// also append this line to 2nd array</span>

            <span class="hl slc">// reset buffer len, re-use in next match</span>
            tmp<span class="hl opt">.</span><span class="hl kwd">setLength</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">);</span>
        <span class="hl opt">}</span>

        <span class="hl kwb">int</span> strip_len <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
        <span class="hl kwa">for</span> <span class="hl opt">(</span>StringBuilder b <span class="hl opt">:</span> source_as_segments<span class="hl opt">)</span>
            strip_len <span class="hl opt">+=</span> b<span class="hl opt">.</span><span class="hl kwd">length</span><span class="hl opt">();</span>
        
        <span class="hl kwa">return</span> strip_len<span class="hl opt">;</span>
    <span class="hl opt">}</span>
    
    <span class="hl kwa">private static</span> <span class="hl kwb">void</span> <span class="hl kwd">CountMatch</span><span class="hl opt">()</span>
    <span class="hl opt">{</span>
        <span class="hl kwa">final</span> String<span class="hl opt">[]</span> patterns <span class="hl opt">=</span> 
        <span class="hl opt">{</span>   <span class="hl str">&quot;agggtaaa|tttaccct&quot;</span> <span class="hl opt">,</span>
            <span class="hl str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span><span class="hl opt">,</span>
            <span class="hl str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span><span class="hl opt">,</span>
            <span class="hl str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span><span class="hl opt">,</span>
            <span class="hl str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span><span class="hl opt">,</span>
            <span class="hl str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span><span class="hl opt">,</span>
            <span class="hl str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span><span class="hl opt">,</span>
            <span class="hl str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span><span class="hl opt">,</span>
            <span class="hl str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span>
        <span class="hl opt">};</span>
    
        <span class="hl kwa">final</span> AtomicIntegerArray results <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">AtomicIntegerArray</span><span class="hl opt">(</span>patterns<span class="hl opt">.</span>length<span class="hl opt">);</span>
        <span class="hl kwa">final</span> AtomicIntegerArray tasks <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">AtomicIntegerArray</span><span class="hl opt">(</span>patterns<span class="hl opt">.</span>length<span class="hl opt">);</span>
        
        Thread<span class="hl opt">[]</span> pool <span class="hl opt">=</span> <span class="hl kwa">new</span> Thread<span class="hl opt">[</span>Runtime<span class="hl opt">.</span><span class="hl kwd">getRuntime</span><span class="hl opt">().</span><span class="hl kwd">availableProcessors</span><span class="hl opt">()];</span>
        <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> pool<span class="hl opt">.</span>length<span class="hl opt">;</span> i<span class="hl opt">++)</span>
        <span class="hl opt">{</span>
            pool<span class="hl opt">[</span>i<span class="hl opt">] =</span> <span class="hl kwa">new</span> <span class="hl kwd">Thread</span><span class="hl opt">()</span>
            <span class="hl opt">{</span>
                <span class="hl kwa">public</span> <span class="hl kwb">void</span> <span class="hl kwd">run</span><span class="hl opt">()</span>
                <span class="hl opt">{</span>
                    <span class="hl slc">// for each search pattern</span>
                    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> pt <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> pt <span class="hl opt">&lt;</span> patterns<span class="hl opt">.</span>length<span class="hl opt">;</span> pt<span class="hl opt">++)</span>
                    <span class="hl opt">{</span>
                        Pattern expression <span class="hl opt">=</span> Pattern<span class="hl opt">.</span><span class="hl kwd">compile</span><span class="hl opt">(</span>patterns<span class="hl opt">[</span>pt<span class="hl opt">]);</span>

                        <span class="hl kwb">int</span> total_seg <span class="hl opt">=</span> source_as_segments<span class="hl opt">.</span><span class="hl kwd">size</span><span class="hl opt">();</span>
                        <span class="hl kwb">int</span> seq<span class="hl opt">;</span>
                        Matcher mt <span class="hl opt">=</span> expression<span class="hl opt">.</span><span class="hl kwd">matcher</span><span class="hl opt">(</span><span class="hl str">&quot;&quot;</span><span class="hl opt">);</span>
                        
                        <span class="hl slc">// fetch not-yet-processed sequence</span>
                        <span class="hl kwa">while</span> <span class="hl opt">((</span>seq <span class="hl opt">=</span> tasks<span class="hl opt">.</span><span class="hl kwd">getAndIncrement</span><span class="hl opt">(</span>pt<span class="hl opt">)) &lt;</span> total_seg<span class="hl opt">)</span>
                        <span class="hl opt">{</span>
                            mt<span class="hl opt">.</span><span class="hl kwd">reset</span><span class="hl opt">(</span>source_as_segments<span class="hl opt">.</span><span class="hl kwd">get</span><span class="hl opt">(</span>seq<span class="hl opt">));</span>

                            <span class="hl kwa">while</span> <span class="hl opt">(</span>mt<span class="hl opt">.</span><span class="hl kwd">find</span><span class="hl opt">())</span>
                                results<span class="hl opt">.</span><span class="hl kwd">incrementAndGet</span><span class="hl opt">(</span>pt<span class="hl opt">);</span>
                        <span class="hl opt">}</span>
                    <span class="hl opt">}</span>
                <span class="hl opt">}</span>
            <span class="hl opt">};</span>
            pool<span class="hl opt">[</span>i<span class="hl opt">].</span><span class="hl kwd">start</span><span class="hl opt">();</span>
        <span class="hl opt">}</span>
        
        <span class="hl slc">// wait for result</span>
        <span class="hl kwa">for</span> <span class="hl opt">(</span>Thread t <span class="hl opt">:</span> pool<span class="hl opt">)</span>
        <span class="hl opt">{</span>
            <span class="hl kwa">try</span>
            <span class="hl opt">{</span>
                t<span class="hl opt">.</span><span class="hl kwd">join</span><span class="hl opt">();</span>
            <span class="hl opt">}</span>
            <span class="hl kwa">catch</span> <span class="hl opt">(</span>InterruptedException e<span class="hl opt">)</span>
            <span class="hl opt">{</span>
                e<span class="hl opt">.</span><span class="hl kwd">printStackTrace</span><span class="hl opt">();</span>
            <span class="hl opt">}</span>
        <span class="hl opt">}</span>
        
        <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i<span class="hl opt">&lt;</span> patterns<span class="hl opt">.</span>length<span class="hl opt">;</span> i<span class="hl opt">++)</span>
        <span class="hl opt">{</span>
            System<span class="hl opt">.</span>out<span class="hl opt">.</span><span class="hl kwd">format</span><span class="hl opt">(</span><span class="hl str">&quot;%s %d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> patterns<span class="hl opt">[</span>i<span class="hl opt">],</span> results<span class="hl opt">.</span><span class="hl kwd">get</span><span class="hl opt">(</span>i<span class="hl opt">));</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span>
    
    <span class="hl kwa">private static</span> <span class="hl kwb">int</span> <span class="hl kwd">Replace</span><span class="hl opt">()</span>
    <span class="hl opt">{</span>
        <span class="hl kwa">final</span> String<span class="hl opt">[]</span> pat_search <span class="hl opt">=</span> 
        <span class="hl opt">{</span>
            <span class="hl str">&quot;W&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;Y&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;K&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;M&quot;</span><span class="hl opt">,</span> 
            <span class="hl str">&quot;S&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;R&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;B&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;D&quot;</span><span class="hl opt">,</span> 
            <span class="hl str">&quot;V&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;H&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;N&quot;</span>
        <span class="hl opt">};</span>
        <span class="hl kwa">final</span> String<span class="hl opt">[]</span> pat_replace <span class="hl opt">=</span> 
        <span class="hl opt">{</span>
            <span class="hl str">&quot;(a|t)&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(c|t)&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(g|t)&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(a|c)&quot;</span><span class="hl opt">,</span> 
            <span class="hl str">&quot;(c|g)&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(a|g)&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(c|g|t)&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(a|g|t)&quot;</span><span class="hl opt">,</span> 
            <span class="hl str">&quot;(a|c|g)&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(a|c|t)&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(a|c|g|t)&quot;</span>
        <span class="hl opt">};</span>
        
        <span class="hl kwa">final</span> AtomicIntegerArray tasks <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">AtomicIntegerArray</span><span class="hl opt">(</span>pat_search<span class="hl opt">.</span>length<span class="hl opt">);</span>
        <span class="hl kwa">final</span> AtomicIntegerArray result <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">AtomicIntegerArray</span><span class="hl opt">(</span>pat_search<span class="hl opt">.</span>length<span class="hl opt">);</span>
        
        Thread<span class="hl opt">[]</span> pool <span class="hl opt">=</span> <span class="hl kwa">new</span> Thread<span class="hl opt">[</span>Runtime<span class="hl opt">.</span><span class="hl kwd">getRuntime</span><span class="hl opt">().</span><span class="hl kwd">availableProcessors</span><span class="hl opt">()];</span>
        <span class="hl kwa">final</span> CyclicBarrier barrier <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">CyclicBarrier</span><span class="hl opt">(</span>pool<span class="hl opt">.</span>length<span class="hl opt">);</span>

        <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> pool<span class="hl opt">.</span>length<span class="hl opt">;</span> i<span class="hl opt">++)</span>
        <span class="hl opt">{</span>
            pool<span class="hl opt">[</span>i<span class="hl opt">] =</span> <span class="hl kwa">new</span> <span class="hl kwd">Thread</span><span class="hl opt">()</span>
            <span class="hl opt">{</span>
                <span class="hl kwa">public</span> <span class="hl kwb">void</span> <span class="hl kwd">run</span><span class="hl opt">()</span>
                <span class="hl opt">{</span>
                    StringBuffer des_buf <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">StringBuffer</span><span class="hl opt">();</span>
                    
                    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> pt <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> pt <span class="hl opt">&lt;</span> pat_search<span class="hl opt">.</span>length<span class="hl opt">;</span> pt<span class="hl opt">++)</span>
                    <span class="hl opt">{</span>
                        Pattern pattern <span class="hl opt">=</span> Pattern<span class="hl opt">.</span><span class="hl kwd">compile</span><span class="hl opt">(</span>pat_search<span class="hl opt">[</span>pt<span class="hl opt">]);</span>
                        Matcher m <span class="hl opt">=</span> pattern<span class="hl opt">.</span><span class="hl kwd">matcher</span><span class="hl opt">(</span><span class="hl str">&quot;&quot;</span><span class="hl opt">);</span>

                        <span class="hl kwb">int</span> total_line <span class="hl opt">=</span> source_as_lines<span class="hl opt">.</span><span class="hl kwd">size</span><span class="hl opt">();</span>
                        <span class="hl kwb">int</span> line<span class="hl opt">;</span>

                        <span class="hl kwa">while</span> <span class="hl opt">((</span>line <span class="hl opt">=</span> tasks<span class="hl opt">.</span><span class="hl kwd">getAndIncrement</span><span class="hl opt">(</span>pt<span class="hl opt">)) &lt;</span> total_line<span class="hl opt">)</span>
                        <span class="hl opt">{</span>
                            StringBuilder src_buf <span class="hl opt">=</span> source_as_lines<span class="hl opt">.</span><span class="hl kwd">get</span><span class="hl opt">(</span>line<span class="hl opt">);</span>
                            m<span class="hl opt">.</span><span class="hl kwd">reset</span><span class="hl opt">(</span>src_buf<span class="hl opt">);</span>
                            <span class="hl kwb">boolean</span> change <span class="hl opt">=</span> false<span class="hl opt">;</span>

                            <span class="hl kwa">while</span> <span class="hl opt">(</span>m<span class="hl opt">.</span><span class="hl kwd">find</span><span class="hl opt">())</span>
                            <span class="hl opt">{</span>
                                m<span class="hl opt">.</span><span class="hl kwd">appendReplacement</span><span class="hl opt">(</span>des_buf<span class="hl opt">,</span> pat_replace<span class="hl opt">[</span>pt<span class="hl opt">]);</span>
                                change <span class="hl opt">=</span> true<span class="hl opt">;</span>
                            <span class="hl opt">}</span>

                            <span class="hl kwa">if</span> <span class="hl opt">(</span>change<span class="hl opt">)</span>
                            <span class="hl opt">{</span>
                                m<span class="hl opt">.</span><span class="hl kwd">appendTail</span><span class="hl opt">(</span>des_buf<span class="hl opt">);</span>
                                src_buf<span class="hl opt">.</span><span class="hl kwd">setLength</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">);</span>
                                src_buf<span class="hl opt">.</span><span class="hl kwd">append</span><span class="hl opt">(</span>des_buf<span class="hl opt">);</span>
                            <span class="hl opt">}</span>

                            <span class="hl kwa">if</span> <span class="hl opt">(</span>pt <span class="hl opt">== (</span>pat_search<span class="hl opt">.</span>length <span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">))</span>
                                result<span class="hl opt">.</span><span class="hl kwd">addAndGet</span><span class="hl opt">(</span>pt<span class="hl opt">,</span> src_buf<span class="hl opt">.</span><span class="hl kwd">length</span><span class="hl opt">());</span>
                            
                            des_buf<span class="hl opt">.</span><span class="hl kwd">setLength</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">);</span>
                        <span class="hl opt">}</span>
                        
                        <span class="hl kwa">try</span>
                        <span class="hl opt">{</span>
                            barrier<span class="hl opt">.</span><span class="hl kwd">await</span><span class="hl opt">();</span>
                        <span class="hl opt">}</span>
                        <span class="hl kwa">catch</span> <span class="hl opt">(</span>Exception ie<span class="hl opt">)</span>
                        <span class="hl opt">{</span>
                            ie<span class="hl opt">.</span><span class="hl kwd">printStackTrace</span><span class="hl opt">();</span>
                        <span class="hl opt">}</span>
                    <span class="hl opt">}</span>
                <span class="hl opt">}</span>
            <span class="hl opt">};</span>
            
            pool<span class="hl opt">[</span>i<span class="hl opt">].</span><span class="hl kwd">start</span><span class="hl opt">();</span>
        <span class="hl opt">}</span>
        
        <span class="hl kwa">for</span> <span class="hl opt">(</span>Thread t <span class="hl opt">:</span> pool<span class="hl opt">)</span>
        <span class="hl opt">{</span>
            <span class="hl kwa">try</span>
            <span class="hl opt">{</span>
                t<span class="hl opt">.</span><span class="hl kwd">join</span><span class="hl opt">();</span>
            <span class="hl opt">}</span>
            <span class="hl kwa">catch</span> <span class="hl opt">(</span>InterruptedException e<span class="hl opt">)</span>
            <span class="hl opt">{</span>
                e<span class="hl opt">.</span><span class="hl kwd">printStackTrace</span><span class="hl opt">();</span>
            <span class="hl opt">}</span>
        <span class="hl opt">}</span>
        
        <span class="hl kwb">int</span> replace_len <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
        <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> result<span class="hl opt">.</span><span class="hl kwd">length</span><span class="hl opt">();</span> i<span class="hl opt">++)</span>
            replace_len <span class="hl opt">+=</span> result<span class="hl opt">.</span><span class="hl kwd">get</span><span class="hl opt">(</span>i<span class="hl opt">);</span>
        <span class="hl kwa">return</span> replace_len<span class="hl opt">;</span>
    <span class="hl opt">}</span>
    
    <span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">main</span> <span class="hl opt">(</span>String<span class="hl opt">[]</span> args<span class="hl opt">)</span>
    <span class="hl opt">{</span>
        StringBuilder sb <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">StringBuilder</span> <span class="hl opt">();</span>
        <span class="hl kwb">int</span> init_len <span class="hl opt">=</span> <span class="hl kwd">ReadInput</span><span class="hl opt">(</span>sb<span class="hl opt">);</span>
        
        <span class="hl kwb">int</span> strip_len <span class="hl opt">=</span> <span class="hl kwd">StripHeader</span><span class="hl opt">(</span>sb<span class="hl opt">);</span>
        sb <span class="hl opt">=</span> null<span class="hl opt">;</span>
        
        <span class="hl kwd">CountMatch</span><span class="hl opt">();</span>
        source_as_segments <span class="hl opt">=</span> null<span class="hl opt">;</span>
        
        <span class="hl kwb">int</span> replace_len <span class="hl opt">=</span> <span class="hl kwd">Replace</span><span class="hl opt">();</span>
        source_as_lines <span class="hl opt">=</span> null<span class="hl opt">;</span>
        
        System<span class="hl opt">.</span>out<span class="hl opt">.</span><span class="hl kwd">format</span><span class="hl opt">(</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">%d</span><span class="hl esc">\n</span><span class="hl str">%d</span><span class="hl esc">\n</span><span class="hl str">%d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> init_len<span class="hl opt">,</span> strip_len<span class="hl opt">,</span> replace_len<span class="hl opt">);</span>
    <span class="hl opt">}</span>
<span class="hl opt">}</span>
