<span class="hl opt">#</span>lang racket<span class="hl opt">/</span>base

<span class="hl slc">;;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;;; http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">;;</span>
<span class="hl slc">;;; Derived from the Chicken Scheme variant by Anthony Borla</span>
<span class="hl slc">;;; contributed by Matthew Flatt</span>
<span class="hl slc">;;</span>
<span class="hl slc">;; This version uses unsafe operations</span>

<span class="hl opt">(</span><span class="hl kwa">require</span> racket<span class="hl opt">/</span>cmdline
	 racket<span class="hl opt">/</span>require <span class="hl opt">(</span><span class="hl kwa">for-syntax</span> racket<span class="hl opt">/</span>base<span class="hl opt">)</span>
	 <span class="hl opt">(</span><span class="hl kwa">filtered-in</span>
	  <span class="hl opt">(</span><span class="hl kwa">lambda</span> <span class="hl opt">(</span><span class="hl kwa">name</span><span class="hl opt">) (</span><span class="hl kwa">regexp-replace</span> <span class="hl opt">#</span>rx<span class="hl str">&quot;unsafe-&quot;</span> name <span class="hl str">&quot;&quot;</span><span class="hl opt">))</span>
	  racket<span class="hl opt">/</span>unsafe<span class="hl opt">/</span>ops<span class="hl opt">))</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">+</span>limit-sqr<span class="hl opt">+</span> <span class="hl num">4.0</span><span class="hl opt">)</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">+</span>iterations<span class="hl opt">+</span> <span class="hl num">50</span><span class="hl opt">)</span>

<span class="hl slc">;; -------------------------------</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">mandelbrot</span> x y n ci<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">((</span><span class="hl kwa">cr</span> <span class="hl opt">(</span><span class="hl kwa">fl-</span> <span class="hl opt">(</span><span class="hl kwa">fl</span><span class="hl opt">/ (</span><span class="hl kwa">fl</span><span class="hl opt">*</span> <span class="hl num">2.0</span> <span class="hl opt">(</span><span class="hl kwa">fx-</span><span class="hl opt">&gt;</span>fl x<span class="hl opt">)) (</span><span class="hl kwa">fx-</span><span class="hl opt">&gt;</span>fl n<span class="hl opt">))</span> <span class="hl num">1.5</span><span class="hl opt">)))</span>
    <span class="hl opt">(</span><span class="hl kwa">let</span> loop <span class="hl opt">((</span><span class="hl kwa">i</span> <span class="hl num">0</span><span class="hl opt">) (</span><span class="hl kwa">zr</span> <span class="hl num">0.0</span><span class="hl opt">) (</span><span class="hl kwa">zi</span> <span class="hl num">0.0</span><span class="hl opt">))</span>
      <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">fx</span><span class="hl opt">&gt;</span> i <span class="hl opt">+</span>iterations<span class="hl opt">+)</span>
          <span class="hl num">1</span>
          <span class="hl opt">(</span><span class="hl kwa">cond</span>
           <span class="hl opt">((</span><span class="hl kwa">fl</span><span class="hl opt">&gt; (</span><span class="hl kwa">fl</span><span class="hl opt">+ (</span><span class="hl kwa">fl</span><span class="hl opt">*</span> zr zr<span class="hl opt">) (</span><span class="hl kwa">fl</span><span class="hl opt">*</span> zi zi<span class="hl opt">)) +</span>limit-sqr<span class="hl opt">+)</span> <span class="hl num">0</span><span class="hl opt">)</span>
           <span class="hl opt">(</span><span class="hl kwa">else</span> <span class="hl opt">(</span><span class="hl kwa">loop</span> <span class="hl opt">(</span><span class="hl kwa">fx</span><span class="hl opt">+</span> <span class="hl num">1</span> i<span class="hl opt">)</span> 
                       <span class="hl opt">(</span><span class="hl kwa">fl</span><span class="hl opt">+ (</span><span class="hl kwa">fl-</span> <span class="hl opt">(</span><span class="hl kwa">fl</span><span class="hl opt">*</span> zr zr<span class="hl opt">) (</span><span class="hl kwa">fl</span><span class="hl opt">*</span> zi zi<span class="hl opt">))</span> cr<span class="hl opt">)</span> 
                       <span class="hl opt">(</span><span class="hl kwa">fl</span><span class="hl opt">+ (</span><span class="hl kwa">fl</span><span class="hl opt">*</span> <span class="hl num">2.0</span> <span class="hl opt">(</span><span class="hl kwa">fl</span><span class="hl opt">*</span> zr zi<span class="hl opt">))</span> ci<span class="hl opt">))))))))</span>

<span class="hl slc">;; -------------------------------</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">main</span> n<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">((</span><span class="hl kwa">out</span> <span class="hl opt">(</span><span class="hl kwa">current-output-port</span><span class="hl opt">)))</span>

    <span class="hl opt">(</span><span class="hl kwa">fprintf</span> out <span class="hl str">&quot;P4</span><span class="hl esc">\n</span><span class="hl str">~a ~a</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> n n<span class="hl opt">)</span>

    <span class="hl opt">(</span><span class="hl kwa">let</span> loop-y <span class="hl opt">((</span><span class="hl kwa">y</span> <span class="hl num">0</span><span class="hl opt">))</span>

      <span class="hl opt">(</span><span class="hl kwa">when</span> <span class="hl opt">(</span><span class="hl kwa">fx</span><span class="hl opt">&lt;</span> y n<span class="hl opt">)</span>
        
        <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">([</span>ci <span class="hl opt">(</span><span class="hl kwa">fl-</span> <span class="hl opt">(</span><span class="hl kwa">fl</span><span class="hl opt">/ (</span><span class="hl kwa">fl</span><span class="hl opt">*</span> <span class="hl num">2.0</span> <span class="hl opt">(</span><span class="hl kwa">fx-</span><span class="hl opt">&gt;</span>fl y<span class="hl opt">)) (</span><span class="hl kwa">fx-</span><span class="hl opt">&gt;</span>fl n<span class="hl opt">))</span> <span class="hl num">1.0</span><span class="hl opt">)])</span>
          
          <span class="hl opt">(</span><span class="hl kwa">let</span> loop-x <span class="hl opt">((</span><span class="hl kwa">x</span> <span class="hl num">0</span><span class="hl opt">) (</span><span class="hl kwa">bitnum</span> <span class="hl num">0</span><span class="hl opt">) (</span><span class="hl kwa">byteacc</span> <span class="hl num">0</span><span class="hl opt">))</span>

            <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">fx</span><span class="hl opt">&lt;</span> x n<span class="hl opt">)</span>
                <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">([</span>bitnum <span class="hl opt">(</span><span class="hl kwa">fx</span><span class="hl opt">+</span> <span class="hl num">1</span> bitnum<span class="hl opt">)]</span>
                      <span class="hl opt">[</span>byteacc <span class="hl opt">(</span><span class="hl kwa">fx</span><span class="hl opt">+ (</span><span class="hl kwa">fxlshift</span> byteacc <span class="hl num">1</span><span class="hl opt">)</span> 
                                           <span class="hl opt">(</span><span class="hl kwa">mandelbrot</span> x y n ci<span class="hl opt">))])</span>

                  <span class="hl opt">(</span><span class="hl kwa">cond</span>
                   <span class="hl opt">((</span><span class="hl kwa">fx</span><span class="hl opt">=</span> bitnum <span class="hl num">8</span><span class="hl opt">)</span>
                    <span class="hl opt">(</span><span class="hl kwa">write-byte</span> byteacc out<span class="hl opt">)</span>
                    <span class="hl opt">(</span><span class="hl kwa">loop-x</span> <span class="hl opt">(</span><span class="hl kwa">fx</span><span class="hl opt">+</span> <span class="hl num">1</span> x<span class="hl opt">)</span> <span class="hl num">0 0</span><span class="hl opt">))</span>
                   
                   <span class="hl opt">[</span>else <span class="hl opt">(</span><span class="hl kwa">loop-x</span> <span class="hl opt">(</span><span class="hl kwa">fx</span><span class="hl opt">+</span> <span class="hl num">1</span> x<span class="hl opt">)</span> bitnum byteacc<span class="hl opt">)]))</span>

                <span class="hl opt">(</span><span class="hl kwa">begin</span>
                  <span class="hl opt">(</span><span class="hl kwa">when</span> <span class="hl opt">(</span><span class="hl kwa">positive</span>? bitnum<span class="hl opt">)</span>
                    <span class="hl opt">(</span><span class="hl kwa">write-byte</span> <span class="hl opt">(</span><span class="hl kwa">arithmetic-shift</span> byteacc 
                                                  <span class="hl opt">(</span><span class="hl kwa">-</span> <span class="hl num">8</span> <span class="hl opt">(</span><span class="hl kwa">bitwise-and</span> n <span class="hl opt">#</span>x7<span class="hl opt">)))</span> 
                                out<span class="hl opt">))</span>

                  <span class="hl opt">(</span><span class="hl kwa">loop-y</span> <span class="hl opt">(</span><span class="hl kwa">add1</span> y<span class="hl opt">))))))))))</span>

<span class="hl slc">;; -------------------------------</span>

<span class="hl opt">(</span><span class="hl kwa">command-line</span> <span class="hl opt">#:</span>args <span class="hl opt">(</span><span class="hl kwa">n</span><span class="hl opt">)</span>
              <span class="hl opt">(</span><span class="hl kwa">main</span> <span class="hl opt">(</span><span class="hl kwa">string-</span><span class="hl opt">&gt;</span>number n<span class="hl opt">)))</span>
