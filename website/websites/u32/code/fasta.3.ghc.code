<span class="hl slc">--</span>
<span class="hl slc">-- The Computer Language Benchmarks Game</span>
<span class="hl slc">-- http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">-- </span>
<span class="hl slc">-- contributed by Jeff Newbern</span>
<span class="hl slc">-- Modified to fastest.hs by Chris Kuklewicz, 6 Jan 2006</span>
<span class="hl slc">-- Modified to fixed-fasta.hs by Chris Kuklewicz, 17 Jan 2006</span>
<span class="hl slc">-- </span>
<span class="hl slc">-- Uses random generation code derived from Simon Marlow and Einar</span>
<span class="hl slc">-- Karttunen's &quot;random&quot; test entry.  No longer uses Double during run,</span>
<span class="hl slc">-- everything has been pre-converted to Int.  And pre-converted to a</span>
<span class="hl slc">-- binary tree for lookup.  Ideally this tree could be constructed</span>
<span class="hl slc">-- with the probabilities in mind, but it isn't in this version.</span>
<span class="hl slc">-- </span>
<span class="hl slc">-- Compile with ghc --make resub-fasta.hs -o resub-fasta.ghc_run</span>
<span class="hl slc">-- Run with &quot;./rsub-fasta.ghc_run %A&quot; where %A is the parameter</span>

<span class="hl kwd">import</span> Control<span class="hl opt">.</span>Monad
<span class="hl kwd">import</span> Data<span class="hl opt">.</span><span class="hl kwb">Char</span><span class="hl opt">(</span><span class="hl kwc">chr</span><span class="hl opt">,</span><span class="hl kwc">ord</span><span class="hl opt">)</span>
<span class="hl kwd">import</span> Data<span class="hl opt">.</span>List<span class="hl opt">(</span><span class="hl kwc">mapAccumL</span><span class="hl opt">)</span>
<span class="hl kwd">import</span> Data<span class="hl opt">.</span>Word<span class="hl opt">(</span>Word8<span class="hl opt">)</span>
<span class="hl kwd">import</span> Data<span class="hl opt">.</span>IORef
<span class="hl kwd">import</span> Foreign
<span class="hl kwd">import</span> System<span class="hl opt">.</span>Environment
<span class="hl kwd">import</span> System<span class="hl opt">.</span><span class="hl kwb">IO</span>

<span class="hl kwd">type</span> Base <span class="hl opt">=</span> Word8
<span class="hl kwd">data</span> BaseFrequencyTree <span class="hl opt">=</span> Node <span class="hl opt">!</span>Base
                       | TreeNodes <span class="hl opt">!</span><span class="hl kwb">Int</span> <span class="hl opt">!</span>Base <span class="hl opt">!</span>Base
                       | Tree <span class="hl opt">!</span><span class="hl kwb">Int</span> <span class="hl opt">!</span>BaseFrequencyTree <span class="hl opt">!</span>BaseFrequencyTree
<span class="hl kwd">data</span> Seed <span class="hl opt">=</span> Seed <span class="hl opt">!</span><span class="hl kwb">Int</span>

b2c <span class="hl opt">::</span> Word8 <span class="hl opt">-&gt;</span> <span class="hl kwb">Char</span>
b2c <span class="hl opt">=</span> <span class="hl kwc">chr</span> <span class="hl opt">.</span> <span class="hl kwc">fromEnum</span>
c2b <span class="hl opt">=</span> <span class="hl kwc">toEnum</span> <span class="hl opt">.</span> <span class="hl kwc">ord</span>

alu <span class="hl opt">=</span> <span class="hl str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span> <span class="hl opt">++</span>
      <span class="hl str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span> <span class="hl opt">++</span>
      <span class="hl str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span> <span class="hl opt">++</span>
      <span class="hl str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span> <span class="hl opt">++</span>
      <span class="hl str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span> <span class="hl opt">++</span>
      <span class="hl str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span> <span class="hl opt">++</span>
      <span class="hl str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span>

im <span class="hl opt">=</span> <span class="hl num">139968</span> <span class="hl opt">::</span> <span class="hl kwb">Double</span>

iub <span class="hl opt">=</span> mkTree <span class="hl opt">$</span> <span class="hl kwc">snd</span> <span class="hl opt">.</span> <span class="hl kwc">mapAccumL</span> <span class="hl opt">(</span><span class="hl esc">\r</span>t <span class="hl opt">(</span>c<span class="hl opt">,</span>f<span class="hl opt">) -&gt; (</span>f<span class="hl opt">+</span>rt<span class="hl opt">,(</span>c2b c<span class="hl opt">,</span><span class="hl kwa">ceiling</span> <span class="hl opt">$</span> im<span class="hl opt">*(</span>f<span class="hl opt">+</span>rt<span class="hl opt">))))</span> <span class="hl num">0.0</span> <span class="hl opt">$</span>
  <span class="hl opt">[ ('</span>a<span class="hl opt">',</span> <span class="hl num">0.27</span><span class="hl opt">), ('</span>c<span class="hl opt">',</span> <span class="hl num">0.12</span><span class="hl opt">), ('</span>g<span class="hl opt">',</span> <span class="hl num">0.12</span><span class="hl opt">), ('</span>t<span class="hl opt">',</span> <span class="hl num">0.27</span><span class="hl opt">), ('</span>B<span class="hl opt">',</span> <span class="hl num">0.02</span><span class="hl opt">),</span>
    <span class="hl opt">('</span>D<span class="hl opt">',</span> <span class="hl num">0.02</span><span class="hl opt">), ('</span>H<span class="hl opt">',</span> <span class="hl num">0.02</span><span class="hl opt">), ('</span>K<span class="hl opt">',</span> <span class="hl num">0.02</span><span class="hl opt">), ('</span>M<span class="hl opt">',</span> <span class="hl num">0.02</span><span class="hl opt">), ('</span>N<span class="hl opt">',</span> <span class="hl num">0.02</span><span class="hl opt">),</span>
    <span class="hl opt">('</span>R<span class="hl opt">',</span> <span class="hl num">0.02</span><span class="hl opt">), ('</span>S<span class="hl opt">',</span> <span class="hl num">0.02</span><span class="hl opt">), ('</span>V<span class="hl opt">',</span> <span class="hl num">0.02</span><span class="hl opt">), ('</span>W<span class="hl opt">',</span> <span class="hl num">0.02</span><span class="hl opt">), ('</span>Y<span class="hl opt">',</span> <span class="hl num">0.02</span><span class="hl opt">) ]</span>

homosapiens <span class="hl opt">=</span>  mkTree <span class="hl opt">$</span> <span class="hl kwc">snd</span> <span class="hl opt">.</span> <span class="hl kwc">mapAccumL</span> <span class="hl opt">(</span><span class="hl esc">\r</span>t <span class="hl opt">(</span>c<span class="hl opt">,</span>f<span class="hl opt">) -&gt; (</span>f<span class="hl opt">+</span>rt<span class="hl opt">,(</span>c2b c<span class="hl opt">,</span><span class="hl kwa">ceiling</span> <span class="hl opt">$</span> im<span class="hl opt">*(</span>f<span class="hl opt">+</span>rt<span class="hl opt">))))</span> <span class="hl num">0.0</span> <span class="hl opt">$</span>
  <span class="hl opt">[ ('</span>a<span class="hl opt">',</span> <span class="hl num">0.3029549426680</span><span class="hl opt">), ('</span>c<span class="hl opt">',</span> <span class="hl num">0.1979883004921</span><span class="hl opt">), ('</span>g<span class="hl opt">',</span> <span class="hl num">0.1975473066391</span><span class="hl opt">), ('</span>t<span class="hl opt">',</span> <span class="hl num">0.3015094502008</span><span class="hl opt">) ]</span>

mkTree <span class="hl opt">[(</span>b<span class="hl opt">,</span>_<span class="hl opt">)] =</span> Node b
mkTree <span class="hl opt">[(</span>b<span class="hl opt">,</span>f<span class="hl opt">),(</span>b<span class="hl opt">',</span>_<span class="hl opt">)] =</span> TreeNodes f b b<span class="hl opt">'</span>
mkTree xs <span class="hl opt">=</span> <span class="hl kwd">let</span> <span class="hl opt">(</span>h<span class="hl opt">,</span>t<span class="hl opt">) =</span> <span class="hl kwc">splitAt</span> <span class="hl opt">(</span><span class="hl kwa">length</span> xs `<span class="hl kwc">div</span>` <span class="hl num">2</span><span class="hl opt">)</span> xs
                <span class="hl opt">(</span>_<span class="hl opt">,</span>f<span class="hl opt">) =</span> <span class="hl kwc">last</span> h
            <span class="hl kwd">in</span> Tree f <span class="hl opt">(</span>mkTree h<span class="hl opt">) (</span>mkTree t<span class="hl opt">)</span>

chooseBase <span class="hl opt">(</span>Node b<span class="hl opt">)</span> _ <span class="hl opt">=</span> b
chooseBase <span class="hl opt">(</span>TreeNodes f b b<span class="hl opt">')</span> p <span class="hl opt">=</span> <span class="hl kwd">if</span> <span class="hl opt">(</span>p<span class="hl opt">&lt;</span>f<span class="hl opt">)</span> <span class="hl kwd">then</span> b <span class="hl kwd">else</span> b<span class="hl opt">'</span>
chooseBase <span class="hl opt">(</span>Tree f l r<span class="hl opt">)</span> p | p <span class="hl opt">&lt;</span> f     <span class="hl opt">=</span> chooseBase l p
                          | <span class="hl kwc">otherwise</span> <span class="hl opt">=</span> chooseBase r p

writeFastaHeader label title <span class="hl opt">=  (</span><span class="hl kwc">putStrLn</span> <span class="hl opt">(('&gt;':</span>label<span class="hl opt">) ++ (' ':</span>title<span class="hl opt">)))</span>
perLine <span class="hl opt">=</span> <span class="hl num">60</span>

writeAluBuffer total <span class="hl opt">=</span> <span class="hl kwd">do</span>
  <span class="hl kwd">let</span> l <span class="hl opt">=</span> <span class="hl kwa">length</span> alu
      bufSize <span class="hl opt">=</span> l <span class="hl opt">+</span> perLine <span class="hl opt">-</span> <span class="hl num">1</span>
  aluBuf <span class="hl opt">&lt;-</span> mallocArray bufSize
  foldM_ <span class="hl opt">(\</span>ptr c <span class="hl opt">-&gt;</span> poke ptr <span class="hl opt">(</span>c2b c<span class="hl opt">) &gt;&gt;</span> <span class="hl kwc">return</span> <span class="hl opt">(</span>advancePtr ptr <span class="hl num">1</span><span class="hl opt">))</span> aluBuf <span class="hl opt">(</span><span class="hl kwc">take</span> bufSize <span class="hl opt">(</span><span class="hl kwc">cycle</span> alu<span class="hl opt">))</span>
  <span class="hl kwd">let</span> <span class="hl opt">(</span>full<span class="hl opt">,</span>end<span class="hl opt">) =</span> total `<span class="hl kwc">divMod</span>` perLine
      fullLine n <span class="hl opt">=</span> <span class="hl kwd">let</span> ptr <span class="hl opt">=</span> advancePtr aluBuf <span class="hl opt">((</span>n <span class="hl opt">*</span> perLine<span class="hl opt">)</span> `<span class="hl kwc">mod</span>` l<span class="hl opt">)</span>
                   <span class="hl kwd">in</span> hPutBuf <span class="hl kwc">stdout</span> ptr perLine <span class="hl opt">&gt;&gt;</span> <span class="hl kwc">hPutChar stdout</span> <span class="hl opt">'</span><span class="hl esc">\n</span><span class="hl opt">'</span>
      lastLine <span class="hl opt">=</span> <span class="hl kwd">let</span> ptr <span class="hl opt">=</span> advancePtr aluBuf <span class="hl opt">((</span>full<span class="hl opt">*</span>perLine<span class="hl opt">)</span> `<span class="hl kwc">mod</span>` l<span class="hl opt">)</span>
                 <span class="hl kwd">in</span> hPutBuf <span class="hl kwc">stdout</span> ptr end <span class="hl opt">&gt;&gt;</span> <span class="hl kwc">hPutChar stdout</span> <span class="hl opt">'</span><span class="hl esc">\n</span><span class="hl opt">'</span>
  <span class="hl kwc">mapM_</span> fullLine <span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">..</span><span class="hl kwc">pred</span> full<span class="hl opt">]</span>
  <span class="hl kwc">when</span> <span class="hl opt">(</span>end<span class="hl opt">&gt;</span><span class="hl num">0</span><span class="hl opt">)</span> lastLine

writeWrapped total trans initSeed <span class="hl opt">=</span> <span class="hl kwd">do</span>
  seedRef <span class="hl opt">&lt;-</span> newIORef initSeed
  <span class="hl kwd">let</span> l <span class="hl opt">=</span> <span class="hl kwc">succ</span> perLine
      <span class="hl opt">(</span>im<span class="hl opt">,</span>ia<span class="hl opt">,</span>ic<span class="hl opt">)=(</span><span class="hl num">139968</span><span class="hl opt">,</span><span class="hl num">3877</span><span class="hl opt">,</span><span class="hl num">29573</span><span class="hl opt">)</span>
      nextSeed <span class="hl opt">(</span>Seed s<span class="hl opt">) =</span> Seed <span class="hl opt">( (</span>s <span class="hl opt">*</span> ia <span class="hl opt">+</span> ic<span class="hl opt">)</span> `<span class="hl kwc">mod</span>` im <span class="hl opt">)</span>
      prng <span class="hl opt">=</span> <span class="hl kwd">do</span> newSeed <span class="hl opt">&lt;-</span> <span class="hl kwc">return</span><span class="hl opt">.</span>nextSeed <span class="hl opt">=&lt;&lt;</span> readIORef seedRef
                writeIORef seedRef newSeed
                <span class="hl kwc">return</span> newSeed
  buf <span class="hl opt">&lt;-</span> mallocArray l
  poke <span class="hl opt">(</span>advancePtr buf perLine<span class="hl opt">) (</span>c2b <span class="hl opt">'</span><span class="hl esc">\n</span><span class="hl opt">')</span>
  <span class="hl kwd">let</span> <span class="hl opt">(</span>full<span class="hl opt">,</span>end<span class="hl opt">) =</span> total `<span class="hl kwc">divMod</span>` perLine
      fill <span class="hl num">0</span> _   <span class="hl opt">=</span> <span class="hl kwc">return</span> <span class="hl opt">()</span>
      fill i ptr <span class="hl opt">=</span> <span class="hl kwd">do</span> <span class="hl opt">(</span>Seed b<span class="hl opt">) &lt;-</span> prng
                      poke ptr <span class="hl opt">(</span>trans b<span class="hl opt">)</span>
                      fill <span class="hl opt">(</span><span class="hl kwc">pred</span> i<span class="hl opt">) (</span>advancePtr ptr <span class="hl num">1</span><span class="hl opt">)</span>
      fullLine <span class="hl opt">=</span> <span class="hl kwd">do</span> fill perLine buf
                    hPutBuf <span class="hl kwc">stdout</span> buf l
      lastLine <span class="hl opt">=</span> <span class="hl kwd">do</span> fill end buf
                    poke <span class="hl opt">(</span>advancePtr buf end<span class="hl opt">) (</span>c2b <span class="hl opt">'</span><span class="hl esc">\n</span><span class="hl opt">')</span>
                    hPutBuf <span class="hl kwc">stdout</span> buf <span class="hl opt">(</span><span class="hl kwc">succ</span> end<span class="hl opt">)</span>
  replicateM_ full fullLine
  <span class="hl kwc">when</span> <span class="hl opt">(</span>end<span class="hl opt">&gt;</span><span class="hl num">0</span><span class="hl opt">)</span> lastLine
  readIORef seedRef

main <span class="hl opt">=</span> <span class="hl kwd">do</span> args <span class="hl opt">&lt;-</span> <span class="hl kwc">getArgs</span>
          <span class="hl kwd">let</span> n <span class="hl opt">=</span> <span class="hl kwd">if</span> <span class="hl kwc">null</span> args <span class="hl kwd">then</span> <span class="hl num">2500000</span> <span class="hl kwd">else</span> <span class="hl kwc">read</span> <span class="hl opt">(</span><span class="hl kwc">head</span> args<span class="hl opt">)</span>
          writeFastaHeader <span class="hl str">&quot;ONE&quot;</span> <span class="hl str">&quot;Homo sapiens alu&quot;</span>
          writeAluBuffer <span class="hl opt">(</span><span class="hl num">2</span><span class="hl opt">*</span>n<span class="hl opt">)</span>
          writeFastaHeader <span class="hl str">&quot;TWO&quot;</span> <span class="hl str">&quot;IUB ambiguity codes&quot;</span>
          seed<span class="hl opt">' &lt;-</span> writeWrapped <span class="hl opt">(</span><span class="hl num">3</span><span class="hl opt">*</span>n<span class="hl opt">) (</span>chooseBase iub<span class="hl opt">) (</span>Seed <span class="hl num">42</span><span class="hl opt">)</span>
          writeFastaHeader <span class="hl str">&quot;THREE&quot;</span> <span class="hl str">&quot;Homo sapiens frequency&quot;</span>
          writeWrapped <span class="hl opt">(</span><span class="hl num">5</span><span class="hl opt">*</span>n<span class="hl opt">) (</span>chooseBase homosapiens<span class="hl opt">)</span> seed<span class="hl opt">'</span>
