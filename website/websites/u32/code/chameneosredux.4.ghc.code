<span class="hl com">{- The Computer Language Benchmarks Game</span>
<span class="hl com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com">   Written by Tom Pledger, 13 Nov 2006. modified by Don Stewart</span>
<span class="hl com">   Updated for chameneos-redux by Spencer Janssen, 27 Nov 2007</span>
<span class="hl com">   Modified by Péter Diviánszky, 19 May 2010</span>
<span class="hl com">   Modified by Louis Wasserman, 14 June 2010</span>
<span class="hl com"></span>
<span class="hl com">   Should be compiled with -O2 -threaded -fvia-c -optc-O3 and run with +RTS -N&lt;number of cores&gt;.</span>
<span class="hl com">   -}</span>

<span class="hl kwd">import</span> Control<span class="hl opt">.</span>Concurrent
<span class="hl kwd">import</span> Control<span class="hl opt">.</span>Monad
<span class="hl kwd">import</span> Data<span class="hl opt">.</span><span class="hl kwb">Char</span>
<span class="hl kwd">import</span> Data<span class="hl opt">.</span>IORef
<span class="hl kwd">import</span> System<span class="hl opt">.</span>Environment
<span class="hl kwd">import</span> System<span class="hl opt">.</span><span class="hl kwb">IO</span>
<span class="hl kwd">import</span> GHC<span class="hl opt">.</span>Conc
<span class="hl kwd">import</span> Foreign <span class="hl kwd">hiding</span> <span class="hl opt">(</span>complement<span class="hl opt">)</span>

<span class="hl kwd">newtype</span> Color <span class="hl opt">=</span> C <span class="hl kwb">Int</span> <span class="hl kwd">deriving</span> <span class="hl opt">(</span>Storable<span class="hl opt">,</span>Enum<span class="hl opt">)</span>

<span class="hl opt">#</span>define Y <span class="hl opt">(</span>C <span class="hl num">2</span><span class="hl opt">)</span>
<span class="hl opt">#</span>define R <span class="hl opt">(</span>C <span class="hl num">1</span><span class="hl opt">)</span>
<span class="hl opt">#</span>define B <span class="hl opt">(</span>C <span class="hl num">0</span><span class="hl opt">)</span>

<span class="hl kwd">instance</span> <span class="hl kwb">Show</span> Color <span class="hl kwd">where</span>
	<span class="hl kwc">show</span> Y <span class="hl opt">=</span> <span class="hl str">&quot;yellow&quot;</span>
	<span class="hl kwc">show</span> R <span class="hl opt">=</span> <span class="hl str">&quot;red&quot;</span>
	<span class="hl kwc">show</span> B <span class="hl opt">=</span> <span class="hl str">&quot;blue&quot;</span>

complement <span class="hl opt">::</span> Color <span class="hl opt">-&gt;</span> Color <span class="hl opt">-&gt;</span> Color
complement <span class="hl opt">!</span>a <span class="hl opt">!</span>b <span class="hl opt">=</span> <span class="hl kwd">case</span> a <span class="hl kwd">of</span>
    B <span class="hl opt">-&gt;</span> <span class="hl kwd">case</span> b <span class="hl kwd">of</span> R <span class="hl opt">-&gt;</span> Y<span class="hl opt">;</span> B <span class="hl opt">-&gt;</span> B<span class="hl opt">;</span> _ <span class="hl opt">-&gt;</span> R
    R <span class="hl opt">-&gt;</span> <span class="hl kwd">case</span> b <span class="hl kwd">of</span> B <span class="hl opt">-&gt;</span> Y<span class="hl opt">;</span> R <span class="hl opt">-&gt;</span> R<span class="hl opt">;</span> _ <span class="hl opt">-&gt;</span> B
    Y <span class="hl opt">-&gt;</span> <span class="hl kwd">case</span> b <span class="hl kwd">of</span> B <span class="hl opt">-&gt;</span> R<span class="hl opt">;</span> Y <span class="hl opt">-&gt;</span> Y<span class="hl opt">;</span> _ <span class="hl opt">-&gt;</span> B

<span class="hl kwd">type</span> Chameneous <span class="hl opt">=</span> Ptr Color
<span class="hl kwd">data</span> MP <span class="hl opt">=</span> Nobody <span class="hl opt">!</span><span class="hl kwb">Int</span> | Somebody <span class="hl opt">!</span><span class="hl kwb">Int</span> <span class="hl opt">!</span>Chameneous <span class="hl opt">!(</span>MVar Chameneous<span class="hl opt">)</span>

arrive <span class="hl opt">::</span> MVar MP <span class="hl opt">-&gt;</span> MVar <span class="hl opt">(</span><span class="hl kwb">Int</span><span class="hl opt">,</span> <span class="hl kwb">Int</span><span class="hl opt">) -&gt;</span> Chameneous <span class="hl opt">-&gt;</span> <span class="hl kwb">IO</span> <span class="hl opt">()</span>
arrive <span class="hl opt">!</span>mpv <span class="hl opt">!</span>finish <span class="hl opt">!</span>ch <span class="hl opt">=</span> <span class="hl kwd">do</span>
    waker <span class="hl opt">&lt;-</span> newEmptyMVar
    <span class="hl kwd">let</span> inc x <span class="hl opt">= (</span><span class="hl kwc">fromEnum</span> <span class="hl opt">(</span>ch <span class="hl opt">==</span> x<span class="hl opt">) +)</span>
        go <span class="hl opt">!</span>t <span class="hl opt">!</span>b <span class="hl opt">=</span> <span class="hl kwd">do</span>
            w <span class="hl opt">&lt;-</span> takeMVar mpv
            <span class="hl kwd">case</span> w <span class="hl kwd">of</span>
                Nobody <span class="hl num">0</span>
                 <span class="hl opt">-&gt;</span> <span class="hl kwd">do</span>
                    putMVar mpv w
                    putMVar finish <span class="hl opt">(</span>t<span class="hl opt">,</span> b<span class="hl opt">)</span>
  		Nobody q <span class="hl opt">-&gt;</span> <span class="hl kwd">do</span>
                    putMVar mpv <span class="hl opt">$</span> Somebody q ch waker
                    ch<span class="hl opt">' &lt;-</span> takeMVar waker
                    go <span class="hl opt">(</span>t<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">) $</span> inc ch<span class="hl opt">'</span> b

                Somebody q ch<span class="hl opt">'</span> waker<span class="hl opt">' -&gt;</span> <span class="hl kwd">do</span>
                    c  <span class="hl opt">&lt;-</span> peek ch
                    c<span class="hl opt">' &lt;-</span> peek ch<span class="hl opt">'</span>
                    <span class="hl kwd">let</span> <span class="hl opt">!</span>c<span class="hl opt">'' =</span> complement c c<span class="hl opt">'</span>
                    poke ch  c<span class="hl opt">''</span>
                    poke ch<span class="hl opt">'</span> c<span class="hl opt">''</span>
                    putMVar waker<span class="hl opt">'</span> ch
                    <span class="hl kwd">let</span> <span class="hl opt">!</span>q<span class="hl opt">' =</span> q<span class="hl opt">-</span><span class="hl num">1</span>
                    putMVar mpv <span class="hl opt">$</span> Nobody q<span class="hl opt">'</span>
                    go <span class="hl opt">(</span>t<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">) $</span> inc ch<span class="hl opt">'</span> b
    go <span class="hl num">0 0</span>

showN <span class="hl opt">=</span> <span class="hl kwc">unwords</span> <span class="hl opt">.</span> <span class="hl kwc">map</span> <span class="hl opt">((</span>digits <span class="hl opt">!!) .</span> <span class="hl kwc">digitToInt</span><span class="hl opt">) .</span> <span class="hl kwc">show</span>

digits <span class="hl opt">=</span> <span class="hl kwc">words</span> <span class="hl str">&quot;zero one two three four five six seven eight nine&quot;</span>

run <span class="hl opt">::</span> <span class="hl kwb">Int</span> <span class="hl opt">-&gt;</span> <span class="hl kwb">Int</span> <span class="hl opt">-&gt; [</span>Color<span class="hl opt">] -&gt;</span> <span class="hl kwb">IO</span> <span class="hl opt">(</span><span class="hl kwb">IO</span> <span class="hl opt">())</span>
run n cpu cs <span class="hl opt">=</span> <span class="hl kwd">do</span>
    fs    <span class="hl opt">&lt;-</span> replicateM <span class="hl opt">(</span><span class="hl kwa">length</span> cs<span class="hl opt">)</span> newEmptyMVar
    mpv   <span class="hl opt">&lt;-</span> newMVar <span class="hl opt">(</span>Nobody n<span class="hl opt">)</span>
    withArrayLen cs <span class="hl opt">$ \</span> n cols <span class="hl opt">-&gt;</span> <span class="hl kwd">do</span>
    	<span class="hl kwc">zipWithM_</span> <span class="hl opt">((</span>forkOn cpu <span class="hl opt">.) .</span> arrive mpv<span class="hl opt">)</span> fs <span class="hl opt">(</span><span class="hl kwc">take</span> n <span class="hl opt">(</span><span class="hl kwc">iterate</span> <span class="hl opt">(</span>`advancePtr` <span class="hl num">1</span><span class="hl opt">)</span> cols<span class="hl opt">))</span>

    	<span class="hl kwc">return</span> <span class="hl opt">$</span> <span class="hl kwd">do</span>
	  <span class="hl kwc">putStrLn</span> <span class="hl opt">.</span> <span class="hl kwc">map toLower</span> <span class="hl opt">.</span> <span class="hl kwc">unwords</span> <span class="hl opt">. ([]:) .</span> <span class="hl kwc">map show</span> <span class="hl opt">$</span> cs
	  ns    <span class="hl opt">&lt;-</span> <span class="hl kwc">mapM</span> takeMVar fs
	  <span class="hl kwc">putStr</span> <span class="hl opt">.</span> <span class="hl kwc">map toLower</span> <span class="hl opt">.</span> <span class="hl kwc">unlines</span> <span class="hl opt">$ [</span><span class="hl kwc">unwords</span> <span class="hl opt">[</span><span class="hl kwc">show</span> n<span class="hl opt">,</span> showN b<span class="hl opt">]</span> | <span class="hl opt">(</span>n<span class="hl opt">,</span> b<span class="hl opt">) &lt;-</span> ns<span class="hl opt">]</span>
	  <span class="hl kwc">putStrLn</span> <span class="hl opt">. (</span><span class="hl str">&quot; &quot;</span><span class="hl opt">++) .</span> showN <span class="hl opt">.</span> <span class="hl kwa">sum</span> <span class="hl opt">.</span> <span class="hl kwc">map fst</span> <span class="hl opt">$</span> ns
	  <span class="hl kwc">putStrLn</span> <span class="hl str">&quot;&quot;</span>

main <span class="hl opt">=</span> <span class="hl kwd">do</span>
    <span class="hl kwc">putStrLn</span> <span class="hl opt">.</span> <span class="hl kwc">map toLower</span> <span class="hl opt">.</span> <span class="hl kwc">unlines</span> <span class="hl opt">$</span>
        <span class="hl opt">[</span><span class="hl kwc">unwords</span> <span class="hl opt">[</span><span class="hl kwc">show</span> a<span class="hl opt">,</span> <span class="hl str">&quot;+&quot;</span><span class="hl opt">,</span> <span class="hl kwc">show</span> b<span class="hl opt">,</span> <span class="hl str">&quot;-&gt;&quot;</span><span class="hl opt">,</span> <span class="hl kwc">show</span> <span class="hl opt">$</span> complement a b<span class="hl opt">]</span>
            | a <span class="hl opt">&lt;- [</span>B<span class="hl opt">..</span>Y<span class="hl opt">],</span> b <span class="hl opt">&lt;- [</span>B<span class="hl opt">..</span>Y<span class="hl opt">]]</span>

    n <span class="hl opt">&lt;-</span> <span class="hl kwc">readIO</span> <span class="hl opt">.</span> <span class="hl kwc">head</span> <span class="hl opt">=&lt;&lt;</span> <span class="hl kwc">getArgs</span>
    actions <span class="hl opt">&lt;-</span> <span class="hl kwc">zipWithM</span> <span class="hl opt">(</span>run n<span class="hl opt">) [</span><span class="hl num">0</span><span class="hl opt">..] [[</span>B<span class="hl opt">..</span>Y<span class="hl opt">],[</span>B<span class="hl opt">,</span>R<span class="hl opt">,</span>Y<span class="hl opt">,</span>R<span class="hl opt">,</span>Y<span class="hl opt">,</span>B<span class="hl opt">,</span>R<span class="hl opt">,</span>Y<span class="hl opt">,</span>R<span class="hl opt">,</span>B<span class="hl opt">]]</span>
    <span class="hl kwc">sequence_</span> actions
