<span class="hl slc">! -*- mode: f90 -*-</span>
<span class="hl slc">!</span>
<span class="hl slc">! $Id: binarytrees.1.ifc.code,v 1.3 2013/01/15 15:34:25 igouy-guest Exp $ ; $Name:  $</span>
<span class="hl slc">!</span>
<span class="hl slc">! The Computer Language Shootout Benchmarks</span>
<span class="hl slc">! http://benchmarksgame.alioth.debian.org/</span>

<span class="hl slc">! contributed by Steve Decker</span>
<span class="hl slc">! based on the C version by Kevin Carson</span>
<span class="hl slc">! compilation:</span>
<span class="hl slc">!    gfortran -O3 -fomit-frame-pointer -funroll-loops binarytrees.f90</span>
<span class="hl slc">!</span>
<span class="hl slc">! This implementation does not need TR15581</span>
<span class="hl slc">!</span>
<span class="hl kwa">module</span> b_tree
  <span class="hl kwa">implicit none</span>
  <span class="hl kwa">save</span>

  <span class="hl kwa">integer</span><span class="hl opt">,</span> <span class="hl kwa">parameter</span> <span class="hl opt">::</span> short <span class="hl opt">=</span> <span class="hl kwd">selected_int_kind</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">)</span>

  <span class="hl kwa">type</span> treeNode
     <span class="hl kwa">integer</span> <span class="hl opt">::</span> item
     <span class="hl kwa">type</span><span class="hl opt">(</span>treeNode<span class="hl opt">),</span> <span class="hl kwa">pointer</span> <span class="hl opt">::</span> left
     <span class="hl kwa">type</span><span class="hl opt">(</span>treeNode<span class="hl opt">),</span> <span class="hl kwa">pointer</span> <span class="hl opt">::</span> right
  <span class="hl kwa">end type</span> treeNode

<span class="hl kwa">contains</span>

  <span class="hl kwa">subroutine</span> <span class="hl kwd">NewTreeNode</span><span class="hl opt">(</span>left<span class="hl opt">,</span> right<span class="hl opt">,</span> item<span class="hl opt">,</span> node<span class="hl opt">)</span>
    <span class="hl kwa">type</span><span class="hl opt">(</span>treeNode<span class="hl opt">),</span> target<span class="hl opt">,</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>in<span class="hl opt">) ::</span> left<span class="hl opt">,</span> right
    <span class="hl kwa">integer</span><span class="hl opt">,</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>in<span class="hl opt">) ::</span> item
    <span class="hl kwa">type</span><span class="hl opt">(</span>treeNode<span class="hl opt">),</span> <span class="hl kwa">pointer</span> <span class="hl opt">::</span> node

    <span class="hl kwd">allocate</span><span class="hl opt">(</span>node<span class="hl opt">)</span>
    node <span class="hl opt">=</span> <span class="hl kwd">treeNode</span><span class="hl opt">(</span>item<span class="hl opt">,</span> left<span class="hl opt">,</span> right<span class="hl opt">)</span>
  <span class="hl kwa">end subroutine</span> NewTreeNode

  <span class="hl kwa">recursive function</span> <span class="hl kwd">ItemCheck</span><span class="hl opt">(</span>tree<span class="hl opt">)</span> <span class="hl kwd">result</span> <span class="hl opt">(</span>check<span class="hl opt">)</span>
    <span class="hl kwa">type</span><span class="hl opt">(</span>treeNode<span class="hl opt">),</span> <span class="hl kwa">pointer</span> <span class="hl opt">::</span> tree
    <span class="hl kwa">integer</span> <span class="hl opt">::</span> check

    <span class="hl kwa">if</span> <span class="hl opt">(.</span>not<span class="hl opt">.</span> <span class="hl kwd">associated</span><span class="hl opt">(</span>tree<span class="hl opt">%</span>left<span class="hl opt">))</span> <span class="hl kwa">then</span>
       check <span class="hl opt">=</span> tree<span class="hl opt">%</span>item
    <span class="hl kwa">else</span>
       check <span class="hl opt">=</span> tree<span class="hl opt">%</span>item <span class="hl opt">+</span> <span class="hl kwd">ItemCheck</span><span class="hl opt">(</span>tree<span class="hl opt">%</span>left<span class="hl opt">) -</span> <span class="hl kwd">ItemCheck</span><span class="hl opt">(</span>tree<span class="hl opt">%</span>right<span class="hl opt">)</span>
    <span class="hl kwa">end if</span>
    <span class="hl kwd">deallocate</span><span class="hl opt">(</span>tree<span class="hl opt">)</span>
  <span class="hl kwa">end function</span> ItemCheck

  <span class="hl kwa">recursive subroutine</span> <span class="hl kwd">BottomUpTree</span><span class="hl opt">(</span>item<span class="hl opt">,</span> depth<span class="hl opt">,</span> node<span class="hl opt">)</span>
    <span class="hl kwa">integer</span><span class="hl opt">,</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>in<span class="hl opt">) ::</span> item
    <span class="hl kwa">integer</span><span class="hl opt">(</span>kind<span class="hl opt">=</span>short<span class="hl opt">),</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>in<span class="hl opt">) ::</span> depth
    <span class="hl kwa">type</span><span class="hl opt">(</span>treeNode<span class="hl opt">),</span> <span class="hl kwa">pointer</span> <span class="hl opt">::</span> node

    <span class="hl kwa">type</span><span class="hl opt">(</span>treeNode<span class="hl opt">),</span> <span class="hl kwa">pointer</span> <span class="hl opt">::</span> left<span class="hl opt">,</span> right

    <span class="hl kwd">nullify</span><span class="hl opt">(</span>left<span class="hl opt">,</span> right<span class="hl opt">)</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span>depth <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">then</span>
       <span class="hl kwa">call</span> <span class="hl kwd">BottomUpTree</span><span class="hl opt">(</span><span class="hl num">2</span> <span class="hl opt">*</span> item <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">,</span> depth <span class="hl opt">-</span> <span class="hl num">1</span>_short<span class="hl opt">,</span> left<span class="hl opt">)</span>
       <span class="hl kwa">call</span> <span class="hl kwd">BottomUpTree</span><span class="hl opt">(</span><span class="hl num">2</span> <span class="hl opt">*</span> item<span class="hl opt">,</span> depth <span class="hl opt">-</span> <span class="hl num">1</span>_short<span class="hl opt">,</span> right<span class="hl opt">)</span>
    <span class="hl kwa">end if</span>
    <span class="hl kwa">call</span> <span class="hl kwd">NewTreeNode</span><span class="hl opt">(</span>left<span class="hl opt">,</span> right<span class="hl opt">,</span> item<span class="hl opt">,</span> node<span class="hl opt">)</span>
  <span class="hl kwa">end subroutine</span> BottomUpTree
<span class="hl kwa">end module</span> b_tree

<span class="hl kwa">program</span> binarytrees
  <span class="hl kwa">use</span> b_tree
  <span class="hl kwa">implicit none</span>

  <span class="hl kwa">integer</span><span class="hl opt">(</span>kind<span class="hl opt">=</span>short<span class="hl opt">),</span> <span class="hl kwa">parameter</span> <span class="hl opt">::</span> minDepth <span class="hl opt">=</span> <span class="hl num">4</span>_short
  <span class="hl kwa">character</span><span class="hl opt">,</span>           <span class="hl kwa">parameter</span> <span class="hl opt">::</span> tab <span class="hl opt">=</span> <span class="hl kwd">achar</span><span class="hl opt">(</span><span class="hl num">9</span><span class="hl opt">)</span>

  <span class="hl kwa">integer</span> <span class="hl opt">::</span> i<span class="hl opt">,</span> iterations<span class="hl opt">,</span> check
  <span class="hl kwa">integer</span><span class="hl opt">(</span>kind<span class="hl opt">=</span>short<span class="hl opt">) ::</span> N<span class="hl opt">,</span> depth<span class="hl opt">,</span> maxDepth<span class="hl opt">,</span> stretchDepth
  <span class="hl kwa">character</span><span class="hl opt">(</span>len<span class="hl opt">=</span><span class="hl num">2</span><span class="hl opt">) ::</span> argv
  <span class="hl kwa">type</span><span class="hl opt">(</span>treeNode<span class="hl opt">),</span> <span class="hl kwa">pointer</span> <span class="hl opt">::</span> stretchTree <span class="hl opt">=&gt;</span> <span class="hl kwd">null</span><span class="hl opt">(),</span> longLivedTree <span class="hl opt">=&gt;</span> <span class="hl kwd">null</span><span class="hl opt">(),  &amp;</span>
                             tempTree <span class="hl opt">=&gt;</span> <span class="hl kwd">null</span><span class="hl opt">()</span>

  <span class="hl kwa">call</span> <span class="hl kwd">get_command_argument</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">,</span> argv<span class="hl opt">)</span>
  <span class="hl kwa">read</span> <span class="hl opt">(</span>argv<span class="hl opt">,</span> <span class="hl str">&quot;(i2)&quot;</span><span class="hl opt">)</span> N

  maxDepth <span class="hl opt">=</span> <span class="hl kwd">max</span><span class="hl opt">(</span>minDepth <span class="hl opt">+</span> <span class="hl num">2</span>_short<span class="hl opt">,</span> N<span class="hl opt">)</span>

  stretchDepth <span class="hl opt">=</span> maxDepth <span class="hl opt">+</span> <span class="hl num">1</span>_short
  <span class="hl kwa">call</span> <span class="hl kwd">BottomUpTree</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> stretchDepth<span class="hl opt">,</span> stretchTree<span class="hl opt">)</span>
  <span class="hl kwa">write</span><span class="hl opt">(*,</span><span class="hl str">&quot;(2(a,i0))&quot;</span><span class="hl opt">)</span> <span class="hl str">&quot;stretch tree of depth &quot;</span><span class="hl opt">,</span> stretchDepth<span class="hl opt">,  &amp;</span>
       tab<span class="hl opt">//</span><span class="hl str">&quot; check: &quot;</span><span class="hl opt">,</span> <span class="hl kwd">ItemCheck</span><span class="hl opt">(</span>stretchTree<span class="hl opt">)</span>

  <span class="hl kwa">call</span> <span class="hl kwd">BottomUpTree</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> maxDepth<span class="hl opt">,</span> longLivedTree<span class="hl opt">)</span>
  
  <span class="hl kwa">do</span> depth <span class="hl opt">=</span> minDepth<span class="hl opt">,</span> maxDepth<span class="hl opt">,</span> <span class="hl num">2</span>
     iterations <span class="hl opt">=</span> <span class="hl num">2</span><span class="hl opt">**(</span>maxDepth <span class="hl opt">-</span> depth <span class="hl opt">+</span> minDepth<span class="hl opt">)</span>
     check <span class="hl opt">=</span> <span class="hl num">0</span>
     <span class="hl kwa">do</span> i <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">,</span> iterations
        <span class="hl kwa">call</span> <span class="hl kwd">BottomUpTree</span><span class="hl opt">(</span>i<span class="hl opt">,</span> depth<span class="hl opt">,</span> tempTree<span class="hl opt">)</span>
        check <span class="hl opt">=</span> check <span class="hl opt">+</span> <span class="hl kwd">ItemCheck</span><span class="hl opt">(</span>tempTree<span class="hl opt">)</span>
        
        <span class="hl kwa">call</span> <span class="hl kwd">BottomUpTree</span><span class="hl opt">(-</span>i<span class="hl opt">,</span> depth<span class="hl opt">,</span> tempTree<span class="hl opt">)</span>
        check <span class="hl opt">=</span> check <span class="hl opt">+</span> <span class="hl kwd">ItemCheck</span><span class="hl opt">(</span>tempTree<span class="hl opt">)</span>
     <span class="hl kwa">end do</span>
     <span class="hl kwa">write</span><span class="hl opt">(*,</span><span class="hl str">&quot;(2(i0,a),i0)&quot;</span><span class="hl opt">)</span> iterations<span class="hl opt">*</span><span class="hl num">2</span><span class="hl opt">,</span> tab<span class="hl opt">//</span><span class="hl str">&quot; trees of depth &quot;</span><span class="hl opt">,</span> depth<span class="hl opt">,  &amp;</span>
          tab<span class="hl opt">//</span><span class="hl str">&quot; check: &quot;</span><span class="hl opt">,</span> check
  <span class="hl kwa">end do</span>

  <span class="hl kwa">write</span><span class="hl opt">(*,</span><span class="hl str">&quot;(2(a,i0))&quot;</span><span class="hl opt">)</span> <span class="hl str">&quot;long lived tree of depth &quot;</span><span class="hl opt">,</span> maxDepth<span class="hl opt">,  &amp;</span>
       tab<span class="hl opt">//</span><span class="hl str">&quot; check: &quot;</span><span class="hl opt">,</span> <span class="hl kwd">ItemCheck</span><span class="hl opt">(</span>longLivedTree<span class="hl opt">)</span>
<span class="hl kwa">end program</span> binarytrees
