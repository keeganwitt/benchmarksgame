<span class="hl opt">#</span>lang racket<span class="hl opt">/</span>base

<span class="hl slc">;;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;;; http://benchmarksgame.alioth.debian.org/</span>

<span class="hl slc">;;; Based on a version by by Anthony Borla</span>
<span class="hl slc">;;; contributed by Matthew Flatt</span>


<span class="hl opt">(</span><span class="hl kwa">require</span> racket<span class="hl opt">/</span>port<span class="hl opt">)</span>

<span class="hl slc">;; -------------------------------</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> VARIANTS
  <span class="hl opt">'(#</span><span class="hl str">&quot;agggtaaa|tttaccct&quot;</span> <span class="hl opt">#</span><span class="hl str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span> <span class="hl opt">#</span><span class="hl str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span>
    <span class="hl opt">#</span><span class="hl str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span> <span class="hl opt">#</span><span class="hl str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span> <span class="hl opt">#</span><span class="hl str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span>
    <span class="hl opt">#</span><span class="hl str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span> <span class="hl opt">#</span><span class="hl str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span> <span class="hl opt">#</span><span class="hl str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span><span class="hl opt">))</span>


<span class="hl opt">(</span><span class="hl kwa">define</span> IUBS
  <span class="hl opt">'((#</span><span class="hl str">&quot;B&quot;</span> <span class="hl opt">#</span><span class="hl str">&quot;(c|g|t)&quot;</span><span class="hl opt">) (#</span><span class="hl str">&quot;D&quot;</span> <span class="hl opt">#</span><span class="hl str">&quot;(a|g|t)&quot;</span><span class="hl opt">) (#</span><span class="hl str">&quot;H&quot;</span> <span class="hl opt">#</span><span class="hl str">&quot;(a|c|t)&quot;</span><span class="hl opt">)</span>
    <span class="hl opt">(#</span><span class="hl str">&quot;K&quot;</span> <span class="hl opt">#</span><span class="hl str">&quot;(g|t)&quot;</span><span class="hl opt">) (#</span><span class="hl str">&quot;M&quot;</span> <span class="hl opt">#</span><span class="hl str">&quot;(a|c)&quot;</span><span class="hl opt">) (#</span><span class="hl str">&quot;N&quot;</span> <span class="hl opt">#</span><span class="hl str">&quot;(a|c|g|t)&quot;</span><span class="hl opt">)</span>
    <span class="hl opt">(#</span><span class="hl str">&quot;R&quot;</span> <span class="hl opt">#</span><span class="hl str">&quot;(a|g)&quot;</span><span class="hl opt">) (#</span><span class="hl str">&quot;S&quot;</span> <span class="hl opt">#</span><span class="hl str">&quot;(c|g)&quot;</span><span class="hl opt">) (#</span><span class="hl str">&quot;V&quot;</span> <span class="hl opt">#</span><span class="hl str">&quot;(a|c|g)&quot;</span><span class="hl opt">)</span>
    <span class="hl opt">(#</span><span class="hl str">&quot;W&quot;</span> <span class="hl opt">#</span><span class="hl str">&quot;(a|t)&quot;</span><span class="hl opt">) (#</span><span class="hl str">&quot;Y&quot;</span> <span class="hl opt">#</span><span class="hl str">&quot;(c|t)&quot;</span><span class="hl opt">)))</span>

<span class="hl slc">;; -------------------------------</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">ci-byte-regexp</span> s<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">byte-regexp</span> <span class="hl opt">(</span><span class="hl kwa">bytes-append</span> <span class="hl opt">#</span><span class="hl str">&quot;(?i:&quot;</span> s <span class="hl opt">#</span><span class="hl str">&quot;)&quot;</span><span class="hl opt">)))</span>

<span class="hl slc">;; -------------------------------</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">match-count</span> str rx offset cnt<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">([</span>m <span class="hl opt">(</span><span class="hl kwa">regexp-match-positions</span> rx str offset<span class="hl opt">)])</span>
    <span class="hl opt">(</span><span class="hl kwa">if</span> m
        <span class="hl opt">(</span><span class="hl kwa">match-count</span> str rx <span class="hl opt">(</span><span class="hl kwa">cdar</span> m<span class="hl opt">) (</span><span class="hl kwa">add1</span> cnt<span class="hl opt">))</span>
        cnt<span class="hl opt">)))</span>

<span class="hl slc">;; -------------------------------</span>

<span class="hl slc">;; Load sequence and record its length</span>
<span class="hl opt">(</span><span class="hl kwa">let</span><span class="hl opt">* ([</span>orig <span class="hl opt">(</span><span class="hl kwa">port-</span><span class="hl opt">&gt;</span>bytes<span class="hl opt">)]</span>
       <span class="hl opt">[</span>filtered <span class="hl opt">(</span><span class="hl kwa">regexp-replace</span><span class="hl opt">* #</span>rx<span class="hl opt">#</span><span class="hl str">&quot;(?:&gt;.*?</span><span class="hl esc">\n</span><span class="hl str">)|</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> orig <span class="hl opt">#</span><span class="hl str">&quot;&quot;</span><span class="hl opt">)])</span>

  <span class="hl slc">;; Perform regexp counts</span>
  <span class="hl opt">(</span><span class="hl kwa">for</span> <span class="hl opt">([</span>i <span class="hl opt">(</span><span class="hl kwa">in-list</span> VARIANTS<span class="hl opt">)])</span>
    <span class="hl opt">(</span><span class="hl kwa">printf</span> <span class="hl str">&quot;~a ~a</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> i <span class="hl opt">(</span><span class="hl kwa">match-count</span> filtered <span class="hl opt">(</span><span class="hl kwa">ci-byte-regexp</span> i<span class="hl opt">)</span> <span class="hl num">0 0</span><span class="hl opt">)))</span>

  <span class="hl slc">;; Perform regexp replacements, and record sequence length</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">([</span>replaced
         <span class="hl opt">(</span><span class="hl kwa">for</span><span class="hl opt">/</span>fold <span class="hl opt">([</span>sequence filtered<span class="hl opt">]) ([</span>IUB IUBS<span class="hl opt">])</span>
           <span class="hl opt">(</span><span class="hl kwa">regexp-replace</span><span class="hl opt">* (</span><span class="hl kwa">byte-regexp</span> <span class="hl opt">(</span><span class="hl kwa">car</span> IUB<span class="hl opt">))</span> sequence <span class="hl opt">(</span><span class="hl kwa">cadr</span> IUB<span class="hl opt">)))])</span>
    <span class="hl slc">;; Print statistics</span>
    <span class="hl opt">(</span><span class="hl kwa">printf</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">~a</span><span class="hl esc">\n</span><span class="hl str">~a</span><span class="hl esc">\n</span><span class="hl str">~a</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> 
            <span class="hl opt">(</span><span class="hl kwa">bytes-length</span> orig<span class="hl opt">)</span>
            <span class="hl opt">(</span><span class="hl kwa">bytes-length</span> filtered<span class="hl opt">)</span>
            <span class="hl opt">(</span><span class="hl kwa">bytes-length</span> replaced<span class="hl opt">))))</span>
