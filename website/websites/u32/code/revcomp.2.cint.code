<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com">*/</span>

<span class="hl dir">#include &lt;stdio.h&gt;</span>
<span class="hl dir">#include &lt;string.h&gt;</span>
<span class="hl dir">#include &lt;limits.h&gt;</span>

<span class="hl kwb">static unsigned char</span> iubpairs<span class="hl sym">[][</span><span class="hl num">2</span><span class="hl sym">] = {</span>
    <span class="hl sym">{</span>    <span class="hl str">'A'</span><span class="hl sym">,</span>    <span class="hl str">'T'</span>    <span class="hl sym">},</span>
    <span class="hl sym">{</span>    <span class="hl str">'C'</span><span class="hl sym">,</span>    <span class="hl str">'G'</span>    <span class="hl sym">},</span>
    <span class="hl sym">{</span>    <span class="hl str">'B'</span><span class="hl sym">,</span>    <span class="hl str">'V'</span>    <span class="hl sym">},</span>
    <span class="hl sym">{</span>    <span class="hl str">'D'</span><span class="hl sym">,</span>    <span class="hl str">'H'</span>    <span class="hl sym">},</span>
    <span class="hl sym">{</span>    <span class="hl str">'K'</span><span class="hl sym">,</span>    <span class="hl str">'M'</span>    <span class="hl sym">},</span>
    <span class="hl sym">{</span>    <span class="hl str">'R'</span><span class="hl sym">,</span>    <span class="hl str">'Y'</span>    <span class="hl sym">},</span>
    <span class="hl sym">{</span>    <span class="hl str">'\0'</span><span class="hl sym">,</span>   <span class="hl str">'\0'</span>   <span class="hl sym">}</span>
<span class="hl sym">};</span>

<span class="hl kwb">static unsigned char</span> iubComplement<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">+</span>UCHAR_MAX<span class="hl sym">];</span>

<span class="hl kwb">static void</span> <span class="hl kwd">buildIubComplement</span> <span class="hl sym">(</span><span class="hl kwb">void</span><span class="hl sym">) {</span>
    <span class="hl kwb">int</span> i<span class="hl sym">;</span>
    <span class="hl kwa">for</span> <span class="hl sym">(</span>i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;=</span> UCHAR_MAX<span class="hl sym">;</span> i<span class="hl sym">++)</span> iubComplement<span class="hl sym">[</span>i<span class="hl sym">] = (</span><span class="hl kwb">unsigned char</span><span class="hl sym">)</span> i<span class="hl sym">;</span>
    <span class="hl kwa">for</span> <span class="hl sym">(</span>i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> iubpairs<span class="hl sym">[</span>i<span class="hl sym">][</span><span class="hl num">0</span><span class="hl sym">] !=</span> <span class="hl str">'\0'</span><span class="hl sym">;</span> i<span class="hl sym">++) {</span>
    	iubComplement<span class="hl sym">[</span>iubpairs<span class="hl sym">[</span>i<span class="hl sym">][</span><span class="hl num">0</span><span class="hl sym">]] =</span> iubpairs<span class="hl sym">[</span>i<span class="hl sym">][</span><span class="hl num">1</span><span class="hl sym">];</span>
    	iubComplement<span class="hl sym">[</span>iubpairs<span class="hl sym">[</span>i<span class="hl sym">][</span><span class="hl num">1</span><span class="hl sym">]] =</span> iubpairs<span class="hl sym">[</span>i<span class="hl sym">][</span><span class="hl num">0</span><span class="hl sym">];</span>
    	iubComplement<span class="hl sym">[</span><span class="hl kwd">tolower</span> <span class="hl sym">(</span>iubpairs<span class="hl sym">[</span>i<span class="hl sym">][</span><span class="hl num">0</span><span class="hl sym">])] =</span> iubpairs<span class="hl sym">[</span>i<span class="hl sym">][</span><span class="hl num">1</span><span class="hl sym">];</span>
    	iubComplement<span class="hl sym">[</span><span class="hl kwd">tolower</span> <span class="hl sym">(</span>iubpairs<span class="hl sym">[</span>i<span class="hl sym">][</span><span class="hl num">1</span><span class="hl sym">])] =</span> iubpairs<span class="hl sym">[</span>i<span class="hl sym">][</span><span class="hl num">0</span><span class="hl sym">];</span>
    <span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl kwb">static void</span> <span class="hl kwd">inPlaceReverse</span> <span class="hl sym">(</span><span class="hl kwb">unsigned char</span> <span class="hl sym">*</span> strand<span class="hl sym">,</span> <span class="hl kwb">int</span> len<span class="hl sym">) {</span>
    <span class="hl kwb">int</span> i<span class="hl sym">;</span>
    <span class="hl kwa">for</span> <span class="hl sym">(</span>i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">,</span> len<span class="hl sym">--;</span> i <span class="hl sym">&lt;</span> len<span class="hl sym">;</span> i<span class="hl sym">++,</span>len<span class="hl sym">--) {</span>
    	<span class="hl kwb">unsigned char</span> c <span class="hl sym">=</span> strand<span class="hl sym">[</span>i<span class="hl sym">];</span>
    	strand<span class="hl sym">[</span>i<span class="hl sym">] =</span> iubComplement<span class="hl sym">[</span>strand<span class="hl sym">[</span>len<span class="hl sym">]];</span>
    	strand<span class="hl sym">[</span>len<span class="hl sym">] =</span> iubComplement<span class="hl sym">[</span>c<span class="hl sym">];</span>
    <span class="hl sym">}</span>
    <span class="hl kwa">if</span> <span class="hl sym">(</span>i <span class="hl sym">==</span> len<span class="hl sym">)</span> strand<span class="hl sym">[</span>i<span class="hl sym">] =</span> iubComplement<span class="hl sym">[</span>strand<span class="hl sym">[</span>i<span class="hl sym">]];</span>
<span class="hl sym">}</span>

<span class="hl kwb">static void</span> <span class="hl kwd">process</span> <span class="hl sym">(</span><span class="hl kwb">char</span> <span class="hl sym">*</span> strand<span class="hl sym">,</span> <span class="hl kwb">int</span> len<span class="hl sym">) {</span>
    <span class="hl kwb">char</span> <span class="hl sym">*</span> s<span class="hl sym">,</span> c<span class="hl sym">;</span>

    <span class="hl kwd">inPlaceReverse</span> <span class="hl sym">((</span><span class="hl kwb">unsigned char</span> <span class="hl sym">*)</span> strand<span class="hl sym">,</span> len<span class="hl sym">);</span>
    s <span class="hl sym">=</span> strand<span class="hl sym">;</span>

    <span class="hl kwa">while</span> <span class="hl sym">(</span>len <span class="hl sym">&gt;</span> <span class="hl num">60</span><span class="hl sym">) {</span>
    	c <span class="hl sym">=</span> s<span class="hl sym">[</span><span class="hl num">60</span><span class="hl sym">];</span>
    	s<span class="hl sym">[</span><span class="hl num">60</span><span class="hl sym">] =</span> <span class="hl str">'\0'</span><span class="hl sym">;</span>
    	<span class="hl kwd">puts</span> <span class="hl sym">(</span>s<span class="hl sym">);</span>
    	s<span class="hl sym">[</span><span class="hl num">60</span><span class="hl sym">] =</span> c<span class="hl sym">;</span>
    	s <span class="hl sym">+=</span> <span class="hl num">60</span><span class="hl sym">;</span>
    	len <span class="hl sym">-=</span> <span class="hl num">60</span><span class="hl sym">;</span>
    <span class="hl sym">}</span>

    s<span class="hl sym">[</span>len<span class="hl sym">] =</span> <span class="hl str">'\0'</span><span class="hl sym">;</span>
    <span class="hl kwd">puts</span> <span class="hl sym">(</span>s<span class="hl sym">);</span>
<span class="hl sym">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span> <span class="hl sym">(</span><span class="hl kwb">int</span> argc<span class="hl sym">,</span> <span class="hl kwb">char</span> <span class="hl sym">*</span> argv<span class="hl sym">[]) {</span>
    <span class="hl kwb">static char</span> buffer<span class="hl sym">[</span><span class="hl num">1024</span><span class="hl sym">];</span>
    <span class="hl kwb">char</span> <span class="hl sym">*</span> inp <span class="hl sym">= (</span><span class="hl kwb">char</span> <span class="hl sym">*)</span> <span class="hl kwd">malloc</span> <span class="hl sym">(</span><span class="hl num">129</span><span class="hl sym">);</span>
    <span class="hl kwb">int</span> mlen <span class="hl sym">=</span> <span class="hl num">128</span><span class="hl sym">;</span>
    <span class="hl kwb">int</span> slen <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>

    <span class="hl kwd">buildIubComplement</span> <span class="hl sym">();</span>

    <span class="hl kwa">while</span> <span class="hl sym">(</span>NULL <span class="hl sym">!=</span> <span class="hl kwd">fgets</span> <span class="hl sym">(</span>buffer<span class="hl sym">,</span> <span class="hl num">1023</span><span class="hl sym">,</span> stdin<span class="hl sym">)) {</span>
    	<span class="hl kwa">if</span> <span class="hl sym">(</span>buffer<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] ==</span> <span class="hl str">'&gt;'</span><span class="hl sym">) {</span>
    	    <span class="hl kwa">if</span> <span class="hl sym">(</span>slen <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">) {</span>
    	    	<span class="hl kwd">process</span> <span class="hl sym">(</span>inp<span class="hl sym">,</span> slen<span class="hl sym">);</span>
    	    	slen <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
    	    <span class="hl sym">}</span>
    	    <span class="hl kwd">printf</span> <span class="hl sym">(</span><span class="hl str">&quot;%s&quot;</span><span class="hl sym">,</span> buffer<span class="hl sym">);</span>
    	<span class="hl sym">}</span> <span class="hl kwa">else</span> <span class="hl sym">{</span>
    	    <span class="hl kwb">int</span> l <span class="hl sym">=</span> <span class="hl kwd">strlen</span> <span class="hl sym">(</span>buffer<span class="hl sym">);</span>
    	    <span class="hl kwa">while</span> <span class="hl sym">(</span>l <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl sym">&amp;&amp; !</span><span class="hl kwd">isalpha</span> <span class="hl sym">(</span>buffer<span class="hl sym">[</span>l<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">]))</span> l<span class="hl sym">--;</span>
    	    <span class="hl kwa">while</span> <span class="hl sym">(</span>slen <span class="hl sym">+</span> l <span class="hl sym">&gt;</span> mlen<span class="hl sym">) {</span>
    	    	mlen <span class="hl sym">+=</span> mlen<span class="hl sym">;</span>
    	    	inp <span class="hl sym">= (</span><span class="hl kwb">char</span> <span class="hl sym">*)</span> <span class="hl kwd">realloc</span> <span class="hl sym">(</span>inp<span class="hl sym">,</span> mlen <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">);</span>
    	    <span class="hl sym">}</span>

    	    <span class="hl kwd">memcpy</span> <span class="hl sym">(</span>inp <span class="hl sym">+</span> slen<span class="hl sym">,</span> buffer<span class="hl sym">,</span> l<span class="hl sym">);</span>
    	    slen <span class="hl sym">+=</span> l<span class="hl sym">;</span>
    	<span class="hl sym">}</span>
    <span class="hl sym">}</span>
    <span class="hl kwa">if</span> <span class="hl sym">(</span>slen <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwd">process</span> <span class="hl sym">(</span>inp<span class="hl sym">,</span> slen<span class="hl sym">);</span>
    <span class="hl kwd">free</span> <span class="hl sym">(</span>inp<span class="hl sym">);</span>
    <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span>
<span class="hl sym">}</span>

