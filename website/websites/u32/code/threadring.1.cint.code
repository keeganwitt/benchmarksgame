<span class="hl com">/*</span>
<span class="hl com">* The Computer Language Benchmarks Game</span>
<span class="hl com">* http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">* contributed by Premysl Hruby</span>
<span class="hl com">*/</span>

<span class="hl dir">#include &lt;stdio.h&gt;</span>
<span class="hl dir">#include &lt;stdlib.h&gt;</span>
<span class="hl dir">#include &lt;pthread.h&gt;</span>
<span class="hl dir">#include &lt;string.h&gt;</span>
<span class="hl dir">#include &lt;limits.h&gt;</span>

<span class="hl dir">#define THREADS (503)</span>


<span class="hl kwb">struct</span> stack <span class="hl sym">{</span>
   <span class="hl kwb">char</span> x<span class="hl sym">[</span>PTHREAD_STACK_MIN<span class="hl sym">];</span>
<span class="hl sym">};</span>


<span class="hl com">/* staticaly initialize mutex[0] mutex */</span>
<span class="hl kwb">static</span> pthread_mutex_t mutex<span class="hl sym">[</span>THREADS<span class="hl sym">];</span> 
<span class="hl kwb">static int</span> data<span class="hl sym">[</span>THREADS<span class="hl sym">];</span>
<span class="hl kwb">static struct</span> stack stacks<span class="hl sym">[</span>THREADS<span class="hl sym">];</span>
<span class="hl com">/* stacks must be defined staticaly, or my i386 box run of virtual memory for this</span>
<span class="hl com"> * process while creating thread +- #400 */</span>

<span class="hl kwb">static void</span><span class="hl sym">*</span> <span class="hl kwd">thread</span><span class="hl sym">(</span><span class="hl kwb">void</span> <span class="hl sym">*</span>num<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwb">int</span> l <span class="hl sym">= (</span><span class="hl kwb">int</span><span class="hl sym">)</span>num<span class="hl sym">;</span>
   <span class="hl kwb">int</span> r <span class="hl sym">= (</span>l<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">) %</span> THREADS<span class="hl sym">;</span>
   <span class="hl kwb">int</span> token<span class="hl sym">;</span>

   <span class="hl kwa">while</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">) {</span>
      <span class="hl kwd">pthread_mutex_lock</span><span class="hl sym">(</span>mutex <span class="hl sym">+</span> l<span class="hl sym">);</span>
      token <span class="hl sym">=</span> data<span class="hl sym">[</span>l<span class="hl sym">];</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>token<span class="hl sym">) {</span>
         data<span class="hl sym">[</span>r<span class="hl sym">] =</span> token <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">;</span>
         <span class="hl kwd">pthread_mutex_unlock</span><span class="hl sym">(</span>mutex <span class="hl sym">+</span> r<span class="hl sym">);</span>
      <span class="hl sym">}</span>
      <span class="hl kwa">else</span> <span class="hl sym">{</span>
         <span class="hl kwd">printf</span><span class="hl sym">(</span><span class="hl str">&quot;%i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> l<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">);</span>
         <span class="hl kwd">exit</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">);</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>



<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwb">int</span> argc<span class="hl sym">,</span> <span class="hl kwb">char</span> <span class="hl sym">**</span>argv<span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwb">int</span> i<span class="hl sym">;</span>
   pthread_t cthread<span class="hl sym">;</span>
   pthread_attr_t stack_attr<span class="hl sym">;</span>

   <span class="hl kwa">if</span> <span class="hl sym">(</span>argc <span class="hl sym">!=</span> <span class="hl num">2</span><span class="hl sym">)</span>
      <span class="hl kwd">exit</span><span class="hl sym">(</span><span class="hl num">255</span><span class="hl sym">);</span>
   data<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] =</span> <span class="hl kwd">atoi</span><span class="hl sym">(</span>argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]);</span>

   <span class="hl kwd">pthread_attr_init</span><span class="hl sym">(&amp;</span>stack_attr<span class="hl sym">);</span>
      
   <span class="hl kwa">for</span> <span class="hl sym">(</span>i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> THREADS<span class="hl sym">;</span> i<span class="hl sym">++) {</span>
      <span class="hl kwd">pthread_mutex_init</span><span class="hl sym">(</span>mutex <span class="hl sym">+</span> i<span class="hl sym">,</span> NULL<span class="hl sym">);</span>
      <span class="hl kwd">pthread_mutex_lock</span><span class="hl sym">(</span>mutex <span class="hl sym">+</span> i<span class="hl sym">);</span>

      <span class="hl kwd">pthread_attr_setstack</span><span class="hl sym">(&amp;</span>stack_attr<span class="hl sym">, &amp;</span>stacks<span class="hl sym">[</span>i<span class="hl sym">],</span> <span class="hl kwa">sizeof</span><span class="hl sym">(</span><span class="hl kwb">struct</span> stack<span class="hl sym">));</span> 
      <span class="hl kwd">pthread_create</span><span class="hl sym">(&amp;</span>cthread<span class="hl sym">, &amp;</span>stack_attr<span class="hl sym">,</span> thread<span class="hl sym">, (</span><span class="hl kwb">void</span><span class="hl sym">*)</span>i<span class="hl sym">);</span>
   <span class="hl sym">}</span>

   <span class="hl kwd">pthread_mutex_unlock</span><span class="hl sym">(</span>mutex <span class="hl sym">+</span> <span class="hl num">0</span><span class="hl sym">);</span>
   <span class="hl kwd">pthread_join</span><span class="hl sym">(</span>cthread<span class="hl sym">,</span> NULL<span class="hl sym">);</span>   
<span class="hl sym">}</span>
