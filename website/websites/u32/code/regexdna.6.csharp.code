<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * contributed by Jimmy Tang</span>
<span class="hl com"> */</span>

<span class="hl kwa">using</span> System<span class="hl opt">;</span>
<span class="hl kwa">using</span> System<span class="hl opt">.</span>Linq<span class="hl opt">;</span>
<span class="hl kwa">using</span> System<span class="hl opt">.</span>Threading<span class="hl opt">;</span>
<span class="hl kwa">using</span> System<span class="hl opt">.</span>Collections<span class="hl opt">.</span>Generic<span class="hl opt">;</span>
<span class="hl kwa">using</span> System<span class="hl opt">.</span>Text<span class="hl opt">.</span>RegularExpressions<span class="hl opt">;</span>

<span class="hl kwa">class</span> regexdna <span class="hl opt">{</span>
    <span class="hl kwa">static</span> <span class="hl kwb">void</span> <span class="hl kwd">Main</span><span class="hl opt">() {</span>

        <span class="hl kwb">string</span> sequence <span class="hl opt">=</span> Console<span class="hl opt">.</span>In<span class="hl opt">.</span><span class="hl kwd">ReadToEnd</span><span class="hl opt">();</span>
        <span class="hl kwb">int</span> initialLength <span class="hl opt">=</span> sequence<span class="hl opt">.</span>Length<span class="hl opt">;</span>
                
        sequence <span class="hl opt">=</span> Regex<span class="hl opt">.</span><span class="hl kwd">Replace</span><span class="hl opt">(</span>sequence<span class="hl opt">,</span> <span class="hl str">&quot;&gt;.*</span><span class="hl esc">\n</span><span class="hl str">|</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;&quot;</span><span class="hl opt">);</span>
        <span class="hl kwb">int</span> codeLength <span class="hl opt">=</span> sequence<span class="hl opt">.</span>Length<span class="hl opt">;</span>

        <span class="hl kwb">string</span><span class="hl opt">[]</span> variants <span class="hl opt">= {</span>
           <span class="hl str">&quot;agggtaaa|tttaccct&quot;</span>
          <span class="hl opt">,</span><span class="hl str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span>
          <span class="hl opt">,</span><span class="hl str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span>
          <span class="hl opt">,</span><span class="hl str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span>
          <span class="hl opt">,</span><span class="hl str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span>
          <span class="hl opt">,</span><span class="hl str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span>
          <span class="hl opt">,</span><span class="hl str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span>
          <span class="hl opt">,</span><span class="hl str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span>
          <span class="hl opt">,</span><span class="hl str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span>
        <span class="hl opt">};</span>

        var flags <span class="hl opt">=</span> variants<span class="hl opt">.</span><span class="hl kwd">Select</span><span class="hl opt">((</span>v<span class="hl opt">,</span> i<span class="hl opt">) =&gt; {</span>
            var flag <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">ManualResetEvent</span><span class="hl opt">(</span><span class="hl kwa">false</span><span class="hl opt">);</span>
            ThreadPool<span class="hl opt">.</span><span class="hl kwd">QueueUserWorkItem</span><span class="hl opt">(</span>x <span class="hl opt">=&gt; {</span>
                variants<span class="hl opt">[</span>i<span class="hl opt">] +=</span> <span class="hl str">&quot; &quot;</span> <span class="hl opt">+</span> Regex<span class="hl opt">.</span><span class="hl kwd">Matches</span><span class="hl opt">(</span>sequence<span class="hl opt">,</span> v<span class="hl opt">).</span>Count<span class="hl opt">;</span>
                flag<span class="hl opt">.</span><span class="hl kwd">Set</span><span class="hl opt">();</span>
            <span class="hl opt">});</span>
            <span class="hl kwa">return</span> flag<span class="hl opt">;</span>
        <span class="hl opt">});</span>
        WaitHandle<span class="hl opt">.</span><span class="hl kwd">WaitAll</span><span class="hl opt">(</span>flags<span class="hl opt">.</span><span class="hl kwd">ToArray</span><span class="hl opt">());</span>
        Console<span class="hl opt">.</span><span class="hl kwd">WriteLine</span><span class="hl opt">(</span><span class="hl kwb">string</span><span class="hl opt">.</span><span class="hl kwd">Join</span><span class="hl opt">(</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> variants<span class="hl opt">));</span>

        var dict <span class="hl opt">=</span> <span class="hl kwa">new</span> Dictionary<span class="hl opt">&lt;</span><span class="hl kwb">string</span><span class="hl opt">,</span> <span class="hl kwb">string</span><span class="hl opt">&gt; {</span>
            <span class="hl opt">{</span><span class="hl str">&quot;B&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(c|g|t)&quot;</span><span class="hl opt">}, {</span><span class="hl str">&quot;D&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(a|g|t)&quot;</span><span class="hl opt">},   {</span><span class="hl str">&quot;H&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(a|c|t)&quot;</span><span class="hl opt">}, {</span><span class="hl str">&quot;K&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(g|t)&quot;</span><span class="hl opt">},</span>
            <span class="hl opt">{</span><span class="hl str">&quot;M&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(a|c)&quot;</span><span class="hl opt">},   {</span><span class="hl str">&quot;N&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(a|c|g|t)&quot;</span><span class="hl opt">}, {</span><span class="hl str">&quot;R&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(a|g)&quot;</span><span class="hl opt">},   {</span><span class="hl str">&quot;S&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(c|g)&quot;</span><span class="hl opt">},</span>
            <span class="hl opt">{</span><span class="hl str">&quot;V&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(a|c|g)&quot;</span><span class="hl opt">}, {</span><span class="hl str">&quot;W&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(a|t)&quot;</span><span class="hl opt">},     {</span><span class="hl str">&quot;Y&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(c|t)&quot;</span><span class="hl opt">}</span> 
        <span class="hl opt">};</span>
        sequence <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Regex</span><span class="hl opt">(</span><span class="hl str">&quot;[WYKMSRBDVHN]&quot;</span><span class="hl opt">).</span><span class="hl kwd">Replace</span><span class="hl opt">(</span>sequence<span class="hl opt">,</span> m <span class="hl opt">=&gt;</span> dict<span class="hl opt">[</span>m<span class="hl opt">.</span>Value<span class="hl opt">]);</span>
        Console<span class="hl opt">.</span><span class="hl kwd">WriteLine</span><span class="hl opt">(</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">{0}</span><span class="hl esc">\n</span><span class="hl str">{1}</span><span class="hl esc">\n</span><span class="hl str">{2}&quot;</span><span class="hl opt">,</span> initialLength<span class="hl opt">,</span> codeLength<span class="hl opt">,</span> sequence<span class="hl opt">.</span>Length<span class="hl opt">);</span>
    <span class="hl opt">}</span>
<span class="hl opt">}</span>
