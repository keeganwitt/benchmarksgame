<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com">   </span>
<span class="hl com">   Contributed by Rex Kerr</span>
<span class="hl com">   (inspired by the C++ version by Andrew Moon)</span>
<span class="hl com">*/</span>

<span class="hl kwa">import</span> java<span class="hl opt">.</span>io<span class="hl opt">.</span>_
<span class="hl kwa">import</span> actors<span class="hl opt">.</span>Futures<span class="hl opt">.</span>_

<span class="hl kwa">object</span> knucleotide <span class="hl opt">{</span>
  <span class="hl kwa">val</span> BlockSize <span class="hl opt">=</span> <span class="hl num">1024</span><span class="hl opt">*</span><span class="hl num">1024</span>
  
  <span class="hl slc">// Iterators are not specialized so we need our own</span>
  <span class="hl kwa">abstract class</span> LongIter <span class="hl opt">{</span>
    <span class="hl kwa">def</span> hasNext<span class="hl opt">:</span> Boolean
    <span class="hl kwa">def</span> next<span class="hl opt">:</span> Long
    <span class="hl kwa">def</span> <span class="hl kwd">foreach</span><span class="hl opt">(</span>f<span class="hl opt">:</span> Long <span class="hl opt">=&gt;</span> Unit<span class="hl opt">) {</span> <span class="hl kwa">while</span> <span class="hl opt">(</span>hasNext<span class="hl opt">)</span> <span class="hl kwd">f</span><span class="hl opt">(</span>next<span class="hl opt">) }</span>
  <span class="hl opt">}</span>
  
  <span class="hl kwa">val</span> table <span class="hl opt">=</span> Array<span class="hl opt">.</span>tabulate<span class="hl opt">[</span>Byte<span class="hl opt">](</span><span class="hl num">256</span><span class="hl opt">) {</span>
    <span class="hl kwa">case</span> <span class="hl str">'a'</span> <span class="hl opt">|</span> <span class="hl str">'A'</span> <span class="hl opt">=&gt;</span> <span class="hl num">0</span>
    <span class="hl kwa">case</span> <span class="hl str">'t'</span> <span class="hl opt">|</span> <span class="hl str">'T'</span> <span class="hl opt">=&gt;</span> <span class="hl num">1</span>
    <span class="hl kwa">case</span> <span class="hl str">'g'</span> <span class="hl opt">|</span> <span class="hl str">'G'</span> <span class="hl opt">=&gt;</span> <span class="hl num">2</span>
    <span class="hl kwa">case</span> <span class="hl str">'c'</span> <span class="hl opt">|</span> <span class="hl str">'C'</span> <span class="hl opt">=&gt;</span> <span class="hl num">3</span>
    <span class="hl kwa">case</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span> <span class="hl opt">=&gt; -</span><span class="hl num">3</span>
    <span class="hl kwa">case</span> <span class="hl str">'&gt;'</span> <span class="hl opt">=&gt; -</span><span class="hl num">2</span>
    <span class="hl kwa">case</span> _ <span class="hl opt">=&gt; -</span><span class="hl num">1</span>
  <span class="hl opt">}</span>

  <span class="hl slc">// More efficient to store DNA sequence data as bits instead of bytes</span>
  <span class="hl kwa">class</span> <span class="hl kwd">Bits</span><span class="hl opt">(</span><span class="hl kwa">val</span> data<span class="hl opt">:</span> Array<span class="hl opt">[</span>Int<span class="hl opt">]) {</span>
    self <span class="hl opt">=&gt;</span>
    <span class="hl kwa">var</span> size <span class="hl opt">=</span> <span class="hl num">0</span>
    <span class="hl kwa">var</span> index <span class="hl opt">=</span> <span class="hl num">0</span>
    <span class="hl kwa">var</span> n <span class="hl opt">=</span> <span class="hl num">0</span>
    
    <span class="hl kwa">def</span> <span class="hl kwd">add2</span><span class="hl opt">(</span>b<span class="hl opt">:</span> Byte<span class="hl opt">) {</span>
      size <span class="hl opt">+=</span> <span class="hl num">1</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>n<span class="hl opt">&gt;</span><span class="hl num">30</span><span class="hl opt">) {</span> index <span class="hl opt">+=</span> <span class="hl num">1</span><span class="hl opt">;</span> n <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl opt">}</span>
      <span class="hl kwd">data</span><span class="hl opt">(</span>index<span class="hl opt">) |= (</span>b<span class="hl opt">&amp;</span><span class="hl num">0x3</span><span class="hl opt">)&lt;&lt;</span>n
      n <span class="hl opt">+=</span> <span class="hl num">2</span>
    <span class="hl opt">}</span>
    
    <span class="hl kwa">def</span> <span class="hl kwd">addLots</span><span class="hl opt">(</span>bs<span class="hl opt">:</span> Bits<span class="hl opt">) {</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>n<span class="hl opt">==</span><span class="hl num">0</span> <span class="hl opt">||</span> n<span class="hl opt">&gt;</span><span class="hl num">30</span><span class="hl opt">) {</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>n<span class="hl opt">&gt;</span><span class="hl num">30</span><span class="hl opt">) {</span> index <span class="hl opt">+=</span> <span class="hl num">1</span><span class="hl opt">;</span> n <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl opt">}</span>
        System<span class="hl opt">.</span><span class="hl kwd">arraycopy</span><span class="hl opt">(</span>bs<span class="hl opt">.</span>data<span class="hl opt">,</span><span class="hl num">0</span><span class="hl opt">,</span>data<span class="hl opt">,</span>index<span class="hl opt">,</span>bs<span class="hl opt">.</span>index<span class="hl opt">)</span>
        index <span class="hl opt">+=</span> bs<span class="hl opt">.</span>index
        <span class="hl kwa">if</span> <span class="hl opt">(</span>index <span class="hl opt">&gt;</span> <span class="hl num">0</span> <span class="hl opt">&amp;&amp;</span> n <span class="hl opt">==</span> <span class="hl num">0</span><span class="hl opt">) {</span> index <span class="hl opt">-=</span> <span class="hl num">1</span><span class="hl opt">;</span> n <span class="hl opt">=</span> <span class="hl num">32</span> <span class="hl opt">}</span>
      <span class="hl opt">}</span>
      <span class="hl kwa">else</span> <span class="hl opt">{</span>
        <span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span>
        <span class="hl kwa">while</span> <span class="hl opt">(</span>i <span class="hl opt">&lt;</span> bs<span class="hl opt">.</span>index<span class="hl opt">) {</span>
          <span class="hl kwa">val</span> j <span class="hl opt">=</span> bs<span class="hl opt">.</span><span class="hl kwd">data</span><span class="hl opt">(</span>i<span class="hl opt">)</span>
          <span class="hl kwd">data</span><span class="hl opt">(</span>index<span class="hl opt">) |=</span> j <span class="hl opt">&lt;&lt;</span> n
          index <span class="hl opt">+=</span> <span class="hl num">1</span>
          <span class="hl kwd">data</span><span class="hl opt">(</span>index<span class="hl opt">) |=</span> j <span class="hl opt">&gt;&gt;&gt; (</span><span class="hl num">32</span><span class="hl opt">-</span>n<span class="hl opt">)</span>
          i <span class="hl opt">+=</span> <span class="hl num">1</span>
        <span class="hl opt">}</span>
        size
      <span class="hl opt">}</span>
      size <span class="hl opt">+=</span> bs<span class="hl opt">.</span>index<span class="hl opt">*</span><span class="hl num">16</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>bs<span class="hl opt">.</span>n <span class="hl opt">!=</span> <span class="hl num">0</span><span class="hl opt">) {</span>
        <span class="hl kwa">var</span> n <span class="hl opt">=</span> bs<span class="hl opt">.</span>n
        <span class="hl kwa">var</span> i <span class="hl opt">=</span> bs<span class="hl opt">.</span><span class="hl kwd">data</span><span class="hl opt">(</span>bs<span class="hl opt">.</span>index<span class="hl opt">)</span>
        <span class="hl kwa">while</span> <span class="hl opt">(</span>n <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">) {</span>
          <span class="hl kwd">add2</span><span class="hl opt">(</span> i<span class="hl opt">.</span>toByte <span class="hl opt">)</span>
          i <span class="hl opt">&gt;&gt;&gt;=</span> <span class="hl num">2</span>
          n <span class="hl opt">-=</span> <span class="hl num">2</span>
        <span class="hl opt">}</span>
      <span class="hl opt">}</span>
    <span class="hl opt">}</span>
    
    <span class="hl kwa">def</span> <span class="hl kwd">scan</span><span class="hl opt">(</span>n<span class="hl opt">:</span> Int<span class="hl opt">,</span> offset<span class="hl opt">:</span> Int<span class="hl opt">) =</span> <span class="hl kwa">new</span> LongIter <span class="hl opt">{</span>
      <span class="hl kwa">var</span> i <span class="hl opt">=</span> offset <span class="hl opt">%</span> <span class="hl num">16</span>
      <span class="hl kwa">var</span> j <span class="hl opt">=</span> offset <span class="hl opt">/</span> <span class="hl num">16</span>
      <span class="hl kwa">val</span> mask <span class="hl opt">= (</span><span class="hl num">1L</span> <span class="hl opt">&lt;&lt; (</span><span class="hl num">2</span><span class="hl opt">*</span>n<span class="hl opt">)) -</span> <span class="hl num">1</span>
      <span class="hl kwa">def</span> hasNext <span class="hl opt">=</span> j<span class="hl opt">*</span><span class="hl num">16</span> <span class="hl opt">+</span> i <span class="hl opt">+</span> n <span class="hl opt">&lt;=</span> self<span class="hl opt">.</span>size
      <span class="hl kwa">def</span> next <span class="hl opt">= {</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>i<span class="hl opt">+</span>n <span class="hl opt">&lt;=</span> <span class="hl num">16</span><span class="hl opt">) {</span>
          <span class="hl kwa">val</span> l <span class="hl opt">= ((</span><span class="hl kwd">data</span><span class="hl opt">(</span>j<span class="hl opt">) &gt;&gt;&gt; (</span><span class="hl num">2</span><span class="hl opt">*</span>i<span class="hl opt">)) &amp;</span> mask<span class="hl opt">)</span>
          i <span class="hl opt">+=</span> n
          <span class="hl kwa">if</span> <span class="hl opt">(</span>i<span class="hl opt">&gt;=</span><span class="hl num">16</span><span class="hl opt">) {</span> j <span class="hl opt">+=</span> <span class="hl num">1</span><span class="hl opt">;</span> i <span class="hl opt">-=</span> <span class="hl num">16</span> <span class="hl opt">}</span>
          l
        <span class="hl opt">}</span>
        <span class="hl kwa">else</span> <span class="hl opt">{</span>
          <span class="hl kwa">val</span> l <span class="hl opt">= (((</span><span class="hl kwd">data</span><span class="hl opt">(</span>j<span class="hl opt">) &gt;&gt;&gt; (</span><span class="hl num">2</span><span class="hl opt">*</span>i<span class="hl opt">))).</span>toLong <span class="hl opt">| (</span><span class="hl kwd">data</span><span class="hl opt">(</span>j<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">).</span>toLong <span class="hl opt">&lt;&lt;</span> <span class="hl num">2</span><span class="hl opt">*(</span><span class="hl num">16</span><span class="hl opt">-</span>i<span class="hl opt">))) &amp;</span> mask
          j <span class="hl opt">+=</span> <span class="hl num">1</span>
          i <span class="hl opt">+=</span> n <span class="hl opt">-</span> <span class="hl num">16</span>
          <span class="hl kwa">if</span> <span class="hl opt">(</span>i<span class="hl opt">&gt;=</span><span class="hl num">16</span><span class="hl opt">) {</span> j <span class="hl opt">+=</span> <span class="hl num">1</span><span class="hl opt">;</span> i <span class="hl opt">-=</span> <span class="hl num">16</span> <span class="hl opt">}</span>
          l
        <span class="hl opt">}</span>
      <span class="hl opt">}</span>
    <span class="hl opt">}</span>
  <span class="hl opt">}</span>
  
  <span class="hl slc">// Load a UTF-8 DNA file from standard in, picking out requested sequence</span>
  <span class="hl kwa">def</span> <span class="hl kwd">load</span><span class="hl opt">(</span>is<span class="hl opt">:</span> InputStream<span class="hl opt">,</span> target<span class="hl opt">:</span> Array<span class="hl opt">[</span>Byte<span class="hl opt">]) = {</span>
    <span class="hl kwa">var</span> need <span class="hl opt">=</span> <span class="hl num">1</span>
    <span class="hl kwa">var</span> found<span class="hl opt">,</span>nl<span class="hl opt">,</span>done <span class="hl opt">=</span> false
    <span class="hl kwa">def</span> read<span class="hl opt">:</span> Bits <span class="hl opt">= {</span>
      <span class="hl kwa">val</span> data <span class="hl opt">=</span> <span class="hl kwa">new</span> Array<span class="hl opt">[</span>Byte<span class="hl opt">](</span>BlockSize<span class="hl opt">)</span>
      <span class="hl kwa">val</span> n <span class="hl opt">=</span> is<span class="hl opt">.</span><span class="hl kwd">read</span><span class="hl opt">(</span>data<span class="hl opt">)</span>
      <span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span>
      <span class="hl kwa">while</span> <span class="hl opt">(</span>i<span class="hl opt">&lt;</span>n <span class="hl opt">&amp;&amp;</span> need<span class="hl opt">&lt;</span>target<span class="hl opt">.</span>length<span class="hl opt">) {</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">data</span><span class="hl opt">(</span>i<span class="hl opt">)==</span><span class="hl kwd">target</span><span class="hl opt">(</span>need<span class="hl opt">))</span> need <span class="hl opt">+=</span> <span class="hl num">1</span> <span class="hl kwa">else</span> need <span class="hl opt">=</span> <span class="hl num">0</span>
        i <span class="hl opt">+=</span> <span class="hl num">1</span>
      <span class="hl opt">}</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>need <span class="hl opt">&gt;=</span> target<span class="hl opt">.</span>length <span class="hl opt">&amp;&amp; !</span>found<span class="hl opt">) {</span>
        <span class="hl kwa">while</span> <span class="hl opt">(</span>i<span class="hl opt">&lt;</span>n <span class="hl opt">&amp;&amp;</span> <span class="hl kwd">data</span><span class="hl opt">(</span>i<span class="hl opt">)!=</span><span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl opt">)</span> i <span class="hl opt">+=</span> <span class="hl num">1</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>i<span class="hl opt">&lt;</span>n<span class="hl opt">)</span> found <span class="hl opt">=</span> true
      <span class="hl opt">}</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>found <span class="hl opt">&amp;&amp; !</span>done<span class="hl opt">)</span>
      <span class="hl opt">{</span>
        <span class="hl kwa">val</span> bits <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Bits</span><span class="hl opt">(</span><span class="hl kwa">new</span> Array<span class="hl opt">[</span>Int<span class="hl opt">](</span><span class="hl num">1</span><span class="hl opt">+((</span>n<span class="hl opt">-</span>i<span class="hl opt">)&gt;&gt;</span><span class="hl num">4</span><span class="hl opt">)))</span>
        <span class="hl kwa">while</span> <span class="hl opt">(</span>i <span class="hl opt">&lt;</span> n<span class="hl opt">) {</span>
          <span class="hl kwa">val</span> x <span class="hl opt">=</span> <span class="hl kwd">table</span><span class="hl opt">(</span><span class="hl kwd">data</span><span class="hl opt">(</span>i<span class="hl opt">)&amp;</span><span class="hl num">0xFF</span><span class="hl opt">)</span>
          <span class="hl kwa">if</span> <span class="hl opt">(</span>x <span class="hl opt">&gt;=</span> <span class="hl num">0</span><span class="hl opt">) {</span> bits<span class="hl opt">.</span><span class="hl kwd">add2</span><span class="hl opt">(</span>x<span class="hl opt">);</span> nl <span class="hl opt">=</span> false <span class="hl opt">}</span>
          <span class="hl kwa">else if</span> <span class="hl opt">(</span>x <span class="hl opt">== -</span><span class="hl num">3</span><span class="hl opt">)</span> nl <span class="hl opt">=</span> true
          <span class="hl kwa">else if</span> <span class="hl opt">(</span>nl <span class="hl opt">&amp;&amp;</span> x <span class="hl opt">== -</span><span class="hl num">2</span><span class="hl opt">) {</span> i <span class="hl opt">=</span> n<span class="hl opt">;</span> done <span class="hl opt">=</span> true <span class="hl opt">}</span>
          i <span class="hl opt">+=</span> <span class="hl num">1</span>
        <span class="hl opt">}</span>
        bits
      <span class="hl opt">}</span>
      <span class="hl kwa">else if</span> <span class="hl opt">(</span>n<span class="hl opt">==</span>BlockSize <span class="hl opt">&amp;&amp; !</span>done<span class="hl opt">)</span> read
      <span class="hl kwa">else new</span> <span class="hl kwd">Bits</span><span class="hl opt">(</span><span class="hl kwa">new</span> Array<span class="hl opt">[</span>Int<span class="hl opt">](</span><span class="hl num">0</span><span class="hl opt">))</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">val</span> data <span class="hl opt">=</span> Iterator<span class="hl opt">.</span><span class="hl kwd">continually</span><span class="hl opt">(</span>read<span class="hl opt">).</span><span class="hl kwd">takeWhile</span><span class="hl opt">(</span>_<span class="hl opt">.</span>size <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">).</span>toArray
    <span class="hl kwa">val</span> all <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Bits</span><span class="hl opt">(</span><span class="hl kwa">new</span> Array<span class="hl opt">[</span>Int<span class="hl opt">](</span>data<span class="hl opt">.</span><span class="hl kwd">map</span><span class="hl opt">(</span>_<span class="hl opt">.</span>size<span class="hl opt">).</span>sum<span class="hl opt">/</span><span class="hl num">16</span><span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">))</span>
    data<span class="hl opt">.</span><span class="hl kwd">foreach</span><span class="hl opt">(</span>all<span class="hl opt">.</span>addLots<span class="hl opt">)</span>
    all
  <span class="hl opt">}</span>
  
  <span class="hl slc">// Utility to go from binary to text representation</span>
  <span class="hl kwa">val</span> decode <span class="hl opt">=</span> <span class="hl kwd">Map</span><span class="hl opt">(</span><span class="hl num">0L</span><span class="hl opt">-&gt;</span><span class="hl str">&quot;A&quot;</span><span class="hl opt">,</span> <span class="hl num">1L</span><span class="hl opt">-&gt;</span><span class="hl str">&quot;T&quot;</span><span class="hl opt">,</span> <span class="hl num">2L</span><span class="hl opt">-&gt;</span><span class="hl str">&quot;G&quot;</span><span class="hl opt">,</span> <span class="hl num">3L</span><span class="hl opt">-&gt;</span><span class="hl str">&quot;C&quot;</span><span class="hl opt">)</span>
  <span class="hl kwa">def</span> <span class="hl kwd">l2s</span><span class="hl opt">(</span>l<span class="hl opt">:</span> Long<span class="hl opt">,</span> n<span class="hl opt">:</span> Int<span class="hl opt">):</span> String <span class="hl opt">= {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>n <span class="hl opt">&lt;=</span> <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl str">&quot;&quot;</span>
    <span class="hl kwa">else</span> <span class="hl kwd">decode</span><span class="hl opt">(</span>l<span class="hl opt">&amp;</span><span class="hl num">0x3</span><span class="hl opt">) +</span> <span class="hl kwd">l2s</span><span class="hl opt">(</span>l<span class="hl opt">&gt;&gt;&gt;</span><span class="hl num">2</span><span class="hl opt">,</span> n<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">)</span>
  <span class="hl opt">}</span>
    
  <span class="hl slc">// Custom counted hash set (neither Java nor Scala provides one)</span>
  <span class="hl kwa">class</span> <span class="hl kwd">DnaHash</span><span class="hl opt">(</span>z<span class="hl opt">:</span> Int<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> size <span class="hl opt">=</span> <span class="hl num">16</span>
    <span class="hl kwa">var</span> n <span class="hl opt">=</span> <span class="hl num">0</span>
    <span class="hl kwa">var</span> keys <span class="hl opt">=</span> <span class="hl kwa">new</span> Array<span class="hl opt">[</span>Long<span class="hl opt">](</span>size<span class="hl opt">)</span>
    <span class="hl kwa">var</span> counts <span class="hl opt">=</span> <span class="hl kwa">new</span> Array<span class="hl opt">[</span>Int<span class="hl opt">](</span>size<span class="hl opt">)</span>
    <span class="hl kwa">final def</span> <span class="hl kwd">hc</span><span class="hl opt">(</span>l<span class="hl opt">:</span> Long<span class="hl opt">) = (</span>l<span class="hl opt">.</span>toInt <span class="hl opt">+ (</span>l<span class="hl opt">&gt;&gt;</span><span class="hl num">17</span><span class="hl opt">).</span>toInt<span class="hl opt">) &amp; (</span>size<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">)</span>
    <span class="hl kwa">final def</span> <span class="hl kwd">nx</span><span class="hl opt">(</span>i<span class="hl opt">:</span> Int<span class="hl opt">) = (</span>i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">) &amp; (</span>size <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">)</span>
    <span class="hl kwa">def</span> <span class="hl opt">+=(</span>key<span class="hl opt">:</span> Long<span class="hl opt">,</span> count<span class="hl opt">:</span> Int <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">) {</span>
      <span class="hl kwa">val</span> index <span class="hl opt">=</span> <span class="hl kwd">hc</span><span class="hl opt">(</span>key<span class="hl opt">)</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">counts</span><span class="hl opt">(</span>index<span class="hl opt">) ==</span> <span class="hl num">0</span><span class="hl opt">) {</span>
        <span class="hl kwd">keys</span><span class="hl opt">(</span>index<span class="hl opt">) =</span> key
        <span class="hl kwd">counts</span><span class="hl opt">(</span>index<span class="hl opt">) =</span> count
        n <span class="hl opt">+=</span> <span class="hl num">1</span>
      <span class="hl opt">}</span>
      <span class="hl kwa">else if</span> <span class="hl opt">(</span><span class="hl kwd">keys</span><span class="hl opt">(</span>index<span class="hl opt">) ==</span> key<span class="hl opt">)</span> <span class="hl kwd">counts</span><span class="hl opt">(</span>index<span class="hl opt">) +=</span> count
      <span class="hl kwa">else if</span> <span class="hl opt">(</span><span class="hl num">6</span><span class="hl opt">*</span>n <span class="hl opt">&gt;</span> size<span class="hl opt">) {</span>
        <span class="hl kwa">val</span> <span class="hl opt">(</span>oldk<span class="hl opt">,</span> oldc<span class="hl opt">,</span> olds<span class="hl opt">) = (</span>keys<span class="hl opt">,</span> counts<span class="hl opt">,</span> size<span class="hl opt">)</span>
        size <span class="hl opt">*=</span> <span class="hl num">2</span>
        keys <span class="hl opt">=</span> <span class="hl kwa">new</span> Array<span class="hl opt">[</span>Long<span class="hl opt">](</span>size<span class="hl opt">)</span>
        counts <span class="hl opt">=</span> <span class="hl kwa">new</span> Array<span class="hl opt">[</span>Int<span class="hl opt">](</span>size<span class="hl opt">)</span>
        n <span class="hl opt">=</span> <span class="hl num">0</span>
        <span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span>
        <span class="hl kwa">while</span> <span class="hl opt">(</span>i <span class="hl opt">&lt;</span> olds<span class="hl opt">) {</span>
          <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">oldc</span><span class="hl opt">(</span>i<span class="hl opt">) &gt;</span> <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">this</span> <span class="hl opt">+= (</span><span class="hl kwd">oldk</span><span class="hl opt">(</span>i<span class="hl opt">),</span> <span class="hl kwd">oldc</span><span class="hl opt">(</span>i<span class="hl opt">))</span>
          i <span class="hl opt">+=</span> <span class="hl num">1</span>
        <span class="hl opt">}</span>
        <span class="hl kwa">this</span> <span class="hl opt">+=</span> key
      <span class="hl opt">}</span>
      <span class="hl kwa">else</span> <span class="hl opt">{</span>
        <span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl kwd">nx</span><span class="hl opt">(</span>index<span class="hl opt">)</span>
        <span class="hl kwa">while</span> <span class="hl opt">(</span><span class="hl kwd">counts</span><span class="hl opt">(</span>i<span class="hl opt">) !=</span> <span class="hl num">0</span> <span class="hl opt">&amp;&amp;</span> <span class="hl kwd">keys</span><span class="hl opt">(</span>i<span class="hl opt">) !=</span> key<span class="hl opt">)</span> i <span class="hl opt">=</span> <span class="hl kwd">nx</span><span class="hl opt">(</span>i<span class="hl opt">)</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">counts</span><span class="hl opt">(</span>i<span class="hl opt">) ==</span> <span class="hl num">0</span><span class="hl opt">) {</span>
          <span class="hl kwd">keys</span><span class="hl opt">(</span>i<span class="hl opt">) =</span> key
          <span class="hl kwd">counts</span><span class="hl opt">(</span>i<span class="hl opt">) =</span> count
          n <span class="hl opt">+=</span> <span class="hl num">1</span>
        <span class="hl opt">}</span>
        <span class="hl kwa">else</span> <span class="hl kwd">counts</span><span class="hl opt">(</span>i<span class="hl opt">) +=</span> count
      <span class="hl opt">}</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">def</span> <span class="hl kwd">apply</span><span class="hl opt">(</span>key<span class="hl opt">:</span> Long<span class="hl opt">) = {</span>
      <span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl kwd">hc</span><span class="hl opt">(</span>key<span class="hl opt">)</span>
      <span class="hl kwa">while</span> <span class="hl opt">(</span><span class="hl kwd">counts</span><span class="hl opt">(</span>i<span class="hl opt">) &gt;</span> <span class="hl num">0</span> <span class="hl opt">&amp;&amp;</span> <span class="hl kwd">keys</span><span class="hl opt">(</span>i<span class="hl opt">) !=</span> key<span class="hl opt">)</span> i <span class="hl opt">=</span> <span class="hl kwd">nx</span><span class="hl opt">(</span>i<span class="hl opt">)</span>
      <span class="hl kwd">counts</span><span class="hl opt">(</span>i<span class="hl opt">)</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">def</span> printSorted <span class="hl opt">{</span>
      <span class="hl kwa">val</span> factor <span class="hl opt">=</span> <span class="hl num">100.0</span><span class="hl opt">/</span>counts<span class="hl opt">.</span>sum
      <span class="hl opt">(</span>counts<span class="hl opt">.</span><span class="hl kwd">map</span><span class="hl opt">(</span>_<span class="hl opt">*</span>factor<span class="hl opt">)</span> zip keys<span class="hl opt">.</span><span class="hl kwd">map</span><span class="hl opt">(</span><span class="hl kwd">l2s</span><span class="hl opt">(</span>_<span class="hl opt">,</span>z<span class="hl opt">))).</span><span class="hl kwd">filter</span><span class="hl opt">(</span>_<span class="hl opt">.</span>_1 <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">).</span><span class="hl kwd">sortWith</span><span class="hl opt">((</span>a<span class="hl opt">,</span>b<span class="hl opt">) =&gt;</span>
        a<span class="hl opt">.</span>_1 <span class="hl opt">&gt;</span> b<span class="hl opt">.</span>_1 <span class="hl opt">|| (</span>a<span class="hl opt">.</span>_1 <span class="hl opt">==</span> b<span class="hl opt">.</span>_1 <span class="hl opt">&amp;&amp;</span> a<span class="hl opt">.</span>_2 <span class="hl opt">&lt;</span> b<span class="hl opt">.</span>_2<span class="hl opt">)</span>
      <span class="hl opt">).</span>foreach<span class="hl opt">{</span> <span class="hl kwa">case</span> <span class="hl opt">(</span>freq<span class="hl opt">,</span> label<span class="hl opt">) =&gt;</span> <span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;%s %.3f</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span>label<span class="hl opt">,</span>freq<span class="hl opt">) }</span>
      println
    <span class="hl opt">}</span>
    <span class="hl kwa">def</span> <span class="hl kwd">print</span><span class="hl opt">(</span>s<span class="hl opt">:</span> String<span class="hl opt">) {</span>
      <span class="hl kwa">val</span> key <span class="hl opt">=</span> s<span class="hl opt">.</span>getBytes<span class="hl opt">.</span><span class="hl kwd">map</span><span class="hl opt">(</span>x <span class="hl opt">=&gt;</span> <span class="hl kwd">table</span><span class="hl opt">(</span>x <span class="hl opt">&amp;</span> <span class="hl num">0xFF</span><span class="hl opt">).</span>toLong<span class="hl opt">).</span><span class="hl kwd">reduceRight</span><span class="hl opt">((</span>l<span class="hl opt">,</span>r<span class="hl opt">) =&gt;</span> <span class="hl num">4</span><span class="hl opt">*</span>r <span class="hl opt">+</span> l<span class="hl opt">)</span>
      <span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;%-7d %s</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span><span class="hl kwa">this</span><span class="hl opt">(</span>key<span class="hl opt">),</span>s<span class="hl opt">)</span>
    <span class="hl opt">}</span>
  <span class="hl opt">}</span>
  
  <span class="hl slc">// Required function that adds data with offset to hash set</span>
  <span class="hl kwa">def</span> <span class="hl kwd">addToHash</span><span class="hl opt">(</span>data<span class="hl opt">:</span> Bits<span class="hl opt">,</span> hash<span class="hl opt">:</span> DnaHash<span class="hl opt">,</span> n<span class="hl opt">:</span> Int<span class="hl opt">,</span> offset<span class="hl opt">:</span> Int<span class="hl opt">) =</span> data<span class="hl opt">.</span><span class="hl kwd">scan</span><span class="hl opt">(</span>n<span class="hl opt">,</span>offset<span class="hl opt">).</span><span class="hl kwd">foreach</span><span class="hl opt">(</span>hash <span class="hl opt">+=</span> _<span class="hl opt">)</span>
  
  <span class="hl kwa">def</span> <span class="hl kwd">main</span><span class="hl opt">(</span>args<span class="hl opt">:</span> Array<span class="hl opt">[</span>String<span class="hl opt">]) {</span>
    <span class="hl kwa">val</span> sizes <span class="hl opt">=</span> <span class="hl kwd">List</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">2</span><span class="hl opt">,</span><span class="hl num">3</span><span class="hl opt">,</span><span class="hl num">4</span><span class="hl opt">,</span><span class="hl num">6</span><span class="hl opt">,</span><span class="hl num">12</span><span class="hl opt">,</span><span class="hl num">18</span><span class="hl opt">)</span>
    <span class="hl kwa">val</span> sequence <span class="hl opt">=</span> <span class="hl str">&quot;GGTATTTTAATTTATAGT&quot;</span>
    <span class="hl kwa">val</span> data <span class="hl opt">=</span> <span class="hl kwd">load</span><span class="hl opt">(</span>System<span class="hl opt">.</span><span class="hl kwa">in</span><span class="hl opt">,</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&gt;THREE&quot;</span><span class="hl opt">.</span>getBytes<span class="hl opt">)</span>
    <span class="hl kwa">val</span> answers <span class="hl opt">=</span> sizes<span class="hl opt">.</span><span class="hl kwd">map</span><span class="hl opt">(</span>n <span class="hl opt">=&gt;</span> n <span class="hl opt">-&gt;</span> future <span class="hl opt">{</span>
      <span class="hl kwa">val</span> h <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">DnaHash</span><span class="hl opt">(</span>n<span class="hl opt">)</span>
      <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">&lt;-</span> <span class="hl num">0</span> until n<span class="hl opt">)</span> <span class="hl kwd">addToHash</span><span class="hl opt">(</span>data<span class="hl opt">,</span>h<span class="hl opt">,</span>n<span class="hl opt">,</span>i<span class="hl opt">)</span>
      h
    <span class="hl opt">}).</span>toMap
    <span class="hl kwd">answers</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">)().</span>printSorted
    <span class="hl kwd">answers</span><span class="hl opt">(</span><span class="hl num">2</span><span class="hl opt">)().</span>printSorted
    sizes<span class="hl opt">.</span><span class="hl kwd">drop</span><span class="hl opt">(</span><span class="hl num">2</span><span class="hl opt">).</span><span class="hl kwd">foreach</span><span class="hl opt">(</span>n <span class="hl opt">=&gt;</span> <span class="hl kwd">answers</span><span class="hl opt">(</span>n<span class="hl opt">)().</span><span class="hl kwd">print</span><span class="hl opt">(</span>sequence<span class="hl opt">.</span><span class="hl kwd">substring</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span>n<span class="hl opt">)))</span>
  <span class="hl opt">}</span>
<span class="hl opt">}</span>
