<span class="hl slc">-- The Computer Language Benchmarks Game</span>
<span class="hl slc">-- http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">--</span>
<span class="hl slc">-- Contributed by Francois Fabien (9 septembre 2011)</span>
<span class="hl slc">--</span>
<span class="hl slc">-- Based on the original Ada version by</span>
<span class="hl slc">-- Claude Kaiser and Jean-Francois Pradat-Peyre (CEDRIC - CNAM Paris)</span>
<span class="hl slc">--</span>
<span class="hl slc">-- Chameneos are Ada tasks, mapped to OS threads.</span>
<span class="hl slc">-- The meeting place is a protected body with a requeue entry.</span>
<span class="hl slc">-- On a single-core, tests are run in sequence; on a multicore in parallel.</span>
<span class="hl slc">--</span>
<span class="hl slc">-- Expected build command:</span>
<span class="hl slc">-- gnatmake -O3  chameneosredux.adb</span>
<span class="hl slc">------------------------------------------------------------------------------</span>
<span class="hl kwa">pragma</span> Suppress <span class="hl opt">(</span>All_Checks<span class="hl opt">);</span>

<span class="hl kwa">pragma</span> Restrictions <span class="hl opt">(</span>No_Abort_Statements<span class="hl opt">);</span>
<span class="hl kwa">pragma</span> Restrictions <span class="hl opt">(</span>Max_Select_Alternatives <span class="hl opt">=&gt;</span> <span class="hl num">0</span><span class="hl opt">);</span>
<span class="hl kwa">pragma</span> Restrictions <span class="hl opt">(</span>Max_Asynchronous_Select_Nesting <span class="hl opt">=&gt;</span> <span class="hl num">0</span><span class="hl opt">);</span>

<span class="hl kwa">with</span> System<span class="hl opt">;</span>           <span class="hl kwa">use</span> System<span class="hl opt">;</span>
<span class="hl kwa">with</span> Ada<span class="hl opt">.</span>Command_Line<span class="hl opt">;</span> <span class="hl kwa">use</span> Ada<span class="hl opt">.</span>Command_Line<span class="hl opt">;</span>
<span class="hl kwa">with</span> Chameneos<span class="hl opt">;</span>        <span class="hl kwa">use</span> Chameneos<span class="hl opt">;</span>
<span class="hl kwa">with</span> System<span class="hl opt">.</span>Task_Info<span class="hl opt">;</span>

<span class="hl kwa">procedure</span> ChameneosRedux <span class="hl kwa">is</span>
   <span class="hl kwa">pragma</span> Priority <span class="hl opt">(</span>Max_Priority<span class="hl opt">);</span>

   <span class="hl slc">-- GNU ld will remove unused sections; GNAT specific</span>
   <span class="hl kwa">pragma</span> Linker_Options <span class="hl opt">(</span><span class="hl str">&quot;-Wl,--gc-sections&quot;</span><span class="hl opt">);</span>

   Meeting_count <span class="hl opt">:</span> Meetings <span class="hl opt">:=</span> <span class="hl num">600</span><span class="hl opt">;</span> <span class="hl slc">-- default value</span>
<span class="hl kwa">begin</span>
   <span class="hl kwa">if</span> Argument_Count <span class="hl opt">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
      <span class="hl kwa">begin</span>
         Meeting_count <span class="hl opt">:=</span> Meetings<span class="hl kwd">'Value</span> <span class="hl opt">(</span>Argument <span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">));</span>
      <span class="hl kwa">exception</span>
         <span class="hl kwa">when others</span> <span class="hl opt">=&gt;</span>
            <span class="hl slc">-- When wrong argument, keep meetings := 600</span>
            <span class="hl kwa">null</span><span class="hl opt">;</span>
      <span class="hl kwa">end</span><span class="hl opt">;</span>
   <span class="hl kwa">end if</span><span class="hl opt">;</span>

   Chameneos<span class="hl opt">.</span>Print_Colours<span class="hl opt">;</span>
   <span class="hl kwa">if</span> Task_Info<span class="hl opt">.</span>Number_Of_Processors <span class="hl opt">&gt;</span> <span class="hl num">1</span> <span class="hl kwa">then</span>
      Chameneos<span class="hl opt">.</span>Run_Multicore <span class="hl opt">(</span>Meeting_count<span class="hl opt">);</span>
   <span class="hl kwa">else</span>
      Chameneos<span class="hl opt">.</span>Run <span class="hl opt">(</span>Meeting_count<span class="hl opt">,</span> <span class="hl num">3</span><span class="hl opt">);</span>
      Chameneos<span class="hl opt">.</span>Run <span class="hl opt">(</span>Meeting_count<span class="hl opt">,</span> <span class="hl num">10</span><span class="hl opt">);</span>
   <span class="hl kwa">end if</span><span class="hl opt">;</span>
<span class="hl kwa">end</span> ChameneosRedux<span class="hl opt">;</span>
<span class="hl slc">------------------------------------------------------------------------------</span>
<span class="hl slc">-- Root package</span>
<span class="hl slc">-- Definitions and test procedure (run)</span>
<span class="hl slc">------------------------------------------------------------------------------</span>

<span class="hl kwa">package</span> Chameneos <span class="hl kwa">is</span>

   Max_Creatures <span class="hl opt">:</span> <span class="hl kwa">constant</span> <span class="hl opt">:=</span> <span class="hl num">10</span><span class="hl opt">;</span>

   <span class="hl kwa">type</span> Meetings <span class="hl kwa">is range</span> <span class="hl num">0</span> <span class="hl opt">.. +(</span><span class="hl num">2</span> <span class="hl opt">**</span> <span class="hl num">31</span> <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">);</span>
   <span class="hl kwa">for</span> Meetings<span class="hl kwd">'Size</span> <span class="hl kwa">use</span> <span class="hl num">32</span><span class="hl opt">;</span> <span class="hl slc">--32bits even on x64</span>

   <span class="hl kwa">type</span> Colour <span class="hl kwa">is</span> <span class="hl opt">(</span>Blue<span class="hl opt">,</span> Red<span class="hl opt">,</span> Yellow<span class="hl opt">);</span>

   <span class="hl slc">-- The creature Name</span>
   <span class="hl kwa">type</span> Id_Type <span class="hl kwa">is range</span> <span class="hl num">1</span> <span class="hl opt">..</span> Max_Creatures<span class="hl opt">;</span>

   Max_Set <span class="hl opt">:</span> <span class="hl kwa">constant array</span> <span class="hl opt">(</span>Id_Type<span class="hl opt">)</span> <span class="hl kwa">of</span> Colour <span class="hl opt">:=</span>
     <span class="hl opt">(</span>Blue<span class="hl opt">,</span>
      Red<span class="hl opt">,</span>
      Yellow<span class="hl opt">,</span>
      Red<span class="hl opt">,</span>
      Yellow<span class="hl opt">,</span>
      Blue<span class="hl opt">,</span>
      Red<span class="hl opt">,</span>
      Yellow<span class="hl opt">,</span>
      Red<span class="hl opt">,</span>
      Blue<span class="hl opt">);</span>

   <span class="hl slc">-- The test procedure for single core</span>
   <span class="hl kwa">procedure</span> Run <span class="hl opt">(</span>Meetings_Nbr <span class="hl opt">:</span> Meetings<span class="hl opt">;</span> Task_Nbr <span class="hl opt">:</span> Id_Type<span class="hl opt">);</span>
   <span class="hl slc">-- The test procedure for multicore</span>
   <span class="hl kwa">procedure</span> Run_Multicore <span class="hl opt">(</span>Meetings_Nbr <span class="hl opt">:</span> Meetings<span class="hl opt">);</span>

   <span class="hl slc">--  Ancilliary procedure used for output</span>
   <span class="hl kwa">procedure</span> Print_Colours<span class="hl opt">;</span>

   <span class="hl kwa">function</span> Do_Complement <span class="hl opt">(</span>C1<span class="hl opt">,</span> C2 <span class="hl opt">:</span> Colour<span class="hl opt">)</span> <span class="hl kwa">return</span> Colour<span class="hl opt">;</span>
   <span class="hl slc">-- since this function is heavily used, make it inline to speed up</span>
   <span class="hl kwa">pragma</span> Inline <span class="hl opt">(</span>Do_Complement<span class="hl opt">);</span>

<span class="hl kwa">end</span> Chameneos<span class="hl opt">;</span>
<span class="hl slc">------------------------------------------------------------------------------</span>
<span class="hl kwa">with</span> Ada<span class="hl opt">.</span>Text_IO<span class="hl opt">;</span>           <span class="hl kwa">use</span> Ada<span class="hl opt">.</span>Text_IO<span class="hl opt">;</span>
<span class="hl kwa">with</span> Ada<span class="hl opt">.</span>Strings<span class="hl opt">.</span>Unbounded<span class="hl opt">;</span> <span class="hl kwa">use</span> Ada<span class="hl opt">.</span>Strings<span class="hl opt">.</span>Unbounded<span class="hl opt">;</span>
<span class="hl kwa">with</span> Chameneos<span class="hl opt">.</span>Creatures<span class="hl opt">;</span>   <span class="hl kwa">use</span> Chameneos<span class="hl opt">.</span>Creatures<span class="hl opt">;</span>

<span class="hl kwa">package body</span> Chameneos <span class="hl kwa">is</span>

   <span class="hl kwa">package</span> Meet_Io <span class="hl kwa">is new</span> Ada<span class="hl opt">.</span>Text_IO<span class="hl opt">.</span>Integer_IO <span class="hl opt">(</span>Meetings<span class="hl opt">);</span>

   <span class="hl kwa">type</span> Measures <span class="hl kwa">is array</span> <span class="hl opt">(</span>Id_Type <span class="hl kwa">range</span> <span class="hl opt">&lt;&gt;)</span> <span class="hl kwa">of</span> Measure_Item<span class="hl opt">;</span>

   <span class="hl kwa">type</span> String_Access <span class="hl kwa">is access all</span> <span class="hl kwb">String</span><span class="hl opt">;</span>

   Colour_Image <span class="hl opt">:</span> <span class="hl kwa">constant array</span> <span class="hl opt">(</span>Colour<span class="hl opt">)</span> <span class="hl kwa">of</span> String_Access <span class="hl opt">:=</span>
     <span class="hl opt">(</span>Blue   <span class="hl opt">=&gt;</span> <span class="hl kwa">new</span> <span class="hl kwb">String</span><span class="hl str">'(&quot;blue&quot;),</span>
<span class="hl str">      Red    =&gt; new String'</span><span class="hl opt">(</span><span class="hl str">&quot;red&quot;</span><span class="hl opt">),</span>
      Yellow <span class="hl opt">=&gt;</span> <span class="hl kwa">new</span> <span class="hl kwb">String</span><span class="hl str">'(&quot;yellow&quot;));</span>
<span class="hl str"></span>
<span class="hl str">   -- global data because of memory leak</span>
<span class="hl str">   Numbers_Image : constant array (0 .. 9) of String_Access :=</span>
<span class="hl str">     (0 =&gt; new String'</span><span class="hl opt">(</span><span class="hl str">&quot;zero &quot;</span><span class="hl opt">),</span>
      <span class="hl num">1</span> <span class="hl opt">=&gt;</span> <span class="hl kwa">new</span> <span class="hl kwb">String</span><span class="hl str">'(&quot;one &quot;),</span>
<span class="hl str">      2 =&gt; new String'</span><span class="hl opt">(</span><span class="hl str">&quot;two &quot;</span><span class="hl opt">),</span>
      <span class="hl num">3</span> <span class="hl opt">=&gt;</span> <span class="hl kwa">new</span> <span class="hl kwb">String</span><span class="hl str">'(&quot;three &quot;),</span>
<span class="hl str">      4 =&gt; new String'</span><span class="hl opt">(</span><span class="hl str">&quot;four &quot;</span><span class="hl opt">),</span>
      <span class="hl num">5</span> <span class="hl opt">=&gt;</span> <span class="hl kwa">new</span> <span class="hl kwb">String</span><span class="hl str">'(&quot;five &quot;),</span>
<span class="hl str">      6 =&gt; new String'</span><span class="hl opt">(</span><span class="hl str">&quot;six &quot;</span><span class="hl opt">),</span>
      <span class="hl num">7</span> <span class="hl opt">=&gt;</span> <span class="hl kwa">new</span> <span class="hl kwb">String</span><span class="hl str">'(&quot;seven &quot;),</span>
<span class="hl str">      8 =&gt; new String'</span><span class="hl opt">(</span><span class="hl str">&quot;eight &quot;</span><span class="hl opt">),</span>
      <span class="hl num">9</span> <span class="hl opt">=&gt;</span> <span class="hl kwa">new</span> <span class="hl kwb">String</span><span class="hl str">'(&quot;nine &quot;));</span>
<span class="hl str"></span>
<span class="hl str">   function Do_Complement (C1, C2 : Colour) return Colour is</span>
<span class="hl str">   begin</span>
<span class="hl str">      case C1 is</span>
<span class="hl str">         when Blue =&gt;</span>
<span class="hl str">            case C2 is</span>
<span class="hl str">               when Blue =&gt;</span>
<span class="hl str">                  return Blue;</span>
<span class="hl str">               when Red =&gt;</span>
<span class="hl str">                  return Yellow;</span>
<span class="hl str">               when Yellow =&gt;</span>
<span class="hl str">                  return Red;</span>
<span class="hl str">            end case;</span>
<span class="hl str">         when Red =&gt;</span>
<span class="hl str">            case C2 is</span>
<span class="hl str">               when Blue =&gt;</span>
<span class="hl str">                  return Yellow;</span>
<span class="hl str">               when Red =&gt;</span>
<span class="hl str">                  return Red;</span>
<span class="hl str">               when Yellow =&gt;</span>
<span class="hl str">                  return Blue;</span>
<span class="hl str">            end case;</span>
<span class="hl str">         when Yellow =&gt;</span>
<span class="hl str">            case C2 is</span>
<span class="hl str">               when Blue =&gt;</span>
<span class="hl str">                  return Red;</span>
<span class="hl str">               when Red =&gt;</span>
<span class="hl str">                  return Blue;</span>
<span class="hl str">               when Yellow =&gt;</span>
<span class="hl str">                  return Yellow;</span>
<span class="hl str">            end case;</span>
<span class="hl str">      end case;</span>
<span class="hl str">   end Do_Complement;</span>
<span class="hl str"></span>
<span class="hl str">   function Spelled (Value : Meetings) return String is</span>
<span class="hl str">      Result : Unbounded_String := Null_Unbounded_String;</span>
<span class="hl str">      K      : Natural          := Natural (Value);</span>
<span class="hl str">   begin</span>
<span class="hl str">      loop</span>
<span class="hl str">         Result := Numbers_Image (K rem 10).all &amp; Result;</span>
<span class="hl str">         K      := K / 10;</span>
<span class="hl str">         exit when K = 0;</span>
<span class="hl str">      end loop;</span>
<span class="hl str">      return To_String (Result);</span>
<span class="hl str">   end Spelled;</span>
<span class="hl str"></span>
<span class="hl str">   procedure Join (Set : Creature_Sets) is</span>
<span class="hl str">      Finished : Boolean := False;</span>
<span class="hl str">      First    : Id_Type := Id_Type'First;</span>
<span class="hl str">   begin</span>
<span class="hl str">      while not Finished loop</span>
<span class="hl str">         Finished := True;</span>
<span class="hl str">         for I in First .. Set'Last loop</span>
<span class="hl str">            if not Set (I)'Terminated then</span>
<span class="hl str">               Finished := False;</span>
<span class="hl str">               delay 0.001;</span>
<span class="hl str">               exit;</span>
<span class="hl str">            else</span>
<span class="hl str">               First := I;</span>
<span class="hl str">            end if;</span>
<span class="hl str">         end loop;</span>
<span class="hl str">      end loop;</span>
<span class="hl str">   end Join;</span>
<span class="hl str">   pragma Inline (Join);</span>
<span class="hl str"></span>
<span class="hl str">   procedure Output (Measure : in Measures) is</span>
<span class="hl str">      Total_Meetings : Meetings := 0;</span>
<span class="hl str">   begin</span>
<span class="hl str">      for I in Measure'Range loop</span>
<span class="hl str">         Put (Colour_Image (Max_Set (I)).all &amp; &quot; &quot;);</span>
<span class="hl str">      end loop;</span>
<span class="hl str">      New_Line;</span>
<span class="hl str">      for I in Measure'Range loop</span>
<span class="hl str">         Total_Meetings := Total_Meetings + Measure (I).Meetings_Made;</span>
<span class="hl str">         Meet_Io.Put (Measure (I).Meetings_Made, Width =&gt; 10);</span>
<span class="hl str">         Put_Line (&quot;  &quot; &amp; Spelled (Measure (I).Meetings_Same));</span>
<span class="hl str">      end loop;</span>
<span class="hl str"></span>
<span class="hl str">      Put (Spelled (Total_Meetings));</span>
<span class="hl str">      New_Line (2);</span>
<span class="hl str">   end Output;</span>
<span class="hl str"></span>
<span class="hl str">   procedure Run (Meetings_Nbr : Meetings; Task_Nbr : Id_Type) is</span>
<span class="hl str"></span>
<span class="hl str">      Creature_Set : Creature_Sets (1 .. Task_Nbr);</span>
<span class="hl str">      Measure      : Measures (1 .. Task_Nbr);</span>
<span class="hl str">   begin</span>
<span class="hl str">      -- Meeting Place initialization</span>
<span class="hl str">      Init_Mall (1, Meetings_Nbr);</span>
<span class="hl str">      -- launch the tasks</span>
<span class="hl str">      for I in 1 .. Task_Nbr loop</span>
<span class="hl str">         Creature_Set (I).Start (1, I, Max_Set (I));</span>
<span class="hl str">      end loop;</span>
<span class="hl str"></span>
<span class="hl str">      -- Rendez-vous : Waiting for the the completion of tasks</span>
<span class="hl str">      for I in 1 .. Task_Nbr loop</span>
<span class="hl str">         Creature_Set (I).Report (Measure (I));</span>
<span class="hl str">      end loop;</span>
<span class="hl str">      Join (Creature_Set);</span>
<span class="hl str">      Output (Measure);</span>
<span class="hl str"></span>
<span class="hl str">   end Run;</span>
<span class="hl str"></span>
<span class="hl str">   procedure Run_Multicore (Meetings_Nbr : Meetings) is</span>
<span class="hl str"></span>
<span class="hl str">      Creature_Set_3  : Creature_Sets (1 .. 3);</span>
<span class="hl str">      Measure_3       : Measures (1 .. 3);</span>
<span class="hl str">      Creature_Set_10 : Creature_Sets (1 .. 10);</span>
<span class="hl str">      Measure_10      : Measures (1 .. 10);</span>
<span class="hl str"></span>
<span class="hl str">   begin</span>
<span class="hl str">      -- initialization of the 2 Meeting Places</span>
<span class="hl str">      Init_Mall (1, Meetings_Nbr);</span>
<span class="hl str">      Init_Mall (2, Meetings_Nbr);</span>
<span class="hl str">      -- launch the tasks</span>
<span class="hl str">      for I in Id_Type range 1 .. 3 loop</span>
<span class="hl str">         Creature_Set_3 (I).Start (1, I, Max_Set (I));</span>
<span class="hl str">      end loop;</span>
<span class="hl str">      for I in Id_Type range 1 .. 10 loop</span>
<span class="hl str">         Creature_Set_10 (I).Start (2, I, Max_Set (I));</span>
<span class="hl str">      end loop;</span>
<span class="hl str"></span>
<span class="hl str">      -- Rendez-vous : Waiting for the the completion of tasks</span>
<span class="hl str">      for I in Id_Type range 1 .. 10 loop</span>
<span class="hl str">         Creature_Set_10 (I).Report (Measure_10 (I));</span>
<span class="hl str">      end loop;</span>
<span class="hl str">      Join (Creature_Set_10);</span>
<span class="hl str">      for I in Id_Type range 1 .. 3 loop</span>
<span class="hl str">         Creature_Set_3 (I).Report (Measure_3 (I));</span>
<span class="hl str">      end loop;</span>
<span class="hl str">      Join (Creature_Set_3);</span>
<span class="hl str"></span>
<span class="hl str">      Output (Measure_3);</span>
<span class="hl str">      Output (Measure_10);</span>
<span class="hl str"></span>
<span class="hl str">   end Run_Multicore;</span>
<span class="hl str"></span>
<span class="hl str">   procedure Print_Colours is</span>
<span class="hl str">      procedure Print_One_Line (C1, C2 : Colour) is</span>
<span class="hl str">      begin</span>
<span class="hl str">         Put_Line</span>
<span class="hl str">           (Colour_Image (C1).all &amp;</span>
<span class="hl str">            &quot; + &quot; &amp;</span>
<span class="hl str">            Colour_Image (C2).all &amp;</span>
<span class="hl str">            &quot; -&gt; &quot; &amp;</span>
<span class="hl str">            Colour_Image (Do_Complement (C1, C2)).all);</span>
<span class="hl str">      end Print_One_Line;</span>
<span class="hl str">   begin</span>
<span class="hl str">      for Self in Colour loop</span>
<span class="hl str">         for Other in Colour loop</span>
<span class="hl str">            Print_One_Line (Self, Other);</span>
<span class="hl str">         end loop;</span>
<span class="hl str">      end loop;</span>
<span class="hl str">      New_Line;</span>
<span class="hl str">   end Print_Colours;</span>
<span class="hl str"></span>
<span class="hl str">end Chameneos;</span>
<span class="hl str">------------------------------------------------------------------------------</span>
<span class="hl str">-- The chameneos description</span>
<span class="hl str">------------------------------------------------------------------------------</span>
<span class="hl str">with System;</span>
<span class="hl str"></span>
<span class="hl str">package Chameneos.Creatures is</span>
<span class="hl str"></span>
<span class="hl str">   type Place_Index is range 1 .. 2;</span>
<span class="hl str"></span>
<span class="hl str">   -- Stuff required for the measurement</span>
<span class="hl str">   type Measure_Item is record</span>
<span class="hl str">      Meetings_Made : Meetings := 0;</span>
<span class="hl str">      Meetings_Same : Meetings := 0;</span>
<span class="hl str">   end record;</span>
<span class="hl str"></span>
<span class="hl str">   --A chameneos is an Ada task</span>
<span class="hl str">   task type Creature is</span>
<span class="hl str">      pragma Priority (System.Default_Priority);</span>
<span class="hl str">      pragma Storage_Size (31000);</span>
<span class="hl str">      entry Start</span>
<span class="hl str">        (Place_Nbr : in Place_Index;</span>
<span class="hl str">         Id        : in Id_Type;</span>
<span class="hl str">         C         : in Colour);</span>
<span class="hl str">      entry Report (Item : out Measure_Item);</span>
<span class="hl str">   end Creature;</span>
<span class="hl str"></span>
<span class="hl str">   type Creature_Sets is array (Id_Type range &lt;&gt;) of Creature;</span>
<span class="hl str"></span>
<span class="hl str">   procedure Init_Mall (Place_Nbr : Place_Index; Max_Count : in Meetings);</span>
<span class="hl str"></span>
<span class="hl str">end Chameneos.Creatures;</span>
<span class="hl str">------------------------------------------------------------------------------</span>
<span class="hl str"></span>
<span class="hl str">package body Chameneos.Creatures is</span>
<span class="hl str"></span>
<span class="hl str">   -- specification of the meeting place where 2 tasks transfer Id.</span>
<span class="hl str">   -- the entry point is Meet for all tasks, the first incoming task is</span>
<span class="hl str">   -- requeued at the Waiting entry.</span>
<span class="hl str"></span>
<span class="hl str">   protected type Places is</span>
<span class="hl str">      procedure Init (Max_Count : in Meetings);</span>
<span class="hl str">      entry Meet</span>
<span class="hl str">        (X           : in Id_Type;</span>
<span class="hl str">         C           : in Colour;</span>
<span class="hl str">         Mall_Open   : out Boolean;</span>
<span class="hl str">         Name_Other  : out Id_Type;</span>
<span class="hl str">         Color_Other : out Colour);</span>
<span class="hl str"></span>
<span class="hl str">   private</span>
<span class="hl str">      entry Waiting</span>
<span class="hl str">        (X           : in Id_Type;</span>
<span class="hl str">         C           : in Colour;</span>
<span class="hl str">         Mall_Open   : out Boolean;</span>
<span class="hl str">         Name_Other  : out Id_Type;</span>
<span class="hl str">         Color_Other : out Colour);</span>
<span class="hl str"></span>
<span class="hl str">      First_Call, Ready  : Boolean;</span>
<span class="hl str">      A_Colour, B_Colour : Colour;</span>
<span class="hl str">      A_Name, B_Name     : Id_Type;</span>
<span class="hl str">      Meetings_Counter   : Meetings;</span>
<span class="hl str">   end Places;</span>
<span class="hl str"></span>
<span class="hl str">   Place : array (Place_Index) of Places;</span>
<span class="hl str"></span>
<span class="hl str">   task body Creature is</span>
<span class="hl str">      My_Place                : Place_Index;</span>
<span class="hl str">      My_ID, Other_Id         : Id_Type;</span>
<span class="hl str">      My_Colour, Other_Colour : Colour;</span>
<span class="hl str">      L_Measure               : Measure_Item := (0, 0);</span>
<span class="hl str">      Is_Mall_Open            : Boolean;</span>
<span class="hl str">   begin</span>
<span class="hl str">      accept Start (</span>
<span class="hl str">        Place_Nbr  : in Place_Index;</span>
<span class="hl str">         Id        : in Id_Type;</span>
<span class="hl str">         C         : in Colour) do</span>
<span class="hl str">         My_Place  := Place_Nbr;</span>
<span class="hl str">         My_ID     := Id;</span>
<span class="hl str">         My_Colour := C;</span>
<span class="hl str">      end Start;</span>
<span class="hl str"></span>
<span class="hl str">      loop</span>
<span class="hl str"></span>
<span class="hl str">         Place (My_Place).Meet</span>
<span class="hl str">           (My_ID,</span>
<span class="hl str">            My_Colour,</span>
<span class="hl str">            Is_Mall_Open,</span>
<span class="hl str">            Other_Id,</span>
<span class="hl str">            Other_Colour);</span>
<span class="hl str">         if not Is_Mall_Open then</span>
<span class="hl str">            -- the test is finished</span>
<span class="hl str">            exit;</span>
<span class="hl str">         end if;</span>
<span class="hl str">         My_Colour               := Do_Complement (My_Colour, Other_Colour);</span>
<span class="hl str">         L_Measure.Meetings_Made := L_Measure.Meetings_Made + 1;</span>
<span class="hl str">         if Other_Id = My_ID then</span>
<span class="hl str">            L_Measure.Meetings_Same := L_Measure.Meetings_Same + 1;</span>
<span class="hl str">         end if;</span>
<span class="hl str"></span>
<span class="hl str">      end loop;</span>
<span class="hl str"></span>
<span class="hl str">      -- Give the results and die.</span>
<span class="hl str">      accept Report (Item : out Measure_Item) do</span>
<span class="hl str">         Item := L_Measure;</span>
<span class="hl str">      end Report;</span>
<span class="hl str">   end Creature;</span>
<span class="hl str"></span>
<span class="hl str">   protected body Places is</span>
<span class="hl str"></span>
<span class="hl str">      procedure Init (Max_Count : in Meetings) is</span>
<span class="hl str">      begin</span>
<span class="hl str">         Meetings_Counter := Max_Count;</span>
<span class="hl str">         First_Call       := True;</span>
<span class="hl str">         Ready            := True;</span>
<span class="hl str">      end Init;</span>
<span class="hl str"></span>
<span class="hl str">      entry Meet</span>
<span class="hl str">        (X           : in Id_Type;</span>
<span class="hl str">         C           : in Colour;</span>
<span class="hl str">         Mall_Open   : out Boolean;</span>
<span class="hl str">         Name_Other  : out Id_Type;</span>
<span class="hl str">         Color_Other : out Colour) when Ready</span>
<span class="hl str">      is</span>
<span class="hl str">      begin</span>
<span class="hl str">         if (Meetings_Counter = 0) then</span>
<span class="hl str">            -- The test is finished</span>
<span class="hl str">            Mall_Open := False;</span>
<span class="hl str">            -- must give dummy values that will not be used anyway</span>
<span class="hl str">            Name_Other  := 1;</span>
<span class="hl str">            Color_Other := Red;</span>
<span class="hl str">            return;</span>
<span class="hl str">         end if;</span>
<span class="hl str">         Mall_Open := True;</span>
<span class="hl str">         if (First_Call) then</span>
<span class="hl str">            First_Call := False;</span>
<span class="hl str">            A_Name     := X;</span>
<span class="hl str">            A_Colour   := C;</span>
<span class="hl str">            requeue Waiting;</span>
<span class="hl str">         else</span>
<span class="hl str">            Meetings_Counter := Meetings_Counter - 1;</span>
<span class="hl str">            B_Name           := X;</span>
<span class="hl str">            B_Colour         := C;</span>
<span class="hl str">            Name_Other       := A_Name;</span>
<span class="hl str">            Color_Other      := A_Colour;</span>
<span class="hl str">            Ready            := False; -- block next incoming task</span>
<span class="hl str">            First_Call       := True;  -- enable Waiting entry</span>
<span class="hl str">         end if;</span>
<span class="hl str">      end Meet;</span>
<span class="hl str"></span>
<span class="hl str">      entry Waiting</span>
<span class="hl str">        (X           : in Id_Type;</span>
<span class="hl str">         C           : in Colour;</span>
<span class="hl str">         Mall_Open   : out Boolean;</span>
<span class="hl str">         Name_Other  : out Id_Type;</span>
<span class="hl str">         Color_Other : out Colour) when First_Call</span>
<span class="hl str">      is</span>
<span class="hl str">         pragma Unreferenced (X, C);</span>
<span class="hl str">      begin</span>
<span class="hl str">         Mall_Open   := True;</span>
<span class="hl str">         Name_Other  := B_Name;</span>
<span class="hl str">         Color_Other := B_Colour;</span>
<span class="hl str">         Ready       := True; --enable Meet entry</span>
<span class="hl str">      end Waiting;</span>
<span class="hl str">   end Places;</span>
<span class="hl str"></span>
<span class="hl str">   procedure Init_Mall (Place_Nbr : Place_Index; Max_Count : in Meetings) is</span>
<span class="hl str">   begin</span>
<span class="hl str">      Place (Place_Nbr).Init (Max_Count);</span>
<span class="hl str">   end Init_Mall;</span>
<span class="hl str"></span>
<span class="hl str">end Chameneos.Creatures;</span>
