<span class="hl slc">;;   The Computer Language Benchmarks Game</span>
<span class="hl slc">;;   http://benchmarksgame.alioth.debian.org/</span>

<span class="hl slc">;; contributed by Andy Fingerhut</span>

<span class="hl slc">;; The function 'dot' is based on suggestions and improvements made by</span>
<span class="hl slc">;; these people posting to the Clojure Google group in April, 2009:</span>
<span class="hl slc">;; dmitri.sotnikov, William D. Lipe, Paul Stadig, michael.messinides</span>
<span class="hl slc">;; David Sletten, John Harrop</span>

<span class="hl slc">;; change by Marko Kocic</span>
<span class="hl slc">;; reduced code size by removing functions already present in Clojure</span>

<span class="hl slc">;; change by Andy Fingerhut</span>
<span class="hl slc">;; Use Java primitive double arrays instead of Clojure sequences in a</span>
<span class="hl slc">;; few inner loops.  This is a parallel version, identical to the</span>
<span class="hl slc">;; sequential version except using pmap in compute-rows.</span>

<span class="hl opt">(</span><span class="hl kwa">ns</span> mandelbrot
  <span class="hl opt">(:</span>gen-class<span class="hl opt">)</span>
  <span class="hl opt">(:</span>import <span class="hl opt">(</span><span class="hl kwa">java</span>.io BufferedOutputStream<span class="hl opt">)))</span>

<span class="hl opt">(</span><span class="hl kwa">set</span><span class="hl opt">! *</span>warn-on-reflection<span class="hl opt">*</span> true<span class="hl opt">)</span>

<span class="hl slc">;; Handle slight difference in function name between Clojure 1.2.0 and</span>
<span class="hl slc">;; 1.3.0-alpha* ability to use type hints to infer fast bit</span>
<span class="hl slc">;; operations.</span>
<span class="hl opt">(</span><span class="hl kwa">defmacro</span> my-unchecked-add-int <span class="hl opt">[&amp;</span> args<span class="hl opt">]</span>
  <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">and</span> <span class="hl opt">(== (*</span>clojure-version<span class="hl opt">* :</span>major<span class="hl opt">)</span> <span class="hl num">1</span><span class="hl opt">)</span>
           <span class="hl opt">(== (*</span>clojure-version<span class="hl opt">* :</span>minor<span class="hl opt">)</span> <span class="hl num">2</span><span class="hl opt">))</span>
    <span class="hl opt">`(</span><span class="hl kwa">unchecked-add</span> ~<span class="hl opt">&#64;</span>args<span class="hl opt">)</span>
    <span class="hl opt">`(</span><span class="hl kwa">unchecked-add-int</span> ~<span class="hl opt">&#64;</span>args<span class="hl opt">)))</span>

<span class="hl opt">(</span><span class="hl kwa">defmacro</span> my-unchecked-dec-int <span class="hl opt">[&amp;</span> args<span class="hl opt">]</span>
  <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">and</span> <span class="hl opt">(== (*</span>clojure-version<span class="hl opt">* :</span>major<span class="hl opt">)</span> <span class="hl num">1</span><span class="hl opt">)</span>
           <span class="hl opt">(== (*</span>clojure-version<span class="hl opt">* :</span>minor<span class="hl opt">)</span> <span class="hl num">2</span><span class="hl opt">))</span>
    <span class="hl opt">`(</span><span class="hl kwa">unchecked-dec</span> ~<span class="hl opt">&#64;</span>args<span class="hl opt">)</span>
    <span class="hl opt">`(</span><span class="hl kwa">unchecked-dec-int</span> ~<span class="hl opt">&#64;</span>args<span class="hl opt">)))</span>

<span class="hl opt">(</span><span class="hl kwa">defmacro</span> my-unchecked-divide-int <span class="hl opt">[&amp;</span> args<span class="hl opt">]</span>
  <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">and</span> <span class="hl opt">(== (*</span>clojure-version<span class="hl opt">* :</span>major<span class="hl opt">)</span> <span class="hl num">1</span><span class="hl opt">)</span>
           <span class="hl opt">(== (*</span>clojure-version<span class="hl opt">* :</span>minor<span class="hl opt">)</span> <span class="hl num">2</span><span class="hl opt">))</span>
    <span class="hl opt">`(</span><span class="hl kwa">unchecked-divide</span> ~<span class="hl opt">&#64;</span>args<span class="hl opt">)</span>
    <span class="hl opt">`(</span><span class="hl kwa">unchecked-divide-int</span> ~<span class="hl opt">&#64;</span>args<span class="hl opt">)))</span>

<span class="hl opt">(</span><span class="hl kwa">defmacro</span> my-unchecked-inc-int <span class="hl opt">[&amp;</span> args<span class="hl opt">]</span>
  <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">and</span> <span class="hl opt">(== (*</span>clojure-version<span class="hl opt">* :</span>major<span class="hl opt">)</span> <span class="hl num">1</span><span class="hl opt">)</span>
           <span class="hl opt">(== (*</span>clojure-version<span class="hl opt">* :</span>minor<span class="hl opt">)</span> <span class="hl num">2</span><span class="hl opt">))</span>
    <span class="hl opt">`(</span><span class="hl kwa">unchecked-inc</span> ~<span class="hl opt">&#64;</span>args<span class="hl opt">)</span>
    <span class="hl opt">`(</span><span class="hl kwa">unchecked-inc-int</span> ~<span class="hl opt">&#64;</span>args<span class="hl opt">)))</span>


<span class="hl opt">(</span><span class="hl kwa">def</span> max-iterations <span class="hl num">50</span><span class="hl opt">)</span>
<span class="hl opt">(</span><span class="hl kwa">def</span> limit-square <span class="hl opt">(</span><span class="hl kwa">double</span> <span class="hl num">4.0</span><span class="hl opt">))</span>

<span class="hl opt">(</span><span class="hl kwa">defn</span> dot <span class="hl opt">[</span>r i<span class="hl opt">]</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">[</span>f2 <span class="hl opt">(</span><span class="hl kwa">double</span> <span class="hl num">2.0</span><span class="hl opt">)</span>
        limit-square <span class="hl opt">(</span><span class="hl kwa">double</span> limit-square<span class="hl opt">)</span>
        iterations-remaining <span class="hl opt">(</span><span class="hl kwa">int</span> max-iterations<span class="hl opt">)</span>
        pr <span class="hl opt">(</span><span class="hl kwa">double</span> r<span class="hl opt">)</span>
        pi <span class="hl opt">(</span><span class="hl kwa">double</span> i<span class="hl opt">)]</span>
    <span class="hl slc">;; The loop below is similar to the one in the Perl subroutine dot</span>
    <span class="hl slc">;; in mandelbrot.perl, with these name correspondences:</span>
    <span class="hl slc">;; pr &lt;-&gt; Cr, pi &lt;-&gt; Ci, zi &lt;-&gt; Zi, zr &lt;-&gt; Zr, zr2 &lt;-&gt; Tr, zi2 &lt;-&gt; Ti</span>
    <span class="hl opt">(</span><span class="hl kwa">loop</span> <span class="hl opt">[</span>zr <span class="hl opt">(</span><span class="hl kwa">double</span> <span class="hl num">0.0</span><span class="hl opt">)</span>
           zi <span class="hl opt">(</span><span class="hl kwa">double</span> <span class="hl num">0.0</span><span class="hl opt">)</span>
           i <span class="hl opt">(</span><span class="hl kwa">int</span> <span class="hl opt">(</span><span class="hl kwa">my-unchecked-inc-int</span> iterations-remaining<span class="hl opt">))]</span>
      <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">[</span>zr2 <span class="hl opt">(*</span> zr zr<span class="hl opt">)</span>
            zi2 <span class="hl opt">(*</span> zi zi<span class="hl opt">)]</span>
        <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">and</span> <span class="hl opt">(</span><span class="hl kwa">not</span> <span class="hl opt">(</span><span class="hl kwa">zero</span>? i<span class="hl opt">))</span>
                 <span class="hl opt">(&lt; (+</span> zr2 zi2<span class="hl opt">)</span> limit-square<span class="hl opt">))</span>
          <span class="hl opt">(</span><span class="hl kwa">recur</span> <span class="hl opt">(+ (</span><span class="hl kwa">-</span> zr2 zi2<span class="hl opt">)</span> pr<span class="hl opt">)</span>
                 <span class="hl opt">(+ (* (*</span> f2 zr<span class="hl opt">)</span> zi<span class="hl opt">)</span> pi<span class="hl opt">)</span>
                 <span class="hl opt">(</span><span class="hl kwa">my-unchecked-dec-int</span> i<span class="hl opt">))</span>
          <span class="hl opt">(</span><span class="hl kwa">zero</span>? i<span class="hl opt">))))))</span>


<span class="hl opt">(</span><span class="hl kwa">defn</span> index-to-val <span class="hl opt">[</span>i scale-fac offset<span class="hl opt">]</span>
  <span class="hl opt">(+ (*</span> i scale-fac<span class="hl opt">)</span> offset<span class="hl opt">))</span>


<span class="hl opt">(</span><span class="hl kwa">defn</span> ubyte <span class="hl opt">[</span>val<span class="hl opt">]</span>
  <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(&gt;=</span> val <span class="hl num">128</span><span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl kwa">byte</span> <span class="hl opt">(</span><span class="hl kwa">-</span> val <span class="hl num">256</span><span class="hl opt">))</span>
    <span class="hl opt">(</span><span class="hl kwa">byte</span> val<span class="hl opt">)))</span>


<span class="hl opt">(</span><span class="hl kwa">defn</span> compute-row <span class="hl opt">[#</span>^doubles x-vals y<span class="hl opt">]</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">[</span>y <span class="hl opt">(</span><span class="hl kwa">double</span> y<span class="hl opt">)</span>
        n <span class="hl opt">(</span><span class="hl kwa">int</span> <span class="hl opt">(</span><span class="hl kwa">alength</span> x-vals<span class="hl opt">))</span>
        num-bytes-out <span class="hl opt">(</span><span class="hl kwa">int</span> <span class="hl opt">(</span><span class="hl kwa">my-unchecked-divide-int</span> <span class="hl opt">(</span><span class="hl kwa">my-unchecked-add-int</span> n <span class="hl num">7</span><span class="hl opt">)</span> <span class="hl num">8</span><span class="hl opt">))</span>
        <span class="hl opt">#</span>^bytes result <span class="hl opt">(</span><span class="hl kwa">byte-array</span> num-bytes-out<span class="hl opt">)</span>
        zero <span class="hl opt">(</span><span class="hl kwa">int</span> <span class="hl num">0</span><span class="hl opt">)</span>
        one <span class="hl opt">(</span><span class="hl kwa">int</span> <span class="hl num">1</span><span class="hl opt">)]</span>
    <span class="hl opt">(</span><span class="hl kwa">loop</span> <span class="hl opt">[</span>i <span class="hl opt">(</span><span class="hl kwa">int</span> zero<span class="hl opt">)</span>
           b <span class="hl opt">(</span><span class="hl kwa">int</span> zero<span class="hl opt">)</span>
           num-filled-bits zero
           result-idx <span class="hl opt">(</span><span class="hl kwa">int</span> zero<span class="hl opt">)]</span>
      <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(==</span> i n<span class="hl opt">)</span>
        <span class="hl opt">(</span><span class="hl kwa">do</span>
          <span class="hl opt">(</span><span class="hl kwa">when</span> <span class="hl opt">(</span><span class="hl kwa">not</span> <span class="hl opt">(</span><span class="hl kwa">zero</span>? num-filled-bits<span class="hl opt">))</span>
            <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">[</span>last-byte-val
                  <span class="hl opt">(</span><span class="hl kwa">byte</span> <span class="hl opt">(</span><span class="hl kwa">ubyte</span> <span class="hl opt">(</span><span class="hl kwa">bit-shift-left</span> b <span class="hl opt">(</span><span class="hl kwa">-</span> <span class="hl num">8</span> num-filled-bits<span class="hl opt">))))]</span>
            <span class="hl opt">(</span><span class="hl kwa">aset</span> result result-idx last-byte-val<span class="hl opt">)))</span>
          result<span class="hl opt">)</span>
        <span class="hl slc">;; else</span>
        <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">[</span>new-bit <span class="hl opt">(</span><span class="hl kwa">int</span> <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">dot</span> <span class="hl opt">(</span><span class="hl kwa">aget</span> x-vals i<span class="hl opt">)</span> y<span class="hl opt">)</span> one zero<span class="hl opt">))</span>
              new-b <span class="hl opt">(</span><span class="hl kwa">int</span> <span class="hl opt">(</span><span class="hl kwa">my-unchecked-add-int</span> <span class="hl opt">(</span><span class="hl kwa">bit-shift-left</span> b one<span class="hl opt">)</span> new-bit<span class="hl opt">))]</span>
          <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(==</span> num-filled-bits <span class="hl num">7</span><span class="hl opt">)</span>
            <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">[</span>byte-val <span class="hl opt">(</span><span class="hl kwa">byte</span> <span class="hl opt">(</span><span class="hl kwa">ubyte</span> new-b<span class="hl opt">))]</span>
              <span class="hl opt">(</span><span class="hl kwa">aset</span> result result-idx byte-val<span class="hl opt">)</span>
              <span class="hl opt">(</span><span class="hl kwa">recur</span> <span class="hl opt">(</span><span class="hl kwa">my-unchecked-inc-int</span> i<span class="hl opt">)</span>
                     zero
                     zero
                     <span class="hl opt">(</span><span class="hl kwa">my-unchecked-inc-int</span> result-idx<span class="hl opt">)))</span>
            <span class="hl opt">(</span><span class="hl kwa">recur</span> <span class="hl opt">(</span><span class="hl kwa">my-unchecked-inc-int</span> i<span class="hl opt">)</span>
                   new-b
                   <span class="hl opt">(</span><span class="hl kwa">my-unchecked-inc-int</span> num-filled-bits<span class="hl opt">)</span>
                   result-idx<span class="hl opt">)))))))</span>


<span class="hl opt">(</span><span class="hl kwa">defn</span> compute-rows <span class="hl opt">[</span>size<span class="hl opt">]</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">[</span>two-over-size <span class="hl opt">(</span><span class="hl kwa">double</span> <span class="hl opt">(/</span> <span class="hl num">2.0</span> size<span class="hl opt">))</span>
        x-offset <span class="hl opt">(</span><span class="hl kwa">double</span> -<span class="hl num">1.5</span><span class="hl opt">)</span>
        y-offset <span class="hl opt">(</span><span class="hl kwa">double</span> -<span class="hl num">1.0</span><span class="hl opt">)</span>
        x-vals <span class="hl opt">(</span><span class="hl kwa">double-array</span> size <span class="hl opt">(</span><span class="hl kwa">map</span> <span class="hl opt">#(</span><span class="hl kwa">index-to-val</span> % two-over-size x-offset<span class="hl opt">)</span>
                                       <span class="hl opt">(</span><span class="hl kwa">range</span> size<span class="hl opt">)))</span>
        y-vals <span class="hl opt">(</span><span class="hl kwa">double-array</span> size <span class="hl opt">(</span><span class="hl kwa">map</span> <span class="hl opt">#(</span><span class="hl kwa">index-to-val</span> % two-over-size y-offset<span class="hl opt">)</span>
                                       <span class="hl opt">(</span><span class="hl kwa">range</span> size<span class="hl opt">)))]</span>
    <span class="hl opt">(</span><span class="hl kwa">pmap</span> <span class="hl opt">#(</span><span class="hl kwa">compute-row</span> x-vals <span class="hl opt">(</span><span class="hl kwa">aget</span> y-vals %<span class="hl opt">))</span>
          <span class="hl opt">(</span><span class="hl kwa">range</span> size<span class="hl opt">))))</span>


<span class="hl opt">(</span><span class="hl kwa">defn</span> do-mandelbrot <span class="hl opt">[</span>size<span class="hl opt">]</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">[</span>rows <span class="hl opt">(</span><span class="hl kwa">compute-rows</span> size<span class="hl opt">)]</span>
    <span class="hl opt">(</span><span class="hl kwa">printf</span> <span class="hl str">&quot;P4</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl kwa">printf</span> <span class="hl str">&quot;%d %d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> size size<span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl kwa">flush</span><span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">[</span>ostream <span class="hl opt">(</span><span class="hl kwa">BufferedOutputStream</span>. System<span class="hl opt">/</span>out<span class="hl opt">)]</span>
      <span class="hl opt">(</span><span class="hl kwa">doseq</span> <span class="hl opt">[</span>r rows<span class="hl opt">]</span>
        <span class="hl opt">(</span>. ostream write r <span class="hl num">0</span> <span class="hl opt">(</span><span class="hl kwa">count</span> r<span class="hl opt">)))</span>
      <span class="hl opt">(</span>. ostream close<span class="hl opt">))</span>
    <span class="hl opt">(</span><span class="hl kwa">flush</span><span class="hl opt">)))</span>


<span class="hl opt">(</span><span class="hl kwa">defn</span> -main <span class="hl opt">[&amp;</span> args<span class="hl opt">]</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">[</span>size <span class="hl opt">(</span>. Integer valueOf <span class="hl opt">(</span><span class="hl kwa">nth</span> args <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl num">10</span><span class="hl opt">)]</span>
    <span class="hl opt">(</span><span class="hl kwa">do-mandelbrot</span> size<span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl kwa">shutdown-agents</span><span class="hl opt">)))</span>
