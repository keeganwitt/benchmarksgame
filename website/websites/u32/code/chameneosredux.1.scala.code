<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   Scala translation contributed by Rex Kerr;</span>
<span class="hl com">   based on Java original by Michael Barker.</span>
<span class="hl com">*/</span>


<span class="hl kwa">import</span> java<span class="hl opt">.</span>util<span class="hl opt">.</span>concurrent<span class="hl opt">.</span>_<span class="hl opt">;</span>
<span class="hl kwa">import</span> atomic<span class="hl opt">.</span>_<span class="hl opt">;</span>

<span class="hl kwa">object</span> chameneosredux <span class="hl opt">{</span>
  <span class="hl kwa">object</span> Color <span class="hl kwa">extends</span> <span class="hl kwd">Enumeration</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl str">&quot;blue&quot;</span><span class="hl opt">,</span><span class="hl str">&quot;red&quot;</span><span class="hl opt">,</span><span class="hl str">&quot;yellow&quot;</span><span class="hl opt">) {</span>
    <span class="hl kwa">val</span> Blue<span class="hl opt">,</span>Red<span class="hl opt">,</span>Yellow <span class="hl opt">=</span> Value
    <span class="hl kwa">def</span> <span class="hl kwd">doComplement</span><span class="hl opt">(</span>c1<span class="hl opt">:</span> Value<span class="hl opt">,</span> c2<span class="hl opt">:</span> Value<span class="hl opt">) =</span> c1 match <span class="hl opt">{</span>
      <span class="hl kwa">case</span> Blue <span class="hl opt">=&gt;</span> c2 match <span class="hl opt">{</span>
        <span class="hl kwa">case</span> Blue <span class="hl opt">=&gt;</span> Blue
        <span class="hl kwa">case</span> Red <span class="hl opt">=&gt;</span> Yellow
        <span class="hl kwa">case</span> Yellow <span class="hl opt">=&gt;</span> Red
      <span class="hl opt">}</span>
      <span class="hl kwa">case</span> Red <span class="hl opt">=&gt;</span> c2 match <span class="hl opt">{</span>
        <span class="hl kwa">case</span> Blue <span class="hl opt">=&gt;</span> Yellow
        <span class="hl kwa">case</span> Red <span class="hl opt">=&gt;</span> Red
        <span class="hl kwa">case</span> Yellow <span class="hl opt">=&gt;</span> Blue
      <span class="hl opt">}</span>
      <span class="hl kwa">case</span> Yellow <span class="hl opt">=&gt;</span> c2 match <span class="hl opt">{</span>
        <span class="hl kwa">case</span> Blue <span class="hl opt">=&gt;</span> Red
        <span class="hl kwa">case</span> Red <span class="hl opt">=&gt;</span> Blue
        <span class="hl kwa">case</span> Yellow <span class="hl opt">=&gt;</span> Yellow
      <span class="hl opt">}</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">def</span> printColors <span class="hl opt">{</span>
      Color<span class="hl opt">.</span><span class="hl kwd">foreach</span><span class="hl opt">(</span>c1 <span class="hl opt">=&gt;</span> Color<span class="hl opt">.</span><span class="hl kwd">foreach</span><span class="hl opt">(</span>c2 <span class="hl opt">=&gt; {</span>
        <span class="hl kwd">println</span><span class="hl opt">(</span>c1 <span class="hl opt">+</span> <span class="hl str">&quot; + &quot;</span> <span class="hl opt">+</span> c2 <span class="hl opt">+</span> <span class="hl str">&quot; -&gt; &quot;</span> <span class="hl opt">+</span> <span class="hl kwd">doComplement</span><span class="hl opt">(</span>c1<span class="hl opt">,</span>c2<span class="hl opt">))</span>
      <span class="hl opt">}))</span>
    <span class="hl opt">}</span>
  <span class="hl opt">}</span>

  <span class="hl kwa">object</span> Verbalize <span class="hl opt">{</span>
    <span class="hl kwa">val</span> digit <span class="hl opt">=</span> <span class="hl kwd">Map</span><span class="hl opt">(</span><span class="hl str">'0'</span><span class="hl opt">-&gt;</span><span class="hl str">&quot;zero&quot;</span><span class="hl opt">,</span><span class="hl str">'1'</span><span class="hl opt">-&gt;</span><span class="hl str">&quot;one&quot;</span><span class="hl opt">,</span><span class="hl str">'2'</span><span class="hl opt">-&gt;</span><span class="hl str">&quot;two&quot;</span><span class="hl opt">,</span><span class="hl str">'3'</span><span class="hl opt">-&gt;</span><span class="hl str">&quot;three&quot;</span><span class="hl opt">,</span><span class="hl str">'4'</span><span class="hl opt">-&gt;</span><span class="hl str">&quot;four&quot;</span><span class="hl opt">,</span>
                    <span class="hl str">'5'</span><span class="hl opt">-&gt;</span><span class="hl str">&quot;five&quot;</span><span class="hl opt">,</span><span class="hl str">'6'</span><span class="hl opt">-&gt;</span><span class="hl str">&quot;six&quot;</span><span class="hl opt">,</span><span class="hl str">'7'</span><span class="hl opt">-&gt;</span><span class="hl str">&quot;seven&quot;</span><span class="hl opt">,</span><span class="hl str">'8'</span><span class="hl opt">-&gt;</span><span class="hl str">&quot;eight&quot;</span><span class="hl opt">,</span><span class="hl str">'9'</span><span class="hl opt">-&gt;</span><span class="hl str">&quot;nine&quot;</span><span class="hl opt">)</span>
    <span class="hl kwa">def</span> <span class="hl kwd">apply</span><span class="hl opt">(</span>n<span class="hl opt">:</span> Int<span class="hl opt">) =</span> n<span class="hl opt">.</span>toString<span class="hl opt">.</span>toList<span class="hl opt">.</span><span class="hl kwd">map</span><span class="hl opt">(</span>c<span class="hl opt">=&gt;</span><span class="hl str">&quot; &quot;</span><span class="hl opt">+</span><span class="hl kwd">digit</span><span class="hl opt">(</span>c<span class="hl opt">)).</span>mkString
  <span class="hl opt">}</span>

  <span class="hl kwa">class</span> <span class="hl kwd">MeetingPlace</span><span class="hl opt">(</span>meetings<span class="hl opt">:</span> Int<span class="hl opt">) {</span>
    <span class="hl kwa">private val</span> meetingsLeft <span class="hl opt">=</span> <span class="hl kwa">new</span> atomic<span class="hl opt">.</span><span class="hl kwd">AtomicInteger</span><span class="hl opt">(</span>meetings<span class="hl opt">)</span>
    <span class="hl kwa">private val</span> creatureRef <span class="hl opt">=</span> <span class="hl kwa">new</span> atomic<span class="hl opt">.</span>AtomicReference<span class="hl opt">[</span>Creature<span class="hl opt">]</span>

    <span class="hl kwa">def</span> <span class="hl kwd">meet</span><span class="hl opt">(</span>incoming<span class="hl opt">:</span> Creature<span class="hl opt">) {</span>
      <span class="hl kwa">val</span> existing <span class="hl opt">=</span> creatureRef<span class="hl opt">.</span>get
      <span class="hl kwa">if</span> <span class="hl opt">(</span>existing <span class="hl opt">==</span> null<span class="hl opt">) {</span>
        <span class="hl kwa">if</span> <span class="hl opt">(!</span>creatureRef<span class="hl opt">.</span><span class="hl kwd">compareAndSet</span><span class="hl opt">(</span>existing<span class="hl opt">,</span>incoming<span class="hl opt">))</span> <span class="hl kwd">meet</span><span class="hl opt">(</span>incoming<span class="hl opt">);</span>
      <span class="hl opt">}</span>
      <span class="hl kwa">else</span> <span class="hl opt">{</span>
        <span class="hl kwa">val</span> newColor <span class="hl opt">=</span> Color<span class="hl opt">.</span><span class="hl kwd">doComplement</span><span class="hl opt">(</span>incoming<span class="hl opt">.</span>color<span class="hl opt">,</span>existing<span class="hl opt">.</span>color<span class="hl opt">)</span>      
        <span class="hl kwa">if</span> <span class="hl opt">(!</span>creatureRef<span class="hl opt">.</span><span class="hl kwd">compareAndSet</span><span class="hl opt">(</span>existing<span class="hl opt">,</span>null<span class="hl opt">))</span> <span class="hl kwd">meet</span><span class="hl opt">(</span>incoming<span class="hl opt">);</span>
        <span class="hl kwa">else</span> <span class="hl opt">{</span>
          meetingsLeft<span class="hl opt">.</span><span class="hl kwd">getAndDecrement</span><span class="hl opt">()</span> match <span class="hl opt">{</span>
            <span class="hl kwa">case</span> x <span class="hl kwa">if</span> <span class="hl opt">(</span>x<span class="hl opt">&gt;</span><span class="hl num">0</span><span class="hl opt">) =&gt;</span>
              existing<span class="hl opt">.</span><span class="hl kwd">setColor</span><span class="hl opt">(</span>incoming<span class="hl opt">.</span>id<span class="hl opt">,</span> newColor<span class="hl opt">,</span> x<span class="hl opt">==</span><span class="hl num">1</span><span class="hl opt">);</span>
              incoming<span class="hl opt">.</span><span class="hl kwd">setColor</span><span class="hl opt">(</span>existing<span class="hl opt">.</span>id<span class="hl opt">,</span> newColor<span class="hl opt">,</span> x<span class="hl opt">==</span><span class="hl num">1</span><span class="hl opt">);</span>
            <span class="hl kwa">case</span> _ <span class="hl opt">=&gt;</span>
              existing<span class="hl opt">.</span><span class="hl kwd">finish</span><span class="hl opt">()</span>
              incoming<span class="hl opt">.</span><span class="hl kwd">finish</span><span class="hl opt">()</span>
          <span class="hl opt">}</span>
        <span class="hl opt">}</span>
      <span class="hl opt">}</span>
    <span class="hl opt">}</span>
  <span class="hl opt">}</span>

  <span class="hl kwa">class</span> <span class="hl kwd">Dispatcher</span><span class="hl opt">(</span>bqc<span class="hl opt">:</span> BlockingQueue<span class="hl opt">[</span>Creature<span class="hl opt">])</span> <span class="hl kwa">extends</span> Runnable <span class="hl opt">{</span>
    <span class="hl kwa">def</span> <span class="hl kwd">run</span><span class="hl opt">() {</span>
      <span class="hl kwa">try</span> <span class="hl opt">{</span>
        <span class="hl kwa">while</span><span class="hl opt">(</span>true<span class="hl opt">)</span> bqc<span class="hl opt">.</span><span class="hl kwd">take</span><span class="hl opt">().</span><span class="hl kwd">run</span><span class="hl opt">()</span>
      <span class="hl opt">}</span>
      <span class="hl kwa">catch</span> <span class="hl opt">{</span> <span class="hl kwa">case</span> e<span class="hl opt">:</span> InterruptedException <span class="hl opt">=&gt; }</span>
    <span class="hl opt">}</span>
  <span class="hl opt">}</span>

  <span class="hl kwa">class</span> <span class="hl kwd">Creature</span><span class="hl opt">(</span>place<span class="hl opt">:</span> MeetingPlace<span class="hl opt">,</span> <span class="hl kwa">var</span> color<span class="hl opt">:</span> Color<span class="hl opt">.</span>Value<span class="hl opt">,</span> bqc<span class="hl opt">:</span> BlockingQueue<span class="hl opt">[</span>Creature<span class="hl opt">],</span> latch<span class="hl opt">:</span> CountDownLatch<span class="hl opt">) {</span>
    <span class="hl kwa">val</span> id <span class="hl opt">=</span> System<span class="hl opt">.</span><span class="hl kwd">identityHashCode</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">)</span>
    <span class="hl kwa">var</span> count <span class="hl opt">=</span> <span class="hl num">0</span>
    <span class="hl kwa">private var</span> sameCount <span class="hl opt">=</span> <span class="hl num">0</span>

    <span class="hl kwa">def</span> <span class="hl kwd">finish</span><span class="hl opt">() {</span> latch<span class="hl opt">.</span><span class="hl kwd">countDown</span><span class="hl opt">() }</span>
    <span class="hl kwa">def</span> <span class="hl kwd">setColor</span><span class="hl opt">(</span>id2<span class="hl opt">:</span> Int<span class="hl opt">,</span> newColor<span class="hl opt">:</span> Color<span class="hl opt">.</span>Value<span class="hl opt">,</span> complete<span class="hl opt">:</span> Boolean<span class="hl opt">) {</span>
      color <span class="hl opt">=</span> newColor
      count <span class="hl opt">+=</span> <span class="hl num">1</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>id<span class="hl opt">==</span>id2<span class="hl opt">)</span> sameCount <span class="hl opt">+=</span> <span class="hl num">1</span>
      <span class="hl kwa">if</span> <span class="hl opt">(!</span>complete<span class="hl opt">)</span> bqc<span class="hl opt">.</span><span class="hl kwd">add</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">)</span>
      <span class="hl kwa">else</span> <span class="hl kwd">finish</span><span class="hl opt">()</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">def</span> <span class="hl kwd">run</span><span class="hl opt">() {</span> place<span class="hl opt">.</span><span class="hl kwd">meet</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">) }</span>
    <span class="hl kwa">override def</span> <span class="hl kwd">toString</span><span class="hl opt">() =</span> count <span class="hl opt">+</span> <span class="hl kwd">Verbalize</span><span class="hl opt">(</span>sameCount<span class="hl opt">)</span>
  <span class="hl opt">}</span>

  <span class="hl kwa">def</span> <span class="hl kwd">run</span><span class="hl opt">(</span>n<span class="hl opt">:</span> Int<span class="hl opt">,</span> colors<span class="hl opt">:</span> Color<span class="hl opt">.</span>Value<span class="hl opt">*) {</span>
    <span class="hl kwa">val</span> place <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">MeetingPlace</span><span class="hl opt">(</span>n<span class="hl opt">)</span>
    <span class="hl kwa">val</span> bqc <span class="hl opt">=</span> <span class="hl kwa">new</span> ArrayBlockingQueue<span class="hl opt">[</span>Creature<span class="hl opt">](</span>colors<span class="hl opt">.</span>length<span class="hl opt">)</span>
    <span class="hl kwa">val</span> latch <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">CountDownLatch</span><span class="hl opt">(</span>colors<span class="hl opt">.</span>length <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">)</span>

    <span class="hl kwa">val</span> creatures <span class="hl opt">=</span> colors<span class="hl opt">.</span><span class="hl kwd">map</span><span class="hl opt">(</span>c <span class="hl opt">=&gt; {</span> <span class="hl kwd">print</span><span class="hl opt">(</span><span class="hl str">&quot; &quot;</span><span class="hl opt">+</span>c<span class="hl opt">) ;</span> <span class="hl kwa">new</span> <span class="hl kwd">Creature</span><span class="hl opt">(</span>place<span class="hl opt">,</span> c<span class="hl opt">,</span> bqc<span class="hl opt">,</span> latch<span class="hl opt">) })</span>
    println

    <span class="hl kwa">val</span> threads <span class="hl opt">=</span> colors<span class="hl opt">.</span><span class="hl kwd">map</span><span class="hl opt">(</span>_ <span class="hl opt">=&gt;</span> <span class="hl kwa">new</span> <span class="hl kwd">Thread</span><span class="hl opt">(</span><span class="hl kwa">new</span> <span class="hl kwd">Dispatcher</span><span class="hl opt">(</span>bqc<span class="hl opt">)))</span>
    threads<span class="hl opt">.</span><span class="hl kwd">foreach</span><span class="hl opt">(</span>_<span class="hl opt">.</span><span class="hl kwd">start</span><span class="hl opt">())</span>
    creatures<span class="hl opt">.</span><span class="hl kwd">foreach</span><span class="hl opt">(</span>c <span class="hl opt">=&gt;</span> bqc<span class="hl opt">.</span><span class="hl kwd">add</span><span class="hl opt">(</span>c<span class="hl opt">))</span>

    <span class="hl kwa">try</span> <span class="hl opt">{</span> latch<span class="hl opt">.</span>await <span class="hl opt">}</span>
    <span class="hl kwa">catch</span> <span class="hl opt">{</span> <span class="hl kwa">case</span> ie<span class="hl opt">:</span> InterruptedException <span class="hl opt">=&gt;</span> <span class="hl kwd">println</span><span class="hl opt">(</span><span class="hl str">&quot;Exiting with error: &quot;</span> <span class="hl opt">+</span> ie<span class="hl opt">) }</span>

    threads<span class="hl opt">.</span><span class="hl kwd">foreach</span><span class="hl opt">(</span>_<span class="hl opt">.</span><span class="hl kwd">interrupt</span><span class="hl opt">())</span>

    <span class="hl kwd">println</span><span class="hl opt">(</span> <span class="hl kwd">Verbalize</span> <span class="hl opt">( (</span><span class="hl num">0</span> <span class="hl opt">/:</span> creatures<span class="hl opt">)((</span>sum<span class="hl opt">,</span>c<span class="hl opt">) =&gt; {</span> <span class="hl kwd">println</span><span class="hl opt">(</span>c<span class="hl opt">) ;</span> sum <span class="hl opt">+</span> c<span class="hl opt">.</span>count <span class="hl opt">}) ) )</span>
    println
  <span class="hl opt">}</span>

  <span class="hl kwa">def</span> <span class="hl kwd">main</span><span class="hl opt">(</span>args<span class="hl opt">:</span> Array<span class="hl opt">[</span>String<span class="hl opt">]) {</span>
    <span class="hl kwa">import</span> Color<span class="hl opt">.</span>_

    <span class="hl kwa">val</span> n <span class="hl opt">=</span> <span class="hl kwa">try</span> <span class="hl opt">{</span> <span class="hl kwd">args</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">).</span>toInt <span class="hl opt">}</span> <span class="hl kwa">catch</span> <span class="hl opt">{</span> <span class="hl kwa">case</span> _ <span class="hl opt">=&gt;</span> <span class="hl num">600</span> <span class="hl opt">}</span>
    
    printColors
    println

    <span class="hl kwd">run</span><span class="hl opt">(</span>n<span class="hl opt">,</span>Blue<span class="hl opt">,</span>Red<span class="hl opt">,</span>Yellow<span class="hl opt">)</span>
    <span class="hl kwd">run</span><span class="hl opt">(</span>n<span class="hl opt">,</span>Blue<span class="hl opt">,</span>Red<span class="hl opt">,</span>Yellow<span class="hl opt">,</span>Red<span class="hl opt">,</span>Yellow<span class="hl opt">,</span>Blue<span class="hl opt">,</span>Red<span class="hl opt">,</span>Yellow<span class="hl opt">,</span>Red<span class="hl opt">,</span>Blue<span class="hl opt">)</span>
  <span class="hl opt">}</span>
<span class="hl opt">}</span>
