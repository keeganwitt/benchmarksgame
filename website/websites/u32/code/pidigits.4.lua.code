<span class="hl slc">-- The Computer Language Benchmarks Game</span>
<span class="hl slc">-- http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">-- Contributed by Wim Couwenberg</span>


<span class="hl slc">-- This is a pure lua implementation of the spigot algorithm for calculating</span>
<span class="hl slc">-- the digits of pi.  It combines the production step and the calculation of</span>
<span class="hl slc">-- the image of the interval [3, 4] into a single computation.  This is based</span>
<span class="hl slc">-- on the fact that for any integer n &gt;= 1 the following equation between</span>
<span class="hl slc">-- matrix products holds:</span>
<span class="hl slc">--</span>
<span class="hl slc">--              [ n  4*n + 2][4  3]   [4  3][2*n - 1  n - 1]</span>
<span class="hl slc">--              [ 0  2*n + 1][1  1] = [1  1][   2     n + 2]</span>
<span class="hl slc">--</span>
<span class="hl slc">-- 1 September 2008</span>


<span class="hl slc">-- the requested number of digits</span>
<span class="hl kwa">local</span> N <span class="hl opt">=</span> <span class="hl kwb">tonumber</span><span class="hl opt">(...)</span>

<span class="hl slc">-- Large numbers are expanded in base 2^exp.  Assumption: arithmetic in the Lua</span>
<span class="hl slc">-- interpreter is based on IEEE doubles and we don't need more than 4*N</span>
<span class="hl slc">-- productions to obtain the first N digits of pi.</span>
<span class="hl kwa">local</span> <span class="hl kwb">exp</span> <span class="hl opt">=</span> <span class="hl num">50</span> <span class="hl opt">-</span> math<span class="hl opt">.</span><span class="hl kwb">ceil</span><span class="hl opt">(</span>math<span class="hl opt">.</span><span class="hl kwb">log</span><span class="hl opt">(</span>N<span class="hl opt">)/</span>math<span class="hl opt">.</span><span class="hl kwb">log</span><span class="hl opt">(</span><span class="hl num">2</span><span class="hl opt">))</span>
<span class="hl kwa">local</span> base <span class="hl opt">=</span> <span class="hl num">2</span>^<span class="hl kwb">exp</span>

<span class="hl slc">-- hardwiring the base in the large number computations (instead of using it as</span>
<span class="hl slc">-- an upvalue) saves quite some time!  Therefore the core algorithms are</span>
<span class="hl slc">-- compiled dynamically for the base that is computed above.  (Idea courtesy of</span>
<span class="hl slc">-- Mike Pall.)</span>
<span class="hl kwa">local</span> algo <span class="hl opt">=</span> <span class="hl str">[[</span>
<span class="hl str">local function produce(n1, n2, d, n)</span>
<span class="hl str">    local c1, c2, c3 = 0, 0, 0</span>
<span class="hl str">    local f = 2*n + 1</span>
<span class="hl str">    local m11, m12 = 2*n - 1, n - 1</span>
<span class="hl str">    local      m22 =          n + 2</span>
<span class="hl str">    for i = 1, #n1 do</span>
<span class="hl str">        local n1i, n2i = n1[i], n2[i]</span>
<span class="hl str">        local x = m11*n1i + 2*n2i + c1</span>
<span class="hl str">        if x &lt; base then</span>
<span class="hl str">            n1[i], c1 = x, 0</span>
<span class="hl str">        else</span>
<span class="hl str">            c1 = x%base</span>
<span class="hl str">            n1[i], c1 = c1, (x - c1)/base</span>
<span class="hl str">        end</span>
<span class="hl str">        x = m12*n1i + m22*n2i + c2</span>
<span class="hl str">        if x &lt; base then</span>
<span class="hl str">            n2[i], c2 = x, 0</span>
<span class="hl str">        else</span>
<span class="hl str">            c2 = x%base</span>
<span class="hl str">            n2[i], c2 = c2, (x - c2)/base</span>
<span class="hl str">        end</span>
<span class="hl str">        x = f*d[i] + c3</span>
<span class="hl str">        if x &lt; base then</span>
<span class="hl str">            d[i], c3 = x, 0</span>
<span class="hl str">        else</span>
<span class="hl str">            c3 = x%base</span>
<span class="hl str">            d[i], c3 = c3, (x - c3)/base</span>
<span class="hl str">        end</span>
<span class="hl str">    end</span>
<span class="hl str">    if c1 ~= 0 or c3 ~= 0 then</span>
<span class="hl str">        local nn1 = #n1 + 1</span>
<span class="hl str">        n1[nn1], n2[nn1], d[nn1] = c1, c2, c3</span>
<span class="hl str">    end</span>
<span class="hl str">end</span>
<span class="hl str"></span>
<span class="hl str">local function extract(n1, n2, d, n)</span>
<span class="hl str">    local c1, c2 = 0, 0</span>
<span class="hl str">    local f = -10*n</span>
<span class="hl str">    for i = 1, #n1 do</span>
<span class="hl str">        local fdi = f*d[i]</span>
<span class="hl str">        local x = 10*n1[i] + fdi + c1</span>
<span class="hl str">        if x &lt; base and x &gt;= 0 then</span>
<span class="hl str">            n1[i], c1 = x, 0</span>
<span class="hl str">        else</span>
<span class="hl str">            c1 = x%base</span>
<span class="hl str">            n1[i], c1 = c1, (x - c1)/base</span>
<span class="hl str">        end</span>
<span class="hl str">        x = 10*n2[i] + fdi + c2</span>
<span class="hl str">        if x &lt; base and x &gt;= 0 then</span>
<span class="hl str">            n2[i], c2 = x, 0</span>
<span class="hl str">        else</span>
<span class="hl str">            c2 = x%base</span>
<span class="hl str">            n2[i], c2 = c2, (x - c2)/base</span>
<span class="hl str">        end</span>
<span class="hl str">    end</span>
<span class="hl str">    if c1 ~= 0 then</span>
<span class="hl str">        local nn = #n1 + 1</span>
<span class="hl str">        n1[nn], n2[nn], d[nn] = c1, c2, 0</span>
<span class="hl str">    end</span>
<span class="hl str">end</span>
<span class="hl str"></span>
<span class="hl str">return produce, extract</span>
<span class="hl str">]]</span>

<span class="hl kwa">local</span> produce<span class="hl opt">,</span> extract <span class="hl opt">=</span> <span class="hl kwd">loadstring</span><span class="hl opt">(</span><span class="hl kwb">string</span><span class="hl opt">.</span><span class="hl kwb">gsub</span><span class="hl opt">(</span>algo<span class="hl opt">,</span> <span class="hl str">&quot;base&quot;</span><span class="hl opt">,</span> <span class="hl kwb">tostring</span><span class="hl opt">(</span>base<span class="hl opt">)))()</span>

<span class="hl kwa">local function</span> <span class="hl kwd">digit</span><span class="hl opt">(</span>n1<span class="hl opt">,</span> n2<span class="hl opt">,</span> d<span class="hl opt">)</span>
    <span class="hl kwa">local</span> nn <span class="hl opt">= #</span>n1
    <span class="hl kwa">local</span> dnn <span class="hl opt">=</span> d<span class="hl opt">[</span>nn<span class="hl opt">]</span>
    <span class="hl kwa">if</span> dnn <span class="hl opt">~=</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
        <span class="hl kwa">local</span> n1nn<span class="hl opt">,</span> n2nn <span class="hl opt">=</span> n1<span class="hl opt">[</span>nn<span class="hl opt">],</span> n2<span class="hl opt">[</span>nn<span class="hl opt">]</span>
        <span class="hl kwa">local</span> r1<span class="hl opt">,</span> r2 <span class="hl opt">=</span> n1nn<span class="hl opt">%</span>dnn<span class="hl opt">,</span> n2nn<span class="hl opt">%</span>dnn
        <span class="hl kwa">local</span> p1<span class="hl opt">,</span> p2 <span class="hl opt">= (</span>n1nn <span class="hl opt">-</span> r1<span class="hl opt">)/</span>dnn<span class="hl opt">, (</span>n2nn <span class="hl opt">-</span> r2<span class="hl opt">)/</span>dnn
        <span class="hl kwa">if</span> p1 <span class="hl opt">==</span> p2 <span class="hl kwa">and</span> p1 <span class="hl opt">&lt;=</span> r1 <span class="hl kwa">and</span> p2 <span class="hl opt">&lt;=</span> r2 <span class="hl kwa">then return</span> p1 <span class="hl kwa">end</span>
    <span class="hl kwa">end</span>
<span class="hl kwa">end</span>

<span class="hl slc">-- first approximants are 4/1 and 3/1</span>
<span class="hl slc">-- these are expressed in large numbers n1/d, n2/d</span>
<span class="hl kwa">local</span> n1 <span class="hl opt">= {</span><span class="hl num">4</span><span class="hl opt">}</span>
<span class="hl kwa">local</span> n2 <span class="hl opt">= {</span><span class="hl num">3</span><span class="hl opt">}</span>
<span class="hl kwa">local</span> d  <span class="hl opt">= {</span><span class="hl num">1</span><span class="hl opt">}</span>

<span class="hl slc">-- next production step index </span>
<span class="hl kwa">local</span> n <span class="hl opt">=</span> <span class="hl num">1</span>

<span class="hl slc">-- here goes...</span>
<span class="hl kwa">local</span> <span class="hl kwb">write</span> <span class="hl opt">=</span> io<span class="hl opt">.</span><span class="hl kwb">write</span>
<span class="hl kwa">local</span> digits <span class="hl opt">=</span> <span class="hl num">0</span>
<span class="hl kwa">while</span> digits <span class="hl opt">&lt;</span> N <span class="hl kwa">do</span>
    <span class="hl kwa">local</span> g <span class="hl opt">=</span> <span class="hl kwd">digit</span><span class="hl opt">(</span>n1<span class="hl opt">,</span> n2<span class="hl opt">,</span> d<span class="hl opt">)</span>
    <span class="hl kwa">if</span> g <span class="hl kwa">then</span>
        <span class="hl kwb">write</span><span class="hl opt">(</span>g<span class="hl opt">)</span>
        <span class="hl kwd">extract</span><span class="hl opt">(</span>n1<span class="hl opt">,</span> n2<span class="hl opt">,</span> d<span class="hl opt">,</span> g<span class="hl opt">)</span>
        digits <span class="hl opt">=</span> digits <span class="hl opt">+</span> <span class="hl num">1</span>
        <span class="hl kwa">if</span> digits<span class="hl opt">%</span><span class="hl num">10</span> <span class="hl opt">==</span> <span class="hl num">0</span> <span class="hl kwa">then</span> <span class="hl kwb">write</span><span class="hl opt">(</span><span class="hl str">&quot;</span><span class="hl esc">\t</span><span class="hl str">:&quot;</span><span class="hl opt">,</span> digits<span class="hl opt">,</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">)</span> <span class="hl kwa">end</span>
    <span class="hl kwa">else</span>
        <span class="hl kwd">produce</span><span class="hl opt">(</span>n1<span class="hl opt">,</span> n2<span class="hl opt">,</span> d<span class="hl opt">,</span> n<span class="hl opt">)</span>
        n <span class="hl opt">=</span> n <span class="hl opt">+</span> <span class="hl num">1</span>
    <span class="hl kwa">end</span>
<span class="hl kwa">end</span>

<span class="hl kwa">if</span> N<span class="hl opt">%</span><span class="hl num">10</span> <span class="hl opt">~=</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
    <span class="hl kwb">write</span><span class="hl opt">(</span><span class="hl kwb">string</span><span class="hl opt">.</span><span class="hl kwd">rep</span><span class="hl opt">(</span><span class="hl str">&quot; &quot;</span><span class="hl opt">,</span> <span class="hl num">10</span> <span class="hl opt">-</span> N<span class="hl opt">%</span><span class="hl num">10</span><span class="hl opt">),</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span><span class="hl str">:&quot;</span><span class="hl opt">,</span> N<span class="hl opt">,</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">)</span>
<span class="hl kwa">end</span>
