<span class="hl opt">#</span>lang racket<span class="hl opt">/</span>base

<span class="hl slc">;;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;;; http://benchmarksgame.alioth.debian.org/</span>

<span class="hl slc">;;; Derived from C version by Joern Inge Vestgaarden </span>
<span class="hl slc">;;;                 and Jorge Peixoto de Morais Neto</span>
<span class="hl slc">;;; Contributed by Sam Tobin-Hochstadt</span>

<span class="hl opt">(</span><span class="hl kwa">require</span> racket<span class="hl opt">/</span>cmdline racket<span class="hl opt">/</span>require <span class="hl opt">(</span><span class="hl kwa">for-syntax</span> racket<span class="hl opt">/</span>base<span class="hl opt">) (</span><span class="hl kwa">only-in</span> racket<span class="hl opt">/</span>flonum for<span class="hl opt">/</span>flvector<span class="hl opt">)</span>
         <span class="hl opt">(</span><span class="hl kwa">filtered-in</span> <span class="hl opt">(</span>Î» <span class="hl opt">(</span><span class="hl kwa">name</span><span class="hl opt">) (</span><span class="hl kwa">regexp-replace</span> <span class="hl opt">#</span>rx<span class="hl str">&quot;unsafe-&quot;</span> name <span class="hl str">&quot;&quot;</span><span class="hl opt">))</span>
                       racket<span class="hl opt">/</span>unsafe<span class="hl opt">/</span>ops<span class="hl opt">))</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">+</span>alu<span class="hl opt">+</span>
  <span class="hl opt">(</span><span class="hl kwa">bytes-append</span> <span class="hl opt">#</span><span class="hl str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span>
                <span class="hl opt">#</span><span class="hl str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span>
                <span class="hl opt">#</span><span class="hl str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span>
                <span class="hl opt">#</span><span class="hl str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span>
                <span class="hl opt">#</span><span class="hl str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span>
                <span class="hl opt">#</span><span class="hl str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span>
                <span class="hl opt">#</span><span class="hl str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span><span class="hl opt">))</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">build-table</span> t<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">cons</span> <span class="hl opt">(</span><span class="hl kwa">apply</span> bytes <span class="hl opt">(</span><span class="hl kwa">map</span> <span class="hl opt">(</span><span class="hl kwa">compose</span> char-<span class="hl opt">&gt;</span>integer car<span class="hl opt">)</span> t<span class="hl opt">))</span>
        <span class="hl opt">(</span><span class="hl kwa">for</span><span class="hl opt">/</span>flvector <span class="hl opt">([</span>i t<span class="hl opt">]) (</span><span class="hl kwa">cdr</span> i<span class="hl opt">))))</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> IUB
  <span class="hl opt">(</span><span class="hl kwa">build-table</span>
   <span class="hl opt">'([#</span><span class="hl esc">\a</span> . <span class="hl num">0.27</span><span class="hl opt">] [#</span>\c . <span class="hl num">0.12</span><span class="hl opt">] [#</span>\g . <span class="hl num">0.12</span><span class="hl opt">] [#</span><span class="hl esc">\t</span> . <span class="hl num">0.27</span><span class="hl opt">] [#</span>\B . <span class="hl num">0.02</span><span class="hl opt">]</span>
     <span class="hl opt">[#</span>\D . <span class="hl num">0.02</span><span class="hl opt">] [#</span>\H . <span class="hl num">0.02</span><span class="hl opt">] [#</span>\K . <span class="hl num">0.02</span><span class="hl opt">] [#</span>\M . <span class="hl num">0.02</span><span class="hl opt">] [#</span>\N . <span class="hl num">0.02</span><span class="hl opt">]</span>
     <span class="hl opt">[#</span>\R . <span class="hl num">0.02</span><span class="hl opt">] [#</span>\S . <span class="hl num">0.02</span><span class="hl opt">] [#</span>\V . <span class="hl num">0.02</span><span class="hl opt">] [#</span>\W . <span class="hl num">0.02</span><span class="hl opt">] [#</span>\Y . <span class="hl num">0.02</span><span class="hl opt">])))</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> HOMOSAPIEN
  <span class="hl opt">(</span><span class="hl kwa">build-table</span> <span class="hl opt">'([#</span><span class="hl esc">\a</span> . <span class="hl num">0.3029549426680</span><span class="hl opt">] [#</span>\c . <span class="hl num">0.1979883004921</span><span class="hl opt">]</span>
                 <span class="hl opt">[#</span>\g . <span class="hl num">0.1975473066391</span><span class="hl opt">] [#</span><span class="hl esc">\t</span> . <span class="hl num">0.3015094502008</span><span class="hl opt">])))</span>

<span class="hl slc">;; -------------</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> line-length <span class="hl num">60</span><span class="hl opt">)</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> IA <span class="hl num">3877</span><span class="hl opt">)</span>
<span class="hl opt">(</span><span class="hl kwa">define</span> IC <span class="hl num">29573</span><span class="hl opt">)</span>
<span class="hl opt">(</span><span class="hl kwa">define</span> IM <span class="hl num">139968</span><span class="hl opt">)</span>

<span class="hl slc">;; -------------------------------</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> LAST <span class="hl num">42</span><span class="hl opt">)</span>

<span class="hl slc">;; -------------------------------</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">make-cumulative-table</span> frequency-table<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">define</span> bs <span class="hl opt">(</span><span class="hl kwa">car</span> frequency-table<span class="hl opt">))</span>
  <span class="hl opt">(</span><span class="hl kwa">define</span> ps <span class="hl opt">(</span><span class="hl kwa">cdr</span> frequency-table<span class="hl opt">))</span>
  <span class="hl opt">(</span><span class="hl kwa">define</span> len <span class="hl opt">(</span><span class="hl kwa">bytes-length</span> bs<span class="hl opt">))</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> loop <span class="hl opt">([</span>i <span class="hl num">0</span><span class="hl opt">] [</span>cum <span class="hl num">0.0</span><span class="hl opt">])</span>
    <span class="hl opt">(</span><span class="hl kwa">when</span> <span class="hl opt">(</span><span class="hl kwa">fx</span><span class="hl opt">&lt;</span> i len<span class="hl opt">)</span>
      <span class="hl opt">(</span><span class="hl kwa">define</span> this <span class="hl opt">(</span><span class="hl kwa">flvector-ref</span> ps i<span class="hl opt">))</span>
      <span class="hl opt">(</span><span class="hl kwa">define</span> new <span class="hl opt">(</span><span class="hl kwa">fl</span><span class="hl opt">+</span> this cum<span class="hl opt">))</span>
      <span class="hl opt">(</span><span class="hl kwa">flvector-set</span><span class="hl opt">!</span> ps i new<span class="hl opt">)</span>
      <span class="hl opt">(</span><span class="hl kwa">loop</span> <span class="hl opt">(</span><span class="hl kwa">fx</span><span class="hl opt">+</span> <span class="hl num">1</span> i<span class="hl opt">)</span> new<span class="hl opt">))))</span>

<span class="hl slc">;; -------------</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">random-next</span> max<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">set</span><span class="hl opt">!</span> LAST <span class="hl opt">(</span><span class="hl kwa">fxmodulo</span> <span class="hl opt">(</span><span class="hl kwa">fx</span><span class="hl opt">+</span> IC <span class="hl opt">(</span><span class="hl kwa">fx</span><span class="hl opt">*</span> LAST IA<span class="hl opt">))</span> IM<span class="hl opt">))</span>
  <span class="hl opt">(</span><span class="hl kwa">fl</span><span class="hl opt">/ (</span><span class="hl kwa">fl</span><span class="hl opt">*</span> max <span class="hl opt">(</span><span class="hl kwa">fx-</span><span class="hl opt">&gt;</span>fl LAST<span class="hl opt">)) (</span><span class="hl kwa">fx-</span><span class="hl opt">&gt;</span>fl IM<span class="hl opt">)))</span>

<span class="hl slc">;; -------------</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">repeat-fasta</span> s count<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">define</span> out <span class="hl opt">(</span><span class="hl kwa">current-output-port</span><span class="hl opt">))</span>  
  <span class="hl opt">(</span><span class="hl kwa">define</span> len <span class="hl opt">(</span><span class="hl kwa">bytes-length</span> s<span class="hl opt">))</span>
  <span class="hl opt">(</span><span class="hl kwa">define</span> s2 <span class="hl opt">(</span><span class="hl kwa">make-bytes</span> <span class="hl opt">(</span><span class="hl kwa">fx</span><span class="hl opt">+</span> len line-length<span class="hl opt">)))</span>  
  <span class="hl opt">(</span><span class="hl kwa">bytes-copy</span><span class="hl opt">!</span> s2 <span class="hl num">0</span> s <span class="hl num">0</span> len<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">bytes-copy</span><span class="hl opt">!</span> s2 len s <span class="hl num">0</span> line-length<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> loop <span class="hl opt">([</span>count count<span class="hl opt">] [</span>pos <span class="hl num">0</span><span class="hl opt">])</span>
    <span class="hl opt">(</span><span class="hl kwa">define</span> line <span class="hl opt">(</span><span class="hl kwa">fxmin</span> line-length count<span class="hl opt">))</span>
    <span class="hl opt">(</span><span class="hl kwa">write-bytes</span> s2 out pos <span class="hl opt">(</span><span class="hl kwa">fx</span><span class="hl opt">+</span> pos line<span class="hl opt">))</span>
    <span class="hl opt">(</span><span class="hl kwa">newline</span> out<span class="hl opt">)</span>    
    <span class="hl opt">(</span><span class="hl kwa">define</span> count<span class="hl opt">* (</span><span class="hl kwa">fx-</span> count line<span class="hl opt">))</span>
    <span class="hl opt">(</span><span class="hl kwa">when</span> <span class="hl opt">(</span><span class="hl kwa">fx</span><span class="hl opt">&gt;</span> count<span class="hl opt">*</span> <span class="hl num">0</span><span class="hl opt">)</span>
      <span class="hl opt">(</span><span class="hl kwa">define</span> pos<span class="hl opt">* (</span><span class="hl kwa">fx</span><span class="hl opt">+</span> pos line<span class="hl opt">))</span>      
      <span class="hl opt">(</span><span class="hl kwa">loop</span> count<span class="hl opt">* (</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">fx</span><span class="hl opt">&gt;=</span> pos<span class="hl opt">*</span> len<span class="hl opt">) (</span><span class="hl kwa">fx-</span> pos<span class="hl opt">*</span> len<span class="hl opt">)</span> pos<span class="hl opt">*)))))</span>


<span class="hl slc">;; -------------</span>

<span class="hl opt">(</span><span class="hl kwa">define-syntax-rule</span> <span class="hl opt">(</span><span class="hl kwa">random-fasta</span> genelist cnt<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">()</span>
    <span class="hl opt">(</span><span class="hl kwa">define</span> out <span class="hl opt">(</span><span class="hl kwa">current-output-port</span><span class="hl opt">))</span>
    <span class="hl opt">(</span><span class="hl kwa">define</span> ps <span class="hl opt">(</span><span class="hl kwa">cdr</span> genelist<span class="hl opt">))</span>
    <span class="hl opt">(</span><span class="hl kwa">define</span> cs <span class="hl opt">(</span><span class="hl kwa">car</span> genelist<span class="hl opt">))</span>
    <span class="hl opt">(</span><span class="hl kwa">let</span> loop <span class="hl opt">([</span>count cnt<span class="hl opt">])</span>
      <span class="hl opt">(</span><span class="hl kwa">define</span> line <span class="hl opt">(</span><span class="hl kwa">fxmin</span> line-length count<span class="hl opt">))</span> 
      <span class="hl opt">(</span><span class="hl kwa">define</span> buf <span class="hl opt">(</span><span class="hl kwa">make-bytes</span> <span class="hl opt">(</span><span class="hl kwa">fx</span><span class="hl opt">+</span> <span class="hl num">1</span> line-length<span class="hl opt">)))</span>
      <span class="hl opt">(</span><span class="hl kwa">let</span> inner <span class="hl opt">([</span>pos <span class="hl num">0</span><span class="hl opt">])</span>
        <span class="hl opt">(</span><span class="hl kwa">define</span> r <span class="hl opt">(</span><span class="hl kwa">random-next</span> <span class="hl num">1.0</span><span class="hl opt">))</span>
        <span class="hl opt">(</span><span class="hl kwa">define</span> i <span class="hl opt">(</span><span class="hl kwa">let</span> wh <span class="hl opt">([</span>i <span class="hl num">0</span><span class="hl opt">]) (</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">fl</span><span class="hl opt">&lt; (</span><span class="hl kwa">flvector-ref</span> ps i<span class="hl opt">)</span> r<span class="hl opt">) (</span><span class="hl kwa">wh</span> <span class="hl opt">(</span><span class="hl kwa">fx</span><span class="hl opt">+</span> i <span class="hl num">1</span><span class="hl opt">))</span> i<span class="hl opt">)))</span>
        <span class="hl opt">(</span><span class="hl kwa">bytes-set</span><span class="hl opt">!</span> buf pos <span class="hl opt">(</span><span class="hl kwa">bytes-ref</span> cs i<span class="hl opt">))</span>
        <span class="hl opt">(</span><span class="hl kwa">define</span> pos<span class="hl opt">+ (</span><span class="hl kwa">fx</span><span class="hl opt">+</span> pos <span class="hl num">1</span><span class="hl opt">))</span>
        <span class="hl opt">(</span><span class="hl kwa">when</span> <span class="hl opt">(</span><span class="hl kwa">fx</span><span class="hl opt">&lt;</span> pos<span class="hl opt">+</span> line<span class="hl opt">)</span>
          <span class="hl opt">(</span><span class="hl kwa">inner</span> pos<span class="hl opt">+)))</span>
      <span class="hl opt">(</span><span class="hl kwa">bytes-set</span><span class="hl opt">!</span> buf line <span class="hl opt">(</span><span class="hl kwa">char-</span><span class="hl opt">&gt;</span>integer <span class="hl opt">#</span><span class="hl esc">\n</span>ewline<span class="hl opt">))</span>
      <span class="hl opt">(</span><span class="hl kwa">write-bytes</span> buf out <span class="hl num">0</span> <span class="hl opt">(</span><span class="hl kwa">fx</span><span class="hl opt">+</span> line <span class="hl num">1</span><span class="hl opt">))</span>
      <span class="hl opt">(</span><span class="hl kwa">define</span> count- <span class="hl opt">(</span><span class="hl kwa">fx-</span> count line<span class="hl opt">))</span>
      <span class="hl opt">(</span><span class="hl kwa">when</span> <span class="hl opt">(</span><span class="hl kwa">fx</span><span class="hl opt">&gt;</span> count- <span class="hl num">0</span><span class="hl opt">)</span>
        <span class="hl opt">(</span><span class="hl kwa">loop</span> count-<span class="hl opt">)))))</span>

<span class="hl slc">;; -------------------------------</span>
  
<span class="hl opt">(</span><span class="hl kwa">define</span> n <span class="hl opt">(</span><span class="hl kwa">command-line</span> <span class="hl opt">#:</span>args <span class="hl opt">(</span><span class="hl kwa">n</span><span class="hl opt">) (</span><span class="hl kwa">string-</span><span class="hl opt">&gt;</span>number n<span class="hl opt">)))</span>

<span class="hl opt">(</span><span class="hl kwa">make-cumulative-table</span> IUB<span class="hl opt">)</span>
<span class="hl opt">(</span><span class="hl kwa">make-cumulative-table</span> HOMOSAPIEN<span class="hl opt">)</span>

<span class="hl opt">(</span><span class="hl kwa">display</span> <span class="hl str">&quot;&gt;ONE Homo sapiens alu</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">)</span>
<span class="hl opt">(</span><span class="hl kwa">repeat-fasta</span> <span class="hl opt">+</span>alu<span class="hl opt">+ (*</span> n <span class="hl num">2</span><span class="hl opt">))</span>
<span class="hl opt">(</span><span class="hl kwa">display</span> <span class="hl str">&quot;&gt;TWO IUB ambiguity codes</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">)</span>
<span class="hl opt">(</span><span class="hl kwa">random-fasta</span> IUB <span class="hl opt">(*</span> n <span class="hl num">3</span><span class="hl opt">))</span>
<span class="hl opt">(</span><span class="hl kwa">display</span> <span class="hl str">&quot;&gt;THREE Homo sapiens frequency</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">)</span>
<span class="hl opt">(</span><span class="hl kwa">random-fasta</span> HOMOSAPIEN <span class="hl opt">(*</span> n <span class="hl num">5</span><span class="hl opt">))</span>
