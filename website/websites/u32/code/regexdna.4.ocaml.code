<span class="hl com">(*</span>
<span class="hl com"> * The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * Contributed by Paolo Ribeca, August 2011</span>
<span class="hl com"> *</span>
<span class="hl com"> * The regexp machinery comes from a previous OCaml version by</span>
<span class="hl com"> *  Christophe TROESTLER and Mauricio Fernandez</span>
<span class="hl com"> *)</span>

<span class="hl kwa">let</span> workers <span class="hl opt">=</span> <span class="hl num">16</span>

<span class="hl kwa">let</span> variants<span class="hl opt">,</span> variants_to_string <span class="hl opt">=</span>
  <span class="hl kwa">let</span> variants <span class="hl opt">= [</span>|
    <span class="hl str">&quot;agggtaaa</span><span class="hl esc">\\</span><span class="hl str">|tttaccct&quot;</span><span class="hl opt">;</span>
    <span class="hl str">&quot;[cgt]gggtaaa</span><span class="hl esc">\\</span><span class="hl str">|tttaccc[acg]&quot;</span><span class="hl opt">;</span>
    <span class="hl str">&quot;a[act]ggtaaa</span><span class="hl esc">\\</span><span class="hl str">|tttacc[agt]t&quot;</span><span class="hl opt">;</span>
    <span class="hl str">&quot;ag[act]gtaaa</span><span class="hl esc">\\</span><span class="hl str">|tttac[agt]ct&quot;</span><span class="hl opt">;</span>
    <span class="hl str">&quot;agg[act]taaa</span><span class="hl esc">\\</span><span class="hl str">|ttta[agt]cct&quot;</span><span class="hl opt">;</span>
    <span class="hl str">&quot;aggg[acg]aaa</span><span class="hl esc">\\</span><span class="hl str">|ttt[cgt]ccct&quot;</span><span class="hl opt">;</span>
    <span class="hl str">&quot;agggt[cgt]aa</span><span class="hl esc">\\</span><span class="hl str">|tt[acg]accct&quot;</span><span class="hl opt">;</span>
    <span class="hl str">&quot;agggta[cgt]a</span><span class="hl esc">\\</span><span class="hl str">|t[acg]taccct&quot;</span><span class="hl opt">;</span>
    <span class="hl str">&quot;agggtaa[cgt]</span><span class="hl esc">\\</span><span class="hl str">|[acg]ttaccct&quot;</span>
  |<span class="hl opt">]</span>
  <span class="hl com">(* Remove the &quot;\\&quot; which is mandatory in OCaml regex *)</span>
  <span class="hl kwa">and</span> re_bs <span class="hl opt">=</span> <span class="hl kwc">Str</span><span class="hl opt">.</span>regexp_string <span class="hl str">&quot;</span><span class="hl esc">\\</span><span class="hl str">&quot;</span> <span class="hl kwa">in</span>
  <span class="hl kwc">Array</span><span class="hl opt">.</span>map <span class="hl kwc">Str</span><span class="hl opt">.</span>regexp_case_fold variants<span class="hl opt">,</span>
  <span class="hl kwc">Array</span><span class="hl opt">.</span>map <span class="hl opt">(</span><span class="hl kwc">Str</span><span class="hl opt">.</span>global_replace re_bs <span class="hl str">&quot;&quot;</span><span class="hl opt">)</span> variants

<span class="hl kwa">let</span> iupacs <span class="hl opt">=</span>
  <span class="hl kwc">Array</span><span class="hl opt">.</span>map <span class="hl opt">(</span><span class="hl kwa">fun</span> <span class="hl opt">(</span>re<span class="hl opt">,</span> s<span class="hl opt">) -&gt;</span> <span class="hl kwc">Str</span><span class="hl opt">.</span>regexp_case_fold re<span class="hl opt">,</span> s<span class="hl opt">) [</span>|
    <span class="hl str">&quot;B&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(c|g|t)&quot;</span><span class="hl opt">;</span>
    <span class="hl str">&quot;D&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(a|g|t)&quot;</span><span class="hl opt">;</span>
    <span class="hl str">&quot;H&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(a|c|t)&quot;</span><span class="hl opt">;</span>
    <span class="hl str">&quot;K&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(g|t)&quot;</span><span class="hl opt">;</span>
    <span class="hl str">&quot;M&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(a|c)&quot;</span><span class="hl opt">;</span>
    <span class="hl str">&quot;N&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(a|c|g|t)&quot;</span><span class="hl opt">;</span>
    <span class="hl str">&quot;R&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(a|g)&quot;</span><span class="hl opt">;</span>
    <span class="hl str">&quot;S&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(c|g)&quot;</span><span class="hl opt">;</span>
    <span class="hl str">&quot;V&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(a|c|g)&quot;</span><span class="hl opt">;</span>
    <span class="hl str">&quot;W&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(a|t)&quot;</span><span class="hl opt">;</span>
    <span class="hl str">&quot;Y&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(c|t)&quot;</span>
  |<span class="hl opt">]</span>

<span class="hl com">(* Read all of a redirected FASTA format file from stdin *)</span>
<span class="hl kwa">let</span> file_data<span class="hl opt">,</span> file_length <span class="hl opt">=</span>
  <span class="hl kwa">let</span> b <span class="hl opt">=</span> <span class="hl kwc">Buffer</span><span class="hl opt">.</span>create <span class="hl num">0xffffff</span> <span class="hl kwa">and</span> s <span class="hl opt">=</span> <span class="hl kwc">String</span><span class="hl opt">.</span>create <span class="hl num">0xfff</span> <span class="hl kwa">and</span> r <span class="hl opt">=</span> <span class="hl kwb">ref</span> <span class="hl num">1</span> <span class="hl kwa">in</span>
  <span class="hl kwa">while</span> <span class="hl opt">!</span>r <span class="hl opt">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">do</span>
    r <span class="hl opt">:=</span> input stdin s <span class="hl num">0 0xfff</span><span class="hl opt">;</span> <span class="hl kwc">Buffer</span><span class="hl opt">.</span>add_substring b s <span class="hl num">0</span> <span class="hl opt">!</span>r
  <span class="hl kwa">done</span><span class="hl opt">;</span>
  <span class="hl kwc">Buffer</span><span class="hl opt">.</span>contents b<span class="hl opt">,</span> <span class="hl kwc">Buffer</span><span class="hl opt">.</span>length b

<span class="hl com">(* Remove FASTA sequence descriptions and all linefeed characters *)</span>
<span class="hl kwa">let</span> dna <span class="hl opt">=</span> <span class="hl kwc">Str</span><span class="hl opt">.</span>global_replace <span class="hl opt">(</span><span class="hl kwc">Str</span><span class="hl opt">.</span>regexp <span class="hl str">&quot;^&gt;.*$</span><span class="hl esc">\\</span><span class="hl str">|</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">)</span> <span class="hl str">&quot;&quot;</span> file_data
<span class="hl kwa">let</span> code_length <span class="hl opt">=</span> <span class="hl kwc">String</span><span class="hl opt">.</span>length dna

<span class="hl com">(* Count matches of [re] *)</span>
<span class="hl kwa">let</span> count re s <span class="hl opt">=</span>
  <span class="hl kwa">let</span> i <span class="hl opt">=</span> <span class="hl kwb">ref</span> <span class="hl num">0</span> <span class="hl kwa">and</span> n <span class="hl opt">=</span> <span class="hl kwb">ref</span> <span class="hl num">0</span> <span class="hl kwa">in</span>
  <span class="hl kwa">try</span>
    <span class="hl kwa">while true do</span>
      i <span class="hl opt">:=</span> <span class="hl num">1</span> <span class="hl opt">+</span> <span class="hl kwc">Str</span><span class="hl opt">.</span>search_forward re s <span class="hl opt">!</span>i<span class="hl opt">;</span>
      incr n
    <span class="hl kwa">done</span><span class="hl opt">;</span>
    <span class="hl kwa">assert false</span>
  <span class="hl kwa">with</span> <span class="hl kwd">Not_found</span> <span class="hl opt">-&gt; !</span>n

<span class="hl kwa">let</span> <span class="hl opt">() =</span>
  <span class="hl kwa">let</span> chunk_size <span class="hl opt">=</span> code_length <span class="hl opt">/</span> workers
  <span class="hl kwa">and</span> rem <span class="hl opt">=</span> code_length <span class="hl kwa">mod</span> workers <span class="hl kwa">in</span>
  <span class="hl kwa">assert</span> <span class="hl opt">(</span>chunk_size <span class="hl opt">&gt;=</span> <span class="hl num">7</span><span class="hl opt">);</span>
  <span class="hl kwa">let</span> w <span class="hl opt">=</span> <span class="hl kwc">Array</span><span class="hl opt">.</span>make workers stdin
  <span class="hl kwa">and</span> red_workers <span class="hl opt">=</span> workers <span class="hl opt">-</span> <span class="hl num">1</span> <span class="hl kwa">in</span>
  <span class="hl kwa">for</span> i <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> red_workers <span class="hl kwa">do</span>
    <span class="hl kwa">let</span> delta <span class="hl opt">=</span> <span class="hl kwa">if</span> i <span class="hl opt">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span> <span class="hl num">7</span> <span class="hl kwa">else</span> <span class="hl num">0</span> <span class="hl kwa">in</span>
    <span class="hl kwa">let</span> lo <span class="hl opt">=</span> i <span class="hl opt">*</span> chunk_size <span class="hl opt">+</span> min i rem <span class="hl opt">-</span> delta <span class="hl kwa">in</span>
    <span class="hl kwa">let</span> len <span class="hl opt">=</span> chunk_size <span class="hl opt">+ (</span><span class="hl kwa">if</span> i <span class="hl opt">&lt;</span> rem <span class="hl kwa">then</span> <span class="hl num">1</span> <span class="hl kwa">else</span> <span class="hl num">0</span><span class="hl opt">) +</span> delta
    <span class="hl kwa">and</span> input<span class="hl opt">,</span> output <span class="hl opt">=</span> <span class="hl kwc">Unix</span><span class="hl opt">.</span>pipe <span class="hl opt">()</span> <span class="hl kwa">in</span>
    <span class="hl kwa">match</span> <span class="hl kwc">Unix</span><span class="hl opt">.</span>fork <span class="hl opt">()</span> <span class="hl kwa">with</span>
    | <span class="hl num">0</span> <span class="hl opt">-&gt;</span>
      <span class="hl kwc">Unix</span><span class="hl opt">.</span>close input<span class="hl opt">;</span>
      <span class="hl kwa">let</span> chunk <span class="hl opt">=</span> <span class="hl kwc">String</span><span class="hl opt">.</span>sub dna lo len
      <span class="hl kwa">and</span> output <span class="hl opt">=</span> <span class="hl kwc">Unix</span><span class="hl opt">.</span>out_channel_of_descr output <span class="hl kwa">in</span>
      <span class="hl com">(* First all the regexps... *)</span>
      <span class="hl kwc">Array</span><span class="hl opt">.</span>iter
        <span class="hl opt">(</span><span class="hl kwa">fun</span> re <span class="hl opt">-&gt;</span> output_binary_int output <span class="hl opt">(</span>count re chunk<span class="hl opt">))</span>
        variants<span class="hl opt">;</span>
      <span class="hl com">(* ...and then all the IUPAC replacements *)</span>
      <span class="hl kwa">if</span> i <span class="hl opt">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
        <span class="hl kwa">for</span> j <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> <span class="hl num">6</span> <span class="hl kwa">do</span>
          chunk<span class="hl opt">.[</span>j<span class="hl opt">] &lt;-</span> <span class="hl str">' '</span>
        <span class="hl kwa">done</span><span class="hl opt">;</span>
      <span class="hl kwa">let</span> b <span class="hl opt">=</span> <span class="hl kwb">ref</span> chunk <span class="hl kwa">in</span>
      <span class="hl kwc">Array</span><span class="hl opt">.</span>iter
        <span class="hl opt">(</span><span class="hl kwa">fun</span> <span class="hl opt">(</span>re<span class="hl opt">,</span> s<span class="hl opt">) -&gt;</span> b <span class="hl opt">:=</span> <span class="hl kwc">Str</span><span class="hl opt">.</span>global_replace re s <span class="hl opt">!</span>b<span class="hl opt">)</span>
        iupacs<span class="hl opt">;</span>
      output_binary_int output <span class="hl opt">(</span><span class="hl kwc">String</span><span class="hl opt">.</span>length <span class="hl opt">!</span>b <span class="hl opt">-</span> delta<span class="hl opt">);</span>
      exit <span class="hl num">0</span>
    | _ <span class="hl opt">-&gt;</span>
      <span class="hl kwc">Unix</span><span class="hl opt">.</span>close output<span class="hl opt">;</span>
      w<span class="hl opt">.(</span>i<span class="hl opt">) &lt;-</span> <span class="hl kwc">Unix</span><span class="hl opt">.</span>in_channel_of_descr input
  <span class="hl kwa">done</span><span class="hl opt">;</span>
  <span class="hl kwa">let</span> counts_variants <span class="hl opt">=</span> <span class="hl kwc">Array</span><span class="hl opt">.</span>init <span class="hl opt">(</span><span class="hl kwc">Array</span><span class="hl opt">.</span>length variants<span class="hl opt">) (</span><span class="hl kwa">fun</span> _ <span class="hl opt">-&gt;</span> <span class="hl kwb">ref</span> <span class="hl num">0</span><span class="hl opt">)</span>
  <span class="hl kwa">and</span> count_iupac <span class="hl opt">=</span> <span class="hl kwb">ref</span> <span class="hl num">0</span> <span class="hl kwa">in</span>
  <span class="hl kwc">Array</span><span class="hl opt">.</span>iter
    <span class="hl opt">(</span><span class="hl kwa">fun</span> input <span class="hl opt">-&gt;</span>
      <span class="hl kwc">Array</span><span class="hl opt">.</span>iter
        <span class="hl opt">(</span><span class="hl kwa">fun</span> count <span class="hl opt">-&gt;</span> count <span class="hl opt">:= !</span>count <span class="hl opt">+</span> input_binary_int input<span class="hl opt">)</span>
        counts_variants<span class="hl opt">;</span>
      count_iupac <span class="hl opt">:= !</span>count_iupac <span class="hl opt">+</span> input_binary_int input<span class="hl opt">)</span>
    w<span class="hl opt">;</span>
  <span class="hl kwc">Array</span><span class="hl opt">.</span>iteri
    <span class="hl opt">(</span><span class="hl kwa">fun</span> i re <span class="hl opt">-&gt;</span> <span class="hl kwc">Printf</span><span class="hl opt">.</span>printf <span class="hl str">&quot;%s %i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> re <span class="hl opt">!(</span>counts_variants<span class="hl opt">.(</span>i<span class="hl opt">)))</span>
    variants_to_string<span class="hl opt">;</span>
  <span class="hl kwc">Printf</span><span class="hl opt">.</span>printf <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">%i</span><span class="hl esc">\n</span><span class="hl str">%i</span><span class="hl esc">\n</span><span class="hl str">%i</span><span class="hl esc">\n</span><span class="hl str">%!&quot;</span> file_length code_length <span class="hl opt">!</span>count_iupac

