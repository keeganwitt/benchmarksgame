<span class="hl slc"># The Computer Language Benchmarks Game</span>
<span class="hl slc"># http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">#</span>
<span class="hl slc"># contributed by Tupteq</span>
<span class="hl slc"># modified by Simon Descarpentries</span>
<span class="hl slc"># modified by Ivan Baldin</span>
<span class="hl slc"># 2to3 plus Daniel Nanz fix</span>

<span class="hl kwa">import</span> sys
<span class="hl kwa">from</span> array <span class="hl kwa">import</span> array
<span class="hl kwa">from</span> multiprocessing <span class="hl kwa">import</span> Pool

<span class="hl kwa">def</span> <span class="hl kwd">do_row</span><span class="hl opt">(</span>fy<span class="hl opt">):</span>
    local_abs <span class="hl opt">=</span> <span class="hl kwb">abs</span>
    two_over_size <span class="hl opt">=</span> <span class="hl num">2.0</span> <span class="hl opt">/</span> size
    xr_offs <span class="hl opt">=</span> <span class="hl kwb">range</span><span class="hl opt">(</span><span class="hl num">7</span><span class="hl opt">, -</span><span class="hl num">1</span><span class="hl opt">, -</span><span class="hl num">1</span><span class="hl opt">)</span>
    xr_iter <span class="hl opt">=</span> <span class="hl kwb">range</span><span class="hl opt">(</span><span class="hl num">50</span><span class="hl opt">)</span>

    result <span class="hl opt">=</span> <span class="hl kwd">array</span><span class="hl opt">(</span><span class="hl str">'B'</span><span class="hl opt">)</span>
    <span class="hl kwa">for</span> x <span class="hl kwa">in</span> <span class="hl kwb">range</span><span class="hl opt">(</span><span class="hl num">7</span><span class="hl opt">,</span> size<span class="hl opt">,</span> <span class="hl num">8</span><span class="hl opt">):</span>
        byte_acc <span class="hl opt">=</span> <span class="hl num">0</span>
        <span class="hl kwa">for</span> offset <span class="hl kwa">in</span> xr_offs<span class="hl opt">:</span>
            z <span class="hl opt">=</span> <span class="hl num">0</span>j
            c <span class="hl opt">=</span> two_over_size <span class="hl opt">* (</span>x <span class="hl opt">-</span> offset<span class="hl opt">) +</span> fy

            <span class="hl kwa">for</span> i <span class="hl kwa">in</span> xr_iter<span class="hl opt">:</span>
                z <span class="hl opt">=</span> z <span class="hl opt">*</span> z <span class="hl opt">+</span> c
                <span class="hl kwa">if</span> <span class="hl kwd">local_abs</span><span class="hl opt">(</span>z<span class="hl opt">) &gt;=</span> <span class="hl num">2</span><span class="hl opt">:</span>
                    <span class="hl kwa">break</span>
            <span class="hl kwa">else</span><span class="hl opt">:</span>
                byte_acc <span class="hl opt">+=</span> <span class="hl num">1</span> <span class="hl opt">&lt;&lt;</span> offset

        result<span class="hl opt">.</span><span class="hl kwd">append</span><span class="hl opt">(</span>byte_acc<span class="hl opt">)</span>

    <span class="hl kwa">if</span> x <span class="hl opt">!=</span> size <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">:</span>
        result<span class="hl opt">.</span><span class="hl kwd">append</span><span class="hl opt">(</span>byte_acc<span class="hl opt">)</span>

    <span class="hl kwa">return</span> result<span class="hl opt">.</span><span class="hl kwd">tostring</span><span class="hl opt">()</span>

<span class="hl kwa">def</span> <span class="hl kwd">main</span><span class="hl opt">(</span>out<span class="hl opt">):</span>
    out<span class="hl opt">.</span><span class="hl kwd">write</span><span class="hl opt">((</span><span class="hl str">'P4</span><span class="hl esc">\n</span><span class="hl str">%d %d</span><span class="hl esc">\n</span><span class="hl str">'</span> <span class="hl opt">% (</span>size<span class="hl opt">,</span> size<span class="hl opt">)).</span><span class="hl kwd">encode</span><span class="hl opt">(</span><span class="hl str">'ASCII'</span><span class="hl opt">))</span>

    pool <span class="hl opt">=</span> <span class="hl kwd">Pool</span><span class="hl opt">()</span>
    step <span class="hl opt">=</span> <span class="hl num">2.0</span>j <span class="hl opt">/</span> size
    <span class="hl kwa">for</span> row <span class="hl kwa">in</span> pool<span class="hl opt">.</span><span class="hl kwd">imap</span><span class="hl opt">(</span>do_row<span class="hl opt">, (</span>step<span class="hl opt">*</span>y<span class="hl opt">-(</span><span class="hl num">1.5</span><span class="hl opt">+</span><span class="hl num">1</span>j<span class="hl opt">)</span> <span class="hl kwa">for</span> y <span class="hl kwa">in</span> <span class="hl kwb">range</span><span class="hl opt">(</span>size<span class="hl opt">))):</span>
        out<span class="hl opt">.</span><span class="hl kwd">write</span><span class="hl opt">(</span>row<span class="hl opt">)</span>

<span class="hl kwa">if</span> __name__ <span class="hl opt">==</span> <span class="hl str">'__main__'</span><span class="hl opt">:</span>
    size <span class="hl opt">=</span> <span class="hl kwb">int</span><span class="hl opt">(</span>sys<span class="hl opt">.</span>argv<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">])</span>
    <span class="hl kwd">main</span><span class="hl opt">(</span>sys<span class="hl opt">.</span>stdout<span class="hl opt">.</span><span class="hl kwb">buffer</span><span class="hl opt">)</span>
