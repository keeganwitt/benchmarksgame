<span class="hl opt">#</span>lang racket<span class="hl opt">/</span>base

<span class="hl slc">;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;; http://benchmarksgame.alioth.debian.org/</span>

<span class="hl slc">;;; contributed by Matthew Flatt</span>

<span class="hl opt">(</span><span class="hl kwa">require</span> racket<span class="hl opt">/</span>cmdline<span class="hl opt">)</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> translation <span class="hl opt">(</span><span class="hl kwa">make-vector</span> <span class="hl num">128</span><span class="hl opt">))</span>

<span class="hl opt">(</span><span class="hl kwa">for</span> <span class="hl opt">([</span>from-to <span class="hl opt">'([</span>a t<span class="hl opt">]</span>
                 <span class="hl opt">[</span>c g<span class="hl opt">]</span>
                 <span class="hl opt">[</span>g c<span class="hl opt">]</span>
                 <span class="hl opt">[</span>t a<span class="hl opt">]</span>
                 <span class="hl opt">[</span>u a<span class="hl opt">]</span>
                 <span class="hl opt">[</span>m k<span class="hl opt">]</span>
                 <span class="hl opt">[</span>r y<span class="hl opt">]</span>
                 <span class="hl opt">[</span>w w<span class="hl opt">]</span>
                 <span class="hl opt">[</span>s s<span class="hl opt">]</span>
                 <span class="hl opt">[</span>y R<span class="hl opt">]</span>
                 <span class="hl opt">[</span>k M<span class="hl opt">]</span>
                 <span class="hl opt">[</span>v b<span class="hl opt">]</span>
                 <span class="hl opt">[</span>h d<span class="hl opt">]</span>
                 <span class="hl opt">[</span>d h<span class="hl opt">]</span>
                 <span class="hl opt">[</span>b v<span class="hl opt">]</span>
                 <span class="hl opt">[</span>n n<span class="hl opt">])])</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">([</span>char <span class="hl opt">(</span><span class="hl kwa">lambda</span> <span class="hl opt">(</span><span class="hl kwa">sym</span><span class="hl opt">)</span>
                <span class="hl opt">(</span><span class="hl kwa">string-ref</span> <span class="hl opt">(</span><span class="hl kwa">symbol-</span><span class="hl opt">&gt;</span>string sym<span class="hl opt">)</span> <span class="hl num">0</span><span class="hl opt">))])</span>
    <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">([</span>from <span class="hl opt">(</span><span class="hl kwa">char</span> <span class="hl opt">(</span><span class="hl kwa">car</span> from-to<span class="hl opt">))]</span>
          <span class="hl opt">[</span>to <span class="hl opt">(</span><span class="hl kwa">char-</span><span class="hl opt">&gt;</span>integer <span class="hl opt">(</span><span class="hl kwa">char-upcase</span> <span class="hl opt">(</span><span class="hl kwa">char</span> <span class="hl opt">(</span><span class="hl kwa">cadr</span> from-to<span class="hl opt">))))])</span>
      <span class="hl opt">(</span><span class="hl kwa">vector-set</span><span class="hl opt">!</span> translation <span class="hl opt">(</span><span class="hl kwa">char-</span><span class="hl opt">&gt;</span>integer from<span class="hl opt">)</span> to<span class="hl opt">)</span>
      <span class="hl opt">(</span><span class="hl kwa">vector-set</span><span class="hl opt">!</span> translation <span class="hl opt">(</span><span class="hl kwa">char-</span><span class="hl opt">&gt;</span>integer <span class="hl opt">(</span><span class="hl kwa">char-upcase</span> from<span class="hl opt">))</span> to<span class="hl opt">))))</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">output</span> lines<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span><span class="hl opt">* ([</span>str <span class="hl opt">(</span><span class="hl kwa">apply</span> bytes-append lines<span class="hl opt">)]</span>
         <span class="hl opt">[</span>o <span class="hl opt">(</span><span class="hl kwa">current-output-port</span><span class="hl opt">)]</span>
         <span class="hl opt">[</span>len <span class="hl opt">(</span><span class="hl kwa">bytes-length</span> str<span class="hl opt">)])</span>
    <span class="hl opt">(</span><span class="hl kwa">for</span> <span class="hl opt">([</span>offset <span class="hl opt">(</span><span class="hl kwa">in-range</span> <span class="hl num">0</span> len <span class="hl num">60</span><span class="hl opt">)])</span>
      <span class="hl opt">(</span><span class="hl kwa">write-bytes</span> str o offset <span class="hl opt">(</span><span class="hl kwa">min</span> len <span class="hl opt">(+</span> offset <span class="hl num">60</span><span class="hl opt">)))</span>
      <span class="hl opt">(</span><span class="hl kwa">newline</span> o<span class="hl opt">))))</span>

<span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">([</span>in <span class="hl opt">(</span><span class="hl kwa">current-input-port</span><span class="hl opt">)])</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> loop <span class="hl opt">([</span>accum null<span class="hl opt">])</span>
    <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">([</span>l <span class="hl opt">(</span><span class="hl kwa">read-bytes-line</span> in<span class="hl opt">)])</span>
      <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">eof-object</span>? l<span class="hl opt">)</span>
          <span class="hl opt">(</span><span class="hl kwa">output</span> accum<span class="hl opt">)</span>
          <span class="hl opt">(</span><span class="hl kwa">cond</span>
           <span class="hl opt">[(</span><span class="hl kwa">regexp-match</span>? <span class="hl opt">#</span>rx<span class="hl opt">#</span><span class="hl str">&quot;^&gt;&quot;</span> l<span class="hl opt">)</span>
            <span class="hl opt">(</span><span class="hl kwa">output</span> accum<span class="hl opt">)</span>
            <span class="hl opt">(</span><span class="hl kwa">printf</span> <span class="hl str">&quot;~a</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> l<span class="hl opt">)</span>
            <span class="hl opt">(</span><span class="hl kwa">loop</span> null<span class="hl opt">)]</span>
           <span class="hl opt">[</span>else
            <span class="hl opt">(</span><span class="hl kwa">let</span><span class="hl opt">* ([</span>len <span class="hl opt">(</span><span class="hl kwa">bytes-length</span> l<span class="hl opt">)]</span>
                   <span class="hl opt">[</span>dest <span class="hl opt">(</span><span class="hl kwa">make-bytes</span> len<span class="hl opt">)])</span>
              <span class="hl opt">(</span><span class="hl kwa">for</span> <span class="hl opt">([</span>i <span class="hl opt">(</span><span class="hl kwa">in-range</span> len<span class="hl opt">)])</span>
                <span class="hl opt">(</span><span class="hl kwa">bytes-set</span><span class="hl opt">!</span> dest
                            <span class="hl opt">(</span><span class="hl kwa">-</span> <span class="hl opt">(</span><span class="hl kwa">-</span> len i<span class="hl opt">)</span> <span class="hl num">1</span><span class="hl opt">)</span>
                            <span class="hl opt">(</span><span class="hl kwa">vector-ref</span> translation <span class="hl opt">(</span><span class="hl kwa">bytes-ref</span> l i<span class="hl opt">))))</span>
              <span class="hl opt">(</span><span class="hl kwa">loop</span> <span class="hl opt">(</span><span class="hl kwa">cons</span> dest accum<span class="hl opt">)))])))))</span>
