<span class="hl slc"># The Computer Language Benchmarks Game</span>
<span class="hl slc"># http://benchmarksgame.alioth.debian.org/</span>

<span class="hl slc">#   contributed by Michael Barker</span>
<span class="hl slc">#   based on a Java contribution by Luzius Meisser</span>
<span class="hl slc">#   converted to C by dualamd</span>
<span class="hl slc">#   converted to Ruby by Eugene Pimenov</span>

<span class="hl slc">#require 'thread'</span>

COLORS     <span class="hl opt">= [</span><span class="hl kwc">:blue</span><span class="hl opt">,</span> <span class="hl kwc">:red</span><span class="hl opt">,</span> <span class="hl kwc">:yellow</span><span class="hl opt">,</span> <span class="hl kwc">:invalid</span><span class="hl opt">].</span>freeze
COMPLIMENT <span class="hl opt">= {</span>
  <span class="hl kwc">:blue</span> <span class="hl opt">=&gt;</span> <span class="hl esc">{:blue =&gt; :blue, :red =&gt; :yellow, :yellow =&gt; :red}</span><span class="hl opt">.</span>freeze<span class="hl opt">,</span>
  <span class="hl kwc">:red</span> <span class="hl opt">=&gt;</span> <span class="hl esc">{:blue =&gt; :yellow, :red =&gt; :red, :yellow =&gt; :blue}</span><span class="hl opt">.</span>freeze<span class="hl opt">,</span>
  <span class="hl kwc">:yellow</span> <span class="hl opt">=&gt;</span> <span class="hl esc">{:blue =&gt; :red, :red =&gt; :blue, :yellow =&gt; :yellow}</span><span class="hl opt">.</span>freeze
<span class="hl opt">}.</span>freeze

<span class="hl kwb">$creature_id</span> <span class="hl opt">=</span> <span class="hl num">0</span>

NUMBERS <span class="hl opt">= %</span>w<span class="hl esc">{zero one two three four five six seven eight nine}</span><span class="hl opt">.</span>freeze

<span class="hl slc"># convert integer to number string: 1234 -&gt; &quot;one two three four&quot;</span>
<span class="hl kwa">def</span> <span class="hl kwd">format_number</span><span class="hl opt">(</span>num)
  out <span class="hl opt">= []</span>
  <span class="hl kwa">begin</span>
    out <span class="hl opt">&lt;&lt;</span> NUMBERS<span class="hl opt">[</span>num<span class="hl opt">%</span><span class="hl num">10</span><span class="hl opt">]</span>
    num <span class="hl opt">/=</span> <span class="hl num">10</span>
  <span class="hl kwa">end while</span> num <span class="hl opt">&gt;</span> <span class="hl num">0</span>
  out<span class="hl opt">.</span>reverse<span class="hl opt">.</span><span class="hl kwd">join</span><span class="hl opt">(</span><span class="hl str">&quot; &quot;</span>)
<span class="hl kwa">end</span>

<span class="hl kwa">class</span> MeetingPlace
  attr_reader <span class="hl kwc">:mutex</span>
  attr_accessor <span class="hl kwc">:meetings_left</span><span class="hl opt">,</span> <span class="hl kwc">:first_creature</span>

  <span class="hl kwa">def</span> <span class="hl kwd">initialize</span><span class="hl opt">(</span>meetings)
    <span class="hl kwb">&#64;mutex</span> <span class="hl opt">=</span> Mutex<span class="hl opt">.</span>new
    <span class="hl kwb">&#64;meetings_left</span> <span class="hl opt">=</span> meetings
  <span class="hl kwa">end</span>
<span class="hl kwa">end</span>

<span class="hl kwa">class</span> Creature
  attr_accessor <span class="hl kwc">:place</span><span class="hl opt">,</span> <span class="hl kwc">:thread</span><span class="hl opt">,</span> <span class="hl kwc">:count</span><span class="hl opt">,</span> <span class="hl kwc">:same_count</span><span class="hl opt">,</span> <span class="hl kwc">:color</span><span class="hl opt">,</span> <span class="hl kwc">:id</span><span class="hl opt">,</span> <span class="hl kwc">:two_met</span><span class="hl opt">,</span> <span class="hl kwc">:sameid</span>

  <span class="hl kwa">def</span> <span class="hl kwd">initialize</span><span class="hl opt">(</span>place<span class="hl opt">,</span> color)
    <span class="hl kwb">&#64;place</span> <span class="hl opt">=</span> place
    <span class="hl kwb">&#64;count</span> <span class="hl opt">=</span> <span class="hl kwb">&#64;same_count</span> <span class="hl opt">=</span> <span class="hl num">0</span>

    <span class="hl kwb">&#64;id</span> <span class="hl opt">= (</span><span class="hl kwb">$creature_id</span> <span class="hl opt">+=</span> <span class="hl num">1</span>)
    <span class="hl kwb">&#64;color</span> <span class="hl opt">=</span> color
    <span class="hl kwb">&#64;two_met</span> <span class="hl opt">=</span> <span class="hl kwc">FALSE</span>

    <span class="hl kwb">&#64;thread</span> <span class="hl opt">=</span> Thread<span class="hl opt">.</span>new <span class="hl kwa">do</span>
      <span class="hl kwa">loop do</span>
        <span class="hl kwa">if</span> meet
          Thread<span class="hl opt">.</span>pass <span class="hl kwa">while</span> <span class="hl kwb">&#64;two_met</span> <span class="hl opt">==</span> <span class="hl kwa">false</span>

          <span class="hl kwb">&#64;same_count</span> <span class="hl opt">+=</span> <span class="hl num">1</span> <span class="hl kwa">if</span> <span class="hl kwb">&#64;sameid</span>
          <span class="hl kwb">&#64;count</span> <span class="hl opt">+=</span> <span class="hl num">1</span>
        <span class="hl kwa">else</span>
          <span class="hl kwa">break</span>
        <span class="hl kwa">end</span>
      <span class="hl kwa">end</span>
    <span class="hl kwa">end</span>
  <span class="hl kwa">end</span>

  <span class="hl kwa">def</span> meet
    <span class="hl kwb">&#64;place</span><span class="hl opt">.</span>mutex<span class="hl opt">.</span>lock

    <span class="hl kwa">if</span> <span class="hl kwb">&#64;place</span><span class="hl opt">.</span>meetings_left <span class="hl opt">&gt;</span> <span class="hl num">0</span>
      <span class="hl kwa">if</span> <span class="hl kwb">&#64;place</span><span class="hl opt">.</span>first_creature
        first <span class="hl opt">=</span> <span class="hl kwb">&#64;place</span><span class="hl opt">.</span>first_creature
        new_color <span class="hl opt">=</span> COMPLIMENT<span class="hl opt">[</span><span class="hl kwb">&#64;color</span><span class="hl opt">][</span>first<span class="hl opt">.</span>color<span class="hl opt">]</span>

        <span class="hl kwb">&#64;sameid</span>  <span class="hl opt">=</span> first<span class="hl opt">.</span>sameid  <span class="hl opt">=</span> <span class="hl kwb">&#64;id</span> <span class="hl opt">==</span> first<span class="hl opt">.</span>id
        <span class="hl kwb">&#64;color</span>   <span class="hl opt">=</span> first<span class="hl opt">.</span>color   <span class="hl opt">=</span> new_color
        <span class="hl kwb">&#64;two_met</span> <span class="hl opt">=</span> first<span class="hl opt">.</span>two_met <span class="hl opt">=</span> <span class="hl kwa">true</span>

        <span class="hl kwb">&#64;place</span><span class="hl opt">.</span>first_creature <span class="hl opt">=</span> <span class="hl kwa">nil</span>
        <span class="hl kwb">&#64;place</span><span class="hl opt">.</span>meetings_left <span class="hl opt">-=</span> <span class="hl num">1</span>
      <span class="hl kwa">else</span>
        <span class="hl kwb">&#64;two_met</span> <span class="hl opt">=</span> <span class="hl kwa">false</span>
        <span class="hl kwb">&#64;place</span><span class="hl opt">.</span>first_creature <span class="hl opt">=</span> <span class="hl kwa">self</span>
      <span class="hl kwa">end</span>
      <span class="hl kwa">true</span>
    <span class="hl kwa">else</span>
      <span class="hl kwa">false</span>
    <span class="hl kwa">end</span>
  <span class="hl kwa">ensure</span>
    <span class="hl kwb">&#64;place</span><span class="hl opt">.</span>mutex<span class="hl opt">.</span>unlock
  <span class="hl kwa">end</span>

  <span class="hl kwa">def</span> result
    <span class="hl str">''</span> <span class="hl opt">&lt;&lt;</span> <span class="hl kwb">&#64;count</span><span class="hl opt">.</span>to_s <span class="hl opt">&lt;&lt;</span> <span class="hl str">' '</span> <span class="hl opt">&lt;&lt;</span> <span class="hl kwd">format_number</span><span class="hl opt">(</span><span class="hl kwb">&#64;same_count</span>)
  <span class="hl kwa">end</span>
<span class="hl kwa">end</span>

<span class="hl kwa">def</span> <span class="hl kwd">run_game</span><span class="hl opt">(</span>n_meeting<span class="hl opt">,</span> colors)
  place <span class="hl opt">=</span> MeetingPlace<span class="hl opt">.</span><span class="hl kwd">new</span><span class="hl opt">(</span>n_meeting)

  creatures <span class="hl opt">= []</span>
  colors<span class="hl opt">.</span>each <span class="hl kwa">do</span> <span class="hl opt">|</span>color<span class="hl opt">|</span>
    print color<span class="hl opt">,</span> <span class="hl str">&quot; &quot;</span>
    creatures <span class="hl opt">&lt;&lt;</span> Creature<span class="hl opt">.</span><span class="hl kwd">new</span><span class="hl opt">(</span>place<span class="hl opt">,</span> color)
  <span class="hl kwa">end</span>
  puts

  <span class="hl slc"># wait for them to meet</span>
  creatures<span class="hl opt">.</span>each <span class="hl esc">{ |c| c.thread.join}</span>

  total <span class="hl opt">=</span> <span class="hl num">0</span>
  <span class="hl slc"># print meeting times of each creature</span>
  creatures<span class="hl opt">.</span>each <span class="hl kwa">do</span> <span class="hl opt">|</span>c<span class="hl opt">|</span>
    puts c<span class="hl opt">.</span>result
    total <span class="hl opt">+=</span> c<span class="hl opt">.</span>count
  <span class="hl kwa">end</span>

  <span class="hl slc"># print total meeting times, should be equal n_meeting</span>
  print <span class="hl str">' '</span><span class="hl opt">,</span> <span class="hl kwd">format_number</span><span class="hl opt">(</span>total)<span class="hl opt">,</span> <span class="hl str">&quot;\n\n&quot;</span>
<span class="hl kwa">end</span>

<span class="hl kwa">def</span> print_colors_table
  <span class="hl opt">[</span><span class="hl kwc">:blue</span><span class="hl opt">,</span> <span class="hl kwc">:red</span><span class="hl opt">,</span> <span class="hl kwc">:yellow</span><span class="hl opt">].</span>each <span class="hl kwa">do</span> <span class="hl opt">|</span>c1<span class="hl opt">|</span>
    <span class="hl opt">[</span><span class="hl kwc">:blue</span><span class="hl opt">,</span> <span class="hl kwc">:red</span><span class="hl opt">,</span> <span class="hl kwc">:yellow</span><span class="hl opt">].</span>each <span class="hl kwa">do</span> <span class="hl opt">|</span>c2<span class="hl opt">|</span>
      puts <span class="hl str">&quot;</span><span class="hl esc">#{c1}</span> <span class="hl str">+</span> <span class="hl esc">#{c2}</span> <span class="hl str">-&gt;</span> <span class="hl esc">#{COMPLIMENT[c1][c2]}</span><span class="hl str">&quot;</span>
    <span class="hl kwa">end</span>
  <span class="hl kwa">end</span>
<span class="hl kwa">end</span>

n <span class="hl opt">= (</span><span class="hl kwc">ARGV</span><span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] ||</span> <span class="hl num">600</span>)<span class="hl opt">.</span>to_i


print_colors_table
puts

run_game n<span class="hl opt">, [</span><span class="hl kwc">:blue</span><span class="hl opt">,</span> <span class="hl kwc">:red</span><span class="hl opt">,</span> <span class="hl kwc">:yellow</span><span class="hl opt">]</span>
run_game n<span class="hl opt">, [</span><span class="hl kwc">:blue</span><span class="hl opt">,</span> <span class="hl kwc">:red</span><span class="hl opt">,</span> <span class="hl kwc">:yellow</span><span class="hl opt">,</span> <span class="hl kwc">:red</span><span class="hl opt">,</span> <span class="hl kwc">:yellow</span><span class="hl opt">,</span> <span class="hl kwc">:blue</span><span class="hl opt">,</span> <span class="hl kwc">:red</span><span class="hl opt">,</span> <span class="hl kwc">:yellow</span><span class="hl opt">,</span> <span class="hl kwc">:red</span><span class="hl opt">,</span> <span class="hl kwc">:blue</span><span class="hl opt">]</span>
