<span class="hl slc">-----------------------------------------------------------------------</span>
<span class="hl slc">-- The Computer Language Benchmarks Game</span>
<span class="hl slc">-- http://shootout.alioth.debian.org/</span>
<span class="hl slc">--</span>
<span class="hl slc">-- contributed by Jim Rogers</span>
<span class="hl slc">-- gnatmake -gnat05 -O3 -gnatVn -gnatp</span>
<span class="hl slc">-----------------------------------------------------------------------</span>
<span class="hl kwa">with</span> Ada<span class="hl sym">.</span>Text_IO<span class="hl sym">;</span> <span class="hl kwa">use</span> Ada<span class="hl sym">.</span>Text_IO<span class="hl sym">;</span>
<span class="hl kwa">with</span> Ada<span class="hl sym">.</span>Characters<span class="hl sym">.</span>Handling<span class="hl sym">;</span> <span class="hl kwa">use</span> Ada<span class="hl sym">.</span>Characters<span class="hl sym">.</span>Handling<span class="hl sym">;</span>
<span class="hl kwa">with</span> Ada<span class="hl sym">.</span>Unchecked_Deallocation<span class="hl sym">;</span>

<span class="hl kwa">procedure</span> Revcomp <span class="hl kwa">is</span>
   <span class="hl kwa">type</span> First_Index_Type <span class="hl kwa">is range</span> <span class="hl num">1</span><span class="hl sym">.</span><span class="hl num">.16</span><span class="hl sym">;</span>
   <span class="hl kwa">type</span> Second_Index_Type <span class="hl kwa">is range</span> <span class="hl num">1</span><span class="hl sym">.</span><span class="hl num">.2</span><span class="hl sym">;</span>
   <span class="hl kwa">type</span> Correspondence_Array <span class="hl kwa">is array</span><span class="hl sym">(</span>First_Index_type<span class="hl sym">,</span> Second_Index_type<span class="hl sym">)</span>
                                <span class="hl kwa">of</span> <span class="hl kwb">Character</span><span class="hl sym">;</span>

   <span class="hl kwa">type</span> Tuple<span class="hl sym">;</span>
   <span class="hl kwa">type</span> Tuple_Access <span class="hl kwa">is access</span> Tuple<span class="hl sym">;</span>
   <span class="hl kwa">type</span> Tuple <span class="hl kwa">is record</span>
      Value <span class="hl sym">:</span> <span class="hl kwb">Character</span> <span class="hl sym">:=</span> 'X'<span class="hl sym">;</span>
      Next  <span class="hl sym">:</span> Tuple_Access <span class="hl sym">:=</span> <span class="hl kwa">null</span><span class="hl sym">;</span>
   <span class="hl kwa">end record</span><span class="hl sym">;</span>
   Stack <span class="hl sym">:</span> Tuple_Access <span class="hl sym">:=</span> <span class="hl kwa">null</span><span class="hl sym">;</span>

   <span class="hl kwa">procedure</span> Push<span class="hl sym">(</span>Item <span class="hl sym">:</span> <span class="hl kwb">Character</span><span class="hl sym">)</span> <span class="hl kwa">is</span>
      Temp <span class="hl sym">:</span> Tuple_Access <span class="hl sym">:=</span> <span class="hl kwa">New</span> Tuple'<span class="hl sym">(</span>Item<span class="hl sym">,</span> Stack<span class="hl sym">);</span>
   <span class="hl kwa">begin</span>
      Stack <span class="hl sym">:=</span> Temp<span class="hl sym">;</span>
   <span class="hl kwa">end</span> Push<span class="hl sym">;</span>

   <span class="hl kwa">procedure</span> Pop<span class="hl sym">(</span>Item <span class="hl sym">:</span> <span class="hl kwa">out</span> <span class="hl kwb">Character</span><span class="hl sym">)</span> <span class="hl kwa">is</span>
      <span class="hl kwa">procedure</span> Free <span class="hl kwa">is new</span> Ada<span class="hl sym">.</span>Unchecked_Deallocation<span class="hl sym">(</span>Tuple<span class="hl sym">,</span> Tuple_Access<span class="hl sym">);</span>
      Temp <span class="hl sym">:</span> Tuple_Access<span class="hl sym">;</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">if</span> Stack <span class="hl sym">/=</span> <span class="hl kwa">null then</span>
         Temp <span class="hl sym">:=</span> Stack<span class="hl sym">;</span>
         Item <span class="hl sym">:=</span> Stack<span class="hl sym">.</span>Value<span class="hl sym">;</span>
         Stack <span class="hl sym">:=</span> Stack<span class="hl sym">.</span>Next<span class="hl sym">;</span>
         Free<span class="hl sym">(</span>Temp<span class="hl sym">);</span>
      <span class="hl kwa">end if</span><span class="hl sym">;</span>
   <span class="hl kwa">end</span> Pop<span class="hl sym">;</span>

   <span class="hl kwa">procedure</span> Print_Stack<span class="hl sym">(</span>Length <span class="hl sym">:</span> <span class="hl kwb">Natural</span><span class="hl sym">)</span> <span class="hl kwa">is</span>
      Count <span class="hl sym">:</span> <span class="hl kwb">natural</span> <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
      Value <span class="hl sym">:</span> <span class="hl kwb">Character</span><span class="hl sym">;</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">While</span> Stack <span class="hl sym">/=</span> <span class="hl kwa">null loop</span>
         Count <span class="hl sym">:=</span> Count <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
         Pop<span class="hl sym">(</span>Value<span class="hl sym">);</span>
         Put<span class="hl sym">(</span>Value<span class="hl sym">);</span>
         <span class="hl kwa">if</span> Count <span class="hl sym">&gt;=</span> Length <span class="hl kwa">then</span>
            New_Line<span class="hl sym">;</span>
            Count <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
         <span class="hl kwa">end if</span><span class="hl sym">;</span>
      <span class="hl kwa">end loop</span><span class="hl sym">;</span>
      <span class="hl kwa">if</span> Count <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
         New_Line<span class="hl sym">;</span>
      <span class="hl kwa">end if</span><span class="hl sym">;</span>
   <span class="hl kwa">end</span> Print_Stack<span class="hl sym">;</span>

   <span class="hl kwa">function</span> Complement<span class="hl sym">(</span>Item <span class="hl sym">:</span> <span class="hl kwb">Character</span><span class="hl sym">)</span> <span class="hl kwa">return</span> <span class="hl kwb">Character</span> <span class="hl kwa">is</span>

      Correspondence <span class="hl sym">:</span> Correspondence_Array <span class="hl sym">:= ((</span>'A'<span class="hl sym">,</span> 'T'<span class="hl sym">),</span>
                                                <span class="hl sym">(</span>'C'<span class="hl sym">,</span> 'G'<span class="hl sym">),</span>
                                                <span class="hl sym">(</span>'G'<span class="hl sym">,</span> 'C'<span class="hl sym">),</span>
                                                <span class="hl sym">(</span>'T'<span class="hl sym">,</span> 'A'<span class="hl sym">),</span>
                                                <span class="hl sym">(</span>'U'<span class="hl sym">,</span> 'A'<span class="hl sym">),</span>
                                                <span class="hl sym">(</span>'M'<span class="hl sym">,</span> 'K'<span class="hl sym">),</span>
                                                <span class="hl sym">(</span>'R'<span class="hl sym">,</span> 'Y'<span class="hl sym">),</span>
                                                <span class="hl sym">(</span>'W'<span class="hl sym">,</span> 'W'<span class="hl sym">),</span>
                                                <span class="hl sym">(</span>'S'<span class="hl sym">,</span> 'S'<span class="hl sym">),</span>
                                                <span class="hl sym">(</span>'Y'<span class="hl sym">,</span> 'R'<span class="hl sym">),</span>
                                                <span class="hl sym">(</span>'K'<span class="hl sym">,</span> 'M'<span class="hl sym">),</span>
                                                <span class="hl sym">(</span>'V'<span class="hl sym">,</span> 'B'<span class="hl sym">),</span>
                                                <span class="hl sym">(</span>'H'<span class="hl sym">,</span> 'D'<span class="hl sym">),</span>
                                                <span class="hl sym">(</span>'D'<span class="hl sym">,</span> 'H'<span class="hl sym">),</span>
                                                <span class="hl sym">(</span>'B'<span class="hl sym">,</span> 'V'<span class="hl sym">),</span>
                                                <span class="hl sym">(</span>'N'<span class="hl sym">,</span> 'N'<span class="hl sym">));</span>
      Temp <span class="hl sym">:</span> <span class="hl kwb">Character</span> <span class="hl sym">:=</span> To_Upper<span class="hl sym">(</span>Item<span class="hl sym">);</span>
      Result <span class="hl sym">:</span> <span class="hl kwb">Character</span><span class="hl sym">;</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">for</span> I <span class="hl kwa">in</span> First_Index_Type'<span class="hl kwa">range loop</span>
         <span class="hl kwa">if</span> Correspondence<span class="hl sym">(</span>I<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">) =</span> Temp <span class="hl kwa">then</span>
            Result <span class="hl sym">:=</span> Correspondence<span class="hl sym">(</span>I<span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">);</span>
            <span class="hl kwa">exit</span><span class="hl sym">;</span>
         <span class="hl kwa">end if</span><span class="hl sym">;</span>
      <span class="hl kwa">end loop</span><span class="hl sym">;</span>
      <span class="hl kwa">return</span> Result<span class="hl sym">;</span>
   <span class="hl kwa">end</span> Complement<span class="hl sym">;</span>

   Input_String <span class="hl sym">:</span> <span class="hl kwb">String</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">.</span><span class="hl num">.120</span><span class="hl sym">);</span>
   Input_Length <span class="hl sym">:</span> <span class="hl kwb">Natural</span><span class="hl sym">;</span>
   Max_Output_Length <span class="hl sym">:</span> <span class="hl kwb">Natural</span> <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>

<span class="hl kwa">begin</span>
   <span class="hl kwa">while not</span> End_Of_File<span class="hl sym">(</span>Standard_Input<span class="hl sym">)</span> <span class="hl kwa">loop</span>
      Get_Line<span class="hl sym">(</span>Item <span class="hl sym">=&gt;</span> Input_String<span class="hl sym">,</span> Last <span class="hl sym">=&gt;</span> Input_Length<span class="hl sym">);</span>
      <span class="hl kwa">if</span> Input_String<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">) =</span> '<span class="hl sym">&gt;</span>' <span class="hl kwa">or</span> Input_String<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">) =</span> '<span class="hl sym">;</span>' <span class="hl kwa">then</span>
         <span class="hl slc">--------------------------------------------------</span>
         <span class="hl slc">-- Print reverse complement in memory, if any</span>
         <span class="hl slc">--------------------------------------------------</span>
         <span class="hl kwa">if</span> Max_Output_Length <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
            Print_Stack<span class="hl sym">(</span>Max_Output_Length<span class="hl sym">);</span>
         <span class="hl kwa">end if</span><span class="hl sym">;</span>
         <span class="hl slc">-------------------------------------------------</span>
         <span class="hl slc">-- Print sequence info</span>
         <span class="hl slc">-------------------------------------------------</span>
         Put_Line<span class="hl sym">(</span>Input_String<span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">..</span>Input_Length<span class="hl sym">));</span>
         Max_Output_Length <span class="hl sym">:=</span> <span class="hl num">0</span><span class="hl sym">;</span>
      <span class="hl kwa">else</span>
         <span class="hl kwa">if</span> Max_Output_Length <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
            Max_Output_Length <span class="hl sym">:=</span> Input_Length<span class="hl sym">;</span>
         <span class="hl kwa">end if</span><span class="hl sym">;</span>
         <span class="hl slc">-------------------------------------------------</span>
         <span class="hl slc">-- Push complemented characters on stack</span>
         <span class="hl slc">-------------------------------------------------</span>
         <span class="hl kwa">for</span> I <span class="hl kwa">in</span> <span class="hl num">1</span><span class="hl sym">..</span>Input_Length <span class="hl kwa">loop</span>
            Push<span class="hl sym">(</span>Complement<span class="hl sym">(</span>Input_String<span class="hl sym">(</span>I<span class="hl sym">)));</span>
         <span class="hl kwa">end loop</span><span class="hl sym">;</span>
      <span class="hl kwa">end if</span><span class="hl sym">;</span>
   <span class="hl kwa">end loop</span><span class="hl sym">;</span>
   <span class="hl slc">----------------------------------------------------</span>
   <span class="hl slc">-- Print reverse complement of last sequence</span>
   <span class="hl slc">----------------------------------------------------</span>
   <span class="hl kwa">if</span> Stack <span class="hl sym">/=</span> <span class="hl kwa">null then</span>
      Print_Stack<span class="hl sym">(</span>Max_Output_Length<span class="hl sym">);</span>
   <span class="hl kwa">end if</span><span class="hl sym">;</span>
<span class="hl kwa">end</span> Revcomp<span class="hl sym">;</span>
