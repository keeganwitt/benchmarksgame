<span class="hl com">(*</span>
<span class="hl com">** The Computer Language Benchmarks Game</span>
<span class="hl com">** http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com">**</span>
<span class="hl com">** contributed by Hongwei Xi </span>
<span class="hl com">**</span>
<span class="hl com">** compilation command:</span>
<span class="hl com">**   atscc -O3 -fomit-frame-pointer -D_ISOC9X_SOURCE -mfpmath=sse -msse2 -o mandelbrot_simd mandelbrot_simd.dats</span>
<span class="hl com">**</span>
<span class="hl com">**)</span>

<span class="hl opt">%{^</span>
 
<span class="hl slc">// vector of two doubles</span>
<span class="hl kwa">typedef</span> double v2df __attribute__ <span class="hl opt">((</span>vector_size<span class="hl opt">(</span><span class="hl num">16</span><span class="hl opt">))) ;</span>
<span class="hl kwa">typedef</span> v2df ats_v2df_type <span class="hl opt">;</span>

<span class="hl opt">%}</span>

<span class="hl com">(* ****** ****** *)</span>

abst&#64;ype v2df <span class="hl opt">=</span> $extype <span class="hl str">&quot;ats_v2df_type&quot;</span>

<span class="hl ppc">#define TIMES 50</span>
<span class="hl ppc">#define LIMIT 2.0; #define LIMIT2 (LIMIT * LIMIT)</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl opt">%{^</span>

ats_v2df_type ats_zero_v2df <span class="hl opt">= {</span> <span class="hl num">0.0</span><span class="hl opt">,</span> <span class="hl num">0.0</span> <span class="hl opt">} ;</span>

ats_v2df_type
ats_v2df_make
  <span class="hl opt">(</span>ats_double_type d0<span class="hl opt">,</span> ats_double_type d1<span class="hl opt">) {</span>
  v2df dd <span class="hl opt">;</span>
  <span class="hl opt">((</span>double*)<span class="hl opt">&amp;</span>dd<span class="hl opt">)[</span><span class="hl num">0</span><span class="hl opt">] =</span> d0 <span class="hl opt">; ((</span>double*)<span class="hl opt">&amp;</span>dd<span class="hl opt">)[</span><span class="hl num">1</span><span class="hl opt">] =</span> d1 <span class="hl opt">;</span>
  <span class="hl kwa">return</span> dd <span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwa">static inline</span>
ats_double_type
ats_v2df_fst <span class="hl opt">(</span>ats_v2df_type dd<span class="hl opt">) {</span> <span class="hl kwa">return</span> <span class="hl opt">((</span>double*)<span class="hl opt">&amp;</span>dd<span class="hl opt">)[</span><span class="hl num">0</span><span class="hl opt">] ; }</span>

<span class="hl kwa">static inline</span>
ats_double_type
ats_v2df_snd <span class="hl opt">(</span>ats_v2df_type dd<span class="hl opt">) {</span> <span class="hl kwa">return</span> <span class="hl opt">((</span>double*)<span class="hl opt">&amp;</span>dd<span class="hl opt">)[</span><span class="hl num">1</span><span class="hl opt">] ; }</span>

<span class="hl kwa">static inline</span>
ats_v2df_type
ats_dbl_v2df <span class="hl opt">(</span>ats_v2df_type dd<span class="hl opt">) {</span> <span class="hl kwa">return</span> <span class="hl opt">(</span>dd <span class="hl opt">+</span> dd<span class="hl opt">) ; }</span>

<span class="hl kwa">static inline</span>
ats_v2df_type
ats_add_v2df_v2df <span class="hl opt">(</span>ats_v2df_type dd1<span class="hl opt">,</span> ats_v2df_type dd2<span class="hl opt">) {</span>
  <span class="hl kwa">return</span> <span class="hl opt">(</span>dd1 <span class="hl opt">+</span> dd2<span class="hl opt">) ;</span>
<span class="hl opt">}</span>

<span class="hl kwa">static inline</span>
ats_v2df_type
ats_sub_v2df_v2df <span class="hl opt">(</span>ats_v2df_type dd1<span class="hl opt">,</span> ats_v2df_type dd2<span class="hl opt">) {</span>
  <span class="hl kwa">return</span> <span class="hl opt">(</span>dd1 <span class="hl opt">-</span> dd2<span class="hl opt">) ;</span>
<span class="hl opt">}</span>

<span class="hl kwa">static inline</span>
ats_v2df_type
ats_mul_v2df_v2df <span class="hl opt">(</span>ats_v2df_type dd1<span class="hl opt">,</span> ats_v2df_type dd2<span class="hl opt">) {</span>
  <span class="hl kwa">return</span> <span class="hl opt">(</span>dd1 <span class="hl opt">*</span> dd2<span class="hl opt">) ;</span>
<span class="hl opt">}</span>

<span class="hl opt">%}</span>

<span class="hl kwa">extern val</span> zero_v2df<span class="hl opt">:</span> v2df <span class="hl opt">=</span> <span class="hl str">&quot;ats_zero_v2df&quot;</span>

<span class="hl kwa">extern fun</span> v2df_make
  <span class="hl opt">(</span>d0<span class="hl opt">:</span> double<span class="hl opt">,</span> d1<span class="hl opt">:</span> double<span class="hl opt">):</span> v2df <span class="hl opt">=</span> <span class="hl str">&quot;ats_v2df_make&quot;</span>

<span class="hl kwa">extern fun</span> v2df_fst <span class="hl opt">(</span>dd<span class="hl opt">:</span> v2df<span class="hl opt">):</span> double <span class="hl opt">=</span> <span class="hl str">&quot;ats_v2df_fst&quot;</span>
<span class="hl kwa">extern fun</span> v2df_snd <span class="hl opt">(</span>dd<span class="hl opt">:</span> v2df<span class="hl opt">):</span> double <span class="hl opt">=</span> <span class="hl str">&quot;ats_v2df_snd&quot;</span>

<span class="hl kwa">extern fun</span> dbl_v2df <span class="hl opt">(</span>_<span class="hl opt">:</span> v2df<span class="hl opt">):</span> v2df <span class="hl opt">=</span> <span class="hl str">&quot;ats_dbl_v2df&quot;</span>
<span class="hl kwa">extern fun</span> add_v2df_v2df <span class="hl opt">(</span>_<span class="hl opt">:</span> v2df<span class="hl opt">,</span> _<span class="hl opt">:</span> v2df<span class="hl opt">):</span> v2df <span class="hl opt">=</span> <span class="hl str">&quot;ats_add_v2df_v2df&quot;</span>
<span class="hl kwa">extern fun</span> sub_v2df_v2df <span class="hl opt">(</span>_<span class="hl opt">:</span> v2df<span class="hl opt">,</span> _<span class="hl opt">:</span> v2df<span class="hl opt">):</span> v2df <span class="hl opt">=</span> <span class="hl str">&quot;ats_sub_v2df_v2df&quot;</span>
<span class="hl kwa">extern fun</span> mul_v2df_v2df <span class="hl opt">(</span>_<span class="hl opt">:</span> v2df<span class="hl opt">,</span> _<span class="hl opt">:</span> v2df<span class="hl opt">):</span> v2df <span class="hl opt">=</span> <span class="hl str">&quot;ats_mul_v2df_v2df&quot;</span>
overload <span class="hl opt">+</span> <span class="hl kwa">with</span> add_v2df_v2df
overload <span class="hl opt">-</span> <span class="hl kwa">with</span> sub_v2df_v2df
overload <span class="hl opt">*</span> <span class="hl kwa">with</span> mul_v2df_v2df

<span class="hl com">(* ****** ****** *)</span>

<span class="hl ppc">#define i2d double_of_int</span>
fn mandelbrot <span class="hl opt">(</span>h<span class="hl opt">:</span> <span class="hl kwb">int</span><span class="hl opt">,</span> w<span class="hl opt">:</span> <span class="hl kwb">int</span><span class="hl opt">):</span> void <span class="hl opt">=</span> <span class="hl kwa">let</span>

<span class="hl kwa">val</span> h_recip <span class="hl opt">=</span> <span class="hl num">1.0</span> / <span class="hl opt">(</span>i2d h<span class="hl opt">)</span> <span class="hl kwa">and</span> w_recip <span class="hl opt">=</span> <span class="hl num">1.0</span> / <span class="hl opt">(</span>i2d w<span class="hl opt">)</span>

<span class="hl kwa">fun</span> test <span class="hl opt">(</span>x<span class="hl opt">:</span> <span class="hl kwb">int</span><span class="hl opt">,</span> y<span class="hl opt">:</span> <span class="hl kwb">int</span><span class="hl opt">):&lt;</span>cloref1<span class="hl opt">&gt;</span> <span class="hl kwb">int</span> <span class="hl opt">=</span> <span class="hl kwa">let</span>
  <span class="hl kwa">val</span> x2 <span class="hl opt">=</span> i2d <span class="hl opt">(</span>x <span class="hl opt">&lt;&lt;</span> <span class="hl num">1</span><span class="hl opt">)</span>
  <span class="hl kwa">val</span> <span class="hl kwd">Cr0</span> <span class="hl opt">=</span> x2 <span class="hl opt">*</span> w_recip <span class="hl opt">-</span> <span class="hl num">1.5</span>
  <span class="hl kwa">val</span> <span class="hl kwd">Cr1</span> <span class="hl opt">= (</span>x2 <span class="hl opt">+</span> <span class="hl num">2.0</span><span class="hl opt">) *</span> w_recip <span class="hl opt">-</span> <span class="hl num">1.5</span>
  <span class="hl kwa">val</span> y2 <span class="hl opt">=</span> i2d <span class="hl opt">(</span>y <span class="hl opt">&lt;&lt;</span> <span class="hl num">1</span><span class="hl opt">)</span>
  <span class="hl kwa">val</span> <span class="hl kwd">Ci0</span> <span class="hl opt">=</span> y2 <span class="hl opt">*</span> h_recip <span class="hl opt">-</span> <span class="hl num">1.0</span>
  <span class="hl kwa">val</span> <span class="hl kwd">Ci1</span> <span class="hl opt">=</span> <span class="hl kwd">Ci0</span>
  <span class="hl kwa">val</span> <span class="hl kwd">Crv</span> <span class="hl opt">=</span> v2df_make <span class="hl opt">(</span><span class="hl kwd">Cr0</span><span class="hl opt">,</span> <span class="hl kwd">Cr1</span><span class="hl opt">)</span>
  <span class="hl kwa">val</span> <span class="hl kwd">Civ</span> <span class="hl opt">=</span> v2df_make <span class="hl opt">(</span><span class="hl kwd">Ci0</span><span class="hl opt">,</span> <span class="hl kwd">Ci1</span><span class="hl opt">)</span>

  <span class="hl kwa">fun</span> loop <span class="hl opt">(</span>
      eo<span class="hl opt">:</span> <span class="hl kwb">int</span>
    <span class="hl opt">,</span> <span class="hl kwd">Cr</span><span class="hl opt">:</span> double<span class="hl opt">,</span> <span class="hl kwd">Ci</span><span class="hl opt">:</span> double<span class="hl opt">,</span> <span class="hl kwd">Zr</span><span class="hl opt">:</span> double<span class="hl opt">,</span> <span class="hl kwd">Zi</span><span class="hl opt">:</span> double
    <span class="hl opt">,</span> times<span class="hl opt">:</span> <span class="hl kwb">int</span>
    <span class="hl opt">) :&lt;</span>fun1<span class="hl opt">&gt;</span> <span class="hl kwb">int</span> <span class="hl opt">=</span> <span class="hl kwa">let</span>
<span class="hl com">(*</span>
<span class="hl com">    val () = begin</span>
<span class="hl com">      print &quot;loop: Cr = &quot;; print Cr; print_newline ();</span>
<span class="hl com">      print &quot;loop: Ci = &quot;; print Ci; print_newline ();</span>
<span class="hl com">      print &quot;loop: Zr = &quot;; print Zr; print_newline ();</span>
<span class="hl com">      print &quot;loop: Zi = &quot;; print Zi; print_newline ();</span>
<span class="hl com">    end</span>
<span class="hl com">*)</span>
    <span class="hl kwa">val</span> <span class="hl kwd">Tr</span> <span class="hl opt">=</span> <span class="hl kwd">Zr</span> <span class="hl opt">*</span> <span class="hl kwd">Zr</span> <span class="hl kwa">and</span> <span class="hl kwd">Ti</span> <span class="hl opt">=</span> <span class="hl kwd">Zi</span> <span class="hl opt">*</span> <span class="hl kwd">Zi</span><span class="hl opt">;</span> <span class="hl kwa">val</span> <span class="hl kwd">Tri</span> <span class="hl opt">=</span> <span class="hl kwd">Tr</span> <span class="hl opt">+</span> <span class="hl kwd">Ti</span>
<span class="hl com">(*</span>
<span class="hl com">    val () = begin</span>
<span class="hl com">      print &quot;loop: eo = &quot;; print eo; print_newline ();</span>
<span class="hl com">      print &quot;loop: Tr = &quot;; print Tr; print_newline ();</span>
<span class="hl com">      print &quot;loop: Ti = &quot;; print Ti; print_newline ();</span>
<span class="hl com">      print &quot;loop: Tri = &quot;; print Tri; print_newline ();</span>
<span class="hl com">    end</span>
<span class="hl com">*)</span>
  <span class="hl kwa">in</span>
    case<span class="hl opt">+</span> <span class="hl num">0</span> <span class="hl kwa">of</span>
    | _ <span class="hl kwa">when</span> <span class="hl kwd">Tri</span> <span class="hl opt">&lt;=</span> <span class="hl kwd">LIMIT2</span> <span class="hl opt">=&gt;</span> <span class="hl kwa">begin</span>
        <span class="hl kwa">if</span> times <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl kwa">then</span> <span class="hl num">1</span> <span class="hl opt">+</span> eo <span class="hl kwa">else let</span>
          <span class="hl kwa">val</span> <span class="hl kwd">Zr_new</span> <span class="hl opt">=</span> <span class="hl kwd">Tr</span> <span class="hl opt">-</span> <span class="hl kwd">Ti</span> <span class="hl opt">+</span> <span class="hl kwd">Cr</span>
          <span class="hl kwa">val</span> <span class="hl kwd">Zi_new</span> <span class="hl opt">=</span> <span class="hl num">2.0</span> <span class="hl opt">* (</span><span class="hl kwd">Zr</span> <span class="hl opt">*</span> <span class="hl kwd">Zi</span><span class="hl opt">) +</span> <span class="hl kwd">Ci</span>
        <span class="hl kwa">in</span>
          loop <span class="hl opt">(</span>eo<span class="hl opt">,</span> <span class="hl kwd">Cr</span><span class="hl opt">,</span> <span class="hl kwd">Ci</span><span class="hl opt">,</span> <span class="hl kwd">Zr_new</span><span class="hl opt">,</span> <span class="hl kwd">Zi_new</span><span class="hl opt">,</span> times<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">)</span>
        <span class="hl kwa">end</span> <span class="hl slc">// end of [if]</span>
      <span class="hl kwa">end</span> <span class="hl slc">// end of [_ when ...]</span>
    | _ <span class="hl opt">=&gt;</span> <span class="hl num">0</span>
  <span class="hl kwa">end</span> <span class="hl slc">// end of [loop]</span>

  <span class="hl kwa">fun</span> loopv
    <span class="hl opt">(</span><span class="hl kwd">Zrv</span><span class="hl opt">:</span> v2df<span class="hl opt">,</span> <span class="hl kwd">Ziv</span><span class="hl opt">:</span> v2df<span class="hl opt">,</span> times<span class="hl opt">:</span> <span class="hl kwb">int</span><span class="hl opt">):&lt;</span>cloref1<span class="hl opt">&gt;</span> <span class="hl kwb">int</span> <span class="hl opt">=</span> <span class="hl kwa">let</span>
    <span class="hl kwa">val</span> <span class="hl kwd">Trv</span> <span class="hl opt">=</span> <span class="hl kwd">Zrv</span> <span class="hl opt">*</span> <span class="hl kwd">Zrv</span> <span class="hl kwa">and</span> <span class="hl kwd">Tiv</span> <span class="hl opt">=</span> <span class="hl kwd">Ziv</span> <span class="hl opt">*</span> <span class="hl kwd">Ziv</span><span class="hl opt">;</span> <span class="hl kwa">val</span> <span class="hl kwd">Triv</span> <span class="hl opt">=</span> <span class="hl kwd">Trv</span> <span class="hl opt">+</span> <span class="hl kwd">Tiv</span>
    <span class="hl kwa">val</span> <span class="hl kwd">Tri0</span> <span class="hl opt">=</span> v2df_fst <span class="hl opt">(</span><span class="hl kwd">Triv</span><span class="hl opt">)</span> <span class="hl kwa">and</span> <span class="hl kwd">Tri1</span> <span class="hl opt">=</span> v2df_snd <span class="hl opt">(</span><span class="hl kwd">Triv</span><span class="hl opt">)</span>
<span class="hl com">(*</span>
<span class="hl com">    val () = begin</span>
<span class="hl com">      print &quot;loopv: Tri0 = &quot;; print Tri0; print_newline ();</span>
<span class="hl com">      print &quot;loopv: Tri1 = &quot;; print Tri1; print_newline ();</span>
<span class="hl com">    end</span>
<span class="hl com">*)</span>
  <span class="hl kwa">in</span>
    case<span class="hl opt">+</span> <span class="hl num">0</span> <span class="hl kwa">of</span>
    | _ <span class="hl kwa">when</span> <span class="hl kwd">Tri0</span> <span class="hl opt">&lt;=</span> <span class="hl kwd">LIMIT2</span> <span class="hl opt">=&gt;</span> <span class="hl kwa">begin</span> case<span class="hl opt">+</span> <span class="hl num">0</span> <span class="hl kwa">of</span>
      | _ <span class="hl kwa">when</span> <span class="hl kwd">Tri1</span> <span class="hl opt">&lt;=</span> <span class="hl kwd">LIMIT2</span> <span class="hl opt">=&gt;</span> <span class="hl kwa">begin</span>
          <span class="hl kwa">if</span> times <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl kwa">then</span> <span class="hl num">0x3</span> <span class="hl kwa">else let</span>
            <span class="hl kwa">val</span> <span class="hl kwd">Zrv_new</span> <span class="hl opt">=</span> <span class="hl kwd">Trv</span> <span class="hl opt">-</span> <span class="hl kwd">Tiv</span> <span class="hl opt">+</span> <span class="hl kwd">Crv</span>
            <span class="hl kwa">val</span> <span class="hl kwd">Ziv_new</span> <span class="hl opt">=</span> dbl_v2df <span class="hl opt">(</span><span class="hl kwd">Zrv</span> <span class="hl opt">*</span> <span class="hl kwd">Ziv</span><span class="hl opt">) +</span> <span class="hl kwd">Civ</span>
          <span class="hl kwa">in</span>
            loopv <span class="hl opt">(</span><span class="hl kwd">Zrv_new</span><span class="hl opt">,</span> <span class="hl kwd">Ziv_new</span><span class="hl opt">,</span> times<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">)</span>
          <span class="hl kwa">end</span> <span class="hl slc">// end of [if]</span>
        <span class="hl kwa">end</span> <span class="hl slc">// end of [_ when ...]</span>
      | _ <span class="hl opt">=&gt;</span> <span class="hl kwa">begin</span>
          <span class="hl kwa">if</span> times <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl kwa">then</span> <span class="hl num">0x2</span> <span class="hl kwa">else let</span>
            <span class="hl kwa">val</span> <span class="hl kwd">Zr0</span> <span class="hl opt">=</span> v2df_fst <span class="hl opt">(</span><span class="hl kwd">Zrv</span><span class="hl opt">)</span> <span class="hl kwa">and</span> <span class="hl kwd">Zi0</span> <span class="hl opt">=</span> v2df_fst <span class="hl opt">(</span><span class="hl kwd">Ziv</span><span class="hl opt">)</span>
            <span class="hl kwa">val</span> <span class="hl kwd">Tr0</span> <span class="hl opt">=</span> v2df_fst <span class="hl opt">(</span><span class="hl kwd">Trv</span><span class="hl opt">)</span> <span class="hl kwa">and</span> <span class="hl kwd">Ti0</span> <span class="hl opt">=</span> v2df_fst <span class="hl opt">(</span><span class="hl kwd">Tiv</span><span class="hl opt">)</span>
            <span class="hl kwa">val</span> <span class="hl kwd">Zr0_new</span> <span class="hl opt">=</span> <span class="hl kwd">Tr0</span> <span class="hl opt">-</span> <span class="hl kwd">Ti0</span> <span class="hl opt">+</span> <span class="hl kwd">Cr0</span>
            <span class="hl kwa">val</span> <span class="hl kwd">Zi0_new</span> <span class="hl opt">=</span> <span class="hl num">2.0</span> <span class="hl opt">* (</span><span class="hl kwd">Zr0</span> <span class="hl opt">*</span> <span class="hl kwd">Zi0</span><span class="hl opt">) +</span> <span class="hl kwd">Ci0</span>
          <span class="hl kwa">in</span>
            loop <span class="hl opt">(</span><span class="hl num">1</span><span class="hl com">(*eo*)</span><span class="hl opt">,</span> <span class="hl kwd">Cr0</span><span class="hl opt">,</span> <span class="hl kwd">Ci0</span><span class="hl opt">,</span> <span class="hl kwd">Zr0_new</span><span class="hl opt">,</span> <span class="hl kwd">Zi0_new</span><span class="hl opt">,</span> times<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">)</span>
          <span class="hl kwa">end</span> <span class="hl slc">// end of [if]</span>
        <span class="hl kwa">end</span> <span class="hl slc">// end of [_]</span>
      <span class="hl kwa">end</span> <span class="hl slc">// end of [_ when ...]</span>
    | _ <span class="hl opt">=&gt;</span> <span class="hl kwa">begin</span> case<span class="hl opt">+</span> <span class="hl num">0</span> <span class="hl kwa">of</span>
      | _ <span class="hl kwa">when</span> <span class="hl kwd">Tri1</span> <span class="hl opt">&lt;=</span> <span class="hl kwd">LIMIT2</span> <span class="hl opt">=&gt;</span> <span class="hl kwa">begin</span>
          <span class="hl kwa">if</span> times <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl kwa">then</span> <span class="hl num">0x1</span> <span class="hl kwa">else let</span>
            <span class="hl kwa">val</span> <span class="hl kwd">Zr1</span> <span class="hl opt">=</span> v2df_snd <span class="hl opt">(</span><span class="hl kwd">Zrv</span><span class="hl opt">)</span> <span class="hl kwa">and</span> <span class="hl kwd">Zi1</span> <span class="hl opt">=</span> v2df_snd <span class="hl opt">(</span><span class="hl kwd">Ziv</span><span class="hl opt">)</span>
            <span class="hl kwa">val</span> <span class="hl kwd">Tr1</span> <span class="hl opt">=</span> v2df_snd <span class="hl opt">(</span><span class="hl kwd">Trv</span><span class="hl opt">)</span> <span class="hl kwa">and</span> <span class="hl kwd">Ti1</span> <span class="hl opt">=</span> v2df_snd <span class="hl opt">(</span><span class="hl kwd">Tiv</span><span class="hl opt">)</span>
            <span class="hl kwa">val</span> <span class="hl kwd">Zr1_new</span> <span class="hl opt">=</span> <span class="hl kwd">Tr1</span> <span class="hl opt">-</span> <span class="hl kwd">Ti1</span> <span class="hl opt">+</span> <span class="hl kwd">Cr1</span>
            <span class="hl kwa">val</span> <span class="hl kwd">Zi1_new</span> <span class="hl opt">=</span> <span class="hl num">2.0</span> <span class="hl opt">* (</span><span class="hl kwd">Zr1</span> <span class="hl opt">*</span> <span class="hl kwd">Zi1</span><span class="hl opt">) +</span> <span class="hl kwd">Ci1</span>
          <span class="hl kwa">in</span>
            loop <span class="hl opt">(</span><span class="hl num">0</span><span class="hl com">(*eo*)</span><span class="hl opt">,</span> <span class="hl kwd">Cr1</span><span class="hl opt">,</span> <span class="hl kwd">Ci1</span><span class="hl opt">,</span> <span class="hl kwd">Zr1_new</span><span class="hl opt">,</span> <span class="hl kwd">Zi1_new</span><span class="hl opt">,</span> times<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">)</span>
          <span class="hl kwa">end</span> <span class="hl slc">// end of [if]</span>
        <span class="hl kwa">end</span> <span class="hl slc">// end of [_ when ...]</span>
      | _ <span class="hl opt">=&gt;</span> <span class="hl num">0x0</span> <span class="hl slc">// return value</span>
      <span class="hl kwa">end</span> <span class="hl slc">// end of [_]</span>
  <span class="hl kwa">end</span> <span class="hl slc">// end of [loopv]</span>
<span class="hl kwa">in</span>
  loopv <span class="hl opt">(</span>zero_v2df<span class="hl opt">,</span> zero_v2df<span class="hl opt">,</span> <span class="hl kwd">TIMES</span><span class="hl opt">)</span>
<span class="hl kwa">end</span> <span class="hl slc">// end of [test]</span>

<span class="hl ppc">#define i2b byte_of_int</span>

<span class="hl kwa">fun</span> output
  <span class="hl opt">(</span>x<span class="hl opt">:</span> <span class="hl kwb">int</span><span class="hl opt">,</span> y<span class="hl opt">:</span> <span class="hl kwb">int</span><span class="hl opt">,</span> b<span class="hl opt">:</span> byte<span class="hl opt">,</span> n<span class="hl opt">:</span> natLte <span class="hl num">8</span><span class="hl opt">):&lt;</span>cloref1<span class="hl opt">&gt;</span> void <span class="hl opt">=</span> <span class="hl kwa">begin</span>
  case<span class="hl opt">+</span> <span class="hl num">0</span> <span class="hl kwa">of</span>
  | _ <span class="hl kwa">when</span> x <span class="hl opt">&lt;</span> w <span class="hl opt">=&gt;</span> <span class="hl kwa">let</span>
      <span class="hl kwa">val</span> res <span class="hl opt">=</span> test <span class="hl opt">(</span>x<span class="hl opt">,</span> y<span class="hl opt">)</span>
<span class="hl com">(*</span>
<span class="hl com">      val () = (print &quot;res = &quot;; print res; print_newline ())</span>
<span class="hl com">*)</span>
    <span class="hl kwa">in</span>
      case<span class="hl opt">+</span> <span class="hl num">0</span> <span class="hl kwa">of</span>
      | _ <span class="hl kwa">when</span> n <span class="hl opt">&gt;=</span> <span class="hl num">2</span> <span class="hl opt">=&gt;</span> <span class="hl kwa">begin</span>
          output <span class="hl opt">(</span>x <span class="hl opt">+</span> <span class="hl num">2</span><span class="hl opt">,</span> y<span class="hl opt">, (</span>b <span class="hl opt">&lt;&lt;</span> <span class="hl num">2</span><span class="hl opt">) +</span> i2b res<span class="hl opt">,</span> n <span class="hl opt">-</span> <span class="hl num">2</span><span class="hl opt">)</span>
        <span class="hl kwa">end</span> <span class="hl slc">// end of [_ when ...]</span>
      | _ <span class="hl com">(*n=0*)</span> <span class="hl opt">=&gt;</span> <span class="hl kwa">let</span>
<span class="hl com">(*</span>
<span class="hl com">          val () = begin</span>
<span class="hl com">            print &quot;b = &quot;; print (int_of_byte b); print_newline ()</span>
<span class="hl com">          end</span>
<span class="hl com">*)</span>
          <span class="hl kwa">val</span> <span class="hl opt">() =</span> print_byte b <span class="hl kwa">in</span> output <span class="hl opt">(</span>x <span class="hl opt">+</span> <span class="hl num">2</span><span class="hl opt">,</span> y<span class="hl opt">,</span> i2b res<span class="hl opt">,</span> <span class="hl num">6</span><span class="hl opt">)</span>
        <span class="hl kwa">end</span> <span class="hl slc">// end of [_]</span>
    <span class="hl kwa">end</span> <span class="hl slc">// end of [_ when ...]</span>
  | _ <span class="hl opt">=&gt;</span> <span class="hl kwa">let</span>
      <span class="hl kwa">val</span> <span class="hl opt">() =</span> print_byte <span class="hl opt">(</span>b <span class="hl opt">&lt;&lt;</span> n<span class="hl opt">)</span>
    <span class="hl kwa">in</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>y <span class="hl opt">&lt;</span> h <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">)</span> <span class="hl kwa">then</span> output <span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> y <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">,</span> i2b <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">8</span><span class="hl opt">)</span> <span class="hl kwa">else</span> <span class="hl opt">()</span>
    <span class="hl kwa">end</span> <span class="hl slc">// end of [_]</span>
<span class="hl kwa">end</span> <span class="hl slc">// end of [output]</span>

<span class="hl kwa">val</span> <span class="hl opt">() =</span> printf <span class="hl opt">(</span><span class="hl str">&quot;P4</span><span class="hl esc">\n</span><span class="hl str">%i %i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> &#64;<span class="hl opt">(</span>h<span class="hl opt">,</span> w<span class="hl opt">))</span>

<span class="hl kwa">in</span>

<span class="hl kwa">if</span> <span class="hl opt">(</span>h <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">then</span> output <span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> i2b <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">8</span><span class="hl opt">)</span>

<span class="hl kwa">end</span> <span class="hl slc">// end of [mandelbrot]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">implement</span> main <span class="hl opt">(</span>argc<span class="hl opt">,</span> argv<span class="hl opt">) =</span> <span class="hl kwa">let</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> assert_errmsg_bool1
    <span class="hl opt">(</span>argc <span class="hl opt">=</span> <span class="hl num">2</span><span class="hl opt">,</span> <span class="hl str">&quot;Exit: wrong command format!</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">)</span>
  <span class="hl kwa">val</span> i <span class="hl opt">=</span> int1_of_string argv<span class="hl opt">.[</span><span class="hl num">1</span><span class="hl opt">]</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> assert_errmsg_bool1
    <span class="hl opt">(</span>i <span class="hl opt">&gt;=</span> <span class="hl num">2</span><span class="hl opt">,</span> <span class="hl str">&quot;The input integer needs to be at least 2.</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">)</span>
<span class="hl kwa">in</span>
  mandelbrot <span class="hl opt">(</span>i<span class="hl opt">,</span> i<span class="hl opt">)</span>
<span class="hl kwa">end</span> <span class="hl slc">// end of [main]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl com">(* end of [mandelbrot_simd.dats] *)</span>
