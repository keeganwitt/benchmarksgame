<span class="hl opt">#</span>lang racket<span class="hl opt">/</span>base
<span class="hl slc">;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;; http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">;; Translated from Mike Pall's Lua version.</span>
<span class="hl slc">;; Parallelized by Sam Tobin-Hochstadt</span>

<span class="hl opt">(</span><span class="hl kwa">require</span> racket<span class="hl opt">/</span>cmdline racket<span class="hl opt">/</span>future
         racket<span class="hl opt">/</span>require <span class="hl opt">(</span><span class="hl kwa">for-syntax</span> racket<span class="hl opt">/</span>base<span class="hl opt">)</span>
         <span class="hl opt">(</span><span class="hl kwa">filtered-in</span> <span class="hl opt">(</span>λ <span class="hl opt">(</span><span class="hl kwa">name</span><span class="hl opt">) (</span><span class="hl kwa">regexp-replace</span> <span class="hl opt">#</span>rx<span class="hl str">&quot;unsafe-&quot;</span> name <span class="hl str">&quot;&quot;</span><span class="hl opt">))</span>
                      racket<span class="hl opt">/</span>unsafe<span class="hl opt">/</span>ops<span class="hl opt">)</span>
         <span class="hl opt">(</span><span class="hl kwa">only-in</span> racket<span class="hl opt">/</span>flonum make-flvector<span class="hl opt">))</span>

<span class="hl opt">(</span><span class="hl kwa">define-syntax-rule</span> <span class="hl opt">(</span><span class="hl kwa">for</span><span class="hl opt">/</span>par k <span class="hl opt">([</span>i N<span class="hl opt">])</span> b<span class="hl opt">)</span>  
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">([</span>stride <span class="hl opt">(</span><span class="hl kwa">fxquotient</span> N k<span class="hl opt">)])</span>
    <span class="hl opt">(</span><span class="hl kwa">define</span> fs 
      <span class="hl opt">(</span><span class="hl kwa">for</span><span class="hl opt">/</span>list <span class="hl opt">([</span>n k<span class="hl opt">])</span>
        <span class="hl opt">(</span><span class="hl kwa">future</span> <span class="hl opt">(</span>λ <span class="hl opt">() (</span><span class="hl kwa">for</span> <span class="hl opt">([</span>i <span class="hl opt">(</span><span class="hl kwa">in-range</span> <span class="hl opt">(</span><span class="hl kwa">fx</span><span class="hl opt">*</span> n stride<span class="hl opt">) (</span><span class="hl kwa">fxmin</span> N <span class="hl opt">(</span><span class="hl kwa">fx</span><span class="hl opt">* (</span><span class="hl kwa">fx</span><span class="hl opt">+</span> n <span class="hl num">1</span><span class="hl opt">)</span> stride<span class="hl opt">)))])</span> b<span class="hl opt">)))))</span>
    <span class="hl opt">(</span><span class="hl kwa">for-each</span> touch fs<span class="hl opt">)))</span>


<span class="hl slc">;; the big let improves performance by about 20%</span>
<span class="hl opt">(</span><span class="hl kwa">let</span><span class="hl opt">* ()</span>
  <span class="hl opt">(</span><span class="hl kwa">define</span> N <span class="hl opt">(</span><span class="hl kwa">command-line</span> <span class="hl opt">#:</span>args <span class="hl opt">(</span><span class="hl kwa">n</span><span class="hl opt">) (</span><span class="hl kwa">string-</span><span class="hl opt">&gt;</span>number n<span class="hl opt">)))</span>
  <span class="hl opt">(</span><span class="hl kwa">define</span> C <span class="hl opt">(</span><span class="hl kwa">processor-count</span><span class="hl opt">))</span>
  <span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">A</span> i j<span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">([</span>ij <span class="hl opt">(</span><span class="hl kwa">fx</span><span class="hl opt">+</span> i j<span class="hl opt">)])</span>
      <span class="hl opt">(</span><span class="hl kwa">fl</span><span class="hl opt">/</span> <span class="hl num">1.0</span> <span class="hl opt">(</span><span class="hl kwa">fl</span><span class="hl opt">+ (</span><span class="hl kwa">fl</span><span class="hl opt">* (</span><span class="hl kwa">fl</span><span class="hl opt">* (</span><span class="hl kwa">fx-</span><span class="hl opt">&gt;</span>fl ij<span class="hl opt">)</span>
                              <span class="hl opt">(</span><span class="hl kwa">fx-</span><span class="hl opt">&gt;</span>fl <span class="hl opt">(</span><span class="hl kwa">fx</span><span class="hl opt">+</span> ij <span class="hl num">1</span><span class="hl opt">)))</span>
                         <span class="hl num">0.5</span><span class="hl opt">)</span> 
                    <span class="hl opt">(</span><span class="hl kwa">fx-</span><span class="hl opt">&gt;</span>fl <span class="hl opt">(</span><span class="hl kwa">fx</span><span class="hl opt">+</span> i <span class="hl num">1</span><span class="hl opt">))))))</span>
  <span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">Av</span> x y N<span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl kwa">for</span><span class="hl opt">/</span>par C <span class="hl opt">([</span>i N<span class="hl opt">])</span>
      <span class="hl opt">(</span><span class="hl kwa">flvector-set</span><span class="hl opt">!</span>
       y i
       <span class="hl opt">(</span><span class="hl kwa">let</span> L <span class="hl opt">([</span>a <span class="hl num">0.0</span><span class="hl opt">] [</span>j <span class="hl num">0</span><span class="hl opt">])</span>
         <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">fx</span><span class="hl opt">=</span> j N<span class="hl opt">)</span> a
             <span class="hl opt">(</span><span class="hl kwa">L</span> <span class="hl opt">(</span><span class="hl kwa">fl</span><span class="hl opt">+</span> a <span class="hl opt">(</span><span class="hl kwa">fl</span><span class="hl opt">* (</span><span class="hl kwa">flvector-ref</span> x j<span class="hl opt">) (</span><span class="hl kwa">A</span> i j<span class="hl opt">)))</span>
                <span class="hl opt">(</span><span class="hl kwa">fx</span><span class="hl opt">+</span> j <span class="hl num">1</span><span class="hl opt">)))))))</span>
  <span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">Atv</span> x y N<span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl kwa">for</span><span class="hl opt">/</span>par C <span class="hl opt">([</span>i N<span class="hl opt">])</span>
      <span class="hl opt">(</span><span class="hl kwa">flvector-set</span><span class="hl opt">!</span>
       y i
       <span class="hl opt">(</span><span class="hl kwa">let</span> L <span class="hl opt">([</span>a <span class="hl num">0.0</span><span class="hl opt">] [</span>j <span class="hl num">0</span><span class="hl opt">])</span>
         <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">fx</span><span class="hl opt">=</span> j N<span class="hl opt">)</span> a
             <span class="hl opt">(</span><span class="hl kwa">L</span> <span class="hl opt">(</span><span class="hl kwa">fl</span><span class="hl opt">+</span> a <span class="hl opt">(</span><span class="hl kwa">fl</span><span class="hl opt">* (</span><span class="hl kwa">flvector-ref</span> x j<span class="hl opt">) (</span><span class="hl kwa">A</span> j i<span class="hl opt">)))</span>
                <span class="hl opt">(</span><span class="hl kwa">fx</span><span class="hl opt">+</span> j <span class="hl num">1</span><span class="hl opt">)))))))</span>
  <span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">AtAv</span> x y t N<span class="hl opt">) (</span><span class="hl kwa">Av</span> x t N<span class="hl opt">) (</span><span class="hl kwa">Atv</span> t y N<span class="hl opt">))</span>
  <span class="hl opt">(</span><span class="hl kwa">define</span> u <span class="hl opt">(</span><span class="hl kwa">make-flvector</span> N <span class="hl num">1.0</span><span class="hl opt">))</span>
  <span class="hl opt">(</span><span class="hl kwa">define</span> v <span class="hl opt">(</span><span class="hl kwa">make-flvector</span> N<span class="hl opt">))</span>
  <span class="hl opt">(</span><span class="hl kwa">define</span> t <span class="hl opt">(</span><span class="hl kwa">make-flvector</span> N<span class="hl opt">))</span>
  <span class="hl opt">(</span><span class="hl kwa">for</span> <span class="hl opt">([</span>i <span class="hl opt">(</span><span class="hl kwa">in-range</span> <span class="hl num">10</span><span class="hl opt">)])</span>
    <span class="hl opt">(</span><span class="hl kwa">AtAv</span> u v t N<span class="hl opt">) (</span><span class="hl kwa">AtAv</span> v u t N<span class="hl opt">))</span>
  <span class="hl opt">(</span><span class="hl kwa">displayln</span> <span class="hl opt">(</span><span class="hl kwa">real-</span><span class="hl opt">&gt;</span>decimal-string 
              <span class="hl opt">(</span><span class="hl kwa">flsqrt</span> 
               <span class="hl opt">(</span><span class="hl kwa">let</span> L <span class="hl opt">([</span>vBv <span class="hl num">0.0</span><span class="hl opt">] [</span>vv <span class="hl num">0.0</span><span class="hl opt">] [</span>i <span class="hl num">0</span><span class="hl opt">])</span>
                 <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">fx</span><span class="hl opt">=</span> i N<span class="hl opt">) (</span><span class="hl kwa">fl</span><span class="hl opt">/</span> vBv vv<span class="hl opt">)</span>
                     <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">([</span>ui <span class="hl opt">(</span><span class="hl kwa">flvector-ref</span> u i<span class="hl opt">)] [</span>vi <span class="hl opt">(</span><span class="hl kwa">flvector-ref</span> v i<span class="hl opt">)])</span>
                       <span class="hl opt">(</span><span class="hl kwa">L</span> <span class="hl opt">(</span><span class="hl kwa">fl</span><span class="hl opt">+</span> vBv <span class="hl opt">(</span><span class="hl kwa">fl</span><span class="hl opt">*</span> ui vi<span class="hl opt">))</span>
                          <span class="hl opt">(</span><span class="hl kwa">fl</span><span class="hl opt">+</span> vv <span class="hl opt">(</span><span class="hl kwa">fl</span><span class="hl opt">*</span> vi vi<span class="hl opt">))</span>
                          <span class="hl opt">(</span><span class="hl kwa">fx</span><span class="hl opt">+</span> i <span class="hl num">1</span><span class="hl opt">))))))</span>
              <span class="hl num">9</span><span class="hl opt">)))</span>
