<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by Isaac Gouy</span>
<span class="hl com">   parallel by The Anh Tran</span>
<span class="hl com">   Updated by Alan McGovern</span>
<span class="hl com">*/</span>

<span class="hl kwa">using</span> System<span class="hl opt">;</span>
<span class="hl kwa">using</span> System<span class="hl opt">.</span>Threading<span class="hl opt">;</span>

<span class="hl kwa">class</span> SpectralNorm
<span class="hl opt">{</span>
    <span class="hl kwa">public class</span> BarrierHandle <span class="hl opt">:</span> System<span class="hl opt">.</span>Threading<span class="hl opt">.</span>WaitHandle
    <span class="hl opt">{</span>
        <span class="hl kwb">int</span> current<span class="hl opt">;</span>
        <span class="hl kwb">int</span> threads<span class="hl opt">;</span>
        ManualResetEvent handle <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">ManualResetEvent</span> <span class="hl opt">(</span><span class="hl kwa">false</span><span class="hl opt">);</span>

        <span class="hl kwa">public</span> <span class="hl kwd">BarrierHandle</span> <span class="hl opt">(</span><span class="hl kwb">int</span> threads<span class="hl opt">)</span>
        <span class="hl opt">{</span>
	    <span class="hl kwa">this</span><span class="hl opt">.</span>current <span class="hl opt">=</span> threads<span class="hl opt">;</span>
            <span class="hl kwa">this</span><span class="hl opt">.</span>threads <span class="hl opt">=</span> threads<span class="hl opt">;</span>
        <span class="hl opt">}</span>

        <span class="hl kwa">public override</span> <span class="hl kwb">bool</span> <span class="hl kwd">WaitOne</span><span class="hl opt">()</span>
        <span class="hl opt">{</span>
            ManualResetEvent h <span class="hl opt">=</span> handle<span class="hl opt">;</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>Interlocked<span class="hl opt">.</span><span class="hl kwd">Decrement</span> <span class="hl opt">(</span><span class="hl kwa">ref</span> current<span class="hl opt">) &gt;</span> <span class="hl num">0</span><span class="hl opt">) {</span>
                h<span class="hl opt">.</span><span class="hl kwd">WaitOne</span> <span class="hl opt">();</span>
            <span class="hl opt">}</span>
            <span class="hl kwa">else</span> <span class="hl opt">{</span>
                handle <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">ManualResetEvent</span> <span class="hl opt">(</span><span class="hl kwa">false</span><span class="hl opt">);</span>
                Interlocked<span class="hl opt">.</span><span class="hl kwd">Exchange</span> <span class="hl opt">(</span><span class="hl kwa">ref</span> current<span class="hl opt">,</span> threads<span class="hl opt">);</span>
                h<span class="hl opt">.</span><span class="hl kwd">Set</span> <span class="hl opt">();</span>
                h<span class="hl opt">.</span><span class="hl kwd">Close</span> <span class="hl opt">();</span>
            <span class="hl opt">}</span>

            <span class="hl kwa">return true</span><span class="hl opt">;</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span>
	
    <span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">Main</span><span class="hl opt">(</span>String<span class="hl opt">[]</span> args<span class="hl opt">)</span>
    <span class="hl opt">{</span>
        <span class="hl kwb">int</span> n <span class="hl opt">=</span> <span class="hl num">2500</span><span class="hl opt">;</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>args<span class="hl opt">.</span>Length <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">)</span>
            n <span class="hl opt">=</span> Int32<span class="hl opt">.</span><span class="hl kwd">Parse</span><span class="hl opt">(</span>args<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">]);</span>

        Console<span class="hl opt">.</span><span class="hl kwd">WriteLine</span><span class="hl opt">(</span><span class="hl str">&quot;{0:f9}&quot;</span><span class="hl opt">,</span> <span class="hl kwd">RunGame</span><span class="hl opt">(</span>n<span class="hl opt">));</span>
    <span class="hl opt">}</span>
	
    <span class="hl kwa">private static</span> <span class="hl kwb">double</span> <span class="hl kwd">RunGame</span><span class="hl opt">(</span><span class="hl kwb">int</span> n<span class="hl opt">)</span>
    <span class="hl opt">{</span>
        <span class="hl slc">// create unit vector</span>
        <span class="hl kwb">double</span><span class="hl opt">[]</span> u <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwb">double</span><span class="hl opt">[</span>n<span class="hl opt">];</span>
        <span class="hl kwb">double</span><span class="hl opt">[]</span> tmp <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwb">double</span><span class="hl opt">[</span>n<span class="hl opt">];</span>
        <span class="hl kwb">double</span><span class="hl opt">[]</span> v <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwb">double</span><span class="hl opt">[</span>n<span class="hl opt">];</span>

        <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> n<span class="hl opt">;</span> i<span class="hl opt">++)</span>
            u<span class="hl opt">[</span>i<span class="hl opt">] =</span> <span class="hl num">1.0</span><span class="hl opt">;</span>

        <span class="hl kwb">int</span> nthread <span class="hl opt">=</span> Environment<span class="hl opt">.</span>ProcessorCount<span class="hl opt">;</span>

		BarrierHandle barrier <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">BarrierHandle</span> <span class="hl opt">(</span>nthread<span class="hl opt">);</span>
        <span class="hl slc">// objects contain result of each thread</span>
        Approximate<span class="hl opt">[]</span> apx <span class="hl opt">=</span> <span class="hl kwa">new</span> Approximate<span class="hl opt">[</span>nthread<span class="hl opt">];</span>

        <span class="hl slc">// thread handle for waiting/joining</span>
        Thread<span class="hl opt">[]</span> threads <span class="hl opt">=</span> <span class="hl kwa">new</span> Thread<span class="hl opt">[</span>nthread<span class="hl opt">];</span>

        <span class="hl slc">// create thread and hand out tasks</span>
        <span class="hl kwb">int</span> chunk <span class="hl opt">=</span> n <span class="hl opt">/</span> nthread<span class="hl opt">;</span>
        <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> nthread<span class="hl opt">;</span> i<span class="hl opt">++)</span>
        <span class="hl opt">{</span>
            <span class="hl kwb">int</span> r1 <span class="hl opt">=</span> i <span class="hl opt">*</span> chunk<span class="hl opt">;</span>
            <span class="hl kwb">int</span> r2 <span class="hl opt">= (</span>i <span class="hl opt">&lt; (</span>nthread <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">))</span> ? r1 <span class="hl opt">+</span> chunk <span class="hl opt">:</span> n<span class="hl opt">;</span>

            apx<span class="hl opt">[</span>i<span class="hl opt">] =</span> <span class="hl kwa">new</span> <span class="hl kwd">Approximate</span><span class="hl opt">(</span>u<span class="hl opt">,</span> v<span class="hl opt">,</span> tmp<span class="hl opt">,</span> r1<span class="hl opt">,</span> r2<span class="hl opt">);</span>
			apx<span class="hl opt">[</span>i<span class="hl opt">].</span>Barrier <span class="hl opt">=</span> barrier<span class="hl opt">;</span>
            threads<span class="hl opt">[</span>i<span class="hl opt">] =</span> <span class="hl kwa">new</span> <span class="hl kwd">Thread</span><span class="hl opt">(</span><span class="hl kwa">new</span> <span class="hl kwd">ThreadStart</span><span class="hl opt">(</span>apx<span class="hl opt">[</span>i<span class="hl opt">].</span>Evaluate<span class="hl opt">));</span>
            threads<span class="hl opt">[</span>i<span class="hl opt">].</span><span class="hl kwd">Start</span><span class="hl opt">();</span>
        <span class="hl opt">}</span>

        <span class="hl slc">// collect results</span>
        <span class="hl kwb">double</span> vBv <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">,</span> vv <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
        <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> nthread<span class="hl opt">;</span> i<span class="hl opt">++)</span>
        <span class="hl opt">{</span>
            threads<span class="hl opt">[</span>i<span class="hl opt">].</span><span class="hl kwd">Join</span><span class="hl opt">();</span>

            vBv <span class="hl opt">+=</span> apx<span class="hl opt">[</span>i<span class="hl opt">].</span>m_vBv<span class="hl opt">;</span>
            vv <span class="hl opt">+=</span> apx<span class="hl opt">[</span>i<span class="hl opt">].</span>m_vv<span class="hl opt">;</span>
        <span class="hl opt">}</span>

        <span class="hl kwa">return</span> Math<span class="hl opt">.</span><span class="hl kwd">Sqrt</span><span class="hl opt">(</span>vBv <span class="hl opt">/</span> vv<span class="hl opt">);</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">private class</span> Approximate
    <span class="hl opt">{</span>
        <span class="hl kwa">internal</span> BarrierHandle Barrier<span class="hl opt">;</span>
        <span class="hl kwa">private</span> <span class="hl kwb">double</span><span class="hl opt">[]</span> m_u<span class="hl opt">;</span>
        <span class="hl kwa">private</span> <span class="hl kwb">double</span><span class="hl opt">[]</span> m_v<span class="hl opt">;</span>
        <span class="hl kwa">private</span> <span class="hl kwb">double</span><span class="hl opt">[]</span> m_tmp<span class="hl opt">;</span>
        <span class="hl kwa">private</span> <span class="hl kwb">int</span> m_range_begin<span class="hl opt">,</span> m_range_end<span class="hl opt">;</span>

        <span class="hl kwa">public</span> <span class="hl kwb">double</span> m_vBv <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">,</span> m_vv <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>

        <span class="hl kwa">public</span> <span class="hl kwd">Approximate</span><span class="hl opt">(</span><span class="hl kwb">double</span><span class="hl opt">[]</span> u<span class="hl opt">,</span> <span class="hl kwb">double</span><span class="hl opt">[]</span> v<span class="hl opt">,</span> <span class="hl kwb">double</span><span class="hl opt">[]</span> tmp<span class="hl opt">,</span> <span class="hl kwb">int</span> rbegin<span class="hl opt">,</span> <span class="hl kwb">int</span> rend<span class="hl opt">)</span>
        <span class="hl opt">{</span>
            m_u <span class="hl opt">=</span> u<span class="hl opt">;</span>
            m_v <span class="hl opt">=</span> v<span class="hl opt">;</span>
            m_tmp <span class="hl opt">=</span> tmp<span class="hl opt">;</span>

            m_range_begin <span class="hl opt">=</span> rbegin<span class="hl opt">;</span>
            m_range_end <span class="hl opt">=</span> rend<span class="hl opt">;</span>
        <span class="hl opt">}</span>

        <span class="hl kwa">public</span> <span class="hl kwb">void</span> <span class="hl kwd">Evaluate</span><span class="hl opt">()</span>
        <span class="hl opt">{</span>
            <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> <span class="hl num">10</span><span class="hl opt">;</span> i<span class="hl opt">++)</span>
            <span class="hl opt">{</span>
                <span class="hl kwd">MultiplyAtAv</span><span class="hl opt">(</span>m_u<span class="hl opt">,</span> m_tmp<span class="hl opt">,</span> m_v<span class="hl opt">);</span>
                <span class="hl kwd">MultiplyAtAv</span><span class="hl opt">(</span>m_v<span class="hl opt">,</span> m_tmp<span class="hl opt">,</span> m_u<span class="hl opt">);</span>
            <span class="hl opt">}</span>

            <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> m_range_begin<span class="hl opt">;</span> i <span class="hl opt">&lt;</span> m_range_end<span class="hl opt">;</span> i<span class="hl opt">++)</span>
            <span class="hl opt">{</span>
                m_vBv <span class="hl opt">+=</span> m_u<span class="hl opt">[</span>i<span class="hl opt">] *</span> m_v<span class="hl opt">[</span>i<span class="hl opt">];</span>
                m_vv <span class="hl opt">+=</span> m_v<span class="hl opt">[</span>i<span class="hl opt">] *</span> m_v<span class="hl opt">[</span>i<span class="hl opt">];</span>
            <span class="hl opt">}</span>
        <span class="hl opt">}</span>

        <span class="hl com">/* return element i,j of infinite matrix A */</span>
        <span class="hl kwa">private static</span> <span class="hl kwb">double</span> <span class="hl kwd">eval_A</span><span class="hl opt">(</span><span class="hl kwb">int</span> i<span class="hl opt">,</span> <span class="hl kwb">int</span> j<span class="hl opt">)</span>
        <span class="hl opt">{</span>
            <span class="hl kwb">int</span> div <span class="hl opt">= (((</span>i <span class="hl opt">+</span> j<span class="hl opt">) * (</span>i <span class="hl opt">+</span> j <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">) &gt;&gt;</span> <span class="hl num">1</span><span class="hl opt">) +</span> i <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">);</span>
            <span class="hl kwa">return</span> <span class="hl num">1.0</span> <span class="hl opt">/</span> div<span class="hl opt">;</span>
        <span class="hl opt">}</span>

        <span class="hl com">/* multiply vector v by matrix A */</span>
        <span class="hl kwa">private</span> <span class="hl kwb">void</span> <span class="hl kwd">MultiplyAv</span><span class="hl opt">(</span><span class="hl kwb">double</span><span class="hl opt">[]</span> v<span class="hl opt">,</span> <span class="hl kwb">double</span><span class="hl opt">[]</span> Av<span class="hl opt">)</span>
        <span class="hl opt">{</span>
            <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> m_range_begin<span class="hl opt">;</span> i <span class="hl opt">&lt;</span> m_range_end<span class="hl opt">;</span> i<span class="hl opt">++)</span>
            <span class="hl opt">{</span>
                <span class="hl kwb">double</span> sum <span class="hl opt">=</span> <span class="hl num">0.0</span><span class="hl opt">;</span>
                <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> j <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> j <span class="hl opt">&lt;</span> v<span class="hl opt">.</span>Length<span class="hl opt">;</span> j<span class="hl opt">++)</span>
                    sum <span class="hl opt">+=</span> <span class="hl kwd">eval_A</span><span class="hl opt">(</span>i<span class="hl opt">,</span> j<span class="hl opt">) *</span> v<span class="hl opt">[</span>j<span class="hl opt">];</span>
                Av<span class="hl opt">[</span>i<span class="hl opt">] =</span> sum<span class="hl opt">;</span>
            <span class="hl opt">}</span>
        <span class="hl opt">}</span>

        <span class="hl com">/* multiply vector v by matrix A transposed */</span>
        <span class="hl kwa">private</span> <span class="hl kwb">void</span> <span class="hl kwd">MultiplyAtv</span><span class="hl opt">(</span><span class="hl kwb">double</span><span class="hl opt">[]</span> v<span class="hl opt">,</span> <span class="hl kwb">double</span><span class="hl opt">[]</span> Atv<span class="hl opt">)</span>
        <span class="hl opt">{</span>
            <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> m_range_begin<span class="hl opt">;</span> i <span class="hl opt">&lt;</span> m_range_end<span class="hl opt">;</span> i<span class="hl opt">++)</span>
            <span class="hl opt">{</span>
                <span class="hl kwb">double</span> sum <span class="hl opt">=</span> <span class="hl num">0.0</span><span class="hl opt">;</span>
                <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> j <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> j <span class="hl opt">&lt;</span> v<span class="hl opt">.</span>Length<span class="hl opt">;</span> j<span class="hl opt">++)</span>
                    sum <span class="hl opt">+=</span> <span class="hl kwd">eval_A</span><span class="hl opt">(</span>j<span class="hl opt">,</span> i<span class="hl opt">) *</span> v<span class="hl opt">[</span>j<span class="hl opt">];</span>
                Atv<span class="hl opt">[</span>i<span class="hl opt">] =</span> sum<span class="hl opt">;</span>
            <span class="hl opt">}</span>
        <span class="hl opt">}</span>

        <span class="hl com">/* multiply vector v by matrix A and then by matrix A transposed */</span>
        <span class="hl kwa">private</span> <span class="hl kwb">void</span> <span class="hl kwd">MultiplyAtAv</span><span class="hl opt">(</span><span class="hl kwb">double</span><span class="hl opt">[]</span> v<span class="hl opt">,</span> <span class="hl kwb">double</span><span class="hl opt">[]</span> tmp<span class="hl opt">,</span> <span class="hl kwb">double</span><span class="hl opt">[]</span> AtAv<span class="hl opt">)</span>
        <span class="hl opt">{</span>
            <span class="hl kwd">MultiplyAv</span><span class="hl opt">(</span>v<span class="hl opt">,</span> tmp<span class="hl opt">);</span>
            Barrier<span class="hl opt">.</span><span class="hl kwd">WaitOne</span> <span class="hl opt">();</span>

            <span class="hl kwd">MultiplyAtv</span><span class="hl opt">(</span>tmp<span class="hl opt">,</span> AtAv<span class="hl opt">);</span>
            Barrier<span class="hl opt">.</span><span class="hl kwd">WaitOne</span> <span class="hl opt">();</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span>
<span class="hl opt">}</span>

