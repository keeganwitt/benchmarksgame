<span class="hl com">(*</span>
<span class="hl com">** The Computer Language Benchmarks Game</span>
<span class="hl com">** http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com">**</span>
<span class="hl com">** contributed by Hongwei Xi</span>
<span class="hl com">**</span>
<span class="hl com">** compilation command:</span>
<span class="hl com">**   atscc -O3 k-nucleotide2.dats -o k-nucleotide2 -D_ATS_GCATS</span>
<span class="hl com">*)</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">staload</span> <span class="hl str">&quot;libc/SATS/stdio.sats&quot;</span>
<span class="hl kwa">staload</span> <span class="hl str">&quot;libc/SATS/stdlib.sats&quot;</span>
<span class="hl kwa">staload</span> <span class="hl str">&quot;libc/SATS/string.sats&quot;</span>
<span class="hl kwa">staload</span> _<span class="hl com">(*anonymous*)</span> <span class="hl opt">=</span> <span class="hl str">&quot;prelude/DATS/array.dats&quot;</span>
<span class="hl kwa">staload</span> _<span class="hl com">(*anonymous*)</span> <span class="hl opt">=</span> <span class="hl str">&quot;prelude/DATS/list_vt.dats&quot;</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl slc">// The hashtable implementation is based on linear-probing</span>
<span class="hl slc">// #include &quot;symtbl.dats&quot;</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl opt">%{^</span>

<span class="hl kwa">typedef</span> char <span class="hl opt">*</span>symbol_t <span class="hl opt">;</span>
<span class="hl kwa">typedef struct</span> <span class="hl opt">{</span> symbol_t sym <span class="hl opt">;</span> <span class="hl kwb">int</span> cnt <span class="hl opt">; }</span> tblent_t <span class="hl opt">;</span>

<span class="hl opt">%}</span>

<span class="hl com">(* ****** ****** *)</span>

abstype dna_t <span class="hl slc">// boxed type</span>
abst&#64;ype symbol_t <span class="hl opt">=</span> $extype <span class="hl str">&quot;symbol_t&quot;</span>
abstype symtbl_t <span class="hl slc">// boxed type</span>

<span class="hl kwa">extern fun</span> symtbl_make <span class="hl opt">(</span>dna<span class="hl opt">:</span> dna_t<span class="hl opt">,</span> size<span class="hl opt">:</span> <span class="hl kwd">Nat</span><span class="hl opt">) :</span> symtbl_t
<span class="hl kwa">extern fun</span> symtbl_clear <span class="hl opt">(</span>tbl<span class="hl opt">:</span> symtbl_t<span class="hl opt">) :</span> void <span class="hl opt">=</span> <span class="hl str">&quot;symtbl_clear&quot;</span>

<span class="hl kwa">extern fun</span> symtbl_search <span class="hl opt">(</span>tbl<span class="hl opt">:</span> symtbl_t<span class="hl opt">,</span> name<span class="hl opt">:</span> <span class="hl kwd">String</span><span class="hl opt">) :</span> <span class="hl kwb">int</span>
  <span class="hl opt">=</span> <span class="hl str">&quot;symtbl_search&quot;</span>
<span class="hl kwa">extern fun</span> symtbl_insert <span class="hl opt">(</span>tbl<span class="hl opt">:</span> symtbl_t<span class="hl opt">,</span> sym<span class="hl opt">:</span> symbol_t<span class="hl opt">,</span> cnt<span class="hl opt">:</span> <span class="hl kwb">int</span><span class="hl opt">) :</span> void
  <span class="hl opt">=</span> <span class="hl str">&quot;symtbl_insert&quot;</span>

<span class="hl kwa">extern fun</span> symtbl_fold <span class="hl opt">{</span>a<span class="hl opt">:</span>viewt&#64;ype<span class="hl opt">}</span>
  <span class="hl opt">(</span>tbl<span class="hl opt">:</span> symtbl_t<span class="hl opt">,</span> f<span class="hl opt">: &amp;(</span>symbol_t<span class="hl opt">,</span> <span class="hl kwb">int</span><span class="hl opt">, &amp;</span>a<span class="hl opt">) -&lt;</span>clo<span class="hl opt">&gt;</span> void<span class="hl opt">,</span> res<span class="hl opt">: &amp;</span>a<span class="hl opt">) :</span> void

<span class="hl kwa">extern fun</span> symtbl_dna_get <span class="hl opt">(</span>tbl<span class="hl opt">:</span> symtbl_t<span class="hl opt">):</span> dna_t <span class="hl opt">=</span> <span class="hl str">&quot;symtbl_dna_get&quot;</span>
<span class="hl kwa">extern fun</span> symtbl_symlen_get <span class="hl opt">(</span>tbl<span class="hl opt">:</span> symtbl_t<span class="hl opt">):</span> <span class="hl kwb">int</span> <span class="hl opt">=</span> <span class="hl str">&quot;symtbl_symlen_get&quot;</span>
<span class="hl kwa">extern fun</span> symtbl_symlen_set <span class="hl opt">(</span>tbl<span class="hl opt">:</span> symtbl_t<span class="hl opt">,</span> len<span class="hl opt">:</span> <span class="hl kwb">int</span><span class="hl opt">):</span> void <span class="hl opt">=</span> <span class="hl str">&quot;symtbl_symlen_set&quot;</span>

<span class="hl com">(* ****** ****** *)</span>

abst&#64;ype tblent_t <span class="hl opt">=</span> $extype <span class="hl str">&quot;tblent_t&quot;</span>

viewtypedef symtbl <span class="hl opt">(</span>sz<span class="hl opt">:</span><span class="hl kwb">int</span><span class="hl opt">,</span> n<span class="hl opt">:</span><span class="hl kwb">int</span><span class="hl opt">,</span> l<span class="hl opt">:</span>addr<span class="hl opt">) =</span> &#64;<span class="hl opt">{</span>
  dna<span class="hl opt">=</span> dna_t
<span class="hl opt">,</span> ptr<span class="hl opt">=</span> ptr l
<span class="hl opt">,</span> view_arr<span class="hl opt">=</span> &#64;<span class="hl opt">[</span>tblent_t<span class="hl opt">][</span>sz<span class="hl opt">]</span> &#64; l
<span class="hl opt">,</span> view_arr_gc<span class="hl opt">=</span> free_gc_v l
<span class="hl opt">,</span> size<span class="hl opt">=</span> <span class="hl kwb">int</span> sz
<span class="hl opt">,</span> symlen<span class="hl opt">=</span> <span class="hl kwb">int</span>
<span class="hl opt">,</span> nitm<span class="hl opt">=</span> <span class="hl kwb">int</span> n
<span class="hl opt">}</span>

viewtypedef symtbl0 <span class="hl opt">=</span> symtbl <span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> null<span class="hl opt">)</span>
viewtypedef symtbl <span class="hl opt">= [</span>sz<span class="hl opt">,</span>n<span class="hl opt">:</span>nat | sz <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">] [</span>l<span class="hl opt">:</span>addr<span class="hl opt">]</span> symtbl <span class="hl opt">(</span>sz<span class="hl opt">,</span> n<span class="hl opt">,</span> l<span class="hl opt">)</span>
assume symtbl_t <span class="hl opt">= [</span>l_tbl<span class="hl opt">:</span> addr<span class="hl opt">] (</span>vbox <span class="hl opt">(</span>symtbl &#64; l_tbl<span class="hl opt">)</span> | ptr l_tbl<span class="hl opt">)</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">implement</span> symtbl_dna_get <span class="hl opt">(</span>tbl<span class="hl opt">) =</span> <span class="hl kwa">begin</span>
  <span class="hl kwa">let val</span> <span class="hl opt">(</span>vbox pf_tbl | p_tbl<span class="hl opt">) =</span> tbl <span class="hl kwa">in</span> p_tbl<span class="hl opt">-&gt;</span>dna <span class="hl kwa">end</span>
<span class="hl kwa">end</span> <span class="hl com">(* end of [symtbl_dna_get] *)</span>

<span class="hl kwa">implement</span> symtbl_symlen_get <span class="hl opt">(</span>tbl<span class="hl opt">) =</span> <span class="hl kwa">begin</span>
  <span class="hl kwa">let val</span> <span class="hl opt">(</span>vbox pf_tbl | p_tbl<span class="hl opt">) =</span> tbl <span class="hl kwa">in</span> p_tbl<span class="hl opt">-&gt;</span>symlen <span class="hl kwa">end</span>
<span class="hl kwa">end</span> <span class="hl com">(* end of [symtbl_symlen_get] *)</span>

<span class="hl kwa">implement</span> symtbl_symlen_set <span class="hl opt">(</span>tbl<span class="hl opt">,</span> len<span class="hl opt">) =</span> <span class="hl kwa">begin</span>
  <span class="hl kwa">let val</span> <span class="hl opt">(</span>vbox pf_tbl | p_tbl<span class="hl opt">) =</span> tbl <span class="hl kwa">in</span> p_tbl<span class="hl opt">-&gt;</span>symlen <span class="hl opt">:=</span> len <span class="hl kwa">end</span>
<span class="hl kwa">end</span> <span class="hl com">(* end of [symtbl_symlen_set] *)</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">extern fun</span> print_symbol <span class="hl opt">(</span>sym<span class="hl opt">:</span> symbol_t<span class="hl opt">,</span> len<span class="hl opt">:</span> <span class="hl kwb">int</span><span class="hl opt">):</span> void <span class="hl opt">=</span> <span class="hl str">&quot;print_symbol&quot;</span>

<span class="hl opt">%{^</span>

ats_void_type print_symbol
  <span class="hl opt">(</span>symbol_t sym<span class="hl opt">,</span> ats_int_type len<span class="hl opt">) {</span>
  <span class="hl kwa">while</span> <span class="hl opt">(</span>len <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">) {</span> fputc <span class="hl opt">( *</span>sym<span class="hl opt">,</span> stdout<span class="hl opt">) ; --</span>len <span class="hl opt">; ++</span>sym <span class="hl opt">; }</span>
  <span class="hl kwa">return</span> <span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl opt">%}</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">extern fun</span> hash_string <span class="hl opt">{</span>n<span class="hl opt">:</span>nat<span class="hl opt">} (</span>s<span class="hl opt">:</span> <span class="hl kwb">string</span> n<span class="hl opt">,</span> n<span class="hl opt">:</span> size_t n<span class="hl opt">):&lt;&gt;</span> uInt
  <span class="hl opt">=</span> <span class="hl str">&quot;hash_string&quot;</span>
  
<span class="hl kwa">extern fun</span> hash_symbol <span class="hl opt">(</span>sym<span class="hl opt">:</span> symbol_t<span class="hl opt">,</span> len<span class="hl opt">:</span> <span class="hl kwb">int</span><span class="hl opt">):&lt;&gt;</span> uInt
  <span class="hl opt">=</span> <span class="hl str">&quot;hash_symbol&quot;</span>

<span class="hl opt">%{^</span>

<span class="hl slc">// a commonly used simple hash function</span>

<span class="hl kwa">static</span> <span class="hl slc">// inline</span>
ats_uint_type hash_symbol <span class="hl opt">(</span>symbol_t sym<span class="hl opt">,</span> ats_int_type len<span class="hl opt">) {</span>
  unsigned <span class="hl kwb">int</span> hash_val <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl opt">;</span>
  <span class="hl kwa">while</span> <span class="hl opt">(</span>len <span class="hl opt">&gt;=</span> <span class="hl num">4</span><span class="hl opt">) {</span>
    hash_val <span class="hl opt">+=</span> hash_val <span class="hl opt">*</span> <span class="hl num">33</span> <span class="hl opt">;</span>
    hash_val <span class="hl opt">+=</span> sym<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] &lt;&lt;</span> <span class="hl num">24</span> <span class="hl opt">;</span>
    hash_val <span class="hl opt">+=</span> sym<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">] &lt;&lt;</span> <span class="hl num">16</span> <span class="hl opt">;</span>
    hash_val <span class="hl opt">+=</span> sym<span class="hl opt">[</span><span class="hl num">2</span><span class="hl opt">] &lt;&lt;</span>  <span class="hl num">8</span> <span class="hl opt">;</span>
    hash_val <span class="hl opt">+=</span> sym<span class="hl opt">[</span><span class="hl num">3</span><span class="hl opt">] ;</span>
    sym <span class="hl opt">+=</span> <span class="hl num">4</span> <span class="hl opt">;</span> len <span class="hl opt">-=</span> <span class="hl num">4</span> <span class="hl opt">;</span>
  <span class="hl opt">}</span> <span class="hl slc">// end of [while]</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>len <span class="hl opt">&gt;=</span> <span class="hl num">2</span><span class="hl opt">) {</span>
    hash_val <span class="hl opt">=</span> hash_val <span class="hl opt">*</span> <span class="hl num">33</span> <span class="hl opt">+ (</span>sym<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] &lt;&lt;</span> <span class="hl num">8</span><span class="hl opt">) +</span> sym<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">] ;</span>
    sym <span class="hl opt">+=</span> <span class="hl num">2</span> <span class="hl opt">;</span> len <span class="hl opt">-=</span> <span class="hl num">2</span> <span class="hl opt">;</span>
  <span class="hl opt">}</span> <span class="hl slc">// end of [if]</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>len <span class="hl opt">&gt;=</span> <span class="hl num">1</span><span class="hl opt">) {</span>
    hash_val <span class="hl opt">=</span> hash_val <span class="hl opt">*</span> <span class="hl num">33</span> <span class="hl opt">+</span> sym<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] ;</span>
  <span class="hl opt">}</span> <span class="hl slc">// end of [while]</span>
  <span class="hl kwa">return</span> hash_val <span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwa">static inline</span>
ats_uint_type
hash_string <span class="hl opt">(</span>ats_ptr_type str<span class="hl opt">,</span> ats_size_type len<span class="hl opt">) {</span>
  <span class="hl kwa">return</span> hash_symbol <span class="hl opt">(</span>str<span class="hl opt">,</span> len<span class="hl opt">) ;</span>
<span class="hl opt">}</span>

<span class="hl opt">%}</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl opt">%{^</span>

ats_ptr_type
tblent_array_make <span class="hl opt">(</span>ats_int_type sz<span class="hl opt">) {</span>
  <span class="hl kwa">return</span> ats_calloc_gc <span class="hl opt">(</span>sz<span class="hl opt">,</span> sizeof<span class="hl opt">(</span>tblent_t<span class="hl opt">)) ;</span>
<span class="hl opt">}</span> <span class="hl com">/* end of [tblent_array_make] */</span>

<span class="hl opt">%}</span>

<span class="hl kwa">extern fun</span> tblent_array_make <span class="hl opt">{</span>sz<span class="hl opt">:</span> nat<span class="hl opt">} (</span>sz<span class="hl opt">:</span> <span class="hl kwb">int</span> sz<span class="hl opt">)</span>
  <span class="hl opt">:&lt;&gt; [</span>l<span class="hl opt">:</span>addr<span class="hl opt">] (</span>free_gc_v l<span class="hl opt">,</span> array_v <span class="hl opt">(</span>tblent_t<span class="hl opt">,</span> sz<span class="hl opt">,</span> l<span class="hl opt">)</span> | ptr l<span class="hl opt">)</span>
  <span class="hl opt">=</span> <span class="hl str">&quot;tblent_array_make&quot;</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">implement</span> symtbl_make <span class="hl opt">(</span>dna<span class="hl opt">,</span> sz<span class="hl opt">) = (</span>pfbox | p_tbl<span class="hl opt">)</span> where <span class="hl opt">{</span>
  <span class="hl kwa">val</span> sz <span class="hl opt">=</span> max <span class="hl opt">(</span>sz<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">)</span>
  <span class="hl kwa">val</span> <span class="hl opt">(</span>pf_tbl_gc<span class="hl opt">,</span> pf_tbl | p_tbl<span class="hl opt">) =</span> ptr_alloc_tsz <span class="hl opt">{</span>symtbl0<span class="hl opt">} (</span>sizeof<span class="hl opt">&lt;</span>symtbl0<span class="hl opt">&gt;)</span>
  <span class="hl kwa">val</span> <span class="hl opt">(</span>pf_arr_gc<span class="hl opt">,</span> pf_arr | p_arr<span class="hl opt">) =</span> tblent_array_make <span class="hl opt">(</span>sz<span class="hl opt">)</span>

  <span class="hl kwa">val</span> <span class="hl opt">() =</span> <span class="hl kwa">begin</span>
    p_tbl<span class="hl opt">-&gt;</span>dna <span class="hl opt">:=</span> dna<span class="hl opt">;</span>
    p_tbl<span class="hl opt">-&gt;</span>ptr <span class="hl opt">:=</span> p_arr<span class="hl opt">;</span>
    p_tbl<span class="hl opt">-&gt;</span>view_arr <span class="hl opt">:=</span> pf_arr<span class="hl opt">;</span>
    p_tbl<span class="hl opt">-&gt;</span>view_arr_gc <span class="hl opt">:=</span> pf_arr_gc<span class="hl opt">;</span>
    p_tbl<span class="hl opt">-&gt;</span>size <span class="hl opt">:=</span> sz<span class="hl opt">;</span>
    p_tbl<span class="hl opt">-&gt;</span>symlen <span class="hl opt">:=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    p_tbl<span class="hl opt">-&gt;</span>nitm <span class="hl opt">:=</span> <span class="hl num">0</span>
  <span class="hl kwa">end</span> <span class="hl com">(* end of [val] *)</span>

  prval <span class="hl opt">() =</span> free_gc_elim <span class="hl opt">(</span>pf_tbl_gc<span class="hl opt">)</span>
  <span class="hl kwa">val</span> <span class="hl opt">(</span>pfbox | <span class="hl opt">()) =</span> vbox_make_view_ptr <span class="hl opt">(</span>pf_tbl | p_tbl<span class="hl opt">)</span>
<span class="hl opt">}</span> <span class="hl slc">// symtbl_make</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">extern fun</span> tblent_array_clear <span class="hl opt">{</span>sz<span class="hl opt">:</span>nat<span class="hl opt">} {</span>l<span class="hl opt">:</span>addr<span class="hl opt">}</span>
  <span class="hl opt">(</span>pf<span class="hl opt">: !</span>array_v <span class="hl opt">(</span>tblent_t<span class="hl opt">,</span> sz<span class="hl opt">,</span> l<span class="hl opt">)</span> | p<span class="hl opt">:</span> ptr l<span class="hl opt">,</span> sz<span class="hl opt">:</span> <span class="hl kwb">int</span> sz<span class="hl opt">):&lt;&gt;</span> void
  <span class="hl opt">=</span> <span class="hl str">&quot;tblent_array_clear&quot;</span>

<span class="hl opt">%{</span>

ats_void_type
tblent_array_clear
  <span class="hl opt">(</span>ats_ptr_type p<span class="hl opt">,</span> ats_int_type sz<span class="hl opt">) {</span>
  memset <span class="hl opt">(</span>p<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> sz <span class="hl opt">*</span> sizeof<span class="hl opt">(</span>tblent_t<span class="hl opt">)) ;</span> <span class="hl kwa">return</span> <span class="hl opt">;</span>
<span class="hl opt">}</span> <span class="hl com">/* end of [tblent_array_clear] */</span>

<span class="hl opt">%}</span>

<span class="hl kwa">implement</span> symtbl_clear <span class="hl opt">(</span>tbl<span class="hl opt">) = ()</span> where <span class="hl opt">{</span>
  <span class="hl kwa">val</span> <span class="hl opt">(</span>vbox pf_tbl | p_tbl<span class="hl opt">) =</span> tbl
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> tblent_array_clear <span class="hl opt">(</span>p_tbl<span class="hl opt">-&gt;</span>view_arr | p_tbl<span class="hl opt">-&gt;</span>ptr<span class="hl opt">,</span> p_tbl<span class="hl opt">-&gt;</span>size<span class="hl opt">)</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> p_tbl<span class="hl opt">-&gt;</span>nitm <span class="hl opt">:=</span> <span class="hl num">0</span>
<span class="hl opt">}</span> <span class="hl com">(* end of [symtbl_clear] *)</span>

<span class="hl slc">//</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl slc">// linear probing</span>
<span class="hl kwa">extern fun</span> symtbl_search_probe
  <span class="hl opt">{</span>sz<span class="hl opt">,</span>i<span class="hl opt">:</span>nat | i <span class="hl opt">&lt;</span> sz<span class="hl opt">} {</span>l<span class="hl opt">:</span>addr<span class="hl opt">} (</span>
  pf<span class="hl opt">: !</span>array_v<span class="hl opt">(</span>tblent_t<span class="hl opt">,</span> sz<span class="hl opt">,</span> l<span class="hl opt">)</span> | p<span class="hl opt">:</span> ptr l<span class="hl opt">,</span> sz<span class="hl opt">:</span> <span class="hl kwb">int</span> sz<span class="hl opt">,</span> len<span class="hl opt">:</span> <span class="hl kwb">int</span><span class="hl opt">,</span> name<span class="hl opt">:</span> <span class="hl kwb">string</span><span class="hl opt">,</span> i<span class="hl opt">:</span> <span class="hl kwb">int</span> i
  <span class="hl opt">) :&lt;&gt;</span> <span class="hl kwb">int</span>
  <span class="hl opt">=</span> <span class="hl str">&quot;symtbl_search_probe&quot;</span>

<span class="hl opt">%{</span>

ats_int_type symtbl_search_probe
  <span class="hl opt">(</span>ats_ptr_type p<span class="hl opt">,</span> ats_int_type sz<span class="hl opt">,</span> ats_int_type len<span class="hl opt">,</span> ats_ptr_type name<span class="hl opt">,</span> ats_int_type i<span class="hl opt">) {</span>
  tblent_t <span class="hl opt">*</span>ent <span class="hl opt">;</span> symbol_t sym<span class="hl opt">;</span>
  ent <span class="hl opt">= ((</span>tblent_t*)p<span class="hl opt">) +</span> i <span class="hl opt">;</span> <span class="hl kwa">while</span> <span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">) {</span>
    sym <span class="hl opt">=</span> ent<span class="hl opt">-&gt;</span>sym <span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>sym <span class="hl opt">== (</span>symbol_t<span class="hl opt">)</span><span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">return</span> <span class="hl num">0</span> <span class="hl opt">;</span> <span class="hl slc">// the entry is unoccupied</span>
    <span class="hl kwa">if</span> <span class="hl opt">(!</span>strncmp <span class="hl opt">(</span>sym<span class="hl opt">, (</span>char*)name<span class="hl opt">,</span> len<span class="hl opt">)) {</span> <span class="hl kwa">return</span> ent<span class="hl opt">-&gt;</span>cnt <span class="hl opt">; }</span>
    i <span class="hl opt">+=</span> <span class="hl num">1</span> <span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>i <span class="hl opt">&gt;=</span> sz<span class="hl opt">) {</span> i <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl opt">;</span> ent <span class="hl opt">= (</span>tblent_t*)p <span class="hl opt">; }</span> <span class="hl kwa">else</span> ent <span class="hl opt">+=</span> <span class="hl num">1</span><span class="hl opt">;</span>
  <span class="hl opt">}</span> <span class="hl slc">// end of [while]</span>
<span class="hl opt">}</span> <span class="hl com">/* end of [symtbl_search_probe] */</span>

<span class="hl opt">%}</span>

<span class="hl kwa">implement</span> symtbl_search <span class="hl opt">(</span>tbl<span class="hl opt">,</span> name<span class="hl opt">) =</span> <span class="hl kwa">let</span>

<span class="hl kwa">val</span> hash_val <span class="hl opt">=</span> hash_string <span class="hl opt">(</span>name<span class="hl opt">,</span> string1_length name<span class="hl opt">)</span>
<span class="hl com">(*</span>
<span class="hl com">val () = begin</span>
<span class="hl com">  prerr &quot;symtbl_search: hash_val = &quot;; prerr hash_val; prerr_newline ()</span>
<span class="hl com">end // end [val]</span>
<span class="hl com">*)</span>
<span class="hl kwa">val</span> <span class="hl opt">(</span>vbox pf_tbl | p_tbl<span class="hl opt">) =</span> tbl
<span class="hl kwa">val</span> i <span class="hl opt">=</span> hash_val uimod p_tbl<span class="hl opt">-&gt;</span>size

<span class="hl kwa">in</span>

symtbl_search_probe <span class="hl opt">(</span>
  p_tbl<span class="hl opt">-&gt;</span>view_arr | p_tbl<span class="hl opt">-&gt;</span>ptr<span class="hl opt">,</span> p_tbl<span class="hl opt">-&gt;</span>size<span class="hl opt">,</span> p_tbl<span class="hl opt">-&gt;</span>symlen<span class="hl opt">,</span> name<span class="hl opt">,</span> i
<span class="hl opt">)</span>

<span class="hl kwa">end</span> <span class="hl slc">// end of [symtbl_search]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">extern fun</span> symtbl_insert_probe <span class="hl opt">{</span>sz<span class="hl opt">,</span>i<span class="hl opt">:</span>nat | i <span class="hl opt">&lt;</span> sz<span class="hl opt">} {</span>l<span class="hl opt">:</span>addr<span class="hl opt">}</span>
  <span class="hl opt">(</span>pf<span class="hl opt">: !</span>array_v <span class="hl opt">(</span>tblent_t<span class="hl opt">,</span> sz<span class="hl opt">,</span> l<span class="hl opt">)</span> | p<span class="hl opt">:</span> ptr l<span class="hl opt">,</span> sz<span class="hl opt">:</span> <span class="hl kwb">int</span> sz<span class="hl opt">,</span> len<span class="hl opt">:</span> <span class="hl kwb">int</span><span class="hl opt">,</span> sym<span class="hl opt">:</span> symbol_t<span class="hl opt">,</span> cnt<span class="hl opt">:</span> <span class="hl kwb">int</span><span class="hl opt">,</span> i<span class="hl opt">:</span> <span class="hl kwb">int</span> i<span class="hl opt">)</span>
  <span class="hl opt">:&lt;&gt;</span> <span class="hl kwb">bool</span> <span class="hl opt">=</span> <span class="hl str">&quot;symtbl_insert_probe&quot;</span>

<span class="hl opt">%{</span>

ats_bool_type symtbl_insert_probe
  <span class="hl opt">(</span>ats_ptr_type p<span class="hl opt">,</span> ats_int_type sz<span class="hl opt">,</span> ats_int_type len<span class="hl opt">,</span> symbol_t sym<span class="hl opt">,</span> ats_int_type cnt<span class="hl opt">,</span> ats_int_type i<span class="hl opt">) {</span>
  tblent_t <span class="hl opt">*</span>ent <span class="hl opt">;</span>
  ent <span class="hl opt">= ((</span>tblent_t*)p<span class="hl opt">) +</span> i <span class="hl opt">;</span>
  <span class="hl kwa">while</span> <span class="hl opt">(</span>ent<span class="hl opt">-&gt;</span>sym<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>strncmp <span class="hl opt">(</span>ent<span class="hl opt">-&gt;</span>sym<span class="hl opt">,</span> sym<span class="hl opt">,</span> len<span class="hl opt">) ==</span> <span class="hl num">0</span><span class="hl opt">) {</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>cnt <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">)</span> ent<span class="hl opt">-&gt;</span>cnt <span class="hl opt">=</span> cnt <span class="hl opt">;</span> <span class="hl kwa">else</span> ent<span class="hl opt">-&gt;</span>cnt <span class="hl opt">+=</span> <span class="hl num">1</span> <span class="hl opt">;</span>
      <span class="hl kwa">return</span> <span class="hl num">0</span> <span class="hl opt">;</span>
    <span class="hl opt">}</span>
    i <span class="hl opt">+=</span> <span class="hl num">1</span><span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>i <span class="hl opt">&gt;=</span> sz<span class="hl opt">) {</span> i <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl opt">;</span> ent <span class="hl opt">= (</span>tblent_t*)p <span class="hl opt">; }</span> <span class="hl kwa">else</span> ent <span class="hl opt">+=</span> <span class="hl num">1</span> <span class="hl opt">;</span>
  <span class="hl opt">}</span>
  ent<span class="hl opt">-&gt;</span>sym <span class="hl opt">=</span> sym <span class="hl opt">;</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>cnt <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">)</span> ent<span class="hl opt">-&gt;</span>cnt <span class="hl opt">=</span> cnt <span class="hl opt">;</span> <span class="hl kwa">else</span> ent<span class="hl opt">-&gt;</span>cnt <span class="hl opt">=</span> <span class="hl num">1</span> <span class="hl opt">;</span>
  <span class="hl kwa">return</span> <span class="hl num">1</span> <span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl opt">%}</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">implement</span> symtbl_insert <span class="hl opt">(</span>tbl<span class="hl opt">,</span> sym<span class="hl opt">,</span> cnt<span class="hl opt">) =</span> <span class="hl kwa">let</span>
  <span class="hl kwa">val</span> <span class="hl opt">(</span>vbox pf_tbl | p_tbl<span class="hl opt">) =</span> tbl
  <span class="hl kwa">val</span> len <span class="hl opt">=</span> p_tbl<span class="hl opt">-&gt;</span>symlen
  <span class="hl kwa">val</span> hash_val <span class="hl opt">=</span> hash_symbol <span class="hl opt">(</span>sym<span class="hl opt">,</span> len<span class="hl opt">)</span>
  <span class="hl kwa">val</span> i <span class="hl opt">=</span> hash_val uimod p_tbl<span class="hl opt">-&gt;</span>size
  <span class="hl kwa">val</span> is_new <span class="hl opt">=</span> symtbl_insert_probe
    <span class="hl opt">(</span>p_tbl<span class="hl opt">-&gt;</span>view_arr | p_tbl<span class="hl opt">-&gt;</span>ptr<span class="hl opt">,</span> p_tbl<span class="hl opt">-&gt;</span>size<span class="hl opt">,</span> len<span class="hl opt">,</span> sym<span class="hl opt">,</span> cnt<span class="hl opt">,</span> i<span class="hl opt">)</span>
<span class="hl kwa">in</span>
  <span class="hl kwa">if</span> is_new <span class="hl kwa">then</span> p_tbl<span class="hl opt">-&gt;</span>nitm <span class="hl opt">:=</span> <span class="hl num">1</span> <span class="hl opt">+</span> p_tbl<span class="hl opt">-&gt;</span>nitm <span class="hl kwa">else</span> <span class="hl opt">()</span>
<span class="hl kwa">end</span> <span class="hl slc">// end of [symtbl_insert]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">extern fun</span> tblent_array_fold
  <span class="hl opt">{</span>a<span class="hl opt">:</span>viewt&#64;ype<span class="hl opt">} {</span>sz<span class="hl opt">:</span> nat<span class="hl opt">} {</span>l<span class="hl opt">:</span>addr<span class="hl opt">} (</span>
    pf<span class="hl opt">: !</span>array_v <span class="hl opt">(</span>tblent_t<span class="hl opt">,</span> sz<span class="hl opt">,</span> l<span class="hl opt">)</span>
  | p<span class="hl opt">:</span> ptr l<span class="hl opt">,</span> sz<span class="hl opt">:</span> <span class="hl kwb">int</span> sz<span class="hl opt">,</span> f<span class="hl opt">: &amp;(</span>symbol_t<span class="hl opt">,</span> <span class="hl kwb">int</span><span class="hl opt">, &amp;</span>a<span class="hl opt">) -&lt;</span>clo<span class="hl opt">&gt;</span> void<span class="hl opt">,</span> res<span class="hl opt">: &amp;</span>a
  <span class="hl opt">) :&lt;&gt;</span> void
  <span class="hl opt">=</span> <span class="hl str">&quot;tblent_array_fold&quot;</span>

<span class="hl opt">%{</span>

ats_void_type tblent_array_fold
  <span class="hl opt">(</span>ats_ptr_type p<span class="hl opt">,</span> ats_int_type sz<span class="hl opt">,</span> ats_ref_type f<span class="hl opt">,</span> ats_ptr_type res<span class="hl opt">) {</span>
  <span class="hl kwb">int</span> i <span class="hl opt">;</span> tblent_t <span class="hl opt">*</span>ent <span class="hl opt">;</span>
  i <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl opt">;</span> ent <span class="hl opt">= (</span>tblent_t*)p <span class="hl opt">;</span> <span class="hl kwa">while</span> <span class="hl opt">(</span>i <span class="hl opt">&lt;</span> sz<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(!</span>ent<span class="hl opt">-&gt;</span>sym<span class="hl opt">) {</span> i <span class="hl opt">+=</span> <span class="hl num">1</span><span class="hl opt">;</span> ent <span class="hl opt">+=</span> <span class="hl num">1</span><span class="hl opt">;</span> continue <span class="hl opt">; }</span>
    <span class="hl opt">((</span>ats_void_type <span class="hl opt">(</span> *)<span class="hl opt">(</span>ats_clo_ptr_type<span class="hl opt">,</span> symbol_t<span class="hl opt">,</span> ats_int_type<span class="hl opt">,</span> ats_ptr_type<span class="hl opt">))(</span>ats_closure_fun<span class="hl opt">(</span>f<span class="hl opt">)))(</span>f<span class="hl opt">,</span> ent<span class="hl opt">-&gt;</span>sym<span class="hl opt">,</span> ent<span class="hl opt">-&gt;</span>cnt<span class="hl opt">,</span> res<span class="hl opt">) ;</span>
    i <span class="hl opt">+=</span> <span class="hl num">1</span> <span class="hl opt">;</span> ent <span class="hl opt">+=</span> <span class="hl num">1</span> <span class="hl opt">;</span>
  <span class="hl opt">}</span> <span class="hl slc">// end of [while]</span>
  <span class="hl kwa">return</span> <span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl opt">%}</span>

<span class="hl kwa">implement</span> symtbl_fold <span class="hl opt">{</span>a<span class="hl opt">} (</span>tbl<span class="hl opt">,</span> f<span class="hl opt">,</span> res<span class="hl opt">) =</span> <span class="hl kwa">let</span>
  <span class="hl kwa">val</span> <span class="hl opt">(</span>vbox pf_tbl | p_tbl<span class="hl opt">) =</span> tbl
<span class="hl kwa">in</span>
  tblent_array_fold <span class="hl opt">{</span>a<span class="hl opt">} (</span>p_tbl<span class="hl opt">-&gt;</span>view_arr | p_tbl<span class="hl opt">-&gt;</span>ptr<span class="hl opt">,</span> p_tbl<span class="hl opt">-&gt;</span>size<span class="hl opt">,</span> f<span class="hl opt">,</span> res<span class="hl opt">)</span>
<span class="hl kwa">end</span> <span class="hl slc">// end of [symtbl_insert]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">extern fun</span> dna_count <span class="hl opt">{</span>n<span class="hl opt">,</span>k<span class="hl opt">:</span>nat | k <span class="hl opt">&lt;=</span> n<span class="hl opt">}</span>
  <span class="hl opt">(</span>tbl<span class="hl opt">:</span> symtbl_t<span class="hl opt">,</span> n<span class="hl opt">:</span> size_t n<span class="hl opt">,</span> k<span class="hl opt">:</span> size_t k<span class="hl opt">) :</span> symtbl_t <span class="hl opt">=</span> <span class="hl str">&quot;dna_count&quot;</span>

<span class="hl kwa">typedef</span> symflt <span class="hl opt">=</span> &#64;<span class="hl opt">(</span>symbol_t<span class="hl opt">,</span> <span class="hl kwb">float</span><span class="hl opt">)</span>

fn compare_symflt_symflt <span class="hl slc">// [&gt;=]</span>
  <span class="hl opt">(</span>x1<span class="hl opt">: &amp;</span>symflt<span class="hl opt">,</span> x2<span class="hl opt">: &amp;</span>symflt<span class="hl opt">):&lt;&gt;</span> <span class="hl kwd">Sgn</span> <span class="hl opt">=</span> compare_float_float <span class="hl opt">(</span>x2<span class="hl opt">.</span>1<span class="hl opt">,</span> x1<span class="hl opt">.</span>1<span class="hl opt">)</span>
<span class="hl slc">// end of [compare_symflt_symflt]</span>

viewtypedef frqlst <span class="hl opt">=</span> <span class="hl kwd">List_vt</span> symflt

<span class="hl slc">// print and free</span>
<span class="hl kwa">fun</span> print_free_frqlst
  <span class="hl opt">(</span>kfs<span class="hl opt">:</span> frqlst<span class="hl opt">,</span> len<span class="hl opt">:</span> <span class="hl kwb">int</span><span class="hl opt">):</span> void <span class="hl opt">=</span> <span class="hl kwa">begin</span> case<span class="hl opt">+</span> kfs <span class="hl kwa">of</span>
  | ~list_vt_cons <span class="hl opt">(</span>kf<span class="hl opt">,</span> kfs<span class="hl opt">) =&gt;</span> <span class="hl kwa">begin</span> print_symbol <span class="hl opt">(</span>kf<span class="hl num">.0</span><span class="hl opt">,</span> len<span class="hl opt">);</span>
       printf <span class="hl opt">(</span><span class="hl str">&quot; %.3f</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> &#64;<span class="hl opt">(</span>double_of kf<span class="hl num">.1</span><span class="hl opt">));</span> print_free_frqlst <span class="hl opt">(</span>kfs<span class="hl opt">,</span> len<span class="hl opt">)</span>
    <span class="hl kwa">end</span> <span class="hl slc">// end of [FRQLSTcons]</span>
  | ~list_vt_nil <span class="hl opt">() =&gt; ()</span>
<span class="hl kwa">end</span> <span class="hl slc">// end of [print_free_frqlst]</span>

fn write_frequencies <span class="hl opt">{</span>n<span class="hl opt">,</span>k<span class="hl opt">:</span>nat | k <span class="hl opt">&lt;=</span> n<span class="hl opt">}</span>
  <span class="hl opt">(</span>tbl<span class="hl opt">:</span> symtbl_t<span class="hl opt">,</span> n<span class="hl opt">:</span> size_t n<span class="hl opt">,</span> k<span class="hl opt">:</span> size_t k<span class="hl opt">):</span> void <span class="hl opt">=</span> <span class="hl kwa">let</span>
  <span class="hl kwa">val</span> tbl <span class="hl opt">=</span> dna_count <span class="hl opt">(</span>tbl<span class="hl opt">,</span> n<span class="hl opt">,</span> k<span class="hl opt">)</span>
  var total<span class="hl opt">:</span> <span class="hl kwb">int</span> <span class="hl opt">= (</span><span class="hl num">0</span><span class="hl opt">:</span> <span class="hl kwb">int</span><span class="hl opt">)</span>
  var <span class="hl opt">!</span>p_clo <span class="hl opt">=</span> &#64;lam <span class="hl opt">(</span>k<span class="hl opt">:</span> symbol_t<span class="hl opt">,</span> cnt<span class="hl opt">:</span> <span class="hl kwb">int</span><span class="hl opt">,</span> res<span class="hl opt">: &amp;</span><span class="hl kwb">int</span><span class="hl opt">):</span> void <span class="hl opt">=&lt;</span>clo<span class="hl opt">&gt;</span>
    <span class="hl opt">(</span>res <span class="hl opt">:=</span> res <span class="hl opt">+</span> cnt<span class="hl opt">)</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> symtbl_fold <span class="hl opt">{</span><span class="hl kwb">int</span><span class="hl opt">} (</span>tbl<span class="hl opt">, !</span>p_clo<span class="hl opt">,</span> total<span class="hl opt">);</span> <span class="hl kwa">val</span> ftotal <span class="hl opt">=</span> float_of total
  var frqs<span class="hl opt">:</span> frqlst <span class="hl opt">=</span> list_vt_nil <span class="hl opt">()</span>
  var <span class="hl opt">!</span>p_clo <span class="hl opt">=</span> &#64;lam
    <span class="hl opt">(</span>k<span class="hl opt">:</span> symbol_t<span class="hl opt">,</span> cnt<span class="hl opt">:</span> <span class="hl kwb">int</span><span class="hl opt">,</span> res<span class="hl opt">: &amp;</span>frqlst<span class="hl opt">):</span> void <span class="hl opt">=&lt;</span>clo<span class="hl opt">&gt;</span> <span class="hl kwa">let</span> 
    <span class="hl kwa">val</span> f <span class="hl opt">= (</span>float_of <span class="hl num">100</span><span class="hl opt">) *</span> float_of cnt / ftotal<span class="hl opt">;</span> <span class="hl kwa">val</span> kf <span class="hl opt">=</span> &#64;<span class="hl opt">(</span>k<span class="hl opt">,</span> f<span class="hl opt">)</span> <span class="hl kwa">in</span>
    res <span class="hl opt">:=</span> list_vt_cons <span class="hl opt">(</span>kf<span class="hl opt">,</span> res<span class="hl opt">)</span>
  <span class="hl kwa">end</span> <span class="hl slc">// end of [f]</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> symtbl_fold <span class="hl opt">{</span>frqlst<span class="hl opt">} (</span>tbl<span class="hl opt">, !</span>p_clo<span class="hl opt">,</span> frqs<span class="hl opt">)</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> list_vt_quicksort <span class="hl opt">(</span>frqs<span class="hl opt">,</span> compare_symflt_symflt<span class="hl opt">)</span>
<span class="hl kwa">in</span>
  print_free_frqlst <span class="hl opt">(</span>frqs<span class="hl opt">,</span> symtbl_symlen_get tbl<span class="hl opt">)</span>
<span class="hl kwa">end</span> <span class="hl slc">// end of [write_frequencies]</span>

<span class="hl com">(* ****** ****** *)</span>

fn write_count <span class="hl opt">{</span>n<span class="hl opt">,</span>k<span class="hl opt">:</span>nat<span class="hl opt">}</span>
  <span class="hl opt">(</span>tbl<span class="hl opt">:</span> symtbl_t<span class="hl opt">,</span> n<span class="hl opt">:</span> size_t n<span class="hl opt">,</span> seq<span class="hl opt">:</span> <span class="hl kwb">string</span> k<span class="hl opt">):</span> void <span class="hl opt">=</span> <span class="hl kwa">let</span>
  <span class="hl kwa">val</span> k <span class="hl opt">=</span> string1_length seq
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> <span class="hl kwa">assert</span> <span class="hl opt">(</span>k <span class="hl opt">&lt;=</span> n<span class="hl opt">)</span>
  <span class="hl kwa">val</span> tbl <span class="hl opt">=</span> dna_count <span class="hl opt">(</span>tbl<span class="hl opt">,</span> n<span class="hl opt">,</span> k<span class="hl opt">)</span>
  <span class="hl kwa">val</span> cnt <span class="hl opt">=</span> symtbl_search <span class="hl opt">(</span>tbl<span class="hl opt">,</span> seq<span class="hl opt">)</span>
<span class="hl kwa">in</span>
  printf <span class="hl opt">(</span><span class="hl str">&quot;%d</span><span class="hl esc">\t</span><span class="hl str">%s</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> &#64;<span class="hl opt">(</span>cnt<span class="hl opt">,</span> seq<span class="hl opt">))</span>
<span class="hl kwa">end</span> <span class="hl slc">// end of [write_count]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">extern fun</span> getline <span class="hl opt">():</span> <span class="hl kwb">string</span> <span class="hl opt">=</span> <span class="hl str">&quot;__getline&quot;</span>
<span class="hl kwa">extern fun</span> getrest <span class="hl opt">(</span>sz<span class="hl opt">: &amp;</span>size_t? <span class="hl opt">&gt;&gt;</span> size_t n<span class="hl opt">):</span> <span class="hl ppc">#[n:nat] string n =</span> <span class="hl pps">&quot;__getrest&quot;</span><span class="hl ppc"></span>

<span class="hl opt">%{</span>$

<span class="hl ppc">#define LINEBUFSZ 1024</span>
char theLineBuffer<span class="hl opt">[</span><span class="hl kwd">LINEBUFSZ</span><span class="hl opt">] ;</span>
ats_ptr_type __getline <span class="hl opt">() {</span>
  fgets <span class="hl opt">(</span>theLineBuffer<span class="hl opt">,</span> <span class="hl kwd">LINEBUFSZ</span><span class="hl opt">,</span> stdin<span class="hl opt">) ;</span> <span class="hl kwa">return</span> theLineBuffer <span class="hl opt">;</span>
<span class="hl opt">}</span> <span class="hl com">/* end of [getline] */</span>

<span class="hl ppc">#define RESTBUFSZ (128 * 1024 * 1024)</span>
char theRestBuffer<span class="hl opt">[</span><span class="hl kwd">RESTBUFSZ</span><span class="hl opt">] ;</span>

ats_ptr_type __getrest <span class="hl opt">(</span>ats_ref_type p_n<span class="hl opt">) {</span>
  <span class="hl kwb">int</span> c <span class="hl opt">;</span> size_t i <span class="hl opt">;</span> char <span class="hl opt">*</span>s <span class="hl opt">;</span>
  s <span class="hl opt">=</span> theRestBuffer <span class="hl opt">;</span> i <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl opt">;</span>
  <span class="hl kwa">while</span> <span class="hl opt">((</span>c <span class="hl opt">=</span> fgetc<span class="hl opt">(</span>stdin<span class="hl opt">)) !=</span> <span class="hl kwd">EOF</span><span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>c <span class="hl opt">!=</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl opt">) { *</span>s<span class="hl opt">++ =</span> toupper<span class="hl opt">(</span>c<span class="hl opt">) ;</span> i<span class="hl opt">++ ; }</span>
  <span class="hl opt">}</span>
  <span class="hl opt">*</span>s <span class="hl opt">=</span> <span class="hl str">'</span><span class="hl esc">\000</span><span class="hl str">'</span> <span class="hl opt">; *((</span>size_t*)p_n<span class="hl opt">) =</span> i <span class="hl opt">;</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>i <span class="hl opt">&gt;=</span> <span class="hl kwd">RESTBUFSZ</span><span class="hl opt">) {</span>
    fprintf <span class="hl opt">(</span>stderr<span class="hl opt">,</span> <span class="hl str">&quot;exit(ATS): too much data for processing</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">) ;</span> exit<span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">) ;</span>
  <span class="hl opt">}</span>
  <span class="hl kwa">return</span> theRestBuffer <span class="hl opt">;</span>
<span class="hl opt">}</span> <span class="hl com">/* end of [__getrest] */</span>

<span class="hl opt">%}</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">fun</span> is_three <span class="hl opt">(</span>s<span class="hl opt">:</span> <span class="hl kwb">string</span><span class="hl opt">):</span> <span class="hl kwb">bool</span> <span class="hl opt">=</span>
  <span class="hl kwa">if</span> strncmp <span class="hl opt">(</span>s<span class="hl opt">,</span> <span class="hl str">&quot;&gt;THREE&quot;</span><span class="hl opt">,</span> <span class="hl num">6</span><span class="hl opt">) =</span> <span class="hl num">0</span> <span class="hl kwa">then true else false</span>
<span class="hl slc">// end of [is_three]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">extern fun</span> dna_of_string <span class="hl opt">(</span>s<span class="hl opt">:</span> <span class="hl kwb">string</span><span class="hl opt">):</span> dna_t <span class="hl opt">=</span> <span class="hl str">&quot;dna_of_string&quot;</span>

<span class="hl kwa">implement</span> main <span class="hl opt">(</span>argc<span class="hl opt">,</span> argv<span class="hl opt">) =</span> <span class="hl kwa">let</span>
  <span class="hl kwa">fun</span> dna_three_get
    <span class="hl opt">(</span>n<span class="hl opt">: &amp;</span>size_t? <span class="hl opt">&gt;&gt;</span> size_t n<span class="hl opt">):</span> <span class="hl ppc">#[n:nat] string n = let</span>
    <span class="hl kwa">val</span> s <span class="hl opt">=</span> getline <span class="hl opt">();</span> <span class="hl kwa">val</span> is3 <span class="hl opt">=</span> is_three <span class="hl opt">(</span>s<span class="hl opt">)</span>
  <span class="hl kwa">in</span>
    <span class="hl kwa">if</span> is3 <span class="hl kwa">then</span> getrest <span class="hl opt">(</span>n<span class="hl opt">)</span> <span class="hl kwa">else</span> dna_three_get <span class="hl opt">(</span>n<span class="hl opt">)</span>
  <span class="hl kwa">end</span> <span class="hl slc">// end of [dna_three_get]</span>
  var n<span class="hl opt">:</span> size_t <span class="hl slc">// uninitialized</span>
  <span class="hl kwa">val</span> dna_three <span class="hl opt">=</span> dna_three_get <span class="hl opt">(</span>n<span class="hl opt">)</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> <span class="hl kwa">assert</span> <span class="hl opt">(</span>n <span class="hl opt">&gt;=</span> <span class="hl num">2</span><span class="hl opt">)</span>
<span class="hl com">(*</span>
<span class="hl com">  val () = (prerr &quot;main: n = &quot;; prerr n; prerr_newline ())</span>
<span class="hl com">*)</span>
  <span class="hl kwa">val</span> dna3 <span class="hl opt">=</span>
    dna_of_string dna_three where <span class="hl opt">{</span>
    <span class="hl kwa">extern</span> castfn dna_of_string <span class="hl opt">(</span>str<span class="hl opt">:</span> <span class="hl kwb">string</span><span class="hl opt">):</span> dna_t
  <span class="hl opt">}</span>
  <span class="hl kwa">val</span> dna_table <span class="hl opt">=</span> symtbl_make <span class="hl opt">(</span>dna3<span class="hl opt">,</span> <span class="hl com">(*393241*)</span><span class="hl num">196613</span><span class="hl com">(*98317*)</span><span class="hl opt">)</span>
<span class="hl kwa">in</span>
  write_frequencies <span class="hl opt">(</span>dna_table<span class="hl opt">,</span> n<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">) ;</span> print_newline <span class="hl opt">() ;</span>
  write_frequencies <span class="hl opt">(</span>dna_table<span class="hl opt">,</span> n<span class="hl opt">,</span> <span class="hl num">2</span><span class="hl opt">) ;</span> print_newline <span class="hl opt">() ;</span>
  write_count <span class="hl opt">(</span>dna_table<span class="hl opt">,</span> n<span class="hl opt">,</span> <span class="hl str">&quot;GGT&quot;</span><span class="hl opt">) ;</span>
  write_count <span class="hl opt">(</span>dna_table<span class="hl opt">,</span> n<span class="hl opt">,</span> <span class="hl str">&quot;GGTA&quot;</span><span class="hl opt">) ;</span>
  write_count <span class="hl opt">(</span>dna_table<span class="hl opt">,</span> n<span class="hl opt">,</span> <span class="hl str">&quot;GGTATT&quot;</span><span class="hl opt">) ;</span>
  write_count <span class="hl opt">(</span>dna_table<span class="hl opt">,</span> n<span class="hl opt">,</span> <span class="hl str">&quot;GGTATTTTAATT&quot;</span><span class="hl opt">) ;</span>
  write_count <span class="hl opt">(</span>dna_table<span class="hl opt">,</span> n<span class="hl opt">,</span> <span class="hl str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="hl opt">) ;</span>
<span class="hl kwa">end</span> <span class="hl com">(* end of [main] *)</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl opt">%{</span>$

ats_ptr_type
dna_count <span class="hl opt">(</span>ats_ptr_type tbl<span class="hl opt">,</span> ats_size_type n<span class="hl opt">,</span> ats_size_type k<span class="hl opt">) {</span>
  char <span class="hl opt">*</span>sym <span class="hl opt">;</span>
  symtbl_clear <span class="hl opt">(</span>tbl<span class="hl opt">) ;</span>
  symtbl_symlen_set <span class="hl opt">(</span>tbl<span class="hl opt">,</span> k<span class="hl opt">) ;</span>
  sym <span class="hl opt">= (</span>char*)symtbl_dna_get <span class="hl opt">(</span>tbl<span class="hl opt">) ;</span>
  <span class="hl kwa">while</span> <span class="hl opt">(</span>n <span class="hl opt">&gt;=</span> k<span class="hl opt">) {</span>
    symtbl_insert <span class="hl opt">(</span>tbl<span class="hl opt">,</span> sym<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">) ;</span> n <span class="hl opt">-=</span> <span class="hl num">1</span> <span class="hl opt">;</span> sym <span class="hl opt">+=</span> <span class="hl num">1</span> <span class="hl opt">;</span>
  <span class="hl opt">}</span>
  <span class="hl kwa">return</span> tbl <span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl opt">%}</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl com">(* end of [k-nucleotide2.dats] *)</span>
