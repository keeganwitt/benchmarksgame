<span class="hl slc">// The Computer Language Benchmarks Game</span>
<span class="hl slc">// http://benchmarksgame.alioth.debian.org/</span>

<span class="hl slc">// Contributed by The Anh Tran</span>
<span class="hl slc">// Updated for 2.8 by Rex Kerr</span>

<span class="hl kwa">import</span> scala<span class="hl opt">.</span>io<span class="hl opt">.</span>Source
<span class="hl kwa">import</span> java<span class="hl opt">.</span>util<span class="hl opt">.</span>regex<span class="hl opt">.</span>Pattern
<span class="hl kwa">import</span> scala<span class="hl opt">.</span>collection<span class="hl opt">.</span>immutable<span class="hl opt">.</span>HashMap
<span class="hl kwa">import</span> scala<span class="hl opt">.</span>actors<span class="hl opt">.</span>Futures<span class="hl opt">.</span>future

<span class="hl kwa">object</span> regexdna <span class="hl opt">{</span>

  <span class="hl kwa">def</span> <span class="hl kwd">main</span><span class="hl opt">(</span>args <span class="hl opt">:</span> Array<span class="hl opt">[</span>String<span class="hl opt">]) {</span>

    <span class="hl slc">// load data from stdin</span>
    <span class="hl kwa">var</span> input <span class="hl opt">=</span> Source<span class="hl opt">.</span>stdin<span class="hl opt">.</span>mkString
    <span class="hl kwa">val</span> init_len <span class="hl opt">=</span> input length

    <span class="hl slc">// strip header &amp; newline</span>
    input <span class="hl opt">=</span> <span class="hl str">&quot;&gt;.*</span><span class="hl esc">\n</span><span class="hl str">|</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">.</span>r <span class="hl kwd">replaceAllIn</span><span class="hl opt">(</span>input<span class="hl opt">,</span> <span class="hl str">&quot;&quot;</span><span class="hl opt">)</span>
    <span class="hl kwa">val</span> strip_len <span class="hl opt">=</span> input length

    <span class="hl slc">// counting patterns</span>
    <span class="hl kwa">val</span> patterns  <span class="hl opt">=</span> <span class="hl kwd">Array</span><span class="hl opt">(</span>
      <span class="hl str">&quot;agggtaaa|tttaccct&quot;</span> <span class="hl opt">,</span>
      <span class="hl str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span><span class="hl opt">,</span>
      <span class="hl str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span><span class="hl opt">,</span>
      <span class="hl str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span><span class="hl opt">,</span>
      <span class="hl str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span><span class="hl opt">,</span>
      <span class="hl str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span><span class="hl opt">,</span>
      <span class="hl str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span><span class="hl opt">,</span>
      <span class="hl str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span><span class="hl opt">,</span>
      <span class="hl str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span><span class="hl opt">)</span>

    <span class="hl slc">// queue tasks, each task is handled in a separate thread</span>
    <span class="hl kwa">val</span> count_results  <span class="hl opt">=</span> patterns <span class="hl kwd">map</span><span class="hl opt">(</span> pt <span class="hl opt">=&gt;</span> 
      <span class="hl kwd">future</span><span class="hl opt">(</span>pt<span class="hl opt">.</span>r<span class="hl opt">.</span><span class="hl kwd">findAllIn</span><span class="hl opt">(</span>input<span class="hl opt">).</span>toArray<span class="hl opt">.</span>length<span class="hl opt">)</span>
    <span class="hl opt">)</span>

    <span class="hl slc">// replace IUB</span>
    <span class="hl kwa">val</span> replace_result  <span class="hl opt">=</span> future <span class="hl opt">{</span>
      <span class="hl kwa">val</span> iub <span class="hl opt">=</span> <span class="hl kwd">HashMap</span><span class="hl opt">(</span>
        <span class="hl str">'B'</span> <span class="hl opt">-&gt;</span> <span class="hl str">&quot;(c|g|t)&quot;</span><span class="hl opt">,</span>
        <span class="hl str">'D'</span> <span class="hl opt">-&gt;</span> <span class="hl str">&quot;(a|g|t)&quot;</span><span class="hl opt">,</span>
        <span class="hl str">'H'</span> <span class="hl opt">-&gt;</span> <span class="hl str">&quot;(a|c|t)&quot;</span><span class="hl opt">,</span>
        <span class="hl str">'K'</span> <span class="hl opt">-&gt;</span> <span class="hl str">&quot;(g|t)&quot;</span><span class="hl opt">,</span>
        <span class="hl str">'M'</span> <span class="hl opt">-&gt;</span> <span class="hl str">&quot;(a|c)&quot;</span><span class="hl opt">,</span>
        <span class="hl str">'N'</span> <span class="hl opt">-&gt;</span> <span class="hl str">&quot;(a|c|g|t)&quot;</span><span class="hl opt">,</span>
        <span class="hl str">'R'</span> <span class="hl opt">-&gt;</span> <span class="hl str">&quot;(a|g)&quot;</span><span class="hl opt">,</span>
        <span class="hl str">'S'</span> <span class="hl opt">-&gt;</span> <span class="hl str">&quot;(c|g)&quot;</span><span class="hl opt">,</span>
        <span class="hl str">'V'</span> <span class="hl opt">-&gt;</span> <span class="hl str">&quot;(a|c|g)&quot;</span><span class="hl opt">,</span>
        <span class="hl str">'W'</span> <span class="hl opt">-&gt;</span> <span class="hl str">&quot;(a|t)&quot;</span><span class="hl opt">,</span>
        <span class="hl str">'Y'</span> <span class="hl opt">-&gt;</span> <span class="hl str">&quot;(c|t)&quot;</span>  <span class="hl opt">)</span>

      <span class="hl kwa">val</span> buffer  <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">StringBuffer</span><span class="hl opt">((</span>input<span class="hl opt">.</span>length <span class="hl opt">*</span> <span class="hl num">3</span><span class="hl opt">) /</span> <span class="hl num">2</span><span class="hl opt">)</span>
      <span class="hl kwa">val</span> matcher  <span class="hl opt">=</span> Pattern compile <span class="hl str">&quot;[BDHKMNRSVWY]&quot;</span> matcher input

      <span class="hl kwa">while</span> <span class="hl opt">(</span> matcher find <span class="hl opt">)</span>
        matcher <span class="hl kwd">appendReplacement</span><span class="hl opt">(</span> buffer<span class="hl opt">,</span> <span class="hl kwd">iub</span><span class="hl opt">(</span><span class="hl kwd">input</span><span class="hl opt">(</span>matcher start<span class="hl opt">))  )</span>

      matcher appendTail buffer
      buffer length
    <span class="hl opt">}</span>


    <span class="hl slc">// print results</span>
    <span class="hl kwa">for</span> <span class="hl opt">((</span>pt<span class="hl opt">,</span> cres<span class="hl opt">) &lt;-</span> patterns zip count_results<span class="hl opt">)</span>
      <span class="hl kwd">printf</span><span class="hl opt">(</span> <span class="hl str">&quot;%s %d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> pt<span class="hl opt">,</span> <span class="hl kwd">cres</span><span class="hl opt">() )</span>

    <span class="hl kwd">printf</span><span class="hl opt">(</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">%d</span><span class="hl esc">\n</span><span class="hl str">%d</span><span class="hl esc">\n</span><span class="hl str">%d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> init_len<span class="hl opt">,</span> strip_len<span class="hl opt">,</span> <span class="hl kwd">replace_result</span><span class="hl opt">() )</span>
  <span class="hl opt">}</span>
<span class="hl opt">}</span>
