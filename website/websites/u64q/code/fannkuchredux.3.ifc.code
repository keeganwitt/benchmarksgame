<span class="hl slc">! The Computer Language Benchmarks Game</span>
<span class="hl slc">! http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">!</span>
<span class="hl slc">! Code by Andrei Jirnyi; modified from my earlier submission.</span>
<span class="hl slc">!  thanks to Gilbert Brietzke for the previous Fortran code,</span>
<span class="hl slc">!  and to other submitters for their work</span>
<span class="hl slc">! Compilation:</span>
<span class="hl slc">! - single-core: ifort -fast fannkuch3.f90</span>
<span class="hl slc">! - multi-core:  ifort -fast -openmp fannkuch3.f90</span>

<span class="hl kwa">program</span> fannkuch
  <span class="hl kwa">use</span> iso_fortran_env
  <span class="hl kwa">use</span> iso_c_binding
  <span class="hl kwa">implicit none</span>

  <span class="hl kwa">integer</span><span class="hl opt">,</span><span class="hl kwa">parameter</span> <span class="hl opt">::</span> ILONG <span class="hl opt">=</span> <span class="hl num">8</span><span class="hl opt">,</span> ISHORT <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">,</span> MAXL <span class="hl opt">=</span> <span class="hl num">7</span>
  <span class="hl kwa">integer</span> <span class="hl opt">::</span> NP<span class="hl opt">,</span> maxfk<span class="hl opt">,</span> cksum <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">,</span> current <span class="hl opt">=</span> <span class="hl num">0</span>
  <span class="hl kwa">integer</span><span class="hl opt">(</span>ILONG<span class="hl opt">) ::</span>NQ
  <span class="hl kwa">integer</span><span class="hl opt">(</span>ISHORT<span class="hl opt">),</span> allocatable <span class="hl opt">::</span> <span class="hl kwd">blk</span><span class="hl opt">(:,:),</span> <span class="hl kwd">cnt</span><span class="hl opt">(:)</span>
  <span class="hl kwa">logical</span> <span class="hl opt">::</span>saveblk <span class="hl opt">= .</span>true<span class="hl opt">.</span>
  <span class="hl kwa">character</span><span class="hl opt">(</span>len<span class="hl opt">=</span><span class="hl num">2</span><span class="hl opt">) ::</span> arg
  <span class="hl kwa">character</span><span class="hl opt">(</span>len<span class="hl opt">=</span><span class="hl num">20</span><span class="hl opt">) ::</span> out
  <span class="hl kwa">logical</span> <span class="hl opt">::</span> WR <span class="hl opt">= .</span>false<span class="hl opt">.,</span> WR1 <span class="hl opt">= .</span>false<span class="hl opt">.</span>

  WR1 <span class="hl opt">=</span> WR1 <span class="hl opt">.</span>or<span class="hl opt">.</span> WR

  <span class="hl kwa">call</span> <span class="hl kwd">get_command_argument</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">,</span>arg<span class="hl opt">)</span>
  <span class="hl kwa">read</span><span class="hl opt">(</span>arg<span class="hl opt">,</span><span class="hl str">'(I2)'</span><span class="hl opt">)</span> NP
  NQ <span class="hl opt">=</span> <span class="hl kwd">factorial</span><span class="hl opt">(</span>MAXL<span class="hl opt">)/</span>MAXL
  <span class="hl kwd">allocate</span><span class="hl opt">(</span><span class="hl kwd">blk</span><span class="hl opt">(</span>NP<span class="hl opt">,</span>NQ<span class="hl opt">))</span>
  <span class="hl kwd">allocate</span><span class="hl opt">(</span><span class="hl kwd">cnt</span><span class="hl opt">(</span>NP<span class="hl opt">))</span>
  cnt <span class="hl opt">=</span> <span class="hl num">0</span>

  <span class="hl kwa">call</span> <span class="hl kwd">fkcompute</span><span class="hl opt">(</span>NP<span class="hl opt">)</span>

  <span class="hl kwa">write</span><span class="hl opt">(</span>out<span class="hl opt">,</span><span class="hl str">'(i15)'</span><span class="hl opt">)</span> cksum<span class="hl opt">-</span><span class="hl num">2</span>
  <span class="hl kwa">write</span><span class="hl opt">(*,</span><span class="hl str">'(a)'</span><span class="hl opt">)</span> <span class="hl kwd">trim</span><span class="hl opt">(</span><span class="hl kwd">adjustl</span><span class="hl opt">(</span>out<span class="hl opt">))</span>
  <span class="hl kwa">write</span><span class="hl opt">(*,</span><span class="hl str">'(3a,i3)'</span><span class="hl opt">)</span> <span class="hl str">'Pfannkuchen('</span><span class="hl opt">,</span><span class="hl kwd">trim</span><span class="hl opt">(</span><span class="hl kwd">adjustl</span><span class="hl opt">(</span>arg<span class="hl opt">)),</span><span class="hl str">') ='</span><span class="hl opt">,</span>maxfk

<span class="hl kwa">contains</span>

  <span class="hl kwa">function</span> <span class="hl kwd">factorial</span><span class="hl opt">(</span>n<span class="hl opt">)</span>
    <span class="hl kwa">integer</span> n<span class="hl opt">,</span> factorial<span class="hl opt">,</span> i
    factorial <span class="hl opt">=</span> <span class="hl num">1</span>
    <span class="hl kwa">do</span> i<span class="hl opt">=</span><span class="hl num">1</span><span class="hl opt">,</span>n
       factorial <span class="hl opt">=</span> factorial<span class="hl opt">*</span>i
    <span class="hl kwa">end do</span>
  <span class="hl kwa">end function</span> factorial

  <span class="hl kwa">subroutine</span> <span class="hl kwd">fkcompute</span><span class="hl opt">(</span>NP<span class="hl opt">)</span>
    <span class="hl kwa">integer</span> <span class="hl opt">::</span> NP
    <span class="hl kwa">integer</span><span class="hl opt">(</span>ILONG<span class="hl opt">) ::</span> bsize
    <span class="hl kwa">integer</span> <span class="hl opt">::</span> i<span class="hl opt">,</span>k<span class="hl opt">,</span>k1
    <span class="hl kwa">integer</span><span class="hl opt">(</span>ISHORT<span class="hl opt">),</span> <span class="hl kwa">dimension</span><span class="hl opt">(</span>NP<span class="hl opt">) ::</span> base<span class="hl opt">,</span>oldbase
    <span class="hl kwa">integer</span> <span class="hl opt">::</span> numblk<span class="hl opt">,</span> ii<span class="hl opt">,</span> nshift
    <span class="hl kwa">integer</span> <span class="hl opt">::</span> maxlevel
    <span class="hl kwa">integer</span><span class="hl opt">(</span>ISHORT<span class="hl opt">),</span>allocatable <span class="hl opt">::</span> <span class="hl kwd">bases</span><span class="hl opt">(:,:)</span>
    <span class="hl kwa">integer</span> <span class="hl opt">::</span>icksum<span class="hl opt">,</span> imaxfk

    base <span class="hl opt">= [(</span>i<span class="hl opt">,</span>i<span class="hl opt">=</span><span class="hl num">1</span><span class="hl opt">,</span>NP<span class="hl opt">)]</span>
    <span class="hl kwd">blk</span><span class="hl opt">(:,</span><span class="hl num">1</span><span class="hl opt">) =</span> base<span class="hl opt">;</span>

    k <span class="hl opt">=</span> <span class="hl num">2</span><span class="hl opt">;</span>
    bsize <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span>
    maxfk <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    nshift <span class="hl opt">=</span> <span class="hl num">1</span>
    maxlevel <span class="hl opt">=</span> <span class="hl kwd">min</span><span class="hl opt">(</span>MAXL<span class="hl opt">,</span>NP<span class="hl opt">);</span>   <span class="hl slc">! max block level</span>

    <span class="hl kwa">do</span> i<span class="hl opt">=</span><span class="hl num">2</span><span class="hl opt">,</span>NP       <span class="hl slc">! rot count</span>
       current <span class="hl opt">=</span> i
       <span class="hl kwa">if</span><span class="hl opt">(</span>i<span class="hl opt">&gt;=</span>maxlevel<span class="hl opt">)</span> saveblk <span class="hl opt">= .</span>false<span class="hl opt">.</span>

       <span class="hl kwa">if</span><span class="hl opt">(</span>i<span class="hl opt">&lt;=</span>maxlevel<span class="hl opt">)</span> <span class="hl kwa">then</span>
          numblk <span class="hl opt">=</span> i<span class="hl opt">-</span><span class="hl num">1</span>
          nshift <span class="hl opt">=</span> i
          bsize <span class="hl opt">=</span> bsize<span class="hl opt">*(</span>i<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">)</span>
       <span class="hl kwa">else</span>
          numblk <span class="hl opt">= (</span>i<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">)*</span><span class="hl kwd">factorial</span><span class="hl opt">(</span>i<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">)/</span>bsize
       <span class="hl kwa">end if</span>
       oldbase <span class="hl opt">=</span> base
       <span class="hl kwd">allocate</span><span class="hl opt">(</span><span class="hl kwd">bases</span><span class="hl opt">(</span>NP<span class="hl opt">,</span>numblk<span class="hl opt">))</span>
       <span class="hl kwa">do</span> ii<span class="hl opt">=</span><span class="hl num">1</span><span class="hl opt">,</span> numblk
          <span class="hl kwa">call</span> <span class="hl kwd">baseshift</span><span class="hl opt">(</span>base<span class="hl opt">,</span> nshift<span class="hl opt">)</span>
          <span class="hl kwd">bases</span><span class="hl opt">(:,</span>ii<span class="hl opt">) =</span> base
       <span class="hl kwa">end do</span>

       <span class="hl slc">!$omp  parallel do default(shared) private(ii,k1,icksum,imaxfk) &amp;</span>
       <span class="hl slc">!$omp&amp; if(numblk&gt;1000) schedule(guided) &amp;</span>
       <span class="hl slc">!$omp&amp; reduction(+:cksum) reduction(max: maxfk) </span>
       <span class="hl kwa">do</span> ii <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">,</span> numblk
          k1 <span class="hl opt">=</span> k<span class="hl opt">+</span>bsize<span class="hl opt">*(</span>ii<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">)</span>
          <span class="hl kwa">if</span><span class="hl opt">(</span>saveblk<span class="hl opt">)</span> <span class="hl kwa">then</span>
             <span class="hl kwa">call</span> <span class="hl kwd">writeblk</span><span class="hl opt">(</span><span class="hl kwd">blk</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">,</span>k1<span class="hl opt">),</span><span class="hl kwd">blk</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">1</span><span class="hl opt">),</span><span class="hl kwd">bases</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">,</span>ii<span class="hl opt">),</span>bsize<span class="hl opt">)</span>
          <span class="hl kwa">end if</span>
          <span class="hl kwa">call</span> <span class="hl kwd">procblk</span><span class="hl opt">(</span><span class="hl kwd">blk</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">1</span><span class="hl opt">),</span><span class="hl kwd">bases</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">,</span>ii<span class="hl opt">),</span>bsize<span class="hl opt">,</span>icksum<span class="hl opt">,</span>imaxfk<span class="hl opt">)</span>
          cksum <span class="hl opt">=</span> cksum<span class="hl opt">+</span>icksum
          maxfk <span class="hl opt">=</span> <span class="hl kwd">max</span><span class="hl opt">(</span>maxfk<span class="hl opt">,</span> imaxfk<span class="hl opt">)</span>
       <span class="hl kwa">end do</span>
       <span class="hl slc">!$omp end parallel do</span>

       k <span class="hl opt">=</span> k<span class="hl opt">+</span>bsize<span class="hl opt">*</span>numblk
       <span class="hl kwd">deallocate</span><span class="hl opt">(</span>bases<span class="hl opt">)</span>
       <span class="hl kwa">if</span><span class="hl opt">(</span>saveblk<span class="hl opt">)</span> <span class="hl kwa">then</span>
          base <span class="hl opt">=</span> oldbase
          <span class="hl kwd">cnt</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">:</span>nshift<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">)=</span><span class="hl num">0</span>
          <span class="hl kwd">cnt</span><span class="hl opt">(</span>nshift<span class="hl opt">) =</span> <span class="hl kwd">cnt</span><span class="hl opt">(</span>nshift<span class="hl opt">)+</span><span class="hl num">1</span>
       <span class="hl kwa">end if</span>
    <span class="hl kwa">end do</span>

  <span class="hl kwa">end subroutine</span> fkcompute

  <span class="hl kwa">recursive subroutine</span> <span class="hl kwd">baseshift</span><span class="hl opt">(</span>base<span class="hl opt">,</span> n<span class="hl opt">)</span>
    <span class="hl kwa">integer</span><span class="hl opt">(</span>ISHORT<span class="hl opt">) ::</span> <span class="hl kwd">base</span><span class="hl opt">(</span>NP<span class="hl opt">)</span>
    <span class="hl kwa">integer</span> <span class="hl opt">::</span> n

    <span class="hl kwd">base</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">:</span>n<span class="hl opt">) =</span> <span class="hl kwd">cshift</span><span class="hl opt">(</span><span class="hl kwd">base</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">:</span>n<span class="hl opt">),</span> <span class="hl num">1</span><span class="hl opt">)</span>
    <span class="hl kwd">cnt</span><span class="hl opt">(</span>n<span class="hl opt">) =</span> <span class="hl kwd">cnt</span><span class="hl opt">(</span>n<span class="hl opt">) +</span><span class="hl num">1</span>
    <span class="hl kwa">if</span><span class="hl opt">(</span><span class="hl kwd">cnt</span><span class="hl opt">(</span>n<span class="hl opt">) &gt;=</span> n<span class="hl opt">)</span> <span class="hl kwa">then</span>
       <span class="hl kwd">cnt</span><span class="hl opt">(</span>n<span class="hl opt">) =</span> <span class="hl num">0</span>
       <span class="hl kwa">if</span><span class="hl opt">(</span>n <span class="hl opt">==</span> NP<span class="hl opt">)</span> <span class="hl kwa">return</span>
       <span class="hl kwa">call</span> <span class="hl kwd">baseshift</span><span class="hl opt">(</span>base<span class="hl opt">,</span> n<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)</span>
    <span class="hl kwa">end if</span>

  <span class="hl kwa">end subroutine</span> baseshift
  
  <span class="hl kwa">subroutine</span> <span class="hl kwd">procblk</span><span class="hl opt">(</span>mult<span class="hl opt">,</span>base<span class="hl opt">,</span>bsize<span class="hl opt">,</span>icksum<span class="hl opt">,</span>imaxfk<span class="hl opt">)</span>
    <span class="hl kwa">integer</span><span class="hl opt">(</span>ILONG<span class="hl opt">) ::</span> bsize
    <span class="hl kwa">integer</span><span class="hl opt">(</span>ISHORT<span class="hl opt">) ::</span> <span class="hl kwd">base</span><span class="hl opt">(</span>NP<span class="hl opt">),</span><span class="hl kwd">mult</span><span class="hl opt">(</span>NP<span class="hl opt">,</span>bsize<span class="hl opt">)</span>
    <span class="hl kwa">integer</span><span class="hl opt">(</span>ISHORT<span class="hl opt">) ::</span> <span class="hl kwd">line</span><span class="hl opt">(</span>NP<span class="hl opt">),</span> t<span class="hl opt">,</span> t1
    <span class="hl kwa">integer</span> <span class="hl opt">::</span> j<span class="hl opt">,</span> ii<span class="hl opt">,</span> iii<span class="hl opt">,</span> icksum<span class="hl opt">,</span> imaxfk

    icksum <span class="hl opt">=</span> <span class="hl num">0</span>
    imaxfk <span class="hl opt">=</span> <span class="hl num">0</span>

    <span class="hl kwa">do</span> iii<span class="hl opt">=</span><span class="hl num">1</span><span class="hl opt">,</span>bsize
       line <span class="hl opt">=</span> <span class="hl kwd">base</span><span class="hl opt">(</span><span class="hl kwd">mult</span><span class="hl opt">(:,</span>iii<span class="hl opt">));</span>
       j <span class="hl opt">=</span> <span class="hl num">0</span>
       t <span class="hl opt">=</span> <span class="hl kwd">line</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">)</span>
       <span class="hl kwa">do while</span><span class="hl opt">(</span>t <span class="hl opt">/=</span> <span class="hl num">1</span><span class="hl opt">)</span>        <span class="hl slc">! flip till line(1)==1 </span>
          <span class="hl kwa">do</span> ii<span class="hl opt">=</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl kwd">ishft</span><span class="hl opt">(</span>t<span class="hl opt">,-</span><span class="hl num">1</span><span class="hl opt">)</span>  <span class="hl slc">! do the flip</span>
             t1 <span class="hl opt">=</span> <span class="hl kwd">line</span><span class="hl opt">(</span>ii<span class="hl opt">)</span>
             <span class="hl kwd">line</span><span class="hl opt">(</span>ii<span class="hl opt">) =</span> <span class="hl kwd">line</span><span class="hl opt">(</span>t<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">-</span>ii<span class="hl opt">)</span>
             <span class="hl kwd">line</span><span class="hl opt">(</span>t<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">-</span>ii<span class="hl opt">) =</span> t1
          <span class="hl kwa">end do</span>
          t <span class="hl opt">=</span> <span class="hl kwd">line</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">)</span>
          j <span class="hl opt">=</span> j<span class="hl opt">+</span><span class="hl num">1</span>
       <span class="hl kwa">end do</span>
       imaxfk <span class="hl opt">=</span> <span class="hl kwd">max</span><span class="hl opt">(</span>imaxfk<span class="hl opt">,</span> j<span class="hl opt">)</span>
       icksum <span class="hl opt">=</span> icksum<span class="hl opt">+</span>j<span class="hl opt">*(</span><span class="hl kwd">ishft</span><span class="hl opt">(</span><span class="hl kwd">mod</span><span class="hl opt">(</span>iii<span class="hl opt">,</span><span class="hl num">2</span><span class="hl opt">),</span><span class="hl num">1</span><span class="hl opt">)-</span><span class="hl num">1</span><span class="hl opt">)</span>
    <span class="hl kwa">end do</span>
    
  <span class="hl kwa">end subroutine</span> procblk

  <span class="hl kwa">subroutine</span> <span class="hl kwd">writeblk</span><span class="hl opt">(</span>blk<span class="hl opt">,</span>mult<span class="hl opt">,</span>base<span class="hl opt">,</span>bsize<span class="hl opt">);</span>
    <span class="hl kwa">integer</span><span class="hl opt">(</span>ILONG<span class="hl opt">) ::</span> bsize
    <span class="hl kwa">integer</span><span class="hl opt">(</span>ISHORT<span class="hl opt">) ::</span> <span class="hl kwd">blk</span><span class="hl opt">(</span>NP<span class="hl opt">*</span>bsize<span class="hl opt">),</span><span class="hl kwd">mult</span><span class="hl opt">(</span>NP<span class="hl opt">*</span>bsize<span class="hl opt">),</span><span class="hl kwd">base</span><span class="hl opt">(</span>NP<span class="hl opt">)</span>

    blk <span class="hl opt">=</span> <span class="hl kwd">base</span><span class="hl opt">(</span>mult<span class="hl opt">);</span>

  <span class="hl kwa">end subroutine</span> writeblk

<span class="hl kwa">end program</span> fannkuch
