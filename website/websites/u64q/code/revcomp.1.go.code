<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * contributed by Krzysztof Kowalczyk</span>
<span class="hl com"> */</span>

<span class="hl kwa">package</span> main

<span class="hl kwa">import</span> <span class="hl opt">(</span>
   <span class="hl str">&quot;bytes&quot;</span>
   <span class="hl str">&quot;fmt&quot;</span>
   <span class="hl str">&quot;io&quot;</span>
   <span class="hl str">&quot;log&quot;</span>
   <span class="hl str">&quot;os&quot;</span>
   <span class="hl str">&quot;runtime&quot;</span>
<span class="hl opt">)</span>

<span class="hl kwa">var</span> comptbl <span class="hl opt">= [</span><span class="hl num">256</span><span class="hl opt">]</span><span class="hl kwb">uint8</span><span class="hl opt">{}</span>

<span class="hl kwa">func</span> <span class="hl kwd">build_comptbl</span><span class="hl opt">() {</span>
   l1 <span class="hl opt">:= []</span><span class="hl kwb">byte</span><span class="hl opt">(</span><span class="hl str">&quot;UACBDKRWSN&quot;</span><span class="hl opt">)</span>
   l2 <span class="hl opt">:= []</span><span class="hl kwb">byte</span><span class="hl opt">(</span><span class="hl str">&quot;ATGVHMYWSN&quot;</span><span class="hl opt">)</span>
   l1_lower <span class="hl opt">:=</span> bytes<span class="hl opt">.</span><span class="hl kwd">ToLower</span><span class="hl opt">(</span>l1<span class="hl opt">)</span>
   l2_lower <span class="hl opt">:=</span> bytes<span class="hl opt">.</span><span class="hl kwd">ToLower</span><span class="hl opt">(</span>l2<span class="hl opt">)</span>
   <span class="hl kwa">for</span> i<span class="hl opt">,</span> c1 <span class="hl opt">:=</span> <span class="hl kwa">range</span> l1 <span class="hl opt">{</span>
      c2 <span class="hl opt">:=</span> l2<span class="hl opt">[</span>i<span class="hl opt">]</span>
      comptbl<span class="hl opt">[</span>c1<span class="hl opt">] =</span> c2
      comptbl<span class="hl opt">[</span>c2<span class="hl opt">] =</span> c1
      comptbl<span class="hl opt">[</span>l1_lower<span class="hl opt">[</span>i<span class="hl opt">]] =</span> c2
      comptbl<span class="hl opt">[</span>l2_lower<span class="hl opt">[</span>i<span class="hl opt">]] =</span> c1
   <span class="hl opt">}</span>
   comptbl<span class="hl opt">[</span><span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl opt">] =</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span>
<span class="hl opt">}</span>

<span class="hl kwa">const</span> CHUNK_SIZE <span class="hl opt">=</span> <span class="hl num">1024</span> <span class="hl opt">*</span> <span class="hl num">128</span>
<span class="hl kwa">const</span> BUF_SIZE <span class="hl opt">=</span> <span class="hl num">1024</span> <span class="hl opt">*</span> <span class="hl num">1024</span> <span class="hl opt">*</span> <span class="hl num">243</span>
<span class="hl kwa">const</span> <span class="hl opt">(</span>
   START   <span class="hl opt">=</span> <span class="hl num">0</span>
   IN_HDR  <span class="hl opt">=</span> <span class="hl num">1</span>
   IN_DATA <span class="hl opt">=</span> <span class="hl num">2</span>
<span class="hl opt">)</span>

<span class="hl kwa">type</span> ChunkInfo <span class="hl kwa">struct</span> <span class="hl opt">{</span>
   i<span class="hl opt">,</span> end <span class="hl kwb">int</span>
   last   <span class="hl kwb">bool</span>
<span class="hl opt">}</span>

<span class="hl kwa">type</span> PrintJob <span class="hl kwa">struct</span> <span class="hl opt">{</span>
   data <span class="hl opt">[]</span><span class="hl kwb">byte</span>
   last <span class="hl kwb">bool</span>
<span class="hl opt">}</span>

<span class="hl kwa">var</span> buf <span class="hl opt">[]</span><span class="hl kwb">byte</span>
<span class="hl kwa">var</span> start_fasta_hdr <span class="hl kwb">int</span>
<span class="hl kwa">var</span> start_fasta_data <span class="hl kwb">int</span>
<span class="hl kwa">var</span> state <span class="hl kwb">int</span> <span class="hl opt">=</span> START
<span class="hl kwa">var</span> chunker_chan <span class="hl kwa">chan</span> ChunkInfo
<span class="hl kwa">var</span> printer_chan <span class="hl kwa">chan</span> PrintJob
<span class="hl kwa">var</span> done_chan <span class="hl kwa">chan</span> <span class="hl kwb">bool</span>

<span class="hl kwa">func</span> <span class="hl kwd">printer</span><span class="hl opt">(</span>jobs <span class="hl kwa">chan</span> PrintJob<span class="hl opt">,</span> done <span class="hl kwa">chan</span> <span class="hl kwb">bool</span><span class="hl opt">) {</span>
   <span class="hl kwa">for</span> <span class="hl opt">{</span>
      job <span class="hl opt">:= &lt;-</span>jobs
      <span class="hl kwa">if</span> <span class="hl kwb">nil</span> <span class="hl opt">!=</span> job<span class="hl opt">.</span>data <span class="hl opt">{</span>
         os<span class="hl opt">.</span>Stdout<span class="hl opt">.</span><span class="hl kwd">Write</span><span class="hl opt">(</span>job<span class="hl opt">.</span>data<span class="hl opt">)</span>
      <span class="hl opt">}</span>
      <span class="hl kwa">if</span> job<span class="hl opt">.</span>last <span class="hl opt">{</span>
         done <span class="hl opt">&lt;-</span> <span class="hl kwb">true</span>
         <span class="hl kwa">return</span>
      <span class="hl opt">}</span>
   <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl kwa">func</span> <span class="hl kwd">add_printer_job</span><span class="hl opt">(</span>data <span class="hl opt">[]</span><span class="hl kwb">byte</span><span class="hl opt">,</span> last <span class="hl kwb">bool</span><span class="hl opt">) {</span>
   <span class="hl kwa">var</span> j PrintJob
   j<span class="hl opt">.</span>data <span class="hl opt">=</span> data
   j<span class="hl opt">.</span>last <span class="hl opt">=</span> last
   printer_chan <span class="hl opt">&lt;-</span> j
<span class="hl opt">}</span>

<span class="hl slc">// TODO: this one can print a bit earlier</span>
<span class="hl kwa">func</span> <span class="hl kwd">reverse</span><span class="hl opt">(</span>strand <span class="hl opt">[]</span><span class="hl kwb">byte</span><span class="hl opt">) {</span>
   i <span class="hl opt">:=</span> <span class="hl num">0</span>
   end <span class="hl opt">:=</span> <span class="hl kwb">len</span><span class="hl opt">(</span>strand<span class="hl opt">) -</span> <span class="hl num">1</span>
   <span class="hl kwa">for</span> i <span class="hl opt">&lt;</span> end <span class="hl opt">{</span>
      c <span class="hl opt">:=</span> strand<span class="hl opt">[</span>i<span class="hl opt">]</span>
      <span class="hl kwa">if</span> c <span class="hl opt">==</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span> <span class="hl opt">{</span>
         i <span class="hl opt">+=</span> <span class="hl num">1</span>
         c <span class="hl opt">=</span> strand<span class="hl opt">[</span>i<span class="hl opt">]</span>
      <span class="hl opt">}</span>
      cend <span class="hl opt">:=</span> strand<span class="hl opt">[</span>end<span class="hl opt">]</span>
      <span class="hl kwa">if</span> cend <span class="hl opt">==</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span> <span class="hl opt">{</span>
         end <span class="hl opt">-=</span> <span class="hl num">1</span>
         cend <span class="hl opt">=</span> strand<span class="hl opt">[</span>end<span class="hl opt">]</span>
      <span class="hl opt">}</span>
      strand<span class="hl opt">[</span>i<span class="hl opt">] =</span> comptbl<span class="hl opt">[</span>cend<span class="hl opt">]</span>
      strand<span class="hl opt">[</span>end<span class="hl opt">] =</span> comptbl<span class="hl opt">[</span>c<span class="hl opt">]</span>
      i <span class="hl opt">+=</span> <span class="hl num">1</span>
      end <span class="hl opt">-=</span> <span class="hl num">1</span>
   <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl kwa">func</span> <span class="hl kwd">print_fasta</span><span class="hl opt">(</span>start<span class="hl opt">,</span> end <span class="hl kwb">int</span><span class="hl opt">) {</span>
   <span class="hl kwd">reverse</span><span class="hl opt">(</span>buf<span class="hl opt">[</span>start<span class="hl opt">:</span>end<span class="hl opt">])</span>
   <span class="hl kwd">add_printer_job</span><span class="hl opt">(</span>buf<span class="hl opt">[</span>start<span class="hl opt">:</span>end<span class="hl opt">],</span> <span class="hl kwb">false</span><span class="hl opt">)</span>
<span class="hl opt">}</span>

<span class="hl kwa">func</span> <span class="hl kwd">process_chunk_data</span><span class="hl opt">(</span>i<span class="hl opt">,</span> end <span class="hl kwb">int</span><span class="hl opt">)</span> <span class="hl kwb">int</span> <span class="hl opt">{</span>
   pos <span class="hl opt">:=</span> bytes<span class="hl opt">.</span><span class="hl kwd">IndexByte</span><span class="hl opt">(</span>buf<span class="hl opt">[</span>i<span class="hl opt">:</span>end<span class="hl opt">],</span> <span class="hl str">'&gt;'</span><span class="hl opt">)</span>
   <span class="hl kwa">if</span> <span class="hl opt">-</span><span class="hl num">1</span> <span class="hl opt">==</span> pos <span class="hl opt">{</span>
      i <span class="hl opt">=</span> end
      <span class="hl kwa">return</span> IN_DATA
   <span class="hl opt">}</span>
   i <span class="hl opt">=</span> i <span class="hl opt">+</span> pos
   <span class="hl kwd">print_fasta</span><span class="hl opt">(</span>start_fasta_data<span class="hl opt">,</span> i<span class="hl opt">)</span>
   start_fasta_hdr <span class="hl opt">=</span> i
   <span class="hl kwa">return</span> <span class="hl kwd">process_chunk_start</span><span class="hl opt">(</span>i<span class="hl opt">,</span> end<span class="hl opt">)</span>
<span class="hl opt">}</span>

<span class="hl kwa">func</span> <span class="hl kwd">process_chunk_hdr</span><span class="hl opt">(</span>i<span class="hl opt">,</span> end <span class="hl kwb">int</span><span class="hl opt">)</span> <span class="hl kwb">int</span> <span class="hl opt">{</span>
   <span class="hl kwa">for</span> <span class="hl opt">;</span> i <span class="hl opt">&lt;</span> end<span class="hl opt">;</span> i<span class="hl opt">++ {</span>
      <span class="hl kwa">if</span> buf<span class="hl opt">[</span>i<span class="hl opt">] ==</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span> <span class="hl opt">{</span>
         <span class="hl kwd">add_printer_job</span><span class="hl opt">(</span>buf<span class="hl opt">[</span>start_fasta_hdr<span class="hl opt">:</span>i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">],</span> <span class="hl kwb">false</span><span class="hl opt">)</span>
         start_fasta_data <span class="hl opt">=</span> i <span class="hl opt">+</span> <span class="hl num">1</span>
         <span class="hl kwa">return</span> <span class="hl kwd">process_chunk_data</span><span class="hl opt">(</span>i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">,</span> end<span class="hl opt">)</span>
      <span class="hl opt">}</span>
   <span class="hl opt">}</span>
   <span class="hl kwa">return</span> IN_HDR
<span class="hl opt">}</span>

<span class="hl kwa">func</span> <span class="hl kwd">process_chunk_start</span><span class="hl opt">(</span>i<span class="hl opt">,</span> end <span class="hl kwb">int</span><span class="hl opt">)</span> <span class="hl kwb">int</span> <span class="hl opt">{</span>
   <span class="hl kwa">if</span> buf<span class="hl opt">[</span>i<span class="hl opt">] !=</span> <span class="hl str">'&gt;'</span> <span class="hl opt">{</span>
      <span class="hl kwb">panic</span><span class="hl opt">(</span><span class="hl str">&quot;Unexpected&quot;</span><span class="hl opt">)</span>
   <span class="hl opt">}</span>
   start_fasta_hdr <span class="hl opt">=</span> i
   <span class="hl kwa">return</span> <span class="hl kwd">process_chunk_hdr</span><span class="hl opt">(</span>i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">,</span> end<span class="hl opt">)</span>
<span class="hl opt">}</span>

<span class="hl kwa">func</span> <span class="hl kwd">process_chunk</span><span class="hl opt">(</span>i<span class="hl opt">,</span> end <span class="hl kwb">int</span><span class="hl opt">) {</span>
   <span class="hl kwa">if</span> state <span class="hl opt">==</span> START <span class="hl opt">{</span>
      state <span class="hl opt">=</span> <span class="hl kwd">process_chunk_start</span><span class="hl opt">(</span>i<span class="hl opt">,</span> end<span class="hl opt">)</span>
   <span class="hl opt">}</span> <span class="hl kwa">else if</span> state <span class="hl opt">==</span> IN_HDR <span class="hl opt">{</span>
      state <span class="hl opt">=</span> <span class="hl kwd">process_chunk_hdr</span><span class="hl opt">(</span>i<span class="hl opt">,</span> end<span class="hl opt">)</span>
   <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
      state <span class="hl opt">=</span> <span class="hl kwd">process_chunk_data</span><span class="hl opt">(</span>i<span class="hl opt">,</span> end<span class="hl opt">)</span>
   <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl kwa">func</span> <span class="hl kwd">chunker</span><span class="hl opt">(</span>chunks <span class="hl kwa">chan</span> ChunkInfo<span class="hl opt">,</span> done <span class="hl kwa">chan</span> <span class="hl kwb">bool</span><span class="hl opt">) {</span>
   <span class="hl kwa">for</span> <span class="hl opt">{</span>
      ci <span class="hl opt">:= &lt;-</span>chunks
      <span class="hl kwa">if</span> ci<span class="hl opt">.</span>last <span class="hl opt">{</span>
         <span class="hl kwa">if</span> state <span class="hl opt">!=</span> IN_DATA <span class="hl opt">{</span>
            <span class="hl kwb">panic</span><span class="hl opt">(</span><span class="hl str">&quot;unexpected state&quot;</span><span class="hl opt">)</span>
         <span class="hl opt">}</span>
         <span class="hl kwd">print_fasta</span><span class="hl opt">(</span>start_fasta_data<span class="hl opt">,</span> ci<span class="hl opt">.</span>end<span class="hl opt">)</span>
         <span class="hl kwd">add_printer_job</span><span class="hl opt">(</span><span class="hl kwb">nil</span><span class="hl opt">,</span> <span class="hl kwb">true</span><span class="hl opt">)</span>
         done <span class="hl opt">&lt;-</span> <span class="hl kwb">true</span>
         <span class="hl kwa">return</span>
      <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
         <span class="hl kwd">process_chunk</span><span class="hl opt">(</span>ci<span class="hl opt">.</span>i<span class="hl opt">,</span> ci<span class="hl opt">.</span>end<span class="hl opt">)</span>
      <span class="hl opt">}</span>
   <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl kwa">func</span> <span class="hl kwd">main</span><span class="hl opt">() {</span>
   runtime<span class="hl opt">.</span><span class="hl kwd">GOMAXPROCS</span><span class="hl opt">(</span><span class="hl num">4</span><span class="hl opt">)</span>
   <span class="hl kwd">build_comptbl</span><span class="hl opt">()</span>
   buf <span class="hl opt">=</span> <span class="hl kwb">make</span><span class="hl opt">([]</span><span class="hl kwb">byte</span><span class="hl opt">,</span> BUF_SIZE<span class="hl opt">,</span> BUF_SIZE<span class="hl opt">)</span>
   chunker_chan <span class="hl opt">=</span> <span class="hl kwb">make</span><span class="hl opt">(</span><span class="hl kwa">chan</span> ChunkInfo<span class="hl opt">,</span> <span class="hl num">128</span><span class="hl opt">)</span>
   printer_chan <span class="hl opt">=</span> <span class="hl kwb">make</span><span class="hl opt">(</span><span class="hl kwa">chan</span> PrintJob<span class="hl opt">,</span> <span class="hl num">16</span><span class="hl opt">)</span>
   done_chan <span class="hl opt">=</span> <span class="hl kwb">make</span><span class="hl opt">(</span><span class="hl kwa">chan</span> <span class="hl kwb">bool</span><span class="hl opt">,</span> <span class="hl num">2</span><span class="hl opt">)</span>
   <span class="hl kwa">go</span> <span class="hl kwd">chunker</span><span class="hl opt">(</span>chunker_chan<span class="hl opt">,</span> done_chan<span class="hl opt">)</span>
   <span class="hl kwa">go</span> <span class="hl kwd">printer</span><span class="hl opt">(</span>printer_chan<span class="hl opt">,</span> done_chan<span class="hl opt">)</span>
   i <span class="hl opt">:=</span> <span class="hl num">0</span>
   <span class="hl kwa">for</span> <span class="hl opt">{</span>
      n<span class="hl opt">,</span> err <span class="hl opt">:=</span> os<span class="hl opt">.</span>Stdin<span class="hl opt">.</span><span class="hl kwd">Read</span><span class="hl opt">(</span>buf<span class="hl opt">[</span>i <span class="hl opt">:</span> i<span class="hl opt">+</span>CHUNK_SIZE<span class="hl opt">])</span>
      <span class="hl kwa">if</span> n <span class="hl opt">&gt;</span> <span class="hl num">0</span> <span class="hl opt">{</span>
         <span class="hl kwa">var</span> ci ChunkInfo
         ci<span class="hl opt">.</span>i <span class="hl opt">=</span> i
         ci<span class="hl opt">.</span>end <span class="hl opt">=</span> i <span class="hl opt">+</span> n
         ci<span class="hl opt">.</span>last <span class="hl opt">=</span> <span class="hl kwb">false</span>
         chunker_chan <span class="hl opt">&lt;-</span> ci
         i <span class="hl opt">+=</span> n
      <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
         <span class="hl kwa">if</span> err <span class="hl opt">==</span> io<span class="hl opt">.</span>EOF <span class="hl opt">{</span>
            <span class="hl kwa">var</span> ci ChunkInfo
            ci<span class="hl opt">.</span>end <span class="hl opt">=</span> i
            ci<span class="hl opt">.</span>last <span class="hl opt">=</span> <span class="hl kwb">true</span>
            chunker_chan <span class="hl opt">&lt;-</span> ci
            <span class="hl kwa">break</span>
         <span class="hl opt">}</span>
         log<span class="hl opt">.</span><span class="hl kwd">Fatalf</span><span class="hl opt">(</span>fmt<span class="hl opt">.</span><span class="hl kwd">Sprintf</span><span class="hl opt">(</span><span class="hl str">&quot;Unexpected error: %s</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">),</span> err<span class="hl opt">.</span><span class="hl kwd">Error</span><span class="hl opt">())</span>
      <span class="hl opt">}</span>
   <span class="hl opt">}</span>
   <span class="hl slc">// wait for both chunker and printer</span>
   <span class="hl opt">&lt;-</span>done_chan
   <span class="hl opt">&lt;-</span>done_chan
<span class="hl opt">}</span>
