<span class="hl slc">;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;; http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">;</span>
<span class="hl slc">;; Adapted from the Java -server version</span>
<span class="hl slc">;</span>
<span class="hl slc">;; contributed by Marko Kocic</span>
<span class="hl slc">;; modified by Kenneth Jonsson, restructured to allow usage of 'pmap'</span>
<span class="hl slc">;; modified by Andy Fingerhut to use faster primitive math ops, and</span>
<span class="hl slc">;; deftype instead of defrecord for smaller tree nodes.</span>
<span class="hl slc">;; modified by Rich Hickey for Clojure 1.3</span>

<span class="hl opt">(</span><span class="hl kwa">ns</span> binarytreesredux
  <span class="hl opt">(:</span>gen-class<span class="hl opt">))</span>

<span class="hl opt">(</span><span class="hl kwa">set</span><span class="hl opt">! *</span>warn-on-reflection<span class="hl opt">*</span> true<span class="hl opt">)</span>
<span class="hl opt">(</span><span class="hl kwa">set</span><span class="hl opt">! *</span>unchecked-math<span class="hl opt">*</span> true<span class="hl opt">)</span>

<span class="hl opt">(</span><span class="hl kwa">definterface</span> ITreeNode
  <span class="hl opt">(</span>^long item <span class="hl opt">[])</span>
  <span class="hl opt">(</span><span class="hl kwa">left</span> <span class="hl opt">[])</span>
  <span class="hl opt">(</span><span class="hl kwa">right</span> <span class="hl opt">[]))</span>

<span class="hl slc">;; These TreeNode's take up noticeably less memory than a similar one</span>
<span class="hl slc">;; implemented using defrecord.</span>

<span class="hl opt">(</span><span class="hl kwa">deftype</span> TreeNode <span class="hl opt">[</span>left right ^long item<span class="hl opt">]</span>
  ITreeNode
  <span class="hl opt">(</span><span class="hl kwa">item</span> <span class="hl opt">[</span>this<span class="hl opt">]</span> item<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">left</span> <span class="hl opt">[</span>this<span class="hl opt">]</span> left<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">right</span> <span class="hl opt">[</span>this<span class="hl opt">]</span> right<span class="hl opt">))</span>

<span class="hl opt">(</span><span class="hl kwa">defn</span> bottom-up-tree <span class="hl opt">[</span>^long item ^long depth<span class="hl opt">]</span>
  <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">zero</span>? depth<span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl kwa">TreeNode</span>. nil nil item<span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl kwa">TreeNode</span>.
     <span class="hl opt">(</span><span class="hl kwa">bottom-up-tree</span> <span class="hl opt">(</span><span class="hl kwa">dec</span> <span class="hl opt">(*</span> <span class="hl num">2</span> item<span class="hl opt">))</span>
                     <span class="hl opt">(</span><span class="hl kwa">dec</span> depth<span class="hl opt">))</span>
     <span class="hl opt">(</span><span class="hl kwa">bottom-up-tree</span> <span class="hl opt">(*</span> <span class="hl num">2</span> item<span class="hl opt">)</span>
                     <span class="hl opt">(</span><span class="hl kwa">dec</span> depth<span class="hl opt">))</span>
     item<span class="hl opt">)))</span>

<span class="hl opt">(</span><span class="hl kwa">defn</span> item-check ^long <span class="hl opt">[</span>^TreeNode node<span class="hl opt">]</span>
  <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">nil</span>? <span class="hl opt">(</span>.left node<span class="hl opt">))</span>
    <span class="hl opt">(</span>.item node<span class="hl opt">)</span>
    <span class="hl opt">(+ (+ (</span>.item node<span class="hl opt">)</span>
          <span class="hl opt">(</span><span class="hl kwa">item-check</span> <span class="hl opt">(</span>.left node<span class="hl opt">)))</span>
       <span class="hl opt">(</span><span class="hl kwa">-</span> <span class="hl opt">(</span><span class="hl kwa">item-check</span> <span class="hl opt">(</span>.right node<span class="hl opt">))))))</span>

<span class="hl opt">(</span><span class="hl kwa">defn</span> iterate-trees <span class="hl opt">[</span>^long mx ^long mn ^long d<span class="hl opt">]</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">[</span>iterations <span class="hl opt">(</span><span class="hl kwa">bit-shift-left</span> <span class="hl num">1</span> <span class="hl opt">(</span><span class="hl kwa">-</span> <span class="hl opt">(+</span> mx mn<span class="hl opt">)</span> d<span class="hl opt">))]</span>
    <span class="hl opt">(</span><span class="hl kwa">format</span> <span class="hl str">&quot;%d</span><span class="hl esc">\t</span> <span class="hl str">trees of depth %d</span><span class="hl esc">\t</span> <span class="hl str">check: %d&quot;</span> <span class="hl opt">(*</span> <span class="hl num">2</span> iterations<span class="hl opt">)</span> d
            <span class="hl opt">(</span><span class="hl kwa">reduce</span> <span class="hl opt">+ (</span><span class="hl kwa">map</span> <span class="hl opt">(</span><span class="hl kwa">fn</span> <span class="hl opt">[</span>i<span class="hl opt">]</span>
                             <span class="hl opt">(+ (</span><span class="hl kwa">item-check</span> <span class="hl opt">(</span><span class="hl kwa">bottom-up-tree</span> i d<span class="hl opt">))</span>
                                <span class="hl opt">(</span><span class="hl kwa">item-check</span> <span class="hl opt">(</span><span class="hl kwa">bottom-up-tree</span> <span class="hl opt">(</span><span class="hl kwa">-</span> i<span class="hl opt">)</span> d<span class="hl opt">))))</span>
                           <span class="hl opt">(</span><span class="hl kwa">range</span> <span class="hl num">1</span> <span class="hl opt">(</span><span class="hl kwa">inc</span> iterations<span class="hl opt">)))))))</span>

<span class="hl opt">(</span><span class="hl kwa">def</span> min-depth <span class="hl num">4</span><span class="hl opt">)</span>

<span class="hl opt">(</span><span class="hl kwa">defn</span> main <span class="hl opt">[</span>max-depth<span class="hl opt">]</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">[</span>stretch-depth <span class="hl opt">(</span><span class="hl kwa">inc</span> max-depth<span class="hl opt">)]</span>
    <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">[</span>tree <span class="hl opt">(</span><span class="hl kwa">bottom-up-tree</span> <span class="hl num">0</span> stretch-depth<span class="hl opt">)</span>
          check <span class="hl opt">(</span><span class="hl kwa">item-check</span> tree<span class="hl opt">)]</span>
      <span class="hl opt">(</span><span class="hl kwa">println</span> <span class="hl opt">(</span><span class="hl kwa">format</span> <span class="hl str">&quot;stretch tree of depth %d</span><span class="hl esc">\t</span> <span class="hl str">check: %d&quot;</span> stretch-depth check<span class="hl opt">)))</span>
    <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">[</span>long-lived-tree <span class="hl opt">(</span><span class="hl kwa">bottom-up-tree</span> <span class="hl num">0</span> max-depth<span class="hl opt">) ]</span>
      <span class="hl opt">(</span><span class="hl kwa">doseq</span> <span class="hl opt">[</span>trees-nfo <span class="hl opt">(</span><span class="hl kwa">map</span> <span class="hl opt">(</span><span class="hl kwa">fn</span> <span class="hl opt">[</span>d<span class="hl opt">]</span>
                                <span class="hl opt">(</span><span class="hl kwa">iterate-trees</span> max-depth min-depth d<span class="hl opt">))</span>
<span class="hl opt">(</span><span class="hl kwa">range</span> min-depth stretch-depth <span class="hl num">2</span><span class="hl opt">)) ]</span>
        <span class="hl opt">(</span><span class="hl kwa">println</span> trees-nfo<span class="hl opt">))</span>
      <span class="hl opt">(</span><span class="hl kwa">println</span> <span class="hl opt">(</span><span class="hl kwa">format</span> <span class="hl str">&quot;long lived tree of depth %d</span><span class="hl esc">\t</span> <span class="hl str">check: %d&quot;</span> max-depth <span class="hl opt">(</span><span class="hl kwa">item-check</span> long-lived-tree<span class="hl opt">))))))</span>

<span class="hl opt">(</span><span class="hl kwa">defn</span> -main <span class="hl opt">[&amp;</span> args<span class="hl opt">]</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">[</span>n <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">first</span> args<span class="hl opt">) (</span><span class="hl kwa">Integer</span><span class="hl opt">/</span>parseInt <span class="hl opt">(</span><span class="hl kwa">first</span> args<span class="hl opt">))</span> <span class="hl num">0</span><span class="hl opt">)</span>
        max-depth <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(&gt; (+</span> min-depth <span class="hl num">2</span><span class="hl opt">)</span> n<span class="hl opt">) (+</span> min-depth <span class="hl num">2</span><span class="hl opt">)</span> n<span class="hl opt">)]</span>
    <span class="hl opt">(</span><span class="hl kwa">main</span> max-depth<span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl kwa">shutdown-agents</span><span class="hl opt">)))</span>
