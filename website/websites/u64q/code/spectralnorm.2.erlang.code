<span class="hl slc">% The Computer Language Benchmarks Game</span>
<span class="hl slc">% http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">%   contributed by Fredrik Svahn</span>

<span class="hl opt">-</span><span class="hl kwd">module</span><span class="hl opt">(</span>spectralnorm<span class="hl opt">).</span>
<span class="hl opt">-</span><span class="hl kwd">export</span><span class="hl opt">([</span>main<span class="hl opt">/</span><span class="hl num">1</span><span class="hl opt">]).</span>
<span class="hl opt">-</span><span class="hl kwd">compile</span><span class="hl opt">( [</span> inline<span class="hl opt">, {</span> inline_size<span class="hl opt">,</span> <span class="hl num">1000</span> <span class="hl opt">} ] ).</span>

<span class="hl kwd">main</span><span class="hl opt">([</span>Arg<span class="hl opt">]) -&gt;</span>
    <span class="hl kwb">register</span><span class="hl opt">(</span>server<span class="hl opt">,</span> <span class="hl kwb">self</span><span class="hl opt">()),</span>
    N <span class="hl opt">=</span> <span class="hl kwb">list_to_integer</span><span class="hl opt">(</span>Arg<span class="hl opt">),</span>
    <span class="hl opt">{</span>U<span class="hl opt">,</span> V<span class="hl opt">} =</span> <span class="hl kwd">power_method</span><span class="hl opt">(</span>N<span class="hl opt">,</span> <span class="hl num">10</span><span class="hl opt">,</span> <span class="hl kwc">erlang</span><span class="hl opt">:</span><span class="hl kwd">make_tuple</span><span class="hl opt">(</span>N<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">), []),</span>
    <span class="hl kwc">io</span><span class="hl opt">:</span><span class="hl kwd">format</span><span class="hl opt">(</span><span class="hl str">&quot;~.9f</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">, [</span> <span class="hl kwd">eigen</span><span class="hl opt">(</span>N<span class="hl opt">,</span> U<span class="hl opt">,</span> V<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">) ]),</span>
    <span class="hl kwc">erlang</span><span class="hl opt">:</span><span class="hl kwb">halt</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">).</span>

<span class="hl slc">% eigenvalue of V</span>
<span class="hl kwd">eigen</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> _<span class="hl opt">,</span> _<span class="hl opt">,</span> VBV<span class="hl opt">,</span> VV<span class="hl opt">)</span> <span class="hl kwa">when</span> VV <span class="hl opt">/=</span> <span class="hl num">0</span> <span class="hl opt">-&gt;</span> <span class="hl kwb">math</span><span class="hl opt">:</span><span class="hl kwb">sqrt</span><span class="hl opt">(</span>VBV <span class="hl opt">/</span> VV<span class="hl opt">);</span>

<span class="hl kwd">eigen</span><span class="hl opt">(</span>I<span class="hl opt">,</span> U<span class="hl opt">,</span> V<span class="hl opt">,</span> VBV<span class="hl opt">,</span> VV<span class="hl opt">)</span> <span class="hl kwa">when</span> I <span class="hl opt">/=</span> <span class="hl num">0</span> <span class="hl opt">-&gt;</span>
    VI <span class="hl opt">=</span> <span class="hl kwb">element</span><span class="hl opt">(</span>I<span class="hl opt">,</span> V<span class="hl opt">),</span>
    <span class="hl kwd">eigen</span><span class="hl opt">(</span>I<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">,</span> U<span class="hl opt">,</span> V<span class="hl opt">,</span> VBV <span class="hl opt">+</span> <span class="hl kwb">element</span><span class="hl opt">(</span>I<span class="hl opt">,</span> U<span class="hl opt">)*</span>VI<span class="hl opt">,</span> VV <span class="hl opt">+</span> VI<span class="hl opt">*</span>VI<span class="hl opt">).</span>

<span class="hl slc">% 2I steps of the power method</span>
<span class="hl kwd">power_method</span><span class="hl opt">(</span>_<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> A<span class="hl opt">,</span> B<span class="hl opt">) -&gt; {</span>A<span class="hl opt">,</span> B<span class="hl opt">};</span>
<span class="hl kwd">power_method</span><span class="hl opt">(</span>N<span class="hl opt">,</span> I<span class="hl opt">,</span> A<span class="hl opt">,</span> _B<span class="hl opt">) -&gt;</span>
    V <span class="hl opt">=</span> <span class="hl kwd">atav</span><span class="hl opt">(</span>N<span class="hl opt">,</span> A<span class="hl opt">),</span>
    U <span class="hl opt">=</span> <span class="hl kwd">atav</span><span class="hl opt">(</span>N<span class="hl opt">,</span> V<span class="hl opt">),</span>
    <span class="hl kwd">power_method</span><span class="hl opt">(</span>N<span class="hl opt">,</span> I<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">,</span> U<span class="hl opt">,</span> V<span class="hl opt">).</span>


<span class="hl slc">% return element i,j of infinite matrix A</span>
<span class="hl kwd">a</span><span class="hl opt">(</span>II<span class="hl opt">,</span>JJ<span class="hl opt">) -&gt;</span> <span class="hl num">1</span><span class="hl opt">/((</span>II<span class="hl opt">+</span>JJ<span class="hl opt">-</span><span class="hl num">2</span><span class="hl opt">)*(</span>II<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">+</span>JJ<span class="hl opt">)/</span><span class="hl num">2</span><span class="hl opt">+</span>II<span class="hl opt">).</span>


<span class="hl slc">% multiply vector v by matrix A</span>
<span class="hl kwd">av</span><span class="hl opt">(</span>N<span class="hl opt">,</span> V<span class="hl opt">) -&gt;</span> <span class="hl kwd">pmap</span><span class="hl opt">(</span>N<span class="hl opt">,</span> <span class="hl kwa">fun</span><span class="hl opt">(</span>Begin<span class="hl opt">,</span> End<span class="hl opt">) -&gt;</span> <span class="hl kwd">av</span><span class="hl opt">(</span>N<span class="hl opt">,</span> Begin<span class="hl opt">,</span> End<span class="hl opt">,</span> V<span class="hl opt">)</span> <span class="hl kwa">end</span><span class="hl opt">).</span>

<span class="hl kwd">av</span><span class="hl opt">(</span>N<span class="hl opt">,</span> Begin<span class="hl opt">,</span> End<span class="hl opt">,</span> V<span class="hl opt">) -&gt;</span> server <span class="hl opt">! {</span> <span class="hl kwb">self</span><span class="hl opt">(), [</span> <span class="hl kwd">avloop</span><span class="hl opt">(</span>N<span class="hl opt">,</span> I<span class="hl opt">,</span> V<span class="hl opt">,</span> <span class="hl num">0.0</span><span class="hl opt">)</span> || I <span class="hl opt">&lt;-</span> <span class="hl kwc">lists</span><span class="hl opt">:</span><span class="hl kwd">seq</span><span class="hl opt">(</span>Begin<span class="hl opt">,</span> End<span class="hl opt">) ]}.</span>

<span class="hl kwd">avloop</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> _<span class="hl opt">,</span> _<span class="hl opt">,</span> X<span class="hl opt">) -&gt;</span>  X<span class="hl opt">;</span>
<span class="hl kwd">avloop</span><span class="hl opt">(</span>J<span class="hl opt">,</span> I<span class="hl opt">,</span> V<span class="hl opt">,</span> X<span class="hl opt">) -&gt;</span>  <span class="hl kwd">avloop</span><span class="hl opt">(</span>J<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">,</span> I<span class="hl opt">,</span> V<span class="hl opt">,</span> X <span class="hl opt">+</span> <span class="hl kwd">a</span><span class="hl opt">(</span>I<span class="hl opt">,</span> J<span class="hl opt">)*</span><span class="hl kwb">element</span><span class="hl opt">(</span>J<span class="hl opt">,</span> V<span class="hl opt">) ).</span>


<span class="hl slc">% multiply vector v by matrix A transposed</span>
<span class="hl kwd">atv</span><span class="hl opt">(</span>N<span class="hl opt">,</span> V<span class="hl opt">) -&gt;</span> <span class="hl kwd">pmap</span><span class="hl opt">(</span>N<span class="hl opt">,</span> <span class="hl kwa">fun</span><span class="hl opt">(</span>Begin<span class="hl opt">,</span> End<span class="hl opt">)-&gt;</span> <span class="hl kwd">atv</span><span class="hl opt">(</span>N<span class="hl opt">,</span> Begin<span class="hl opt">,</span> End<span class="hl opt">,</span> V<span class="hl opt">)</span> <span class="hl kwa">end</span><span class="hl opt">).</span>

<span class="hl kwd">atv</span><span class="hl opt">(</span>N<span class="hl opt">,</span> Begin<span class="hl opt">,</span> End<span class="hl opt">,</span> V<span class="hl opt">) -&gt;</span> server <span class="hl opt">! {</span> <span class="hl kwb">self</span><span class="hl opt">(), [</span> <span class="hl kwd">atvloop</span><span class="hl opt">(</span>N<span class="hl opt">,</span> I<span class="hl opt">,</span> V<span class="hl opt">,</span> <span class="hl num">0.0</span><span class="hl opt">)</span> || I <span class="hl opt">&lt;-</span> <span class="hl kwc">lists</span><span class="hl opt">:</span><span class="hl kwd">seq</span><span class="hl opt">(</span>Begin<span class="hl opt">,</span> End<span class="hl opt">) ]}.</span>

<span class="hl kwd">atvloop</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> _<span class="hl opt">,</span> _<span class="hl opt">,</span> X<span class="hl opt">) -&gt;</span> X<span class="hl opt">;</span>
<span class="hl kwd">atvloop</span><span class="hl opt">(</span>J<span class="hl opt">,</span> I<span class="hl opt">,</span> V<span class="hl opt">,</span> X<span class="hl opt">) -&gt;</span> <span class="hl kwd">atvloop</span><span class="hl opt">(</span>J<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">,</span> I<span class="hl opt">,</span> V<span class="hl opt">,</span> X <span class="hl opt">+</span> <span class="hl kwd">a</span><span class="hl opt">(</span>J<span class="hl opt">,</span> I<span class="hl opt">)*</span><span class="hl kwb">element</span><span class="hl opt">(</span>J<span class="hl opt">,</span> V<span class="hl opt">) ).</span>


<span class="hl slc">% multiply vector v by matrix A and then by matrix A transposed</span>
<span class="hl kwd">atav</span><span class="hl opt">(</span>N<span class="hl opt">,</span> V<span class="hl opt">) -&gt;</span> <span class="hl kwd">atv</span><span class="hl opt">(</span>N<span class="hl opt">,</span> <span class="hl kwd">av</span><span class="hl opt">(</span>N<span class="hl opt">,</span> V<span class="hl opt">)).</span>


<span class="hl slc">%Helper function for multicore</span>
<span class="hl kwd">pmap</span><span class="hl opt">(</span>N<span class="hl opt">,</span> F<span class="hl opt">) -&gt;</span>
    Chunks <span class="hl opt">=</span> <span class="hl kwd">chunks</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl kwc">erlang</span><span class="hl opt">:</span><span class="hl kwd">system_info</span><span class="hl opt">(</span>logical_processors<span class="hl opt">),</span> N<span class="hl opt">, []),</span>
    Pids <span class="hl opt">= [</span><span class="hl kwb">spawn</span><span class="hl opt">(</span><span class="hl kwa">fun</span><span class="hl opt">()-&gt;</span> <span class="hl kwd">F</span><span class="hl opt">(</span>Begin<span class="hl opt">,</span> End<span class="hl opt">)</span> <span class="hl kwa">end</span><span class="hl opt">)</span> || <span class="hl opt">{</span>Begin<span class="hl opt">,</span> End<span class="hl opt">} &lt;-</span> Chunks<span class="hl opt">],</span>
    Res <span class="hl opt">= [</span> <span class="hl kwa">receive</span> <span class="hl opt">{</span>Pid<span class="hl opt">,</span> X<span class="hl opt">} -&gt;</span> X <span class="hl kwa">end</span> || Pid <span class="hl opt">&lt;-</span> Pids<span class="hl opt">],</span>
    <span class="hl kwb">list_to_tuple</span><span class="hl opt">(</span><span class="hl kwc">lists</span><span class="hl opt">:</span><span class="hl kwd">flatten</span><span class="hl opt">(</span>Res<span class="hl opt">)).</span>

<span class="hl kwd">chunks</span><span class="hl opt">(</span>I<span class="hl opt">,</span> P<span class="hl opt">,</span> N<span class="hl opt">,</span> A<span class="hl opt">)</span> <span class="hl kwa">when</span> I <span class="hl opt">==</span> P<span class="hl opt">-</span><span class="hl num">1</span> <span class="hl opt">-&gt;</span> <span class="hl kwc">lists</span><span class="hl opt">:</span><span class="hl kwd">reverse</span><span class="hl opt">([{</span>I<span class="hl opt">*(</span>N div P<span class="hl opt">)+</span><span class="hl num">1</span><span class="hl opt">,</span> N<span class="hl opt">}</span> | A <span class="hl opt">]);</span>
<span class="hl kwd">chunks</span><span class="hl opt">(</span>I<span class="hl opt">,</span> P<span class="hl opt">,</span> N<span class="hl opt">,</span> A<span class="hl opt">) -&gt;</span> <span class="hl kwd">chunks</span><span class="hl opt">(</span>I<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">,</span> P<span class="hl opt">,</span> N<span class="hl opt">, [{</span> I<span class="hl opt">*(</span>N div P<span class="hl opt">)+</span><span class="hl num">1</span><span class="hl opt">, (</span>I<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)*(</span>N div P<span class="hl opt">)}</span> | A <span class="hl opt">]).</span>

