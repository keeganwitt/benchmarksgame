<span class="hl slc"># The Computer Language Benchmarks Game</span>
<span class="hl slc"># http://benchmarksgame.alioth.debian.org</span>
<span class="hl slc">#</span>
<span class="hl slc">#  contributed by Karl von Laudermann</span>
<span class="hl slc">#  modified by Jeremy Echols</span>
<span class="hl slc">#  modified by Detlef Reichl</span>
<span class="hl slc">#  modified by Joseph LaFata</span>
<span class="hl slc">#  modified by Peter Zotov</span>
<span class="hl slc">#  parallelised by Scott Leggett</span>

<span class="hl kwa">module</span> MiniParallel
    <span class="hl kwa">class</span> Worker
        <span class="hl kwa">def</span> <span class="hl kwd">initialize</span><span class="hl opt">(</span>read<span class="hl opt">,</span> write)
            <span class="hl kwb">&#64;read</span><span class="hl opt">,</span> <span class="hl kwb">&#64;write</span> <span class="hl opt">=</span> read<span class="hl opt">,</span> write
        <span class="hl kwa">end</span>

        <span class="hl kwa">def</span> close_pipes
            <span class="hl kwb">&#64;read</span><span class="hl opt">.</span>close
            <span class="hl kwb">&#64;write</span><span class="hl opt">.</span>close
        <span class="hl kwa">end</span>

        <span class="hl kwa">def</span> <span class="hl kwd">work</span><span class="hl opt">(</span>index)
            Marshal<span class="hl opt">.</span><span class="hl kwd">dump</span><span class="hl opt">(</span>index<span class="hl opt">,</span> <span class="hl kwb">&#64;write</span>)
            Marshal<span class="hl opt">.</span><span class="hl kwd">load</span><span class="hl opt">(</span><span class="hl kwb">&#64;read</span>)
        <span class="hl kwa">end</span>
    <span class="hl kwa">end</span>

    <span class="hl kwa">def self</span><span class="hl opt">.</span><span class="hl kwd">map</span><span class="hl opt">(</span>array<span class="hl opt">, &amp;</span>block)
        <span class="hl kwd">work_in_processes</span><span class="hl opt">(</span>
            array<span class="hl opt">,</span>
            <span class="hl opt">[</span>array<span class="hl opt">.</span>size<span class="hl opt">,</span> core_count<span class="hl opt">].</span>min<span class="hl opt">,</span>
            <span class="hl opt">&amp;</span>block
        )
    <span class="hl kwa">end</span>

    <span class="hl kwa">def self</span><span class="hl opt">.</span>core_count
        &#64;<span class="hl kwb">&#64;core_count</span> <span class="hl opt">||=</span> IO<span class="hl opt">.</span><span class="hl kwd">read</span><span class="hl opt">(</span><span class="hl str">&quot;/proc/cpuinfo&quot;</span>)<span class="hl opt">.</span><span class="hl kwd">scan</span><span class="hl opt">(</span><span class="hl kwc">/^processor/</span>)<span class="hl opt">.</span>size
    <span class="hl kwa">end</span>

    private

    <span class="hl kwa">def self</span><span class="hl opt">.</span><span class="hl kwd">work_in_processes</span><span class="hl opt">(</span>array<span class="hl opt">,</span> count<span class="hl opt">, &amp;</span>block)
        index <span class="hl opt">= -</span><span class="hl num">1</span>
        results<span class="hl opt">,</span> threads <span class="hl opt">= [], []</span>

        workers <span class="hl opt">=</span> <span class="hl kwd">create_workers</span><span class="hl opt">(</span>array<span class="hl opt">,</span> count<span class="hl opt">, &amp;</span>block)

        workers<span class="hl opt">.</span>each <span class="hl kwa">do</span> <span class="hl opt">|</span>worker<span class="hl opt">|</span>
            threads <span class="hl opt">&lt;&lt;</span> Thread<span class="hl opt">.</span>new <span class="hl kwa">do</span>
              <span class="hl kwa">loop do</span>
                Thread<span class="hl opt">.</span>exclusive<span class="hl esc">{ index += 1 }</span>
                <span class="hl kwa">break if</span> index <span class="hl opt">&gt;=</span> array<span class="hl opt">.</span>size
                results<span class="hl opt">[</span>index<span class="hl opt">] =</span> worker<span class="hl opt">.</span><span class="hl kwd">work</span><span class="hl opt">(</span>index)
              <span class="hl kwa">end</span>
              worker<span class="hl opt">.</span>close_pipes
            <span class="hl kwa">end</span>
        <span class="hl kwa">end</span>

        threads<span class="hl opt">.</span><span class="hl kwd">each</span><span class="hl opt">(&amp;</span><span class="hl kwc">:join</span>)
        Process<span class="hl opt">.</span>waitall

        results
    <span class="hl kwa">end</span>

    <span class="hl kwa">def self</span><span class="hl opt">.</span><span class="hl kwd">create_workers</span><span class="hl opt">(</span>array<span class="hl opt">,</span> count<span class="hl opt">, &amp;</span>block)
        workers <span class="hl opt">= []</span>
        count<span class="hl opt">.</span>times <span class="hl kwa">do</span>
            workers <span class="hl opt">&lt;&lt;</span> <span class="hl kwd">create_worker</span><span class="hl opt">(</span>array<span class="hl opt">,</span> workers<span class="hl opt">, &amp;</span>block)
        <span class="hl kwa">end</span>
        workers
    <span class="hl kwa">end</span>

    <span class="hl kwa">def self</span><span class="hl opt">.</span><span class="hl kwd">create_worker</span><span class="hl opt">(</span>array<span class="hl opt">,</span> started_workers<span class="hl opt">, &amp;</span>block)
        child_read<span class="hl opt">,</span> parent_write <span class="hl opt">=</span> IO<span class="hl opt">.</span>pipe
        parent_read<span class="hl opt">,</span> child_write <span class="hl opt">=</span> IO<span class="hl opt">.</span>pipe

        Process<span class="hl opt">.</span>fork <span class="hl kwa">do</span>
            started_workers<span class="hl opt">.</span><span class="hl kwd">each</span><span class="hl opt">(&amp;</span><span class="hl kwc">:close_pipes</span>)

            parent_write<span class="hl opt">.</span>close
            parent_read<span class="hl opt">.</span>close

            <span class="hl kwd">process_incoming_jobs</span><span class="hl opt">(</span>child_read<span class="hl opt">,</span> child_write<span class="hl opt">,</span> array<span class="hl opt">, &amp;</span>block)

            child_read<span class="hl opt">.</span>close
            child_write<span class="hl opt">.</span>close
        <span class="hl kwa">end</span>

        child_read<span class="hl opt">.</span>close
        child_write<span class="hl opt">.</span>close

        Worker<span class="hl opt">.</span><span class="hl kwd">new</span><span class="hl opt">(</span>parent_read<span class="hl opt">,</span> parent_write)
    <span class="hl kwa">end</span>

    <span class="hl kwa">def self</span><span class="hl opt">.</span><span class="hl kwd">process_incoming_jobs</span><span class="hl opt">(</span>read<span class="hl opt">,</span> write<span class="hl opt">,</span> array<span class="hl opt">, &amp;</span>block)
        <span class="hl kwa">until</span> read<span class="hl opt">.</span>eof<span class="hl opt">?</span>
            index <span class="hl opt">=</span> Marshal<span class="hl opt">.</span><span class="hl kwd">load</span><span class="hl opt">(</span>read)
            Marshal<span class="hl opt">.</span><span class="hl kwd">dump</span><span class="hl opt">(</span>block<span class="hl opt">.</span><span class="hl kwd">call</span><span class="hl opt">(</span>array<span class="hl opt">[</span>index<span class="hl opt">]</span>)<span class="hl opt">,</span> write)
        <span class="hl kwa">end</span>
    <span class="hl kwa">end</span>
<span class="hl kwa">end</span>

Size <span class="hl opt">=</span> <span class="hl kwc">ARGV</span><span class="hl opt">.</span>shift<span class="hl opt">.</span>to_i

puts <span class="hl str">&quot;P4\n</span><span class="hl esc">#{Size}</span> <span class="hl str"></span><span class="hl esc">#{Size}</span><span class="hl str">&quot;</span>

<span class="hl kwa">def</span> row y
    byte_acc <span class="hl opt">=</span> <span class="hl num">0</span>
    bit_num <span class="hl opt">=</span> <span class="hl num">0</span>
    res <span class="hl opt">= []</span>
    ci <span class="hl opt">= (</span><span class="hl num">2.0</span><span class="hl opt">*</span>y<span class="hl opt">/</span>Size)<span class="hl opt">-</span><span class="hl num">1.0</span>
    x <span class="hl opt">=</span> <span class="hl num">0</span>
    <span class="hl kwa">while</span> x <span class="hl opt">&lt;</span> Size
        zrzr <span class="hl opt">=</span> zr <span class="hl opt">=</span> <span class="hl num">0.0</span>
        zizi <span class="hl opt">=</span> zi <span class="hl opt">=</span> <span class="hl num">0.0</span>
        cr <span class="hl opt">= (</span><span class="hl num">2.0</span><span class="hl opt">*</span>x<span class="hl opt">/</span>Size)<span class="hl opt">-</span><span class="hl num">1.5</span>
        escape <span class="hl opt">=</span> <span class="hl num">0b1</span>

        z <span class="hl opt">=</span> <span class="hl num">0</span>
        <span class="hl kwa">while</span> z <span class="hl opt">&lt;</span> <span class="hl num">50</span>
            tr <span class="hl opt">=</span> zrzr <span class="hl opt">-</span> zizi <span class="hl opt">+</span> cr
            ti <span class="hl opt">=</span> <span class="hl num">2.0</span><span class="hl opt">*</span>zr<span class="hl opt">*</span>zi <span class="hl opt">+</span> ci
            zr <span class="hl opt">=</span> tr
            zi <span class="hl opt">=</span> ti
            <span class="hl slc"># preserve recalculation</span>
            zrzr <span class="hl opt">=</span> zr<span class="hl opt">*</span>zr
            zizi <span class="hl opt">=</span> zi<span class="hl opt">*</span>zi
            <span class="hl kwa">if</span> zrzr<span class="hl opt">+</span>zizi <span class="hl opt">&gt;</span> <span class="hl num">4.0</span>
                escape <span class="hl opt">=</span> <span class="hl num">0b0</span>
                <span class="hl kwa">break</span>
            <span class="hl kwa">end</span>
            z <span class="hl opt">+=</span> <span class="hl num">1</span>
        <span class="hl kwa">end</span>

        byte_acc <span class="hl opt">= (</span>byte_acc <span class="hl opt">&lt;&lt;</span> <span class="hl num">1</span>) <span class="hl opt">|</span> escape
        bit_num <span class="hl opt">+=</span> <span class="hl num">1</span>

        <span class="hl slc"># Code is very similar for these cases, but using separate blocks</span>
        <span class="hl slc"># ensures we skip the shifting when it's unnecessary, which is most</span>
        <span class="hl slc"># cases.</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>bit_num <span class="hl opt">==</span> <span class="hl num">8</span>)
            res <span class="hl opt">&lt;&lt;</span> byte_acc<span class="hl opt">.</span>chr
            byte_acc <span class="hl opt">=</span> <span class="hl num">0</span>
            bit_num <span class="hl opt">=</span> <span class="hl num">0</span>
        <span class="hl kwa">elsif</span> <span class="hl opt">(</span>x <span class="hl opt">==</span> Size <span class="hl opt">-</span> <span class="hl num">1</span>)
            byte_acc <span class="hl opt">&lt;&lt;= (</span><span class="hl num">8</span> <span class="hl opt">-</span> bit_num)
            res <span class="hl opt">&lt;&lt;</span> byte_acc<span class="hl opt">.</span>chr
            byte_acc <span class="hl opt">=</span> <span class="hl num">0</span>
            bit_num <span class="hl opt">=</span> <span class="hl num">0</span>
        <span class="hl kwa">end</span>
        x <span class="hl opt">+=</span> <span class="hl num">1</span>
    <span class="hl kwa">end</span>
    res<span class="hl opt">.</span>join
<span class="hl kwa">end</span>

<span class="hl kwa">if</span> MiniParallel<span class="hl opt">.</span>core_count <span class="hl opt">&gt;</span> <span class="hl num">1</span>
    <span class="hl kwa">if</span> <span class="hl kwc">RUBY_PLATFORM</span> <span class="hl opt">==</span> <span class="hl str">'java'</span>
        threads <span class="hl opt">= []</span>
        out <span class="hl opt">= []</span>
        <span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">...</span>Size)<span class="hl opt">.</span>each <span class="hl kwa">do</span> <span class="hl opt">|</span>w<span class="hl opt">|</span>
            threads <span class="hl opt">&lt;&lt;</span> Thread<span class="hl opt">.</span>new <span class="hl kwa">do</span>
                out<span class="hl opt">[</span>w<span class="hl opt">] =</span> row w
            <span class="hl kwa">end</span>
        <span class="hl kwa">end</span>
        threads<span class="hl opt">.</span>all<span class="hl opt">?(&amp;</span><span class="hl kwc">:join</span>)
        print out<span class="hl opt">.</span>join
    <span class="hl kwa">else</span>
        print MiniParallel<span class="hl opt">.</span><span class="hl kwd">map</span><span class="hl opt">((</span><span class="hl num">0</span><span class="hl opt">...</span>Size)<span class="hl opt">.</span>to_a)<span class="hl esc">{|y|row y}</span><span class="hl opt">.</span>join
    <span class="hl kwa">end</span>
<span class="hl kwa">else</span>
    <span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">...</span>Size)<span class="hl opt">.</span>each<span class="hl esc">{|i|print row i}</span>
<span class="hl kwa">end</span>
