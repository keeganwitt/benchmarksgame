<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by James Wendel</span>
<span class="hl com">*/</span>

<span class="hl kwa">import</span> <span class="hl str">'dart:io'</span><span class="hl opt">;</span>
<span class="hl kwa">import</span> <span class="hl str">'dart:typed_data'</span><span class="hl opt">;</span>

<span class="hl kwa">const</span> String ALU <span class="hl opt">=</span>
<span class="hl str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span>
<span class="hl str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span>
<span class="hl str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span>
<span class="hl str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span>
<span class="hl str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span>
<span class="hl str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span>
<span class="hl str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span><span class="hl opt">;</span>

final Frequency IUB <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Frequency</span><span class="hl opt">(</span>
    <span class="hl opt">[</span><span class="hl str">'a'</span><span class="hl opt">,</span>  <span class="hl str">'c'</span><span class="hl opt">,</span>  <span class="hl str">'g'</span><span class="hl opt">,</span>  <span class="hl str">'t'</span><span class="hl opt">,</span>
     <span class="hl str">'B'</span><span class="hl opt">,</span>  <span class="hl str">'D'</span><span class="hl opt">,</span>  <span class="hl str">'H'</span><span class="hl opt">,</span>  <span class="hl str">'K'</span><span class="hl opt">,</span>
     <span class="hl str">'M'</span><span class="hl opt">,</span>  <span class="hl str">'N'</span><span class="hl opt">,</span>  <span class="hl str">'R'</span><span class="hl opt">,</span>  <span class="hl str">'S'</span><span class="hl opt">,</span>
     <span class="hl str">'V'</span><span class="hl opt">,</span>  <span class="hl str">'W'</span><span class="hl opt">,</span>  <span class="hl str">'Y'</span><span class="hl opt">],</span>
     <span class="hl opt">[</span><span class="hl num">0.27</span><span class="hl opt">,</span> <span class="hl num">0.12</span><span class="hl opt">,</span> <span class="hl num">0.12</span><span class="hl opt">,</span> <span class="hl num">0.27</span><span class="hl opt">,</span>
      <span class="hl num">0.02</span><span class="hl opt">,</span> <span class="hl num">0.02</span><span class="hl opt">,</span> <span class="hl num">0.02</span><span class="hl opt">,</span> <span class="hl num">0.02</span><span class="hl opt">,</span>
      <span class="hl num">0.02</span><span class="hl opt">,</span> <span class="hl num">0.02</span><span class="hl opt">,</span> <span class="hl num">0.02</span><span class="hl opt">,</span> <span class="hl num">0.02</span><span class="hl opt">,</span>
      <span class="hl num">0.02</span><span class="hl opt">,</span> <span class="hl num">0.02</span><span class="hl opt">,</span> <span class="hl num">0.02</span><span class="hl opt">,]);</span>

final Frequency HOMO_SAPIENS <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Frequency</span><span class="hl opt">(</span>
    <span class="hl opt">[</span> <span class="hl str">'a'</span><span class="hl opt">,</span>
      <span class="hl str">'c'</span><span class="hl opt">,</span>
      <span class="hl str">'g'</span><span class="hl opt">,</span>
      <span class="hl str">'t'</span><span class="hl opt">],</span>
      <span class="hl opt">[</span> <span class="hl num">0.3029549426680</span><span class="hl opt">,</span>
        <span class="hl num">0.1979883004921</span><span class="hl opt">,</span>
        <span class="hl num">0.1975473066391</span><span class="hl opt">,</span>
        <span class="hl num">0.3015094502008</span><span class="hl opt">]);</span>

<span class="hl kwa">const</span> <span class="hl kwb">int</span> IM <span class="hl opt">=</span> <span class="hl num">139968</span><span class="hl opt">;</span>
<span class="hl kwa">const</span> <span class="hl kwb">int</span> IA <span class="hl opt">=</span> <span class="hl num">3877</span><span class="hl opt">;</span>
<span class="hl kwa">const</span> <span class="hl kwb">int</span> IC <span class="hl opt">=</span> <span class="hl num">29573</span><span class="hl opt">;</span>

<span class="hl kwa">const</span> <span class="hl kwb">int</span> LINE_LENGTH <span class="hl opt">=</span> <span class="hl num">60</span><span class="hl opt">;</span>
<span class="hl kwa">const</span> <span class="hl kwb">int</span> BUFFER_SIZE <span class="hl opt">= (</span>LINE_LENGTH <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">)*</span><span class="hl num">1024</span><span class="hl opt">;</span>

<span class="hl kwa">const</span> <span class="hl kwb">double</span> oneOverIM <span class="hl opt">= (</span><span class="hl num">1.0</span><span class="hl opt">/</span> IM<span class="hl opt">);</span>

<span class="hl kwa">class</span> Frequency <span class="hl opt">{</span>
  Uint8List chars<span class="hl opt">;</span>
  Float64List probs<span class="hl opt">;</span>
  <span class="hl kwb">int</span> last<span class="hl opt">;</span>

  <span class="hl kwb">double</span> <span class="hl kwd">random</span><span class="hl opt">(</span><span class="hl kwb">double</span> max<span class="hl opt">) {</span>
    last <span class="hl opt">= (</span>last <span class="hl opt">*</span> IA <span class="hl opt">+</span> IC<span class="hl opt">) %</span> IM<span class="hl opt">;</span>
    <span class="hl kwa">return</span> max <span class="hl opt">*</span> last <span class="hl opt">*</span> oneOverIM<span class="hl opt">;</span>
  <span class="hl opt">}</span>

  <span class="hl kwd">Frequency</span><span class="hl opt">(</span>List<span class="hl opt">&lt;</span>String<span class="hl opt">&gt;</span> charList<span class="hl opt">,</span> List<span class="hl opt">&lt;</span><span class="hl kwb">double</span><span class="hl opt">&gt;</span> probList<span class="hl opt">) {</span>
    chars <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Uint8List</span><span class="hl opt">(</span>charList<span class="hl opt">.</span>length<span class="hl opt">);</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> chars<span class="hl opt">.</span>length<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
      chars<span class="hl kwc">[i]</span> <span class="hl opt">=</span> charList<span class="hl kwc">[i]</span><span class="hl opt">.</span><span class="hl kwd">codeUnitAt</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>

    probs <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Float64List</span><span class="hl opt">(</span>probList<span class="hl opt">.</span>length<span class="hl opt">);</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> probList<span class="hl opt">.</span>length<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
      probs<span class="hl kwc">[i]</span> <span class="hl opt">=</span> probList<span class="hl kwc">[i]</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl kwd">makeCumulative</span><span class="hl opt">();</span>
  <span class="hl opt">}</span>

  <span class="hl kwa">void</span> <span class="hl kwd">makeCumulative</span><span class="hl opt">() {</span>
    <span class="hl kwb">double</span> cp <span class="hl opt">=</span> <span class="hl num">0.0</span><span class="hl opt">;</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> probs<span class="hl opt">.</span>length<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
      cp <span class="hl opt">+=</span> probs<span class="hl kwc">[i]</span><span class="hl opt">;</span>
      probs<span class="hl kwc">[i]</span> <span class="hl opt">=</span> cp<span class="hl opt">;</span>
    <span class="hl opt">}</span>
  <span class="hl opt">}</span>

  <span class="hl kwb">int</span> <span class="hl kwd">selectRandomIntoBuffer</span><span class="hl opt">(</span>Uint8List buffer<span class="hl opt">,</span> <span class="hl kwb">int</span> bufferIndex<span class="hl opt">,</span> <span class="hl kwb">int</span> nRandom<span class="hl opt">) {</span>
    final <span class="hl kwb">int</span> len <span class="hl opt">=</span> probs<span class="hl opt">.</span>length<span class="hl opt">;</span>

    outer<span class="hl opt">:</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> rIndex <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> rIndex <span class="hl opt">&lt;</span> nRandom<span class="hl opt">;</span> rIndex<span class="hl opt">++) {</span>
      <span class="hl kwb">double</span> r <span class="hl opt">=</span> <span class="hl kwd">random</span><span class="hl opt">(</span><span class="hl num">1.0</span><span class="hl opt">);</span>
      <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> len<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>r <span class="hl opt">&lt;</span> probs<span class="hl kwc">[i]</span><span class="hl opt">) {</span>
          buffer<span class="hl opt">[</span>bufferIndex<span class="hl opt">++] =</span> chars<span class="hl kwc">[i]</span><span class="hl opt">;</span>
          <span class="hl kwa">continue</span> outer<span class="hl opt">;</span>
        <span class="hl opt">}</span>
      <span class="hl opt">}</span>

      buffer<span class="hl opt">[</span>bufferIndex<span class="hl opt">++] =</span> chars<span class="hl opt">[</span>len<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">];</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">return</span> bufferIndex<span class="hl opt">;</span>
  <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl kwd">makeRepeatFasta</span><span class="hl opt">(</span>String id<span class="hl opt">,</span> String desc<span class="hl opt">,</span> String alu<span class="hl opt">,</span> <span class="hl kwb">int</span> _nChars<span class="hl opt">,</span> IOSink writer<span class="hl opt">) {</span>
  writer<span class="hl opt">.</span><span class="hl kwd">write</span><span class="hl opt">(</span><span class="hl str">&quot;&gt;${id} ${desc}</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">);</span>

  <span class="hl kwb">int</span> aluIndex <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
  final List<span class="hl opt">&lt;</span><span class="hl kwb">int</span><span class="hl opt">&gt;</span> aluCode <span class="hl opt">=</span> alu<span class="hl opt">.</span>codeUnits<span class="hl opt">;</span>
  final <span class="hl kwb">int</span> aluLength <span class="hl opt">=</span> aluCode<span class="hl opt">.</span>length<span class="hl opt">;</span>

  Uint8List buffer <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Uint8List</span><span class="hl opt">(</span>BUFFER_SIZE<span class="hl opt">);</span>

  <span class="hl kwb">int</span> bufferIndex <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
  <span class="hl kwb">int</span> nChars <span class="hl opt">=</span> _nChars<span class="hl opt">;</span>
  <span class="hl kwa">while</span> <span class="hl opt">(</span>nChars <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">) {</span>
    final <span class="hl kwb">int</span> chunkSize <span class="hl opt">=</span> nChars <span class="hl opt">&gt;=</span> LINE_LENGTH ? LINE_LENGTH <span class="hl opt">:</span> nChars<span class="hl opt">;</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span>bufferIndex <span class="hl opt">==</span> BUFFER_SIZE<span class="hl opt">) {</span>
      writer<span class="hl opt">.</span><span class="hl kwd">add</span><span class="hl opt">(</span><span class="hl kwa">new</span> Uint8List<span class="hl opt">.</span><span class="hl kwd">view</span><span class="hl opt">(</span>buffer<span class="hl opt">.</span>buffer<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> bufferIndex<span class="hl opt">));</span>
      buffer <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Uint8List</span><span class="hl opt">(</span>BUFFER_SIZE<span class="hl opt">);</span>
      bufferIndex <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span>aluIndex <span class="hl opt">+</span> chunkSize <span class="hl opt">&lt;</span> aluLength<span class="hl opt">) {</span>
      buffer<span class="hl opt">.</span><span class="hl kwd">setRange</span><span class="hl opt">(</span>bufferIndex<span class="hl opt">,</span> bufferIndex<span class="hl opt">+</span>chunkSize<span class="hl opt">,</span> aluCode<span class="hl opt">,</span> aluIndex<span class="hl opt">);</span>
      bufferIndex <span class="hl opt">+=</span> chunkSize<span class="hl opt">;</span>
      aluIndex <span class="hl opt">+=</span> chunkSize<span class="hl opt">;</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
      <span class="hl kwb">int</span> len <span class="hl opt">=</span> aluLength <span class="hl opt">-</span> aluIndex<span class="hl opt">;</span>
      buffer<span class="hl opt">.</span><span class="hl kwd">setRange</span><span class="hl opt">(</span>bufferIndex<span class="hl opt">,</span> bufferIndex<span class="hl opt">+</span>len<span class="hl opt">,</span> aluCode<span class="hl opt">,</span> aluIndex<span class="hl opt">);</span>
      bufferIndex <span class="hl opt">+=</span> len<span class="hl opt">;</span>
      aluIndex <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
      len <span class="hl opt">=</span> chunkSize <span class="hl opt">-</span> len<span class="hl opt">;</span>
      buffer<span class="hl opt">.</span><span class="hl kwd">setRange</span><span class="hl opt">(</span>bufferIndex<span class="hl opt">,</span> bufferIndex<span class="hl opt">+</span>len<span class="hl opt">,</span> aluCode<span class="hl opt">,</span> aluIndex<span class="hl opt">);</span>
      bufferIndex <span class="hl opt">+=</span> len<span class="hl opt">;</span>
      aluIndex <span class="hl opt">+=</span> len<span class="hl opt">;</span>
    <span class="hl opt">}</span>

    buffer<span class="hl opt">[</span>bufferIndex<span class="hl opt">++] =</span> <span class="hl num">10</span><span class="hl opt">;</span>

    nChars <span class="hl opt">-=</span> chunkSize<span class="hl opt">;</span>
  <span class="hl opt">}</span>

  writer<span class="hl opt">.</span><span class="hl kwd">add</span><span class="hl opt">(</span><span class="hl kwa">new</span> Uint8List<span class="hl opt">.</span><span class="hl kwd">view</span><span class="hl opt">(</span>buffer<span class="hl opt">.</span>buffer<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> bufferIndex<span class="hl opt">));</span>
<span class="hl opt">}</span>



<span class="hl kwa">void</span> <span class="hl kwd">makeRandomFasta</span><span class="hl opt">(</span>String id<span class="hl opt">,</span> String desc<span class="hl opt">,</span> Frequency fpf<span class="hl opt">,</span> <span class="hl kwb">int</span> nChars<span class="hl opt">,</span> IOSink writer<span class="hl opt">) {</span>
  writer<span class="hl opt">.</span><span class="hl kwd">write</span><span class="hl opt">(</span><span class="hl str">&quot;&gt;${id} ${desc}</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">);</span>

  Uint8List buffer <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Uint8List</span><span class="hl opt">(</span>BUFFER_SIZE<span class="hl opt">);</span>

  <span class="hl kwb">int</span> bufferIndex <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
  <span class="hl kwa">while</span> <span class="hl opt">(</span>nChars <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">) {</span>
    final <span class="hl kwb">int</span> chunkSize <span class="hl opt">=</span> nChars <span class="hl opt">&gt;=</span> LINE_LENGTH ? LINE_LENGTH <span class="hl opt">:</span> nChars<span class="hl opt">;</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span>bufferIndex <span class="hl opt">==</span> BUFFER_SIZE<span class="hl opt">) {</span>
      writer<span class="hl opt">.</span><span class="hl kwd">add</span><span class="hl opt">(</span><span class="hl kwa">new</span> Uint8List<span class="hl opt">.</span><span class="hl kwd">view</span><span class="hl opt">(</span>buffer<span class="hl opt">.</span>buffer<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> bufferIndex<span class="hl opt">));</span>
      buffer <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Uint8List</span><span class="hl opt">(</span>BUFFER_SIZE<span class="hl opt">);</span>
      bufferIndex <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>

    bufferIndex <span class="hl opt">=</span> fpf<span class="hl opt">.</span><span class="hl kwd">selectRandomIntoBuffer</span><span class="hl opt">(</span>buffer<span class="hl opt">,</span> bufferIndex<span class="hl opt">,</span> chunkSize<span class="hl opt">);</span>
    buffer<span class="hl opt">[</span>bufferIndex<span class="hl opt">++] =</span> <span class="hl num">10</span><span class="hl opt">;</span>

    nChars <span class="hl opt">-=</span> chunkSize<span class="hl opt">;</span>
  <span class="hl opt">}</span>

  writer<span class="hl opt">.</span><span class="hl kwd">add</span><span class="hl opt">(</span><span class="hl kwa">new</span> Uint8List<span class="hl opt">.</span><span class="hl kwd">view</span><span class="hl opt">(</span>buffer<span class="hl opt">.</span>buffer<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> bufferIndex<span class="hl opt">));</span>
<span class="hl opt">}</span>


<span class="hl kwd">main</span><span class="hl opt">(</span>args<span class="hl opt">) {</span>
  IOSink writer <span class="hl opt">=</span> stdout<span class="hl opt">;</span>

  <span class="hl kwb">int</span> n <span class="hl opt">=</span> args<span class="hl opt">.</span>length <span class="hl opt">&gt;</span> <span class="hl num">0</span> ? <span class="hl kwb">int</span><span class="hl opt">.</span><span class="hl kwd">parse</span><span class="hl opt">(</span>args<span class="hl kwc">[0]</span><span class="hl opt">) :</span> <span class="hl num">250</span><span class="hl opt">;</span>

  <span class="hl kwd">makeRepeatFasta</span><span class="hl opt">(</span><span class="hl str">&quot;ONE&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;Homo sapiens alu&quot;</span><span class="hl opt">,</span> ALU<span class="hl opt">,</span> n <span class="hl opt">*</span> <span class="hl num">2</span><span class="hl opt">,</span> writer<span class="hl opt">);</span>
  IUB<span class="hl opt">.</span>last <span class="hl opt">=</span> <span class="hl num">42</span><span class="hl opt">;</span>
  <span class="hl kwd">makeRandomFasta</span><span class="hl opt">(</span><span class="hl str">&quot;TWO&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;IUB ambiguity codes&quot;</span><span class="hl opt">,</span> IUB<span class="hl opt">,</span> n <span class="hl opt">*</span> <span class="hl num">3</span><span class="hl opt">,</span> writer<span class="hl opt">);</span>
  HOMO_SAPIENS<span class="hl opt">.</span>last <span class="hl opt">=</span> IUB<span class="hl opt">.</span>last<span class="hl opt">;</span>
  <span class="hl kwd">makeRandomFasta</span><span class="hl opt">(</span><span class="hl str">&quot;THREE&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;Homo sapiens frequency&quot;</span><span class="hl opt">,</span> HOMO_SAPIENS<span class="hl opt">,</span> n <span class="hl opt">*</span> <span class="hl num">5</span><span class="hl opt">,</span> writer<span class="hl opt">);</span>
<span class="hl opt">}</span>
