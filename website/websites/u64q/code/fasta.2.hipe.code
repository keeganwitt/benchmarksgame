<span class="hl slc">% The Computer Language Benchmarks Game</span>
<span class="hl slc">% http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">% contributed by Fredrik Svahn</span>

<span class="hl opt">-</span><span class="hl kwd">module</span><span class="hl opt">(</span>fasta<span class="hl opt">).</span>
<span class="hl opt">-</span><span class="hl kwd">export</span><span class="hl opt">([</span>main<span class="hl opt">/</span><span class="hl num">1</span><span class="hl opt">]).</span>

<span class="hl opt">-</span><span class="hl kwd">define</span><span class="hl opt">(</span>LINELEN<span class="hl opt">,</span> <span class="hl num">60</span><span class="hl opt">).</span>
<span class="hl opt">-</span><span class="hl kwd">define</span><span class="hl opt">(</span>PREC<span class="hl opt">,</span><span class="hl num">10000000</span><span class="hl opt">).</span>

<span class="hl opt">-</span><span class="hl kwd">define</span><span class="hl opt">(</span>IM<span class="hl opt">,</span> <span class="hl num">139968</span><span class="hl opt">).</span>
<span class="hl opt">-</span><span class="hl kwd">define</span><span class="hl opt">(</span>IC<span class="hl opt">,</span> <span class="hl num">29573</span><span class="hl opt">).</span>
<span class="hl opt">-</span><span class="hl kwd">define</span><span class="hl opt">(</span>IA<span class="hl opt">,</span> <span class="hl num">3877</span><span class="hl opt">).</span>

<span class="hl opt">-</span><span class="hl kwd">define</span><span class="hl opt">(</span>ALU<span class="hl opt">,&lt;&lt;</span><span class="hl str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGGGAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGACCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAATACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCAGCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGGAGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCCAGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span><span class="hl opt">&gt;&gt;).</span>

<span class="hl opt">-</span><span class="hl kwd">define</span><span class="hl opt">(</span>IUB<span class="hl opt">, [{</span>$a<span class="hl opt">,</span> <span class="hl num">0.27</span><span class="hl opt">}, {</span>$c<span class="hl opt">,</span> <span class="hl num">0.12</span><span class="hl opt">}, {</span>$g<span class="hl opt">,</span> <span class="hl num">0.12</span><span class="hl opt">}, {</span>$t<span class="hl opt">,</span> <span class="hl num">0.27</span><span class="hl opt">}, {</span>$B<span class="hl opt">,</span> <span class="hl num">0.02</span><span class="hl opt">}, {</span>$D<span class="hl opt">,</span> <span class="hl num">0.02</span><span class="hl opt">}, {</span>$H<span class="hl opt">,</span> <span class="hl num">0.02</span><span class="hl opt">}, {</span>$K<span class="hl opt">,</span> <span class="hl num">0.02</span><span class="hl opt">}, {</span>$M<span class="hl opt">,</span> <span class="hl num">0.02</span><span class="hl opt">}, {</span>$N<span class="hl opt">,</span> <span class="hl num">0.02</span><span class="hl opt">}, {</span>$R<span class="hl opt">,</span> <span class="hl num">0.02</span><span class="hl opt">}, {</span>$S<span class="hl opt">,</span> <span class="hl num">0.02</span><span class="hl opt">}, {</span>$V<span class="hl opt">,</span> <span class="hl num">0.02</span><span class="hl opt">}, {</span>$W<span class="hl opt">,</span> <span class="hl num">0.02</span><span class="hl opt">}, {</span>$Y<span class="hl opt">,</span> <span class="hl num">0.02</span><span class="hl opt">}]).</span>

<span class="hl opt">-</span><span class="hl kwd">define</span><span class="hl opt">(</span>HS<span class="hl opt">, [{</span>$a<span class="hl opt">,</span> <span class="hl num">0.3029549426680</span><span class="hl opt">}, {</span>$c<span class="hl opt">,</span> <span class="hl num">0.1979883004921</span><span class="hl opt">}, {</span>$g<span class="hl opt">,</span> <span class="hl num">0.1975473066391</span><span class="hl opt">}, {</span>$t<span class="hl opt">,</span> <span class="hl num">0.3015094502008</span><span class="hl opt">}]).</span>

<span class="hl kwd">main</span><span class="hl opt">([</span>Arg<span class="hl opt">]) -&gt;</span>
    <span class="hl kwb">put</span><span class="hl opt">(</span>port<span class="hl opt">,</span> <span class="hl kwb">open_port</span><span class="hl opt">({</span>fd<span class="hl opt">,</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">1</span><span class="hl opt">}, [</span>out<span class="hl opt">,</span> <span class="hl kwb">binary</span><span class="hl opt">])),</span>

    Seed <span class="hl opt">=</span> <span class="hl num">42</span><span class="hl opt">,</span>
    N <span class="hl opt">=</span> <span class="hl kwb">list_to_integer</span><span class="hl opt">(</span>Arg<span class="hl opt">),</span>

    <span class="hl kwd">print</span><span class="hl opt">(&lt;&lt;</span><span class="hl str">&quot;&gt;ONE Homo sapiens alu</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">&gt;&gt;),</span>
    <span class="hl kwd">cycle</span><span class="hl opt">(</span>?ALU<span class="hl opt">,</span> N<span class="hl opt">*</span><span class="hl num">2</span><span class="hl opt">, [],</span> <span class="hl num">0</span><span class="hl opt">),</span>

    <span class="hl kwd">print</span><span class="hl opt">(&lt;&lt;</span><span class="hl str">&quot;&gt;TWO IUB ambiguity codes</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">&gt;&gt;),</span>
    NewSeed <span class="hl opt">=</span> <span class="hl kwd">rand</span><span class="hl opt">(</span><span class="hl kwd">mk_list</span><span class="hl opt">(</span>?IUB<span class="hl opt">),</span> ?LINELEN<span class="hl opt">,</span> N<span class="hl opt">*</span><span class="hl num">3</span><span class="hl opt">, [],</span> Seed<span class="hl opt">, [],</span> <span class="hl num">0</span><span class="hl opt">),</span>

    <span class="hl kwd">print</span><span class="hl opt">(&lt;&lt;</span><span class="hl str">&quot;&gt;THREE Homo sapiens frequency</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">&gt;&gt;),</span>
    <span class="hl kwd">rand</span><span class="hl opt">(</span><span class="hl kwd">mk_list</span><span class="hl opt">(</span>?HS<span class="hl opt">),</span> ?LINELEN<span class="hl opt">,</span> N<span class="hl opt">*</span><span class="hl num">5</span><span class="hl opt">, [],</span> NewSeed<span class="hl opt">, [],</span><span class="hl num">0</span><span class="hl opt">),</span>
    <span class="hl kwb">halt</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">).</span>

<span class="hl slc">%Newline every LINELEN char, however io is expensive so we want to buffer</span>
<span class="hl slc">%up a few lines before printing. 16 lines in buffer seem to be fastest.</span>
<span class="hl kwd">cycle</span><span class="hl opt">(</span>Seq<span class="hl opt">,</span> Total<span class="hl opt">,</span> RowBuf<span class="hl opt">,</span> _<span class="hl opt">)</span> <span class="hl kwa">when</span> Total <span class="hl opt">&lt;</span> ?LINELEN <span class="hl opt">-&gt;</span>
    <span class="hl opt">&lt;&lt;</span><span class="hl kwc">Seq1</span><span class="hl opt">:</span>Total<span class="hl opt">/</span><span class="hl kwb">binary</span><span class="hl opt">,</span> _<span class="hl opt">/</span><span class="hl kwb">binary</span><span class="hl opt">&gt;&gt; = &lt;&lt;</span>Seq<span class="hl opt">/</span><span class="hl kwb">binary</span><span class="hl opt">,</span> ?ALU<span class="hl opt">/</span><span class="hl kwb">binary</span><span class="hl opt">&gt;&gt;,</span>
    <span class="hl kwd">reverse_print</span><span class="hl opt">(</span>RowBuf<span class="hl opt">),</span> 
    <span class="hl kwd">print</span><span class="hl opt">(&lt;&lt;</span>Seq1<span class="hl opt">/</span><span class="hl kwb">binary</span><span class="hl opt">,</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">&gt;&gt;);</span>

<span class="hl kwd">cycle</span><span class="hl opt">(</span>Seq<span class="hl opt">,</span> Total<span class="hl opt">,</span> RowBuf<span class="hl opt">,</span> RowBufSize<span class="hl opt">)</span> <span class="hl kwa">when</span> RowBufSize <span class="hl opt">==</span> <span class="hl num">16</span> <span class="hl opt">-&gt;</span> 
    <span class="hl kwd">reverse_print</span><span class="hl opt">(</span>RowBuf<span class="hl opt">),</span> 
    <span class="hl kwd">cycle</span><span class="hl opt">(</span>Seq<span class="hl opt">,</span> Total<span class="hl opt">, [],</span> <span class="hl num">0</span><span class="hl opt">);</span>

<span class="hl kwd">cycle</span><span class="hl opt">(</span>Seq<span class="hl opt">,</span> Total<span class="hl opt">,</span> RowBuf<span class="hl opt">,</span> RowBufSize <span class="hl opt">)</span> <span class="hl kwa">when</span> <span class="hl kwb">size</span><span class="hl opt">(</span>Seq<span class="hl opt">) &lt;</span> ?LINELEN <span class="hl opt">-&gt;</span>
    <span class="hl opt">&lt;&lt;</span><span class="hl kwc">Seq1</span><span class="hl opt">:</span>?LINELEN<span class="hl opt">/</span><span class="hl kwb">binary</span><span class="hl opt">,</span> Seq2<span class="hl opt">/</span><span class="hl kwb">binary</span><span class="hl opt">&gt;&gt; = &lt;&lt;</span>Seq<span class="hl opt">/</span><span class="hl kwb">binary</span><span class="hl opt">,</span> ?ALU<span class="hl opt">/</span><span class="hl kwb">binary</span><span class="hl opt">&gt;&gt;,</span>
    <span class="hl kwd">cycle</span><span class="hl opt">(</span>Seq2<span class="hl opt">,</span> Total<span class="hl opt">-</span>?LINELEN<span class="hl opt">, [&lt;&lt;</span>Seq1<span class="hl opt">/</span><span class="hl kwb">binary</span><span class="hl opt">,</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">&gt;&gt;</span>| RowBuf<span class="hl opt">],</span> RowBufSize<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">);</span>

<span class="hl kwd">cycle</span><span class="hl opt">(</span>Seq<span class="hl opt">,</span> Total<span class="hl opt">,</span> RowBuf<span class="hl opt">,</span> RowBufSize<span class="hl opt">) -&gt;</span> 
    <span class="hl opt">&lt;&lt;</span><span class="hl kwc">Seq1</span><span class="hl opt">:</span>?LINELEN<span class="hl opt">/</span><span class="hl kwb">binary</span><span class="hl opt">,</span> Seq2<span class="hl opt">/</span><span class="hl kwb">binary</span><span class="hl opt">&gt;&gt; =</span> Seq<span class="hl opt">,</span>
    <span class="hl kwd">cycle</span><span class="hl opt">(</span>Seq2<span class="hl opt">,</span> Total<span class="hl opt">-</span>?LINELEN<span class="hl opt">, [&lt;&lt;</span>Seq1<span class="hl opt">/</span><span class="hl kwb">binary</span><span class="hl opt">,</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">&gt;&gt;</span>| RowBuf<span class="hl opt">],</span> RowBufSize<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">).</span>

<span class="hl kwd">rand</span><span class="hl opt">(</span>_<span class="hl opt">,</span> _<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> List<span class="hl opt">,</span> Seed<span class="hl opt">,</span> RowBuf<span class="hl opt">,</span> _<span class="hl opt">) -&gt;</span>
    LastLine <span class="hl opt">=</span> <span class="hl kwc">lists</span><span class="hl opt">:</span><span class="hl kwd">reverse</span><span class="hl opt">([</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> | List<span class="hl opt">]),</span>
    <span class="hl kwd">reverse_print</span><span class="hl opt">([</span>LastLine | RowBuf<span class="hl opt">]),</span> 
    Seed<span class="hl opt">;</span>

<span class="hl kwd">rand</span><span class="hl opt">(</span>Freq<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> Total<span class="hl opt">,</span> List<span class="hl opt">,</span> Seed<span class="hl opt">,</span> RowBuf<span class="hl opt">,</span> RowBufSize<span class="hl opt">)</span> <span class="hl kwa">when</span> RowBufSize <span class="hl opt">==</span> <span class="hl num">16</span> <span class="hl opt">-&gt;</span>
    Line <span class="hl opt">=</span> <span class="hl kwc">lists</span><span class="hl opt">:</span><span class="hl kwd">reverse</span><span class="hl opt">([</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> | List<span class="hl opt">]),</span>
    <span class="hl kwd">reverse_print</span><span class="hl opt">([</span>Line | RowBuf<span class="hl opt">]),</span> 
    <span class="hl kwd">rand</span><span class="hl opt">(</span>Freq<span class="hl opt">,</span> ?LINELEN<span class="hl opt">,</span> Total<span class="hl opt">, [],</span> Seed<span class="hl opt">, [],</span> <span class="hl num">0</span><span class="hl opt">);</span>

<span class="hl kwd">rand</span><span class="hl opt">(</span>Freq<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> Total<span class="hl opt">,</span> List<span class="hl opt">,</span> Seed<span class="hl opt">,</span> RowBuf<span class="hl opt">,</span> RowBufSize<span class="hl opt">) -&gt;</span>
    Line <span class="hl opt">=</span> <span class="hl kwc">lists</span><span class="hl opt">:</span><span class="hl kwd">reverse</span><span class="hl opt">([</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> | List<span class="hl opt">]),</span>
    <span class="hl kwd">rand</span><span class="hl opt">(</span>Freq<span class="hl opt">,</span> ?LINELEN<span class="hl opt">,</span> Total<span class="hl opt">, [],</span> Seed<span class="hl opt">, [</span> Line | RowBuf<span class="hl opt">],</span> RowBufSize <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">);</span>

<span class="hl kwd">rand</span><span class="hl opt">(</span>Freq<span class="hl opt">,</span> LineLen<span class="hl opt">,</span> Total<span class="hl opt">,</span> List<span class="hl opt">,</span> Seed<span class="hl opt">,</span> RowBuf<span class="hl opt">,</span> RowBufSize<span class="hl opt">) -&gt;</span>
    <span class="hl opt">{</span>Rand<span class="hl opt">,</span> NewSeed<span class="hl opt">} =</span> <span class="hl kwd">random</span><span class="hl opt">(</span>Seed<span class="hl opt">),</span>
    Base <span class="hl opt">=</span> <span class="hl kwd">get_base</span><span class="hl opt">(</span>Freq<span class="hl opt">,</span> Rand<span class="hl opt">),</span>
    <span class="hl kwd">rand</span><span class="hl opt">(</span>Freq<span class="hl opt">,</span> LineLen<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">,</span> Total<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">, [</span>Base | List<span class="hl opt">],</span> NewSeed<span class="hl opt">,</span> RowBuf<span class="hl opt">,</span> RowBufSize<span class="hl opt">).</span>

<span class="hl kwd">random</span><span class="hl opt">(</span>Seed<span class="hl opt">) -&gt;</span>
    NewSeed <span class="hl opt">= (</span>Seed <span class="hl opt">*</span> ?IA <span class="hl opt">+</span> ?IC<span class="hl opt">)</span> rem ?IM<span class="hl opt">,</span>
    <span class="hl opt">{</span><span class="hl kwb">trunc</span><span class="hl opt">(</span>NewSeed <span class="hl opt">/</span> ?IM <span class="hl opt">*</span> ?PREC<span class="hl opt">),</span> NewSeed<span class="hl opt">}.</span>

<span class="hl kwd">get_base</span><span class="hl opt">([{</span>Base<span class="hl opt">,</span> _<span class="hl opt">}],</span> _P<span class="hl opt">) -&gt;</span> Base<span class="hl opt">;</span>
<span class="hl kwd">get_base</span><span class="hl opt">([{</span>Base<span class="hl opt">,</span> Freq<span class="hl opt">}</span>|_<span class="hl opt">],</span> P<span class="hl opt">)</span> <span class="hl kwa">when</span> P <span class="hl opt">&lt;</span> Freq <span class="hl opt">-&gt;</span> Base<span class="hl opt">;</span>
<span class="hl kwd">get_base</span><span class="hl opt">([{</span>_<span class="hl opt">,</span> _<span class="hl opt">}</span> | Rest<span class="hl opt">],</span> P<span class="hl opt">) -&gt;</span> <span class="hl kwd">get_base</span><span class="hl opt">(</span>Rest<span class="hl opt">,</span> P<span class="hl opt">).</span>

<span class="hl slc">%Floats are expensive and we want to avoid dealing with floats in get_base/1.</span>
<span class="hl slc">%Precalculate list of accumulated integers </span>
<span class="hl kwd">mk_list</span><span class="hl opt">(</span>Probs<span class="hl opt">)-&gt;</span> <span class="hl kwc">lists</span><span class="hl opt">:</span><span class="hl kwd">reverse</span><span class="hl opt">(</span><span class="hl kwd">mk_list</span><span class="hl opt">(</span>Probs<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">, [])).</span>
<span class="hl kwd">mk_list</span><span class="hl opt">([{</span>B<span class="hl opt">,</span> P<span class="hl opt">}],</span> AccP<span class="hl opt">,</span> AccL<span class="hl opt">)-&gt; [{</span>B<span class="hl opt">,</span> AccP <span class="hl opt">+</span> <span class="hl kwb">trunc</span><span class="hl opt">(</span>P<span class="hl opt">*</span>?PREC<span class="hl opt">)}</span>| AccL<span class="hl opt">];</span>
<span class="hl kwd">mk_list</span><span class="hl opt">([{</span>B<span class="hl opt">,</span> P<span class="hl opt">}</span>|T<span class="hl opt">],</span> AccP<span class="hl opt">,</span> AccL<span class="hl opt">)-&gt;</span> 
    <span class="hl kwd">mk_list</span><span class="hl opt">(</span>T<span class="hl opt">,</span> AccP <span class="hl opt">+</span> <span class="hl kwb">trunc</span><span class="hl opt">(</span>P<span class="hl opt">*</span>?PREC<span class="hl opt">), [{</span>B<span class="hl opt">,</span> AccP <span class="hl opt">+</span> <span class="hl kwb">trunc</span><span class="hl opt">(</span>P<span class="hl opt">*</span>?PREC<span class="hl opt">)}</span>| AccL<span class="hl opt">]).</span>

<span class="hl kwd">print</span><span class="hl opt">(</span>List<span class="hl opt">) -&gt;</span> <span class="hl kwd">port_command</span><span class="hl opt">(</span><span class="hl kwb">get</span><span class="hl opt">(</span>port<span class="hl opt">),</span> List<span class="hl opt">).</span>
<span class="hl kwd">reverse_print</span><span class="hl opt">(</span>List<span class="hl opt">) -&gt;</span> <span class="hl kwd">port_command</span><span class="hl opt">(</span><span class="hl kwb">get</span><span class="hl opt">(</span>port<span class="hl opt">),</span> <span class="hl kwc">lists</span><span class="hl opt">:</span><span class="hl kwd">reverse</span><span class="hl opt">(</span>List<span class="hl opt">)).</span>
