<span class="hl com">(*</span>
<span class="hl com">** The Computer Language Benchmarks Game</span>
<span class="hl com">** http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com">**</span>
<span class="hl com">** contributed by Hongwei Xi </span>
<span class="hl com">**</span>
<span class="hl com">** compilation command:</span>
<span class="hl com">**   atscc -fomit-frame-pointer -O3 fannkuch-redux.dats -o fannkuch-redux</span>
<span class="hl com">*)</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">staload</span> _<span class="hl com">(*anonymous*)</span> <span class="hl opt">=</span> <span class="hl str">&quot;prelude/DATS/array.dats&quot;</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">macdef</span> iarr <span class="hl opt">(</span>n<span class="hl opt">) =</span> array_make_elt <span class="hl opt">(,(</span>n<span class="hl opt">)+</span><span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">)</span>
<span class="hl kwa">typedef</span> iarr <span class="hl opt">(</span>n<span class="hl opt">:</span><span class="hl kwb">int</span><span class="hl opt">) =</span> array <span class="hl opt">(</span>natLte n<span class="hl opt">,</span> n<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl opt">%{^</span>
<span class="hl slc">// HX: it is really difficult to beat [memcpy] :)</span>
<span class="hl kwa">static inline</span>
ats_void_type iarr_copy
  <span class="hl opt">(</span>ats_ptr_type src<span class="hl opt">,</span> ats_ptr_type dst<span class="hl opt">,</span> ats_int_type n<span class="hl opt">) {</span>
  memcpy <span class="hl opt">((</span><span class="hl kwb">int</span>*)dst<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">, (</span><span class="hl kwb">int</span>*)src<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">,</span>  n <span class="hl opt">*</span> sizeof<span class="hl opt">(</span>ats_int_type<span class="hl opt">)) ;</span>
  <span class="hl kwa">return</span> <span class="hl opt">;</span>
<span class="hl opt">}</span> <span class="hl slc">// end of iarr_copy</span>
<span class="hl opt">%}</span> <span class="hl slc">// end of [%{^]</span>
<span class="hl kwa">extern fun</span> iarr_copy <span class="hl opt">{</span>n<span class="hl opt">:</span>nat<span class="hl opt">}</span>
  <span class="hl opt">(</span>src<span class="hl opt">:</span> iarr n<span class="hl opt">,</span> dst<span class="hl opt">:</span> iarr n<span class="hl opt">,</span> n<span class="hl opt">:</span> <span class="hl kwb">int</span> n<span class="hl opt">):</span> void <span class="hl opt">=</span> <span class="hl str">&quot;iarr_copy&quot;</span>
<span class="hl slc">// end of [iarr_copy]</span>

<span class="hl com">(* ****** ****** *)</span>

fn fprint_iarr <span class="hl opt">{</span>n<span class="hl opt">:</span>nat<span class="hl opt">}</span>
  <span class="hl opt">(</span>out<span class="hl opt">:</span> <span class="hl kwd">FILEref</span><span class="hl opt">,</span> <span class="hl kwd">A</span><span class="hl opt">:</span> iarr n<span class="hl opt">,</span> n<span class="hl opt">:</span> <span class="hl kwb">int</span> n<span class="hl opt">):</span> void <span class="hl opt">= ()</span> where <span class="hl opt">{</span>
  var i<span class="hl opt">:</span> intGte <span class="hl num">1</span> <span class="hl opt">=</span> <span class="hl num">1</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> <span class="hl kwa">while</span> <span class="hl opt">(</span>i <span class="hl opt">&lt;=</span> n<span class="hl opt">) (</span>fprint_int <span class="hl opt">(</span>out<span class="hl opt">,</span> <span class="hl kwd">A</span><span class="hl opt">[</span>i<span class="hl opt">]);</span> i <span class="hl opt">:=</span> i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> fprint_char <span class="hl opt">(</span>out<span class="hl opt">,</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl opt">)</span>
<span class="hl opt">}</span> <span class="hl com">(* end of [fprint_iarr] *)</span>
<span class="hl kwa">macdef</span> print_iarr <span class="hl opt">(</span><span class="hl kwd">A</span><span class="hl opt">,</span> n<span class="hl opt">) =</span> fprint_iarr <span class="hl opt">(</span>stdout_ref<span class="hl opt">, ,(</span><span class="hl kwd">A</span><span class="hl opt">), ,(</span>n<span class="hl opt">))</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl opt">%{^</span>
<span class="hl kwb">int</span> thePermCnt <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl kwb">int</span> thePermCnt_get <span class="hl opt">() {</span> <span class="hl kwa">return</span> thePermCnt <span class="hl opt">; }</span>
void thePermCnt_inc <span class="hl opt">() {</span>
  thePermCnt <span class="hl opt">+=</span> <span class="hl num">1</span> <span class="hl opt">;</span> <span class="hl kwa">if</span> <span class="hl opt">(</span>thePermCnt <span class="hl opt">==</span> <span class="hl num">1048576</span><span class="hl opt">)</span> thePermCnt <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> <span class="hl kwa">return</span> <span class="hl opt">;</span>
<span class="hl opt">}</span>
<span class="hl kwb">int</span> theCheckSum <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl kwb">int</span> theCheckSum_get <span class="hl opt">() {</span> <span class="hl kwa">return</span> theCheckSum <span class="hl opt">; }</span>
void theCheckSum_add <span class="hl opt">(</span>ats_int_type x<span class="hl opt">) {</span> theCheckSum <span class="hl opt">+=</span> x <span class="hl opt">;</span> <span class="hl kwa">return</span> <span class="hl opt">; }</span>
<span class="hl opt">%}</span> <span class="hl slc">// end of [%{^]</span>
<span class="hl kwa">extern fun</span> thePermCnt_get <span class="hl opt">():</span> <span class="hl kwb">int</span> <span class="hl opt">=</span> <span class="hl str">&quot;thePermCnt_get&quot;</span>
<span class="hl kwa">extern fun</span> thePermCnt_inc <span class="hl opt">():</span> void <span class="hl opt">=</span> <span class="hl str">&quot;thePermCnt_inc&quot;</span>
<span class="hl kwa">extern fun</span> theCheckSum_get <span class="hl opt">():</span> <span class="hl kwb">int</span> <span class="hl opt">=</span> <span class="hl str">&quot;theCheckSum_get&quot;</span>
<span class="hl kwa">extern fun</span> theCheckSum_add <span class="hl opt">(</span>x<span class="hl opt">:</span> <span class="hl kwb">int</span><span class="hl opt">):</span> void <span class="hl opt">=</span> <span class="hl str">&quot;theCheckSum_add&quot;</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">fun</span> perm_rotate
  <span class="hl opt">{</span>n<span class="hl opt">,</span>i<span class="hl opt">:</span><span class="hl kwb">int</span> | <span class="hl num">1</span> <span class="hl opt">&lt;=</span> i<span class="hl opt">;</span> i <span class="hl opt">&lt;=</span> n<span class="hl opt">}</span>
  <span class="hl opt">(</span><span class="hl kwd">P</span><span class="hl opt">:</span> iarr n<span class="hl opt">,</span> i<span class="hl opt">:</span> <span class="hl kwb">int</span> i<span class="hl opt">):</span> void <span class="hl opt">= ()</span> where <span class="hl opt">{</span>
  var k<span class="hl opt">:</span> intGte <span class="hl num">1</span> <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span> var k1<span class="hl opt">:</span> <span class="hl kwb">int</span>?<span class="hl opt">;</span> <span class="hl kwa">val</span> <span class="hl kwd">P1</span> <span class="hl opt">=</span> <span class="hl kwd">P</span><span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">]</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> <span class="hl kwa">while</span> <span class="hl opt">(</span>k <span class="hl opt">&lt;</span> i<span class="hl opt">) (</span>k1 <span class="hl opt">:=</span> k<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">;</span> <span class="hl kwd">P</span><span class="hl opt">[</span>k<span class="hl opt">] :=</span> <span class="hl kwd">P</span><span class="hl opt">[</span>k1<span class="hl opt">];</span> k <span class="hl opt">:=</span> k1<span class="hl opt">)</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> <span class="hl kwd">P</span><span class="hl opt">[</span>i<span class="hl opt">] :=</span> <span class="hl kwd">P1</span>
<span class="hl opt">}</span> <span class="hl com">(* end of [perm_rotate] *)</span>

<span class="hl kwa">fun</span> perm_next <span class="hl opt">{</span>n<span class="hl opt">,</span>i<span class="hl opt">:</span><span class="hl kwb">int</span> | <span class="hl num">1</span> <span class="hl opt">&lt;=</span> i<span class="hl opt">;</span> i <span class="hl opt">&lt;=</span> n<span class="hl opt">} (</span>
    <span class="hl kwd">C</span><span class="hl opt">:</span> iarr n<span class="hl opt">,</span> <span class="hl kwd">P</span><span class="hl opt">:</span> iarr n<span class="hl opt">,</span> n<span class="hl opt">:</span> <span class="hl kwb">int</span> n<span class="hl opt">,</span> i<span class="hl opt">:</span> <span class="hl kwb">int</span> i
  <span class="hl opt">) :</span> natLte <span class="hl opt">(</span>n<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">) =</span> <span class="hl kwa">let</span>
  <span class="hl kwa">val</span> x <span class="hl opt">=</span> <span class="hl kwd">C</span><span class="hl opt">[</span>i<span class="hl opt">];</span> <span class="hl kwa">val</span> x1 <span class="hl opt">=</span> x<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">;</span> <span class="hl kwa">val</span> <span class="hl opt">() =</span> perm_rotate <span class="hl opt">{</span>n<span class="hl opt">,</span>i<span class="hl opt">} (</span><span class="hl kwd">P</span><span class="hl opt">,</span> i<span class="hl opt">)</span>
<span class="hl kwa">in</span>
  case<span class="hl opt">+</span> <span class="hl num">0</span> <span class="hl kwa">of</span>
  | _ <span class="hl kwa">when</span> x1 <span class="hl opt">&gt;</span> <span class="hl num">0</span> <span class="hl opt">=&gt; (</span><span class="hl kwd">C</span><span class="hl opt">[</span>i<span class="hl opt">] :=</span> x1<span class="hl opt">;</span> i<span class="hl opt">)</span>
  | _ <span class="hl com">(* x1 = 0 *)</span> <span class="hl opt">=&gt;</span> <span class="hl kwa">let</span>
      <span class="hl kwa">val</span> <span class="hl opt">() =</span> <span class="hl kwd">C</span><span class="hl opt">[</span>i<span class="hl opt">] :=</span> i<span class="hl opt">;</span> <span class="hl kwa">val</span> i1 <span class="hl opt">=</span> i <span class="hl opt">+</span> <span class="hl num">1</span>
    <span class="hl kwa">in</span>
      <span class="hl kwa">if</span> i1 <span class="hl opt">&lt;=</span> n <span class="hl kwa">then</span> perm_next <span class="hl opt">(</span><span class="hl kwd">C</span><span class="hl opt">,</span> <span class="hl kwd">P</span><span class="hl opt">,</span> n<span class="hl opt">,</span> i1<span class="hl opt">)</span> <span class="hl kwa">else</span> i1
    <span class="hl kwa">end</span>
<span class="hl kwa">end</span> <span class="hl com">(* end of [perm_next] *)</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">fun</span> fannkuch_count <span class="hl opt">{</span>n<span class="hl opt">:</span><span class="hl kwb">int</span> | n <span class="hl opt">&gt;=</span> <span class="hl num">2</span><span class="hl opt">}</span>
  <span class="hl opt">(</span><span class="hl kwd">C</span><span class="hl opt">:</span> iarr n<span class="hl opt">,</span> <span class="hl kwd">P</span><span class="hl opt">:</span> iarr n<span class="hl opt">,</span> <span class="hl kwd">S</span><span class="hl opt">:</span> iarr n<span class="hl opt">,</span> n<span class="hl opt">:</span> <span class="hl kwb">int</span> n<span class="hl opt">,</span> max<span class="hl opt">:</span> <span class="hl kwb">int</span><span class="hl opt">):</span> <span class="hl kwb">int</span> <span class="hl opt">=</span> <span class="hl kwa">let</span>
  <span class="hl kwa">fun</span> rev0
    <span class="hl opt">{</span>l<span class="hl opt">,</span>u<span class="hl opt">:</span><span class="hl kwb">int</span> | <span class="hl num">1</span> <span class="hl opt">&lt;=</span> l<span class="hl opt">;</span> l <span class="hl opt">&lt;=</span> u<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">;</span> u <span class="hl opt">&lt;=</span> n<span class="hl opt">}</span>
    <span class="hl opt">(</span><span class="hl kwd">S</span><span class="hl opt">:</span> iarr n<span class="hl opt">,</span> l<span class="hl opt">:</span> <span class="hl kwb">int</span> l<span class="hl opt">,</span> u<span class="hl opt">:</span> <span class="hl kwb">int</span> u<span class="hl opt">):</span> void <span class="hl opt">=</span> <span class="hl kwa">if</span> <span class="hl opt">(</span>l <span class="hl opt">&lt;</span> u<span class="hl opt">)</span> <span class="hl kwa">then let</span>
      <span class="hl kwa">val</span> tmp <span class="hl opt">=</span> <span class="hl kwd">S</span><span class="hl opt">[</span>u<span class="hl opt">]</span> <span class="hl kwa">in</span> <span class="hl kwd">S</span><span class="hl opt">[</span>u<span class="hl opt">] :=</span> <span class="hl kwd">S</span><span class="hl opt">[</span>l<span class="hl opt">];</span> <span class="hl kwd">S</span><span class="hl opt">[</span>l<span class="hl opt">] :=</span> tmp<span class="hl opt">;</span> rev0 <span class="hl opt">(</span><span class="hl kwd">S</span><span class="hl opt">,</span> l<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">,</span> u<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">)</span>
    <span class="hl kwa">end</span>
  fn fannkuch_rev1
    <span class="hl opt">{</span>u<span class="hl opt">:</span><span class="hl kwb">int</span> | <span class="hl num">1</span> <span class="hl opt">&lt;</span> u<span class="hl opt">;</span> u <span class="hl opt">&lt;=</span> n<span class="hl opt">} (</span><span class="hl kwd">S</span><span class="hl opt">:</span> iarr n<span class="hl opt">,</span> u<span class="hl opt">:</span> <span class="hl kwb">int</span> u<span class="hl opt">):</span> void <span class="hl opt">=</span> <span class="hl kwa">let</span>
    <span class="hl kwa">val</span> tmp <span class="hl opt">=</span> <span class="hl kwd">S</span><span class="hl opt">[</span>u<span class="hl opt">]</span> <span class="hl kwa">in</span>
    <span class="hl kwd">S</span><span class="hl opt">[</span>u<span class="hl opt">] :=</span> <span class="hl kwd">S</span><span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">];</span> <span class="hl kwd">S</span><span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">] :=</span> tmp<span class="hl opt">;</span> <span class="hl kwa">if</span> tmp <span class="hl opt">&lt;&gt;</span> <span class="hl num">1</span> <span class="hl kwa">then</span> rev0 <span class="hl opt">(</span><span class="hl kwd">S</span><span class="hl opt">,</span> <span class="hl num">2</span><span class="hl opt">,</span> u<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">)</span>
  <span class="hl kwa">end</span> <span class="hl slc">// end of [fannkuch_rev1]</span>
  var max<span class="hl opt">:</span> <span class="hl kwb">int</span> <span class="hl opt">=</span> max
  <span class="hl kwa">val</span> <span class="hl opt">() =</span>
    <span class="hl kwa">if</span> <span class="hl kwd">P</span><span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">] =</span> <span class="hl num">1</span> <span class="hl kwa">then</span> <span class="hl opt">()</span> <span class="hl kwa">else let</span>
      var cnt<span class="hl opt">:</span> <span class="hl kwb">int</span> <span class="hl opt">=</span> <span class="hl num">0</span>
      <span class="hl kwa">val</span> <span class="hl opt">() =</span> iarr_copy <span class="hl opt">(</span><span class="hl kwd">P</span><span class="hl opt">,</span> <span class="hl kwd">S</span><span class="hl opt">,</span> n<span class="hl opt">)</span>
      var <span class="hl kwd">S1</span><span class="hl opt">:</span> natLte n <span class="hl opt">=</span> <span class="hl kwd">S</span><span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">]</span>
      <span class="hl kwa">val</span> <span class="hl opt">() =</span> <span class="hl kwa">while</span> <span class="hl opt">(</span><span class="hl kwd">S1</span> <span class="hl opt">&gt;</span> <span class="hl num">1</span><span class="hl opt">)</span> <span class="hl kwa">begin</span>
        cnt <span class="hl opt">:=</span> cnt <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span> fannkuch_rev1 <span class="hl opt">(</span><span class="hl kwd">S</span><span class="hl opt">,</span> <span class="hl kwd">S1</span><span class="hl opt">);</span> <span class="hl kwd">S1</span> <span class="hl opt">:=</span> <span class="hl kwd">S</span><span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">]</span>
      <span class="hl kwa">end</span> <span class="hl com">(* end of [val] *)</span>
      <span class="hl kwa">val</span> <span class="hl opt">() =</span> <span class="hl kwa">if</span> max <span class="hl opt">&lt;</span> cnt <span class="hl kwa">then</span> max <span class="hl opt">:=</span> cnt
      <span class="hl kwa">val</span> thePermCnt <span class="hl opt">=</span> thePermCnt_get <span class="hl opt">()</span>
      <span class="hl kwa">val</span> <span class="hl opt">() =</span> <span class="hl kwa">if</span> thePermCnt <span class="hl kwa">mod</span> <span class="hl num">2</span> <span class="hl opt">=</span> <span class="hl num">0</span>
        <span class="hl kwa">then</span> theCheckSum_add <span class="hl opt">(</span>cnt<span class="hl opt">)</span> <span class="hl kwa">else</span> theCheckSum_add <span class="hl opt">(</span>~cnt<span class="hl opt">)</span>
      <span class="hl slc">// end of [val]</span>
    <span class="hl kwa">in</span>
      <span class="hl slc">// nothing</span>
    <span class="hl kwa">end</span> <span class="hl com">(* end of [if] *)</span>
  <span class="hl slc">// end of [val]</span>
  <span class="hl kwa">val</span> n1 <span class="hl opt">=</span> perm_next <span class="hl opt">(</span><span class="hl kwd">C</span><span class="hl opt">,</span> <span class="hl kwd">P</span><span class="hl opt">,</span> n<span class="hl opt">,</span> <span class="hl num">2</span><span class="hl opt">)</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> thePermCnt_inc <span class="hl opt">()</span>
<span class="hl kwa">in</span>
  <span class="hl kwa">if</span> n1 <span class="hl opt">&lt;=</span> n <span class="hl kwa">then</span> fannkuch_count <span class="hl opt">(</span><span class="hl kwd">C</span><span class="hl opt">,</span> <span class="hl kwd">P</span><span class="hl opt">,</span> <span class="hl kwd">S</span><span class="hl opt">,</span> n<span class="hl opt">,</span> max<span class="hl opt">)</span> <span class="hl kwa">else</span> max
<span class="hl kwa">end</span> <span class="hl com">(* end of [fannkuch] *)</span>

<span class="hl kwa">fun</span> iarr_init <span class="hl opt">{</span>n<span class="hl opt">:</span>nat<span class="hl opt">} (</span><span class="hl kwd">A</span><span class="hl opt">:</span> iarr n<span class="hl opt">,</span> n<span class="hl opt">:</span> <span class="hl kwb">int</span> n<span class="hl opt">):</span> void <span class="hl opt">=</span>
  <span class="hl kwa">let</span> var i<span class="hl opt">:</span> intGte <span class="hl num">1</span> <span class="hl opt">=</span> <span class="hl num">1</span> <span class="hl kwa">in while</span> <span class="hl opt">(</span>i <span class="hl opt">&lt;=</span> n<span class="hl opt">) (</span><span class="hl kwd">A</span><span class="hl opt">[</span>i<span class="hl opt">] :=</span> i<span class="hl opt">;</span> i <span class="hl opt">:=</span> i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)</span> <span class="hl kwa">end</span>
<span class="hl slc">// end of [iarr_init]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">implement</span> main <span class="hl opt">(</span>argc<span class="hl opt">,</span> argv<span class="hl opt">) =</span> <span class="hl kwa">let</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> <span class="hl kwa">assert</span> <span class="hl opt">(</span>argc <span class="hl opt">&gt;=</span> <span class="hl num">2</span><span class="hl opt">)</span>
  <span class="hl kwa">val</span> <span class="hl opt">[</span>n<span class="hl opt">:</span><span class="hl kwb">int</span><span class="hl opt">]</span> n <span class="hl opt">=</span> int1_of argv<span class="hl opt">.[</span><span class="hl num">1</span><span class="hl opt">]</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> <span class="hl kwa">assert</span> <span class="hl opt">(</span>n <span class="hl opt">&gt;=</span> <span class="hl num">2</span><span class="hl opt">)</span>
  <span class="hl kwa">val</span> sz <span class="hl opt">=</span> size1_of_int1 <span class="hl opt">(</span>n<span class="hl opt">)</span>
  <span class="hl kwa">val</span> <span class="hl kwd">C</span> <span class="hl opt">=</span> iarr sz<span class="hl opt">;</span> <span class="hl kwa">val</span> <span class="hl opt">() =</span> iarr_init <span class="hl opt">(</span><span class="hl kwd">C</span><span class="hl opt">,</span> n<span class="hl opt">)</span>
  <span class="hl kwa">val</span> <span class="hl kwd">P</span> <span class="hl opt">=</span> iarr sz<span class="hl opt">;</span> <span class="hl kwa">val</span> <span class="hl opt">() =</span> iarr_init <span class="hl opt">(</span><span class="hl kwd">P</span><span class="hl opt">,</span> n<span class="hl opt">)</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> iarr_init <span class="hl opt">(</span><span class="hl kwd">C</span><span class="hl opt">,</span> n<span class="hl opt">);</span> <span class="hl kwa">val</span> <span class="hl opt">() =</span> iarr_init <span class="hl opt">(</span><span class="hl kwd">P</span><span class="hl opt">,</span> n<span class="hl opt">);</span> <span class="hl kwa">val</span> <span class="hl kwd">S</span> <span class="hl opt">=</span> iarr sz
  <span class="hl kwa">val</span> ans <span class="hl opt">=</span> fannkuch_count <span class="hl opt">(</span><span class="hl kwd">C</span><span class="hl opt">,</span> <span class="hl kwd">P</span><span class="hl opt">,</span> <span class="hl kwd">S</span><span class="hl opt">,</span> n<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">)</span>
<span class="hl kwa">in</span>
  printf <span class="hl opt">(</span><span class="hl str">&quot;%i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> &#64;<span class="hl opt">(</span>theCheckSum_get<span class="hl opt">()));</span>
  printf <span class="hl opt">(</span><span class="hl str">&quot;Pfannkuchen(%i) = %i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> &#64;<span class="hl opt">(</span>n<span class="hl opt">,</span> ans<span class="hl opt">))</span>
<span class="hl kwa">end</span> <span class="hl com">(* end of [main] *)</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl com">(* end of [fannkuch-redux.dats] *)</span>
