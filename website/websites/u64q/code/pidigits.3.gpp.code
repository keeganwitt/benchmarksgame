<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * contributed by Marcin Zalewski &amp; Jeremiah Willcock</span>
<span class="hl com"> */</span>


<span class="hl ppc">#include &lt;iostream&gt;</span>
<span class="hl ppc">#include &lt;gmpxx.h&gt;</span>
<span class="hl ppc">#include &lt;boost/lexical_cast.hpp&gt;</span>
<span class="hl ppc">#include &lt;boost/tuple/tuple.hpp&gt;</span>
<span class="hl ppc">#include &lt;algorithm&gt;</span>

<span class="hl kwa">using namespace</span> boost<span class="hl opt">;</span>

<span class="hl kwc">class</span> Digits <span class="hl opt">{</span>
<span class="hl kwc">private</span><span class="hl opt">:</span>
  <span class="hl kwb">unsigned int</span> j<span class="hl opt">;</span>
  tuple<span class="hl opt">&lt;</span>mpz_class<span class="hl opt">,</span> mpz_class<span class="hl opt">,</span> mpz_class<span class="hl opt">&gt;</span> nad<span class="hl opt">;</span>
  mpz_class tmp1<span class="hl opt">,</span> tmp2<span class="hl opt">;</span>

<span class="hl kwc">public</span><span class="hl opt">:</span>
  <span class="hl kwd">Digits</span><span class="hl opt">() {</span> j <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> get<span class="hl opt">&lt;</span><span class="hl num">0</span><span class="hl opt">&gt;(</span>nad<span class="hl opt">) =</span> <span class="hl num">1</span><span class="hl opt">;</span> get<span class="hl opt">&lt;</span><span class="hl num">1</span><span class="hl opt">&gt;(</span>nad<span class="hl opt">) =</span> <span class="hl num">0</span><span class="hl opt">;</span> get<span class="hl opt">&lt;</span><span class="hl num">2</span><span class="hl opt">&gt;(</span>nad<span class="hl opt">) =</span> <span class="hl num">1</span><span class="hl opt">; }</span>

  <span class="hl kwc">inline</span> <span class="hl kwb">char</span> <span class="hl kwc">operator</span><span class="hl opt">()() {</span>
    <span class="hl opt">++</span>j<span class="hl opt">;</span>
    <span class="hl kwd">next_term</span><span class="hl opt">();</span>

    <span class="hl kwa">if</span><span class="hl opt">(</span>get<span class="hl opt">&lt;</span><span class="hl num">0</span><span class="hl opt">&gt;(</span>nad<span class="hl opt">) &gt;</span> get<span class="hl opt">&lt;</span><span class="hl num">1</span><span class="hl opt">&gt;(</span>nad<span class="hl opt">))</span> <span class="hl kwa">return</span> <span class="hl opt">(*</span><span class="hl kwa">this</span><span class="hl opt">)();</span>

    <span class="hl kwd">mpz_mul_2exp</span><span class="hl opt">(</span>tmp1<span class="hl opt">.</span><span class="hl kwd">get_mpz_t</span><span class="hl opt">(),</span> get<span class="hl opt">&lt;</span><span class="hl num">0</span><span class="hl opt">&gt;(</span>nad<span class="hl opt">).</span><span class="hl kwd">get_mpz_t</span><span class="hl opt">(),</span> <span class="hl num">1</span><span class="hl opt">);</span>
    tmp1 <span class="hl opt">+=</span> get<span class="hl opt">&lt;</span><span class="hl num">0</span><span class="hl opt">&gt;(</span>nad<span class="hl opt">);</span>
    tmp1 <span class="hl opt">+=</span> get<span class="hl opt">&lt;</span><span class="hl num">1</span><span class="hl opt">&gt;(</span>nad<span class="hl opt">);</span>

    <span class="hl kwd">mpz_fdiv_qr</span><span class="hl opt">(</span>tmp1<span class="hl opt">.</span><span class="hl kwd">get_mpz_t</span><span class="hl opt">(),</span> tmp2<span class="hl opt">.</span><span class="hl kwd">get_mpz_t</span><span class="hl opt">(),</span> tmp1<span class="hl opt">.</span><span class="hl kwd">get_mpz_t</span><span class="hl opt">(),</span> get<span class="hl opt">&lt;</span><span class="hl num">2</span><span class="hl opt">&gt;(</span>nad<span class="hl opt">).</span><span class="hl kwd">get_mpz_t</span><span class="hl opt">());</span>

    tmp2 <span class="hl opt">+=</span> get<span class="hl opt">&lt;</span><span class="hl num">0</span><span class="hl opt">&gt;(</span>nad<span class="hl opt">);</span>

    <span class="hl kwa">if</span><span class="hl opt">(</span>tmp2 <span class="hl opt">&gt;=</span> get<span class="hl opt">&lt;</span><span class="hl num">2</span><span class="hl opt">&gt;(</span>nad<span class="hl opt">)) {</span>
      <span class="hl kwa">return</span> <span class="hl opt">(*</span><span class="hl kwa">this</span><span class="hl opt">)();</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
      <span class="hl kwb">unsigned int</span> d <span class="hl opt">=</span> tmp1<span class="hl opt">.</span><span class="hl kwd">get_ui</span><span class="hl opt">();</span>
      <span class="hl kwd">eliminate_digit</span><span class="hl opt">(</span>d<span class="hl opt">);</span>
      <span class="hl kwa">return</span> d <span class="hl opt">+</span> <span class="hl str">'0'</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>
  <span class="hl opt">}</span>

<span class="hl kwc">private</span><span class="hl opt">:</span>

  <span class="hl kwc">inline</span> <span class="hl kwb">void</span> <span class="hl kwd">next_term</span><span class="hl opt">() {</span>
    <span class="hl kwb">unsigned int</span> y <span class="hl opt">=</span> j <span class="hl opt">*</span> <span class="hl num">2</span> <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span>
    <span class="hl kwd">mpz_mul_2exp</span><span class="hl opt">(</span>tmp1<span class="hl opt">.</span><span class="hl kwd">get_mpz_t</span><span class="hl opt">(),</span> get<span class="hl opt">&lt;</span><span class="hl num">0</span><span class="hl opt">&gt;(</span>nad<span class="hl opt">).</span><span class="hl kwd">get_mpz_t</span><span class="hl opt">(),</span> <span class="hl num">1</span><span class="hl opt">);</span>
    get<span class="hl opt">&lt;</span><span class="hl num">1</span><span class="hl opt">&gt;(</span>nad<span class="hl opt">) +=</span> tmp1<span class="hl opt">;</span>
    get<span class="hl opt">&lt;</span><span class="hl num">1</span><span class="hl opt">&gt;(</span>nad<span class="hl opt">) *=</span> y<span class="hl opt">;</span>
    get<span class="hl opt">&lt;</span><span class="hl num">0</span><span class="hl opt">&gt;(</span>nad<span class="hl opt">) *=</span> j<span class="hl opt">;</span>
    get<span class="hl opt">&lt;</span><span class="hl num">2</span><span class="hl opt">&gt;(</span>nad<span class="hl opt">) *=</span> y<span class="hl opt">;</span>
  <span class="hl opt">}</span>

  <span class="hl kwc">inline</span> <span class="hl kwb">void</span> <span class="hl kwd">eliminate_digit</span><span class="hl opt">(</span><span class="hl kwb">unsigned int</span> d<span class="hl opt">) {</span>
    <span class="hl kwd">mpz_submul_ui</span><span class="hl opt">(</span>get<span class="hl opt">&lt;</span><span class="hl num">1</span><span class="hl opt">&gt;(</span>nad<span class="hl opt">).</span><span class="hl kwd">get_mpz_t</span><span class="hl opt">(),</span> get<span class="hl opt">&lt;</span><span class="hl num">2</span><span class="hl opt">&gt;(</span>nad<span class="hl opt">).</span><span class="hl kwd">get_mpz_t</span><span class="hl opt">(),</span> d<span class="hl opt">);</span>
    get<span class="hl opt">&lt;</span><span class="hl num">0</span><span class="hl opt">&gt;(</span>nad<span class="hl opt">) *=</span> <span class="hl num">10</span><span class="hl opt">;</span>
    get<span class="hl opt">&lt;</span><span class="hl num">1</span><span class="hl opt">&gt;(</span>nad<span class="hl opt">) *=</span> <span class="hl num">10</span><span class="hl opt">;</span>
  <span class="hl opt">}</span>

<span class="hl opt">};</span>

<span class="hl kwb">void</span> <span class="hl kwd">pi</span><span class="hl opt">(</span><span class="hl kwb">unsigned int</span> n<span class="hl opt">) {</span>
  <span class="hl kwb">unsigned int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
  Digits digits<span class="hl opt">;</span>

  <span class="hl kwa">while</span><span class="hl opt">((</span>i <span class="hl opt">+=</span> <span class="hl num">10</span><span class="hl opt">) &lt;=</span> n<span class="hl opt">) {</span>
    <span class="hl kwa">for</span><span class="hl opt">(</span><span class="hl kwb">int</span> count <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> count <span class="hl opt">&lt;</span> <span class="hl num">10</span><span class="hl opt">; ++</span>count<span class="hl opt">) {</span>
      std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl kwd">digits</span><span class="hl opt">();</span>
    <span class="hl opt">}</span>
    std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span><span class="hl str">:&quot;</span> <span class="hl opt">&lt;&lt;</span> i <span class="hl opt">&lt;&lt;</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl opt">;</span>
  <span class="hl opt">}</span>
  
  i <span class="hl opt">-=</span> <span class="hl num">10</span><span class="hl opt">;</span>
  <span class="hl kwa">if</span><span class="hl opt">(</span>n <span class="hl opt">&gt;</span> i<span class="hl opt">) {</span>
    <span class="hl kwa">for</span><span class="hl opt">(</span><span class="hl kwb">int</span> count <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> count <span class="hl opt">&lt;</span> n <span class="hl opt">-</span> i<span class="hl opt">; ++</span>count<span class="hl opt">) {</span>
      std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl kwd">digits</span><span class="hl opt">();</span>
    <span class="hl opt">}</span>
    i <span class="hl opt">+=</span> <span class="hl num">10</span><span class="hl opt">;</span>
    <span class="hl kwa">for</span><span class="hl opt">(</span><span class="hl kwb">int</span> count <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> count <span class="hl opt">&lt;</span> i <span class="hl opt">-</span> n<span class="hl opt">; ++</span>count<span class="hl opt">) {</span>
      std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">' '</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>
    std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span><span class="hl str">:&quot;</span> <span class="hl opt">&lt;&lt;</span> n <span class="hl opt">&lt;&lt;</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl opt">;</span>
  <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span><span class="hl opt">**</span> argv<span class="hl opt">) {</span>
  std<span class="hl opt">::</span>cout<span class="hl opt">.</span><span class="hl kwd">sync_with_stdio</span><span class="hl opt">(</span><span class="hl kwa">false</span><span class="hl opt">);</span>
  <span class="hl kwb">unsigned int</span> count <span class="hl opt">= (</span>argc <span class="hl opt">&gt;=</span> <span class="hl num">2</span> ? boost<span class="hl opt">::</span>lexical_cast<span class="hl opt">&lt;</span><span class="hl kwb">unsigned int</span><span class="hl opt">&gt;(</span>argv<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">]) :</span> <span class="hl num">10000</span><span class="hl opt">);</span>
  <span class="hl kwd">pi</span><span class="hl opt">(</span>count<span class="hl opt">);</span>
  <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
