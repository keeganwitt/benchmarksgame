<span class="hl slc">// The Computer Language Benchmarks Game</span>
<span class="hl slc">// http://benchmarksgame.alioth.debian.org/</span>

<span class="hl slc">// Copy task division idea from Java entry, contributed by James McIlree</span>
<span class="hl slc">// Contributed by The Anh Tran</span>

<span class="hl ppc">#include &lt;omp.h&gt;</span>
<span class="hl ppc">#include &lt;sched.h&gt;</span>

<span class="hl ppc">#include &lt;algorithm&gt;</span>
<span class="hl ppc">#include &lt;vector&gt;</span>
<span class="hl ppc">#include &lt;iostream&gt;</span>
<span class="hl ppc">#include &lt;sstream&gt;</span>
<span class="hl ppc">#include &lt;stdio.h&gt;</span>

<span class="hl slc">//#include &lt;ext/hash_map&gt;</span>
<span class="hl slc">//#include &lt;boost/unordered_map.hpp&gt;</span>
<span class="hl ppc">#include &lt;ext/pb_ds/assoc_container.hpp&gt;</span>
<span class="hl ppc">#include &lt;ext/pb_ds/hash_policy.hpp&gt;</span>

<span class="hl ppc">#include &lt;boost/algorithm/string/case_conv.hpp&gt;</span>
<span class="hl ppc">#include &lt;boost/lambda/lambda.hpp&gt;</span>
<span class="hl ppc">#include &lt;boost/lambda/bind.hpp&gt;</span>
<span class="hl ppc">#include &lt;boost/format.hpp&gt;</span>
<span class="hl ppc">#include &lt;boost/foreach.hpp&gt;</span>
<span class="hl ppc">#define foreach BOOST_FOREACH</span>


<span class="hl kwc">typedef</span> <span class="hl kwb">unsigned int</span>   uint<span class="hl opt">;</span>

<span class="hl kwb">int const</span> MAX_CORE <span class="hl opt">=</span> <span class="hl num">16</span><span class="hl opt">;</span>
uint <span class="hl kwb">const</span> SEED <span class="hl opt">=</span> <span class="hl num">183</span><span class="hl opt">;</span> <span class="hl slc">//183 193 405 &lt;= zero collision for hashing algorithm</span>


<span class="hl slc">// Hash_table key type, with key's length = reading_frame_size</span>
<span class="hl kwc">template</span> <span class="hl opt">&lt;</span><span class="hl kwb">int</span> frm_sz<span class="hl opt">&gt;</span>
<span class="hl kwb">struct</span> Key_T
<span class="hl opt">{</span>
   uint   hash_value<span class="hl opt">;</span>
   <span class="hl kwb">char</span>   key<span class="hl opt">[</span>frm_sz <span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">];</span>

   <span class="hl kwd">Key_T</span><span class="hl opt">()             {</span>   <span class="hl kwd">memset</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl kwa">sizeof</span><span class="hl opt">(*</span><span class="hl kwa">this</span><span class="hl opt">));      }</span>
   <span class="hl kwd">Key_T</span><span class="hl opt">(</span>Key_T <span class="hl kwb">const</span><span class="hl opt">&amp;</span> k<span class="hl opt">)   {</span>   <span class="hl kwd">memcpy</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">, &amp;</span>k<span class="hl opt">,</span> <span class="hl kwa">sizeof</span><span class="hl opt">(*</span><span class="hl kwa">this</span><span class="hl opt">));   }</span>
   <span class="hl kwd">Key_T</span><span class="hl opt">(</span><span class="hl kwb">char const</span> <span class="hl opt">*</span> str<span class="hl opt">)   {</span>   <span class="hl kwd">ReHash</span> <span class="hl opt">(</span>str<span class="hl opt">);   }</span>

   <span class="hl kwb">void</span> 
   <span class="hl kwd">ReHash</span><span class="hl opt">(</span><span class="hl kwb">char const</span> <span class="hl opt">*</span>str<span class="hl opt">)</span>
   <span class="hl opt">{</span>
      <span class="hl slc">// naive hashing algorithm.</span>
      hash_value <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>

      <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> frm_sz<span class="hl opt">; ++</span>i<span class="hl opt">)</span>
      <span class="hl opt">{</span>
         key<span class="hl opt">[</span>i<span class="hl opt">] =</span> str<span class="hl opt">[</span>i<span class="hl opt">];</span>
         hash_value <span class="hl opt">= (</span>hash_value <span class="hl opt">*</span> SEED<span class="hl opt">) +</span> str<span class="hl opt">[</span>i<span class="hl opt">];</span>
      <span class="hl opt">}</span>
   <span class="hl opt">}</span>


   <span class="hl slc">// Hash functor Hash&lt;HKey_T&gt;</span>
   uint 
   <span class="hl kwc">operator</span><span class="hl opt">() (</span><span class="hl kwb">const</span> Key_T <span class="hl opt">&amp;</span>k<span class="hl opt">)</span> <span class="hl kwb">const</span>   <span class="hl opt">{</span>   <span class="hl kwa">return</span> k<span class="hl opt">.</span>hash_value<span class="hl opt">;   }</span>


   <span class="hl slc">// Comparison functor equal_to&lt;HKey_T&gt;(Left, Right)</span>
   <span class="hl kwb">bool</span> 
   <span class="hl kwc">operator</span><span class="hl opt">() (</span><span class="hl kwb">const</span> Key_T <span class="hl opt">&amp;</span>k1<span class="hl opt">,</span> <span class="hl kwb">const</span> Key_T <span class="hl opt">&amp;</span>k2<span class="hl opt">)</span> <span class="hl kwb">const</span>
   <span class="hl opt">{</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>k1<span class="hl opt">.</span>hash_value <span class="hl opt">==</span> k2<span class="hl opt">.</span>hash_value<span class="hl opt">)</span>
      <span class="hl opt">{</span>
         <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> frm_sz<span class="hl opt">; ++</span>i<span class="hl opt">)</span>
         <span class="hl opt">{</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span> <span class="hl kwd">__builtin_expect</span><span class="hl opt">((</span>k1<span class="hl opt">.</span>key<span class="hl opt">[</span>i<span class="hl opt">] !=</span> k2<span class="hl opt">.</span>key<span class="hl opt">[</span>i<span class="hl opt">]),</span> <span class="hl kwa">false</span><span class="hl opt">) )</span>
            <span class="hl opt">{</span>
               <span class="hl slc">//++collision;</span>
               <span class="hl kwa">return false</span><span class="hl opt">;</span>   
            <span class="hl opt">}</span>
         <span class="hl opt">}</span>
         <span class="hl kwa">return true</span><span class="hl opt">;</span>
      <span class="hl opt">}</span>
      <span class="hl kwa">return false</span><span class="hl opt">;</span>
   <span class="hl opt">}</span>
<span class="hl opt">};</span>


<span class="hl slc">// Game's rule: function to update hashtable</span>
<span class="hl kwc">template</span> <span class="hl opt">&lt;</span><span class="hl kwb">int</span> hash_len<span class="hl opt">,</span> <span class="hl kwb">bool</span> MT<span class="hl opt">,</span> typename Input_T<span class="hl opt">,</span> typename HTable_T<span class="hl opt">&gt;</span>
<span class="hl kwb">void</span> 
<span class="hl kwd">calculate_frequency</span><span class="hl opt">(</span>Input_T <span class="hl kwb">const</span> <span class="hl opt">&amp;</span>input<span class="hl opt">,</span> HTable_T<span class="hl opt">&amp;</span> hash_table<span class="hl opt">)</span>
<span class="hl opt">{</span>
   hash_table<span class="hl opt">.</span><span class="hl kwd">clear</span><span class="hl opt">();</span>
   <span class="hl kwb">int   const</span> total_length <span class="hl opt">=</span> <span class="hl kwa">static_cast</span><span class="hl opt">&lt;</span><span class="hl kwb">int</span><span class="hl opt">&gt;(</span>input<span class="hl opt">.</span><span class="hl kwd">size</span><span class="hl opt">() -</span> hash_len <span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">);</span>

   <span class="hl kwc">typedef</span> typename Input_T<span class="hl opt">::</span>const_pointer   Ite_T<span class="hl opt">;</span>
   Ite_T <span class="hl kwb">const</span>   ite_beg   <span class="hl opt">= &amp;(</span>input<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">]);</span>
   Ite_T <span class="hl kwb">const</span>   ite_end   <span class="hl opt">= &amp;(</span>input<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">]) +</span> total_length<span class="hl opt">;</span>

   typename HTable_T<span class="hl opt">::</span>key_type key<span class="hl opt">;</span>

   <span class="hl kwa">if</span> <span class="hl opt">(</span>MT<span class="hl opt">)</span>
   <span class="hl opt">{</span>
      <span class="hl kwb">static int</span> char_done<span class="hl opt">[</span>hash_len<span class="hl opt">] = {</span><span class="hl num">0</span><span class="hl opt">};</span>
      <span class="hl kwb">int const</span> chunk_sz <span class="hl opt">=</span> std<span class="hl opt">::</span><span class="hl kwd">max</span><span class="hl opt">(</span><span class="hl num">512</span><span class="hl opt">,</span> std<span class="hl opt">::</span><span class="hl kwd">min</span><span class="hl opt">(</span><span class="hl num">1024</span><span class="hl opt">*</span><span class="hl num">1024</span><span class="hl opt">,</span> total_length <span class="hl opt">/</span> <span class="hl kwd">omp_get_num_threads</span><span class="hl opt">() /</span> <span class="hl num">128</span><span class="hl opt">));</span>
      <span class="hl kwb">int</span> ichunk<span class="hl opt">;</span>

      <span class="hl kwa">for</span><span class="hl opt">(</span><span class="hl kwb">int</span> offset <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> offset <span class="hl opt">&lt;</span> hash_len<span class="hl opt">; ++</span>offset<span class="hl opt">)</span>
      <span class="hl opt">{</span>
         <span class="hl slc">// Fetch task. Each thread hashes a block, which block size = chunk</span>
         <span class="hl kwa">while</span> <span class="hl opt">( (</span>ichunk <span class="hl opt">=</span> <span class="hl kwd">__sync_fetch_and_add</span><span class="hl opt">(</span>char_done <span class="hl opt">+</span> offset<span class="hl opt">,</span> chunk_sz<span class="hl opt">)) &lt;</span> total_length <span class="hl opt">)</span>
         <span class="hl opt">{</span>
            Ite_T ite   <span class="hl opt">=</span> ite_beg <span class="hl opt">+</span> ichunk <span class="hl opt">+</span> offset<span class="hl opt">;</span>
            Ite_T end   <span class="hl opt">=</span> std<span class="hl opt">::</span><span class="hl kwd">min</span><span class="hl opt">(</span>ite_beg <span class="hl opt">+</span> ichunk <span class="hl opt">+</span> chunk_sz<span class="hl opt">,</span> ite_end<span class="hl opt">);</span>
         
            <span class="hl kwa">for</span> <span class="hl opt">(;</span> ite <span class="hl opt">&lt;</span> end<span class="hl opt">;</span> ite <span class="hl opt">+=</span> hash_len<span class="hl opt">)</span>
            <span class="hl opt">{</span>
               key<span class="hl opt">.</span><span class="hl kwd">ReHash</span><span class="hl opt">(</span>ite<span class="hl opt">);</span>
               <span class="hl opt">++(</span>hash_table<span class="hl opt">[</span>key<span class="hl opt">]);</span>
            <span class="hl opt">}</span>
         <span class="hl opt">}</span>
      <span class="hl opt">}</span>
   <span class="hl opt">}</span>
   <span class="hl kwa">else</span>
   <span class="hl opt">{</span>
      <span class="hl kwa">for</span><span class="hl opt">(</span><span class="hl kwb">int</span> offset <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> offset <span class="hl opt">&lt;</span> hash_len<span class="hl opt">; ++</span>offset<span class="hl opt">)</span>
      <span class="hl opt">{</span>
         <span class="hl kwa">for</span> <span class="hl opt">(</span>Ite_T index <span class="hl opt">=</span> ite_beg <span class="hl opt">+</span> offset<span class="hl opt">;</span> index <span class="hl opt">&lt;</span> ite_end<span class="hl opt">;</span> index <span class="hl opt">+=</span> hash_len<span class="hl opt">)</span>
         <span class="hl opt">{</span>
            key<span class="hl opt">.</span><span class="hl kwd">ReHash</span><span class="hl opt">(</span>index<span class="hl opt">);</span>
            <span class="hl opt">++(</span>hash_table<span class="hl opt">[</span>key<span class="hl opt">]);</span>
         <span class="hl opt">}</span>
      <span class="hl opt">}</span>
   <span class="hl opt">}</span>
<span class="hl opt">}</span>


<span class="hl slc">// Build a hash_table, count all key with hash_len = 1, 2</span>
<span class="hl slc">// write the code and percentage frequency</span>
<span class="hl kwc">template</span> <span class="hl opt">&lt;</span><span class="hl kwb">int</span> hash_len<span class="hl opt">,</span> typename Input_T<span class="hl opt">&gt;</span>
<span class="hl kwb">void</span> 
<span class="hl kwd">write_frequencies</span><span class="hl opt">(</span>Input_T <span class="hl kwb">const</span> <span class="hl opt">&amp;</span>input<span class="hl opt">,</span> std<span class="hl opt">::</span>ostream <span class="hl opt">&amp;</span>output<span class="hl opt">)</span>
<span class="hl opt">{</span>
   <span class="hl kwc">typedef</span> Key_T<span class="hl opt">&lt;</span>hash_len<span class="hl opt">&gt;</span>         HKey_T<span class="hl opt">;</span>

   <span class="hl slc">//typedef __gnu_cxx::hash_map &lt;</span>
   <span class="hl slc">//typedef boost::unordered_map &lt;</span>
   <span class="hl kwc">typedef</span> __gnu_pbds<span class="hl opt">::</span>cc_hash_table   <span class="hl opt">&lt;</span>
                                 HKey_T<span class="hl opt">,</span>   <span class="hl slc">// key type</span>
                                 uint<span class="hl opt">,</span>   <span class="hl slc">// map type</span>
                                 HKey_T<span class="hl opt">,</span>   <span class="hl slc">// hash functor</span>
                                 HKey_T   <span class="hl slc">// equal_to functor</span>
                              <span class="hl opt">&gt;</span>    HTable_T<span class="hl opt">;</span>


   <span class="hl kwb">static</span> HTable_T hash_table<span class="hl opt">[</span>MAX_CORE<span class="hl opt">];</span>

   <span class="hl slc">// parallel hashing. Each thread updates its own hash_table.</span>
   <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">omp_get_num_threads</span><span class="hl opt">() &gt;</span> <span class="hl num">1</span><span class="hl opt">)</span>
      calculate_frequency<span class="hl opt">&lt;</span>hash_len<span class="hl opt">,</span> <span class="hl kwa">true</span><span class="hl opt">&gt;(</span>input<span class="hl opt">,</span> hash_table<span class="hl opt">[</span><span class="hl kwd">omp_get_thread_num</span><span class="hl opt">()]);</span>
   <span class="hl kwa">else</span>
      calculate_frequency<span class="hl opt">&lt;</span>hash_len<span class="hl opt">,</span> <span class="hl kwa">false</span><span class="hl opt">&gt;(</span>input<span class="hl opt">,</span> hash_table<span class="hl opt">[</span><span class="hl kwd">omp_get_thread_num</span><span class="hl opt">()]);</span>


   <span class="hl slc">// only the last thread, reaching this code block, to process result</span>
   <span class="hl kwb">static int</span> thread_passed <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
   <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">__sync_add_and_fetch</span><span class="hl opt">(&amp;</span>thread_passed<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">) ==</span> <span class="hl kwd">omp_get_num_threads</span><span class="hl opt">())</span>
   <span class="hl opt">{</span>
      <span class="hl slc">// merge thread local results to main hash_table</span>
      HTable_T <span class="hl opt">&amp;</span><span class="hl kwd">merge_table</span> <span class="hl opt">(</span>hash_table<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">]);</span>

      <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> <span class="hl kwd">omp_get_num_threads</span><span class="hl opt">(); ++</span>i<span class="hl opt">)</span>
      <span class="hl opt">{</span>
         <span class="hl kwd">foreach</span> <span class="hl opt">(</span>typename HTable_T<span class="hl opt">::</span>value_type <span class="hl kwb">const</span> <span class="hl opt">&amp;</span> e<span class="hl opt">,</span> hash_table<span class="hl opt">[</span>i<span class="hl opt">])</span>
            merge_table<span class="hl opt">[</span>e<span class="hl opt">.</span>first<span class="hl opt">] +=</span> e<span class="hl opt">.</span>second<span class="hl opt">;</span>
      <span class="hl opt">}</span>
      
   
      <span class="hl kwc">typedef</span> std<span class="hl opt">::</span>pair<span class="hl opt">&lt;</span>HKey_T<span class="hl opt">,</span> uint<span class="hl opt">&gt;</span>   HValue_T<span class="hl opt">;</span>
      <span class="hl kwc">typedef</span> std<span class="hl opt">::</span>vector<span class="hl opt">&lt;</span>HValue_T<span class="hl opt">&gt;</span>    List_T<span class="hl opt">;</span>

      <span class="hl slc">// Copy results from hash_table to list</span>
      List_T <span class="hl kwd">order_table</span><span class="hl opt">(</span>merge_table<span class="hl opt">.</span><span class="hl kwd">begin</span><span class="hl opt">(),</span> merge_table<span class="hl opt">.</span><span class="hl kwd">end</span><span class="hl opt">());</span>

      <span class="hl opt">{</span>
         <span class="hl slc">// Sort with descending frequency</span>
         <span class="hl kwa">using namespace</span> boost<span class="hl opt">::</span>lambda<span class="hl opt">;</span>
         std<span class="hl opt">::</span><span class="hl kwd">sort</span><span class="hl opt">(</span>   order_table<span class="hl opt">.</span><span class="hl kwd">begin</span><span class="hl opt">(),</span> order_table<span class="hl opt">.</span><span class="hl kwd">end</span><span class="hl opt">(),</span>
            <span class="hl opt">( !(</span><span class="hl kwd">bind</span><span class="hl opt">(&amp;</span>HValue_T<span class="hl opt">::</span>second<span class="hl opt">,</span> _1<span class="hl opt">) &lt;</span> <span class="hl kwd">bind</span><span class="hl opt">(&amp;</span>HValue_T<span class="hl opt">::</span>second<span class="hl opt">,</span> _2<span class="hl opt">)) )   );</span>
      <span class="hl opt">}</span>

      <span class="hl kwb">float const</span> total_char <span class="hl opt">=</span> <span class="hl kwa">static_cast</span><span class="hl opt">&lt;</span><span class="hl kwb">float</span><span class="hl opt">&gt;(</span>input<span class="hl opt">.</span><span class="hl kwd">size</span><span class="hl opt">() -</span> hash_len <span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">);</span>
      boost<span class="hl opt">::</span>format <span class="hl kwd">fmt</span><span class="hl opt">(</span><span class="hl str">&quot;%|1$s| %|2$0.3f|</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">);</span>

      <span class="hl kwd">foreach</span><span class="hl opt">(</span>typename List_T<span class="hl opt">::</span>value_type <span class="hl opt">&amp;</span>e<span class="hl opt">,</span> order_table<span class="hl opt">)</span>
      <span class="hl opt">{</span>
         e<span class="hl opt">.</span>first<span class="hl opt">.</span>key<span class="hl opt">[</span>hash_len<span class="hl opt">] =</span> <span class="hl num">0</span><span class="hl opt">;</span> <span class="hl slc">// ensure proper null terminated</span>
         boost<span class="hl opt">::</span><span class="hl kwd">to_upper</span><span class="hl opt">(</span>e<span class="hl opt">.</span>first<span class="hl opt">.</span>key<span class="hl opt">);</span>

         <span class="hl kwb">float</span> percent <span class="hl opt">=</span> <span class="hl kwa">static_cast</span><span class="hl opt">&lt;</span><span class="hl kwb">float</span><span class="hl opt">&gt;(</span>e<span class="hl opt">.</span>second<span class="hl opt">) *</span> <span class="hl num">100.0</span>f <span class="hl opt">/</span> total_char<span class="hl opt">;</span>
         fmt <span class="hl opt">%</span> e<span class="hl opt">.</span>first<span class="hl opt">.</span>key <span class="hl opt">%</span> percent<span class="hl opt">;</span>

         output <span class="hl opt">&lt;&lt;</span> fmt<span class="hl opt">;</span>
      <span class="hl opt">}</span>

      output <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
      thread_passed <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
   <span class="hl opt">}</span>
<span class="hl opt">}</span>


<span class="hl slc">// Build a hash_table, count all key with hash_len = 3, 4, 6, 12, 18</span>
<span class="hl slc">// Then print a specific sequence's count</span>
<span class="hl kwc">template</span> <span class="hl opt">&lt;</span><span class="hl kwb">int</span> hash_len<span class="hl opt">,</span> typename Input_T<span class="hl opt">&gt;</span>
<span class="hl kwb">void</span> 
<span class="hl kwd">write_frequencies</span><span class="hl opt">(</span>Input_T <span class="hl kwb">const</span> <span class="hl opt">&amp;</span>input<span class="hl opt">,</span> std<span class="hl opt">::</span>ostream <span class="hl opt">&amp;</span>output<span class="hl opt">,</span> <span class="hl kwb">char const</span> <span class="hl opt">*</span>specific<span class="hl opt">)</span>
<span class="hl opt">{</span>
   <span class="hl kwc">typedef</span> Key_T<span class="hl opt">&lt;</span>hash_len<span class="hl opt">&gt;</span>      HKey_T<span class="hl opt">;</span>
   <span class="hl kwc">typedef</span> __gnu_pbds<span class="hl opt">::</span>cc_hash_table   <span class="hl opt">&lt;</span>
                                 HKey_T<span class="hl opt">,</span>   <span class="hl slc">// key type</span>
                                 uint<span class="hl opt">,</span>   <span class="hl slc">// map type</span>
                                 HKey_T<span class="hl opt">,</span>   <span class="hl slc">// hash functor</span>
                                 HKey_T   <span class="hl slc">// equal_to functor</span>
                              <span class="hl opt">&gt;</span>    HTable_T<span class="hl opt">;</span>

   HTable_T local_table<span class="hl opt">;</span>   <span class="hl slc">// private for each thread</span>
   <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">omp_get_num_threads</span><span class="hl opt">() &gt;</span> <span class="hl num">1</span><span class="hl opt">)</span>
      calculate_frequency<span class="hl opt">&lt;</span>hash_len<span class="hl opt">,</span> <span class="hl kwa">true</span><span class="hl opt">&gt;(</span>input<span class="hl opt">,</span> local_table<span class="hl opt">);</span>   <span class="hl slc">// parallel hash</span>
   <span class="hl kwa">else</span>
      calculate_frequency<span class="hl opt">&lt;</span>hash_len<span class="hl opt">,</span> <span class="hl kwa">false</span><span class="hl opt">&gt;(</span>input<span class="hl opt">,</span> local_table<span class="hl opt">);</span>   <span class="hl slc">// parallel hash</span>

   <span class="hl slc">// Build hash key for searching</span>
   HKey_T <span class="hl kwd">printkey</span><span class="hl opt">(</span>specific<span class="hl opt">);</span>

   <span class="hl slc">// count how many matched for specific sequence</span>
   <span class="hl kwb">static</span> uint total_matched <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
   
   <span class="hl opt">{</span>
      <span class="hl slc">// parallel look up</span>
      uint match <span class="hl opt">=</span> local_table<span class="hl opt">[</span>printkey<span class="hl opt">];</span>
      <span class="hl ppc">#pragma omp atomic</span>
      total_matched <span class="hl opt">+=</span> match<span class="hl opt">;</span>
   <span class="hl opt">}</span>

   <span class="hl slc">// The last thread, reaching this code block, will print result</span>
   <span class="hl kwb">static int</span> thread_passed <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
   <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">__sync_add_and_fetch</span><span class="hl opt">(&amp;</span>thread_passed<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">) ==</span> <span class="hl kwd">omp_get_num_threads</span><span class="hl opt">())</span>
   <span class="hl opt">{</span>
      printkey<span class="hl opt">.</span>key<span class="hl opt">[</span>hash_len<span class="hl opt">] =</span> <span class="hl num">0</span><span class="hl opt">;</span> <span class="hl slc">// null terminated</span>
      boost<span class="hl opt">::</span><span class="hl kwd">to_upper</span><span class="hl opt">(</span>printkey<span class="hl opt">.</span>key<span class="hl opt">);</span>

      boost<span class="hl opt">::</span>format <span class="hl kwd">fmt</span><span class="hl opt">(</span><span class="hl str">&quot;%1%</span><span class="hl esc">\t</span><span class="hl str">%2%</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">);</span>
      fmt <span class="hl opt">%</span> total_matched <span class="hl opt">%</span> printkey<span class="hl opt">.</span>key<span class="hl opt">;</span>
      output <span class="hl opt">&lt;&lt;</span> fmt<span class="hl opt">;</span>

      thread_passed <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
      total_matched <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
   <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl kwb">int</span> 
<span class="hl kwd">GetThreadCount</span><span class="hl opt">()</span>
<span class="hl opt">{</span>
   cpu_set_t cs<span class="hl opt">;</span>
   <span class="hl kwd">CPU_ZERO</span><span class="hl opt">(&amp;</span>cs<span class="hl opt">);</span>
   <span class="hl kwd">sched_getaffinity</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl kwa">sizeof</span><span class="hl opt">(</span>cs<span class="hl opt">), &amp;</span>cs<span class="hl opt">);</span>

   <span class="hl kwb">int</span> count <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
   <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> MAX_CORE<span class="hl opt">; ++</span>i<span class="hl opt">)</span>
   <span class="hl opt">{</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">CPU_ISSET</span><span class="hl opt">(</span>i<span class="hl opt">, &amp;</span>cs<span class="hl opt">))</span>
         <span class="hl opt">++</span>count<span class="hl opt">;</span>
   <span class="hl opt">}</span>
   <span class="hl kwa">return</span> count<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwb">int</span> 
<span class="hl kwd">main</span><span class="hl opt">()</span>
<span class="hl opt">{</span>
   <span class="hl kwc">typedef</span> std<span class="hl opt">::</span>vector<span class="hl opt">&lt;</span><span class="hl kwb">char</span><span class="hl opt">&gt;</span> Input_T<span class="hl opt">;</span>
   Input_T input<span class="hl opt">;</span>
   input<span class="hl opt">.</span><span class="hl kwd">reserve</span><span class="hl opt">(</span><span class="hl num">256</span><span class="hl opt">*</span><span class="hl num">1024</span><span class="hl opt">*</span><span class="hl num">1024</span><span class="hl opt">);</span> <span class="hl slc">// 256MB</span>

   <span class="hl kwb">char</span> buffer<span class="hl opt">[</span><span class="hl num">64</span><span class="hl opt">];</span>

   <span class="hl slc">// rule: read line-by-line</span>
   <span class="hl kwa">while</span> <span class="hl opt">(</span><span class="hl kwd">fgets</span><span class="hl opt">(</span>buffer<span class="hl opt">,</span> <span class="hl kwa">sizeof</span><span class="hl opt">(</span>buffer<span class="hl opt">),</span> stdin<span class="hl opt">))</span>
   <span class="hl opt">{</span>
      <span class="hl kwa">if</span><span class="hl opt">(</span><span class="hl kwd">strncmp</span><span class="hl opt">(</span>buffer<span class="hl opt">,</span> <span class="hl str">&quot;&gt;THREE&quot;</span><span class="hl opt">,</span> <span class="hl num">6</span><span class="hl opt">) ==</span> <span class="hl num">0</span><span class="hl opt">)</span>
         <span class="hl kwa">break</span><span class="hl opt">;</span>
   <span class="hl opt">}</span>

   std<span class="hl opt">::</span>back_insert_iterator<span class="hl opt">&lt;</span>Input_T<span class="hl opt">&gt;</span> <span class="hl kwd">back_ite</span> <span class="hl opt">(</span>input<span class="hl opt">);</span>
   <span class="hl kwa">while</span> <span class="hl opt">(</span><span class="hl kwd">fgets</span><span class="hl opt">(</span>buffer<span class="hl opt">,</span> <span class="hl kwa">sizeof</span><span class="hl opt">(</span>buffer<span class="hl opt">),</span> stdin<span class="hl opt">))</span>
   <span class="hl opt">{</span>
      <span class="hl kwb">size_t</span> sz <span class="hl opt">=</span> <span class="hl kwd">strlen</span><span class="hl opt">(</span>buffer<span class="hl opt">);</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>buffer<span class="hl opt">[</span>sz <span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">] ==</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl opt">)</span>
         <span class="hl opt">--</span>sz<span class="hl opt">;</span>

      std<span class="hl opt">::</span><span class="hl kwd">copy</span><span class="hl opt">(</span>buffer<span class="hl opt">,</span> buffer <span class="hl opt">+</span> sz<span class="hl opt">,</span> back_ite<span class="hl opt">);</span>
   <span class="hl opt">}</span>

   std<span class="hl opt">::</span>ostringstream output<span class="hl opt">[</span><span class="hl num">7</span><span class="hl opt">];</span>
   <span class="hl ppc">#pragma omp parallel num_threads(GetThreadCount()) default(shared)</span>
   <span class="hl opt">{</span>
      write_frequencies<span class="hl opt">&lt;</span><span class="hl num">18</span><span class="hl opt">&gt;(</span> input<span class="hl opt">,</span> output<span class="hl opt">[</span><span class="hl num">6</span><span class="hl opt">],</span> <span class="hl str">&quot;ggtattttaatttatagt&quot;</span> <span class="hl opt">);</span>
      write_frequencies<span class="hl opt">&lt;</span><span class="hl num">12</span><span class="hl opt">&gt;(</span> input<span class="hl opt">,</span> output<span class="hl opt">[</span><span class="hl num">5</span><span class="hl opt">],</span> <span class="hl str">&quot;ggtattttaatt&quot;</span> <span class="hl opt">);</span>
      write_frequencies<span class="hl opt">&lt;</span> <span class="hl num">6</span><span class="hl opt">&gt;(</span> input<span class="hl opt">,</span> output<span class="hl opt">[</span><span class="hl num">4</span><span class="hl opt">],</span> <span class="hl str">&quot;ggtatt&quot;</span> <span class="hl opt">);</span>
      write_frequencies<span class="hl opt">&lt;</span> <span class="hl num">4</span><span class="hl opt">&gt;(</span> input<span class="hl opt">,</span> output<span class="hl opt">[</span><span class="hl num">3</span><span class="hl opt">],</span> <span class="hl str">&quot;ggta&quot;</span> <span class="hl opt">);</span>
      write_frequencies<span class="hl opt">&lt;</span> <span class="hl num">3</span><span class="hl opt">&gt;(</span> input<span class="hl opt">,</span> output<span class="hl opt">[</span><span class="hl num">2</span><span class="hl opt">],</span> <span class="hl str">&quot;ggt&quot;</span> <span class="hl opt">);</span>
      write_frequencies<span class="hl opt">&lt;</span> <span class="hl num">2</span><span class="hl opt">&gt;(</span> input<span class="hl opt">,</span> output<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">] );</span>
      write_frequencies<span class="hl opt">&lt;</span> <span class="hl num">1</span><span class="hl opt">&gt;(</span> input<span class="hl opt">,</span> output<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] );</span>
   <span class="hl opt">}</span>

   <span class="hl kwd">foreach</span><span class="hl opt">(</span>std<span class="hl opt">::</span>ostringstream <span class="hl kwb">const</span><span class="hl opt">&amp;</span> s<span class="hl opt">,</span> output<span class="hl opt">)</span>
      std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> s<span class="hl opt">.</span><span class="hl kwd">str</span><span class="hl opt">();</span>
      
   <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>

