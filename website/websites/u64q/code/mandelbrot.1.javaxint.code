<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com">   contributed by Stefan Krause</span>
<span class="hl com">   slightly modified by Chad Whipkey</span>
<span class="hl com">*/</span>

<span class="hl kwa">import</span> java<span class="hl sym">.</span>io<span class="hl sym">.</span><span class="hl kwc">IOException</span><span class="hl sym">;</span>
<span class="hl kwa">import</span> java<span class="hl sym">.</span>io<span class="hl sym">.</span><span class="hl kwc">PrintStream</span><span class="hl sym">;</span>

<span class="hl kwa">class</span> mandelbrot <span class="hl sym">{</span>

   <span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwc">String</span><span class="hl sym">[]</span> args<span class="hl sym">)</span> <span class="hl kwa">throws</span> <span class="hl kwc">Exception</span> <span class="hl sym">{</span>
       <span class="hl kwa">new</span> <span class="hl kwd">Mandelbrot</span><span class="hl sym">(</span><span class="hl kwc">Integer</span><span class="hl sym">.</span><span class="hl kwd">parseInt</span><span class="hl sym">(</span>args<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">])).</span><span class="hl kwd">compute</span><span class="hl sym">();</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">public static class</span> Mandelbrot <span class="hl sym">{</span>
       <span class="hl kwa">private static final</span> <span class="hl kwb">int</span> BUFFER_SIZE <span class="hl sym">=</span> <span class="hl num">8192</span><span class="hl sym">;</span>

       <span class="hl kwa">public</span> <span class="hl kwd">Mandelbrot</span><span class="hl sym">(</span><span class="hl kwb">int</span> size<span class="hl sym">) {</span>
         <span class="hl kwa">this</span><span class="hl sym">.</span>size <span class="hl sym">=</span> size<span class="hl sym">;</span>
         fac <span class="hl sym">=</span> <span class="hl num">2.0</span> <span class="hl sym">/</span> size<span class="hl sym">;</span>
         out <span class="hl sym">=</span> <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">;</span>
         shift <span class="hl sym">=</span> size <span class="hl sym">%</span> <span class="hl num">8</span> <span class="hl sym">==</span> <span class="hl num">0</span> ? <span class="hl num">0</span> <span class="hl sym">: (</span><span class="hl num">8</span><span class="hl sym">-</span> size <span class="hl sym">%</span> <span class="hl num">8</span><span class="hl sym">);</span>
      <span class="hl sym">}</span>
      <span class="hl kwa">final</span> <span class="hl kwb">int</span> size<span class="hl sym">;</span>
      <span class="hl kwa">final</span> <span class="hl kwc">PrintStream</span> out<span class="hl sym">;</span>
      <span class="hl kwa">final</span> <span class="hl kwb">byte</span> <span class="hl sym">[]</span> buf <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwb">byte</span><span class="hl sym">[</span>BUFFER_SIZE<span class="hl sym">];</span>
      <span class="hl kwb">int</span> bufLen <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
      <span class="hl kwa">final</span> <span class="hl kwb">double</span> fac<span class="hl sym">;</span>
      <span class="hl kwa">final</span> <span class="hl kwb">int</span> shift<span class="hl sym">;</span>

      <span class="hl kwa">public</span> <span class="hl kwb">void</span> <span class="hl kwd">compute</span><span class="hl sym">()</span> <span class="hl kwa">throws</span> <span class="hl kwc">IOException</span>
      <span class="hl sym">{</span>
         out<span class="hl sym">.</span><span class="hl kwd">format</span><span class="hl sym">(</span><span class="hl str">&quot;P4</span><span class="hl esc">\n</span><span class="hl str">%d %d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span>size<span class="hl sym">,</span>size<span class="hl sym">);</span>
         <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> y <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> y<span class="hl sym">&lt;</span>size<span class="hl sym">;</span> y<span class="hl sym">++)</span>
            <span class="hl kwd">computeRow</span><span class="hl sym">(</span>y<span class="hl sym">);</span>
         out<span class="hl sym">.</span><span class="hl kwd">write</span><span class="hl sym">(</span> buf<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> bufLen<span class="hl sym">);</span>
         out<span class="hl sym">.</span><span class="hl kwd">close</span><span class="hl sym">();</span>
      <span class="hl sym">}</span>

      <span class="hl kwa">private</span> <span class="hl kwb">void</span> <span class="hl kwd">computeRow</span><span class="hl sym">(</span><span class="hl kwb">int</span> y<span class="hl sym">)</span> <span class="hl kwa">throws</span> <span class="hl kwc">IOException</span>
      <span class="hl sym">{</span>
         <span class="hl kwb">int</span> bits <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>

         <span class="hl kwa">final</span> <span class="hl kwb">double</span> Ci <span class="hl sym">= (</span>y<span class="hl sym">*</span>fac <span class="hl sym">-</span> <span class="hl num">1.0</span><span class="hl sym">);</span>
          <span class="hl kwa">final</span> <span class="hl kwb">byte</span><span class="hl sym">[]</span> bufLocal <span class="hl sym">=</span> buf<span class="hl sym">;</span>
          <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> x <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> x<span class="hl sym">&lt;</span>size<span class="hl sym">;</span>x<span class="hl sym">++) {</span>
            <span class="hl kwb">double</span> Zr <span class="hl sym">=</span> <span class="hl num">0.0</span><span class="hl sym">;</span>
            <span class="hl kwb">double</span> Zi <span class="hl sym">=</span> <span class="hl num">0.0</span><span class="hl sym">;</span>
            <span class="hl kwb">double</span> Cr <span class="hl sym">= (</span>x<span class="hl sym">*</span>fac <span class="hl sym">-</span> <span class="hl num">1.5</span><span class="hl sym">);</span>
            <span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">50</span><span class="hl sym">;</span>
            <span class="hl kwb">double</span> ZrN <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
            <span class="hl kwb">double</span> ZiN <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
            <span class="hl kwa">do</span> <span class="hl sym">{</span>
               Zi <span class="hl sym">=</span> <span class="hl num">2.0</span> <span class="hl sym">*</span> Zr <span class="hl sym">*</span> Zi <span class="hl sym">+</span> Ci<span class="hl sym">;</span>
               Zr <span class="hl sym">=</span> ZrN <span class="hl sym">-</span> ZiN <span class="hl sym">+</span> Cr<span class="hl sym">;</span>
               ZiN <span class="hl sym">=</span> Zi <span class="hl sym">*</span> Zi<span class="hl sym">;</span>
               ZrN <span class="hl sym">=</span> Zr <span class="hl sym">*</span> Zr<span class="hl sym">;</span>
            <span class="hl sym">}</span> <span class="hl kwa">while</span> <span class="hl sym">(!(</span>ZiN <span class="hl sym">+</span> ZrN <span class="hl sym">&gt;</span> <span class="hl num">4.0</span><span class="hl sym">) &amp;&amp; --</span>i <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">);</span>

            bits <span class="hl sym">=</span> bits <span class="hl sym">&lt;&lt;</span> <span class="hl num">1</span><span class="hl sym">;</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>i <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">)</span> bits<span class="hl sym">++;</span>

            <span class="hl kwa">if</span> <span class="hl sym">(</span>x<span class="hl sym">%</span><span class="hl num">8</span> <span class="hl sym">==</span> <span class="hl num">7</span><span class="hl sym">) {</span>
                bufLocal<span class="hl sym">[</span>bufLen<span class="hl sym">++] = (</span><span class="hl kwb">byte</span><span class="hl sym">)</span> bits<span class="hl sym">;</span>
                <span class="hl kwa">if</span> <span class="hl sym">(</span> bufLen <span class="hl sym">==</span> BUFFER_SIZE<span class="hl sym">) {</span>
                    out<span class="hl sym">.</span><span class="hl kwd">write</span><span class="hl sym">(</span>bufLocal<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> BUFFER_SIZE<span class="hl sym">);</span>
                    bufLen <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
                <span class="hl sym">}</span>
               bits <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
            <span class="hl sym">}</span>
         <span class="hl sym">}</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span>shift<span class="hl sym">!=</span><span class="hl num">0</span><span class="hl sym">) {</span>
            bits <span class="hl sym">=</span> bits <span class="hl sym">&lt;&lt;</span> shift<span class="hl sym">;</span>
            bufLocal<span class="hl sym">[</span>bufLen<span class="hl sym">++] = (</span><span class="hl kwb">byte</span><span class="hl sym">)</span> bits<span class="hl sym">;</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span> bufLen <span class="hl sym">==</span> BUFFER_SIZE<span class="hl sym">) {</span>
                out<span class="hl sym">.</span><span class="hl kwd">write</span><span class="hl sym">(</span>bufLocal<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> BUFFER_SIZE<span class="hl sym">);</span>
                bufLen <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
            <span class="hl sym">}</span>
         <span class="hl sym">}</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>
