<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * contributed by Isaac Gouy</span>
<span class="hl com"> * modified by Antti Lankila for generics</span>
<span class="hl com"> * modified by A.Nahr for performance and throwing unneccesary stuff out</span>
<span class="hl com"> * remove unsafe code &amp; add multithread by The Anh Tran</span>
<span class="hl com"> */</span>

<span class="hl kwa">using</span> System<span class="hl opt">;</span>
<span class="hl kwa">using</span> System<span class="hl opt">.</span>IO<span class="hl opt">;</span>
<span class="hl kwa">using</span> System<span class="hl opt">.</span>Collections<span class="hl opt">.</span>Generic<span class="hl opt">;</span>
<span class="hl kwa">using</span> System<span class="hl opt">.</span>Text<span class="hl opt">;</span>
<span class="hl kwa">using</span> System<span class="hl opt">.</span>Threading<span class="hl opt">;</span>

<span class="hl kwa">public class</span> knucleotide
<span class="hl opt">{</span>
    <span class="hl kwa">static private</span> <span class="hl kwb">string</span>   input<span class="hl opt">;</span>
    <span class="hl kwa">static private</span> <span class="hl kwb">int</span>      task_count <span class="hl opt">=</span> <span class="hl num">7</span><span class="hl opt">;</span>
    <span class="hl kwa">static private</span> <span class="hl kwb">string</span><span class="hl opt">[]</span> result <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwb">string</span><span class="hl opt">[</span><span class="hl num">7</span><span class="hl opt">];</span>

   <span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">Main</span><span class="hl opt">(</span><span class="hl com">/*string[] arg*/</span><span class="hl opt">)</span>
   <span class="hl opt">{</span>
      StreamReader source <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">StreamReader</span><span class="hl opt">(</span>Console<span class="hl opt">.</span><span class="hl kwd">OpenStandardInput</span><span class="hl opt">());</span>
        
        <span class="hl kwb">string</span> line<span class="hl opt">;</span>
      <span class="hl kwa">while</span> <span class="hl opt">((</span>line <span class="hl opt">=</span> source<span class="hl opt">.</span><span class="hl kwd">ReadLine</span><span class="hl opt">()) !=</span> <span class="hl kwa">null</span><span class="hl opt">)</span>
      <span class="hl opt">{</span>
         <span class="hl kwa">if</span> <span class="hl opt">(</span>line<span class="hl opt">.</span><span class="hl kwd">StartsWith</span><span class="hl opt">(</span><span class="hl str">&quot;&gt;THREE&quot;</span><span class="hl opt">,</span> StringComparison<span class="hl opt">.</span>CurrentCultureIgnoreCase<span class="hl opt">))</span>
            <span class="hl kwa">break</span><span class="hl opt">;</span>
      <span class="hl opt">}</span>

      StringBuilder buf <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">StringBuilder</span><span class="hl opt">(</span><span class="hl num">64</span> <span class="hl opt">*</span> <span class="hl num">1024</span> <span class="hl opt">*</span> <span class="hl num">1024</span><span class="hl opt">);</span> <span class="hl slc">// 64mb</span>
      <span class="hl kwa">while</span> <span class="hl opt">((</span>line <span class="hl opt">=</span> source<span class="hl opt">.</span><span class="hl kwd">ReadLine</span><span class="hl opt">()) !=</span> <span class="hl kwa">null</span><span class="hl opt">)</span>
         buf<span class="hl opt">.</span><span class="hl kwd">Append</span><span class="hl opt">(</span>line<span class="hl opt">);</span>

        input <span class="hl opt">=</span> buf<span class="hl opt">.</span><span class="hl kwd">ToString</span><span class="hl opt">();</span>
      buf <span class="hl opt">=</span> <span class="hl kwa">null</span><span class="hl opt">;</span>

        Thread<span class="hl opt">[]</span> threads <span class="hl opt">=</span> <span class="hl kwa">new</span> Thread<span class="hl opt">[</span>Environment<span class="hl opt">.</span>ProcessorCount<span class="hl opt">];</span>
        <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> threads<span class="hl opt">.</span>Length<span class="hl opt">;</span> i<span class="hl opt">++)</span>
        <span class="hl opt">{</span>
            threads<span class="hl opt">[</span>i<span class="hl opt">] =</span> <span class="hl kwa">new</span> <span class="hl kwd">Thread</span><span class="hl opt">(</span>worker<span class="hl opt">);</span>
            threads<span class="hl opt">[</span>i<span class="hl opt">].</span><span class="hl kwd">Start</span><span class="hl opt">();</span>
        <span class="hl opt">}</span>

        <span class="hl kwa">foreach</span> <span class="hl opt">(</span>Thread t <span class="hl kwa">in</span> threads<span class="hl opt">)</span>
            t<span class="hl opt">.</span><span class="hl kwd">Join</span><span class="hl opt">();</span>
        <span class="hl kwa">foreach</span> <span class="hl opt">(</span><span class="hl kwb">string</span> s <span class="hl kwa">in</span> result<span class="hl opt">)</span>
            Console<span class="hl opt">.</span>Out<span class="hl opt">.</span><span class="hl kwd">WriteLine</span><span class="hl opt">(</span>s<span class="hl opt">);</span>
   <span class="hl opt">}</span>

    <span class="hl kwa">private static</span> <span class="hl kwb">void</span> <span class="hl kwd">worker</span><span class="hl opt">()</span>
    <span class="hl opt">{</span>
        <span class="hl kwb">int</span> j<span class="hl opt">;</span>
        <span class="hl kwa">while</span> <span class="hl opt">((</span>j <span class="hl opt">=</span> Interlocked<span class="hl opt">.</span><span class="hl kwd">Decrement</span><span class="hl opt">(</span><span class="hl kwa">ref</span> task_count<span class="hl opt">)) &gt;=</span> <span class="hl num">0</span><span class="hl opt">)</span>
        <span class="hl opt">{</span>
            <span class="hl kwa">switch</span> <span class="hl opt">(</span>j<span class="hl opt">)</span>
            <span class="hl opt">{</span>
                <span class="hl kwa">case</span> <span class="hl num">0</span><span class="hl opt">:</span>
                    result<span class="hl opt">[</span>j<span class="hl opt">] =</span> <span class="hl kwd">WriteFrequencies</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">);</span>
                    <span class="hl kwa">break</span><span class="hl opt">;</span>
                <span class="hl kwa">case</span> <span class="hl num">1</span><span class="hl opt">:</span>
                    result<span class="hl opt">[</span>j<span class="hl opt">] =</span> <span class="hl kwd">WriteFrequencies</span><span class="hl opt">(</span><span class="hl num">2</span><span class="hl opt">);</span>
                    <span class="hl kwa">break</span><span class="hl opt">;</span>
                <span class="hl kwa">case</span> <span class="hl num">2</span><span class="hl opt">:</span>
                    result<span class="hl opt">[</span>j<span class="hl opt">] =</span> <span class="hl kwd">WriteCount</span><span class="hl opt">(</span><span class="hl str">&quot;ggt&quot;</span><span class="hl opt">);</span>
                    <span class="hl kwa">break</span><span class="hl opt">;</span>
                <span class="hl kwa">case</span> <span class="hl num">3</span><span class="hl opt">:</span>
                    result<span class="hl opt">[</span>j<span class="hl opt">] =</span> <span class="hl kwd">WriteCount</span><span class="hl opt">(</span><span class="hl str">&quot;ggta&quot;</span><span class="hl opt">);</span>
                    <span class="hl kwa">break</span><span class="hl opt">;</span>
                <span class="hl kwa">case</span> <span class="hl num">4</span><span class="hl opt">:</span>
                    result<span class="hl opt">[</span>j<span class="hl opt">] =</span> <span class="hl kwd">WriteCount</span><span class="hl opt">(</span><span class="hl str">&quot;ggtatt&quot;</span><span class="hl opt">);</span>
                    <span class="hl kwa">break</span><span class="hl opt">;</span>
                <span class="hl kwa">case</span> <span class="hl num">5</span><span class="hl opt">:</span>
                    result<span class="hl opt">[</span>j<span class="hl opt">] =</span> <span class="hl kwd">WriteCount</span><span class="hl opt">(</span><span class="hl str">&quot;ggtattttaatt&quot;</span><span class="hl opt">);</span>
                    <span class="hl kwa">break</span><span class="hl opt">;</span>
                <span class="hl kwa">case</span> <span class="hl num">6</span><span class="hl opt">:</span>
                    result<span class="hl opt">[</span>j<span class="hl opt">] =</span> <span class="hl kwd">WriteCount</span><span class="hl opt">(</span><span class="hl str">&quot;ggtattttaatttatagt&quot;</span><span class="hl opt">);</span>
                    <span class="hl kwa">break</span><span class="hl opt">;</span>
            <span class="hl opt">}</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">private static</span> <span class="hl kwb">string</span> <span class="hl kwd">WriteFrequencies</span><span class="hl opt">(</span><span class="hl kwb">int</span> nucleotideLength<span class="hl opt">)</span>
   <span class="hl opt">{</span>
        Dictionary<span class="hl opt">&lt;</span>Key<span class="hl opt">,</span> Value<span class="hl opt">&gt;</span> frequencies <span class="hl opt">=</span> <span class="hl kwd">GenerateFrequencies</span><span class="hl opt">(</span>nucleotideLength<span class="hl opt">);</span>

        List<span class="hl opt">&lt;</span>KeyValuePair<span class="hl opt">&lt;</span>Key<span class="hl opt">,</span> Value<span class="hl opt">&gt;&gt;</span> items <span class="hl opt">=</span> <span class="hl kwa">new</span> List<span class="hl opt">&lt;</span>KeyValuePair<span class="hl opt">&lt;</span>Key<span class="hl opt">,</span> Value<span class="hl opt">&gt;&gt;(</span>frequencies<span class="hl opt">);</span>
      items<span class="hl opt">.</span><span class="hl kwd">Sort</span><span class="hl opt">(</span>SortByFrequencyAndCode<span class="hl opt">);</span>

        StringBuilder buf <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">StringBuilder</span><span class="hl opt">();</span>
      <span class="hl kwb">int</span> sum <span class="hl opt">=</span> input<span class="hl opt">.</span>Length <span class="hl opt">-</span> nucleotideLength <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span>

        <span class="hl kwa">foreach</span> <span class="hl opt">(</span>KeyValuePair<span class="hl opt">&lt;</span>Key<span class="hl opt">,</span> Value<span class="hl opt">&gt;</span> element <span class="hl kwa">in</span> items<span class="hl opt">)</span>
      <span class="hl opt">{</span>
         <span class="hl kwb">float</span> percent <span class="hl opt">=</span> element<span class="hl opt">.</span>Value<span class="hl opt">.</span><span class="hl kwa">value</span> <span class="hl opt">*</span> <span class="hl num">100.0</span>f <span class="hl opt">/</span> sum<span class="hl opt">;</span>
            buf<span class="hl opt">.</span><span class="hl kwd">AppendFormat</span><span class="hl opt">(</span><span class="hl str">&quot;{0} {1:f3}</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> element<span class="hl opt">.</span>Key<span class="hl opt">,</span> percent<span class="hl opt">);</span>
      <span class="hl opt">}</span>

        <span class="hl kwa">return</span> buf<span class="hl opt">.</span><span class="hl kwd">ToString</span><span class="hl opt">();</span>
   <span class="hl opt">}</span>

   <span class="hl kwa">private static</span> <span class="hl kwb">string</span> <span class="hl kwd">WriteCount</span><span class="hl opt">(</span><span class="hl kwb">string</span> nucleotideFragment<span class="hl opt">)</span>
   <span class="hl opt">{</span>
        Dictionary<span class="hl opt">&lt;</span>Key<span class="hl opt">,</span> Value<span class="hl opt">&gt;</span> frequencies <span class="hl opt">=</span> <span class="hl kwd">GenerateFrequencies</span><span class="hl opt">(</span>nucleotideFragment<span class="hl opt">.</span>Length<span class="hl opt">);</span>
        Key specific <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Key</span><span class="hl opt">(</span>nucleotideFragment<span class="hl opt">);</span>
      
        <span class="hl kwb">int</span> count <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>frequencies<span class="hl opt">.</span><span class="hl kwd">ContainsKey</span><span class="hl opt">(</span>specific<span class="hl opt">))</span>
         count <span class="hl opt">=</span> frequencies<span class="hl opt">[</span>specific<span class="hl opt">].</span><span class="hl kwa">value</span><span class="hl opt">;</span>
      
        <span class="hl kwa">return</span> <span class="hl kwb">string</span><span class="hl opt">.</span><span class="hl kwd">Format</span><span class="hl opt">(</span><span class="hl str">&quot;{0}</span><span class="hl esc">\t</span><span class="hl str">{1}&quot;</span><span class="hl opt">,</span> count<span class="hl opt">,</span> nucleotideFragment<span class="hl opt">.</span><span class="hl kwd">ToUpper</span><span class="hl opt">());</span>
   <span class="hl opt">}</span>

    <span class="hl kwa">private static</span> Dictionary<span class="hl opt">&lt;</span>Key<span class="hl opt">,</span> Value<span class="hl opt">&gt;</span> <span class="hl kwd">GenerateFrequencies</span><span class="hl opt">(</span><span class="hl kwb">int</span> frame_size<span class="hl opt">)</span>
   <span class="hl opt">{</span>
        Dictionary<span class="hl opt">&lt;</span>Key<span class="hl opt">,</span> Value<span class="hl opt">&gt;</span> frequencies <span class="hl opt">=</span> <span class="hl kwa">new</span> Dictionary<span class="hl opt">&lt;</span>Key<span class="hl opt">,</span> Value<span class="hl opt">&gt;();</span>
        
        Key k <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Key</span><span class="hl opt">(</span>frame_size<span class="hl opt">);</span>
        Value val<span class="hl opt">;</span>

        <span class="hl kwb">int</span> end <span class="hl opt">=</span> input<span class="hl opt">.</span>Length <span class="hl opt">-</span> frame_size <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span>
        <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> index <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> index <span class="hl opt">&lt;</span> end<span class="hl opt">;</span> index<span class="hl opt">++)</span>
        <span class="hl opt">{</span>
            k<span class="hl opt">.</span><span class="hl kwd">ReHash</span><span class="hl opt">(</span>input<span class="hl opt">,</span> index<span class="hl opt">);</span>

            frequencies<span class="hl opt">.</span><span class="hl kwd">TryGetValue</span><span class="hl opt">(</span>k<span class="hl opt">,</span> out val<span class="hl opt">);</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>val <span class="hl opt">!=</span> <span class="hl kwa">null</span><span class="hl opt">)</span>   <span class="hl slc">// must use a class type in order to compare reference with null</span>
                val<span class="hl opt">.</span><span class="hl kwa">value</span><span class="hl opt">++;</span>   <span class="hl slc">// if we use 'int', this step require 1 more lookup</span>
            <span class="hl kwa">else</span>
                frequencies<span class="hl opt">.</span><span class="hl kwd">Add</span><span class="hl opt">(</span><span class="hl kwa">new</span> <span class="hl kwd">Key</span><span class="hl opt">(</span>k<span class="hl opt">),</span> <span class="hl kwa">new</span> <span class="hl kwd">Value</span><span class="hl opt">());</span>
        <span class="hl opt">}</span>
        <span class="hl kwa">return</span> frequencies<span class="hl opt">;</span>
   <span class="hl opt">}</span>

   <span class="hl kwa">private static</span> <span class="hl kwb">int</span> <span class="hl kwd">SortByFrequencyAndCode</span><span class="hl opt">(</span>KeyValuePair<span class="hl opt">&lt;</span>Key<span class="hl opt">,</span> Value<span class="hl opt">&gt;</span> item1<span class="hl opt">,</span> KeyValuePair<span class="hl opt">&lt;</span>Key<span class="hl opt">,</span> Value<span class="hl opt">&gt;</span> item2<span class="hl opt">)</span>
   <span class="hl opt">{</span>
      <span class="hl kwb">int</span> comparison <span class="hl opt">=</span> item2<span class="hl opt">.</span>Value<span class="hl opt">.</span><span class="hl kwa">value</span> <span class="hl opt">-</span> item1<span class="hl opt">.</span>Value<span class="hl opt">.</span><span class="hl kwa">value</span><span class="hl opt">;</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>comparison <span class="hl opt">==</span> <span class="hl num">0</span><span class="hl opt">)</span> 
            <span class="hl kwa">return</span> item1<span class="hl opt">.</span>Key<span class="hl opt">.</span>key<span class="hl opt">.</span><span class="hl kwd">ToString</span><span class="hl opt">().</span><span class="hl kwd">CompareTo</span><span class="hl opt">(</span>item2<span class="hl opt">.</span>Key<span class="hl opt">.</span>key<span class="hl opt">.</span><span class="hl kwd">ToString</span><span class="hl opt">());</span>
      <span class="hl kwa">else</span> 
            <span class="hl kwa">return</span> comparison<span class="hl opt">;</span>
   <span class="hl opt">}</span>

    <span class="hl kwa">internal class</span> Key
    <span class="hl opt">{</span>
        <span class="hl kwa">internal</span> <span class="hl kwb">int</span>    hash<span class="hl opt">;</span>
        <span class="hl kwa">internal</span> <span class="hl kwb">char</span><span class="hl opt">[]</span> key<span class="hl opt">;</span>

        <span class="hl kwa">public</span> <span class="hl kwd">Key</span><span class="hl opt">(</span><span class="hl kwb">int</span> frame<span class="hl opt">)</span>
        <span class="hl opt">{</span>
            key <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwb">char</span><span class="hl opt">[</span>frame<span class="hl opt">];</span>
        <span class="hl opt">}</span>

        <span class="hl kwa">public</span> <span class="hl kwd">Key</span><span class="hl opt">(</span>Key k<span class="hl opt">)</span>
        <span class="hl opt">{</span>
            hash <span class="hl opt">=</span> k<span class="hl opt">.</span>hash<span class="hl opt">;</span>
            <span class="hl kwa">this</span><span class="hl opt">.</span>key <span class="hl opt">= (</span><span class="hl kwb">char</span><span class="hl opt">[])</span>k<span class="hl opt">.</span>key<span class="hl opt">.</span><span class="hl kwd">Clone</span><span class="hl opt">();</span>
        <span class="hl opt">}</span>
        
        <span class="hl kwa">public</span> <span class="hl kwd">Key</span><span class="hl opt">(</span><span class="hl kwb">string</span> s<span class="hl opt">)</span>
        <span class="hl opt">{</span>
            key <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwb">char</span><span class="hl opt">[</span>s<span class="hl opt">.</span>Length<span class="hl opt">];</span>
            <span class="hl kwd">ReHash</span><span class="hl opt">(</span>s<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">);</span>
        <span class="hl opt">}</span>
        <span class="hl kwa">public</span> <span class="hl kwb">void</span> <span class="hl kwd">ReHash</span><span class="hl opt">(</span><span class="hl kwb">string</span> k<span class="hl opt">,</span> <span class="hl kwb">int</span> offset<span class="hl opt">)</span>
        <span class="hl opt">{</span>
            hash <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
            <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> key<span class="hl opt">.</span>Length<span class="hl opt">;</span> i<span class="hl opt">++)</span>
            <span class="hl opt">{</span>
                key<span class="hl opt">[</span>i<span class="hl opt">] =</span> k<span class="hl opt">[</span>offset <span class="hl opt">+</span> i<span class="hl opt">];</span>
                hash <span class="hl opt">=</span> hash <span class="hl opt">*</span> <span class="hl num">31</span> <span class="hl opt">+</span> key<span class="hl opt">[</span>i<span class="hl opt">];</span>
            <span class="hl opt">}</span>
        <span class="hl opt">}</span>

        <span class="hl kwa">public override</span> <span class="hl kwb">int</span> <span class="hl kwd">GetHashCode</span><span class="hl opt">()</span>
        <span class="hl opt">{</span>
            <span class="hl kwa">return</span> hash<span class="hl opt">;</span>
        <span class="hl opt">}</span>

        <span class="hl kwa">public override</span> <span class="hl kwb">string</span> <span class="hl kwd">ToString</span><span class="hl opt">()</span>
        <span class="hl opt">{</span>
            <span class="hl kwa">return new</span> <span class="hl kwb">string</span><span class="hl opt">(</span>key<span class="hl opt">).</span><span class="hl kwd">ToUpper</span><span class="hl opt">();</span>
        <span class="hl opt">}</span>

        <span class="hl kwa">public override</span> <span class="hl kwb">bool</span> <span class="hl kwd">Equals</span><span class="hl opt">(</span><span class="hl kwb">object</span> k<span class="hl opt">)</span>
        <span class="hl opt">{</span>
            <span class="hl kwa">return this</span><span class="hl opt">.</span>hash <span class="hl opt">== ((</span>Key<span class="hl opt">)</span>k<span class="hl opt">).</span>hash<span class="hl opt">;</span>
        <span class="hl opt">}</span>
        <span class="hl com">/*</span>
<span class="hl com">        public bool Equals (Key k)</span>
<span class="hl com">        {</span>
<span class="hl com">         return this.hash == k.hash;</span>
<span class="hl com">        }</span>
<span class="hl com">        */</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">internal class</span> Value
    <span class="hl opt">{</span>
        <span class="hl kwa">internal</span> <span class="hl kwb">int</span> <span class="hl kwa">value</span><span class="hl opt">;</span>

        <span class="hl kwa">public</span> <span class="hl kwd">Value</span><span class="hl opt">()</span>
        <span class="hl opt">{</span>
            <span class="hl kwa">value</span> <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span>
<span class="hl opt">}</span>

