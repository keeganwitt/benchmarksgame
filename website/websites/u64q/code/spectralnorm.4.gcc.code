<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * Original C contributed by Sebastien Loisel</span>
<span class="hl com"> * Conversion to C++ by Jon Harrop</span>
<span class="hl com"> * OpenMP parallelize by The Anh Tran</span>
<span class="hl com"> * Add SSE by The Anh Tran</span>
<span class="hl com"> * Reconversion into C by Dan Farina</span>
<span class="hl com"> */</span>

<span class="hl ppc">#define _GNU_SOURCE</span>
<span class="hl ppc">#include &lt;omp.h&gt;</span>
<span class="hl ppc">#include &lt;math.h&gt;</span>
<span class="hl ppc">#include &lt;sched.h&gt;</span>
<span class="hl ppc">#include &lt;stdio.h&gt;</span>
<span class="hl ppc">#include &lt;stdlib.h&gt;</span>

<span class="hl ppc">#define false 0</span>
<span class="hl ppc">#define true  1</span>

<span class="hl com">/* define SIMD data type. 2 doubles encapsulated in one XMM register */</span>
<span class="hl kwc">typedef</span> <span class="hl kwb">double</span> v2dt <span class="hl kwd">__attribute__</span><span class="hl opt">((</span><span class="hl kwd">vector_size</span><span class="hl opt">(</span><span class="hl num">16</span><span class="hl opt">)));</span>
<span class="hl kwb">static const</span> v2dt v1 <span class="hl opt">= {</span><span class="hl num">1.0</span><span class="hl opt">,</span> <span class="hl num">1.0</span><span class="hl opt">};</span>

<span class="hl com">/* parameter for evaluate functions */</span>
<span class="hl kwb">struct</span> Param
<span class="hl opt">{</span>
    <span class="hl kwb">double</span><span class="hl opt">*</span> u<span class="hl opt">;</span>          <span class="hl com">/* source vector */</span>
    <span class="hl kwb">double</span><span class="hl opt">*</span> tmp<span class="hl opt">;</span>        <span class="hl com">/* temporary */</span>
    <span class="hl kwb">double</span><span class="hl opt">*</span> v<span class="hl opt">;</span>          <span class="hl com">/* destination vector */</span>

    <span class="hl kwb">int</span> N<span class="hl opt">;</span>              <span class="hl com">/* source/destination vector length */</span>
    <span class="hl kwb">int</span> N2<span class="hl opt">;</span>             <span class="hl com">/* = N/2 */</span>

    <span class="hl kwb">int</span> r_begin<span class="hl opt">;</span>        <span class="hl com">/* working range of each thread */</span>
    <span class="hl kwb">int</span> r_end<span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl com">/* Return: 1.0 / (i + j) * (i + j +1) / 2 + i + 1; */</span>
<span class="hl kwb">static double</span>
<span class="hl kwd">eval_A</span><span class="hl opt">(</span><span class="hl kwb">int</span> i<span class="hl opt">,</span> <span class="hl kwb">int</span> j<span class="hl opt">)</span>
<span class="hl opt">{</span>
    <span class="hl com">/*</span>
<span class="hl com">     * 1.0 / (i + j) * (i + j +1) / 2 + i + 1;</span>
<span class="hl com">     * n * (n+1) is even number. Therefore, just (&gt;&gt; 1) for (/2)</span>
<span class="hl com">     */</span>
    <span class="hl kwb">int</span> d <span class="hl opt">= (((</span>i<span class="hl opt">+</span>j<span class="hl opt">) * (</span>i<span class="hl opt">+</span>j<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)) &gt;&gt;</span> <span class="hl num">1</span><span class="hl opt">) +</span> i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">;</span>

    <span class="hl kwa">return</span> <span class="hl num">1.0</span> <span class="hl opt">/</span> d<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl com">/*</span>
<span class="hl com"> * Return type: 2 doubles in xmm register [double1, double2]</span>
<span class="hl com"> *  double1 = 1.0 / (i + j) * (i + j +1) / 2 + i + 1;</span>
<span class="hl com"> *  double2 = 1.0 / (i+1 + j) * (i+1 + j +1) / 2 + i+1 + 1;</span>
<span class="hl com"> */</span>
<span class="hl kwb">static</span> v2dt
<span class="hl kwd">eval_A_i</span><span class="hl opt">(</span><span class="hl kwb">int</span> i<span class="hl opt">,</span> <span class="hl kwb">int</span> j<span class="hl opt">)</span>
<span class="hl opt">{</span>
    <span class="hl kwb">int</span> d1 <span class="hl opt">= (((</span>i<span class="hl opt">+</span>j<span class="hl opt">) * (</span>i<span class="hl opt">+</span>j<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)) &gt;&gt;</span> <span class="hl num">1</span><span class="hl opt">) +</span> i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">;</span>
    <span class="hl kwb">int</span> d2 <span class="hl opt">= (((</span>i<span class="hl opt">+</span><span class="hl num">1</span> <span class="hl opt">+</span>j<span class="hl opt">) * (</span>i<span class="hl opt">+</span><span class="hl num">1</span> <span class="hl opt">+</span>j<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)) &gt;&gt;</span> <span class="hl num">1</span><span class="hl opt">) + (</span>i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">) +</span><span class="hl num">1</span><span class="hl opt">;</span>
    v2dt r <span class="hl opt">= {</span>d1<span class="hl opt">,</span> d2<span class="hl opt">};</span>

    <span class="hl kwa">return</span> v1 <span class="hl opt">/</span> r<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl com">/*</span>
<span class="hl com"> * Return type: 2 doubles in xmm register [double1, double2]</span>
<span class="hl com"> *  double1 = 1.0 / (i + j) * (i + j +1) / 2 + i + 1;</span>
<span class="hl com"> *  double2 = 1.0 / (i + j+1) * (i + j+1 +1) / 2 + i + 1;</span>
<span class="hl com"> */</span>
<span class="hl kwb">static</span> v2dt
<span class="hl kwd">eval_A_j</span><span class="hl opt">(</span><span class="hl kwb">int</span> i<span class="hl opt">,</span> <span class="hl kwb">int</span> j<span class="hl opt">)</span>
<span class="hl opt">{</span>
    <span class="hl kwb">int</span> d1 <span class="hl opt">= (((</span>i<span class="hl opt">+</span>j<span class="hl opt">) * (</span>i<span class="hl opt">+</span>j<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)) &gt;&gt;</span> <span class="hl num">1</span><span class="hl opt">) +</span> i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">;</span>
    <span class="hl kwb">int</span> d2 <span class="hl opt">= (((</span>i<span class="hl opt">+</span> j<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">) * (</span>i<span class="hl opt">+</span> j<span class="hl opt">+</span><span class="hl num">1</span> <span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)) &gt;&gt;</span> <span class="hl num">1</span><span class="hl opt">) +</span> i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">;</span>
    v2dt r <span class="hl opt">= {</span>d1<span class="hl opt">,</span> d2<span class="hl opt">};</span>

    <span class="hl kwa">return</span> v1 <span class="hl opt">/</span> r<span class="hl opt">;</span>
<span class="hl opt">}</span>


<span class="hl com">/* This function is called by many threads */</span>
<span class="hl kwb">static void</span>
<span class="hl kwd">eval_A_times_u</span><span class="hl opt">(</span><span class="hl kwb">struct</span> Param <span class="hl opt">*</span>p<span class="hl opt">)</span>
<span class="hl opt">{</span>
    <span class="hl com">/* alias of source vector */</span>
    <span class="hl kwb">const</span> v2dt  <span class="hl opt">*</span>pU <span class="hl opt">= (</span><span class="hl kwb">void</span> <span class="hl opt">*)</span> p<span class="hl opt">-&gt;</span>u<span class="hl opt">;</span>
    <span class="hl kwb">int</span>          i<span class="hl opt">;</span>
    <span class="hl kwb">int</span>          ie<span class="hl opt">;</span>

    <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">=</span> p<span class="hl opt">-&gt;</span>r_begin<span class="hl opt">,</span> ie <span class="hl opt">=</span> p<span class="hl opt">-&gt;</span>r_end<span class="hl opt">;</span> i <span class="hl opt">&lt;</span> ie<span class="hl opt">;</span> i<span class="hl opt">++)</span>
    <span class="hl opt">{</span>
        v2dt sum <span class="hl opt">= {</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">};</span>

        <span class="hl com">/* xmm = 2 doubles. This loop run from [0 .. N/2) */</span>
        <span class="hl kwb">int</span> j<span class="hl opt">;</span>
        <span class="hl kwa">for</span> <span class="hl opt">(</span>j <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> j <span class="hl opt">&lt;</span> p<span class="hl opt">-&gt;</span>N2<span class="hl opt">;</span> j<span class="hl opt">++)</span>
            sum <span class="hl opt">+=</span> pU<span class="hl opt">[</span>j<span class="hl opt">] *</span> <span class="hl kwd">eval_A_j</span><span class="hl opt">(</span>i<span class="hl opt">,</span> j<span class="hl opt">*</span><span class="hl num">2</span><span class="hl opt">);</span>

        <span class="hl com">/* write result */</span>
        <span class="hl opt">{</span>
            <span class="hl kwb">double</span> <span class="hl opt">*</span>mem <span class="hl opt">= (</span><span class="hl kwb">void</span> <span class="hl opt">*) &amp;</span>sum<span class="hl opt">;</span>

            p<span class="hl opt">-&gt;</span>tmp<span class="hl opt">[</span>i<span class="hl opt">] =</span> mem<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] +</span> mem<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">];</span>
        <span class="hl opt">}</span>

        <span class="hl com">/* If source vector is odd size. This should be called &lt;= 1 time */</span>
        <span class="hl kwa">for</span> <span class="hl opt">(</span>j <span class="hl opt">=</span> j<span class="hl opt">*</span><span class="hl num">2</span><span class="hl opt">;</span> <span class="hl kwd">__builtin_expect</span><span class="hl opt">(</span>j <span class="hl opt">&lt;</span> p<span class="hl opt">-&gt;</span>N<span class="hl opt">,</span> <span class="hl kwa">false</span><span class="hl opt">);</span> j<span class="hl opt">++)</span>
            p<span class="hl opt">-&gt;</span>tmp<span class="hl opt">[</span>i<span class="hl opt">] +=</span> <span class="hl kwd">eval_A</span><span class="hl opt">(</span>i<span class="hl opt">,</span> j<span class="hl opt">) *</span> p<span class="hl opt">-&gt;</span>u<span class="hl opt">[</span>j<span class="hl opt">];</span>
    <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl kwb">static void</span>
<span class="hl kwd">eval_At_times_u</span><span class="hl opt">(</span><span class="hl kwb">struct</span> Param <span class="hl opt">*</span>p<span class="hl opt">)</span>
<span class="hl opt">{</span>
    <span class="hl kwb">const</span> v2dt  <span class="hl opt">*</span>pT <span class="hl opt">= (</span><span class="hl kwb">void</span> <span class="hl opt">*)</span> p<span class="hl opt">-&gt;</span>tmp<span class="hl opt">;</span>
    <span class="hl kwb">int</span>          i<span class="hl opt">;</span>
    <span class="hl kwb">int</span>          ie<span class="hl opt">;</span>

    <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">=</span> p<span class="hl opt">-&gt;</span>r_begin<span class="hl opt">,</span> ie <span class="hl opt">=</span> p<span class="hl opt">-&gt;</span>r_end<span class="hl opt">;</span> i <span class="hl opt">&lt;</span> ie<span class="hl opt">;</span> i<span class="hl opt">++)</span>
    <span class="hl opt">{</span>
        v2dt    sum <span class="hl opt">= {</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">};</span>
        <span class="hl kwb">int</span>     j<span class="hl opt">;</span>

        <span class="hl kwa">for</span> <span class="hl opt">(</span>j <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> j <span class="hl opt">&lt;</span> p<span class="hl opt">-&gt;</span>N2<span class="hl opt">;</span> j<span class="hl opt">++)</span>
            sum <span class="hl opt">+=</span> pT<span class="hl opt">[</span>j<span class="hl opt">] *</span> <span class="hl kwd">eval_A_i</span><span class="hl opt">(</span>j<span class="hl opt">*</span><span class="hl num">2</span><span class="hl opt">,</span> i<span class="hl opt">);</span>

        <span class="hl opt">{</span>
            <span class="hl kwb">double</span> <span class="hl opt">*</span>mem <span class="hl opt">= (</span><span class="hl kwb">void</span> <span class="hl opt">*) &amp;</span>sum<span class="hl opt">;</span>

            p<span class="hl opt">-&gt;</span>v<span class="hl opt">[</span>i<span class="hl opt">] =</span> mem<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] +</span> mem<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">];</span>
        <span class="hl opt">}</span>

        <span class="hl com">/* odd size array */</span>
        <span class="hl kwa">for</span> <span class="hl opt">(</span>j <span class="hl opt">=</span> j<span class="hl opt">*</span><span class="hl num">2</span><span class="hl opt">;</span> <span class="hl kwd">__builtin_expect</span><span class="hl opt">(</span>j <span class="hl opt">&lt;</span> p<span class="hl opt">-&gt;</span>N<span class="hl opt">,</span> <span class="hl kwa">false</span><span class="hl opt">);</span> j<span class="hl opt">++)</span>
            p<span class="hl opt">-&gt;</span>v<span class="hl opt">[</span>i<span class="hl opt">] +=</span> <span class="hl kwd">eval_A</span><span class="hl opt">(</span>j<span class="hl opt">,</span> i<span class="hl opt">) *</span> p<span class="hl opt">-&gt;</span>tmp<span class="hl opt">[</span>j<span class="hl opt">];</span>
    <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl com">/*</span>
<span class="hl com"> * Called by N threads.</span>
<span class="hl com"> *</span>
<span class="hl com"> * Each thread modifies its portion in destination vector -&gt; barrier needed to</span>
<span class="hl com"> * sync access</span>
<span class="hl com"> */</span>
<span class="hl kwb">static void</span>
<span class="hl kwd">eval_AtA_times_u</span><span class="hl opt">(</span><span class="hl kwb">struct</span> Param <span class="hl opt">*</span>p<span class="hl opt">)</span>
<span class="hl opt">{</span>
    <span class="hl kwd">eval_A_times_u</span><span class="hl opt">(</span>p<span class="hl opt">);</span>
<span class="hl ppc">#pragma omp barrier</span>

    <span class="hl kwd">eval_At_times_u</span><span class="hl opt">(</span>p<span class="hl opt">);</span>
<span class="hl ppc">#pragma omp barrier</span>
<span class="hl opt">}</span>

<span class="hl com">/*</span>
<span class="hl com"> * Shootout bench uses affinity to emulate single core processor.  This</span>
<span class="hl com"> * function searches for appropriate number of threads to spawn.</span>
<span class="hl com"> */</span>
<span class="hl kwb">static int</span>
<span class="hl kwd">GetThreadCount</span><span class="hl opt">()</span>
<span class="hl opt">{</span>
    cpu_set_t   cs<span class="hl opt">;</span>
    <span class="hl kwb">int</span>         i<span class="hl opt">;</span>
    <span class="hl kwb">int</span>         count <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>

    <span class="hl kwd">CPU_ZERO</span><span class="hl opt">(&amp;</span>cs<span class="hl opt">);</span>
    <span class="hl kwd">sched_getaffinity</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl kwa">sizeof</span><span class="hl opt">(</span>cs<span class="hl opt">), &amp;</span>cs<span class="hl opt">);</span>

    <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> <span class="hl num">16</span><span class="hl opt">;</span> i<span class="hl opt">++)</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">CPU_ISSET</span><span class="hl opt">(</span>i<span class="hl opt">, &amp;</span>cs<span class="hl opt">))</span>
            count<span class="hl opt">++;</span>

    <span class="hl kwa">return</span> count<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwb">static double</span>
<span class="hl kwd">spectral_game</span><span class="hl opt">(</span><span class="hl kwb">int</span> N<span class="hl opt">)</span>
<span class="hl opt">{</span>
    <span class="hl com">/* Align 64 byte for L2 cache line */</span>
    <span class="hl kwd">__attribute__</span><span class="hl opt">((</span><span class="hl kwd">aligned</span><span class="hl opt">(</span><span class="hl num">64</span><span class="hl opt">)))</span> <span class="hl kwb">double</span> u<span class="hl opt">[</span>N<span class="hl opt">];</span>
    <span class="hl kwd">__attribute__</span><span class="hl opt">((</span><span class="hl kwd">aligned</span><span class="hl opt">(</span><span class="hl num">64</span><span class="hl opt">)))</span> <span class="hl kwb">double</span> tmp<span class="hl opt">[</span>N<span class="hl opt">];</span>
    <span class="hl kwd">__attribute__</span><span class="hl opt">((</span><span class="hl kwd">aligned</span><span class="hl opt">(</span><span class="hl num">64</span><span class="hl opt">)))</span> <span class="hl kwb">double</span> v<span class="hl opt">[</span>N<span class="hl opt">];</span>

    <span class="hl kwb">double</span>      vBv <span class="hl opt">=</span> <span class="hl num">0.0</span><span class="hl opt">;</span>
    <span class="hl kwb">double</span>      vv  <span class="hl opt">=</span> <span class="hl num">0.0</span><span class="hl opt">;</span>

<span class="hl ppc">#pragma omp parallel default(shared) num_threads(GetThreadCount())</span>
    <span class="hl opt">{</span>
        <span class="hl kwb">int</span> i<span class="hl opt">;</span>

<span class="hl ppc">#pragma omp for schedule(static)</span>
        <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> N<span class="hl opt">;</span> i<span class="hl opt">++)</span>
            u<span class="hl opt">[</span>i<span class="hl opt">] =</span> <span class="hl num">1.0</span><span class="hl opt">;</span>

        <span class="hl com">/*</span>
<span class="hl com">         * this block will be executed by NUM_THREADS variable declared in this</span>
<span class="hl com">         * block is private for each thread</span>
<span class="hl com">         */</span>
        <span class="hl kwb">int</span>             threadid    <span class="hl opt">=</span> <span class="hl kwd">omp_get_thread_num</span><span class="hl opt">();</span>
        <span class="hl kwb">int</span>             threadcount <span class="hl opt">=</span> <span class="hl kwd">omp_get_num_threads</span><span class="hl opt">();</span>
        <span class="hl kwb">int</span>             chunk       <span class="hl opt">=</span> N <span class="hl opt">/</span> threadcount<span class="hl opt">;</span>
        <span class="hl kwb">int</span>             ite<span class="hl opt">;</span>
        <span class="hl kwb">struct</span> Param    my_param<span class="hl opt">;</span>

        my_param<span class="hl opt">.</span>tmp <span class="hl opt">=</span> tmp<span class="hl opt">;</span>
        my_param<span class="hl opt">.</span>N   <span class="hl opt">=</span> N<span class="hl opt">;</span>
        my_param<span class="hl opt">.</span>N2  <span class="hl opt">=</span> N<span class="hl opt">/</span><span class="hl num">2</span><span class="hl opt">;</span>

        <span class="hl com">/*</span>
<span class="hl com">         * calculate each thread's working range [range1 .. range2) =&gt; static</span>
<span class="hl com">         * schedule here</span>
<span class="hl com">         */</span>
        my_param<span class="hl opt">.</span>r_begin   <span class="hl opt">=</span> threadid <span class="hl opt">*</span> chunk<span class="hl opt">;</span>
        my_param<span class="hl opt">.</span>r_end  <span class="hl opt">= (</span>threadid <span class="hl opt">&lt; (</span>threadcount <span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">))</span> ?
            <span class="hl opt">(</span>my_param<span class="hl opt">.</span>r_begin <span class="hl opt">+</span> chunk<span class="hl opt">) :</span> N<span class="hl opt">;</span>

        <span class="hl kwa">for</span> <span class="hl opt">(</span>ite <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> ite <span class="hl opt">&lt;</span> <span class="hl num">10</span><span class="hl opt">;</span> ite<span class="hl opt">++)</span>
        <span class="hl opt">{</span>
            my_param<span class="hl opt">.</span>u <span class="hl opt">=</span> u<span class="hl opt">;</span>     <span class="hl com">/* source vec is u */</span>
            my_param<span class="hl opt">.</span>v <span class="hl opt">=</span> v<span class="hl opt">;</span>     <span class="hl com">/* destination vec is v */</span>
            <span class="hl kwd">eval_AtA_times_u</span><span class="hl opt">(&amp;</span>my_param<span class="hl opt">);</span>

            my_param<span class="hl opt">.</span>u <span class="hl opt">=</span> v<span class="hl opt">;</span>     <span class="hl com">/* source is v */</span>
            my_param<span class="hl opt">.</span>v <span class="hl opt">=</span> u<span class="hl opt">;</span>     <span class="hl com">/* destination is u */</span>
            <span class="hl kwd">eval_AtA_times_u</span><span class="hl opt">(&amp;</span>my_param<span class="hl opt">);</span>
        <span class="hl opt">}</span>

        <span class="hl com">/* multi thread adding */</span>
        <span class="hl opt">{</span>
            <span class="hl kwb">int</span> i<span class="hl opt">;</span>

<span class="hl ppc">#pragma omp for schedule(static) reduction( + : vBv, vv ) nowait</span>

            <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> N<span class="hl opt">;</span> i<span class="hl opt">++)</span>
            <span class="hl opt">{</span>
                vv  <span class="hl opt">+=</span> v<span class="hl opt">[</span>i<span class="hl opt">] *</span> v<span class="hl opt">[</span>i<span class="hl opt">];</span>
                vBv <span class="hl opt">+=</span> u<span class="hl opt">[</span>i<span class="hl opt">] *</span> v<span class="hl opt">[</span>i<span class="hl opt">];</span>
            <span class="hl opt">}</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span>
    <span class="hl com">/* end parallel region */</span>

    <span class="hl kwa">return</span> <span class="hl kwd">sqrt</span><span class="hl opt">(</span>vBv<span class="hl opt">/</span>vv<span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwb">int</span>
<span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span> <span class="hl opt">*</span>argv<span class="hl opt">[])</span>
<span class="hl opt">{</span>
    <span class="hl kwb">int</span> N <span class="hl opt">= ((</span>argc <span class="hl opt">&gt;=</span> <span class="hl num">2</span><span class="hl opt">)</span> ? <span class="hl kwd">atoi</span><span class="hl opt">(</span>argv<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">]) :</span> <span class="hl num">2000</span><span class="hl opt">);</span>

    <span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;%.9f</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> <span class="hl kwd">spectral_game</span><span class="hl opt">(</span>N<span class="hl opt">));</span>
    <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
