<span class="hl slc">--</span>
<span class="hl slc">--  The Computer Language Benchmarks Game</span>
<span class="hl slc">--  http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">--</span>
<span class="hl slc">--  Contributed by Pascal Obry on 2005/03/19</span>
<span class="hl slc">--  Modified by Bill Findlay  on 2005/04/04</span>
<span class="hl slc">--  Updated by Georg Bauhaus and Jonathan Parker (May 2012)</span>

<span class="hl kwa">with</span> Text_Input<span class="hl opt">;</span> <span class="hl kwa">use</span> Text_Input<span class="hl opt">;</span>
<span class="hl kwa">with</span> Line_IO<span class="hl opt">;</span>

<span class="hl kwa">procedure</span> Revcomp <span class="hl kwa">is</span>

   Multitasking_Version_Desired <span class="hl opt">:</span> <span class="hl kwa">constant</span> <span class="hl kwb">Boolean</span> <span class="hl opt">:=</span> <span class="hl kwd">True</span><span class="hl opt">;</span>

   Complement <span class="hl opt">:</span> <span class="hl kwa">constant array</span> <span class="hl opt">(</span><span class="hl kwb">Character</span><span class="hl opt">)</span> <span class="hl kwa">of</span> <span class="hl kwb">Character</span> <span class="hl opt">:=</span>
     <span class="hl opt">(</span><span class="hl str">'A'</span> <span class="hl opt">=&gt;</span> <span class="hl str">'T'</span><span class="hl opt">,</span> <span class="hl str">'C'</span> <span class="hl opt">=&gt;</span> <span class="hl str">'G'</span><span class="hl opt">,</span> <span class="hl str">'G'</span> <span class="hl opt">=&gt;</span> <span class="hl str">'C'</span><span class="hl opt">,</span> <span class="hl str">'T'</span> <span class="hl opt">=&gt;</span> <span class="hl str">'A'</span><span class="hl opt">,</span> <span class="hl str">'U'</span> <span class="hl opt">=&gt;</span> <span class="hl str">'A'</span><span class="hl opt">,</span>
      <span class="hl str">'M'</span> <span class="hl opt">=&gt;</span> <span class="hl str">'K'</span><span class="hl opt">,</span> <span class="hl str">'R'</span> <span class="hl opt">=&gt;</span> <span class="hl str">'Y'</span><span class="hl opt">,</span> <span class="hl str">'W'</span> <span class="hl opt">=&gt;</span> <span class="hl str">'W'</span><span class="hl opt">,</span> <span class="hl str">'S'</span> <span class="hl opt">=&gt;</span> <span class="hl str">'S'</span><span class="hl opt">,</span> <span class="hl str">'Y'</span> <span class="hl opt">=&gt;</span> <span class="hl str">'R'</span><span class="hl opt">,</span>
      <span class="hl str">'K'</span> <span class="hl opt">=&gt;</span> <span class="hl str">'M'</span><span class="hl opt">,</span> <span class="hl str">'V'</span> <span class="hl opt">=&gt;</span> <span class="hl str">'B'</span><span class="hl opt">,</span> <span class="hl str">'H'</span> <span class="hl opt">=&gt;</span> <span class="hl str">'D'</span><span class="hl opt">,</span> <span class="hl str">'D'</span> <span class="hl opt">=&gt;</span> <span class="hl str">'H'</span><span class="hl opt">,</span> <span class="hl str">'B'</span> <span class="hl opt">=&gt;</span> <span class="hl str">'V'</span><span class="hl opt">,</span>
      <span class="hl str">'N'</span> <span class="hl opt">=&gt;</span> <span class="hl str">'N'</span><span class="hl opt">,</span>
      <span class="hl str">'a'</span> <span class="hl opt">=&gt;</span> <span class="hl str">'T'</span><span class="hl opt">,</span> <span class="hl str">'c'</span> <span class="hl opt">=&gt;</span> <span class="hl str">'G'</span><span class="hl opt">,</span> <span class="hl str">'g'</span> <span class="hl opt">=&gt;</span> <span class="hl str">'C'</span><span class="hl opt">,</span> <span class="hl str">'t'</span> <span class="hl opt">=&gt;</span> <span class="hl str">'A'</span><span class="hl opt">,</span> <span class="hl str">'u'</span> <span class="hl opt">=&gt;</span> <span class="hl str">'A'</span><span class="hl opt">,</span>
      <span class="hl str">'m'</span> <span class="hl opt">=&gt;</span> <span class="hl str">'K'</span><span class="hl opt">,</span> <span class="hl str">'r'</span> <span class="hl opt">=&gt;</span> <span class="hl str">'Y'</span><span class="hl opt">,</span> <span class="hl str">'w'</span> <span class="hl opt">=&gt;</span> <span class="hl str">'W'</span><span class="hl opt">,</span> <span class="hl str">'s'</span> <span class="hl opt">=&gt;</span> <span class="hl str">'S'</span><span class="hl opt">,</span> <span class="hl str">'y'</span> <span class="hl opt">=&gt;</span> <span class="hl str">'R'</span><span class="hl opt">,</span>
      <span class="hl str">'k'</span> <span class="hl opt">=&gt;</span> <span class="hl str">'M'</span><span class="hl opt">,</span> <span class="hl str">'v'</span> <span class="hl opt">=&gt;</span> <span class="hl str">'B'</span><span class="hl opt">,</span> <span class="hl str">'h'</span> <span class="hl opt">=&gt;</span> <span class="hl str">'D'</span><span class="hl opt">,</span> <span class="hl str">'d'</span> <span class="hl opt">=&gt;</span> <span class="hl str">'H'</span><span class="hl opt">,</span> <span class="hl str">'b'</span> <span class="hl opt">=&gt;</span> <span class="hl str">'V'</span><span class="hl opt">,</span>
      <span class="hl str">'n'</span> <span class="hl opt">=&gt;</span> <span class="hl str">'N'</span><span class="hl opt">,</span>
      <span class="hl kwa">others</span> <span class="hl opt">=&gt;</span> <span class="hl str">'?'</span><span class="hl opt">);</span>

   Max_Line_Length <span class="hl opt">:</span> <span class="hl kwa">constant</span> <span class="hl opt">:=</span> <span class="hl num">60</span><span class="hl opt">;</span>

   End_Of_Line <span class="hl opt">:</span> <span class="hl kwa">constant</span> <span class="hl kwb">String</span> <span class="hl opt">:=</span> Line_IO<span class="hl opt">.</span>Separator<span class="hl opt">;</span>

   <span class="hl kwa">procedure</span> Reverse_Fasta
     <span class="hl opt">(</span>Fasta_Line   <span class="hl opt">:</span> <span class="hl kwa">in</span>     String_Access<span class="hl opt">;</span>
      Fasta_Start  <span class="hl opt">:</span> <span class="hl kwa">in</span>     <span class="hl kwb">Natural</span><span class="hl opt">;</span>
      Fasta_Finish <span class="hl opt">:</span> <span class="hl kwa">in</span>     <span class="hl kwb">Natural</span><span class="hl opt">;</span>
      Bundle       <span class="hl opt">:</span> <span class="hl kwa">in out</span> <span class="hl kwb">String</span><span class="hl opt">)</span>
   <span class="hl kwa">is</span>
      L <span class="hl opt">:</span> <span class="hl kwb">Natural</span> <span class="hl opt">:=</span> Bundle<span class="hl kwd">'First</span><span class="hl opt">;</span> <span class="hl slc">-- Leftmost char</span>
      R <span class="hl opt">:</span> <span class="hl kwb">Natural</span> <span class="hl opt">:=</span> Fasta_Finish<span class="hl opt">;</span> <span class="hl slc">-- Rightmost char</span>
      c0<span class="hl opt">,</span> c1 <span class="hl opt">:</span> <span class="hl kwb">Character</span><span class="hl opt">;</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">if</span> R <span class="hl opt">&lt;</span> Fasta_Start <span class="hl kwa">then return</span><span class="hl opt">;</span> <span class="hl kwa">end if</span><span class="hl opt">;</span>

      c1 <span class="hl opt">:=</span> Fasta_Line<span class="hl opt">(</span>R<span class="hl opt">);</span>
      <span class="hl kwa">loop</span>
         Bundle<span class="hl opt">(</span>L<span class="hl opt">) :=</span> Complement<span class="hl opt">(</span>c1<span class="hl opt">);</span>
         R <span class="hl opt">:=</span> R <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">;</span>
         L <span class="hl opt">:=</span> L <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span>
         <span class="hl kwa">if</span> R <span class="hl opt">&gt;</span> Fasta_Start <span class="hl kwa">then</span>
            c0 <span class="hl opt">:=</span> Fasta_Line<span class="hl opt">(</span>R<span class="hl opt">);</span>
            c1 <span class="hl opt">:=</span> Fasta_Line<span class="hl opt">(</span>R<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">);</span>
            Bundle<span class="hl opt">(</span>L<span class="hl opt">) :=</span> Complement<span class="hl opt">(</span>c0<span class="hl opt">);</span>
            L <span class="hl opt">:=</span> L <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span>
            R <span class="hl opt">:=</span> R <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">;</span>
         <span class="hl kwa">else</span>
            <span class="hl kwa">if</span> R <span class="hl opt">=</span> Fasta_Start <span class="hl kwa">then</span>
               Bundle<span class="hl opt">(</span>L<span class="hl opt">) :=</span> Complement<span class="hl opt">(</span>Fasta_Line<span class="hl opt">(</span>R<span class="hl opt">));</span>
            <span class="hl kwa">end if</span><span class="hl opt">;</span>
            <span class="hl kwa">exit</span><span class="hl opt">;</span>
         <span class="hl kwa">end if</span><span class="hl opt">;</span>
      <span class="hl kwa">end loop</span><span class="hl opt">;</span>

   <span class="hl kwa">end</span> Reverse_Fasta<span class="hl opt">;</span>

   <span class="hl kwa">procedure</span> Put_Reversed_Fasta
     <span class="hl opt">(</span>Fasta_Section     <span class="hl opt">:</span> <span class="hl kwa">in</span> String_Access<span class="hl opt">;</span>
      Fasta_Data_Length <span class="hl opt">:</span> <span class="hl kwa">in</span> <span class="hl kwb">Natural</span><span class="hl opt">)</span>
   <span class="hl kwa">is</span>
      Lines_per_Bundle <span class="hl opt">:</span> <span class="hl kwa">constant</span> <span class="hl opt">:=</span> <span class="hl num">2000</span><span class="hl opt">;</span>
      Line_Feed_Len    <span class="hl opt">:</span> <span class="hl kwa">constant</span> <span class="hl kwb">Natural</span> <span class="hl opt">:=</span> End_Of_Line<span class="hl kwd">'Length</span><span class="hl opt">;</span>
      Line_Bundle <span class="hl opt">:</span> <span class="hl kwb">String</span><span class="hl opt">(</span><span class="hl num">1</span> <span class="hl opt">..</span> Lines_per_Bundle<span class="hl opt">*(</span>Max_Line_Length <span class="hl opt">+</span> Line_Feed_Len<span class="hl opt">));</span>
      L        <span class="hl opt">:</span> <span class="hl kwb">Natural</span> <span class="hl opt">:=</span> Fasta_Data_Length<span class="hl opt">;</span>
      B_start  <span class="hl opt">:</span> <span class="hl kwb">Natural</span> <span class="hl opt">:=</span> Line_Bundle<span class="hl kwd">'First</span><span class="hl opt">;</span>
      B_finish <span class="hl opt">:</span> <span class="hl kwb">Natural</span> <span class="hl opt">:=</span> B_start <span class="hl opt">+</span> Max_Line_Length <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">;</span>
   <span class="hl kwa">begin</span>

      <span class="hl slc">-- Append line feed string (End_Of_Line) to 2000 Line_Bundle lines:</span>

      <span class="hl kwa">while</span> L <span class="hl opt">&gt;=</span> Lines_per_Bundle <span class="hl opt">*</span> Max_Line_Length <span class="hl kwa">loop</span>
         B_start <span class="hl opt">:=</span> Line_Bundle<span class="hl kwd">'First</span><span class="hl opt">;</span>
         <span class="hl kwa">for</span> j <span class="hl kwa">in</span> <span class="hl num">1</span> <span class="hl opt">..</span> Lines_per_Bundle <span class="hl kwa">loop</span>
            B_finish <span class="hl opt">:=</span> B_start <span class="hl opt">+</span> Max_Line_Length <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">;</span>
            Reverse_Fasta
              <span class="hl opt">(</span>Fasta_Line   <span class="hl opt">=&gt;</span> Fasta_Section<span class="hl opt">,</span>
               Fasta_Start  <span class="hl opt">=&gt;</span> L <span class="hl opt">-</span> Max_Line_Length <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">,</span>
               Fasta_Finish <span class="hl opt">=&gt;</span> L<span class="hl opt">,</span>
               Bundle       <span class="hl opt">=&gt;</span> Line_Bundle<span class="hl opt">(</span>B_start <span class="hl opt">..</span> B_finish<span class="hl opt">));</span>
            Line_Bundle<span class="hl opt">(</span>B_finish <span class="hl opt">+</span> <span class="hl num">1</span> <span class="hl opt">..</span> B_finish <span class="hl opt">+</span> Line_Feed_Len<span class="hl opt">) :=</span> End_Of_Line<span class="hl opt">;</span>
            B_start <span class="hl opt">:=</span> B_finish <span class="hl opt">+</span> Line_Feed_Len <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span>
            L       <span class="hl opt">:=</span> L <span class="hl opt">-</span> Max_Line_Length<span class="hl opt">;</span>
         <span class="hl kwa">end loop</span><span class="hl opt">;</span>
         Line_IO<span class="hl opt">.</span>Put <span class="hl opt">(</span>Line_Bundle<span class="hl opt">);</span>
      <span class="hl kwa">end loop</span><span class="hl opt">;</span>

      <span class="hl kwa">while</span> L <span class="hl opt">&gt;=</span> Max_Line_Length <span class="hl kwa">loop</span>
         Reverse_Fasta
           <span class="hl opt">(</span>Fasta_Line   <span class="hl opt">=&gt;</span> Fasta_Section<span class="hl opt">,</span>
            Fasta_Start  <span class="hl opt">=&gt;</span> L <span class="hl opt">-</span> Max_Line_Length <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">,</span>
            Fasta_Finish <span class="hl opt">=&gt;</span> L<span class="hl opt">,</span>
            Bundle       <span class="hl opt">=&gt;</span> Line_Bundle<span class="hl opt">(</span><span class="hl num">1</span> <span class="hl opt">..</span> Max_Line_Length<span class="hl opt">));</span>
         Line_IO<span class="hl opt">.</span>Put_Line <span class="hl opt">(</span>Line_Bundle <span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">..</span>Max_Line_Length<span class="hl opt">));</span>
         L <span class="hl opt">:=</span> L <span class="hl opt">-</span> Max_Line_Length<span class="hl opt">;</span>
      <span class="hl kwa">end loop</span><span class="hl opt">;</span>

      <span class="hl kwa">if</span> L <span class="hl opt">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
         Reverse_Fasta
           <span class="hl opt">(</span>Fasta_Line   <span class="hl opt">=&gt;</span> Fasta_Section<span class="hl opt">,</span>
            Fasta_Start  <span class="hl opt">=&gt;</span> <span class="hl num">1</span><span class="hl opt">,</span>
            Fasta_Finish <span class="hl opt">=&gt;</span> L<span class="hl opt">,</span>
            Bundle       <span class="hl opt">=&gt;</span> Line_Bundle<span class="hl opt">(</span><span class="hl num">1</span> <span class="hl opt">..</span> L<span class="hl opt">));</span>
         Line_IO<span class="hl opt">.</span>Put_Line <span class="hl opt">(</span>Line_Bundle <span class="hl opt">(</span><span class="hl num">1</span> <span class="hl opt">..</span> L<span class="hl opt">));</span>
      <span class="hl kwa">end if</span><span class="hl opt">;</span>

   <span class="hl kwa">end</span> Put_Reversed_Fasta<span class="hl opt">;</span>

   <span class="hl kwa">procedure</span> Read_Reverse_Write_a_Section_p
     <span class="hl opt">(</span>Job_Is_Complete <span class="hl opt">:</span> <span class="hl kwa">out</span> <span class="hl kwb">Boolean</span><span class="hl opt">)</span>
   <span class="hl kwa">is</span>
      Section_o_Fasta <span class="hl opt">:</span> String_Pointer <span class="hl opt">(</span><span class="hl num">2</span><span class="hl opt">**</span><span class="hl num">20</span> <span class="hl opt">*</span> <span class="hl num">128</span><span class="hl opt">);</span>
      Header          <span class="hl opt">:</span> <span class="hl kwb">String</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">..</span>Max_Line_Length<span class="hl opt">) := (</span><span class="hl kwa">others</span> <span class="hl opt">=&gt;</span> <span class="hl str">'?'</span><span class="hl opt">);</span>
      Section_Length  <span class="hl opt">:</span> <span class="hl kwb">Natural</span> <span class="hl opt">:=</span> <span class="hl num">0</span><span class="hl opt">;</span>
      Header_Length   <span class="hl opt">:</span> <span class="hl kwb">Natural</span> <span class="hl opt">:=</span> <span class="hl num">0</span><span class="hl opt">;</span>
   <span class="hl kwa">begin</span>
      Job_Is_Complete <span class="hl opt">:=</span> <span class="hl kwd">False</span><span class="hl opt">;</span>

      Text_Input<span class="hl opt">.</span>Read_Section
        <span class="hl opt">(</span>Data_Buffer     <span class="hl opt">=&gt;</span> Section_o_Fasta<span class="hl opt">.</span>Buffer<span class="hl opt">,</span>
         Data_Length     <span class="hl opt">=&gt;</span> Section_Length<span class="hl opt">,</span>
         Next_Header     <span class="hl opt">=&gt;</span> Header<span class="hl opt">,</span>
         Header_Length   <span class="hl opt">=&gt;</span> Header_Length<span class="hl opt">,</span>
         Max_Line_Length <span class="hl opt">=&gt;</span> <span class="hl num">100</span><span class="hl opt">);</span> <span class="hl slc">-- use anything &gt;= actual limit of 60.</span>

      <span class="hl kwa">if</span> Header_Length <span class="hl opt">&lt;</span> <span class="hl num">1</span> <span class="hl kwa">then</span>   <span class="hl slc">-- null Header marks final section.</span>
         Job_Is_Complete <span class="hl opt">:=</span> <span class="hl kwd">True</span><span class="hl opt">;</span>
      <span class="hl kwa">end if</span><span class="hl opt">;</span>

      <span class="hl kwa">if</span> Section_Length <span class="hl opt">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
         Put_Reversed_Fasta <span class="hl opt">(</span>Section_o_Fasta<span class="hl opt">.</span>Buffer<span class="hl opt">,</span> Section_Length<span class="hl opt">);</span>
      <span class="hl kwa">end if</span><span class="hl opt">;</span>
      <span class="hl kwa">if</span> Header_Length <span class="hl opt">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
         Line_IO<span class="hl opt">.</span>Put_Line <span class="hl opt">(</span>Header<span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">..</span>Header_Length<span class="hl opt">));</span>
      <span class="hl kwa">end if</span><span class="hl opt">;</span>

   <span class="hl kwa">end</span> Read_Reverse_Write_a_Section_p<span class="hl opt">;</span>

   <span class="hl kwa">task type</span> Read_Reverse_Write_a_Section <span class="hl kwa">is</span>
      <span class="hl kwa">entry</span> Start_Reading<span class="hl opt">;</span>
      <span class="hl kwa">entry</span> Done_Reading_Start_Writing <span class="hl opt">(</span>Reached_End_Of_File <span class="hl opt">:</span> <span class="hl kwa">out</span> <span class="hl kwb">Boolean</span><span class="hl opt">);</span>
      <span class="hl kwa">entry</span> Done_Writing<span class="hl opt">;</span>
      <span class="hl kwa">pragma</span> Storage_Size <span class="hl opt">(</span><span class="hl num">2</span><span class="hl opt">**</span><span class="hl num">20</span><span class="hl opt">);</span>
   <span class="hl kwa">end</span> Read_Reverse_Write_a_Section<span class="hl opt">;</span>

   <span class="hl kwa">task body</span> Read_Reverse_Write_a_Section <span class="hl kwa">is</span>
      Section_o_Fasta <span class="hl opt">:</span> String_Pointer <span class="hl opt">(</span><span class="hl num">2</span><span class="hl opt">**</span><span class="hl num">20</span> <span class="hl opt">*</span> <span class="hl num">128</span><span class="hl opt">);</span>
      Header          <span class="hl opt">:</span> <span class="hl kwb">String</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">..</span>Max_Line_Length<span class="hl opt">) := (</span><span class="hl kwa">others</span> <span class="hl opt">=&gt;</span> <span class="hl str">'?'</span><span class="hl opt">);</span>
      Section_Length  <span class="hl opt">:</span> <span class="hl kwb">Natural</span> <span class="hl opt">:=</span> <span class="hl num">0</span><span class="hl opt">;</span>
      Header_Length   <span class="hl opt">:</span> <span class="hl kwb">Natural</span> <span class="hl opt">:=</span> <span class="hl num">0</span><span class="hl opt">;</span>
      Hit_End_Of_File <span class="hl opt">:</span> <span class="hl kwb">Boolean</span> <span class="hl opt">:=</span> <span class="hl kwd">False</span><span class="hl opt">;</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">loop</span>
      <span class="hl kwa">select</span>
         <span class="hl kwa">accept</span> Start_Reading<span class="hl opt">;</span>

         Text_Input<span class="hl opt">.</span>Read_Section
           <span class="hl opt">(</span>Data_Buffer     <span class="hl opt">=&gt;</span> Section_o_Fasta<span class="hl opt">.</span>Buffer<span class="hl opt">,</span>
            Data_Length     <span class="hl opt">=&gt;</span> Section_Length<span class="hl opt">,</span>
            Next_Header     <span class="hl opt">=&gt;</span> Header<span class="hl opt">,</span>
            Header_Length   <span class="hl opt">=&gt;</span> Header_Length<span class="hl opt">,</span>
            Max_Line_Length <span class="hl opt">=&gt;</span> <span class="hl num">100</span><span class="hl opt">);</span> <span class="hl slc">-- use anything &gt;= actual limit of 60.</span>

         <span class="hl kwa">if</span> Header_Length <span class="hl opt">&lt;</span> <span class="hl num">1</span> <span class="hl kwa">then</span>   <span class="hl slc">-- null Header marks final section.</span>
            Hit_End_Of_File <span class="hl opt">:=</span> <span class="hl kwd">True</span><span class="hl opt">;</span>
         <span class="hl kwa">end if</span><span class="hl opt">;</span>

         <span class="hl kwa">accept</span> Done_Reading_Start_Writing <span class="hl opt">(</span>Reached_End_Of_File <span class="hl opt">:</span> <span class="hl kwa">out</span> <span class="hl kwb">Boolean</span><span class="hl opt">)</span> <span class="hl kwa">do</span>
            Reached_End_Of_File <span class="hl opt">:=</span> Hit_End_Of_File<span class="hl opt">;</span>
         <span class="hl kwa">end</span> Done_Reading_Start_Writing<span class="hl opt">;</span>

         <span class="hl kwa">if</span> Section_Length <span class="hl opt">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
            Put_Reversed_Fasta <span class="hl opt">(</span>Section_o_Fasta<span class="hl opt">.</span>Buffer<span class="hl opt">,</span> Section_Length<span class="hl opt">);</span>
         <span class="hl kwa">end if</span><span class="hl opt">;</span>
         <span class="hl kwa">if</span> Header_Length <span class="hl opt">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
            Line_IO<span class="hl opt">.</span>Put_Line <span class="hl opt">(</span>Header<span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">..</span>Header_Length<span class="hl opt">));</span>
         <span class="hl kwa">end if</span><span class="hl opt">;</span>

         <span class="hl kwa">accept</span> Done_Writing<span class="hl opt">;</span>
      <span class="hl kwa">or</span>
         <span class="hl kwa">terminate</span><span class="hl opt">;</span>
      <span class="hl kwa">end select</span><span class="hl opt">;</span>
      <span class="hl kwa">end loop</span><span class="hl opt">;</span>
   <span class="hl kwa">end</span> Read_Reverse_Write_a_Section<span class="hl opt">;</span>

   Job_Is_Complete <span class="hl opt">:</span> <span class="hl kwb">Boolean</span><span class="hl opt">;</span>

<span class="hl kwa">begin</span>

   <span class="hl kwa">if</span> Multitasking_Version_Desired <span class="hl kwa">then</span> <span class="hl slc">-- Do computation concurrently with Input</span>

      <span class="hl kwa">declare</span>
         <span class="hl kwa">type</span> Task_Id_Type <span class="hl kwa">is mod</span> <span class="hl num">2</span><span class="hl opt">;</span>
         Do_a_Section <span class="hl opt">:</span> <span class="hl kwa">array</span> <span class="hl opt">(</span>Task_Id_Type<span class="hl opt">)</span> <span class="hl kwa">of</span> Read_Reverse_Write_a_Section<span class="hl opt">;</span>
         i <span class="hl opt">:</span> Task_Id_Type <span class="hl opt">:=</span> Task_Id_Type<span class="hl kwd">'First</span><span class="hl opt">;</span>
         Reached_End_Of_File <span class="hl opt">:</span> <span class="hl kwb">Boolean</span> <span class="hl opt">:=</span> <span class="hl kwd">False</span><span class="hl opt">;</span>
      <span class="hl kwa">begin</span>

         Read_Reverse_Write_a_Section_p <span class="hl opt">(</span>Job_Is_Complete<span class="hl opt">);</span>
         <span class="hl slc">--  All this does is handle the 1st line of the file (the Header).</span>

         Do_a_Section<span class="hl opt">(</span>i<span class="hl opt">).</span>Start_Reading<span class="hl opt">;</span>
         <span class="hl slc">--  Start 1st task reading 1st section.</span>

         <span class="hl kwa">loop</span>

            Do_a_Section<span class="hl opt">(</span>i<span class="hl opt">).</span>Done_Reading_Start_Writing <span class="hl opt">(</span>Reached_End_Of_File<span class="hl opt">);</span>
            <span class="hl slc">-- Block here until task i says its done reading the section.</span>
            <span class="hl slc">-- After completion of this rendezvous, task i is unblocked. Task i</span>
            <span class="hl slc">-- then begins computing and writing the reversed data. Task i </span>
            <span class="hl slc">-- remains unblocked until it finishes writing.</span>

            <span class="hl slc">-- Task i is done reading so we can unblock task i+1 to start reading:</span>
            <span class="hl kwa">if not</span> Reached_End_Of_File <span class="hl kwa">then</span>
               Do_a_Section<span class="hl opt">(</span>i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">).</span>Start_Reading<span class="hl opt">;</span>
            <span class="hl kwa">end if</span><span class="hl opt">;</span>

            Do_a_Section<span class="hl opt">(</span>i<span class="hl opt">).</span>Done_Writing<span class="hl opt">;</span>
            <span class="hl slc">-- Block here until task i says it's done writing. (If task i+1 were</span>
            <span class="hl slc">-- to write while task i writes, then their output is interleaved.)</span>
            <span class="hl slc">-- Next go to top of loop to unblock task i+1 so that it can write.</span>

            <span class="hl kwa">exit when</span> Reached_End_Of_File<span class="hl opt">;</span>
            i <span class="hl opt">:=</span> i <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span>

         <span class="hl kwa">end loop</span><span class="hl opt">;</span>

      <span class="hl kwa">end</span><span class="hl opt">;</span>

   <span class="hl kwa">else</span> <span class="hl slc">-- Use a Procedure rather than Tasks:</span>

      <span class="hl kwa">loop</span>
         Read_Reverse_Write_a_Section_p <span class="hl opt">(</span>Job_Is_Complete<span class="hl opt">);</span>
         <span class="hl kwa">exit when</span> Job_Is_Complete<span class="hl opt">;</span>
      <span class="hl kwa">end loop</span><span class="hl opt">;</span>

   <span class="hl kwa">end if</span><span class="hl opt">;</span> <span class="hl slc">-- Multitasking_Version_Desired</span>

   Line_IO<span class="hl opt">.</span>Close<span class="hl opt">;</span>

<span class="hl kwa">end</span> Revcomp<span class="hl opt">;</span>


<span class="hl kwa">with</span> Ada<span class="hl opt">.</span>Unchecked_Deallocation<span class="hl opt">;</span>
<span class="hl kwa">with</span> Ada<span class="hl opt">.</span>Finalization<span class="hl opt">;</span>

<span class="hl kwa">package</span> Text_Input <span class="hl kwa">is</span>

   <span class="hl slc">-- Use Stream_IO to Read data from Standard_Input</span>

   <span class="hl kwa">type</span> String_Access <span class="hl kwa">is access</span> <span class="hl kwb">String</span><span class="hl opt">;</span>
   <span class="hl kwa">type</span> String_Pointer <span class="hl opt">(</span>Size <span class="hl opt">:</span> <span class="hl kwb">Positive</span><span class="hl opt">)</span> <span class="hl kwa">is new</span> Ada<span class="hl opt">.</span>Finalization<span class="hl opt">.</span>Limited_Controlled <span class="hl kwa">with</span>
       <span class="hl kwa">record</span>
          Buffer <span class="hl opt">:</span> String_Access<span class="hl opt">;</span>
       <span class="hl kwa">end record</span><span class="hl opt">;</span>

   overriding <span class="hl kwa">procedure</span> Initialize <span class="hl opt">(</span>Object <span class="hl opt">:</span> <span class="hl kwa">in out</span> String_Pointer<span class="hl opt">);</span>
   overriding <span class="hl kwa">procedure</span> Finalize <span class="hl opt">(</span>Object <span class="hl opt">:</span> <span class="hl kwa">in out</span> String_Pointer<span class="hl opt">);</span>

   <span class="hl kwa">procedure</span> Read_Section
     <span class="hl opt">(</span>Data_Buffer     <span class="hl opt">:</span> <span class="hl kwa">in out</span> String_Access<span class="hl opt">;</span>
      Data_Length     <span class="hl opt">:</span>    <span class="hl kwa">out</span> <span class="hl kwb">Natural</span><span class="hl opt">;</span>
      Next_Header     <span class="hl opt">:</span>    <span class="hl kwa">out</span> <span class="hl kwb">String</span><span class="hl opt">;</span>
      Header_Length   <span class="hl opt">:</span>    <span class="hl kwa">out</span> <span class="hl kwb">Natural</span><span class="hl opt">;</span>
      Max_Line_Length <span class="hl opt">:</span> <span class="hl kwa">in</span>     <span class="hl kwb">Natural</span> <span class="hl opt">:=</span> <span class="hl num">1024</span><span class="hl opt">);</span>

   Section_Marker <span class="hl opt">:</span> <span class="hl kwa">constant</span> <span class="hl kwb">Character</span> <span class="hl opt">:=</span> <span class="hl str">'&gt;'</span><span class="hl opt">;</span>

   <span class="hl slc">-- Read_Section reads until EOF or Section_Marker is found at start</span>
   <span class="hl slc">-- of a line. Can accept any line of length &lt;= Max_Line_Length.</span>

   <span class="hl kwa">procedure</span> Free <span class="hl kwa">is new</span> Ada<span class="hl opt">.</span>Unchecked_Deallocation <span class="hl opt">(</span><span class="hl kwb">String</span><span class="hl opt">,</span> String_Access<span class="hl opt">);</span>

<span class="hl kwa">end</span> Text_Input<span class="hl opt">;</span>

<span class="hl kwa">with</span> Ada<span class="hl opt">.</span>IO_Exceptions<span class="hl opt">;</span>
<span class="hl kwa">with</span> Line_IO<span class="hl opt">;</span>

<span class="hl kwa">package body</span> Text_Input <span class="hl kwa">is</span>

   <span class="hl kwa">procedure</span> Read_Section
     <span class="hl opt">(</span>Data_Buffer     <span class="hl opt">:</span> <span class="hl kwa">in out</span> String_Access<span class="hl opt">;</span>
      Data_Length     <span class="hl opt">:</span>    <span class="hl kwa">out</span> <span class="hl kwb">Natural</span><span class="hl opt">;</span>
      Next_Header     <span class="hl opt">:</span>    <span class="hl kwa">out</span> <span class="hl kwb">String</span><span class="hl opt">;</span>
      Header_Length   <span class="hl opt">:</span>    <span class="hl kwa">out</span> <span class="hl kwb">Natural</span><span class="hl opt">;</span>
      Max_Line_Length <span class="hl opt">:</span> <span class="hl kwa">in</span>     <span class="hl kwb">Natural</span> <span class="hl opt">:=</span> <span class="hl num">1024</span><span class="hl opt">)</span>
   <span class="hl kwa">is</span>
      Ptr <span class="hl opt">:</span> String_Access<span class="hl opt">;</span>
   <span class="hl kwa">begin</span>
      Data_Length   <span class="hl opt">:=</span> <span class="hl num">0</span><span class="hl opt">;</span>
      Header_Length <span class="hl opt">:=</span> <span class="hl num">0</span><span class="hl opt">;</span>

      Fill_Data_Buffer<span class="hl opt">:</span>
      <span class="hl kwa">loop</span>
         <span class="hl kwa">if</span> Data_Length <span class="hl opt">+</span> Max_Line_Length <span class="hl opt">&gt;</span> Data_Buffer<span class="hl kwd">'Length</span> <span class="hl kwa">then</span>
            Ptr <span class="hl opt">:=</span> Data_Buffer<span class="hl opt">;</span>
            Data_Buffer <span class="hl opt">:=</span> <span class="hl kwa">new</span> <span class="hl kwb">String</span> <span class="hl opt">(</span><span class="hl num">1</span> <span class="hl opt">..</span> <span class="hl num">2</span> <span class="hl opt">*</span> Data_Buffer<span class="hl kwd">'Length</span><span class="hl opt">);</span>
            Data_Buffer <span class="hl opt">(</span><span class="hl num">1</span> <span class="hl opt">..</span> Data_Length<span class="hl opt">) :=</span> Ptr <span class="hl opt">(</span><span class="hl num">1</span> <span class="hl opt">..</span> Data_Length<span class="hl opt">);</span>
            Free <span class="hl opt">(</span>Ptr<span class="hl opt">);</span>
         <span class="hl kwa">end if</span><span class="hl opt">;</span>

         Get_Next_Line<span class="hl opt">:</span>
         <span class="hl kwa">declare</span>
            Line <span class="hl opt">:</span> <span class="hl kwa">constant</span> <span class="hl kwb">String</span> <span class="hl opt">:=</span> Line_IO<span class="hl opt">.</span>Get_Line<span class="hl opt">;</span>
            Present_Line_Length <span class="hl opt">:</span> <span class="hl kwa">constant</span> <span class="hl kwb">Natural</span> <span class="hl opt">:=</span> Line<span class="hl kwd">'Length</span><span class="hl opt">;</span>
            Strt <span class="hl opt">:</span> <span class="hl kwb">Natural</span><span class="hl opt">;</span>
         <span class="hl kwa">begin</span>

            <span class="hl kwa">if</span> Present_Line_Length <span class="hl opt">&lt;</span> <span class="hl num">1</span> <span class="hl kwa">then</span>
               Header_Length <span class="hl opt">:=</span> <span class="hl num">0</span><span class="hl opt">;</span>
               <span class="hl kwa">exit</span> Fill_Data_Buffer<span class="hl opt">;</span>
            <span class="hl kwa">end if</span><span class="hl opt">;</span>

            <span class="hl kwa">if</span> Present_Line_Length <span class="hl opt">&gt;</span> Max_Line_Length <span class="hl kwa">then</span>
               <span class="hl kwa">raise</span> Program_Error<span class="hl opt">;</span>
            <span class="hl kwa">end if</span><span class="hl opt">;</span>

            <span class="hl kwa">if</span> Line<span class="hl opt">(</span>Line<span class="hl kwd">'First</span><span class="hl opt">) =</span> Section_Marker <span class="hl kwa">then</span>
               Strt <span class="hl opt">:=</span> Next_Header<span class="hl kwd">'First</span><span class="hl opt">;</span>
               Next_Header<span class="hl opt">(</span>Strt <span class="hl opt">..</span> Strt <span class="hl opt">+</span> Present_Line_Length <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">) :=</span> Line<span class="hl opt">;</span>
               Header_Length <span class="hl opt">:=</span> Present_Line_Length<span class="hl opt">;</span>
               <span class="hl kwa">exit</span> Fill_Data_Buffer<span class="hl opt">;</span>
            <span class="hl kwa">else</span>
               Data_Buffer<span class="hl opt">(</span>Data_Length<span class="hl opt">+</span><span class="hl num">1</span> <span class="hl opt">..</span> Data_Length<span class="hl opt">+</span>Present_Line_Length<span class="hl opt">):=</span>Line<span class="hl opt">;</span>
               Data_Length <span class="hl opt">:=</span> Data_Length <span class="hl opt">+</span> Present_Line_Length<span class="hl opt">;</span>
            <span class="hl kwa">end if</span><span class="hl opt">;</span>

         <span class="hl kwa">end</span> Get_Next_Line<span class="hl opt">;</span>

      <span class="hl kwa">end loop</span> Fill_Data_Buffer<span class="hl opt">;</span>

   <span class="hl kwa">exception</span>
      <span class="hl kwa">when</span> Ada<span class="hl opt">.</span>IO_Exceptions<span class="hl opt">.</span>End_Error <span class="hl opt">=&gt;</span>
        <span class="hl kwa">return</span><span class="hl opt">;</span>
   <span class="hl kwa">end</span> Read_Section<span class="hl opt">;</span>

   overriding <span class="hl kwa">procedure</span> Initialize <span class="hl opt">(</span>Object <span class="hl opt">:</span> <span class="hl kwa">in out</span> String_Pointer<span class="hl opt">)</span> <span class="hl kwa">is</span>
   <span class="hl kwa">begin</span>
      Object<span class="hl opt">.</span>Buffer <span class="hl opt">:=</span> <span class="hl kwa">new</span> <span class="hl kwb">String</span> <span class="hl opt">(</span><span class="hl num">1</span> <span class="hl opt">..</span> Object<span class="hl opt">.</span>Size<span class="hl opt">);</span>
   <span class="hl kwa">end</span> Initialize<span class="hl opt">;</span>

   overriding <span class="hl kwa">procedure</span> Finalize <span class="hl opt">(</span>Object <span class="hl opt">:</span> <span class="hl kwa">in out</span> String_Pointer<span class="hl opt">)</span> <span class="hl kwa">is</span>
   <span class="hl kwa">begin</span>
      Free <span class="hl opt">(</span>Object<span class="hl opt">.</span>Buffer<span class="hl opt">);</span>
   <span class="hl kwa">end</span> Finalize<span class="hl opt">;</span>

<span class="hl kwa">end</span> Text_Input<span class="hl opt">;</span>

<span class="hl kwa">package</span> Line_IO <span class="hl kwa">is</span>

   <span class="hl slc">--  Stream I/O of lines of text</span>

   <span class="hl kwa">pragma</span> Elaborate_Body <span class="hl opt">(</span>Line_IO<span class="hl opt">);</span>

   Separator <span class="hl opt">:</span> <span class="hl kwa">constant</span> <span class="hl kwb">String</span> <span class="hl opt">:= (</span><span class="hl num">1</span> <span class="hl opt">=&gt;</span> ASCII<span class="hl opt">.</span>LF<span class="hl opt">);</span>

   <span class="hl kwa">procedure</span> Put_Line <span class="hl opt">(</span>Item <span class="hl opt">:</span> <span class="hl kwb">String</span><span class="hl opt">);</span>

   <span class="hl kwa">procedure</span> Put <span class="hl opt">(</span>Item <span class="hl opt">:</span> <span class="hl kwb">String</span><span class="hl opt">);</span>

   <span class="hl kwa">function</span> Get_Line <span class="hl kwa">return</span> <span class="hl kwb">String</span><span class="hl opt">;</span>

   <span class="hl kwa">procedure</span> Close<span class="hl opt">;</span>  <span class="hl slc">--  close output</span>

<span class="hl kwa">end</span> Line_IO<span class="hl opt">;</span>


<span class="hl kwa">with</span> Ada<span class="hl opt">.</span>Streams<span class="hl opt">.</span>Stream_IO<span class="hl opt">;</span>

<span class="hl kwa">package body</span> Line_IO <span class="hl kwa">is</span>

   <span class="hl kwa">use</span> Ada<span class="hl opt">.</span>Streams<span class="hl opt">;</span>

   <span class="hl kwa">subtype</span> Separator_Index <span class="hl kwa">is</span> Stream_Element_Offset
       <span class="hl kwa">range</span> <span class="hl num">0</span> <span class="hl opt">..</span> Separator<span class="hl kwd">'Length</span> <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">;</span>
   Separator_Bytes <span class="hl opt">:</span> <span class="hl kwa">constant</span> Stream_Element_Array <span class="hl opt">(</span>Separator_Index<span class="hl opt">) :=</span>
       <span class="hl opt">(</span><span class="hl num">0</span> <span class="hl opt">=&gt;</span> <span class="hl kwb">Character</span><span class="hl kwd">'Pos</span> <span class="hl opt">(</span>Separator <span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">)));</span>
   <span class="hl slc">--  Converts Separator into type Stream_Element_Array. Used by Put_Line.</span>

   Stdin  <span class="hl opt">:</span> Stream_IO<span class="hl opt">.</span>File_Type<span class="hl opt">;</span>
   Stdout <span class="hl opt">:</span> Stream_IO<span class="hl opt">.</span>File_Type<span class="hl opt">;</span>

   <span class="hl kwa">procedure</span> Put_Line <span class="hl opt">(</span>Item <span class="hl opt">:</span> <span class="hl kwb">String</span><span class="hl opt">)</span> <span class="hl kwa">is</span>
      <span class="hl kwa">subtype</span> Index <span class="hl kwa">is</span> Stream_Element_Offset <span class="hl kwa">range</span> <span class="hl num">1</span> <span class="hl opt">..</span> Item<span class="hl kwd">'Length</span><span class="hl opt">;</span>
      <span class="hl kwa">subtype</span> XBytes <span class="hl kwa">is</span> Stream_Element_Array <span class="hl opt">(</span>Index<span class="hl opt">);</span>
      Item_Bytes<span class="hl opt">:</span> XBytes<span class="hl opt">;</span>
      <span class="hl kwa">pragma</span> Import <span class="hl opt">(</span>Ada<span class="hl opt">,</span> Item_Bytes<span class="hl opt">);</span>
      <span class="hl kwa">for</span> Item_Bytes<span class="hl kwd">'Address</span> <span class="hl kwa">use</span> Item<span class="hl kwd">'Address</span><span class="hl opt">;</span>
      <span class="hl kwa">pragma</span> Assert <span class="hl opt">(</span>Item<span class="hl kwd">'Size</span> <span class="hl opt">=</span> Item_Bytes<span class="hl kwd">'Size</span><span class="hl opt">);</span>
   <span class="hl kwa">begin</span>
      Stream_IO<span class="hl opt">.</span>Write <span class="hl opt">(</span>Stdout<span class="hl opt">,</span> Item_Bytes<span class="hl opt">);</span>
      Stream_IO<span class="hl opt">.</span>Write <span class="hl opt">(</span>Stdout<span class="hl opt">,</span> Separator_Bytes<span class="hl opt">);</span>
   <span class="hl kwa">end</span> Put_Line<span class="hl opt">;</span>

   <span class="hl kwa">procedure</span> Put <span class="hl opt">(</span>Item <span class="hl opt">:</span> <span class="hl kwb">String</span><span class="hl opt">)</span> <span class="hl kwa">is</span>
      <span class="hl kwa">subtype</span> Index <span class="hl kwa">is</span> Stream_Element_Offset <span class="hl kwa">range</span> <span class="hl num">1</span> <span class="hl opt">..</span> Item<span class="hl kwd">'Length</span><span class="hl opt">;</span>
      <span class="hl kwa">subtype</span> XBytes <span class="hl kwa">is</span> Stream_Element_Array <span class="hl opt">(</span>Index<span class="hl opt">);</span>
      Item_Bytes<span class="hl opt">:</span> XBytes<span class="hl opt">;</span>
      <span class="hl kwa">pragma</span> Import <span class="hl opt">(</span>Ada<span class="hl opt">,</span> Item_Bytes<span class="hl opt">);</span>
      <span class="hl kwa">for</span> Item_Bytes<span class="hl kwd">'Address</span> <span class="hl kwa">use</span> Item<span class="hl kwd">'Address</span><span class="hl opt">;</span>
      <span class="hl kwa">pragma</span> Assert <span class="hl opt">(</span>Item<span class="hl kwd">'Size</span> <span class="hl opt">=</span> Item_Bytes<span class="hl kwd">'Size</span><span class="hl opt">);</span>
   <span class="hl kwa">begin</span>
      Stream_IO<span class="hl opt">.</span>Write <span class="hl opt">(</span>Stdout<span class="hl opt">,</span> Item_Bytes<span class="hl opt">);</span>
   <span class="hl kwa">end</span> Put<span class="hl opt">;</span>

   <span class="hl slc">--  Declarations associated with filling a text buffer.</span>

   BUFSIZ<span class="hl opt">:</span> <span class="hl kwa">constant</span> <span class="hl opt">:=</span> <span class="hl num">8</span>_192 <span class="hl opt">*</span> <span class="hl num">8</span><span class="hl opt">;</span>
   <span class="hl kwa">pragma</span> Assert<span class="hl opt">(</span><span class="hl kwb">Character</span><span class="hl kwd">'Size</span> <span class="hl opt">=</span> Stream_Element<span class="hl kwd">'Size</span><span class="hl opt">);</span>

   SL <span class="hl opt">:</span> <span class="hl kwa">constant</span> <span class="hl kwb">Natural</span>   <span class="hl opt">:=</span> Separator<span class="hl kwd">'Length</span><span class="hl opt">;</span>

   <span class="hl kwa">subtype</span> Extended_Buffer_Index <span class="hl kwa">is</span> <span class="hl kwb">Positive</span> <span class="hl kwa">range</span> <span class="hl num">1</span> <span class="hl opt">..</span> BUFSIZ <span class="hl opt">+</span> SL<span class="hl opt">;</span>
   <span class="hl kwa">subtype</span> Buffer_Index <span class="hl kwa">is</span> Extended_Buffer_Index
     <span class="hl kwa">range</span> Extended_Buffer_Index<span class="hl kwd">'First</span> <span class="hl opt">..</span> Extended_Buffer_Index<span class="hl kwd">'Last</span> <span class="hl opt">-</span> SL<span class="hl opt">;</span>
   <span class="hl kwa">subtype</span> Extended_Bytes_Index <span class="hl kwa">is</span> Stream_Element_Offset
     <span class="hl kwa">range</span> <span class="hl num">1</span> <span class="hl opt">..</span> Stream_Element_Offset<span class="hl opt">(</span>Extended_Buffer_Index<span class="hl kwd">'Last</span><span class="hl opt">);</span>
   <span class="hl kwa">subtype</span> Bytes_Index <span class="hl kwa">is</span> Extended_Bytes_Index
     <span class="hl kwa">range</span> Extended_Bytes_Index<span class="hl kwd">'First</span>
     <span class="hl opt">.. (</span>Extended_Bytes_Index<span class="hl kwd">'Last</span> <span class="hl opt">-</span> Stream_Element_Offset<span class="hl opt">(</span>SL<span class="hl opt">));</span>

   <span class="hl kwa">subtype</span> Buffer_Data <span class="hl kwa">is</span> <span class="hl kwb">String</span><span class="hl opt">(</span>Extended_Buffer_Index<span class="hl opt">);</span>
   <span class="hl kwa">subtype</span> Buffer_Bytes <span class="hl kwa">is</span> Stream_Element_Array<span class="hl opt">(</span>Extended_Bytes_Index<span class="hl opt">);</span>

   Buffer <span class="hl opt">:</span> Buffer_Data<span class="hl opt">;</span>
   Bytes  <span class="hl opt">:</span> Buffer_Bytes<span class="hl opt">;</span>
   <span class="hl kwa">for</span> Bytes<span class="hl kwd">'Address</span> <span class="hl kwa">use</span> Buffer<span class="hl kwd">'Address</span><span class="hl opt">;</span>
   <span class="hl kwa">pragma</span> Import <span class="hl opt">(</span>Ada<span class="hl opt">,</span> Bytes<span class="hl opt">);</span>

   <span class="hl slc">-- start of next substring and last valid character in buffer</span>
   Position <span class="hl opt">:</span> <span class="hl kwb">Natural</span> <span class="hl kwa">range</span> <span class="hl num">0</span> <span class="hl opt">..</span> Extended_Buffer_Index<span class="hl kwd">'Last</span><span class="hl opt">;</span>
   Last     <span class="hl opt">:</span> <span class="hl kwb">Natural</span> <span class="hl kwa">range</span> <span class="hl num">0</span> <span class="hl opt">..</span> Buffer_Index<span class="hl kwd">'Last</span><span class="hl opt">;</span>
   End_Of_Input <span class="hl opt">:</span> <span class="hl kwb">Boolean</span><span class="hl opt">;</span>

   <span class="hl kwa">function</span> Get_Line <span class="hl kwa">return</span> <span class="hl kwb">String</span> <span class="hl kwa">is</span>

      <span class="hl kwa">procedure</span> Reload <span class="hl kwa">is</span>
         <span class="hl slc">--  fill Buffer with bytes available</span>
         Last_Filled <span class="hl opt">:</span> Stream_Element_Offset<span class="hl opt">;</span>
      <span class="hl kwa">begin</span>
         <span class="hl kwa">if</span> Last <span class="hl opt">&lt;</span> Buffer_Index<span class="hl kwd">'Last</span> <span class="hl kwa">then</span>
            <span class="hl kwa">raise</span> Stream_IO<span class="hl opt">.</span>End_Error<span class="hl opt">;</span>
         <span class="hl kwa">end if</span><span class="hl opt">;</span>
         Stream_IO<span class="hl opt">.</span>Read<span class="hl opt">(</span>Stdin<span class="hl opt">,</span>
           Item <span class="hl opt">=&gt;</span> Bytes<span class="hl opt">(</span>Bytes_Index<span class="hl opt">),</span>
           Last <span class="hl opt">=&gt;</span> Last_Filled<span class="hl opt">);</span>
         Last <span class="hl opt">:=</span> <span class="hl kwb">Natural</span><span class="hl opt">(</span>Last_Filled<span class="hl opt">);</span>
         Position <span class="hl opt">:=</span> <span class="hl num">1</span><span class="hl opt">;</span>
         Buffer<span class="hl opt">(</span>Last <span class="hl opt">+</span> <span class="hl num">1</span> <span class="hl opt">..</span> Last <span class="hl opt">+</span> SL<span class="hl opt">) :=</span> Separator<span class="hl opt">;</span>
      <span class="hl kwa">end</span> Reload<span class="hl opt">;</span>

      <span class="hl kwa">function</span> Separator_Position <span class="hl kwa">return</span> <span class="hl kwb">Natural</span> <span class="hl kwa">is</span>
         <span class="hl slc">--   index of next Separator_Sequence (may be sentinel)</span>
         K <span class="hl opt">:</span> Extended_Buffer_Index <span class="hl opt">:=</span> Position<span class="hl opt">;</span>
      <span class="hl kwa">begin</span>
         <span class="hl kwa">loop</span>
            <span class="hl kwa">if</span> Buffer<span class="hl opt">(</span>K<span class="hl opt">) =</span> Separator<span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">)</span> <span class="hl kwa">then</span>
               <span class="hl kwa">exit</span><span class="hl opt">;</span>
            <span class="hl kwa">elsif</span> Buffer<span class="hl opt">(</span>K<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">) =</span> Separator<span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">)</span> <span class="hl kwa">then</span>
               K <span class="hl opt">:=</span> K <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span> <span class="hl kwa">exit</span><span class="hl opt">;</span>
            <span class="hl kwa">else</span>
               K <span class="hl opt">:=</span> K <span class="hl opt">+</span> <span class="hl num">2</span><span class="hl opt">;</span>
            <span class="hl kwa">end if</span><span class="hl opt">;</span>
         <span class="hl kwa">end loop</span><span class="hl opt">;</span>
        <span class="hl kwa">return</span> K<span class="hl opt">;</span>
      <span class="hl kwa">end</span> Separator_Position<span class="hl opt">;</span>

      Next_Separator <span class="hl opt">:</span> <span class="hl kwb">Natural</span> <span class="hl kwa">range</span> <span class="hl num">0</span> <span class="hl opt">..</span> Extended_Buffer_Index<span class="hl kwd">'Last</span><span class="hl opt">;</span>
   <span class="hl kwa">begin</span>  <span class="hl slc">-- Get_Line</span>

      <span class="hl kwa">if</span> End_Of_Input <span class="hl kwa">then</span>
         <span class="hl kwa">raise</span> Stream_IO<span class="hl opt">.</span>End_Error<span class="hl opt">;</span>
      <span class="hl kwa">end if</span><span class="hl opt">;</span>

      Next_Separator <span class="hl opt">:=</span> Separator_Position<span class="hl opt">;</span>

      <span class="hl kwa">if</span> Next_Separator <span class="hl opt">&gt;</span> Last <span class="hl kwa">then</span>
         <span class="hl kwa">declare</span>
            Result <span class="hl opt">:</span> <span class="hl kwa">constant</span> <span class="hl kwb">String</span> <span class="hl opt">:=</span> Buffer<span class="hl opt">(</span>Position <span class="hl opt">..</span> Last<span class="hl opt">);</span>
            <span class="hl kwa">subtype</span> XString <span class="hl kwa">is</span> <span class="hl kwb">String</span> <span class="hl opt">(</span><span class="hl num">1</span> <span class="hl opt">..</span> Last <span class="hl opt">-</span> Position <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">);</span>
         <span class="hl kwa">begin</span>
            <span class="hl kwa">begin</span>
               Reload<span class="hl opt">;</span>
               <span class="hl kwa">return</span> XString<span class="hl opt">(</span>Result<span class="hl opt">) &amp;</span> Get_Line<span class="hl opt">;</span>
            <span class="hl kwa">exception</span>
               <span class="hl kwa">when</span> Stream_IO<span class="hl opt">.</span>End_Error <span class="hl opt">=&gt;</span>
                  End_Of_Input <span class="hl opt">:=</span> <span class="hl kwd">True</span><span class="hl opt">;</span>
                  <span class="hl kwa">return</span> XString<span class="hl opt">(</span>Result<span class="hl opt">);</span>
            <span class="hl kwa">end</span><span class="hl opt">;</span>
         <span class="hl kwa">end</span><span class="hl opt">;</span>
      <span class="hl kwa">else</span>
         <span class="hl kwa">declare</span>
            Result <span class="hl opt">:</span> <span class="hl kwb">String</span> <span class="hl kwa">renames</span> Buffer<span class="hl opt">(</span>Position <span class="hl opt">..</span> Next_Separator <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">);</span>
            <span class="hl kwa">subtype</span> XString <span class="hl kwa">is</span> <span class="hl kwb">String</span> <span class="hl opt">(</span><span class="hl num">1</span> <span class="hl opt">..</span> Next_Separator <span class="hl opt">-</span> Position<span class="hl opt">);</span>
         <span class="hl kwa">begin</span>
            Position <span class="hl opt">:=</span> Next_Separator <span class="hl opt">+</span> SL<span class="hl opt">;</span>
            <span class="hl kwa">return</span> XString <span class="hl opt">(</span>Result<span class="hl opt">);</span>
         <span class="hl kwa">end</span><span class="hl opt">;</span>
      <span class="hl kwa">end if</span><span class="hl opt">;</span>

      <span class="hl kwa">raise</span> Program_Error<span class="hl opt">;</span>
   <span class="hl kwa">end</span> Get_Line<span class="hl opt">;</span>

   <span class="hl kwa">procedure</span> Close <span class="hl kwa">is</span>
   <span class="hl kwa">begin</span>
      Stream_IO<span class="hl opt">.</span>Close <span class="hl opt">(</span>Stdout<span class="hl opt">);</span>
   <span class="hl kwa">end</span> Close<span class="hl opt">;</span>

<span class="hl kwa">begin</span>
   Stream_IO<span class="hl opt">.</span>Open <span class="hl opt">(</span>Stdout<span class="hl opt">,</span>
      Mode <span class="hl opt">=&gt;</span> Stream_IO<span class="hl opt">.</span>Out_File<span class="hl opt">,</span>
      Name <span class="hl opt">=&gt;</span> <span class="hl str">&quot;/dev/stdout&quot;</span><span class="hl opt">);</span>
   Stream_IO<span class="hl opt">.</span>Open <span class="hl opt">(</span>Stdin<span class="hl opt">,</span>
      Mode <span class="hl opt">=&gt;</span> Stream_IO<span class="hl opt">.</span>In_File<span class="hl opt">,</span>
      Name <span class="hl opt">=&gt;</span> <span class="hl str">&quot;/dev/stdin&quot;</span><span class="hl opt">);</span>

   Buffer<span class="hl opt">(</span>Buffer_Index<span class="hl kwd">'Last</span> <span class="hl opt">+</span> <span class="hl num">1</span> <span class="hl opt">..</span> Buffer<span class="hl kwd">'Last</span><span class="hl opt">) :=</span> Separator<span class="hl opt">;</span>
   Position <span class="hl opt">:=</span> Buffer_Index<span class="hl kwd">'Last</span> <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span>
   Last     <span class="hl opt">:=</span> Buffer_Index<span class="hl kwd">'Last</span><span class="hl opt">;</span>
   End_Of_Input <span class="hl opt">:=</span> <span class="hl kwd">False</span><span class="hl opt">;</span>
<span class="hl kwa">end</span> Line_IO<span class="hl opt">;</span>

