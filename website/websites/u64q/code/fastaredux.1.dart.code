<span class="hl slc">// The Computer Language Benchmarks Game</span>
<span class="hl slc">// http://benchmarksgame.alioth.debian.org/</span>

<span class="hl slc">// contributed by Jos Hirth</span>
<span class="hl slc">// based on the Java/C# versions by Robert F. Tobler, Enotus, Isaac Gouy, and Alp Toker</span>

<span class="hl kwa">import</span> <span class="hl str">'dart:io'</span><span class="hl opt">;</span>
<span class="hl kwa">import</span> <span class="hl str">'dart:typed_data'</span><span class="hl opt">;</span>
<span class="hl kwa">import</span> <span class="hl str">'dart:math'</span> as math<span class="hl opt">;</span>

<span class="hl kwa">const</span> <span class="hl kwb">int</span> LINE_LENGTH <span class="hl opt">=</span> <span class="hl num">60</span><span class="hl opt">;</span>
<span class="hl kwa">const</span> <span class="hl kwb">int</span> OUT_BUFFER_SIZE <span class="hl opt">=</span> <span class="hl num">256</span> <span class="hl opt">*</span> <span class="hl num">1024</span><span class="hl opt">;</span>
<span class="hl kwa">const</span> <span class="hl kwb">int</span> LOOKUP_SIZE <span class="hl opt">=</span> <span class="hl num">4</span> <span class="hl opt">*</span> <span class="hl num">1024</span><span class="hl opt">;</span>
<span class="hl kwa">const</span> <span class="hl kwb">double</span> LOOKUP_SCALE <span class="hl opt">= (</span>LOOKUP_SIZE <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">) /</span> <span class="hl num">1</span><span class="hl opt">;</span>
<span class="hl kwa">const</span> <span class="hl kwb">int</span> NEW_LINE_CHARACTER <span class="hl opt">=</span> <span class="hl num">10</span><span class="hl opt">;</span>

<span class="hl slc">/// Returns the code unit of the first char.</span>
<span class="hl kwb">int byte</span> <span class="hl opt">(</span>String s<span class="hl opt">) =&gt;</span> s<span class="hl opt">.</span><span class="hl kwd">codeUnitAt</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">);</span>

<span class="hl slc">/// Returns all code units as an Uint8List.</span>
Uint8List <span class="hl kwd">bytes</span> <span class="hl opt">(</span>String s<span class="hl opt">) =&gt;</span> <span class="hl kwa">new</span> Uint8List<span class="hl opt">.</span><span class="hl kwd">fromList</span><span class="hl opt">(</span>s<span class="hl opt">.</span>codeUnits<span class="hl opt">);</span>

<span class="hl kwa">class</span> Freq <span class="hl opt">{</span>
  <span class="hl kwb">int</span> c<span class="hl opt">;</span>
  <span class="hl kwb">double</span> p<span class="hl opt">;</span>
  <span class="hl kwd">Freq</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">.</span>c<span class="hl opt">,</span> <span class="hl kwa">this</span><span class="hl opt">.</span>p<span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwa">class</span> Random <span class="hl opt">{</span>
  <span class="hl kwb">static</span> <span class="hl kwa">const</span> <span class="hl kwb">int</span> IM <span class="hl opt">=</span> <span class="hl num">139968</span><span class="hl opt">;</span>
  <span class="hl kwb">static</span> <span class="hl kwa">const</span> <span class="hl kwb">int</span> IA <span class="hl opt">=</span> <span class="hl num">3877</span><span class="hl opt">;</span>
  <span class="hl kwb">static</span> <span class="hl kwa">const</span> <span class="hl kwb">int</span> IC <span class="hl opt">=</span> <span class="hl num">29573</span><span class="hl opt">;</span>
  <span class="hl kwb">static</span> <span class="hl kwa">const</span> <span class="hl kwb">double</span> SCALE <span class="hl opt">=</span> LOOKUP_SCALE <span class="hl opt">/</span> IM<span class="hl opt">;</span>
  <span class="hl kwb">static int</span> last <span class="hl opt">=</span> <span class="hl num">42</span><span class="hl opt">;</span>

  <span class="hl kwb">static double</span> <span class="hl kwd">next</span> <span class="hl opt">() {</span>
    <span class="hl kwa">return</span> SCALE <span class="hl opt">* (</span>last <span class="hl opt">= (</span>last <span class="hl opt">*</span> IA <span class="hl opt">+</span> IC<span class="hl opt">) %</span> IM<span class="hl opt">);</span>
  <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl kwa">class</span> Out <span class="hl opt">{</span>
  <span class="hl kwb">static</span> Uint8List buf <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Uint8List</span><span class="hl opt">(</span>OUT_BUFFER_SIZE<span class="hl opt">);</span>
  <span class="hl kwb">static</span> <span class="hl kwa">const</span> <span class="hl kwb">int</span> LIMIT <span class="hl opt">=</span> OUT_BUFFER_SIZE <span class="hl opt">-</span> <span class="hl num">2</span> <span class="hl opt">*</span> LINE_LENGTH <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">;</span>
  <span class="hl kwb">static int</span> ct <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>

  <span class="hl kwb">static</span> <span class="hl kwa">void</span> <span class="hl kwd">checkFlush</span> <span class="hl opt">() {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>ct <span class="hl opt">&gt;=</span> LIMIT<span class="hl opt">) {</span>
      stdout<span class="hl opt">.</span><span class="hl kwd">add</span><span class="hl opt">(</span><span class="hl kwa">new</span> Uint8List<span class="hl opt">.</span><span class="hl kwd">view</span><span class="hl opt">(</span>buf<span class="hl opt">.</span>buffer<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> ct<span class="hl opt">));</span>
      buf <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Uint8List</span><span class="hl opt">(</span>OUT_BUFFER_SIZE<span class="hl opt">);</span>
      ct <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>
  <span class="hl opt">}</span>

  <span class="hl kwb">static</span> <span class="hl kwa">void</span> <span class="hl kwd">finalFlush</span><span class="hl opt">() {</span>
    stdout<span class="hl opt">.</span><span class="hl kwd">add</span><span class="hl opt">(</span><span class="hl kwa">new</span> Uint8List<span class="hl opt">.</span><span class="hl kwd">view</span><span class="hl opt">(</span>buf<span class="hl opt">.</span>buffer<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> ct<span class="hl opt">));</span>
  <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl kwa">class</span> RandomFasta <span class="hl opt">{</span>
  <span class="hl kwb">static</span> final List<span class="hl opt">&lt;</span>Freq<span class="hl opt">&gt;</span> lookup <span class="hl opt">=</span> <span class="hl kwa">new</span> List<span class="hl opt">&lt;</span>Freq<span class="hl opt">&gt;(</span>LOOKUP_SIZE<span class="hl opt">);</span>

  <span class="hl kwb">static</span> <span class="hl kwa">void</span> <span class="hl kwd">makeLookup</span> <span class="hl opt">(</span>List<span class="hl opt">&lt;</span>Freq<span class="hl opt">&gt;</span> a<span class="hl opt">) {</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">,</span> j <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> LOOKUP_SIZE<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
      <span class="hl kwa">while</span> <span class="hl opt">(</span>a<span class="hl kwc">[j]</span><span class="hl opt">.</span>p <span class="hl opt">&lt;</span> i<span class="hl opt">) {</span>
        j<span class="hl opt">++;</span>
      <span class="hl opt">}</span>
      lookup<span class="hl kwc">[i]</span> <span class="hl opt">=</span> a<span class="hl kwc">[j]</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>
  <span class="hl opt">}</span>

  <span class="hl kwb">static</span> <span class="hl kwa">void</span> <span class="hl kwd">addLine</span> <span class="hl opt">(</span><span class="hl kwb">int</span> bytes<span class="hl opt">) {</span>
    Out<span class="hl opt">.</span><span class="hl kwd">checkFlush</span><span class="hl opt">();</span>
    <span class="hl kwb">int</span> lct <span class="hl opt">=</span> Out<span class="hl opt">.</span>ct<span class="hl opt">;</span>
    <span class="hl kwa">while</span> <span class="hl opt">(</span>lct <span class="hl opt">&lt;</span> Out<span class="hl opt">.</span>ct <span class="hl opt">+</span> bytes<span class="hl opt">) {</span>
      <span class="hl kwb">double</span> r <span class="hl opt">=</span> Random<span class="hl opt">.</span><span class="hl kwd">next</span><span class="hl opt">();</span>
      <span class="hl kwb">int</span> ai <span class="hl opt">=</span> r<span class="hl opt">.</span><span class="hl kwd">toInt</span><span class="hl opt">();</span>
      <span class="hl kwa">while</span> <span class="hl opt">(</span>lookup<span class="hl kwc">[ai]</span><span class="hl opt">.</span>p <span class="hl opt">&lt;</span> r<span class="hl opt">) {</span>
        ai<span class="hl opt">++;</span>
      <span class="hl opt">}</span>
      Out<span class="hl opt">.</span>buf<span class="hl opt">[</span>lct<span class="hl opt">++] =</span> lookup<span class="hl kwc">[ai]</span><span class="hl opt">.</span>c<span class="hl opt">;</span>
    <span class="hl opt">}</span>
    Out<span class="hl opt">.</span>buf<span class="hl opt">[</span>lct<span class="hl opt">++] =</span> NEW_LINE_CHARACTER<span class="hl opt">;</span>
    Out<span class="hl opt">.</span>ct <span class="hl opt">=</span> lct<span class="hl opt">;</span>
  <span class="hl opt">}</span>

  <span class="hl kwb">static</span> <span class="hl kwa">void</span> <span class="hl kwd">make</span><span class="hl opt">(</span>String desc<span class="hl opt">,</span> List<span class="hl opt">&lt;</span>Freq<span class="hl opt">&gt;</span> a<span class="hl opt">,</span> <span class="hl kwb">int</span> n<span class="hl opt">) {</span>
    <span class="hl kwd">makeLookup</span><span class="hl opt">(</span>a<span class="hl opt">);</span>

    Out<span class="hl opt">.</span>buf<span class="hl opt">.</span><span class="hl kwd">setRange</span><span class="hl opt">(</span>Out<span class="hl opt">.</span>ct<span class="hl opt">,</span> Out<span class="hl opt">.</span>ct <span class="hl opt">+</span> desc<span class="hl opt">.</span>length<span class="hl opt">,</span> <span class="hl kwd">bytes</span><span class="hl opt">(</span>desc<span class="hl opt">),</span> <span class="hl num">0</span><span class="hl opt">);</span>
    Out<span class="hl opt">.</span>ct <span class="hl opt">+=</span> desc<span class="hl opt">.</span>length<span class="hl opt">;</span>

    <span class="hl kwa">while</span> <span class="hl opt">(</span>n <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">) {</span>
      <span class="hl kwb">int</span> bytes <span class="hl opt">=</span> math<span class="hl opt">.</span><span class="hl kwd">min</span><span class="hl opt">(</span>LINE_LENGTH<span class="hl opt">,</span> n<span class="hl opt">);</span>
      <span class="hl kwd">addLine</span><span class="hl opt">(</span>bytes<span class="hl opt">);</span>
      n <span class="hl opt">-=</span> bytes<span class="hl opt">;</span>
    <span class="hl opt">}</span>
  <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl kwa">class</span> RepeatFasta <span class="hl opt">{</span>
  <span class="hl kwb">static</span> <span class="hl kwa">void</span> <span class="hl kwd">make</span><span class="hl opt">(</span>String desc<span class="hl opt">,</span> Uint8List alu<span class="hl opt">,</span> <span class="hl kwb">int</span> n<span class="hl opt">) {</span>
    Out<span class="hl opt">.</span>buf<span class="hl opt">.</span><span class="hl kwd">setRange</span><span class="hl opt">(</span>Out<span class="hl opt">.</span>ct<span class="hl opt">,</span> Out<span class="hl opt">.</span>ct <span class="hl opt">+</span> desc<span class="hl opt">.</span>length<span class="hl opt">,</span> <span class="hl kwd">bytes</span><span class="hl opt">(</span>desc<span class="hl opt">),</span> <span class="hl num">0</span><span class="hl opt">);</span>
    Out<span class="hl opt">.</span>ct <span class="hl opt">+=</span> desc<span class="hl opt">.</span>length<span class="hl opt">;</span>

    Uint8List buf <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Uint8List</span><span class="hl opt">(</span>alu<span class="hl opt">.</span>length <span class="hl opt">+</span> LINE_LENGTH<span class="hl opt">);</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> buf<span class="hl opt">.</span>length<span class="hl opt">;</span> i <span class="hl opt">+=</span> alu<span class="hl opt">.</span>length<span class="hl opt">) {</span>
      buf<span class="hl opt">.</span><span class="hl kwd">setRange</span><span class="hl opt">(</span>i<span class="hl opt">,</span> i <span class="hl opt">+</span> math<span class="hl opt">.</span><span class="hl kwd">min</span><span class="hl opt">(</span>alu<span class="hl opt">.</span>length<span class="hl opt">,</span> buf<span class="hl opt">.</span>length <span class="hl opt">-</span> i<span class="hl opt">),</span> alu<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>

    <span class="hl kwb">int</span> pos <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">while</span> <span class="hl opt">(</span>n <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">) {</span>
      <span class="hl kwb">int</span> bytes <span class="hl opt">=</span> math<span class="hl opt">.</span><span class="hl kwd">min</span><span class="hl opt">(</span>LINE_LENGTH<span class="hl opt">,</span> n<span class="hl opt">);</span>
      Out<span class="hl opt">.</span><span class="hl kwd">checkFlush</span><span class="hl opt">();</span>

      Out<span class="hl opt">.</span>buf<span class="hl opt">.</span><span class="hl kwd">setRange</span><span class="hl opt">(</span>Out<span class="hl opt">.</span>ct<span class="hl opt">,</span> Out<span class="hl opt">.</span>ct <span class="hl opt">+</span> bytes<span class="hl opt">,</span> buf<span class="hl opt">,</span> pos<span class="hl opt">);</span>
      Out<span class="hl opt">.</span>ct <span class="hl opt">+=</span> bytes<span class="hl opt">;</span>

      Out<span class="hl opt">.</span>buf<span class="hl opt">[</span>Out<span class="hl opt">.</span>ct<span class="hl opt">++] =</span> NEW_LINE_CHARACTER<span class="hl opt">;</span>
      pos <span class="hl opt">= (</span>pos <span class="hl opt">+</span> bytes<span class="hl opt">) %</span> alu<span class="hl opt">.</span>length<span class="hl opt">;</span>
      n <span class="hl opt">-=</span> bytes<span class="hl opt">;</span>
    <span class="hl opt">}</span>
  <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl kwa">void</span> <span class="hl kwd">main</span><span class="hl opt">(</span>args<span class="hl opt">) {</span>
  final String ALU <span class="hl opt">=</span>
    <span class="hl str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span>
    <span class="hl str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span>
    <span class="hl str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span>
    <span class="hl str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span>
    <span class="hl str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span>
    <span class="hl str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span>
    <span class="hl str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span><span class="hl opt">;</span>
  final List<span class="hl opt">&lt;</span>Freq<span class="hl opt">&gt;</span> IUB <span class="hl opt">= [</span>
    <span class="hl kwa">new</span> <span class="hl kwd">Freq</span><span class="hl opt">(</span><span class="hl kwb">byte</span><span class="hl opt">(</span><span class="hl str">'a'</span><span class="hl opt">),</span> <span class="hl num">0.27</span><span class="hl opt">),</span>
    <span class="hl kwa">new</span> <span class="hl kwd">Freq</span><span class="hl opt">(</span><span class="hl kwb">byte</span><span class="hl opt">(</span><span class="hl str">'c'</span><span class="hl opt">),</span> <span class="hl num">0.12</span><span class="hl opt">),</span>
    <span class="hl kwa">new</span> <span class="hl kwd">Freq</span><span class="hl opt">(</span><span class="hl kwb">byte</span><span class="hl opt">(</span><span class="hl str">'g'</span><span class="hl opt">),</span> <span class="hl num">0.12</span><span class="hl opt">),</span>
    <span class="hl kwa">new</span> <span class="hl kwd">Freq</span><span class="hl opt">(</span><span class="hl kwb">byte</span><span class="hl opt">(</span><span class="hl str">'t'</span><span class="hl opt">),</span> <span class="hl num">0.27</span><span class="hl opt">),</span>
    <span class="hl kwa">new</span> <span class="hl kwd">Freq</span><span class="hl opt">(</span><span class="hl kwb">byte</span><span class="hl opt">(</span><span class="hl str">'B'</span><span class="hl opt">),</span> <span class="hl num">0.02</span><span class="hl opt">),</span>
    <span class="hl kwa">new</span> <span class="hl kwd">Freq</span><span class="hl opt">(</span><span class="hl kwb">byte</span><span class="hl opt">(</span><span class="hl str">'D'</span><span class="hl opt">),</span> <span class="hl num">0.02</span><span class="hl opt">),</span>
    <span class="hl kwa">new</span> <span class="hl kwd">Freq</span><span class="hl opt">(</span><span class="hl kwb">byte</span><span class="hl opt">(</span><span class="hl str">'H'</span><span class="hl opt">),</span> <span class="hl num">0.02</span><span class="hl opt">),</span>
    <span class="hl kwa">new</span> <span class="hl kwd">Freq</span><span class="hl opt">(</span><span class="hl kwb">byte</span><span class="hl opt">(</span><span class="hl str">'K'</span><span class="hl opt">),</span> <span class="hl num">0.02</span><span class="hl opt">),</span>
    <span class="hl kwa">new</span> <span class="hl kwd">Freq</span><span class="hl opt">(</span><span class="hl kwb">byte</span><span class="hl opt">(</span><span class="hl str">'M'</span><span class="hl opt">),</span> <span class="hl num">0.02</span><span class="hl opt">),</span>
    <span class="hl kwa">new</span> <span class="hl kwd">Freq</span><span class="hl opt">(</span><span class="hl kwb">byte</span><span class="hl opt">(</span><span class="hl str">'N'</span><span class="hl opt">),</span> <span class="hl num">0.02</span><span class="hl opt">),</span>
    <span class="hl kwa">new</span> <span class="hl kwd">Freq</span><span class="hl opt">(</span><span class="hl kwb">byte</span><span class="hl opt">(</span><span class="hl str">'R'</span><span class="hl opt">),</span> <span class="hl num">0.02</span><span class="hl opt">),</span>
    <span class="hl kwa">new</span> <span class="hl kwd">Freq</span><span class="hl opt">(</span><span class="hl kwb">byte</span><span class="hl opt">(</span><span class="hl str">'S'</span><span class="hl opt">),</span> <span class="hl num">0.02</span><span class="hl opt">),</span>
    <span class="hl kwa">new</span> <span class="hl kwd">Freq</span><span class="hl opt">(</span><span class="hl kwb">byte</span><span class="hl opt">(</span><span class="hl str">'V'</span><span class="hl opt">),</span> <span class="hl num">0.02</span><span class="hl opt">),</span>
    <span class="hl kwa">new</span> <span class="hl kwd">Freq</span><span class="hl opt">(</span><span class="hl kwb">byte</span><span class="hl opt">(</span><span class="hl str">'W'</span><span class="hl opt">),</span> <span class="hl num">0.02</span><span class="hl opt">),</span>
    <span class="hl kwa">new</span> <span class="hl kwd">Freq</span><span class="hl opt">(</span><span class="hl kwb">byte</span><span class="hl opt">(</span><span class="hl str">'Y'</span><span class="hl opt">),</span> <span class="hl num">0.02</span><span class="hl opt">)</span>
  <span class="hl opt">];</span>
  final List<span class="hl opt">&lt;</span>Freq<span class="hl opt">&gt;</span> HomoSapiens <span class="hl opt">= [</span>
    <span class="hl kwa">new</span> <span class="hl kwd">Freq</span><span class="hl opt">(</span><span class="hl kwb">byte</span><span class="hl opt">(</span><span class="hl str">'a'</span><span class="hl opt">),</span> <span class="hl num">0.3029549426680</span><span class="hl opt">),</span>
    <span class="hl kwa">new</span> <span class="hl kwd">Freq</span><span class="hl opt">(</span><span class="hl kwb">byte</span><span class="hl opt">(</span><span class="hl str">'c'</span><span class="hl opt">),</span> <span class="hl num">0.1979883004921</span><span class="hl opt">),</span>
    <span class="hl kwa">new</span> <span class="hl kwd">Freq</span><span class="hl opt">(</span><span class="hl kwb">byte</span><span class="hl opt">(</span><span class="hl str">'g'</span><span class="hl opt">),</span> <span class="hl num">0.1975473066391</span><span class="hl opt">),</span>
    <span class="hl kwa">new</span> <span class="hl kwd">Freq</span><span class="hl opt">(</span><span class="hl kwb">byte</span><span class="hl opt">(</span><span class="hl str">'t'</span><span class="hl opt">),</span> <span class="hl num">0.3015094502008</span><span class="hl opt">)</span>
  <span class="hl opt">];</span>

  <span class="hl kwa">void</span> <span class="hl kwd">sumAndScale</span><span class="hl opt">(</span>List<span class="hl opt">&lt;</span>Freq<span class="hl opt">&gt;</span> a<span class="hl opt">) {</span>
    <span class="hl kwb">double</span> p <span class="hl opt">=</span> <span class="hl num">0.0</span><span class="hl opt">;</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> a<span class="hl opt">.</span>length<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
      a<span class="hl kwc">[i]</span><span class="hl opt">.</span>p <span class="hl opt">= (</span>p <span class="hl opt">+=</span> a<span class="hl kwc">[i]</span><span class="hl opt">.</span>p<span class="hl opt">) *</span> LOOKUP_SCALE<span class="hl opt">;</span>
    <span class="hl opt">}</span>
    a<span class="hl opt">[</span>a<span class="hl opt">.</span>length <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">].</span>p <span class="hl opt">=</span> LOOKUP_SCALE<span class="hl opt">;</span>
  <span class="hl opt">}</span>

  <span class="hl kwb">int</span> n <span class="hl opt">=</span> args<span class="hl opt">.</span>length <span class="hl opt">&gt;</span> <span class="hl num">0</span> ? <span class="hl kwb">int</span><span class="hl opt">.</span><span class="hl kwd">parse</span><span class="hl opt">(</span>args<span class="hl kwc">[0]</span><span class="hl opt">) :</span> <span class="hl num">200</span><span class="hl opt">;</span>

  <span class="hl kwd">sumAndScale</span><span class="hl opt">(</span>IUB<span class="hl opt">);</span>
  <span class="hl kwd">sumAndScale</span><span class="hl opt">(</span>HomoSapiens<span class="hl opt">);</span>

  RepeatFasta<span class="hl opt">.</span><span class="hl kwd">make</span><span class="hl opt">(</span><span class="hl str">&quot;&gt;ONE Homo sapiens alu</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> <span class="hl kwd">bytes</span><span class="hl opt">(</span>ALU<span class="hl opt">),</span> n <span class="hl opt">*</span> <span class="hl num">2</span><span class="hl opt">);</span>
  RandomFasta<span class="hl opt">.</span><span class="hl kwd">make</span><span class="hl opt">(</span><span class="hl str">&quot;&gt;TWO IUB ambiguity codes</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> IUB<span class="hl opt">,</span> n <span class="hl opt">*</span> <span class="hl num">3</span><span class="hl opt">);</span>
  RandomFasta<span class="hl opt">.</span><span class="hl kwd">make</span><span class="hl opt">(</span><span class="hl str">&quot;&gt;THREE Homo sapiens frequency</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> HomoSapiens<span class="hl opt">,</span> n <span class="hl opt">*</span> <span class="hl num">5</span><span class="hl opt">);</span>
  Out<span class="hl opt">.</span><span class="hl kwd">finalFlush</span><span class="hl opt">();</span>
<span class="hl opt">}</span>
