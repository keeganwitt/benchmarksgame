<span class="hl opt">#</span>lang racket<span class="hl opt">/</span>base

<span class="hl slc">;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;; http://benchmarksgame.alioth.debian.org/</span>

<span class="hl slc">;; Based on the MLton version of the benchmark by Scott Cruzen</span>
<span class="hl slc">;;; contributed by Matthew Flatt</span>

<span class="hl opt">(</span><span class="hl kwa">require</span> racket<span class="hl opt">/</span>cmdline<span class="hl opt">)</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">floor_ev</span> q r s t x<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">quotient</span> <span class="hl opt">(+ (*</span> q x<span class="hl opt">)</span> r<span class="hl opt">) (+ (*</span> s x<span class="hl opt">)</span> t<span class="hl opt">)))</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">comp</span> q r s t  q2 r2 s2 t2<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">values</span> <span class="hl opt">(+ (*</span> q q2<span class="hl opt">) (*</span> r s2<span class="hl opt">))</span>
          <span class="hl opt">(+ (*</span> q r2<span class="hl opt">) (*</span> r t2<span class="hl opt">))</span>
          <span class="hl opt">(+ (*</span> s q2<span class="hl opt">) (*</span> t s2<span class="hl opt">))</span>
          <span class="hl opt">(+ (*</span> s r2<span class="hl opt">) (*</span> t t2<span class="hl opt">))))</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">next</span> q r s t<span class="hl opt">) (</span><span class="hl kwa">floor_ev</span> q r s t <span class="hl num">3</span><span class="hl opt">))</span>
<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">safe</span>? q r s t n<span class="hl opt">) (=</span> n <span class="hl opt">(</span><span class="hl kwa">floor_ev</span> q r s t <span class="hl num">4</span><span class="hl opt">)))</span>
<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">prod</span> q r s t n<span class="hl opt">) (</span><span class="hl kwa">comp</span> <span class="hl num">10</span> <span class="hl opt">(*</span> -<span class="hl num">10</span> n<span class="hl opt">)</span> <span class="hl num">0 1</span>  q r s t<span class="hl opt">))</span>
<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">mk</span> q r s t k<span class="hl opt">) (</span><span class="hl kwa">comp</span> q r s t k <span class="hl opt">(*</span> <span class="hl num">2</span> <span class="hl opt">(</span><span class="hl kwa">add1</span> <span class="hl opt">(*</span> <span class="hl num">2</span> k<span class="hl opt">)))</span> <span class="hl num">0</span> <span class="hl opt">(</span><span class="hl kwa">add1</span> <span class="hl opt">(*</span> <span class="hl num">2</span> k<span class="hl opt">))))</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">digit</span> k  q r s t  n row col<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(&gt;</span> n <span class="hl num">0</span><span class="hl opt">)</span>
      <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">([</span>y <span class="hl opt">(</span><span class="hl kwa">next</span> q r s t<span class="hl opt">)])</span>
        <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">safe</span>? q r s t y<span class="hl opt">)</span>
            <span class="hl opt">(</span><span class="hl kwa">let-values</span> <span class="hl opt">([(</span><span class="hl kwa">q</span> r s t<span class="hl opt">) (</span><span class="hl kwa">prod</span> q r s t y<span class="hl opt">)])</span>
              <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(=</span> col <span class="hl num">10</span><span class="hl opt">)</span>
                  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">([</span>row <span class="hl opt">(+</span> row <span class="hl num">10</span><span class="hl opt">)])</span>
                    <span class="hl opt">(</span><span class="hl kwa">printf</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span><span class="hl str">:~a</span><span class="hl esc">\n</span><span class="hl str">~a&quot;</span> row y<span class="hl opt">)</span>
                    <span class="hl opt">(</span><span class="hl kwa">digit</span> k q r s t <span class="hl opt">(</span><span class="hl kwa">sub1</span> n<span class="hl opt">)</span> row <span class="hl num">1</span><span class="hl opt">))</span>
                  <span class="hl opt">(</span><span class="hl kwa">begin</span>
                    <span class="hl opt">(</span><span class="hl kwa">printf</span> <span class="hl str">&quot;~a&quot;</span> y<span class="hl opt">)</span>
                    <span class="hl opt">(</span><span class="hl kwa">digit</span> k q r s t <span class="hl opt">(</span><span class="hl kwa">sub1</span> n<span class="hl opt">)</span> row <span class="hl opt">(</span><span class="hl kwa">add1</span> col<span class="hl opt">)))))</span>
            <span class="hl opt">(</span><span class="hl kwa">let-values</span> <span class="hl opt">([(</span><span class="hl kwa">q</span> r s t<span class="hl opt">) (</span><span class="hl kwa">mk</span> q r s t k<span class="hl opt">)])</span>
              <span class="hl opt">(</span><span class="hl kwa">digit</span> <span class="hl opt">(</span><span class="hl kwa">add1</span> k<span class="hl opt">)</span> q r s t n row col<span class="hl opt">))))</span>
      <span class="hl opt">(</span><span class="hl kwa">printf</span> <span class="hl str">&quot;~a</span><span class="hl esc">\t</span><span class="hl str">:~a</span><span class="hl esc">\n</span><span class="hl str">&quot;</span>
              <span class="hl opt">(</span><span class="hl kwa">make-string</span> <span class="hl opt">(</span><span class="hl kwa">-</span> <span class="hl num">10</span> col<span class="hl opt">) #</span>\space<span class="hl opt">)</span>
              <span class="hl opt">(+</span> row col<span class="hl opt">))))</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">digits</span> n<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">digit</span> <span class="hl num">1  1 0 0 1</span>  n <span class="hl num">0 0</span><span class="hl opt">))</span>

<span class="hl opt">(</span><span class="hl kwa">digits</span> <span class="hl opt">(</span><span class="hl kwa">command-line</span> <span class="hl opt">#:</span>args <span class="hl opt">(</span><span class="hl kwa">n</span><span class="hl opt">) (</span><span class="hl kwa">string-</span><span class="hl opt">&gt;</span>number n<span class="hl opt">)))</span>
