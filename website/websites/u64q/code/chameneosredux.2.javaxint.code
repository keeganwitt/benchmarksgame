<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by Michael Barker</span>
<span class="hl com">   based on a contribution by Luzius Meisser</span>
<span class="hl com">*/</span>

<span class="hl com">/**</span>
<span class="hl com"> * This implementation uses standard Java threading (native threads).</span>
<span class="hl com"> * </span>
<span class="hl com"> * This implementation simply adds the new functionality to the orginal </span>
<span class="hl com"> * implementation by Luzius Meisser from old chameneos shootout.  The interesting</span>
<span class="hl com"> * part of this implementation, is that while a creature is waiting it does not</span>
<span class="hl com"> * block its thread, rather it spins in a loop using a Thread.yield().</span>
<span class="hl com"> */</span>
<span class="hl kwa">public class</span> chameneosredux <span class="hl sym">{</span>

    enum Colour <span class="hl sym">{</span>
        blue<span class="hl sym">,</span>
        red<span class="hl sym">,</span>
        yellow
    <span class="hl sym">}</span>
        
    <span class="hl kwa">private static</span> Colour <span class="hl kwd">doCompliment</span><span class="hl sym">(</span>Colour c1<span class="hl sym">,</span> Colour c2<span class="hl sym">) {</span>
        <span class="hl kwa">switch</span> <span class="hl sym">(</span>c1<span class="hl sym">) {</span>
        <span class="hl kwa">case</span> blue<span class="hl sym">:</span>
            <span class="hl kwa">switch</span> <span class="hl sym">(</span>c2<span class="hl sym">) {</span>
            <span class="hl kwa">case</span> blue<span class="hl sym">:</span>
                <span class="hl kwa">return</span> Colour<span class="hl sym">.</span>blue<span class="hl sym">;</span>
            <span class="hl kwa">case</span> red<span class="hl sym">:</span>
                <span class="hl kwa">return</span> Colour<span class="hl sym">.</span>yellow<span class="hl sym">;</span>
            <span class="hl kwa">case</span> yellow<span class="hl sym">:</span>
                <span class="hl kwa">return</span> Colour<span class="hl sym">.</span>red<span class="hl sym">;</span>
            <span class="hl sym">}</span>
        <span class="hl kwa">case</span> red<span class="hl sym">:</span>
            <span class="hl kwa">switch</span> <span class="hl sym">(</span>c2<span class="hl sym">) {</span>
            <span class="hl kwa">case</span> blue<span class="hl sym">:</span>
                <span class="hl kwa">return</span> Colour<span class="hl sym">.</span>yellow<span class="hl sym">;</span>
            <span class="hl kwa">case</span> red<span class="hl sym">:</span>
                <span class="hl kwa">return</span> Colour<span class="hl sym">.</span>red<span class="hl sym">;</span>
            <span class="hl kwa">case</span> yellow<span class="hl sym">:</span>
                <span class="hl kwa">return</span> Colour<span class="hl sym">.</span>blue<span class="hl sym">;</span>
            <span class="hl sym">}</span>
        <span class="hl kwa">case</span> yellow<span class="hl sym">:</span>
            <span class="hl kwa">switch</span> <span class="hl sym">(</span>c2<span class="hl sym">) {</span>
            <span class="hl kwa">case</span> blue<span class="hl sym">:</span>
                <span class="hl kwa">return</span> Colour<span class="hl sym">.</span>red<span class="hl sym">;</span>
            <span class="hl kwa">case</span> red<span class="hl sym">:</span>
                <span class="hl kwa">return</span> Colour<span class="hl sym">.</span>blue<span class="hl sym">;</span>
            <span class="hl kwa">case</span> yellow<span class="hl sym">:</span>
                <span class="hl kwa">return</span> Colour<span class="hl sym">.</span>yellow<span class="hl sym">;</span>
            <span class="hl sym">}</span>
        <span class="hl sym">}</span>
        
        <span class="hl kwa">throw new</span> <span class="hl kwc">RuntimeException</span><span class="hl sym">(</span><span class="hl str">&quot;Error&quot;</span><span class="hl sym">);</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">static class</span> MeetingPlace <span class="hl sym">{</span>
        
        <span class="hl kwa">private</span> <span class="hl kwb">int</span> meetingsLeft<span class="hl sym">;</span>

        <span class="hl kwa">public</span> <span class="hl kwd">MeetingPlace</span><span class="hl sym">(</span><span class="hl kwb">int</span> meetings<span class="hl sym">) {</span>
            <span class="hl kwa">this</span><span class="hl sym">.</span>meetingsLeft <span class="hl sym">=</span> meetings<span class="hl sym">;</span>
        <span class="hl sym">}</span>
        
        <span class="hl kwa">private</span> Colour firstColour <span class="hl sym">=</span> null<span class="hl sym">;</span>
        <span class="hl kwa">private</span> <span class="hl kwb">int</span> firstId <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
        <span class="hl kwc">Future</span><span class="hl sym">&lt;</span>Pair<span class="hl sym">&gt;</span> current<span class="hl sym">;</span>
        
        <span class="hl kwa">public</span> Pair <span class="hl kwd">meet</span><span class="hl sym">(</span><span class="hl kwb">int</span> id<span class="hl sym">,</span> Colour c<span class="hl sym">)</span> <span class="hl kwa">throws</span> <span class="hl kwc">Exception</span> <span class="hl sym">{</span>
            <span class="hl kwc">Future</span><span class="hl sym">&lt;</span>Pair<span class="hl sym">&gt;</span> newPair<span class="hl sym">;</span>
            <span class="hl kwa">synchronized</span> <span class="hl sym">(</span><span class="hl kwa">this</span><span class="hl sym">) {</span>
                <span class="hl kwa">if</span> <span class="hl sym">(</span>meetingsLeft <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">) {</span>
                    <span class="hl kwa">throw new</span> <span class="hl kwc">Exception</span><span class="hl sym">(</span><span class="hl str">&quot;Finished&quot;</span><span class="hl sym">);</span>
                <span class="hl sym">}</span> <span class="hl kwa">else</span> <span class="hl sym">{</span>
                    <span class="hl kwa">if</span> <span class="hl sym">(</span>firstColour <span class="hl sym">==</span> null<span class="hl sym">) {</span>
                        firstColour <span class="hl sym">=</span> c<span class="hl sym">;</span>
                        firstId <span class="hl sym">=</span> id<span class="hl sym">;</span>
                        current <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">Future</span><span class="hl sym">&lt;</span>Pair<span class="hl sym">&gt;();</span>
                    <span class="hl sym">}</span> <span class="hl kwa">else</span> <span class="hl sym">{</span>
                        Colour newColour <span class="hl sym">=</span> <span class="hl kwd">doCompliment</span><span class="hl sym">(</span>c<span class="hl sym">,</span> firstColour<span class="hl sym">);</span>
                        current<span class="hl sym">.</span><span class="hl kwd">setItem</span><span class="hl sym">(</span><span class="hl kwa">new</span> <span class="hl kwd">Pair</span><span class="hl sym">(</span>id <span class="hl sym">==</span> firstId<span class="hl sym">,</span> newColour<span class="hl sym">));</span>
                        firstColour <span class="hl sym">=</span> null<span class="hl sym">;</span>
                        meetingsLeft<span class="hl sym">--;</span>
                    <span class="hl sym">}</span>
                    newPair <span class="hl sym">=</span> current<span class="hl sym">;</span>
                <span class="hl sym">}</span>
            <span class="hl sym">}</span>
            <span class="hl kwa">return</span> newPair<span class="hl sym">.</span><span class="hl kwd">getItem</span><span class="hl sym">();</span>
            
        <span class="hl sym">}</span>
    <span class="hl sym">}</span>
        
    <span class="hl kwa">public static class</span> <span class="hl kwc">Future</span><span class="hl sym">&lt;</span>T<span class="hl sym">&gt; {</span>

        <span class="hl kwa">private volatile</span> T t<span class="hl sym">;</span>

        <span class="hl kwa">public</span> T <span class="hl kwd">getItem</span><span class="hl sym">() {</span>
            <span class="hl kwa">while</span> <span class="hl sym">(</span>t <span class="hl sym">==</span> null<span class="hl sym">) {</span>
                <span class="hl kwc">Thread</span><span class="hl sym">.</span><span class="hl kwd">yield</span><span class="hl sym">();</span>
            <span class="hl sym">}</span>
            <span class="hl kwa">return</span> t<span class="hl sym">;</span>
        <span class="hl sym">}</span>

        <span class="hl slc">// no synchronization necessary as assignment is atomic</span>
        <span class="hl kwa">public</span> <span class="hl kwb">void</span> <span class="hl kwd">setItem</span><span class="hl sym">(</span>T t<span class="hl sym">) {</span>
            <span class="hl kwa">this</span><span class="hl sym">.</span>t <span class="hl sym">=</span> t<span class="hl sym">;</span>
        <span class="hl sym">}</span>
    <span class="hl sym">}</span>    
    
    <span class="hl kwa">static class</span> Creature <span class="hl kwa">implements</span> <span class="hl kwc">Runnable</span> <span class="hl sym">{</span>

        <span class="hl kwa">private final</span> MeetingPlace place<span class="hl sym">;</span>
        <span class="hl kwa">private</span> <span class="hl kwb">int</span> count <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
        <span class="hl kwa">private</span> <span class="hl kwb">int</span> sameCount <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
        <span class="hl kwa">private</span> Colour colour<span class="hl sym">;</span>
        <span class="hl kwa">private</span> <span class="hl kwb">int</span> id<span class="hl sym">;</span>

        <span class="hl kwa">public</span> <span class="hl kwd">Creature</span><span class="hl sym">(</span>MeetingPlace place<span class="hl sym">,</span> Colour colour<span class="hl sym">) {</span>
            <span class="hl kwa">this</span><span class="hl sym">.</span>place <span class="hl sym">=</span> place<span class="hl sym">;</span>
            <span class="hl kwa">this</span><span class="hl sym">.</span>id <span class="hl sym">=</span> <span class="hl kwc">System</span><span class="hl sym">.</span><span class="hl kwd">identityHashCode</span><span class="hl sym">(</span><span class="hl kwa">this</span><span class="hl sym">);</span>
            <span class="hl kwa">this</span><span class="hl sym">.</span>colour <span class="hl sym">=</span> colour<span class="hl sym">;</span>
        <span class="hl sym">}</span>
        
        <span class="hl kwa">public</span> <span class="hl kwb">void</span> <span class="hl kwd">run</span><span class="hl sym">() {</span>
            <span class="hl kwa">try</span> <span class="hl sym">{</span>
                
                <span class="hl kwa">while</span> <span class="hl sym">(</span>true<span class="hl sym">) {</span>
                    Pair p <span class="hl sym">=</span> place<span class="hl sym">.</span><span class="hl kwd">meet</span><span class="hl sym">(</span>id<span class="hl sym">,</span> colour<span class="hl sym">);</span>
                    colour <span class="hl sym">=</span> p<span class="hl sym">.</span>colour<span class="hl sym">;</span>
                    <span class="hl kwa">if</span> <span class="hl sym">(</span>p<span class="hl sym">.</span>sameId<span class="hl sym">) {</span>
                        sameCount<span class="hl sym">++;</span>
                    <span class="hl sym">}</span>
                    count<span class="hl sym">++;</span>
                <span class="hl sym">}</span>
                
            <span class="hl sym">}</span> <span class="hl kwa">catch</span> <span class="hl sym">(</span><span class="hl kwc">Exception</span> e<span class="hl sym">) {}</span>
        <span class="hl sym">}</span>
        
        <span class="hl kwa">public</span> <span class="hl kwb">int</span> <span class="hl kwd">getCount</span><span class="hl sym">() {</span>
            <span class="hl kwa">return</span> count<span class="hl sym">;</span>
        <span class="hl sym">}</span>
        
        <span class="hl kwa">public</span> <span class="hl kwc">String</span> <span class="hl kwd">toString</span><span class="hl sym">() {</span>
            <span class="hl kwa">return</span> <span class="hl kwc">String</span><span class="hl sym">.</span><span class="hl kwd">valueOf</span><span class="hl sym">(</span>count<span class="hl sym">) +</span> <span class="hl kwd">getNumber</span><span class="hl sym">(</span>sameCount<span class="hl sym">);</span>
        <span class="hl sym">}</span>
    <span class="hl sym">}</span>    
    
    <span class="hl kwa">private static</span> <span class="hl kwb">void</span> <span class="hl kwd">run</span><span class="hl sym">(</span><span class="hl kwb">int</span> n<span class="hl sym">,</span> Colour<span class="hl sym">...</span>colours<span class="hl sym">) {</span>
        MeetingPlace place <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">MeetingPlace</span><span class="hl sym">(</span>n<span class="hl sym">);</span>
        Creature<span class="hl sym">[]</span> creatures <span class="hl sym">=</span> <span class="hl kwa">new</span> Creature<span class="hl sym">[</span>colours<span class="hl sym">.</span>length<span class="hl sym">];</span>
        <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> colours<span class="hl sym">.</span>length<span class="hl sym">;</span> i<span class="hl sym">++) {</span>
            <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">print</span><span class="hl sym">(</span><span class="hl str">&quot; &quot;</span> <span class="hl sym">+</span> colours<span class="hl sym">[</span>i<span class="hl sym">]);</span>
            creatures<span class="hl sym">[</span>i<span class="hl sym">] =</span> <span class="hl kwa">new</span> <span class="hl kwd">Creature</span><span class="hl sym">(</span>place<span class="hl sym">,</span> colours<span class="hl sym">[</span>i<span class="hl sym">]);</span>
        <span class="hl sym">}</span>
        <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">();</span>
        <span class="hl kwc">Thread</span><span class="hl sym">[]</span> ts <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">Thread</span><span class="hl sym">[</span>colours<span class="hl sym">.</span>length<span class="hl sym">];</span>
        <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> colours<span class="hl sym">.</span>length<span class="hl sym">;</span> i<span class="hl sym">++) {</span>
            ts<span class="hl sym">[</span>i<span class="hl sym">] =</span> <span class="hl kwa">new</span> <span class="hl kwc">Thread</span><span class="hl sym">(</span>creatures<span class="hl sym">[</span>i<span class="hl sym">]);</span>
            ts<span class="hl sym">[</span>i<span class="hl sym">].</span><span class="hl kwd">start</span><span class="hl sym">();</span>
        <span class="hl sym">}</span>
        
        <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwc">Thread</span> t <span class="hl sym">:</span> ts<span class="hl sym">) {</span>
            <span class="hl kwa">try</span> <span class="hl sym">{</span>
                t<span class="hl sym">.</span><span class="hl kwd">join</span><span class="hl sym">();</span>
            <span class="hl sym">}</span> <span class="hl kwa">catch</span> <span class="hl sym">(</span><span class="hl kwc">InterruptedException</span> e<span class="hl sym">) {</span>
            <span class="hl sym">}</span>
        <span class="hl sym">}</span>
        
        <span class="hl kwb">int</span> total <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
        <span class="hl kwa">for</span> <span class="hl sym">(</span>Creature creature <span class="hl sym">:</span> creatures<span class="hl sym">) {</span>
            <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">(</span>creature<span class="hl sym">);</span>
            total <span class="hl sym">+=</span> creature<span class="hl sym">.</span><span class="hl kwd">getCount</span><span class="hl sym">();</span>
        <span class="hl sym">}</span>
        <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">(</span><span class="hl kwd">getNumber</span><span class="hl sym">(</span>total<span class="hl sym">));</span>
        <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">();</span>
    <span class="hl sym">}</span>
    
    <span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwc">String</span><span class="hl sym">[]</span> args<span class="hl sym">) {</span>
        
        <span class="hl kwb">int</span> n <span class="hl sym">=</span> <span class="hl num">600</span><span class="hl sym">;</span>
        <span class="hl kwa">try</span> <span class="hl sym">{</span>
            n <span class="hl sym">=</span> <span class="hl kwc">Integer</span><span class="hl sym">.</span><span class="hl kwd">parseInt</span><span class="hl sym">(</span>args<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]);</span>
        <span class="hl sym">}</span> <span class="hl kwa">catch</span> <span class="hl sym">(</span><span class="hl kwc">Exception</span> e<span class="hl sym">) {</span>
        <span class="hl sym">}</span>
        
        <span class="hl kwd">printColours</span><span class="hl sym">();</span>
        <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">();</span>
        <span class="hl kwd">run</span><span class="hl sym">(</span>n<span class="hl sym">,</span> Colour<span class="hl sym">.</span>blue<span class="hl sym">,</span> Colour<span class="hl sym">.</span>red<span class="hl sym">,</span> Colour<span class="hl sym">.</span>yellow<span class="hl sym">);</span>
        <span class="hl kwd">run</span><span class="hl sym">(</span>n<span class="hl sym">,</span> Colour<span class="hl sym">.</span>blue<span class="hl sym">,</span> Colour<span class="hl sym">.</span>red<span class="hl sym">,</span> Colour<span class="hl sym">.</span>yellow<span class="hl sym">,</span> Colour<span class="hl sym">.</span>red<span class="hl sym">,</span> Colour<span class="hl sym">.</span>yellow<span class="hl sym">,</span> 
                Colour<span class="hl sym">.</span>blue<span class="hl sym">,</span> Colour<span class="hl sym">.</span>red<span class="hl sym">,</span> Colour<span class="hl sym">.</span>yellow<span class="hl sym">,</span> Colour<span class="hl sym">.</span>red<span class="hl sym">,</span> Colour<span class="hl sym">.</span>blue<span class="hl sym">);</span>
    <span class="hl sym">}</span>    

    <span class="hl kwa">public static class</span> Pair <span class="hl sym">{</span>
        <span class="hl kwa">public final</span> <span class="hl kwb">boolean</span> sameId<span class="hl sym">;</span>
        <span class="hl kwa">public final</span> Colour colour<span class="hl sym">;</span>

        <span class="hl kwa">public</span> <span class="hl kwd">Pair</span><span class="hl sym">(</span><span class="hl kwb">boolean</span> sameId<span class="hl sym">,</span> Colour c<span class="hl sym">) {</span>
            <span class="hl kwa">this</span><span class="hl sym">.</span>sameId <span class="hl sym">=</span> sameId<span class="hl sym">;</span>
            <span class="hl kwa">this</span><span class="hl sym">.</span>colour <span class="hl sym">=</span> c<span class="hl sym">;</span>
        <span class="hl sym">}</span>
    <span class="hl sym">}</span>
    
    <span class="hl kwa">private static final</span> <span class="hl kwc">String</span><span class="hl sym">[]</span> NUMBERS <span class="hl sym">= {</span>
        <span class="hl str">&quot;zero&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;one&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;two&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;three&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;four&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;five&quot;</span><span class="hl sym">,</span> 
        <span class="hl str">&quot;six&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;seven&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;eight&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;nine&quot;</span>
    <span class="hl sym">};</span>
    
    <span class="hl kwa">private static</span> <span class="hl kwc">String</span> <span class="hl kwd">getNumber</span><span class="hl sym">(</span><span class="hl kwb">int</span> n<span class="hl sym">) {</span>
        <span class="hl kwc">StringBuilder</span> sb <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">StringBuilder</span><span class="hl sym">();</span>
        <span class="hl kwc">String</span> nStr <span class="hl sym">=</span> <span class="hl kwc">String</span><span class="hl sym">.</span><span class="hl kwd">valueOf</span><span class="hl sym">(</span>n<span class="hl sym">);</span>
        <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> nStr<span class="hl sym">.</span><span class="hl kwd">length</span><span class="hl sym">();</span> i<span class="hl sym">++) {</span>
            sb<span class="hl sym">.</span><span class="hl kwd">append</span><span class="hl sym">(</span><span class="hl str">&quot; &quot;</span><span class="hl sym">);</span>
            sb<span class="hl sym">.</span><span class="hl kwd">append</span><span class="hl sym">(</span>NUMBERS<span class="hl sym">[</span><span class="hl kwc">Character</span><span class="hl sym">.</span><span class="hl kwd">getNumericValue</span><span class="hl sym">(</span>nStr<span class="hl sym">.</span><span class="hl kwd">charAt</span><span class="hl sym">(</span>i<span class="hl sym">))]);</span>
        <span class="hl sym">}</span>
        
        <span class="hl kwa">return</span> sb<span class="hl sym">.</span><span class="hl kwd">toString</span><span class="hl sym">();</span>
    <span class="hl sym">}</span>
    
    <span class="hl kwa">private static</span> <span class="hl kwb">void</span> <span class="hl kwd">printColours</span><span class="hl sym">() {</span>
        <span class="hl kwd">printColours</span><span class="hl sym">(</span>Colour<span class="hl sym">.</span>blue<span class="hl sym">,</span> Colour<span class="hl sym">.</span>blue<span class="hl sym">);</span>
        <span class="hl kwd">printColours</span><span class="hl sym">(</span>Colour<span class="hl sym">.</span>blue<span class="hl sym">,</span> Colour<span class="hl sym">.</span>red<span class="hl sym">);</span>
        <span class="hl kwd">printColours</span><span class="hl sym">(</span>Colour<span class="hl sym">.</span>blue<span class="hl sym">,</span> Colour<span class="hl sym">.</span>yellow<span class="hl sym">);</span>
        <span class="hl kwd">printColours</span><span class="hl sym">(</span>Colour<span class="hl sym">.</span>red<span class="hl sym">,</span> Colour<span class="hl sym">.</span>blue<span class="hl sym">);</span>
        <span class="hl kwd">printColours</span><span class="hl sym">(</span>Colour<span class="hl sym">.</span>red<span class="hl sym">,</span> Colour<span class="hl sym">.</span>red<span class="hl sym">);</span>
        <span class="hl kwd">printColours</span><span class="hl sym">(</span>Colour<span class="hl sym">.</span>red<span class="hl sym">,</span> Colour<span class="hl sym">.</span>yellow<span class="hl sym">);</span>
        <span class="hl kwd">printColours</span><span class="hl sym">(</span>Colour<span class="hl sym">.</span>yellow<span class="hl sym">,</span> Colour<span class="hl sym">.</span>blue<span class="hl sym">);</span>
        <span class="hl kwd">printColours</span><span class="hl sym">(</span>Colour<span class="hl sym">.</span>yellow<span class="hl sym">,</span> Colour<span class="hl sym">.</span>red<span class="hl sym">);</span>
        <span class="hl kwd">printColours</span><span class="hl sym">(</span>Colour<span class="hl sym">.</span>yellow<span class="hl sym">,</span> Colour<span class="hl sym">.</span>yellow<span class="hl sym">);</span>
    <span class="hl sym">}</span>
    
    <span class="hl kwa">private static</span> <span class="hl kwb">void</span> <span class="hl kwd">printColours</span><span class="hl sym">(</span>Colour c1<span class="hl sym">,</span> Colour c2<span class="hl sym">) {</span>
        <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">(</span>c1 <span class="hl sym">+</span> <span class="hl str">&quot; + &quot;</span> <span class="hl sym">+</span> c2 <span class="hl sym">+</span> <span class="hl str">&quot; -&gt; &quot;</span> <span class="hl sym">+</span> <span class="hl kwd">doCompliment</span><span class="hl sym">(</span>c1<span class="hl sym">,</span> c2<span class="hl sym">));</span>
    <span class="hl sym">}</span>
    
    
<span class="hl sym">}</span>
