<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * contributed by Kenneth Jonsson</span>
<span class="hl com"> */</span>
<span class="hl ppc">#include &lt;alloca.h&gt;</span>
<span class="hl ppc">#include &lt;pthread.h&gt;</span>
<span class="hl ppc">#include &lt;stdio.h&gt;</span>
<span class="hl ppc">#include &lt;stdlib.h&gt;</span>

<span class="hl com">/* The work area are for local variables and return addresses. */</span>
<span class="hl ppc">#define STACK_WORK_SZ 32*1024</span>

<span class="hl com">/*</span>
<span class="hl com"> * Assume 4kB pages, which is true for both i386 and x86_64, some</span>
<span class="hl com"> * OS:es requires stack sizes aligned to a page boundary.</span>
<span class="hl com"> * Linux does not, OS X does.</span>
<span class="hl com"> */</span>
<span class="hl ppc">#define PAGE_SIZE (1 &lt;&lt; 12)</span>

<span class="hl ppc">#define bottom_up_tree(item, depth)                                     \</span>
<span class="hl ppc">    init_node(alloca(sizeof(struct node) * num_elem(depth)),            \</span>
<span class="hl ppc">              item,                                                     \</span>
<span class="hl ppc">              num_elem(depth))</span>

<span class="hl kwb">struct</span> node <span class="hl opt">{</span>
    <span class="hl kwb">int</span> item<span class="hl opt">;</span>
    <span class="hl kwb">struct</span> node <span class="hl opt">*</span>left<span class="hl opt">;</span>
    <span class="hl kwb">struct</span> node <span class="hl opt">*</span>right<span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl kwb">struct</span> item_worker_data <span class="hl opt">{</span>
    <span class="hl kwb">int</span> iterations<span class="hl opt">;</span>
    <span class="hl kwb">int</span> depth<span class="hl opt">;</span>
    <span class="hl kwb">int</span> check<span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl kwb">struct</span> args <span class="hl opt">{</span>
    <span class="hl kwb">int</span> min_depth<span class="hl opt">;</span>
    <span class="hl kwb">int</span> max_depth<span class="hl opt">;</span>
<span class="hl opt">};</span>


<span class="hl kwb">static int</span>
<span class="hl kwd">num_elem</span><span class="hl opt">(</span><span class="hl kwb">int</span> height<span class="hl opt">)</span>
<span class="hl opt">{</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>height <span class="hl opt">&lt;</span> <span class="hl num">0</span><span class="hl opt">)</span>
        <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">return</span> <span class="hl opt">(</span><span class="hl num">1</span> <span class="hl opt">&lt;&lt;</span> height<span class="hl opt">) +</span> <span class="hl kwd">num_elem</span><span class="hl opt">(</span>height <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl com">/*</span>
<span class="hl com"> * Some pthread implementations requires that the stack size is a</span>
<span class="hl com"> * multiple of the size of a page</span>
<span class="hl com"> */</span>
<span class="hl kwb">static int</span>
<span class="hl kwd">stack_sz</span><span class="hl opt">(</span><span class="hl kwb">int</span> depth<span class="hl opt">)</span>
<span class="hl opt">{</span>
    <span class="hl kwb">int</span> sz <span class="hl opt">= (</span><span class="hl kwd">num_elem</span><span class="hl opt">(</span>depth<span class="hl opt">) *</span> <span class="hl kwa">sizeof</span><span class="hl opt">(</span><span class="hl kwb">struct</span> node<span class="hl opt">) +</span> STACK_WORK_SZ<span class="hl opt">);</span>
    <span class="hl kwa">return</span> <span class="hl opt">(</span>sz <span class="hl opt">+</span> PAGE_SIZE <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">) &amp; ~(</span>PAGE_SIZE <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwb">static int</span>
<span class="hl kwd">node_check</span><span class="hl opt">(</span><span class="hl kwb">const struct</span> node <span class="hl opt">*</span>n<span class="hl opt">)</span>
<span class="hl opt">{</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>n<span class="hl opt">-&gt;</span>left<span class="hl opt">)</span>
        <span class="hl kwa">return</span> <span class="hl kwd">node_check</span><span class="hl opt">(</span>n<span class="hl opt">-&gt;</span>left<span class="hl opt">) +</span> n<span class="hl opt">-&gt;</span>item <span class="hl opt">-</span> <span class="hl kwd">node_check</span><span class="hl opt">(</span>n<span class="hl opt">-&gt;</span>right<span class="hl opt">);</span>
    <span class="hl kwa">return</span> n<span class="hl opt">-&gt;</span>item<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwb">static struct</span> node <span class="hl opt">*</span>
<span class="hl kwd">init_node</span><span class="hl opt">(</span><span class="hl kwb">struct</span> node <span class="hl opt">*</span>node<span class="hl opt">,</span> <span class="hl kwb">int</span> item<span class="hl opt">,</span> <span class="hl kwb">int</span> n<span class="hl opt">)</span>
<span class="hl opt">{</span>
    <span class="hl kwb">int</span> subtree_n<span class="hl opt">;</span> <span class="hl com">/* Number of nodes in left/right subtree to this</span>
<span class="hl com">                    * node */</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span>n <span class="hl opt">==</span> <span class="hl num">0</span><span class="hl opt">)</span>
        <span class="hl kwa">return</span> NULL<span class="hl opt">;</span>

    node<span class="hl opt">-&gt;</span>item <span class="hl opt">=</span> item<span class="hl opt">;</span>
    subtree_n <span class="hl opt">=</span> n <span class="hl opt">/</span> <span class="hl num">2</span><span class="hl opt">;</span>
    <span class="hl com">/*</span>
<span class="hl com">     * left subtree is stored in the front half of the stack space and</span>
<span class="hl com">     * the right subtree is stored in the back half of the stack</span>
<span class="hl com">     * space</span>
<span class="hl com">     */</span>
    node<span class="hl opt">-&gt;</span>left <span class="hl opt">=</span> <span class="hl kwd">init_node</span><span class="hl opt">(</span>node <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">2</span> <span class="hl opt">*</span> item <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">,</span> subtree_n<span class="hl opt">);</span>
    node<span class="hl opt">-&gt;</span>right <span class="hl opt">=</span> <span class="hl kwd">init_node</span><span class="hl opt">(</span>node <span class="hl opt">+</span> <span class="hl num">1</span> <span class="hl opt">+</span> subtree_n<span class="hl opt">,</span> <span class="hl num">2</span> <span class="hl opt">*</span> item<span class="hl opt">,</span> subtree_n<span class="hl opt">);</span>
    <span class="hl kwa">return</span> node<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl com">/*</span>
<span class="hl com"> * Do one iteration, must be in a non-static function to ensure that</span>
<span class="hl com"> * the stack frame is released between each invocation, i.e. this</span>
<span class="hl com"> * function must not be inlined.</span>
<span class="hl com"> */</span>
<span class="hl kwb">int</span>
<span class="hl kwd">do_one_iteration</span><span class="hl opt">(</span><span class="hl kwb">int</span> i<span class="hl opt">,</span> <span class="hl kwb">int</span> depth<span class="hl opt">)</span>
<span class="hl opt">{</span>
    <span class="hl kwb">struct</span> node <span class="hl opt">*</span>a<span class="hl opt">, *</span>b<span class="hl opt">;</span>

    a <span class="hl opt">=</span> <span class="hl kwd">bottom_up_tree</span><span class="hl opt">(</span>i<span class="hl opt">,</span> depth<span class="hl opt">);</span>
    b <span class="hl opt">=</span> <span class="hl kwd">bottom_up_tree</span><span class="hl opt">(-</span>i<span class="hl opt">,</span> depth<span class="hl opt">);</span>
    <span class="hl kwa">return</span> <span class="hl kwd">node_check</span><span class="hl opt">(</span>a<span class="hl opt">) +</span> <span class="hl kwd">node_check</span><span class="hl opt">(</span>b<span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl com">/*</span>
<span class="hl com"> * Calculate the checksum at a specific depth. This is the equivalent</span>
<span class="hl com"> * of the body to the the outer for-loop of most other</span>
<span class="hl com"> * solutions. Enough space to store two trees with a depth of</span>
<span class="hl com"> * 'wd-&gt;depth'</span>
<span class="hl com"> */</span>
<span class="hl kwb">void</span> <span class="hl opt">*</span>
<span class="hl kwd">item_worker</span><span class="hl opt">(</span><span class="hl kwb">void</span> <span class="hl opt">*</span>arg<span class="hl opt">)</span>
<span class="hl opt">{</span>
    <span class="hl kwb">struct</span> item_worker_data <span class="hl opt">*</span>wd <span class="hl opt">=</span> arg<span class="hl opt">;</span>
    <span class="hl kwb">int</span> i<span class="hl opt">;</span>

    <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span> i <span class="hl opt">&lt;=</span> wd<span class="hl opt">-&gt;</span>iterations<span class="hl opt">; ++</span>i<span class="hl opt">)</span>
        wd<span class="hl opt">-&gt;</span>check <span class="hl opt">+=</span> <span class="hl kwd">do_one_iteration</span><span class="hl opt">(</span>i<span class="hl opt">,</span> wd<span class="hl opt">-&gt;</span>depth<span class="hl opt">);</span>
    <span class="hl kwa">return</span> wd<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl com">/*</span>
<span class="hl com"> * The calculations is started in reverse order compared to most other</span>
<span class="hl com"> * solutions. The reason is that all data must be on the stack and the</span>
<span class="hl com"> * result from shallowest tree must be printed first.</span>
<span class="hl com"> */</span>
<span class="hl kwb">void</span>
<span class="hl kwd">do_trees</span><span class="hl opt">(</span><span class="hl kwb">int</span> depth<span class="hl opt">,</span> <span class="hl kwb">int</span> min_depth<span class="hl opt">,</span> <span class="hl kwb">int</span> max_depth<span class="hl opt">)</span>
<span class="hl opt">{</span>
    pthread_t thread<span class="hl opt">;</span>
    pthread_attr_t attr<span class="hl opt">;</span>
    <span class="hl kwb">struct</span> item_worker_data wd<span class="hl opt">;</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span>depth <span class="hl opt">&lt;</span> min_depth<span class="hl opt">)</span>
        <span class="hl kwa">return</span><span class="hl opt">;</span>

    <span class="hl kwd">pthread_attr_init</span><span class="hl opt">(&amp;</span>attr<span class="hl opt">);</span>
    <span class="hl kwd">pthread_attr_setstacksize</span><span class="hl opt">(&amp;</span>attr<span class="hl opt">,</span> <span class="hl kwd">stack_sz</span><span class="hl opt">(</span>depth <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">));</span>

    wd<span class="hl opt">.</span>iterations <span class="hl opt">=</span> <span class="hl num">1</span> <span class="hl opt">&lt;&lt; (</span>max_depth <span class="hl opt">-</span> depth <span class="hl opt">+</span> min_depth<span class="hl opt">);</span>
    wd<span class="hl opt">.</span>check <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    wd<span class="hl opt">.</span>depth <span class="hl opt">=</span> depth<span class="hl opt">;</span>
    <span class="hl kwd">pthread_create</span><span class="hl opt">(&amp;</span>thread<span class="hl opt">, &amp;</span>attr<span class="hl opt">,</span> item_worker<span class="hl opt">, &amp;</span>wd<span class="hl opt">);</span>

    <span class="hl kwd">do_trees</span><span class="hl opt">(</span>depth<span class="hl opt">-</span><span class="hl num">2</span><span class="hl opt">,</span> min_depth<span class="hl opt">,</span> max_depth<span class="hl opt">);</span>

    <span class="hl kwd">pthread_join</span><span class="hl opt">(</span>thread<span class="hl opt">,</span> NULL<span class="hl opt">);</span>
    <span class="hl kwd">pthread_attr_destroy</span><span class="hl opt">(&amp;</span>attr<span class="hl opt">);</span>

    <span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;%d</span><span class="hl esc">\t</span> <span class="hl str">trees of depth %d</span><span class="hl esc">\t</span> <span class="hl str">check: %d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span>
           <span class="hl num">2</span> <span class="hl opt">*</span> wd<span class="hl opt">.</span>iterations<span class="hl opt">,</span>
           depth<span class="hl opt">,</span>
           wd<span class="hl opt">.</span>check<span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwb">void</span>
<span class="hl kwd">stretchdepth_tree</span><span class="hl opt">(</span><span class="hl kwb">int</span> depth<span class="hl opt">)</span>
<span class="hl opt">{</span>
    <span class="hl kwb">struct</span> node <span class="hl opt">*</span>stretch_tree <span class="hl opt">=</span> <span class="hl kwd">bottom_up_tree</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> depth<span class="hl opt">);</span>

    <span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;stretch tree of depth %i</span><span class="hl esc">\t</span> <span class="hl str">check: %i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span>
           depth<span class="hl opt">,</span>
           <span class="hl kwd">node_check</span><span class="hl opt">(</span>stretch_tree<span class="hl opt">));</span>
<span class="hl opt">}</span>

<span class="hl com">/*</span>
<span class="hl com"> * Main function with enough stack space to fit the tree used to</span>
<span class="hl com"> * 'stretch' memory. Same space is reused to the long lived tree.</span>
<span class="hl com"> */</span>
<span class="hl kwb">void</span> <span class="hl opt">*</span>
<span class="hl kwd">main_thread</span><span class="hl opt">(</span><span class="hl kwb">void</span> <span class="hl opt">*</span>args_<span class="hl opt">)</span>
<span class="hl opt">{</span>
    <span class="hl kwb">struct</span> node <span class="hl opt">*</span>long_lived_tree<span class="hl opt">;</span>
    <span class="hl kwb">struct</span> args <span class="hl opt">*</span>args <span class="hl opt">=</span> args_<span class="hl opt">;</span>

    <span class="hl kwd">stretchdepth_tree</span><span class="hl opt">(</span>args<span class="hl opt">-&gt;</span>max_depth <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">);</span>
    long_lived_tree <span class="hl opt">=</span> <span class="hl kwd">bottom_up_tree</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> args<span class="hl opt">-&gt;</span>max_depth<span class="hl opt">);</span>
    <span class="hl com">/*</span>
<span class="hl com">     * Calculates all subtrees for every second depth ranging from</span>
<span class="hl com">     * min_depth up to, but not including max_depth</span>
<span class="hl com">     */</span>
    <span class="hl kwd">do_trees</span><span class="hl opt">(</span>args<span class="hl opt">-&gt;</span>max_depth <span class="hl opt">&amp; ~</span><span class="hl num">1</span><span class="hl opt">,</span>
             args<span class="hl opt">-&gt;</span>min_depth<span class="hl opt">,</span>
             args<span class="hl opt">-&gt;</span>max_depth<span class="hl opt">);</span>
    <span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;long lived tree of depth %i</span><span class="hl esc">\t</span> <span class="hl str">check: %i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span>
           args<span class="hl opt">-&gt;</span>max_depth<span class="hl opt">,</span>
           <span class="hl kwd">node_check</span><span class="hl opt">(</span>long_lived_tree<span class="hl opt">));</span>

    <span class="hl kwa">return</span> NULL<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwb">int</span>
<span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span> <span class="hl opt">*</span>argv<span class="hl opt">[])</span>
<span class="hl opt">{</span>
    <span class="hl kwb">int</span> req_depth <span class="hl opt">= (</span>argc <span class="hl opt">==</span> <span class="hl num">2</span> ? <span class="hl kwd">atoi</span><span class="hl opt">(</span>argv<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">]) :</span> <span class="hl num">10</span><span class="hl opt">);</span>
    pthread_t thread<span class="hl opt">;</span>
    pthread_attr_t attr<span class="hl opt">;</span>
    <span class="hl kwb">struct</span> args args<span class="hl opt">;</span>

    args<span class="hl opt">.</span>min_depth <span class="hl opt">=</span> <span class="hl num">4</span><span class="hl opt">;</span>
    args<span class="hl opt">.</span>max_depth <span class="hl opt">= (</span>req_depth <span class="hl opt">&gt;</span> args<span class="hl opt">.</span>min_depth <span class="hl opt">+</span> <span class="hl num">2</span>
                      ? req_depth
                      <span class="hl opt">:</span> args<span class="hl opt">.</span>min_depth <span class="hl opt">+</span> <span class="hl num">2</span><span class="hl opt">);</span>

    <span class="hl kwd">pthread_attr_init</span><span class="hl opt">(&amp;</span>attr<span class="hl opt">);</span>
    <span class="hl kwd">pthread_attr_setstacksize</span><span class="hl opt">(&amp;</span>attr<span class="hl opt">,</span> <span class="hl kwd">stack_sz</span><span class="hl opt">(</span>args<span class="hl opt">.</span>max_depth <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">));</span>
    <span class="hl kwd">pthread_create</span><span class="hl opt">(&amp;</span>thread<span class="hl opt">, &amp;</span>attr<span class="hl opt">,</span> main_thread<span class="hl opt">, &amp;</span>args<span class="hl opt">);</span>
    <span class="hl kwd">pthread_attr_destroy</span><span class="hl opt">(&amp;</span>attr<span class="hl opt">);</span>
    <span class="hl kwd">pthread_join</span><span class="hl opt">(</span>thread<span class="hl opt">,</span> NULL<span class="hl opt">);</span>

    <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
