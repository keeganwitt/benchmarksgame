<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by Isaac Gouy</span>
<span class="hl com">   converted to Java by Oleg Mazurov</span>
<span class="hl com">   steady state approximation by Isaac Gouy</span>
<span class="hl com">*/</span>

<span class="hl kwa">public class</span> fannkuchredux
<span class="hl opt">{</span>
   <span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">main</span><span class="hl opt">(</span>String<span class="hl opt">[]</span> args<span class="hl opt">){</span>
      <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span> i<span class="hl opt">&lt;</span><span class="hl num">65</span><span class="hl opt">; ++</span>i<span class="hl opt">)</span> fannkuchredux<span class="hl opt">.</span><span class="hl kwd">program_main</span><span class="hl opt">(</span>args<span class="hl opt">,</span>false<span class="hl opt">);</span>
      fannkuchredux<span class="hl opt">.</span><span class="hl kwd">program_main</span><span class="hl opt">(</span>args<span class="hl opt">,</span>true<span class="hl opt">);</span>
   <span class="hl opt">}</span>

   <span class="hl kwa">public static</span> <span class="hl kwb">int</span> <span class="hl kwd">fannkuch</span><span class="hl opt">(</span><span class="hl kwb">int</span> n<span class="hl opt">,</span> <span class="hl kwb">boolean</span> isWarm<span class="hl opt">) {</span>
      <span class="hl kwb">int</span><span class="hl opt">[]</span> perm <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwb">int</span><span class="hl opt">[</span>n<span class="hl opt">];</span>
      <span class="hl kwb">int</span><span class="hl opt">[]</span> perm1 <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwb">int</span><span class="hl opt">[</span>n<span class="hl opt">];</span>
      <span class="hl kwb">int</span><span class="hl opt">[]</span> count <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwb">int</span><span class="hl opt">[</span>n<span class="hl opt">];</span>
      <span class="hl kwb">int</span> maxFlipsCount <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
      <span class="hl kwb">int</span> permCount <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
      <span class="hl kwb">int</span> checksum <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>

      <span class="hl kwa">for</span><span class="hl opt">(</span><span class="hl kwb">int</span> i<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span> i<span class="hl opt">&lt;</span>n<span class="hl opt">;</span> i<span class="hl opt">++)</span> perm1<span class="hl opt">[</span>i<span class="hl opt">] =</span> i<span class="hl opt">;</span>
      <span class="hl kwb">int</span> r <span class="hl opt">=</span> n<span class="hl opt">;</span>

      <span class="hl kwa">while</span> <span class="hl opt">(</span>true<span class="hl opt">) {</span>

         <span class="hl kwa">while</span> <span class="hl opt">(</span>r <span class="hl opt">!=</span> <span class="hl num">1</span><span class="hl opt">){</span> count<span class="hl opt">[</span>r<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">] =</span> r<span class="hl opt">;</span> r<span class="hl opt">--; }</span>

         <span class="hl kwa">for</span><span class="hl opt">(</span><span class="hl kwb">int</span> i<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span> i<span class="hl opt">&lt;</span>n<span class="hl opt">;</span> i<span class="hl opt">++)</span> perm<span class="hl opt">[</span>i<span class="hl opt">] =</span> perm1<span class="hl opt">[</span>i<span class="hl opt">];</span>
         <span class="hl kwb">int</span> flipsCount <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
         <span class="hl kwb">int</span> k<span class="hl opt">;</span>

         <span class="hl kwa">while</span> <span class="hl opt">( !((</span>k<span class="hl opt">=</span>perm<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">]) ==</span> <span class="hl num">0</span><span class="hl opt">) ) {</span>
            <span class="hl kwb">int</span> k2 <span class="hl opt">= (</span>k<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">) &gt;&gt;</span> <span class="hl num">1</span><span class="hl opt">;</span>
            <span class="hl kwa">for</span><span class="hl opt">(</span><span class="hl kwb">int</span> i<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span> i<span class="hl opt">&lt;</span>k2<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
               <span class="hl kwb">int</span> temp <span class="hl opt">=</span> perm<span class="hl opt">[</span>i<span class="hl opt">];</span> perm<span class="hl opt">[</span>i<span class="hl opt">] =</span> perm<span class="hl opt">[</span>k<span class="hl opt">-</span>i<span class="hl opt">];</span> perm<span class="hl opt">[</span>k<span class="hl opt">-</span>i<span class="hl opt">] =</span> temp<span class="hl opt">;</span>
            <span class="hl opt">}</span>
            flipsCount<span class="hl opt">++;</span>
         <span class="hl opt">}</span>

         maxFlipsCount <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">max</span><span class="hl opt">(</span>maxFlipsCount<span class="hl opt">,</span> flipsCount<span class="hl opt">);</span>
         checksum <span class="hl opt">+=</span> permCount<span class="hl opt">%</span><span class="hl num">2</span> <span class="hl opt">==</span> <span class="hl num">0</span> ? flipsCount <span class="hl opt">: -</span>flipsCount<span class="hl opt">;</span>

         <span class="hl slc">// Use incremental change to generate another permutation</span>
         <span class="hl kwa">while</span> <span class="hl opt">(</span>true<span class="hl opt">) {</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>r <span class="hl opt">==</span> n<span class="hl opt">) {</span>
               <span class="hl kwa">if</span> <span class="hl opt">(</span>isWarm<span class="hl opt">)</span>
	          System<span class="hl opt">.</span>out<span class="hl opt">.</span><span class="hl kwd">println</span><span class="hl opt">(</span> checksum <span class="hl opt">);</span>
	       <span class="hl kwa">return</span> maxFlipsCount<span class="hl opt">;</span>
	    <span class="hl opt">}</span>
            <span class="hl kwb">int</span> perm0 <span class="hl opt">=</span> perm1<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">];</span>
            <span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
            <span class="hl kwa">while</span> <span class="hl opt">(</span>i <span class="hl opt">&lt;</span> r<span class="hl opt">) {</span>
               <span class="hl kwb">int</span> j <span class="hl opt">=</span> i <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span>
               perm1<span class="hl opt">[</span>i<span class="hl opt">] =</span> perm1<span class="hl opt">[</span>j<span class="hl opt">];</span>
               i <span class="hl opt">=</span> j<span class="hl opt">;</span>
            <span class="hl opt">}</span>
            perm1<span class="hl opt">[</span>r<span class="hl opt">] =</span> perm0<span class="hl opt">;</span>

            count<span class="hl opt">[</span>r<span class="hl opt">] =</span> count<span class="hl opt">[</span>r<span class="hl opt">] -</span> <span class="hl num">1</span><span class="hl opt">;</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>count<span class="hl opt">[</span>r<span class="hl opt">] &gt;</span> <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">break</span><span class="hl opt">;</span>
            r<span class="hl opt">++;</span>
         <span class="hl opt">}</span>

         permCount<span class="hl opt">++;</span>
      <span class="hl opt">}</span>
   <span class="hl opt">}</span>

   <span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">program_main</span><span class="hl opt">(</span>String<span class="hl opt">[]</span> args<span class="hl opt">,</span> <span class="hl kwb">boolean</span> isWarm<span class="hl opt">) {</span>
      <span class="hl kwb">int</span> n <span class="hl opt">=</span> <span class="hl num">7</span><span class="hl opt">;</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>args<span class="hl opt">.</span>length <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">)</span> n <span class="hl opt">=</span> Integer<span class="hl opt">.</span><span class="hl kwd">parseInt</span><span class="hl opt">(</span>args<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">]);</span>
      <span class="hl kwb">int</span> pf <span class="hl opt">=</span> <span class="hl kwd">fannkuch</span><span class="hl opt">(</span>n<span class="hl opt">,</span>isWarm<span class="hl opt">);</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>isWarm<span class="hl opt">)</span>
         System<span class="hl opt">.</span>out<span class="hl opt">.</span><span class="hl kwd">println</span><span class="hl opt">(</span><span class="hl str">&quot;Pfannkuchen(&quot;</span><span class="hl opt">+</span>n<span class="hl opt">+</span><span class="hl str">&quot;) = &quot;</span><span class="hl opt">+</span>pf<span class="hl opt">);</span>
   <span class="hl opt">}</span>
<span class="hl opt">}</span>
