<span class="hl slc"># The Computer Language Benchmarks Game</span>
<span class="hl slc"># http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">#</span>
<span class="hl slc"># contributed by Christoph Bauer</span>
<span class="hl slc"># converted into Perl by MÃ¡rton Papp</span>
<span class="hl slc"># fixed and cleaned up by Danny Sauer</span>
<span class="hl slc"># optimized by Jesse Millikan</span>
<span class="hl slc"># optimized by Reini Urban</span>

<span class="hl kwa">use</span> constant PI            <span class="hl opt">=&gt;</span> <span class="hl num">3.141592653589793</span><span class="hl opt">;</span>
<span class="hl kwa">use</span> constant SOLAR_MASS    <span class="hl opt">=&gt; (</span><span class="hl num">4</span> <span class="hl opt">*</span> PI <span class="hl opt">*</span> PI<span class="hl opt">);</span>
<span class="hl kwa">use</span> constant DAYS_PER_YEAR <span class="hl opt">=&gt;</span> <span class="hl num">365.24</span><span class="hl opt">;</span>

<span class="hl kwa">sub</span> energy<span class="hl opt">;</span>
<span class="hl kwa">sub</span> advance<span class="hl opt">($);</span>
<span class="hl kwa">sub</span> offset_momentum<span class="hl opt">;</span>

<span class="hl kwc">my</span> <span class="hl opt">(</span><span class="hl kwb">&#64;xs</span><span class="hl opt">,</span> <span class="hl kwb">&#64;ys</span><span class="hl opt">,</span> <span class="hl kwb">&#64;zs</span><span class="hl opt">,</span> <span class="hl kwb">&#64;vxs</span><span class="hl opt">,</span> <span class="hl kwb">&#64;vys</span><span class="hl opt">,</span> <span class="hl kwb">&#64;vzs</span><span class="hl opt">,</span> <span class="hl kwb">&#64;mass</span><span class="hl opt">,</span> <span class="hl kwb">$last</span><span class="hl opt">);</span>
<span class="hl kwc">my</span> <span class="hl opt">(</span><span class="hl kwb">$energy</span><span class="hl opt">,</span> <span class="hl kwb">$offset_momentum</span><span class="hl opt">,</span> <span class="hl kwb">$advance</span><span class="hl opt">);</span>
<span class="hl kwa">BEGIN</span> <span class="hl opt">{</span>
<span class="hl slc"># Global lexicals for arrays.</span>
<span class="hl slc"># Almost every iteration is a range, so I keep the last index rather than a count.</span>

<span class="hl slc"># &#64;ns = ( sun, jupiter, saturn, uranus, neptune )</span>
<span class="hl kwb">&#64;xs</span> <span class="hl opt">= (</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">4.84143144246472090e+00</span><span class="hl opt">,</span> <span class="hl num">8.34336671824457987e+00</span><span class="hl opt">,</span> <span class="hl num">1.28943695621391310e+01</span><span class="hl opt">,</span> <span class="hl num">1.53796971148509165e+01</span><span class="hl opt">);</span>
<span class="hl kwb">&#64;ys</span> <span class="hl opt">= (</span><span class="hl num">0</span><span class="hl opt">, -</span><span class="hl num">1.16032004402742839e+00</span><span class="hl opt">,</span> <span class="hl num">4.12479856412430479e+00</span><span class="hl opt">, -</span><span class="hl num">1.51111514016986312e+01</span><span class="hl opt">, -</span><span class="hl num">2.59193146099879641e+01</span><span class="hl opt">);</span>
<span class="hl kwb">&#64;zs</span> <span class="hl opt">= (</span><span class="hl num">0</span><span class="hl opt">, -</span><span class="hl num">1.03622044471123109e-01</span><span class="hl opt">, -</span><span class="hl num">4.03523417114321381e-01</span><span class="hl opt">, -</span><span class="hl num">2.23307578892655734e-01</span><span class="hl opt">,</span> <span class="hl num">1.79258772950371181e-01</span><span class="hl opt">);</span>
<span class="hl kwb">&#64;vxs</span> <span class="hl opt">=</span> <span class="hl kwc">map</span> <span class="hl opt">{</span><span class="hl kwb">$_</span> <span class="hl opt">*</span> DAYS_PER_YEAR<span class="hl opt">}</span>
  <span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">1.66007664274403694e-03</span><span class="hl opt">, -</span><span class="hl num">2.76742510726862411e-03</span><span class="hl opt">,</span> <span class="hl num">2.96460137564761618e-03</span><span class="hl opt">,</span> <span class="hl num">2.68067772490389322e-03</span><span class="hl opt">);</span>
<span class="hl kwb">&#64;vys</span> <span class="hl opt">=</span> <span class="hl kwc">map</span> <span class="hl opt">{</span><span class="hl kwb">$_</span> <span class="hl opt">*</span> DAYS_PER_YEAR<span class="hl opt">}</span>
  <span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">7.69901118419740425e-03</span><span class="hl opt">,</span> <span class="hl num">4.99852801234917238e-03</span><span class="hl opt">,</span> <span class="hl num">2.37847173959480950e-03</span><span class="hl opt">,</span> <span class="hl num">1.62824170038242295e-03</span><span class="hl opt">);</span>
<span class="hl kwb">&#64;vzs</span> <span class="hl opt">=</span> <span class="hl kwc">map</span> <span class="hl opt">{</span><span class="hl kwb">$_</span> <span class="hl opt">*</span> DAYS_PER_YEAR<span class="hl opt">}</span>
  <span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">, -</span><span class="hl num">6.90460016972063023e-05</span><span class="hl opt">,</span> <span class="hl num">2.30417297573763929e-05</span><span class="hl opt">, -</span><span class="hl num">2.96589568540237556e-05</span><span class="hl opt">, -</span><span class="hl num">9.51592254519715870e-05</span><span class="hl opt">);</span>
<span class="hl kwb">&#64;mass</span> <span class="hl opt">=</span> <span class="hl kwc">map</span> <span class="hl opt">{</span><span class="hl kwb">$_</span> <span class="hl opt">*</span> SOLAR_MASS<span class="hl opt">}</span>
  <span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">9.54791938424326609e-04</span><span class="hl opt">,</span> <span class="hl num">2.85885980666130812e-04</span><span class="hl opt">,</span> <span class="hl num">4.36624404335156298e-05</span><span class="hl opt">,</span> <span class="hl num">5.15138902046611451e-05</span><span class="hl opt">);</span>
<span class="hl kwb">$last</span> <span class="hl opt">=</span> <span class="hl kwb">$#xs</span><span class="hl opt">;</span>

<span class="hl slc"># Optimize array accesses: $a[const] are optimized to AELEMFAST, $a[$lexical] not.</span>
<span class="hl slc"># So unroll the loops in macro-like fashion (2x times faster). We do it in a BEGIN block,</span>
<span class="hl slc"># so perlcc can also benefit (again 2x faster).</span>
<span class="hl kwa">sub</span> qv <span class="hl opt">{</span>
  <span class="hl kwc">my</span> <span class="hl kwb">$s</span> <span class="hl opt">=</span> <span class="hl kwc">shift</span><span class="hl opt">;</span>
  <span class="hl kwc">my</span> <span class="hl kwb">$env</span> <span class="hl opt">=</span> <span class="hl kwc">shift</span><span class="hl opt">;</span>
  <span class="hl slc"># expand our local loop vars</span>
  <span class="hl kwb">$s</span> <span class="hl opt">=~</span> <span class="hl kwd">s/(\$\w+?)\b/exists($env-&gt;{$1})?$env-&gt;{$1}:$1/sge</span><span class="hl opt">;</span>
  <span class="hl kwb">$s</span>
<span class="hl opt">}</span>

<span class="hl kwb">$energy</span> <span class="hl opt">=</span> <span class="hl str">'</span>
<span class="hl str">sub energy</span>
<span class="hl str">{</span>
<span class="hl str">  my $e = 0.0;</span>
<span class="hl str">  my ($dx, $dy, $dz, $distance);'</span><span class="hl opt">;</span>
  <span class="hl kwa">for</span> <span class="hl kwc">my</span> <span class="hl kwb">$i</span> <span class="hl opt">(</span><span class="hl num">0</span> <span class="hl opt">..</span> <span class="hl kwb">$last</span><span class="hl opt">) {</span>
    <span class="hl kwc">my</span> <span class="hl kwb">$env</span> <span class="hl opt">= {</span><span class="hl str">'$i'</span><span class="hl opt">=&gt;</span><span class="hl kwb">$i</span><span class="hl opt">,</span><span class="hl str">'$last'</span><span class="hl opt">=&gt;</span><span class="hl kwb">$last</span><span class="hl opt">};</span>
    <span class="hl kwb">$energy</span> <span class="hl opt">.=</span> qv<span class="hl opt">(</span><span class="hl str">'</span>
<span class="hl str">    # outer-loop $i..4</span>
<span class="hl str">    $e += 0.5 * $mass[$i] *</span>
<span class="hl str">          ($vxs[$i] * $vxs[$i] + $vys[$i] * $vys[$i] + $vzs[$i] * $vzs[$i]);'</span><span class="hl opt">,</span> <span class="hl kwb">$env</span><span class="hl opt">);</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwc">my</span> <span class="hl kwb">$j</span> <span class="hl opt">=</span> <span class="hl kwb">$i</span> <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span> <span class="hl kwb">$j</span> <span class="hl opt">&lt;</span> <span class="hl kwb">$last</span> <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span> <span class="hl kwb">$j</span><span class="hl opt">++) {</span>
      <span class="hl kwb">$env</span><span class="hl opt">-&gt;{</span><span class="hl str">'$j'</span><span class="hl opt">} =</span> <span class="hl kwb">$j</span><span class="hl opt">;</span>
      <span class="hl kwb">$energy</span> <span class="hl opt">.=</span> qv<span class="hl opt">(</span><span class="hl str">'</span>
<span class="hl str">      # inner-loop $j..4</span>
<span class="hl str">      $dx = $xs[$i] - $xs[$j];</span>
<span class="hl str">      $dy = $ys[$i] - $ys[$j];</span>
<span class="hl str">      $dz = $zs[$i] - $zs[$j];</span>
<span class="hl str">      $distance = sqrt($dx * $dx + $dy * $dy + $dz * $dz);</span>
<span class="hl str">      $e -= ($mass[$i] * $mass[$j]) / $distance;'</span><span class="hl opt">,</span> <span class="hl kwb">$env</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>
  <span class="hl opt">}</span>
  <span class="hl kwb">$energy</span> <span class="hl opt">.=</span> <span class="hl str">'</span>
<span class="hl str">  return $e;</span>
<span class="hl str">}'</span><span class="hl opt">;</span>
<span class="hl kwc">eval</span> <span class="hl kwb">$energy</span><span class="hl opt">;</span> <span class="hl kwc">die</span> <span class="hl kwa">if</span> <span class="hl opt">$</span>&#64;<span class="hl opt">;</span>

<span class="hl kwb">$advance</span> <span class="hl opt">=</span> <span class="hl str">'</span>
<span class="hl str">sub advance($)</span>
<span class="hl str">{</span>
<span class="hl str">  my $dt = $_[0];</span>
<span class="hl str">  my ($mm, $mm2, $j, $dx, $dy, $dz, $distance, $mag);'</span><span class="hl opt">;</span>
  <span class="hl kwa">for</span> <span class="hl kwc">my</span> <span class="hl kwb">$i</span> <span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">..</span><span class="hl kwb">$last</span><span class="hl opt">) {</span>
    <span class="hl kwc">my</span> <span class="hl kwb">$env</span> <span class="hl opt">= {</span><span class="hl str">'$i'</span><span class="hl opt">=&gt;</span><span class="hl kwb">$i</span><span class="hl opt">};</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwc">my</span> <span class="hl kwb">$j</span> <span class="hl opt">=</span> <span class="hl kwb">$i</span> <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span> <span class="hl kwb">$j</span> <span class="hl opt">&lt;</span> <span class="hl kwb">$last</span> <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span> <span class="hl kwb">$j</span><span class="hl opt">++) {</span>
      <span class="hl kwb">$env</span><span class="hl opt">-&gt;{</span><span class="hl str">'$j'</span><span class="hl opt">} =</span> <span class="hl kwb">$j</span><span class="hl opt">;</span>
      <span class="hl kwb">$advance</span> <span class="hl opt">.=</span> qv<span class="hl opt">(</span><span class="hl str">'</span>
<span class="hl str">      # outer-loop $i..4</span>
<span class="hl str">      # inner-loop $j..4</span>
<span class="hl str">      $dx = $xs[$i] - $xs[$j];</span>
<span class="hl str">      $dy = $ys[$i] - $ys[$j];</span>
<span class="hl str">      $dz = $zs[$i] - $zs[$j];</span>
<span class="hl str">      $distance = sqrt($dx * $dx + $dy * $dy + $dz * $dz);</span>
<span class="hl str">      $mag = $dt / ($distance * $distance * $distance);</span>
<span class="hl str">      $mm  = $mass[$i] * $mag;</span>
<span class="hl str">      $mm2 = $mass[$j] * $mag;</span>
<span class="hl str">      $vxs[$i] -= $dx * $mm2;</span>
<span class="hl str">      $vxs[$j] += $dx * $mm;</span>
<span class="hl str">      $vys[$i] -= $dy * $mm2;</span>
<span class="hl str">      $vys[$j] += $dy * $mm;</span>
<span class="hl str">      $vzs[$i] -= $dz * $mm2;</span>
<span class="hl str">      $vzs[$j] += $dz * $mm;'</span><span class="hl opt">,</span> <span class="hl kwb">$env</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>
  <span class="hl opt">}</span>
  <span class="hl slc"># We're done with planet $i at this point</span>
  <span class="hl kwa">for</span> <span class="hl kwc">my</span> <span class="hl kwb">$i</span> <span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">..</span><span class="hl kwb">$last</span><span class="hl opt">) {</span>
    <span class="hl kwc">my</span> <span class="hl kwb">$env</span> <span class="hl opt">= {</span><span class="hl str">'$i'</span><span class="hl opt">=&gt;</span><span class="hl kwb">$i</span><span class="hl opt">};</span>
    <span class="hl kwb">$advance</span> <span class="hl opt">.=</span> qv<span class="hl opt">(</span><span class="hl str">'</span>
<span class="hl str">    $xs[$i] += $dt * $vxs[$i];</span>
<span class="hl str">    $ys[$i] += $dt * $vys[$i];</span>
<span class="hl str">    $zs[$i] += $dt * $vzs[$i];'</span><span class="hl opt">,</span> <span class="hl kwb">$env</span><span class="hl opt">);</span>
  <span class="hl opt">}</span>
  <span class="hl kwb">$advance</span> <span class="hl opt">.=</span> <span class="hl str">'</span>
<span class="hl str">}'</span><span class="hl opt">;</span>
<span class="hl kwc">eval</span> <span class="hl kwb">$advance</span><span class="hl opt">;</span> <span class="hl kwc">die</span> <span class="hl kwa">if</span> <span class="hl opt">$</span>&#64;<span class="hl opt">;</span>

<span class="hl kwb">$offset_momentum</span> <span class="hl opt">=</span> <span class="hl str">';</span>
<span class="hl str">sub offset_momentum</span>
<span class="hl str">{</span>
<span class="hl str">  my $px = 0.0; </span>
<span class="hl str">  my $py = 0.0;</span>
<span class="hl str">  my $pz = 0.0;</span>
<span class="hl str">  my $mass;</span>
<span class="hl str">'</span><span class="hl opt">;</span>
<span class="hl kwa">for</span> <span class="hl kwc">my</span> <span class="hl kwb">$i</span> <span class="hl opt">(</span><span class="hl num">0</span> <span class="hl opt">..</span> <span class="hl kwb">$last</span><span class="hl opt">) {</span>
  <span class="hl kwc">my</span> <span class="hl kwb">$env</span> <span class="hl opt">= {</span><span class="hl str">'$i'</span><span class="hl opt">=&gt;</span><span class="hl kwb">$i</span><span class="hl opt">};</span>
  <span class="hl kwb">$offset_momentum</span> <span class="hl opt">.=</span> qv<span class="hl opt">(</span><span class="hl str">'</span>
<span class="hl str">    $mass = $mass[$i];</span>
<span class="hl str">    $px += $vxs[$i] * $mass;</span>
<span class="hl str">    $py += $vys[$i] * $mass;</span>
<span class="hl str">    $pz += $vzs[$i] * $mass;'</span><span class="hl opt">,</span> <span class="hl kwb">$env</span><span class="hl opt">);</span>
<span class="hl opt">}</span>
<span class="hl kwb">$offset_momentum</span> <span class="hl opt">.=</span> <span class="hl str">'</span>
<span class="hl str">  $vxs[0] = - $px / SOLAR_MASS;</span>
<span class="hl str">  $vys[0] = - $py / SOLAR_MASS;</span>
<span class="hl str">  $vzs[0] = - $pz / SOLAR_MASS;</span>
<span class="hl str">}'</span><span class="hl opt">;</span>
<span class="hl kwc">eval</span> <span class="hl kwb">$offset_momentum</span><span class="hl opt">;</span> <span class="hl kwc">die</span> <span class="hl kwa">if</span> <span class="hl opt">$</span>&#64;<span class="hl opt">;</span>

<span class="hl opt">}</span> <span class="hl slc">#BEGIN</span>

offset_momentum<span class="hl opt">();</span>
<span class="hl kwc">printf</span> <span class="hl opt">(</span><span class="hl str">&quot;%.9f</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> energy<span class="hl opt">());</span>

<span class="hl kwc">my</span> <span class="hl kwb">$n</span> <span class="hl opt">=</span> <span class="hl kwb">$ARGV</span><span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">];</span>
<span class="hl kwb">$n</span> <span class="hl opt">=~</span> <span class="hl kwd">s/[,_]//g</span><span class="hl opt">;</span> <span class="hl slc"># allow 50_000_000 or 50,000,000</span>

<span class="hl slc"># This does not, in fact, consume N*4 bytes of memory</span>
<span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl num">1</span> <span class="hl opt">..</span> <span class="hl kwb">$n</span><span class="hl opt">) {</span>
  advance<span class="hl opt">(</span><span class="hl num">0.01</span><span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwc">printf</span> <span class="hl opt">(</span><span class="hl str">&quot;%.9f</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> energy<span class="hl opt">());</span>
