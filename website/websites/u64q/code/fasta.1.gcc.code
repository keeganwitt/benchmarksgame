<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * by Paul Hsieh</span>
<span class="hl com"> */</span>

<span class="hl ppc">#include &lt;stdio.h&gt;</span>
<span class="hl ppc">#include &lt;stdlib.h&gt;</span>

<span class="hl ppc">#define IM 139968</span>
<span class="hl ppc">#define IA   3877</span>
<span class="hl ppc">#define IC  29573</span>

<span class="hl kwb">double</span> <span class="hl kwd">gen_random</span> <span class="hl opt">(</span><span class="hl kwb">double</span> max<span class="hl opt">) {</span>
    <span class="hl kwb">static long</span> last <span class="hl opt">=</span> <span class="hl num">42</span><span class="hl opt">;</span>
    <span class="hl kwa">return</span> max <span class="hl opt">* (</span>last <span class="hl opt">= (</span>last <span class="hl opt">*</span> IA <span class="hl opt">+</span> IC<span class="hl opt">) %</span> IM<span class="hl opt">) /</span> IM<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwb">struct</span> aminoacids <span class="hl opt">{</span>
    <span class="hl kwb">char</span> c<span class="hl opt">;</span>
    <span class="hl kwb">double</span> p<span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl com">/* Weighted selection from alphabet */</span>

<span class="hl kwb">void</span> <span class="hl kwd">makeCumulative</span> <span class="hl opt">(</span><span class="hl kwb">struct</span> aminoacids <span class="hl opt">*</span> genelist<span class="hl opt">,</span> <span class="hl kwb">int</span> count<span class="hl opt">) {</span>
    <span class="hl kwb">double</span> cp <span class="hl opt">=</span> <span class="hl num">0.0</span><span class="hl opt">;</span>
    <span class="hl kwb">int</span> i<span class="hl opt">;</span>

    <span class="hl kwa">for</span> <span class="hl opt">(</span>i<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> count<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
        cp <span class="hl opt">+=</span> genelist<span class="hl opt">[</span>i<span class="hl opt">].</span>p<span class="hl opt">;</span>
        genelist<span class="hl opt">[</span>i<span class="hl opt">].</span>p <span class="hl opt">=</span> cp<span class="hl opt">;</span>
    <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl kwb">char</span> <span class="hl kwd">selectRandom</span> <span class="hl opt">(</span><span class="hl kwb">const struct</span> aminoacids <span class="hl opt">*</span> genelist<span class="hl opt">,</span> <span class="hl kwb">int</span> count<span class="hl opt">) {</span>
    <span class="hl kwb">double</span> r <span class="hl opt">=</span> <span class="hl kwd">gen_random</span> <span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">);</span>
    <span class="hl kwb">int</span> i<span class="hl opt">,</span> lo<span class="hl opt">,</span> hi<span class="hl opt">;</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span>r <span class="hl opt">&lt;</span> genelist<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">].</span>p<span class="hl opt">)</span> <span class="hl kwa">return</span> genelist<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">].</span>c<span class="hl opt">;</span>

    lo <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    hi <span class="hl opt">=</span> count<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">;</span>

    <span class="hl kwa">while</span> <span class="hl opt">(</span>hi <span class="hl opt">&gt;</span> lo<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">) {</span>
        i <span class="hl opt">= (</span>hi <span class="hl opt">+</span> lo<span class="hl opt">) /</span> <span class="hl num">2</span><span class="hl opt">;</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>r <span class="hl opt">&lt;</span> genelist<span class="hl opt">[</span>i<span class="hl opt">].</span>p<span class="hl opt">)</span> hi <span class="hl opt">=</span> i<span class="hl opt">;</span> <span class="hl kwa">else</span> lo <span class="hl opt">=</span> i<span class="hl opt">;</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return</span> genelist<span class="hl opt">[</span>hi<span class="hl opt">].</span>c<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl com">/* Generate and write FASTA format */</span>

<span class="hl ppc">#define LINE_LENGTH (60)</span>

<span class="hl kwb">void</span> <span class="hl kwd">makeRandomFasta</span> <span class="hl opt">(</span><span class="hl kwb">const char</span> <span class="hl opt">*</span> id<span class="hl opt">,</span> <span class="hl kwb">const char</span> <span class="hl opt">*</span> desc<span class="hl opt">,</span> <span class="hl kwb">const struct</span> 
aminoacids <span class="hl opt">*</span> genelist<span class="hl opt">,</span> <span class="hl kwb">int</span> count<span class="hl opt">,</span> <span class="hl kwb">int</span> n<span class="hl opt">) {</span>
   <span class="hl kwb">int</span> todo <span class="hl opt">=</span> n<span class="hl opt">;</span>
   <span class="hl kwb">int</span> i<span class="hl opt">,</span> m<span class="hl opt">;</span>

   <span class="hl kwd">printf</span> <span class="hl opt">(</span><span class="hl str">&quot;&gt;%s %s</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> id<span class="hl opt">,</span> desc<span class="hl opt">);</span>

   <span class="hl kwa">for</span> <span class="hl opt">(;</span> todo <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">;</span> todo <span class="hl opt">-=</span> LINE_LENGTH<span class="hl opt">) {</span>
       <span class="hl kwb">char</span> pick<span class="hl opt">[</span>LINE_LENGTH<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">];</span>
       <span class="hl kwa">if</span> <span class="hl opt">(</span>todo <span class="hl opt">&lt;</span> LINE_LENGTH<span class="hl opt">)</span> m <span class="hl opt">=</span> todo<span class="hl opt">;</span> <span class="hl kwa">else</span> m <span class="hl opt">=</span> LINE_LENGTH<span class="hl opt">;</span>
       <span class="hl kwa">for</span> <span class="hl opt">(</span>i<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> m<span class="hl opt">;</span> i<span class="hl opt">++)</span> pick<span class="hl opt">[</span>i<span class="hl opt">] =</span> <span class="hl kwd">selectRandom</span> <span class="hl opt">(</span>genelist<span class="hl opt">,</span> count<span class="hl opt">);</span>
       pick<span class="hl opt">[</span>m<span class="hl opt">] =</span> <span class="hl str">'\0'</span><span class="hl opt">;</span>
       <span class="hl kwd">puts</span> <span class="hl opt">(</span>pick<span class="hl opt">);</span>
   <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl kwb">void</span> <span class="hl kwd">makeRepeatFasta</span> <span class="hl opt">(</span><span class="hl kwb">const char</span> <span class="hl opt">*</span> id<span class="hl opt">,</span> <span class="hl kwb">const char</span> <span class="hl opt">*</span> desc<span class="hl opt">,</span> <span class="hl kwb">const char</span> <span class="hl opt">*</span> 
s<span class="hl opt">,</span> <span class="hl kwb">int</span> n<span class="hl opt">) {</span>
   <span class="hl kwb">char</span> <span class="hl opt">*</span> ss<span class="hl opt">;</span>
   <span class="hl kwb">int</span> todo <span class="hl opt">=</span> n<span class="hl opt">,</span> k <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">,</span> kn <span class="hl opt">=</span> <span class="hl kwd">strlen</span> <span class="hl opt">(</span>s<span class="hl opt">);</span>
   <span class="hl kwb">int</span> m<span class="hl opt">;</span>

   ss <span class="hl opt">= (</span><span class="hl kwb">char</span> <span class="hl opt">*)</span> <span class="hl kwd">malloc</span> <span class="hl opt">(</span>kn <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">);</span>
   <span class="hl kwd">memcpy</span> <span class="hl opt">(</span>ss<span class="hl opt">,</span> s<span class="hl opt">,</span> kn<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">);</span>

   <span class="hl kwd">printf</span> <span class="hl opt">(</span><span class="hl str">&quot;&gt;%s %s</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> id<span class="hl opt">,</span> desc<span class="hl opt">);</span>

   <span class="hl kwa">for</span> <span class="hl opt">(;</span> todo <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">;</span> todo <span class="hl opt">-=</span> LINE_LENGTH<span class="hl opt">) {</span>
       <span class="hl kwa">if</span> <span class="hl opt">(</span>todo <span class="hl opt">&lt;</span> LINE_LENGTH<span class="hl opt">)</span> m <span class="hl opt">=</span> todo<span class="hl opt">;</span> <span class="hl kwa">else</span> m <span class="hl opt">=</span> LINE_LENGTH<span class="hl opt">;</span>

       <span class="hl kwa">while</span> <span class="hl opt">(</span>m <span class="hl opt">&gt;=</span> kn <span class="hl opt">-</span> k<span class="hl opt">) {</span>
           <span class="hl kwd">printf</span> <span class="hl opt">(</span><span class="hl str">&quot;%s&quot;</span><span class="hl opt">,</span> s<span class="hl opt">+</span>k<span class="hl opt">);</span>
           m <span class="hl opt">-=</span> kn <span class="hl opt">-</span> k<span class="hl opt">;</span>
           k <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
       <span class="hl opt">}</span>

       ss<span class="hl opt">[</span>k <span class="hl opt">+</span> m<span class="hl opt">] =</span> <span class="hl str">'\0'</span><span class="hl opt">;</span>
       <span class="hl kwd">puts</span> <span class="hl opt">(</span>ss<span class="hl opt">+</span>k<span class="hl opt">);</span>
       ss<span class="hl opt">[</span>k <span class="hl opt">+</span> m<span class="hl opt">] =</span> s<span class="hl opt">[</span>m<span class="hl opt">+</span>k<span class="hl opt">];</span>
       k <span class="hl opt">+=</span> m<span class="hl opt">;</span>
   <span class="hl opt">}</span>

   <span class="hl kwd">free</span> <span class="hl opt">(</span>ss<span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl com">/* Main -- define alphabets, make 3 fragments */</span>

<span class="hl kwb">struct</span> aminoacids iub<span class="hl opt">[] = {</span>
    <span class="hl opt">{</span> <span class="hl str">'a'</span><span class="hl opt">,</span> <span class="hl num">0.27</span> <span class="hl opt">},</span>
    <span class="hl opt">{</span> <span class="hl str">'c'</span><span class="hl opt">,</span> <span class="hl num">0.12</span> <span class="hl opt">},</span>
    <span class="hl opt">{</span> <span class="hl str">'g'</span><span class="hl opt">,</span> <span class="hl num">0.12</span> <span class="hl opt">},</span>
    <span class="hl opt">{</span> <span class="hl str">'t'</span><span class="hl opt">,</span> <span class="hl num">0.27</span> <span class="hl opt">},</span>

    <span class="hl opt">{</span> <span class="hl str">'B'</span><span class="hl opt">,</span> <span class="hl num">0.02</span> <span class="hl opt">},</span>
    <span class="hl opt">{</span> <span class="hl str">'D'</span><span class="hl opt">,</span> <span class="hl num">0.02</span> <span class="hl opt">},</span>
    <span class="hl opt">{</span> <span class="hl str">'H'</span><span class="hl opt">,</span> <span class="hl num">0.02</span> <span class="hl opt">},</span>
    <span class="hl opt">{</span> <span class="hl str">'K'</span><span class="hl opt">,</span> <span class="hl num">0.02</span> <span class="hl opt">},</span>
    <span class="hl opt">{</span> <span class="hl str">'M'</span><span class="hl opt">,</span> <span class="hl num">0.02</span> <span class="hl opt">},</span>
    <span class="hl opt">{</span> <span class="hl str">'N'</span><span class="hl opt">,</span> <span class="hl num">0.02</span> <span class="hl opt">},</span>
    <span class="hl opt">{</span> <span class="hl str">'R'</span><span class="hl opt">,</span> <span class="hl num">0.02</span> <span class="hl opt">},</span>
    <span class="hl opt">{</span> <span class="hl str">'S'</span><span class="hl opt">,</span> <span class="hl num">0.02</span> <span class="hl opt">},</span>
    <span class="hl opt">{</span> <span class="hl str">'V'</span><span class="hl opt">,</span> <span class="hl num">0.02</span> <span class="hl opt">},</span>
    <span class="hl opt">{</span> <span class="hl str">'W'</span><span class="hl opt">,</span> <span class="hl num">0.02</span> <span class="hl opt">},</span>
    <span class="hl opt">{</span> <span class="hl str">'Y'</span><span class="hl opt">,</span> <span class="hl num">0.02</span> <span class="hl opt">}</span>
<span class="hl opt">};</span>

<span class="hl ppc">#define IUB_LEN (sizeof (iub) / sizeof (struct aminoacids))</span>

<span class="hl kwb">struct</span> aminoacids homosapiens<span class="hl opt">[] = {</span>
    <span class="hl opt">{</span> <span class="hl str">'a'</span><span class="hl opt">,</span> <span class="hl num">0.3029549426680</span> <span class="hl opt">},</span>
    <span class="hl opt">{</span> <span class="hl str">'c'</span><span class="hl opt">,</span> <span class="hl num">0.1979883004921</span> <span class="hl opt">},</span>
    <span class="hl opt">{</span> <span class="hl str">'g'</span><span class="hl opt">,</span> <span class="hl num">0.1975473066391</span> <span class="hl opt">},</span>
    <span class="hl opt">{</span> <span class="hl str">'t'</span><span class="hl opt">,</span> <span class="hl num">0.3015094502008</span> <span class="hl opt">},</span>
<span class="hl opt">};</span>

<span class="hl ppc">#define HOMOSAPIENS_LEN (sizeof (homosapiens) / sizeof (struct aminoacids))</span>

<span class="hl kwb">char</span> <span class="hl opt">*</span> alu <span class="hl opt">=</span>
   <span class="hl str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span> \
   <span class="hl str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span> \
   <span class="hl str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span> \
   <span class="hl str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span> \
   <span class="hl str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span> \
   <span class="hl str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span> \
   <span class="hl str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span><span class="hl opt">;</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span> <span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span> <span class="hl opt">*</span> argv<span class="hl opt">[]) {</span>
    <span class="hl kwb">int</span> n <span class="hl opt">=</span> <span class="hl num">1000</span><span class="hl opt">;</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span>argc <span class="hl opt">&gt;</span> <span class="hl num">1</span><span class="hl opt">)</span> <span class="hl kwd">sscanf</span> <span class="hl opt">(</span>argv<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">],</span> <span class="hl str">&quot;%d&quot;</span><span class="hl opt">, &amp;</span>n<span class="hl opt">);</span>

    <span class="hl kwd">makeCumulative</span> <span class="hl opt">(</span>iub<span class="hl opt">,</span> IUB_LEN<span class="hl opt">);</span>
    <span class="hl kwd">makeCumulative</span> <span class="hl opt">(</span>homosapiens<span class="hl opt">,</span> HOMOSAPIENS_LEN<span class="hl opt">);</span>

    <span class="hl kwd">makeRepeatFasta</span> <span class="hl opt">(</span><span class="hl str">&quot;ONE&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;Homo sapiens alu&quot;</span><span class="hl opt">,</span> alu<span class="hl opt">,</span> n<span class="hl opt">*</span><span class="hl num">2</span><span class="hl opt">);</span>
    <span class="hl kwd">makeRandomFasta</span> <span class="hl opt">(</span><span class="hl str">&quot;TWO&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;IUB ambiguity codes&quot;</span><span class="hl opt">,</span> iub<span class="hl opt">,</span> IUB_LEN<span class="hl opt">,</span> n<span class="hl opt">*</span><span class="hl num">3</span><span class="hl opt">);</span>
    <span class="hl kwd">makeRandomFasta</span> <span class="hl opt">(</span><span class="hl str">&quot;THREE&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;Homo sapiens frequency&quot;</span><span class="hl opt">,</span> homosapiens<span class="hl opt">,</span> 
HOMOSAPIENS_LEN<span class="hl opt">,</span> n<span class="hl opt">*</span><span class="hl num">5</span><span class="hl opt">);</span>

    <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>

