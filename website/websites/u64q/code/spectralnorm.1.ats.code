<span class="hl com">(*</span>
<span class="hl com">** The Computer Language Benchmarks Game</span>
<span class="hl com">** http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com">**</span>
<span class="hl com">** contributed by Hongwei Xi </span>
<span class="hl com">**</span>
<span class="hl com">** compilation command:</span>
<span class="hl com">**   atscc -O3 -msse2 spectralnorm.dats -o spectralnorm -lm</span>
<span class="hl com">**</span>
<span class="hl com">*)</span>

<span class="hl kwa">staload</span> <span class="hl kwd">M</span> <span class="hl opt">=</span> <span class="hl str">&quot;libc/SATS/math.sats&quot;</span>

<span class="hl opt">%{^</span>

<span class="hl kwa">static inline</span>
ats_ptr_type
darray_make <span class="hl opt">(</span>ats_int_type n<span class="hl opt">,</span> ats_double_type f<span class="hl opt">) {</span>
  <span class="hl kwb">int</span> i<span class="hl opt">;</span>
  ats_double_type <span class="hl opt">*</span>p0<span class="hl opt">, *</span>p <span class="hl opt">;</span>

  p0 <span class="hl opt">=</span> malloc<span class="hl opt">(</span>n <span class="hl opt">*</span> sizeof<span class="hl opt">(</span>ats_double_type<span class="hl opt">)) ;</span>
  p <span class="hl opt">=</span> p0 <span class="hl opt">;</span>

  <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> n<span class="hl opt">; ++</span>i<span class="hl opt">) { *</span>p <span class="hl opt">=</span> f<span class="hl opt">; ++</span>p<span class="hl opt">; }</span>
  <span class="hl kwa">return</span> p0 <span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwa">static inline</span>
ats_void_type
darray_free <span class="hl opt">(</span>ats_ptr_type <span class="hl kwd">A</span><span class="hl opt">) {</span> free <span class="hl opt">(</span><span class="hl kwd">A</span><span class="hl opt">) ;</span> <span class="hl kwa">return</span> <span class="hl opt">; }</span>

<span class="hl kwa">static inline</span>
ats_double_type
darray_get <span class="hl opt">(</span>ats_ptr_type <span class="hl kwd">A</span><span class="hl opt">,</span> ats_int_type i<span class="hl opt">) {</span>
  <span class="hl kwa">return</span> <span class="hl opt">((</span>ats_double_type *)<span class="hl kwd">A</span><span class="hl opt">)[</span>i<span class="hl opt">] ;</span>
<span class="hl opt">}</span>

<span class="hl kwa">static inline</span>
ats_void_type
darray_set <span class="hl opt">(</span>ats_ptr_type <span class="hl kwd">A</span><span class="hl opt">,</span> ats_int_type i<span class="hl opt">,</span> ats_double_type f<span class="hl opt">) {</span>
  <span class="hl opt">((</span>ats_double_type *)<span class="hl kwd">A</span><span class="hl opt">)[</span>i<span class="hl opt">] =</span> f <span class="hl opt">;</span> <span class="hl kwa">return</span> <span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwa">static inline</span>
ats_double_type eval_A <span class="hl opt">(</span>ats_int_type i<span class="hl opt">,</span> ats_int_type j<span class="hl opt">) {</span> 
  <span class="hl kwa">return</span> <span class="hl num">1.0</span>/<span class="hl opt">((</span>i<span class="hl opt">+</span>j<span class="hl opt">)*(</span>i<span class="hl opt">+</span>j<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)</span>/<span class="hl num">2</span><span class="hl opt">+</span>i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl opt">%}</span>

absviewt&#64;ype darray <span class="hl opt">(</span>n<span class="hl opt">:</span><span class="hl kwb">int</span><span class="hl opt">)</span> <span class="hl slc">// it is linear, so it cannot be leaked.</span>

<span class="hl kwa">extern fun</span> darray_make <span class="hl opt">{</span>n<span class="hl opt">:</span>nat<span class="hl opt">}</span>
  <span class="hl opt">(</span>n<span class="hl opt">:</span> <span class="hl kwb">int</span> n<span class="hl opt">,</span> d<span class="hl opt">:</span> double<span class="hl opt">): [</span>l<span class="hl opt">:</span>addr<span class="hl opt">] (</span>darray n &#64; l | ptr l<span class="hl opt">)</span>
  <span class="hl opt">=</span> <span class="hl str">&quot;darray_make&quot;</span>

<span class="hl kwa">extern fun</span> darray_free
  <span class="hl opt">{</span>n<span class="hl opt">:</span>nat<span class="hl opt">} {</span>l<span class="hl opt">:</span>addr<span class="hl opt">} (</span>pf<span class="hl opt">:</span> darray n &#64; l | p<span class="hl opt">:</span> ptr l<span class="hl opt">):</span> void
  <span class="hl opt">=</span> <span class="hl str">&quot;darray_free&quot;</span>

<span class="hl kwa">extern fun</span> darray_get <span class="hl opt">{</span>n<span class="hl opt">:</span>nat<span class="hl opt">}</span>
  <span class="hl opt">(</span><span class="hl kwd">A</span><span class="hl opt">: &amp;</span>darray n<span class="hl opt">,</span> i<span class="hl opt">:</span> natLt n<span class="hl opt">):</span> double <span class="hl opt">=</span> <span class="hl str">&quot;darray_get&quot;</span>

<span class="hl kwa">extern fun</span> darray_set <span class="hl opt">{</span>n<span class="hl opt">:</span>nat<span class="hl opt">}</span>
  <span class="hl opt">(</span><span class="hl kwd">A</span><span class="hl opt">: &amp;</span>darray n<span class="hl opt">,</span> i<span class="hl opt">:</span> natLt n<span class="hl opt">,</span> d<span class="hl opt">:</span> double<span class="hl opt">):</span> void <span class="hl opt">=</span> <span class="hl str">&quot;darray_set&quot;</span>

overload <span class="hl opt">[]</span> <span class="hl kwa">with</span> darray_get
overload <span class="hl opt">[]</span> <span class="hl kwa">with</span> darray_set

<span class="hl slc">//</span>

<span class="hl kwa">extern fun</span> eval_A <span class="hl opt">(</span>i<span class="hl opt">:</span> <span class="hl kwb">int</span><span class="hl opt">,</span> j<span class="hl opt">:</span> <span class="hl kwb">int</span><span class="hl opt">):</span> double <span class="hl opt">=</span> <span class="hl str">&quot;eval_A&quot;</span>

fn eval_A_times_u <span class="hl opt">{</span><span class="hl kwd">N</span><span class="hl opt">:</span>nat<span class="hl opt">}</span>
  <span class="hl opt">(</span><span class="hl kwd">N</span><span class="hl opt">:</span> <span class="hl kwb">int</span> <span class="hl kwd">N</span><span class="hl opt">,</span> u<span class="hl opt">: &amp;</span>darray <span class="hl kwd">N</span><span class="hl opt">,</span> <span class="hl kwd">Au</span><span class="hl opt">: &amp;</span>darray <span class="hl kwd">N</span><span class="hl opt">):</span> void <span class="hl opt">=</span>
  <span class="hl kwa">let</span>
     <span class="hl kwa">fun</span> loop2 <span class="hl opt">{</span>i<span class="hl opt">,</span>j<span class="hl opt">:</span>nat | i <span class="hl opt">&lt;</span> <span class="hl kwd">N</span><span class="hl opt">;</span> j <span class="hl opt">&lt;=</span> <span class="hl kwd">N</span><span class="hl opt">} .&lt;</span><span class="hl kwd">N</span><span class="hl opt">-</span>j<span class="hl opt">&gt;.</span>
       <span class="hl opt">(</span>u<span class="hl opt">: &amp;</span>darray <span class="hl kwd">N</span><span class="hl opt">,</span> <span class="hl kwd">Au</span><span class="hl opt">: &amp;</span>darray <span class="hl kwd">N</span><span class="hl opt">,</span> i<span class="hl opt">:</span> <span class="hl kwb">int</span> i<span class="hl opt">,</span> j<span class="hl opt">:</span> <span class="hl kwb">int</span> j<span class="hl opt">):&lt;</span>cloptr1<span class="hl opt">&gt;</span> void <span class="hl opt">=</span>
       <span class="hl kwa">if</span> j <span class="hl opt">&lt;</span> <span class="hl kwd">N</span> <span class="hl kwa">then begin</span>
         <span class="hl kwd">Au</span><span class="hl opt">[</span>i<span class="hl opt">] :=</span> <span class="hl kwd">Au</span><span class="hl opt">[</span>i<span class="hl opt">] +</span> eval_A<span class="hl opt">(</span>i<span class="hl opt">,</span> j<span class="hl opt">) *</span> u<span class="hl opt">[</span>j<span class="hl opt">];</span> loop2 <span class="hl opt">(</span>u<span class="hl opt">,</span> <span class="hl kwd">Au</span><span class="hl opt">,</span> i<span class="hl opt">,</span> j<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)</span>
       <span class="hl kwa">end</span>

     <span class="hl kwa">fun</span> loop1 <span class="hl opt">{</span>i<span class="hl opt">:</span>nat | i <span class="hl opt">&lt;=</span> <span class="hl kwd">N</span><span class="hl opt">} .&lt;</span><span class="hl kwd">N</span><span class="hl opt">-</span>i<span class="hl opt">&gt;.</span>
       <span class="hl opt">(</span>u<span class="hl opt">: &amp;</span>darray <span class="hl kwd">N</span><span class="hl opt">,</span> <span class="hl kwd">Au</span><span class="hl opt">: &amp;</span>darray <span class="hl kwd">N</span><span class="hl opt">,</span> i<span class="hl opt">:</span> <span class="hl kwb">int</span> i<span class="hl opt">):&lt;</span>cloptr1<span class="hl opt">&gt;</span> void <span class="hl opt">=</span>
       <span class="hl kwa">if</span> i <span class="hl opt">&lt;</span> <span class="hl kwd">N</span> <span class="hl kwa">then begin</span>
         <span class="hl kwd">Au</span><span class="hl opt">[</span>i<span class="hl opt">] :=</span> <span class="hl num">0.0</span><span class="hl opt">;</span> loop2 <span class="hl opt">(</span>u<span class="hl opt">,</span> <span class="hl kwd">Au</span><span class="hl opt">,</span> i<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">);</span> loop1 <span class="hl opt">(</span>u<span class="hl opt">,</span> <span class="hl kwd">Au</span><span class="hl opt">,</span> i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)</span>
       <span class="hl kwa">end</span>
  <span class="hl kwa">in</span>
     loop1 <span class="hl opt">(</span>u<span class="hl opt">,</span> <span class="hl kwd">Au</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">)</span>
  <span class="hl kwa">end</span>

<span class="hl slc">//</span>

fn eval_At_times_u <span class="hl opt">{</span><span class="hl kwd">N</span><span class="hl opt">:</span>nat<span class="hl opt">}</span>
  <span class="hl opt">(</span><span class="hl kwd">N</span><span class="hl opt">:</span> <span class="hl kwb">int</span> <span class="hl kwd">N</span><span class="hl opt">,</span> u<span class="hl opt">: &amp;</span>darray <span class="hl kwd">N</span><span class="hl opt">,</span> <span class="hl kwd">Au</span><span class="hl opt">: &amp;</span>darray <span class="hl kwd">N</span><span class="hl opt">):</span> void <span class="hl opt">=</span>
  <span class="hl kwa">let</span>
     <span class="hl kwa">fun</span> loop2 <span class="hl opt">{</span>i<span class="hl opt">,</span>j<span class="hl opt">:</span>nat | i <span class="hl opt">&lt;</span> <span class="hl kwd">N</span><span class="hl opt">;</span> j <span class="hl opt">&lt;=</span> <span class="hl kwd">N</span><span class="hl opt">} .&lt;</span><span class="hl kwd">N</span><span class="hl opt">-</span>j<span class="hl opt">&gt;.</span>
       <span class="hl opt">(</span>u<span class="hl opt">: &amp;</span>darray <span class="hl kwd">N</span><span class="hl opt">,</span> <span class="hl kwd">Au</span><span class="hl opt">: &amp;</span>darray <span class="hl kwd">N</span><span class="hl opt">,</span> i<span class="hl opt">:</span> <span class="hl kwb">int</span> i<span class="hl opt">,</span> j<span class="hl opt">:</span> <span class="hl kwb">int</span> j<span class="hl opt">):&lt;</span>cloptr1<span class="hl opt">&gt;</span> void <span class="hl opt">=</span>
       <span class="hl kwa">if</span> j <span class="hl opt">&lt;</span> <span class="hl kwd">N</span> <span class="hl kwa">then begin</span>
         <span class="hl kwd">Au</span><span class="hl opt">[</span>i<span class="hl opt">] :=</span> <span class="hl kwd">Au</span><span class="hl opt">[</span>i<span class="hl opt">] +</span> eval_A<span class="hl opt">(</span>j<span class="hl opt">,</span> i<span class="hl opt">) *</span> u<span class="hl opt">[</span>j<span class="hl opt">];</span> loop2 <span class="hl opt">(</span>u<span class="hl opt">,</span> <span class="hl kwd">Au</span><span class="hl opt">,</span> i<span class="hl opt">,</span> j<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)</span>
       <span class="hl kwa">end</span>

     <span class="hl kwa">fun</span> loop1 <span class="hl opt">{</span>i<span class="hl opt">:</span>nat | i <span class="hl opt">&lt;=</span> <span class="hl kwd">N</span><span class="hl opt">} .&lt;</span><span class="hl kwd">N</span><span class="hl opt">-</span>i<span class="hl opt">&gt;.</span>
       <span class="hl opt">(</span>u<span class="hl opt">: &amp;</span>darray <span class="hl kwd">N</span><span class="hl opt">,</span> <span class="hl kwd">Au</span><span class="hl opt">: &amp;</span>darray <span class="hl kwd">N</span><span class="hl opt">,</span> i<span class="hl opt">:</span> <span class="hl kwb">int</span> i<span class="hl opt">):&lt;</span>cloptr1<span class="hl opt">&gt;</span> void <span class="hl opt">=</span>
       <span class="hl kwa">if</span> i <span class="hl opt">&lt;</span> <span class="hl kwd">N</span> <span class="hl kwa">then begin</span>
         <span class="hl kwd">Au</span><span class="hl opt">[</span>i<span class="hl opt">] :=</span> <span class="hl num">0.0</span><span class="hl opt">;</span> loop2 <span class="hl opt">(</span>u<span class="hl opt">,</span> <span class="hl kwd">Au</span><span class="hl opt">,</span> i<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">);</span> loop1 <span class="hl opt">(</span>u<span class="hl opt">,</span> <span class="hl kwd">Au</span><span class="hl opt">,</span> i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)</span>
       <span class="hl kwa">end</span>
  <span class="hl kwa">in</span>
     loop1 <span class="hl opt">(</span>u<span class="hl opt">,</span> <span class="hl kwd">Au</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">)</span>
  <span class="hl kwa">end</span>

fn eval_AtA_times_u <span class="hl opt">{</span><span class="hl kwd">N</span><span class="hl opt">:</span>nat<span class="hl opt">}</span>
  <span class="hl opt">(</span><span class="hl kwd">N</span><span class="hl opt">:</span> <span class="hl kwb">int</span> <span class="hl kwd">N</span><span class="hl opt">,</span> u<span class="hl opt">: &amp;</span>darray <span class="hl kwd">N</span><span class="hl opt">,</span> <span class="hl kwd">AtAu</span><span class="hl opt">: &amp;</span>darray <span class="hl kwd">N</span><span class="hl opt">):&lt;</span>cloptr1<span class="hl opt">&gt;</span> void <span class="hl opt">=</span>
  <span class="hl kwa">let</span>
     <span class="hl kwa">val</span> <span class="hl opt">(</span>pf | p_v<span class="hl opt">) =</span> darray_make <span class="hl opt">(</span><span class="hl kwd">N</span><span class="hl opt">,</span> <span class="hl num">0.0</span><span class="hl opt">)</span>
  <span class="hl kwa">in</span>
     eval_A_times_u<span class="hl opt">(</span><span class="hl kwd">N</span><span class="hl opt">,</span> u<span class="hl opt">, !</span>p_v<span class="hl opt">);</span>
     eval_At_times_u <span class="hl opt">(</span><span class="hl kwd">N</span><span class="hl opt">, !</span>p_v<span class="hl opt">,</span> <span class="hl kwd">AtAu</span><span class="hl opt">);</span>
     darray_free <span class="hl opt">(</span>pf | p_v<span class="hl opt">)</span>
  <span class="hl kwa">end</span>

<span class="hl slc">//</span>

<span class="hl ppc">#define TIMES 10</span>

<span class="hl kwa">implement</span> main <span class="hl opt">(</span>argc<span class="hl opt">,</span> argv<span class="hl opt">) =</span> <span class="hl kwa">let</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> assert_errmsg <span class="hl opt">(</span>argc <span class="hl opt">=</span> <span class="hl num">2</span><span class="hl opt">,</span> <span class="hl str">&quot;Exit: wrong command format!</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">)</span>
  <span class="hl kwa">val</span> <span class="hl opt">[</span><span class="hl kwd">N</span><span class="hl opt">:</span><span class="hl kwb">int</span><span class="hl opt">]</span> <span class="hl kwd">N</span> <span class="hl opt">=</span> int1_of_string argv<span class="hl opt">.[</span><span class="hl num">1</span><span class="hl opt">]</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> assert_errmsg <span class="hl opt">(</span>
    <span class="hl kwd">N</span> <span class="hl opt">&gt;=</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl str">&quot;The input integer needs to be a natural number.</span><span class="hl esc">\n</span><span class="hl str">&quot;</span>
  <span class="hl opt">)</span>
  <span class="hl kwa">val</span> <span class="hl opt">(</span>pf_u | p_u<span class="hl opt">) =</span> darray_make <span class="hl opt">(</span><span class="hl kwd">N</span><span class="hl opt">,</span> <span class="hl num">1.0</span><span class="hl opt">)</span>
  <span class="hl kwa">val</span> <span class="hl opt">(</span>pf_v | p_v<span class="hl opt">) =</span> darray_make <span class="hl opt">(</span><span class="hl kwd">N</span><span class="hl opt">,</span> <span class="hl num">0.0</span><span class="hl opt">)</span>
  <span class="hl kwa">fun</span> loop1 <span class="hl opt">{</span>i<span class="hl opt">:</span>nat | i <span class="hl opt">&lt;=</span> <span class="hl kwd">TIMES</span><span class="hl opt">} .&lt;</span><span class="hl kwd">TIMES</span><span class="hl opt">-</span>i<span class="hl opt">&gt;.</span>
    <span class="hl opt">(</span>u<span class="hl opt">: &amp;</span>darray <span class="hl kwd">N</span><span class="hl opt">,</span> v<span class="hl opt">: &amp;</span>darray <span class="hl kwd">N</span><span class="hl opt">,</span> i<span class="hl opt">:</span> <span class="hl kwb">int</span> i<span class="hl opt">):&lt;</span>cloptr1<span class="hl opt">&gt;</span> void <span class="hl opt">=</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>i <span class="hl opt">&lt;</span> <span class="hl kwd">TIMES</span><span class="hl opt">)</span> <span class="hl kwa">then begin</span>
      eval_AtA_times_u<span class="hl opt">(</span><span class="hl kwd">N</span><span class="hl opt">,</span> u<span class="hl opt">,</span> v<span class="hl opt">);</span> eval_AtA_times_u<span class="hl opt">(</span><span class="hl kwd">N</span><span class="hl opt">,</span> v<span class="hl opt">,</span> u<span class="hl opt">);</span> loop1 <span class="hl opt">(</span>u<span class="hl opt">,</span> v<span class="hl opt">,</span> i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)</span>
    <span class="hl kwa">end</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> loop1 <span class="hl opt">(!</span>p_u<span class="hl opt">, !</span>p_v<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">)</span>
  <span class="hl kwa">fun</span> loop2 <span class="hl opt">{</span>i<span class="hl opt">:</span>nat| i <span class="hl opt">&lt;=</span> <span class="hl kwd">N</span><span class="hl opt">} .&lt;</span><span class="hl kwd">N</span><span class="hl opt">-</span>i<span class="hl opt">&gt;.</span>
    <span class="hl opt">(</span>u<span class="hl opt">: &amp;</span>darray <span class="hl kwd">N</span><span class="hl opt">,</span> v<span class="hl opt">: &amp;</span>darray <span class="hl kwd">N</span><span class="hl opt">,</span>
     vBv<span class="hl opt">:</span> double<span class="hl opt">,</span> vv<span class="hl opt">:</span> double<span class="hl opt">,</span> i<span class="hl opt">:</span> <span class="hl kwb">int</span> i<span class="hl opt">):&lt;</span>cloptr1<span class="hl opt">&gt;</span> &#64;<span class="hl opt">(</span>double<span class="hl opt">,</span> double<span class="hl opt">) =</span>
    <span class="hl kwa">if</span> i <span class="hl opt">&lt;</span> <span class="hl kwd">N</span> <span class="hl kwa">then</span>
      <span class="hl kwa">let val</span> ui <span class="hl opt">=</span> u<span class="hl opt">[</span>i<span class="hl opt">]</span> <span class="hl kwa">and</span> vi <span class="hl opt">=</span> v<span class="hl opt">[</span>i<span class="hl opt">]</span> <span class="hl kwa">in</span>
        loop2 <span class="hl opt">(</span>u<span class="hl opt">,</span> v<span class="hl opt">,</span> vBv<span class="hl opt">+</span>ui<span class="hl opt">*</span>vi<span class="hl opt">,</span> vv<span class="hl opt">+</span>vi<span class="hl opt">*</span>vi<span class="hl opt">,</span> i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)</span>
      <span class="hl kwa">end</span>
    <span class="hl kwa">else</span> <span class="hl opt">(</span>vBv<span class="hl opt">,</span> vv<span class="hl opt">)</span>
  <span class="hl kwa">val</span> <span class="hl opt">(</span>vBv<span class="hl opt">,</span> vv<span class="hl opt">) =</span> loop2 <span class="hl opt">(!</span>p_u<span class="hl opt">, !</span>p_v<span class="hl opt">,</span> <span class="hl num">0.0</span><span class="hl opt">,</span> <span class="hl num">0.0</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">)</span>
  <span class="hl kwa">val</span> <span class="hl opt">() = (</span>darray_free <span class="hl opt">(</span>pf_u | p_u<span class="hl opt">);</span> darray_free <span class="hl opt">(</span>pf_v | p_v<span class="hl opt">))</span>
<span class="hl kwa">in</span>
  printf<span class="hl opt">(</span><span class="hl str">&quot;%0.9f</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> &#64;<span class="hl opt">(</span>$<span class="hl kwc">M</span><span class="hl opt">.</span>sqrt <span class="hl opt">(</span>vBv/vv<span class="hl opt">)))</span>
<span class="hl kwa">end</span> <span class="hl slc">// end of [main]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl com">(* end of [spectral-norm.dats] *)</span>
