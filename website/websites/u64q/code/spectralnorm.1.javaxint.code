<span class="hl com">/* </span>
<span class="hl com"> The Great Computer Language Shootout</span>
<span class="hl com"> http://shootout.alioth.debian.org/</span>
<span class="hl com"> </span>
<span class="hl com"> contributed by Java novice Jarkko Miettinen</span>
<span class="hl com"> modified ~3 lines of the original C#-version </span>
<span class="hl com"> by Isaac Gouy</span>
<span class="hl com"> */</span>
 
<span class="hl kwa">import</span> java<span class="hl sym">.</span>text<span class="hl sym">.</span><span class="hl kwc">DecimalFormat</span><span class="hl sym">;</span>
<span class="hl kwa">import</span> java<span class="hl sym">.</span>text<span class="hl sym">.</span><span class="hl kwc">NumberFormat</span><span class="hl sym">;</span> 

<span class="hl kwa">public class</span> spectralnorm
<span class="hl sym">{</span>
	
	<span class="hl kwa">private static final</span> <span class="hl kwc">NumberFormat</span> formatter <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">DecimalFormat</span><span class="hl sym">(</span><span class="hl str">&quot;#.000000000&quot;</span><span class="hl sym">);</span>
	
	<span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwc">String</span><span class="hl sym">[]</span> args<span class="hl sym">) {</span>
		<span class="hl kwb">int</span> n <span class="hl sym">=</span> <span class="hl num">100</span><span class="hl sym">;</span>
		<span class="hl kwa">if</span> <span class="hl sym">(</span>args<span class="hl sym">.</span>length <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">)</span> n <span class="hl sym">=</span> <span class="hl kwc">Integer</span><span class="hl sym">.</span><span class="hl kwd">parseInt</span><span class="hl sym">(</span>args<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]);</span>
		
		<span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">(</span>formatter<span class="hl sym">.</span><span class="hl kwd">format</span><span class="hl sym">(</span><span class="hl kwa">new</span> <span class="hl kwd">spectralnorm</span><span class="hl sym">().</span><span class="hl kwd">Approximate</span><span class="hl sym">(</span>n<span class="hl sym">)));</span>
	<span class="hl sym">}</span>
	
	<span class="hl kwa">private final</span> <span class="hl kwb">double</span> <span class="hl kwd">Approximate</span><span class="hl sym">(</span><span class="hl kwb">int</span> n<span class="hl sym">) {</span>
		<span class="hl slc">// create unit vector</span>
		<span class="hl kwb">double</span><span class="hl sym">[]</span> u <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwb">double</span><span class="hl sym">[</span>n<span class="hl sym">];</span>
		<span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> i<span class="hl sym">&lt;</span>n<span class="hl sym">;</span> i<span class="hl sym">++)</span> u<span class="hl sym">[</span>i<span class="hl sym">] =</span>  <span class="hl num">1</span><span class="hl sym">;</span>
		
		<span class="hl slc">// 20 steps of the power method</span>
		<span class="hl kwb">double</span><span class="hl sym">[]</span> v <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwb">double</span><span class="hl sym">[</span>n<span class="hl sym">];</span>
		<span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> i<span class="hl sym">&lt;</span>n<span class="hl sym">;</span> i<span class="hl sym">++)</span> v<span class="hl sym">[</span>i<span class="hl sym">] =</span> <span class="hl num">0</span><span class="hl sym">;</span>
		
		<span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> i<span class="hl sym">&lt;</span><span class="hl num">10</span><span class="hl sym">;</span> i<span class="hl sym">++) {</span>
			<span class="hl kwd">MultiplyAtAv</span><span class="hl sym">(</span>n<span class="hl sym">,</span>u<span class="hl sym">,</span>v<span class="hl sym">);</span>
			<span class="hl kwd">MultiplyAtAv</span><span class="hl sym">(</span>n<span class="hl sym">,</span>v<span class="hl sym">,</span>u<span class="hl sym">);</span>
		<span class="hl sym">}</span>
		
		<span class="hl slc">// B=AtA         A multiplied by A transposed</span>
		<span class="hl slc">// v.Bv /(v.v)   eigenvalue of v</span>
		<span class="hl kwb">double</span> vBv <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">,</span> vv <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
		<span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> i<span class="hl sym">&lt;</span>n<span class="hl sym">;</span> i<span class="hl sym">++) {</span>
			vBv <span class="hl sym">+=</span> u<span class="hl sym">[</span>i<span class="hl sym">]*</span>v<span class="hl sym">[</span>i<span class="hl sym">];</span>
			vv  <span class="hl sym">+=</span> v<span class="hl sym">[</span>i<span class="hl sym">]*</span>v<span class="hl sym">[</span>i<span class="hl sym">];</span>
		<span class="hl sym">}</span>
		
		<span class="hl kwa">return</span> <span class="hl kwc">Math</span><span class="hl sym">.</span><span class="hl kwd">sqrt</span><span class="hl sym">(</span>vBv<span class="hl sym">/</span>vv<span class="hl sym">);</span>
	<span class="hl sym">}</span>
	
	
	<span class="hl com">/* return element i,j of infinite matrix A */</span>
	<span class="hl kwa">private final</span> <span class="hl kwb">double</span> <span class="hl kwd">A</span><span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">,</span> <span class="hl kwb">int</span> j<span class="hl sym">){</span>
		<span class="hl kwa">return</span> <span class="hl num">1.0</span><span class="hl sym">/((</span>i<span class="hl sym">+</span>j<span class="hl sym">)*(</span>i<span class="hl sym">+</span>j<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)/</span><span class="hl num">2</span> <span class="hl sym">+</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">);</span>
	<span class="hl sym">}</span>
	
	<span class="hl com">/* multiply vector v by matrix A */</span>
	<span class="hl kwa">private final</span> <span class="hl kwb">void</span> <span class="hl kwd">MultiplyAv</span><span class="hl sym">(</span><span class="hl kwb">int</span> n<span class="hl sym">,</span> <span class="hl kwb">double</span><span class="hl sym">[]</span> v<span class="hl sym">,</span> <span class="hl kwb">double</span><span class="hl sym">[]</span> Av<span class="hl sym">){</span>
		<span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> i<span class="hl sym">&lt;</span>n<span class="hl sym">;</span> i<span class="hl sym">++){</span>
			Av<span class="hl sym">[</span>i<span class="hl sym">] =</span> <span class="hl num">0</span><span class="hl sym">;</span>
			<span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> j<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> j<span class="hl sym">&lt;</span>n<span class="hl sym">;</span> j<span class="hl sym">++)</span> Av<span class="hl sym">[</span>i<span class="hl sym">] +=</span> <span class="hl kwd">A</span><span class="hl sym">(</span>i<span class="hl sym">,</span>j<span class="hl sym">)*</span>v<span class="hl sym">[</span>j<span class="hl sym">];</span>
		<span class="hl sym">}</span>
	<span class="hl sym">}</span>
	
	<span class="hl com">/* multiply vector v by matrix A transposed */</span>
	<span class="hl kwa">private final</span> <span class="hl kwb">void</span> <span class="hl kwd">MultiplyAtv</span><span class="hl sym">(</span><span class="hl kwb">int</span> n<span class="hl sym">,</span> <span class="hl kwb">double</span><span class="hl sym">[]</span> v<span class="hl sym">,</span> <span class="hl kwb">double</span><span class="hl sym">[]</span> Atv<span class="hl sym">){</span>
		<span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span>i<span class="hl sym">&lt;</span>n<span class="hl sym">;</span>i<span class="hl sym">++){</span>
			Atv<span class="hl sym">[</span>i<span class="hl sym">] =</span> <span class="hl num">0</span><span class="hl sym">;</span>
			<span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> j<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> j<span class="hl sym">&lt;</span>n<span class="hl sym">;</span> j<span class="hl sym">++)</span> Atv<span class="hl sym">[</span>i<span class="hl sym">] +=</span> <span class="hl kwd">A</span><span class="hl sym">(</span>j<span class="hl sym">,</span>i<span class="hl sym">)*</span>v<span class="hl sym">[</span>j<span class="hl sym">];</span>
		<span class="hl sym">}</span>
	<span class="hl sym">}</span>
	
	<span class="hl com">/* multiply vector v by matrix A and then by matrix A transposed */</span>
	<span class="hl kwa">private final</span> <span class="hl kwb">void</span> <span class="hl kwd">MultiplyAtAv</span><span class="hl sym">(</span><span class="hl kwb">int</span> n<span class="hl sym">,</span> <span class="hl kwb">double</span><span class="hl sym">[]</span> v<span class="hl sym">,</span> <span class="hl kwb">double</span><span class="hl sym">[]</span> AtAv<span class="hl sym">){</span>
		<span class="hl kwb">double</span><span class="hl sym">[]</span> u <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwb">double</span><span class="hl sym">[</span>n<span class="hl sym">];</span>
		<span class="hl kwd">MultiplyAv</span><span class="hl sym">(</span>n<span class="hl sym">,</span>v<span class="hl sym">,</span>u<span class="hl sym">);</span>
		<span class="hl kwd">MultiplyAtv</span><span class="hl sym">(</span>n<span class="hl sym">,</span>u<span class="hl sym">,</span>AtAv<span class="hl sym">);</span>
	<span class="hl sym">}</span>
<span class="hl sym">}</span>
