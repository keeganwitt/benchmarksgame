<span class="hl com">/*</span>
<span class="hl com"> * The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> * contributed by Anthony Donnefort</span>
<span class="hl com"> * slightly modified to read 82 bytes at a time by Razii</span>
<span class="hl com"> */</span>

<span class="hl kwa">import</span> java<span class="hl sym">.</span>io<span class="hl sym">.*;</span>
<span class="hl kwa">public class</span> revcomp <span class="hl sym">{</span>
   <span class="hl kwa">static final</span> <span class="hl kwb">byte</span><span class="hl sym">[]</span> cmp <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwb">byte</span><span class="hl sym">[</span><span class="hl num">128</span><span class="hl sym">];</span>
   <span class="hl kwa">static</span> <span class="hl sym">{</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> cmp<span class="hl sym">.</span>length<span class="hl sym">;</span> i<span class="hl sym">++)</span> cmp<span class="hl sym">[</span>i<span class="hl sym">] = (</span><span class="hl kwb">byte</span><span class="hl sym">)</span> i<span class="hl sym">;</span>
      cmp<span class="hl sym">[</span><span class="hl str">'t'</span><span class="hl sym">] =</span> cmp<span class="hl sym">[</span><span class="hl str">'T'</span><span class="hl sym">] =</span> <span class="hl str">'A'</span><span class="hl sym">;</span>
      cmp<span class="hl sym">[</span><span class="hl str">'a'</span><span class="hl sym">] =</span> cmp<span class="hl sym">[</span><span class="hl str">'A'</span><span class="hl sym">] =</span> <span class="hl str">'T'</span><span class="hl sym">;</span>
      cmp<span class="hl sym">[</span><span class="hl str">'g'</span><span class="hl sym">] =</span> cmp<span class="hl sym">[</span><span class="hl str">'G'</span><span class="hl sym">] =</span> <span class="hl str">'C'</span><span class="hl sym">;</span>
      cmp<span class="hl sym">[</span><span class="hl str">'c'</span><span class="hl sym">] =</span> cmp<span class="hl sym">[</span><span class="hl str">'C'</span><span class="hl sym">] =</span> <span class="hl str">'G'</span><span class="hl sym">;</span>
      cmp<span class="hl sym">[</span><span class="hl str">'v'</span><span class="hl sym">] =</span> cmp<span class="hl sym">[</span><span class="hl str">'V'</span><span class="hl sym">] =</span> <span class="hl str">'B'</span><span class="hl sym">;</span>
      cmp<span class="hl sym">[</span><span class="hl str">'h'</span><span class="hl sym">] =</span> cmp<span class="hl sym">[</span><span class="hl str">'H'</span><span class="hl sym">] =</span> <span class="hl str">'D'</span><span class="hl sym">;</span>
      cmp<span class="hl sym">[</span><span class="hl str">'r'</span><span class="hl sym">] =</span> cmp<span class="hl sym">[</span><span class="hl str">'R'</span><span class="hl sym">] =</span> <span class="hl str">'Y'</span><span class="hl sym">;</span>
      cmp<span class="hl sym">[</span><span class="hl str">'m'</span><span class="hl sym">] =</span> cmp<span class="hl sym">[</span><span class="hl str">'M'</span><span class="hl sym">] =</span> <span class="hl str">'K'</span><span class="hl sym">;</span>
      cmp<span class="hl sym">[</span><span class="hl str">'y'</span><span class="hl sym">] =</span> cmp<span class="hl sym">[</span><span class="hl str">'Y'</span><span class="hl sym">] =</span> <span class="hl str">'R'</span><span class="hl sym">;</span>
      cmp<span class="hl sym">[</span><span class="hl str">'k'</span><span class="hl sym">] =</span> cmp<span class="hl sym">[</span><span class="hl str">'K'</span><span class="hl sym">] =</span> <span class="hl str">'M'</span><span class="hl sym">;</span>
      cmp<span class="hl sym">[</span><span class="hl str">'b'</span><span class="hl sym">] =</span> cmp<span class="hl sym">[</span><span class="hl str">'B'</span><span class="hl sym">] =</span> <span class="hl str">'V'</span><span class="hl sym">;</span>
      cmp<span class="hl sym">[</span><span class="hl str">'d'</span><span class="hl sym">] =</span> cmp<span class="hl sym">[</span><span class="hl str">'D'</span><span class="hl sym">] =</span> <span class="hl str">'H'</span><span class="hl sym">;</span>
      cmp<span class="hl sym">[</span><span class="hl str">'u'</span><span class="hl sym">] =</span> cmp<span class="hl sym">[</span><span class="hl str">'U'</span><span class="hl sym">] =</span> <span class="hl str">'A'</span><span class="hl sym">;</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">static class</span> ReversibleByteArray <span class="hl kwa">extends</span> java<span class="hl sym">.</span>io<span class="hl sym">.</span><span class="hl kwc">ByteArrayOutputStream</span> <span class="hl sym">{</span>
      <span class="hl kwb">void</span> <span class="hl kwd">reverse</span><span class="hl sym">()</span> <span class="hl kwa">throws</span> <span class="hl kwc">Exception</span> <span class="hl sym">{</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span>count <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">) {</span>
            <span class="hl kwb">int</span> begin <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">,</span> end <span class="hl sym">=</span> count <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">;</span>
            <span class="hl kwa">while</span> <span class="hl sym">(</span>buf<span class="hl sym">[</span>begin<span class="hl sym">++] !=</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl sym">);</span>
            <span class="hl kwa">while</span> <span class="hl sym">(</span>begin <span class="hl sym">&lt;=</span> end<span class="hl sym">) {</span>
               <span class="hl kwa">if</span> <span class="hl sym">(</span>buf<span class="hl sym">[</span>begin<span class="hl sym">] ==</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl sym">)</span> begin<span class="hl sym">++;</span>
               <span class="hl kwa">if</span> <span class="hl sym">(</span>buf<span class="hl sym">[</span>end<span class="hl sym">] ==</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl sym">)</span> end<span class="hl sym">--;</span>
               <span class="hl kwa">if</span> <span class="hl sym">(</span>begin <span class="hl sym">&lt;=</span> end<span class="hl sym">) {</span>
                  <span class="hl kwb">byte</span> tmp <span class="hl sym">=</span> buf<span class="hl sym">[</span>begin<span class="hl sym">];</span>
                  buf<span class="hl sym">[</span>begin<span class="hl sym">++] =</span> cmp<span class="hl sym">[</span>buf<span class="hl sym">[</span>end<span class="hl sym">]];</span>
                  buf<span class="hl sym">[</span>end<span class="hl sym">--] =</span> cmp<span class="hl sym">[</span>tmp<span class="hl sym">];</span>
               <span class="hl sym">}</span>
            <span class="hl sym">}</span>
            <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">write</span><span class="hl sym">(</span>buf<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> count<span class="hl sym">);</span>
         <span class="hl sym">}</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwc">String</span><span class="hl sym">[]</span> args<span class="hl sym">)</span> <span class="hl kwa">throws</span> <span class="hl kwc">Exception</span> <span class="hl sym">{</span>
      <span class="hl kwb">byte</span><span class="hl sym">[]</span> line <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwb">byte</span><span class="hl sym">[</span><span class="hl num">82</span><span class="hl sym">];</span>
      <span class="hl kwb">int</span> read<span class="hl sym">;</span>
      ReversibleByteArray buf <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">ReversibleByteArray</span><span class="hl sym">();</span>
      <span class="hl kwa">while</span> <span class="hl sym">((</span>read <span class="hl sym">=</span> <span class="hl kwc">System</span><span class="hl sym">.</span><span class="hl kwa">in</span><span class="hl sym">.</span><span class="hl kwd">read</span><span class="hl sym">(</span>line<span class="hl sym">)) != -</span><span class="hl num">1</span><span class="hl sym">) {</span>
         <span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">,</span> last <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
         <span class="hl kwa">while</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;</span> read<span class="hl sym">) {</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>line<span class="hl sym">[</span>i<span class="hl sym">] ==</span> <span class="hl str">'&gt;'</span><span class="hl sym">) {</span>
               buf<span class="hl sym">.</span><span class="hl kwd">write</span><span class="hl sym">(</span>line<span class="hl sym">,</span> last<span class="hl sym">,</span> i <span class="hl sym">-</span> last<span class="hl sym">);</span>
               buf<span class="hl sym">.</span><span class="hl kwd">reverse</span><span class="hl sym">();</span>
               buf<span class="hl sym">.</span><span class="hl kwd">reset</span><span class="hl sym">();</span>
               last <span class="hl sym">=</span> i<span class="hl sym">;</span>
            <span class="hl sym">}</span>
            i<span class="hl sym">++;</span>
         <span class="hl sym">}</span>
         buf<span class="hl sym">.</span><span class="hl kwd">write</span><span class="hl sym">(</span>line<span class="hl sym">,</span> last<span class="hl sym">,</span> read <span class="hl sym">-</span> last<span class="hl sym">);</span>
      <span class="hl sym">}</span>
      buf<span class="hl sym">.</span><span class="hl kwd">reverse</span><span class="hl sym">();</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>

  
