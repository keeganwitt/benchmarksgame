<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by Greg Buchholz</span>
<span class="hl com">   </span>
<span class="hl com">   for the debian (AMD) machine...</span>
<span class="hl com">   compile flags:  -O3 -ffast-math -march=athlon-xp -funroll-loops</span>
<span class="hl com"></span>
<span class="hl com">   for the gp4 (Intel) machine...</span>
<span class="hl com">   compile flags:  -O3 -ffast-math -march=pentium4 -funroll-loops</span>
<span class="hl com">*/</span>

<span class="hl ppc">#include&lt;stdio.h&gt;</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span> <span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span> <span class="hl opt">**</span>argv<span class="hl opt">)</span>
<span class="hl opt">{</span>
    <span class="hl kwb">int</span> w<span class="hl opt">,</span> h<span class="hl opt">,</span> bit_num <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwb">char</span> byte_acc <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwb">int</span> i<span class="hl opt">,</span> iter <span class="hl opt">=</span> <span class="hl num">50</span><span class="hl opt">;</span>
    <span class="hl kwb">double</span> x<span class="hl opt">,</span> y<span class="hl opt">,</span> limit <span class="hl opt">=</span> <span class="hl num">2.0</span><span class="hl opt">;</span>
    <span class="hl kwb">double</span> Zr<span class="hl opt">,</span> Zi<span class="hl opt">,</span> Cr<span class="hl opt">,</span> Ci<span class="hl opt">,</span> Tr<span class="hl opt">,</span> Ti<span class="hl opt">;</span>
    
    w <span class="hl opt">=</span> h <span class="hl opt">=</span> <span class="hl kwd">atoi</span><span class="hl opt">(</span>argv<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">]);</span>

    <span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;P4</span><span class="hl esc">\n</span><span class="hl str">%d %d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span>w<span class="hl opt">,</span>h<span class="hl opt">);</span>

    <span class="hl kwa">for</span><span class="hl opt">(</span>y<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span>y<span class="hl opt">&lt;</span>h<span class="hl opt">;++</span>y<span class="hl opt">)</span> 
    <span class="hl opt">{</span>
        <span class="hl kwa">for</span><span class="hl opt">(</span>x<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span>x<span class="hl opt">&lt;</span>w<span class="hl opt">;++</span>x<span class="hl opt">)</span>
        <span class="hl opt">{</span>
            Zr <span class="hl opt">=</span> Zi <span class="hl opt">=</span> Tr <span class="hl opt">=</span> Ti <span class="hl opt">=</span> <span class="hl num">0.0</span><span class="hl opt">;</span>
            Cr <span class="hl opt">= (</span><span class="hl num">2.0</span><span class="hl opt">*</span>x<span class="hl opt">/</span>w <span class="hl opt">-</span> <span class="hl num">1.5</span><span class="hl opt">);</span> Ci<span class="hl opt">=(</span><span class="hl num">2.0</span><span class="hl opt">*</span>y<span class="hl opt">/</span>h <span class="hl opt">-</span> <span class="hl num">1.0</span><span class="hl opt">);</span>
        
            <span class="hl kwa">for</span> <span class="hl opt">(</span>i<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span>i<span class="hl opt">&lt;</span>iter <span class="hl opt">&amp;&amp; (</span>Tr<span class="hl opt">+</span>Ti <span class="hl opt">&lt;=</span> limit<span class="hl opt">*</span>limit<span class="hl opt">);++</span>i<span class="hl opt">)</span>
            <span class="hl opt">{</span>
                Zi <span class="hl opt">=</span> <span class="hl num">2.0</span><span class="hl opt">*</span>Zr<span class="hl opt">*</span>Zi <span class="hl opt">+</span> Ci<span class="hl opt">;</span>
                Zr <span class="hl opt">=</span> Tr <span class="hl opt">-</span> Ti <span class="hl opt">+</span> Cr<span class="hl opt">;</span>
                Tr <span class="hl opt">=</span> Zr <span class="hl opt">*</span> Zr<span class="hl opt">;</span>
                Ti <span class="hl opt">=</span> Zi <span class="hl opt">*</span> Zi<span class="hl opt">;</span>
            <span class="hl opt">}</span>
       
            byte_acc <span class="hl opt">&lt;&lt;=</span> <span class="hl num">1</span><span class="hl opt">;</span> 
            <span class="hl kwa">if</span><span class="hl opt">(</span>Tr<span class="hl opt">+</span>Ti <span class="hl opt">&lt;=</span> limit<span class="hl opt">*</span>limit<span class="hl opt">)</span> byte_acc <span class="hl opt">|=</span> <span class="hl num">0x01</span><span class="hl opt">;</span>
                
            <span class="hl opt">++</span>bit_num<span class="hl opt">;</span> 

            <span class="hl kwa">if</span><span class="hl opt">(</span>bit_num <span class="hl opt">==</span> <span class="hl num">8</span><span class="hl opt">)</span>
            <span class="hl opt">{</span>
                <span class="hl kwd">putc</span><span class="hl opt">(</span>byte_acc<span class="hl opt">,</span>stdout<span class="hl opt">);</span>
                byte_acc <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
                bit_num <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
            <span class="hl opt">}</span>
            <span class="hl kwa">else if</span><span class="hl opt">(</span>x <span class="hl opt">==</span> w<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">)</span>
            <span class="hl opt">{</span>
                byte_acc <span class="hl opt">&lt;&lt;= (</span><span class="hl num">8</span><span class="hl opt">-</span>w<span class="hl opt">%</span><span class="hl num">8</span><span class="hl opt">);</span>
                <span class="hl kwd">putc</span><span class="hl opt">(</span>byte_acc<span class="hl opt">,</span>stdout<span class="hl opt">);</span>
                byte_acc <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
                bit_num <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
            <span class="hl opt">}</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span>	
<span class="hl opt">}</span>

