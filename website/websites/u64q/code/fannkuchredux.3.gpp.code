<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by Branimir Maksimovic</span>
<span class="hl com">*/</span>
<span class="hl ppc">#include &lt;cstdlib&gt;</span>
<span class="hl ppc">#include &lt;cstdio&gt;</span>
<span class="hl ppc">#include &lt;algorithm&gt;</span>

<span class="hl kwc">typedef</span> <span class="hl kwb">unsigned char</span> int_t<span class="hl opt">;</span>

<span class="hl kwb">void</span> <span class="hl kwd">rotate</span><span class="hl opt">(</span>int_t<span class="hl opt">*</span> p<span class="hl opt">,</span> <span class="hl kwb">int</span> n<span class="hl opt">)</span>
<span class="hl opt">{</span>
   int_t tmp <span class="hl opt">=</span> p<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">];</span>
   <span class="hl kwa">for</span><span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> n<span class="hl opt">; ++</span>i<span class="hl opt">)</span>p<span class="hl opt">[</span>i<span class="hl opt">]=</span>p<span class="hl opt">[</span>i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">];</span>
   p<span class="hl opt">[</span>n<span class="hl opt">] =</span> tmp<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwb">bool</span> <span class="hl kwd">next_permutation</span><span class="hl opt">(</span>int_t<span class="hl opt">*</span> beg<span class="hl opt">,</span> <span class="hl kwb">int</span> n<span class="hl opt">,</span> int_t<span class="hl opt">*</span> c<span class="hl opt">)</span>
<span class="hl opt">{</span>
   <span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span>
   <span class="hl kwa">while</span><span class="hl opt">(</span>i<span class="hl opt">&lt;</span>n<span class="hl opt">)</span>
   <span class="hl opt">{</span>
      <span class="hl kwd">rotate</span><span class="hl opt">(</span>beg<span class="hl opt">,</span>i<span class="hl opt">);</span>
      <span class="hl kwa">if</span><span class="hl opt">(</span>c<span class="hl opt">[</span>i<span class="hl opt">]&gt;=</span>i<span class="hl opt">)</span>c<span class="hl opt">[</span>i<span class="hl opt">++]=</span><span class="hl num">0</span><span class="hl opt">;</span>
      <span class="hl kwa">else break</span><span class="hl opt">;</span>
   <span class="hl opt">}</span>
   <span class="hl kwa">if</span><span class="hl opt">(</span>i<span class="hl opt">&gt;=</span>n<span class="hl opt">)</span><span class="hl kwa">return false</span><span class="hl opt">;</span>
   <span class="hl opt">++</span>c<span class="hl opt">[</span>i<span class="hl opt">];</span>
   <span class="hl kwa">return true</span><span class="hl opt">;</span>
<span class="hl opt">}</span>


<span class="hl kwb">struct</span> Result<span class="hl opt">{</span>
   <span class="hl kwb">int</span> checksum<span class="hl opt">;</span>
   <span class="hl kwb">int</span> maxflips<span class="hl opt">;</span>
<span class="hl opt">};</span>

Result <span class="hl kwd">fannkuch</span><span class="hl opt">(</span><span class="hl kwb">int</span> n<span class="hl opt">)</span>
<span class="hl opt">{</span>
   Result tmp <span class="hl opt">= {</span><span class="hl num">0</span><span class="hl opt">};</span>
   <span class="hl kwb">int</span> i<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">,</span>permcount<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span>
   int_t perm<span class="hl opt">[</span><span class="hl num">16</span><span class="hl opt">],</span>tperm<span class="hl opt">[</span><span class="hl num">16</span><span class="hl opt">],</span>cnt<span class="hl opt">[</span><span class="hl num">16</span><span class="hl opt">]={</span><span class="hl num">0</span><span class="hl opt">};</span>
   
   std<span class="hl opt">::</span><span class="hl kwd">generate</span><span class="hl opt">(</span>perm<span class="hl opt">,</span>perm<span class="hl opt">+</span>n<span class="hl opt">,[&amp;</span>i<span class="hl opt">](){</span> <span class="hl kwa">return</span> <span class="hl opt">++</span>i<span class="hl opt">; });</span>
   
   <span class="hl kwa">do</span>
   <span class="hl opt">{</span>
      std<span class="hl opt">::</span><span class="hl kwd">copy</span><span class="hl opt">(</span>perm<span class="hl opt">,</span>perm<span class="hl opt">+</span>n<span class="hl opt">,</span>tperm<span class="hl opt">);</span>
      <span class="hl kwb">int</span> flips <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
      <span class="hl kwa">while</span><span class="hl opt">(</span>tperm<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] !=</span> <span class="hl num">1</span><span class="hl opt">)</span>
      <span class="hl opt">{</span>
         std<span class="hl opt">::</span><span class="hl kwd">reverse</span><span class="hl opt">(</span>tperm<span class="hl opt">,</span>tperm<span class="hl opt">+</span>tperm<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">]);</span>
         <span class="hl opt">++</span>flips<span class="hl opt">;</span>
      <span class="hl opt">}</span>
      tmp<span class="hl opt">.</span>checksum <span class="hl opt">+= (</span>permcount<span class="hl opt">%</span><span class="hl num">2</span> <span class="hl opt">==</span> <span class="hl num">0</span><span class="hl opt">)</span>?flips<span class="hl opt">:-</span>flips<span class="hl opt">;</span>
      tmp<span class="hl opt">.</span>maxflips <span class="hl opt">=</span> std<span class="hl opt">::</span><span class="hl kwd">max</span><span class="hl opt">(</span>tmp<span class="hl opt">.</span>maxflips<span class="hl opt">,</span>flips<span class="hl opt">);</span>
   <span class="hl opt">}</span><span class="hl kwa">while</span><span class="hl opt">(++</span>permcount<span class="hl opt">,</span><span class="hl kwd">next_permutation</span><span class="hl opt">(</span>perm<span class="hl opt">,</span>n<span class="hl opt">,</span>cnt<span class="hl opt">));</span>

   <span class="hl kwa">return</span> tmp<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span><span class="hl opt">**</span> argv<span class="hl opt">)</span>
<span class="hl opt">{</span>
   <span class="hl kwb">int</span> n <span class="hl opt">=</span> <span class="hl num">7</span><span class="hl opt">;</span>
   <span class="hl kwa">if</span><span class="hl opt">(</span>argc <span class="hl opt">&gt;</span> <span class="hl num">1</span><span class="hl opt">)</span>n <span class="hl opt">=</span> <span class="hl kwd">atoi</span><span class="hl opt">(</span>argv<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">]);</span>
   <span class="hl kwa">if</span><span class="hl opt">(</span>n <span class="hl opt">&lt;</span> <span class="hl num">3</span> <span class="hl opt">||</span> n <span class="hl opt">&gt;</span> <span class="hl num">16</span><span class="hl opt">)</span>
   <span class="hl opt">{</span>
      <span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;n should be between [3 and 16]</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">);</span>
      <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
   <span class="hl opt">}</span>
   Result r <span class="hl opt">=</span> <span class="hl kwd">fannkuch</span><span class="hl opt">(</span>n<span class="hl opt">);</span>
   <span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;%d</span><span class="hl esc">\n</span><span class="hl str">Pfannkuchen(%d) = %d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span>r<span class="hl opt">.</span>checksum<span class="hl opt">,</span>n<span class="hl opt">,</span>r<span class="hl opt">.</span>maxflips<span class="hl opt">);</span>
<span class="hl opt">}</span>
