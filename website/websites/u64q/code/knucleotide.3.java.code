<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com"> http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com"> contributed by James McIlree</span>
<span class="hl com"> ByteString code thanks to Matthieu Bentot and The Anh Tran</span>
<span class="hl com"> modified by Andy Fingerhut </span>
<span class="hl com"> */</span>

<span class="hl kwa">import</span> java<span class="hl opt">.</span>util<span class="hl opt">.*;</span>
<span class="hl kwa">import</span> java<span class="hl opt">.</span>io<span class="hl opt">.*;</span>
<span class="hl kwa">import</span> java<span class="hl opt">.</span>util<span class="hl opt">.</span>concurrent<span class="hl opt">.*;</span>

<span class="hl kwa">public class</span> knucleotide <span class="hl opt">{</span>
    <span class="hl kwa">static</span> ArrayList<span class="hl opt">&lt;</span>Callable<span class="hl opt">&lt;</span> Map<span class="hl opt">&lt;</span>ByteString<span class="hl opt">,</span> ByteString<span class="hl opt">&gt; &gt; &gt;</span> <span class="hl kwd">createFragmentTasks</span><span class="hl opt">(</span><span class="hl kwa">final</span> <span class="hl kwb">byte</span><span class="hl opt">[]</span> sequence<span class="hl opt">,</span> <span class="hl kwb">int</span><span class="hl opt">[]</span> fragmentLengths<span class="hl opt">) {</span>
	ArrayList<span class="hl opt">&lt;</span>Callable<span class="hl opt">&lt;</span>Map<span class="hl opt">&lt;</span>ByteString<span class="hl opt">,</span> ByteString<span class="hl opt">&gt;&gt;&gt;</span> tasks <span class="hl opt">=</span> <span class="hl kwa">new</span> ArrayList<span class="hl opt">&lt;</span>Callable<span class="hl opt">&lt;</span>Map<span class="hl opt">&lt;</span>ByteString<span class="hl opt">,</span> ByteString<span class="hl opt">&gt;&gt;&gt;();</span>
	<span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> fragmentLength <span class="hl opt">:</span> fragmentLengths<span class="hl opt">) {</span>
	    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> index<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span> index<span class="hl opt">&lt;</span>fragmentLength<span class="hl opt">;</span> index<span class="hl opt">++) {</span>
		<span class="hl kwa">final</span> <span class="hl kwb">int</span> offset <span class="hl opt">=</span> index<span class="hl opt">;</span>
		<span class="hl kwa">final</span> <span class="hl kwb">int</span> finalFragmentLength <span class="hl opt">=</span> fragmentLength<span class="hl opt">;</span>
		tasks<span class="hl opt">.</span><span class="hl kwd">add</span><span class="hl opt">(</span><span class="hl kwa">new</span> Callable<span class="hl opt">&lt;</span>Map<span class="hl opt">&lt;</span>ByteString<span class="hl opt">,</span> ByteString<span class="hl opt">&gt;&gt;() {</span>
		    <span class="hl kwa">public</span> Map<span class="hl opt">&lt;</span>ByteString<span class="hl opt">,</span> ByteString<span class="hl opt">&gt;</span> <span class="hl kwd">call</span><span class="hl opt">() {</span>
			<span class="hl kwa">return</span> <span class="hl kwd">createFragmentMap</span><span class="hl opt">(</span>sequence<span class="hl opt">,</span> offset<span class="hl opt">,</span> finalFragmentLength<span class="hl opt">);</span>
		    <span class="hl opt">}</span>
		<span class="hl opt">});</span>
	    <span class="hl opt">}</span>
	<span class="hl opt">}</span>
	<span class="hl kwa">return</span> tasks<span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">static</span> Map<span class="hl opt">&lt;</span>ByteString<span class="hl opt">,</span> ByteString<span class="hl opt">&gt;</span> <span class="hl kwd">createFragmentMap</span><span class="hl opt">(</span><span class="hl kwb">byte</span><span class="hl opt">[]</span> sequence<span class="hl opt">,</span> <span class="hl kwb">int</span> offset<span class="hl opt">,</span> <span class="hl kwb">int</span> fragmentLength<span class="hl opt">) {</span>
	HashMap<span class="hl opt">&lt;</span>ByteString<span class="hl opt">,</span> ByteString<span class="hl opt">&gt;</span> map <span class="hl opt">=</span> <span class="hl kwa">new</span> HashMap<span class="hl opt">&lt;</span>ByteString<span class="hl opt">,</span> ByteString<span class="hl opt">&gt;();</span>
	<span class="hl kwb">int</span> lastIndex <span class="hl opt">=</span> sequence<span class="hl opt">.</span>length <span class="hl opt">-</span> fragmentLength <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span>
	ByteString key <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">ByteString</span><span class="hl opt">(</span>fragmentLength<span class="hl opt">);</span>
	<span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> index<span class="hl opt">=</span>offset<span class="hl opt">;</span> index<span class="hl opt">&lt;</span>lastIndex<span class="hl opt">;</span> index<span class="hl opt">+=</span>fragmentLength<span class="hl opt">) {</span>
	    key<span class="hl opt">.</span><span class="hl kwd">calculateHash</span><span class="hl opt">(</span>sequence<span class="hl opt">,</span> index<span class="hl opt">);</span>
	    ByteString fragment <span class="hl opt">=</span> map<span class="hl opt">.</span><span class="hl kwd">get</span><span class="hl opt">(</span>key<span class="hl opt">);</span>
	    <span class="hl kwa">if</span> <span class="hl opt">(</span>fragment <span class="hl opt">!=</span> null<span class="hl opt">) {</span>
		fragment<span class="hl opt">.</span>count<span class="hl opt">++;</span>
	    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
		map<span class="hl opt">.</span><span class="hl kwd">put</span><span class="hl opt">(</span>key<span class="hl opt">,</span> key<span class="hl opt">);</span>
		key <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">ByteString</span><span class="hl opt">(</span>fragmentLength<span class="hl opt">);</span>
	    <span class="hl opt">}</span>
	<span class="hl opt">}</span>

	<span class="hl kwa">return</span> map<span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl slc">// Destructive!</span>
    <span class="hl kwa">static</span> Map<span class="hl opt">&lt;</span>ByteString<span class="hl opt">,</span> ByteString<span class="hl opt">&gt;</span> <span class="hl kwd">sumTwoMaps</span><span class="hl opt">(</span>Map<span class="hl opt">&lt;</span>ByteString<span class="hl opt">,</span> ByteString<span class="hl opt">&gt;</span> map1<span class="hl opt">,</span> Map<span class="hl opt">&lt;</span>ByteString<span class="hl opt">,</span> ByteString<span class="hl opt">&gt;</span> map2<span class="hl opt">) {</span>
	<span class="hl kwa">for</span> <span class="hl opt">(</span>Map<span class="hl opt">.</span>Entry<span class="hl opt">&lt;</span>ByteString<span class="hl opt">,</span> ByteString<span class="hl opt">&gt;</span> entry <span class="hl opt">:</span> map2<span class="hl opt">.</span><span class="hl kwd">entrySet</span><span class="hl opt">()) {</span>
	    ByteString sum <span class="hl opt">=</span> map1<span class="hl opt">.</span><span class="hl kwd">get</span><span class="hl opt">(</span>entry<span class="hl opt">.</span><span class="hl kwd">getKey</span><span class="hl opt">());</span>
	    <span class="hl kwa">if</span> <span class="hl opt">(</span>sum <span class="hl opt">!=</span> null<span class="hl opt">)</span>
		sum<span class="hl opt">.</span>count <span class="hl opt">+=</span> entry<span class="hl opt">.</span><span class="hl kwd">getValue</span><span class="hl opt">().</span>count<span class="hl opt">;</span>
	    <span class="hl kwa">else</span>
		map1<span class="hl opt">.</span><span class="hl kwd">put</span><span class="hl opt">(</span>entry<span class="hl opt">.</span><span class="hl kwd">getKey</span><span class="hl opt">(),</span> entry<span class="hl opt">.</span><span class="hl kwd">getValue</span><span class="hl opt">());</span>
	<span class="hl opt">}</span>
	<span class="hl kwa">return</span> map1<span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">static</span> String <span class="hl kwd">writeFrequencies</span><span class="hl opt">(</span><span class="hl kwb">float</span> totalCount<span class="hl opt">,</span> Map<span class="hl opt">&lt;</span>ByteString<span class="hl opt">,</span> ByteString<span class="hl opt">&gt;</span> frequencies<span class="hl opt">) {</span>
	SortedSet<span class="hl opt">&lt;</span>ByteString<span class="hl opt">&gt;</span> list <span class="hl opt">=</span> <span class="hl kwa">new</span> TreeSet<span class="hl opt">&lt;</span>ByteString<span class="hl opt">&gt;(</span>frequencies<span class="hl opt">.</span><span class="hl kwd">values</span><span class="hl opt">());</span>
	StringBuilder sb <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">StringBuilder</span><span class="hl opt">();</span>
	<span class="hl kwa">for</span> <span class="hl opt">(</span>ByteString k <span class="hl opt">:</span> list<span class="hl opt">)</span>
	    sb<span class="hl opt">.</span><span class="hl kwd">append</span><span class="hl opt">(</span>String<span class="hl opt">.</span><span class="hl kwd">format</span><span class="hl opt">(</span><span class="hl str">&quot;%s %.3f</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> k<span class="hl opt">.</span><span class="hl kwd">toString</span><span class="hl opt">().</span><span class="hl kwd">toUpperCase</span><span class="hl opt">(), (</span><span class="hl kwb">float</span><span class="hl opt">)(</span>k<span class="hl opt">.</span>count<span class="hl opt">) *</span> <span class="hl num">100.0</span>f <span class="hl opt">/</span> totalCount<span class="hl opt">));</span>

	<span class="hl kwa">return</span> sb<span class="hl opt">.</span><span class="hl kwd">append</span><span class="hl opt">(</span><span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl opt">).</span><span class="hl kwd">toString</span><span class="hl opt">();</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">static</span> String <span class="hl kwd">writeCount</span><span class="hl opt">(</span>List<span class="hl opt">&lt;</span>Future<span class="hl opt">&lt;</span>Map<span class="hl opt">&lt;</span>ByteString<span class="hl opt">,</span> ByteString<span class="hl opt">&gt;&gt;&gt;</span> futures<span class="hl opt">,</span> String nucleotideFragment<span class="hl opt">)</span> <span class="hl kwa">throws</span> Exception <span class="hl opt">{</span>
	ByteString key <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">ByteString</span><span class="hl opt">(</span>nucleotideFragment<span class="hl opt">.</span><span class="hl kwd">length</span><span class="hl opt">());</span>
	key<span class="hl opt">.</span><span class="hl kwd">calculateHash</span><span class="hl opt">(</span>nucleotideFragment<span class="hl opt">.</span><span class="hl kwd">getBytes</span><span class="hl opt">(),</span> <span class="hl num">0</span><span class="hl opt">);</span>

	<span class="hl kwb">int</span> count <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
	<span class="hl kwa">for</span> <span class="hl opt">(</span>Future<span class="hl opt">&lt;</span>Map<span class="hl opt">&lt;</span>ByteString<span class="hl opt">,</span> ByteString<span class="hl opt">&gt;&gt;</span> future <span class="hl opt">:</span> futures<span class="hl opt">) {</span>
	    ByteString temp <span class="hl opt">=</span> future<span class="hl opt">.</span><span class="hl kwd">get</span><span class="hl opt">().</span><span class="hl kwd">get</span><span class="hl opt">(</span>key<span class="hl opt">);</span>
	    <span class="hl kwa">if</span> <span class="hl opt">(</span>temp <span class="hl opt">!=</span> null<span class="hl opt">)</span> count <span class="hl opt">+=</span> temp<span class="hl opt">.</span>count<span class="hl opt">;</span>
	<span class="hl opt">}</span>

	<span class="hl kwa">return</span> count <span class="hl opt">+</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span><span class="hl str">&quot;</span> <span class="hl opt">+</span> nucleotideFragment<span class="hl opt">.</span><span class="hl kwd">toUpperCase</span><span class="hl opt">() +</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">main</span> <span class="hl opt">(</span>String<span class="hl opt">[]</span> args<span class="hl opt">)</span> <span class="hl kwa">throws</span> Exception <span class="hl opt">{</span>
	String line<span class="hl opt">;</span>
	BufferedReader <span class="hl kwa">in</span> <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">BufferedReader</span><span class="hl opt">(</span><span class="hl kwa">new</span> <span class="hl kwd">InputStreamReader</span><span class="hl opt">(</span>System<span class="hl opt">.</span><span class="hl kwa">in</span><span class="hl opt">));</span>
	<span class="hl kwa">while</span> <span class="hl opt">((</span>line <span class="hl opt">=</span> <span class="hl kwa">in</span><span class="hl opt">.</span><span class="hl kwd">readLine</span><span class="hl opt">()) !=</span> null<span class="hl opt">) {</span>
	    <span class="hl kwa">if</span> <span class="hl opt">(</span>line<span class="hl opt">.</span><span class="hl kwd">startsWith</span><span class="hl opt">(</span><span class="hl str">&quot;&gt;THREE&quot;</span><span class="hl opt">))</span> <span class="hl kwa">break</span><span class="hl opt">;</span>
	<span class="hl opt">}</span>

	ByteArrayOutputStream baos <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">ByteArrayOutputStream</span><span class="hl opt">();</span>
        <span class="hl kwb">byte</span> bytes<span class="hl opt">[] =</span> <span class="hl kwa">new</span> <span class="hl kwb">byte</span><span class="hl opt">[</span><span class="hl num">100</span><span class="hl opt">];</span>
        <span class="hl kwa">while</span><span class="hl opt">((</span>line <span class="hl opt">=</span> <span class="hl kwa">in</span><span class="hl opt">.</span><span class="hl kwd">readLine</span><span class="hl opt">()) !=</span> null<span class="hl opt">) {</span>
	    <span class="hl kwa">if</span> <span class="hl opt">(</span>line<span class="hl opt">.</span><span class="hl kwd">length</span><span class="hl opt">() &gt;</span> bytes<span class="hl opt">.</span>length<span class="hl opt">)</span>
		bytes <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwb">byte</span><span class="hl opt">[</span>line<span class="hl opt">.</span><span class="hl kwd">length</span><span class="hl opt">()];</span>

	    <span class="hl kwb">int</span> i<span class="hl opt">;</span>
	    <span class="hl kwa">for</span><span class="hl opt">(</span>i<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span> i<span class="hl opt">&lt;</span>line<span class="hl opt">.</span><span class="hl kwd">length</span><span class="hl opt">();</span> i<span class="hl opt">++)</span>
		bytes<span class="hl opt">[</span>i<span class="hl opt">] = (</span><span class="hl kwb">byte</span><span class="hl opt">)</span>line<span class="hl opt">.</span><span class="hl kwd">charAt</span><span class="hl opt">(</span>i<span class="hl opt">);</span>
	    baos<span class="hl opt">.</span><span class="hl kwd">write</span><span class="hl opt">(</span>bytes<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> i<span class="hl opt">);</span>
        <span class="hl opt">}</span>

	<span class="hl kwb">byte</span><span class="hl opt">[]</span> sequence <span class="hl opt">=</span> baos<span class="hl opt">.</span><span class="hl kwd">toByteArray</span><span class="hl opt">();</span>

	ExecutorService pool <span class="hl opt">=</span> Executors<span class="hl opt">.</span><span class="hl kwd">newFixedThreadPool</span><span class="hl opt">(</span>Runtime<span class="hl opt">.</span><span class="hl kwd">getRuntime</span><span class="hl opt">().</span><span class="hl kwd">availableProcessors</span><span class="hl opt">());</span>
	<span class="hl kwb">int</span><span class="hl opt">[]</span> fragmentLengths <span class="hl opt">= {</span> <span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">2</span><span class="hl opt">,</span> <span class="hl num">3</span><span class="hl opt">,</span> <span class="hl num">4</span><span class="hl opt">,</span> <span class="hl num">6</span><span class="hl opt">,</span> <span class="hl num">12</span><span class="hl opt">,</span> <span class="hl num">18</span> <span class="hl opt">};</span>
	List<span class="hl opt">&lt;</span>Future<span class="hl opt">&lt;</span>Map<span class="hl opt">&lt;</span>ByteString<span class="hl opt">,</span> ByteString<span class="hl opt">&gt;&gt;&gt;</span> futures <span class="hl opt">=</span> pool<span class="hl opt">.</span><span class="hl kwd">invokeAll</span><span class="hl opt">(</span><span class="hl kwd">createFragmentTasks</span><span class="hl opt">(</span>sequence<span class="hl opt">,</span> fragmentLengths<span class="hl opt">));</span>
	pool<span class="hl opt">.</span><span class="hl kwd">shutdown</span><span class="hl opt">();</span>

	StringBuilder sb <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">StringBuilder</span><span class="hl opt">();</span>

	sb<span class="hl opt">.</span><span class="hl kwd">append</span><span class="hl opt">(</span><span class="hl kwd">writeFrequencies</span><span class="hl opt">(</span>sequence<span class="hl opt">.</span>length<span class="hl opt">,</span> futures<span class="hl opt">.</span><span class="hl kwd">get</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">).</span><span class="hl kwd">get</span><span class="hl opt">()));</span>
	sb<span class="hl opt">.</span><span class="hl kwd">append</span><span class="hl opt">(</span><span class="hl kwd">writeFrequencies</span><span class="hl opt">(</span>sequence<span class="hl opt">.</span>length <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">,</span> <span class="hl kwd">sumTwoMaps</span><span class="hl opt">(</span>futures<span class="hl opt">.</span><span class="hl kwd">get</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">).</span><span class="hl kwd">get</span><span class="hl opt">(),</span> futures<span class="hl opt">.</span><span class="hl kwd">get</span><span class="hl opt">(</span><span class="hl num">2</span><span class="hl opt">).</span><span class="hl kwd">get</span><span class="hl opt">())));</span>

	String<span class="hl opt">[]</span> nucleotideFragments <span class="hl opt">= {</span> <span class="hl str">&quot;ggt&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;ggta&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;ggtatt&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;ggtattttaatt&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;ggtattttaatttatagt&quot;</span> <span class="hl opt">};</span>
	<span class="hl kwa">for</span> <span class="hl opt">(</span>String nucleotideFragment <span class="hl opt">:</span> nucleotideFragments<span class="hl opt">) {</span>
	    sb<span class="hl opt">.</span><span class="hl kwd">append</span><span class="hl opt">(</span><span class="hl kwd">writeCount</span><span class="hl opt">(</span>futures<span class="hl opt">,</span> nucleotideFragment<span class="hl opt">));</span>
	<span class="hl opt">}</span>

	System<span class="hl opt">.</span>out<span class="hl opt">.</span><span class="hl kwd">print</span><span class="hl opt">(</span>sb<span class="hl opt">.</span><span class="hl kwd">toString</span><span class="hl opt">());</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">static final class</span> ByteString <span class="hl kwa">implements</span> Comparable<span class="hl opt">&lt;</span>ByteString<span class="hl opt">&gt; {</span>
        <span class="hl kwa">public</span> <span class="hl kwb">int</span> hash<span class="hl opt">,</span> count<span class="hl opt">=</span><span class="hl num">1</span><span class="hl opt">;</span>
        <span class="hl kwa">public final</span> <span class="hl kwb">byte</span> bytes<span class="hl opt">[];</span>

        <span class="hl kwa">public</span> <span class="hl kwd">ByteString</span><span class="hl opt">(</span><span class="hl kwb">int</span> size<span class="hl opt">) {</span>
            bytes <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwb">byte</span><span class="hl opt">[</span>size<span class="hl opt">];</span>
        <span class="hl opt">}</span>

        <span class="hl kwa">public</span> <span class="hl kwb">void</span> <span class="hl kwd">calculateHash</span><span class="hl opt">(</span><span class="hl kwb">byte</span> k<span class="hl opt">[],</span> <span class="hl kwb">int</span> offset<span class="hl opt">) {</span>
	    <span class="hl kwb">int</span> temp <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
            <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span> i<span class="hl opt">&lt;</span>bytes<span class="hl opt">.</span>length<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
		<span class="hl kwb">byte</span> b <span class="hl opt">=</span> k<span class="hl opt">[</span>offset<span class="hl opt">+</span>i<span class="hl opt">];</span>
                bytes<span class="hl opt">[</span>i<span class="hl opt">] =</span> b<span class="hl opt">;</span>
                temp <span class="hl opt">=</span> temp <span class="hl opt">*</span> <span class="hl num">31</span> <span class="hl opt">+</span> b<span class="hl opt">;</span>
            <span class="hl opt">}</span>
	    hash <span class="hl opt">=</span> temp<span class="hl opt">;</span>
        <span class="hl opt">}</span>

        <span class="hl kwa">public</span> <span class="hl kwb">int</span> <span class="hl kwd">hashCode</span><span class="hl opt">() {</span>
            <span class="hl kwa">return</span> hash<span class="hl opt">;</span>
        <span class="hl opt">}</span>

        <span class="hl kwa">public</span> <span class="hl kwb">boolean</span> <span class="hl kwd">equals</span><span class="hl opt">(</span>Object obj<span class="hl opt">) {</span>
	    <span class="hl kwa">return</span> Arrays<span class="hl opt">.</span><span class="hl kwd">equals</span><span class="hl opt">(</span>bytes<span class="hl opt">, ((</span>ByteString<span class="hl opt">)</span>obj<span class="hl opt">).</span>bytes<span class="hl opt">);</span>
        <span class="hl opt">}</span>

        <span class="hl kwa">public</span> <span class="hl kwb">int</span> <span class="hl kwd">compareTo</span><span class="hl opt">(</span>ByteString other<span class="hl opt">) {</span>
	    <span class="hl kwa">if</span> <span class="hl opt">(</span>other<span class="hl opt">.</span>count <span class="hl opt">!=</span> count<span class="hl opt">) {</span>
		<span class="hl kwa">return</span> other<span class="hl opt">.</span>count <span class="hl opt">-</span> count<span class="hl opt">;</span>
	    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
		<span class="hl slc">// Without this case, if there are two or more strings</span>
		<span class="hl slc">// with exactly the same count in a Map, then the</span>
		<span class="hl slc">// TreeSet constructor called in writeFrequencies will</span>
		<span class="hl slc">// only add the first one, and the rest will not</span>
		<span class="hl slc">// appear in the output.  Also this is required to</span>
		<span class="hl slc">// satisfy the rules of the k-nucleotide problem.</span>
		<span class="hl kwa">return</span> <span class="hl kwd">toString</span><span class="hl opt">().</span><span class="hl kwd">compareTo</span><span class="hl opt">(</span>other<span class="hl opt">.</span><span class="hl kwd">toString</span><span class="hl opt">());</span>
	    <span class="hl opt">}</span>
        <span class="hl opt">}</span>

	<span class="hl kwa">public</span> String <span class="hl kwd">toString</span><span class="hl opt">() {</span>
	    <span class="hl kwa">return new</span> <span class="hl kwd">String</span><span class="hl opt">(</span>bytes<span class="hl opt">);</span>
	<span class="hl opt">}</span>
    <span class="hl opt">}</span>
<span class="hl opt">}</span>
