<span class="hl com">/*   </span>
<span class="hl com">   The Computer Language Benchmarks Game</span>
<span class="hl com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by Paolo Bonzini</span>
<span class="hl com">   further optimized by Jason Garrett-Glaser</span>
<span class="hl com">   OpenMP by The Anh Tran</span>
<span class="hl com">   10-11-2010, modified by The Anh Tran:</span>
<span class="hl com">      _ copy bit shift idea from C entry</span>
<span class="hl com">*/</span>

<span class="hl ppc">#include &lt;cassert&gt;</span>
<span class="hl ppc">#include &lt;cstdio&gt;</span>
<span class="hl ppc">#include &lt;cstdlib&gt;</span>
<span class="hl ppc">#include &lt;algorithm&gt;</span>
<span class="hl ppc">#include &lt;sched.h&gt;</span>
<span class="hl ppc">#include &lt;memory.h&gt;</span>

<span class="hl ppc">#include &lt;omp.h&gt;</span>
<span class="hl ppc">#include &lt;sys/types.h&gt;</span>

<span class="hl ppc">#define L2_CACHE_LINE   64</span>
<span class="hl ppc">#define ALIGN         __attribute__ ((aligned(L2_CACHE_LINE)))</span>


<span class="hl kwc">typedef</span> <span class="hl kwb">unsigned char</span>   byte<span class="hl opt">;</span>
<span class="hl kwc">typedef</span> <span class="hl kwb">double</span>         v2d   <span class="hl kwd">__attribute__</span> <span class="hl opt">((</span><span class="hl kwd">vector_size</span><span class="hl opt">(</span><span class="hl num">16</span><span class="hl opt">)));</span>
<span class="hl kwc">typedef</span> <span class="hl kwb">int32_t</span>       v4i   <span class="hl kwd">__attribute__</span> <span class="hl opt">((</span><span class="hl kwd">vector_size</span><span class="hl opt">(</span><span class="hl num">16</span><span class="hl opt">)));</span>

<span class="hl kwb">const</span> v2d v10      <span class="hl opt">= {</span> <span class="hl num">1.0</span><span class="hl opt">,</span> <span class="hl num">1.0</span> <span class="hl opt">};</span>
<span class="hl kwb">const</span> v2d v15      <span class="hl opt">= {</span> <span class="hl num">1.5</span><span class="hl opt">,</span> <span class="hl num">1.5</span> <span class="hl opt">};</span>
<span class="hl kwb">const</span> v2d v40      <span class="hl opt">= {</span> <span class="hl num">4.0</span><span class="hl opt">,</span> <span class="hl num">4.0</span> <span class="hl opt">};</span>

v2d inv_2n<span class="hl opt">;</span>   <span class="hl slc">// {2.0/N, 2.0/N}</span>


<span class="hl kwb">int</span>
<span class="hl kwd">GetThreadCount</span><span class="hl opt">()</span>
<span class="hl opt">{</span>
   cpu_set_t cs<span class="hl opt">;</span>
   <span class="hl kwd">CPU_ZERO</span><span class="hl opt">(&amp;</span>cs<span class="hl opt">);</span>
   <span class="hl kwd">sched_getaffinity</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl kwa">sizeof</span><span class="hl opt">(</span>cs<span class="hl opt">), &amp;</span>cs<span class="hl opt">);</span>

   <span class="hl kwb">int</span> count <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
   <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> CPU_SETSIZE<span class="hl opt">; ++</span>i<span class="hl opt">)</span>
      count <span class="hl opt">+=</span> <span class="hl kwd">CPU_ISSET</span><span class="hl opt">(</span>i<span class="hl opt">, &amp;</span>cs<span class="hl opt">);</span>

   <span class="hl kwa">return</span> count<span class="hl opt">;</span>
<span class="hl opt">}</span>


<span class="hl kwb">void</span>
<span class="hl kwd">mandelbrot</span><span class="hl opt">(</span><span class="hl kwb">int</span> N<span class="hl opt">,</span> byte<span class="hl opt">*</span> data<span class="hl opt">)</span>
<span class="hl opt">{</span>
   ALIGN <span class="hl kwb">int</span> row_processed <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>

   <span class="hl ppc">#pragma omp parallel default(shared) num_threads(GetThreadCount())</span>
   <span class="hl opt">{</span>
      <span class="hl kwb">int</span> y <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
      <span class="hl kwa">while</span> <span class="hl opt">((</span>y <span class="hl opt">=</span> <span class="hl kwd">__sync_fetch_and_add</span><span class="hl opt">(&amp;</span>row_processed<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">)) &lt;</span> N<span class="hl opt">)</span>
      <span class="hl opt">{</span>
         byte<span class="hl opt">*</span> row_output <span class="hl opt">=</span> data <span class="hl opt">+</span> y <span class="hl opt">* (</span>N <span class="hl opt">&gt;&gt;</span> <span class="hl num">3</span><span class="hl opt">);</span>
         
         v2d Civ <span class="hl opt">= {</span>y<span class="hl opt">,</span> y<span class="hl opt">};</span>
         Civ <span class="hl opt">=</span> Civ <span class="hl opt">*</span> inv_2n <span class="hl opt">-</span> v10<span class="hl opt">;</span>

            <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> x <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> x <span class="hl opt">&lt;</span> N<span class="hl opt">;</span> x <span class="hl opt">+=</span> <span class="hl num">2</span><span class="hl opt">)</span>
            <span class="hl opt">{</span>
            v2d   Crv <span class="hl opt">= {</span>x<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">,</span> x<span class="hl opt">};</span>
            Crv <span class="hl opt">=</span> Crv <span class="hl opt">*</span> inv_2n <span class="hl opt">-</span> v15<span class="hl opt">;</span>
            v2d Zrv <span class="hl opt">=</span> Crv<span class="hl opt">;</span>
            v2d Ziv <span class="hl opt">=</span> Civ<span class="hl opt">;</span>
            v2d Trv <span class="hl opt">=</span> Crv <span class="hl opt">*</span> Crv<span class="hl opt">;</span>
            v2d Tiv <span class="hl opt">=</span> Civ <span class="hl opt">*</span> Civ<span class="hl opt">;</span>

            <span class="hl kwb">int</span> result <span class="hl opt">=</span> <span class="hl num">3</span><span class="hl opt">;</span> <span class="hl slc">// assume that 2 elements belong to MB set</span>
            <span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span>

            <span class="hl kwa">while</span> <span class="hl opt">(</span> result <span class="hl opt">&amp;&amp; (</span>i<span class="hl opt">++ &lt;</span> <span class="hl num">50</span><span class="hl opt">) )</span>
            <span class="hl opt">{</span>
               v2d ZZ <span class="hl opt">=</span> Zrv <span class="hl opt">*</span> Ziv<span class="hl opt">;</span>
               Zrv <span class="hl opt">=</span> Trv <span class="hl opt">-</span> Tiv <span class="hl opt">+</span> Crv<span class="hl opt">;</span>
               Ziv <span class="hl opt">=</span> ZZ <span class="hl opt">+</span> ZZ <span class="hl opt">+</span> Civ<span class="hl opt">;</span>
               Trv <span class="hl opt">=</span> Zrv <span class="hl opt">*</span> Zrv<span class="hl opt">;</span>
               Tiv <span class="hl opt">=</span> Ziv <span class="hl opt">*</span> Ziv<span class="hl opt">;</span>
           
               <span class="hl slc">// trv + tiv &lt;= 4.0</span>
               v2d delta <span class="hl opt">= (</span>v2d<span class="hl opt">)</span><span class="hl kwd">__builtin_ia32_cmplepd</span><span class="hl opt">( (</span>Trv <span class="hl opt">+</span> Tiv<span class="hl opt">),</span> v40 <span class="hl opt">);</span>
               result <span class="hl opt">=</span> <span class="hl kwd">__builtin_ia32_movmskpd</span><span class="hl opt">(</span>delta<span class="hl opt">);</span>              
            <span class="hl opt">}</span>

            <span class="hl opt">{</span>
               <span class="hl kwb">int</span> bit_shift <span class="hl opt">=</span> <span class="hl num">6</span> <span class="hl opt">- (</span>x <span class="hl opt">&amp;</span> <span class="hl num">7</span><span class="hl opt">);</span>
               row_output<span class="hl opt">[</span>x <span class="hl opt">&gt;&gt;</span> <span class="hl num">3</span><span class="hl opt">] |=</span> <span class="hl kwa">static_cast</span><span class="hl opt">&lt;</span>byte<span class="hl opt">&gt;(</span>result <span class="hl opt">&lt;&lt;</span> bit_shift<span class="hl opt">);</span>
            <span class="hl opt">}</span>
         <span class="hl opt">}</span>
      <span class="hl opt">}</span>
   <span class="hl opt">}</span>
<span class="hl opt">}</span>


<span class="hl kwb">int</span>
<span class="hl kwd">main</span> <span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span> <span class="hl opt">**</span>argv<span class="hl opt">)</span>
<span class="hl opt">{</span>
   <span class="hl kwb">const int</span> N <span class="hl opt">= (</span>argc <span class="hl opt">==</span> <span class="hl num">2</span><span class="hl opt">)</span> ? std<span class="hl opt">::</span><span class="hl kwd">atoi</span><span class="hl opt">(</span>argv<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">]) :</span> <span class="hl num">200</span><span class="hl opt">;</span>
   <span class="hl kwa">assert</span><span class="hl opt">((</span>N <span class="hl opt">%</span> <span class="hl num">8</span><span class="hl opt">) ==</span> <span class="hl num">0</span><span class="hl opt">);</span>
   <span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;P4</span><span class="hl esc">\n</span><span class="hl str">%d %d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> N<span class="hl opt">,</span> N<span class="hl opt">);</span>

   <span class="hl opt">{</span>
      <span class="hl kwb">double</span><span class="hl opt">*</span> p_iv <span class="hl opt">=</span> <span class="hl kwa">reinterpret_cast</span><span class="hl opt">&lt;</span><span class="hl kwb">double</span><span class="hl opt">*&gt;(&amp;</span>inv_2n<span class="hl opt">);</span>
      p_iv<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] =</span> p_iv<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">] =</span> <span class="hl num">2.0</span> <span class="hl opt">/</span> N<span class="hl opt">;</span>
   <span class="hl opt">}</span>

   <span class="hl kwb">const int</span> bytes_count <span class="hl opt">= (</span>N <span class="hl opt">&gt;&gt;</span> <span class="hl num">3</span><span class="hl opt">) *</span> N<span class="hl opt">;</span>
   byte<span class="hl opt">*</span> data <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
   <span class="hl kwa">assert</span><span class="hl opt">(</span>   <span class="hl kwd">posix_memalign</span><span class="hl opt">(</span><span class="hl kwa">reinterpret_cast</span><span class="hl opt">&lt;</span><span class="hl kwb">void</span><span class="hl opt">**&gt;(&amp;</span>data<span class="hl opt">),</span> L2_CACHE_LINE<span class="hl opt">,</span> bytes_count<span class="hl opt">)</span>
         <span class="hl opt">==</span> <span class="hl num">0</span><span class="hl opt">);</span>
   <span class="hl kwd">memset</span><span class="hl opt">(</span>data<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> bytes_count<span class="hl opt">);</span>

   <span class="hl kwd">mandelbrot</span><span class="hl opt">(</span>N<span class="hl opt">,</span> data<span class="hl opt">);</span>

   <span class="hl kwd">fwrite</span><span class="hl opt">(</span> data<span class="hl opt">,</span> bytes_count<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">,</span> stdout<span class="hl opt">);</span>
   <span class="hl kwd">fflush</span><span class="hl opt">(</span>stdout<span class="hl opt">);</span>
   <span class="hl kwd">free</span><span class="hl opt">(</span>data<span class="hl opt">);</span>

   <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>

