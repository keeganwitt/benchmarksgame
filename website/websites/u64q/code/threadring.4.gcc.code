<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   Contributed by Andrew Gottemoller</span>
<span class="hl com">*/</span>
<span class="hl ppc">#include &lt;pthread.h&gt;</span>
<span class="hl ppc">#include &lt;semaphore.h&gt;</span>
<span class="hl ppc">#include &lt;stdio.h&gt;</span>
<span class="hl ppc">#include &lt;stdlib.h&gt;</span>


<span class="hl ppc">#define LIKELY(expression)   __builtin_expect(!!(expression), 1)</span>
<span class="hl ppc">#define UNLIKELY(expression) __builtin_expect(!!(expression), 0)</span>


<span class="hl ppc">#define THREAD_COUNT 503</span>
<span class="hl ppc">#define PASS_COUNT   1000</span>

<span class="hl ppc">#define THREAD_CREATED 0x01</span>


<span class="hl kwb">struct</span> thread_data
<span class="hl opt">{</span>
   <span class="hl kwb">unsigned int</span> flags<span class="hl opt">;</span>
   <span class="hl kwb">unsigned int</span> id<span class="hl opt">;</span>

   sem_t pass_semaphore<span class="hl opt">;</span>

   pthread_t thread<span class="hl opt">;</span>
<span class="hl opt">};</span>


<span class="hl kwb">static struct</span> thread_data passing_threads<span class="hl opt">[</span>THREAD_COUNT<span class="hl opt">] = {{</span><span class="hl num">0</span><span class="hl opt">}};</span>
<span class="hl kwb">static unsigned int</span>      passes_remaining           <span class="hl opt">=</span> PASS_COUNT<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">;</span>


<span class="hl kwb">static</span> <span class="hl kwc">inline</span> <span class="hl kwb">void</span>  <span class="hl kwd">CreateThread</span> <span class="hl opt">(</span><span class="hl kwb">unsigned int</span><span class="hl opt">);</span>
<span class="hl kwb">static void</span><span class="hl opt">*</span>      <span class="hl kwd">PerformPass</span>  <span class="hl opt">(</span><span class="hl kwb">void</span><span class="hl opt">*);</span>


<span class="hl kwb">static</span> <span class="hl kwc">inline</span> <span class="hl kwb">void</span> <span class="hl kwd">CreateThread</span> <span class="hl opt">(</span><span class="hl kwb">unsigned int</span> id<span class="hl opt">)</span>
<span class="hl opt">{</span>
   <span class="hl kwb">struct</span> thread_data<span class="hl opt">*</span> restrict thread<span class="hl opt">;</span>

   thread <span class="hl opt">= &amp;</span>passing_threads<span class="hl opt">[</span>id<span class="hl opt">];</span>

   thread<span class="hl opt">-&gt;</span>id <span class="hl opt">=</span> id<span class="hl opt">;</span>

   <span class="hl kwd">sem_init</span><span class="hl opt">(&amp;</span>thread<span class="hl opt">-&gt;</span>pass_semaphore<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">);</span>
   <span class="hl kwd">pthread_create</span><span class="hl opt">(&amp;</span>thread<span class="hl opt">-&gt;</span>thread<span class="hl opt">,</span> NULL<span class="hl opt">, &amp;</span>PerformPass<span class="hl opt">,</span> thread<span class="hl opt">);</span>

   <span class="hl kwd">__sync_fetch_and_or</span><span class="hl opt">(&amp;</span>thread<span class="hl opt">-&gt;</span>flags<span class="hl opt">,</span> THREAD_CREATED<span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwb">static void</span><span class="hl opt">*</span> <span class="hl kwd">PerformPass</span> <span class="hl opt">(</span><span class="hl kwb">void</span><span class="hl opt">*</span> argument<span class="hl opt">)</span>
<span class="hl opt">{</span>
   <span class="hl kwb">struct</span> thread_data<span class="hl opt">*</span> restrict thread<span class="hl opt">;</span>
   <span class="hl kwb">struct</span> thread_data<span class="hl opt">*</span> restrict next_thread<span class="hl opt">;</span>
   <span class="hl kwb">unsigned int</span>             id<span class="hl opt">;</span>
   <span class="hl kwb">unsigned int</span>             next_id<span class="hl opt">;</span>
   <span class="hl kwb">unsigned int</span>             thread_ready<span class="hl opt">;</span>

   thread <span class="hl opt">=</span> argument<span class="hl opt">;</span>

   id     <span class="hl opt">=</span> thread<span class="hl opt">-&gt;</span>id<span class="hl opt">;</span>
   next_id <span class="hl opt">= (</span>id<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)%</span>THREAD_COUNT<span class="hl opt">;</span>

   next_thread <span class="hl opt">= &amp;</span>passing_threads<span class="hl opt">[</span>next_id<span class="hl opt">];</span>

   <span class="hl kwd">sem_wait</span><span class="hl opt">(&amp;</span>thread<span class="hl opt">-&gt;</span>pass_semaphore<span class="hl opt">);</span>

   passes_remaining<span class="hl opt">--;</span>
   <span class="hl kwa">if</span><span class="hl opt">(</span><span class="hl kwd">LIKELY</span><span class="hl opt">(</span>passes_remaining <span class="hl opt">!=</span> <span class="hl num">0</span><span class="hl opt">))</span>
   <span class="hl opt">{</span>
      <span class="hl kwa">do</span>
      <span class="hl opt">{</span>
         thread_ready <span class="hl opt">=</span> <span class="hl kwd">__sync_fetch_and_or</span><span class="hl opt">(&amp;</span>next_thread<span class="hl opt">-&gt;</span>flags<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">);</span>
      <span class="hl opt">}</span><span class="hl kwa">while</span><span class="hl opt">(!(</span>thread_ready<span class="hl opt">&amp;</span>THREAD_CREATED<span class="hl opt">));</span>

      <span class="hl kwa">while</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">)</span>
      <span class="hl opt">{</span>
         <span class="hl kwd">sem_post</span><span class="hl opt">(&amp;</span>next_thread<span class="hl opt">-&gt;</span>pass_semaphore<span class="hl opt">);</span>
         <span class="hl kwd">sem_wait</span><span class="hl opt">(&amp;</span>thread<span class="hl opt">-&gt;</span>pass_semaphore<span class="hl opt">);</span>

         passes_remaining<span class="hl opt">--;</span>
         <span class="hl kwa">if</span><span class="hl opt">(</span><span class="hl kwd">UNLIKELY</span><span class="hl opt">(</span>passes_remaining <span class="hl opt">==</span> <span class="hl num">0</span><span class="hl opt">))</span>
            <span class="hl kwa">break</span><span class="hl opt">;</span>
      <span class="hl opt">}</span>
   <span class="hl opt">}</span>

   <span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;%d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> id<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">);</span>

   <span class="hl kwd">exit</span><span class="hl opt">(</span>EXIT_SUCCESS<span class="hl opt">);</span>
<span class="hl opt">}</span>


<span class="hl kwb">int</span> <span class="hl kwd">main</span> <span class="hl opt">(</span><span class="hl kwb">int</span> argument_count<span class="hl opt">,</span> <span class="hl kwb">char</span><span class="hl opt">**</span> arguments<span class="hl opt">)</span>
<span class="hl opt">{</span>
   <span class="hl kwb">struct</span> thread_data<span class="hl opt">*</span> restrict initial_thread<span class="hl opt">;</span>

   <span class="hl kwa">if</span><span class="hl opt">(</span>argument_count <span class="hl opt">&gt;</span> <span class="hl num">1</span><span class="hl opt">)</span>
      passes_remaining <span class="hl opt">=</span> <span class="hl kwd">atoi</span><span class="hl opt">(</span>arguments<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">])+</span><span class="hl num">1</span><span class="hl opt">;</span>

   <span class="hl kwd">CreateThread</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">);</span>

   initial_thread <span class="hl opt">= &amp;</span>passing_threads<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">];</span>

   <span class="hl kwd">sem_post</span><span class="hl opt">(&amp;</span>initial_thread<span class="hl opt">-&gt;</span>pass_semaphore<span class="hl opt">);</span>

   <span class="hl kwa">for</span><span class="hl opt">(</span><span class="hl kwb">unsigned int</span> index <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span> index <span class="hl opt">&lt;</span> THREAD_COUNT<span class="hl opt">;</span> index<span class="hl opt">++)</span>
      <span class="hl kwd">CreateThread</span><span class="hl opt">(</span>index<span class="hl opt">);</span>

   <span class="hl kwd">pthread_join</span><span class="hl opt">(</span>initial_thread<span class="hl opt">-&gt;</span>thread<span class="hl opt">,</span> NULL<span class="hl opt">);</span>

   <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
