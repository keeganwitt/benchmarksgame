<span class="hl slc">;;   The Computer Language Benchmarks Game</span>
<span class="hl slc">;;   http://shootout.alioth.debian.org/</span>

<span class="hl slc">;; contributed by Bill James</span>
<span class="hl slc">;; speed improvements by Andy Fingerhut</span>

<span class="hl opt">(</span><span class="hl kwa">ns</span> fasta
  <span class="hl opt">(:</span>gen-class<span class="hl opt">))</span>

<span class="hl opt">(</span><span class="hl kwa">set</span><span class="hl opt">! *</span>warn-on-reflection<span class="hl opt">*</span> true<span class="hl opt">)</span>


<span class="hl opt">(</span><span class="hl kwa">def</span> <span class="hl opt">*</span>width<span class="hl opt">*</span> <span class="hl num">60</span><span class="hl opt">)</span>
<span class="hl opt">(</span><span class="hl kwa">def</span> <span class="hl opt">*</span>lookup-size<span class="hl opt">*</span> <span class="hl num">222000</span><span class="hl opt">)</span>


<span class="hl opt">(</span><span class="hl kwa">def</span> <span class="hl opt">*</span>alu<span class="hl opt">* (</span><span class="hl kwa">str</span> <span class="hl str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span>
                <span class="hl str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span>
                <span class="hl str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span>
                <span class="hl str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span>
                <span class="hl str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span>
                <span class="hl str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span>
                <span class="hl str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span><span class="hl opt">))</span>

<span class="hl opt">(</span><span class="hl kwa">def</span> <span class="hl opt">*</span>codes<span class="hl opt">*</span> <span class="hl str">&quot;acgtBDHKMNRSVWY&quot;</span><span class="hl opt">)</span>

<span class="hl opt">(</span><span class="hl kwa">def</span> <span class="hl opt">*</span>iub<span class="hl opt">* [</span><span class="hl num">0.27 0.12 0.12 0.27 0.02 0.02 0.02 0.02</span>
           <span class="hl num">0.02 0.02 0.02 0.02 0.02 0.02 0.02</span><span class="hl opt">])</span>

<span class="hl opt">(</span><span class="hl kwa">def</span> <span class="hl opt">*</span>homosapiens<span class="hl opt">* [</span><span class="hl num">0.3029549426680 0.1979883004921</span>
                   <span class="hl num">0.1975473066391 0.3015094502008</span><span class="hl opt">])</span>


<span class="hl opt">(</span><span class="hl kwa">defn</span> find-index <span class="hl opt">[</span>f coll<span class="hl opt">]</span>
  <span class="hl opt">(</span><span class="hl kwa">loop</span> <span class="hl opt">[</span>i <span class="hl opt">(</span><span class="hl kwa">int</span> <span class="hl num">0</span><span class="hl opt">)</span>
         s <span class="hl opt">(</span><span class="hl kwa">seq</span> coll<span class="hl opt">)]</span>
    <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">f</span> <span class="hl opt">(</span><span class="hl kwa">first</span> s<span class="hl opt">))</span>
      i
      <span class="hl opt">(</span><span class="hl kwa">recur</span> <span class="hl opt">(</span><span class="hl kwa">unchecked-inc</span> i<span class="hl opt">) (</span><span class="hl kwa">rest</span> s<span class="hl opt">)))))</span>


<span class="hl opt">(</span><span class="hl kwa">def</span> random-seed <span class="hl opt">(</span><span class="hl kwa">int-array</span> <span class="hl opt">[</span><span class="hl num">42</span><span class="hl opt">]))</span>
<span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">[</span>scale <span class="hl opt">(</span><span class="hl kwa">double</span> <span class="hl opt">(/ *</span>lookup-size<span class="hl opt">*</span> <span class="hl num">139968</span><span class="hl opt">))]</span>
  <span class="hl opt">(</span><span class="hl kwa">defn</span> gen-random-fast <span class="hl opt">[]</span>
    <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">[</span>^ints random-seed random-seed
          IM <span class="hl opt">(</span><span class="hl kwa">int</span> <span class="hl num">139968</span><span class="hl opt">)</span>
          IA <span class="hl opt">(</span><span class="hl kwa">int</span> <span class="hl num">3877</span><span class="hl opt">)</span>
          IC <span class="hl opt">(</span><span class="hl kwa">int</span> <span class="hl num">29573</span><span class="hl opt">)</span>
          zero <span class="hl opt">(</span><span class="hl kwa">int</span> <span class="hl num">0</span><span class="hl opt">)</span>
          new-seed <span class="hl opt">(</span><span class="hl kwa">int</span> <span class="hl opt">(</span><span class="hl kwa">unchecked-remainder</span>
                         <span class="hl opt">(</span><span class="hl kwa">unchecked-add</span>
                          <span class="hl opt">(</span><span class="hl kwa">unchecked-multiply</span>
                           <span class="hl opt">(</span><span class="hl kwa">aget</span> random-seed zero<span class="hl opt">)</span> IA<span class="hl opt">)</span> IC<span class="hl opt">)</span> IM<span class="hl opt">))</span>
          <span class="hl slc">;; I had the (aset random-seed zero new-seed) in the body of</span>
          <span class="hl slc">;; the let before, but strangely the Clojure compiler</span>
          <span class="hl slc">;; generated an unnecessary call to Integer.valueOf() to</span>
          <span class="hl slc">;; convert aset's return value to an Integer and then</span>
          <span class="hl slc">;; discard that value.  By assigning the return value of</span>
          <span class="hl slc">;; aset to throwaway-val, the compiler actually generates</span>
          <span class="hl slc">;; faster code.</span>
          throwaway-val <span class="hl opt">(</span><span class="hl kwa">int</span> <span class="hl opt">(</span><span class="hl kwa">aset</span> random-seed zero new-seed<span class="hl opt">))]</span>
      <span class="hl opt">(</span><span class="hl kwa">int</span> <span class="hl opt">(*</span> new-seed scale<span class="hl opt">)))))</span>


<span class="hl slc">;; Takes a vector of probabilities.</span>
<span class="hl opt">(</span><span class="hl kwa">defn</span> make-cumulative <span class="hl opt">[</span>v<span class="hl opt">]</span>
  <span class="hl opt">(</span><span class="hl kwa">vec</span> <span class="hl opt">(</span><span class="hl kwa">map</span> <span class="hl opt">#(</span><span class="hl kwa">reduce</span> <span class="hl opt">+ (</span><span class="hl kwa">subvec</span> v <span class="hl num">0</span> %<span class="hl opt">)) (</span><span class="hl kwa">range</span> <span class="hl num">1</span> <span class="hl opt">(</span><span class="hl kwa">inc</span> <span class="hl opt">(</span><span class="hl kwa">count</span> v<span class="hl opt">))))))</span>


<span class="hl slc">;; Takes a vector of cumulative probabilities.</span>
<span class="hl opt">(</span><span class="hl kwa">defn</span> make-lookup-table <span class="hl opt">[</span>v<span class="hl opt">]</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">[</span>sz <span class="hl opt">(</span><span class="hl kwa">int</span> <span class="hl opt">*</span>lookup-size<span class="hl opt">*)</span>
        lookup-scale <span class="hl opt">(</span><span class="hl kwa">-</span> sz <span class="hl num">0.0001</span><span class="hl opt">)</span>
        ^ints a <span class="hl opt">(</span><span class="hl kwa">int-array</span> sz<span class="hl opt">)]</span>
    <span class="hl opt">(</span><span class="hl kwa">dotimes</span> <span class="hl opt">[</span>i sz<span class="hl opt">]</span>
      <span class="hl opt">(</span><span class="hl kwa">aset</span> a i <span class="hl opt">(</span><span class="hl kwa">int</span> <span class="hl opt">(</span><span class="hl kwa">find-index</span> <span class="hl opt">#(&lt;= (/</span> i lookup-scale<span class="hl opt">)</span> %<span class="hl opt">)</span> v<span class="hl opt">))))</span>
    a<span class="hl opt">))</span>


<span class="hl opt">(</span><span class="hl kwa">defn</span> cycle-bytes <span class="hl opt">[</span>source source-size n
                   ^java.io.BufferedOutputStream ostream<span class="hl opt">]</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">[</span>source-size <span class="hl opt">(</span><span class="hl kwa">int</span> source-size<span class="hl opt">)</span>
        width <span class="hl opt">(</span><span class="hl kwa">int</span> <span class="hl opt">*</span>width<span class="hl opt">*)</span>
        width<span class="hl opt">+</span><span class="hl num">1</span> <span class="hl opt">(</span><span class="hl kwa">int</span> <span class="hl opt">(</span><span class="hl kwa">inc</span> width<span class="hl opt">))</span>
        buffer-size <span class="hl opt">(</span><span class="hl kwa">int</span> <span class="hl opt">(*</span> width<span class="hl opt">+</span><span class="hl num">1 4096</span><span class="hl opt">))</span>
        buffer <span class="hl opt">(</span><span class="hl kwa">byte-array</span> buffer-size <span class="hl opt">(</span><span class="hl kwa">byte</span> <span class="hl num">10</span><span class="hl opt">))]</span>
    <span class="hl opt">(</span><span class="hl kwa">loop</span> <span class="hl opt">[</span>i <span class="hl opt">(</span><span class="hl kwa">int</span> <span class="hl num">0</span><span class="hl opt">)</span>
           j <span class="hl opt">(</span><span class="hl kwa">int</span> <span class="hl num">0</span><span class="hl opt">)</span>
           n <span class="hl opt">(</span><span class="hl kwa">int</span> n<span class="hl opt">)]</span>
      <span class="hl opt">(</span><span class="hl kwa">System</span><span class="hl opt">/</span>arraycopy source i buffer j width<span class="hl opt">)</span>
      <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(&gt;</span> n width<span class="hl opt">)</span>
        <span class="hl opt">(</span><span class="hl kwa">recur</span> <span class="hl opt">(</span><span class="hl kwa">int</span> <span class="hl opt">(</span><span class="hl kwa">unchecked-remainder</span>
                     <span class="hl opt">(</span><span class="hl kwa">unchecked-add</span> i width<span class="hl opt">)</span> source-size<span class="hl opt">))</span>
               <span class="hl opt">(</span><span class="hl kwa">int</span> <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">[</span>j <span class="hl opt">(</span><span class="hl kwa">unchecked-add</span> j width<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)]</span>
                      <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(==</span> j buffer-size<span class="hl opt">)</span>
                        <span class="hl opt">(</span><span class="hl kwa">do</span> <span class="hl opt">(</span>.write ostream buffer<span class="hl opt">) (</span><span class="hl kwa">int</span> <span class="hl num">0</span><span class="hl opt">))</span>
                        j<span class="hl opt">)))</span>
               <span class="hl opt">(</span><span class="hl kwa">unchecked-subtract</span> n width<span class="hl opt">))</span>
        <span class="hl opt">(</span><span class="hl kwa">do</span>
          <span class="hl opt">(</span><span class="hl kwa">aset</span> buffer <span class="hl opt">(+</span> j n<span class="hl opt">) (</span><span class="hl kwa">byte</span> <span class="hl num">10</span><span class="hl opt">))</span>
          <span class="hl opt">(</span>.write ostream buffer <span class="hl opt">(</span><span class="hl kwa">int</span> <span class="hl num">0</span><span class="hl opt">) (+</span> j n <span class="hl num">1</span><span class="hl opt">)))))))</span>


<span class="hl opt">(</span><span class="hl kwa">defn</span> fasta-repeat <span class="hl opt">[</span>n ^java.io.BufferedOutputStream ostream<span class="hl opt">]</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">[</span>source <span class="hl opt">(</span>.getBytes <span class="hl opt">(</span><span class="hl kwa">str</span> <span class="hl opt">*</span>alu<span class="hl opt">* *</span>alu<span class="hl opt">*))]</span>
    <span class="hl opt">(</span><span class="hl kwa">cycle-bytes</span> source <span class="hl opt">(</span><span class="hl kwa">count</span> <span class="hl opt">*</span>alu<span class="hl opt">*)</span> n ostream<span class="hl opt">)))</span>


<span class="hl opt">(</span><span class="hl kwa">defn</span> fasta-random <span class="hl opt">[</span>probs n ^java.io.BufferedOutputStream ostream<span class="hl opt">]</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">[</span>codes <span class="hl opt">(</span>.getBytes <span class="hl opt">(</span><span class="hl kwa">str</span> <span class="hl opt">*</span>codes<span class="hl opt">*))</span>
        lookup-table <span class="hl opt">(</span><span class="hl kwa">ints</span> <span class="hl opt">(</span><span class="hl kwa">make-lookup-table</span>
                            <span class="hl opt">(</span><span class="hl kwa">make-cumulative</span> probs<span class="hl opt">)))</span>
        width <span class="hl opt">(</span><span class="hl kwa">int</span> <span class="hl opt">*</span>width<span class="hl opt">*)</span>
        width-1 <span class="hl opt">(</span><span class="hl kwa">int</span> <span class="hl opt">(</span><span class="hl kwa">dec</span> width<span class="hl opt">))</span>
        num-lines-in-buffer <span class="hl opt">(</span><span class="hl kwa">int</span> <span class="hl num">2000</span><span class="hl opt">)</span>
        buf-size <span class="hl opt">(</span><span class="hl kwa">int</span> <span class="hl opt">(*</span> num-lines-in-buffer <span class="hl opt">(</span><span class="hl kwa">inc</span> width<span class="hl opt">)))</span>
        buffer <span class="hl opt">(</span><span class="hl kwa">byte-array</span> buf-size<span class="hl opt">)]</span>
    <span class="hl opt">(</span><span class="hl kwa">loop</span> <span class="hl opt">[</span>n <span class="hl opt">(</span><span class="hl kwa">int</span> n<span class="hl opt">)</span>      <span class="hl slc">;; The number of characters left to generate.</span>
           j <span class="hl opt">(</span><span class="hl kwa">int</span> width<span class="hl opt">)</span>  <span class="hl slc">;; The number of characters left to</span>
                          <span class="hl slc">;; generate on the current line of output</span>
                          <span class="hl slc">;; before printing a newline.</span>
           i <span class="hl opt">(</span><span class="hl kwa">int</span> <span class="hl num">0</span><span class="hl opt">)]</span>     <span class="hl slc">;; Number of characters put in buffer so far.</span>
      <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">zero</span>? n<span class="hl opt">)</span>
        <span class="hl opt">(</span><span class="hl kwa">do</span>
          <span class="hl opt">(</span>.write ostream buffer <span class="hl opt">(</span><span class="hl kwa">int</span> <span class="hl num">0</span><span class="hl opt">)</span> i<span class="hl opt">)</span>
          <span class="hl opt">(</span><span class="hl kwa">when</span> <span class="hl opt">(</span><span class="hl kwa">not</span><span class="hl opt">= (</span><span class="hl kwa">aget</span> buffer <span class="hl opt">(</span><span class="hl kwa">dec</span> i<span class="hl opt">)) (</span><span class="hl kwa">byte</span> <span class="hl num">10</span><span class="hl opt">))</span>
            <span class="hl opt">(</span><span class="hl kwa">aset</span> buffer <span class="hl opt">(</span><span class="hl kwa">int</span> <span class="hl num">0</span><span class="hl opt">) (</span><span class="hl kwa">byte</span> <span class="hl num">10</span><span class="hl opt">))</span>
            <span class="hl opt">(</span>.write ostream buffer <span class="hl opt">(</span><span class="hl kwa">int</span> <span class="hl num">0</span><span class="hl opt">) (</span><span class="hl kwa">int</span> <span class="hl num">1</span><span class="hl opt">))))</span>
        <span class="hl slc">;; else</span>
        <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">[</span>rand-byte <span class="hl opt">(</span><span class="hl kwa">aget</span> codes <span class="hl opt">(</span><span class="hl kwa">aget</span> lookup-table <span class="hl opt">(</span><span class="hl kwa">gen-random-fast</span><span class="hl opt">)))]</span>
          <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(==</span> i buf-size<span class="hl opt">)</span>
            <span class="hl opt">(</span><span class="hl kwa">do</span>
              <span class="hl slc">;; buffer is full.  write it and start over.</span>
              <span class="hl opt">(</span>.write ostream buffer <span class="hl opt">(</span><span class="hl kwa">int</span> <span class="hl num">0</span><span class="hl opt">)</span> buf-size<span class="hl opt">)</span>
              <span class="hl opt">(</span><span class="hl kwa">aset</span> buffer <span class="hl opt">(</span><span class="hl kwa">int</span> <span class="hl num">0</span><span class="hl opt">)</span> rand-byte<span class="hl opt">)</span>
              <span class="hl opt">(</span><span class="hl kwa">recur</span> <span class="hl opt">(</span><span class="hl kwa">unchecked-dec</span> n<span class="hl opt">)</span> width-1 <span class="hl opt">(</span><span class="hl kwa">int</span> <span class="hl num">1</span><span class="hl opt">)))</span>
            <span class="hl opt">(</span><span class="hl kwa">do</span>
              <span class="hl opt">(</span><span class="hl kwa">aset</span> buffer i rand-byte<span class="hl opt">)</span>
              <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(==</span> j <span class="hl opt">(</span><span class="hl kwa">int</span> <span class="hl num">1</span><span class="hl opt">))</span>
                <span class="hl slc">;; then</span>
                <span class="hl opt">(</span><span class="hl kwa">do</span>
                  <span class="hl opt">(</span><span class="hl kwa">aset</span> buffer <span class="hl opt">(</span><span class="hl kwa">unchecked-inc</span> i<span class="hl opt">) (</span><span class="hl kwa">byte</span> <span class="hl num">10</span><span class="hl opt">))</span> <span class="hl slc">;; add newline</span>
                  <span class="hl opt">(</span><span class="hl kwa">recur</span> <span class="hl opt">(</span><span class="hl kwa">unchecked-dec</span> n<span class="hl opt">)</span> width <span class="hl opt">(</span><span class="hl kwa">unchecked-add</span> i <span class="hl num">2</span><span class="hl opt">)))</span>
                <span class="hl slc">;; else</span>
                <span class="hl opt">(</span><span class="hl kwa">recur</span> <span class="hl opt">(</span><span class="hl kwa">unchecked-dec</span> n<span class="hl opt">) (</span><span class="hl kwa">unchecked-dec</span> j<span class="hl opt">)</span>
                       <span class="hl opt">(</span><span class="hl kwa">unchecked-inc</span> i<span class="hl opt">))))))))))</span>


<span class="hl opt">(</span><span class="hl kwa">defn</span> write-line <span class="hl opt">[</span>s ^java.io.BufferedOutputStream stream<span class="hl opt">]</span>
  <span class="hl opt">(</span>.write stream <span class="hl opt">(</span>.getBytes <span class="hl opt">(</span><span class="hl kwa">str</span> s <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">))))</span>


<span class="hl opt">(</span><span class="hl kwa">defn</span> -main <span class="hl opt">[&amp;</span> args<span class="hl opt">]</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">[</span>n <span class="hl opt">(</span><span class="hl kwa">Integer</span><span class="hl opt">/</span>parseInt <span class="hl opt">(</span><span class="hl kwa">nth</span> args <span class="hl num">0</span><span class="hl opt">))</span>
        ostream <span class="hl opt">(</span><span class="hl kwa">java</span>.io.BufferedOutputStream. System<span class="hl opt">/</span>out<span class="hl opt">)</span>
        start-time <span class="hl opt">(</span><span class="hl kwa">System</span><span class="hl opt">/</span>currentTimeMillis<span class="hl opt">)]</span>
    <span class="hl opt">(</span><span class="hl kwa">write-line</span> <span class="hl str">&quot;&gt;ONE Homo sapiens alu&quot;</span> ostream<span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl kwa">fasta-repeat</span> <span class="hl opt">(*</span> n <span class="hl num">2</span><span class="hl opt">)</span> ostream<span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl kwa">write-line</span> <span class="hl str">&quot;&gt;TWO IUB ambiguity codes&quot;</span> ostream<span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl kwa">fasta-random</span> <span class="hl opt">*</span>iub<span class="hl opt">* (*</span> n <span class="hl num">3</span><span class="hl opt">)</span> ostream<span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl kwa">write-line</span> <span class="hl str">&quot;&gt;THREE Homo sapiens frequency&quot;</span> ostream<span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl kwa">fasta-random</span> <span class="hl opt">*</span>homosapiens<span class="hl opt">* (*</span> n <span class="hl num">5</span><span class="hl opt">)</span> ostream<span class="hl opt">)</span>
    <span class="hl opt">(</span>.flush ostream<span class="hl opt">)))</span>
