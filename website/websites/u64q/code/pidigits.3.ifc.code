<span class="hl slc">! The Computer Language Benchmarks Game</span>
<span class="hl slc">! http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">!</span>
<span class="hl slc">! contributed by Andrei Jirnyi</span>
<span class="hl slc">!   Closely based on C codes by Bartlett/Bonzini/Mellor</span>
<span class="hl slc">! compilation: ifort -O2 -xHost -ipo pidigits2.f90 -lgmp</span>

<span class="hl kwa">module</span> gmp_mod
  <span class="hl slc">! declaring the GMP functions...</span>
  <span class="hl kwa">use</span> iso_c_binding
  <span class="hl kwa">type</span><span class="hl opt">,</span> <span class="hl kwd">bind</span><span class="hl opt">(</span>C<span class="hl opt">) ::</span> mpz_t 
     private
     <span class="hl kwa">integer</span> <span class="hl opt">::</span> mp_alloc
     <span class="hl kwa">integer</span> <span class="hl opt">::</span> mp_size
     <span class="hl kwa">type</span><span class="hl opt">(</span>c_ptr<span class="hl opt">) ::</span> mp_d  <span class="hl slc">! a pointer</span>
  <span class="hl kwa">end type</span> mpz_t
  
  <span class="hl kwa">interface</span>
<span class="hl slc">!!      int mpz_cmp (mpz_t op1, mpz_t op2)</span>
     <span class="hl kwa">integer</span><span class="hl opt">(</span>c_int<span class="hl opt">)</span> <span class="hl kwa">function</span>  <span class="hl kwd">mpz_cmp</span><span class="hl opt">(</span>op1<span class="hl opt">,</span> op2<span class="hl opt">)</span> <span class="hl kwd">bind</span><span class="hl opt">(</span>C<span class="hl opt">,</span>name<span class="hl opt">=</span><span class="hl str">'__gmpz_cmp'</span><span class="hl opt">)</span>
       import
       <span class="hl kwa">type</span><span class="hl opt">(</span>mpz_t<span class="hl opt">),</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>inout<span class="hl opt">) ::</span> op1
       <span class="hl kwa">type</span><span class="hl opt">(</span>mpz_t<span class="hl opt">),</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>inout<span class="hl opt">) ::</span> op2
     <span class="hl kwa">end function</span> mpz_cmp
<span class="hl slc">!!   void mpz_init (mpz_t integer)</span>
     <span class="hl kwa">subroutine</span> <span class="hl kwd">mpz_init</span><span class="hl opt">(</span>op<span class="hl opt">)</span> <span class="hl kwd">bind</span><span class="hl opt">(</span>C<span class="hl opt">,</span>name<span class="hl opt">=</span><span class="hl str">'__gmpz_init'</span><span class="hl opt">)</span>
       import
       <span class="hl kwa">type</span><span class="hl opt">(</span>mpz_t<span class="hl opt">),</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>inout<span class="hl opt">) ::</span> op
     <span class="hl kwa">end subroutine</span> mpz_init
<span class="hl slc">!!   void mpz_init_set_ui (mpz_t rop, unsigned long int op)</span>
     <span class="hl kwa">subroutine</span> <span class="hl kwd">mpz_init_set_ui</span><span class="hl opt">(</span>op<span class="hl opt">,</span> N<span class="hl opt">)</span> <span class="hl kwd">bind</span><span class="hl opt">(</span>C<span class="hl opt">,</span>name<span class="hl opt">=</span><span class="hl str">'__gmpz_init_set_ui'</span><span class="hl opt">)</span>
       import
       <span class="hl kwa">type</span><span class="hl opt">(</span>mpz_t<span class="hl opt">),</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>inout<span class="hl opt">) ::</span> op
       <span class="hl kwa">integer</span><span class="hl opt">(</span>c_long<span class="hl opt">),</span> value<span class="hl opt">,</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>in<span class="hl opt">) ::</span> N
     <span class="hl kwa">end subroutine</span> mpz_init_set_ui
<span class="hl slc">!!   void mpz_set (mpz_t rop, mpz_t op1)</span>
     <span class="hl kwa">subroutine</span> <span class="hl kwd">mpz_set</span><span class="hl opt">(</span>op1<span class="hl opt">,</span> op2<span class="hl opt">)</span> <span class="hl kwd">bind</span><span class="hl opt">(</span>C<span class="hl opt">,</span>name<span class="hl opt">=</span><span class="hl str">'__gmpz_set'</span><span class="hl opt">)</span>
       import
       <span class="hl kwa">type</span><span class="hl opt">(</span>mpz_t<span class="hl opt">),</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>inout<span class="hl opt">) ::</span> op1
       <span class="hl kwa">type</span><span class="hl opt">(</span>mpz_t<span class="hl opt">),</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>inout<span class="hl opt">) ::</span> op2
     <span class="hl kwa">end subroutine</span> mpz_set
<span class="hl slc">!!      unsigned long int mpz_get_ui (mpz_t op)</span>
     <span class="hl kwa">integer function</span>  <span class="hl kwd">mpz_get_ui</span><span class="hl opt">(</span>op1<span class="hl opt">)</span> <span class="hl kwd">bind</span><span class="hl opt">(</span>C<span class="hl opt">,</span>name<span class="hl opt">=</span><span class="hl str">'__gmpz_get_ui'</span><span class="hl opt">)</span>
       import
       <span class="hl kwa">type</span><span class="hl opt">(</span>mpz_t<span class="hl opt">),</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>inout<span class="hl opt">) ::</span> op1
     <span class="hl kwa">end function</span> mpz_get_ui
<span class="hl slc">!!   void mpz_add (mpz_t rop, mpz_t op1, mpz_t op2)</span>
     <span class="hl kwa">subroutine</span> <span class="hl kwd">mpz_add</span><span class="hl opt">(</span>op1<span class="hl opt">,</span> op2<span class="hl opt">,</span> op3<span class="hl opt">)</span> <span class="hl kwd">bind</span><span class="hl opt">(</span>C<span class="hl opt">,</span>name<span class="hl opt">=</span><span class="hl str">'__gmpz_add'</span><span class="hl opt">)</span>
       import
       <span class="hl kwa">type</span><span class="hl opt">(</span>mpz_t<span class="hl opt">),</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>inout<span class="hl opt">) ::</span> op1
       <span class="hl kwa">type</span><span class="hl opt">(</span>mpz_t<span class="hl opt">),</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>inout<span class="hl opt">) ::</span> op2
       <span class="hl kwa">type</span><span class="hl opt">(</span>mpz_t<span class="hl opt">),</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>inout<span class="hl opt">) ::</span> op3
     <span class="hl kwa">end subroutine</span> mpz_add
<span class="hl slc">!!   void mpz_mul_2exp (mpz_t rop, mpz_t op1, unsigned long int op2)</span>
     <span class="hl kwa">subroutine</span> <span class="hl kwd">mpz_mul_2exp</span><span class="hl opt">(</span>op1<span class="hl opt">,</span> op2<span class="hl opt">,</span> N<span class="hl opt">)</span> <span class="hl kwd">bind</span><span class="hl opt">(</span>C<span class="hl opt">,</span>name<span class="hl opt">=</span><span class="hl str">'__gmpz_mul_2exp'</span><span class="hl opt">)</span>
       import
       <span class="hl kwa">type</span><span class="hl opt">(</span>mpz_t<span class="hl opt">),</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>inout<span class="hl opt">) ::</span> op1
       <span class="hl kwa">type</span><span class="hl opt">(</span>mpz_t<span class="hl opt">),</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>inout<span class="hl opt">) ::</span> op2
       <span class="hl kwa">integer</span><span class="hl opt">(</span>c_long<span class="hl opt">),</span> value<span class="hl opt">,</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>in<span class="hl opt">) ::</span> N
     <span class="hl kwa">end subroutine</span> mpz_mul_2exp
<span class="hl slc">!!   void mpz_fdiv_qr (mpz_t q, mpz_t r, mpz_t n, mpz_t d)</span>
     <span class="hl kwa">subroutine</span> <span class="hl kwd">mpz_fdiv_qr</span><span class="hl opt">(</span>op1<span class="hl opt">,</span> op2<span class="hl opt">,</span> op3<span class="hl opt">,</span> op4<span class="hl opt">)</span> <span class="hl kwd">bind</span><span class="hl opt">(</span>C<span class="hl opt">,</span>name<span class="hl opt">=</span><span class="hl str">'__gmpz_fdiv_qr'</span><span class="hl opt">)</span>
       import
       <span class="hl kwa">type</span><span class="hl opt">(</span>mpz_t<span class="hl opt">),</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>inout<span class="hl opt">) ::</span> op1
       <span class="hl kwa">type</span><span class="hl opt">(</span>mpz_t<span class="hl opt">),</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>inout<span class="hl opt">) ::</span> op2
       <span class="hl kwa">type</span><span class="hl opt">(</span>mpz_t<span class="hl opt">),</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>inout<span class="hl opt">) ::</span> op3
       <span class="hl kwa">type</span><span class="hl opt">(</span>mpz_t<span class="hl opt">),</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>inout<span class="hl opt">) ::</span> op4
     <span class="hl kwa">end subroutine</span> mpz_fdiv_qr
<span class="hl slc">!!   void mpz_mul_ui (mpz_t rop, mpz_t op1, unsigned long int op2)</span>
     <span class="hl kwa">subroutine</span> <span class="hl kwd">mpz_mul_ui</span><span class="hl opt">(</span>op1<span class="hl opt">,</span> op2<span class="hl opt">,</span> N<span class="hl opt">)</span> <span class="hl kwd">bind</span><span class="hl opt">(</span>C<span class="hl opt">,</span>name<span class="hl opt">=</span><span class="hl str">'__gmpz_mul_ui'</span><span class="hl opt">)</span>
       import
       <span class="hl kwa">type</span><span class="hl opt">(</span>mpz_t<span class="hl opt">),</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>inout<span class="hl opt">) ::</span> op1
       <span class="hl kwa">type</span><span class="hl opt">(</span>mpz_t<span class="hl opt">),</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>inout<span class="hl opt">) ::</span> op2
       <span class="hl kwa">integer</span><span class="hl opt">(</span>c_long<span class="hl opt">),</span> value<span class="hl opt">,</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>in<span class="hl opt">) ::</span> N
     <span class="hl kwa">end subroutine</span> mpz_mul_ui
<span class="hl slc">!!   void mpz_submul_ui (mpz_t rop, mpz_t op1, unsigned long int op2)</span>
     <span class="hl kwa">subroutine</span> <span class="hl kwd">mpz_submul_ui</span><span class="hl opt">(</span>op1<span class="hl opt">,</span> op2<span class="hl opt">,</span> N<span class="hl opt">)</span> <span class="hl kwd">bind</span><span class="hl opt">(</span>C<span class="hl opt">,</span>name<span class="hl opt">=</span><span class="hl str">'__gmpz_submul_ui'</span><span class="hl opt">)</span>
       import
       <span class="hl kwa">type</span><span class="hl opt">(</span>mpz_t<span class="hl opt">),</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>inout<span class="hl opt">) ::</span> op1
       <span class="hl kwa">type</span><span class="hl opt">(</span>mpz_t<span class="hl opt">),</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>inout<span class="hl opt">) ::</span> op2
       <span class="hl kwa">integer</span><span class="hl opt">(</span>c_long<span class="hl opt">),</span> value<span class="hl opt">,</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>in<span class="hl opt">) ::</span> N
     <span class="hl kwa">end subroutine</span> mpz_submul_ui
<span class="hl slc">!!   void mpz_addmul_ui (mpz_t rop, mpz_t op1, unsigned long int op2)     </span>
     <span class="hl kwa">subroutine</span> <span class="hl kwd">mpz_addmul_ui</span><span class="hl opt">(</span>op1<span class="hl opt">,</span> op2<span class="hl opt">,</span> N<span class="hl opt">)</span> <span class="hl kwd">bind</span><span class="hl opt">(</span>C<span class="hl opt">,</span>name<span class="hl opt">=</span><span class="hl str">'__gmpz_addmul_ui'</span><span class="hl opt">)</span>
       import
       <span class="hl kwa">type</span><span class="hl opt">(</span>mpz_t<span class="hl opt">),</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>inout<span class="hl opt">) ::</span> op1
       <span class="hl kwa">type</span><span class="hl opt">(</span>mpz_t<span class="hl opt">),</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>inout<span class="hl opt">) ::</span> op2
       <span class="hl kwa">integer</span><span class="hl opt">(</span>c_long<span class="hl opt">),</span> value<span class="hl opt">,</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>in<span class="hl opt">) ::</span> N
     <span class="hl kwa">end subroutine</span> mpz_addmul_ui
  <span class="hl kwa">end interface</span>
<span class="hl kwa">end module</span> gmp_mod


<span class="hl kwa">program</span> pidigits
  <span class="hl kwa">use</span> iso_c_binding
  <span class="hl kwa">use</span> gmp_mod
  <span class="hl kwa">implicit none</span>

  <span class="hl kwa">integer</span><span class="hl opt">(</span>c_long<span class="hl opt">) ::</span> d<span class="hl opt">,</span> k<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">,</span> i<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">,</span> n<span class="hl opt">=</span><span class="hl num">10000</span>
  <span class="hl kwa">type</span><span class="hl opt">(</span>mpz_t<span class="hl opt">) ::</span> numer<span class="hl opt">,</span> accum<span class="hl opt">,</span> denom<span class="hl opt">,</span> tmp1<span class="hl opt">,</span> tmp2
  <span class="hl kwa">character</span><span class="hl opt">(</span>len<span class="hl opt">=</span><span class="hl num">25</span><span class="hl opt">) ::</span> strout
  <span class="hl kwa">integer</span><span class="hl opt">(</span><span class="hl num">8</span><span class="hl opt">) ::</span> intout<span class="hl opt">=</span><span class="hl num">0</span>

  <span class="hl kwa">character</span><span class="hl opt">(</span>len<span class="hl opt">=</span><span class="hl num">10</span><span class="hl opt">)  ::</span> argv

  <span class="hl kwa">call</span> <span class="hl kwd">getarg</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">,</span> argv<span class="hl opt">)</span>
  <span class="hl kwa">read</span><span class="hl opt">(</span>argv<span class="hl opt">, *)</span> n
  
  <span class="hl kwa">call</span> <span class="hl kwd">mpz_init</span><span class="hl opt">(</span>tmp1<span class="hl opt">);</span>
  <span class="hl kwa">call</span> <span class="hl kwd">mpz_init</span><span class="hl opt">(</span>tmp2<span class="hl opt">);</span>
  <span class="hl kwa">call</span> <span class="hl kwd">mpz_init_set_ui</span><span class="hl opt">(</span>numer<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">);</span>
  <span class="hl kwa">call</span> <span class="hl kwd">mpz_init_set_ui</span><span class="hl opt">(</span>accum<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">);</span>
  <span class="hl kwa">call</span> <span class="hl kwd">mpz_init_set_ui</span><span class="hl opt">(</span>denom<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">);</span>

  <span class="hl kwa">do</span>
     <span class="hl kwa">do</span>
        k <span class="hl opt">=</span> k<span class="hl opt">+</span><span class="hl num">1</span>
        <span class="hl kwa">call</span> <span class="hl kwd">next_term</span><span class="hl opt">(</span>k<span class="hl opt">)</span>
        d <span class="hl opt">=</span> <span class="hl kwd">extract_digit</span><span class="hl opt">()</span>
        <span class="hl kwa">if</span><span class="hl opt">(</span>d <span class="hl opt">/= -</span><span class="hl num">1</span><span class="hl opt">)</span> exit
     <span class="hl kwa">end do</span>
     i <span class="hl opt">=</span> i<span class="hl opt">+</span><span class="hl num">1</span>
     intout <span class="hl opt">=</span> intout<span class="hl opt">*</span><span class="hl num">10</span><span class="hl opt">+</span>d
     <span class="hl kwa">if</span><span class="hl opt">(</span><span class="hl kwd">mod</span><span class="hl opt">(</span>i<span class="hl opt">,</span><span class="hl num">10</span><span class="hl opt">)==</span><span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">then</span>
        <span class="hl kwa">write</span><span class="hl opt">(</span>strout<span class="hl opt">,</span><span class="hl str">'(i10)'</span><span class="hl opt">)</span> i
        <span class="hl kwa">write</span><span class="hl opt">(*,</span><span class="hl str">'(i10.10,a,a)'</span><span class="hl opt">)</span> intout<span class="hl opt">,</span><span class="hl kwd">achar</span><span class="hl opt">(</span><span class="hl num">9</span><span class="hl opt">)//</span><span class="hl str">':'</span><span class="hl opt">,</span><span class="hl kwd">trim</span><span class="hl opt">(</span><span class="hl kwd">adjustl</span><span class="hl opt">(</span>strout<span class="hl opt">))</span>
        intout<span class="hl opt">=</span><span class="hl num">0</span>
     <span class="hl kwa">end if</span>
     <span class="hl kwa">if</span><span class="hl opt">(</span>i <span class="hl opt">&gt;=</span> n<span class="hl opt">)</span> exit
     <span class="hl kwa">call</span> <span class="hl kwd">eliminate_digit</span><span class="hl opt">(</span>d<span class="hl opt">)</span>
  <span class="hl kwa">end do</span>

<span class="hl kwa">contains</span>

  <span class="hl kwa">integer function</span> <span class="hl kwd">extract_digit</span><span class="hl opt">()</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">mpz_cmp</span><span class="hl opt">(</span>numer<span class="hl opt">,</span> accum<span class="hl opt">) &gt;</span> <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">then</span>
       extract_digit <span class="hl opt">= -</span><span class="hl num">1</span>
       <span class="hl kwa">return</span>
    <span class="hl kwa">end if</span>

    <span class="hl kwa">call</span> <span class="hl kwd">mpz_set</span><span class="hl opt">(</span>tmp1<span class="hl opt">,</span>accum<span class="hl opt">)</span>
    <span class="hl kwa">call</span> <span class="hl kwd">mpz_addmul_ui</span><span class="hl opt">(</span>tmp1<span class="hl opt">,</span>numer<span class="hl opt">,</span><span class="hl num">3</span><span class="hl opt">)</span>
    <span class="hl kwa">call</span> <span class="hl kwd">mpz_fdiv_qr</span><span class="hl opt">(</span>tmp1<span class="hl opt">,</span> tmp2<span class="hl opt">,</span> tmp1<span class="hl opt">,</span> denom<span class="hl opt">);</span>
    <span class="hl kwa">call</span> <span class="hl kwd">mpz_add</span><span class="hl opt">(</span>tmp2<span class="hl opt">,</span> tmp2<span class="hl opt">,</span> numer<span class="hl opt">);</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">mpz_cmp</span><span class="hl opt">(</span>tmp2<span class="hl opt">,</span> denom<span class="hl opt">) &gt;=</span> <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">then</span>
       extract_digit <span class="hl opt">= -</span><span class="hl num">1</span>
       <span class="hl kwa">return</span>
    <span class="hl kwa">end if</span>

    extract_digit <span class="hl opt">=</span> <span class="hl kwd">mpz_get_ui</span><span class="hl opt">(</span>tmp1<span class="hl opt">);</span>
    <span class="hl kwa">return</span>
  <span class="hl kwa">end function</span> extract_digit

  <span class="hl kwa">subroutine</span> <span class="hl kwd">next_term</span><span class="hl opt">(</span>k<span class="hl opt">)</span>
    <span class="hl kwa">integer</span><span class="hl opt">(</span>c_long<span class="hl opt">)</span> k
    <span class="hl kwa">integer</span><span class="hl opt">(</span>c_long<span class="hl opt">)</span> y2
    y2 <span class="hl opt">=</span> k<span class="hl opt">*</span><span class="hl num">2</span><span class="hl opt">+</span><span class="hl num">1</span>
    
    <span class="hl kwa">call</span> <span class="hl kwd">mpz_addmul_ui</span><span class="hl opt">(</span>accum<span class="hl opt">,</span> numer<span class="hl opt">,</span> <span class="hl num">2</span><span class="hl opt">);</span>
    <span class="hl kwa">call</span> <span class="hl kwd">mpz_mul_ui</span><span class="hl opt">(</span>accum<span class="hl opt">,</span> accum<span class="hl opt">,</span> y2<span class="hl opt">);</span>
    <span class="hl kwa">call</span> <span class="hl kwd">mpz_mul_ui</span><span class="hl opt">(</span>numer<span class="hl opt">,</span> numer<span class="hl opt">,</span> k<span class="hl opt">);</span>
    <span class="hl kwa">call</span> <span class="hl kwd">mpz_mul_ui</span><span class="hl opt">(</span>denom<span class="hl opt">,</span> denom<span class="hl opt">,</span> y2<span class="hl opt">);</span>

  <span class="hl kwa">end subroutine</span> next_term
  
  <span class="hl kwa">subroutine</span> <span class="hl kwd">eliminate_digit</span><span class="hl opt">(</span>d<span class="hl opt">)</span>
    <span class="hl kwa">integer</span><span class="hl opt">(</span>c_long<span class="hl opt">)</span> d
    <span class="hl kwa">call</span> <span class="hl kwd">mpz_submul_ui</span><span class="hl opt">(</span>accum<span class="hl opt">,</span> denom<span class="hl opt">,</span> d<span class="hl opt">);</span>
    <span class="hl kwa">call</span> <span class="hl kwd">mpz_mul_ui</span><span class="hl opt">(</span>accum<span class="hl opt">,</span> accum<span class="hl opt">,</span> <span class="hl num">10</span><span class="hl opt">);</span>
    <span class="hl kwa">call</span> <span class="hl kwd">mpz_mul_ui</span><span class="hl opt">(</span>numer<span class="hl opt">,</span> numer<span class="hl opt">,</span> <span class="hl num">10</span><span class="hl opt">);</span>
  <span class="hl kwa">end subroutine</span> eliminate_digit

<span class="hl kwa">end program</span> pidigits
