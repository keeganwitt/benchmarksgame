<span class="hl com">(*</span>
<span class="hl com">** The Computer Language Benchmarks Game</span>
<span class="hl com">** http://shootout.alioth.debian.org/</span>
<span class="hl com">**</span>
<span class="hl com">** contributed by Hongwei Xi </span>
<span class="hl com">**</span>
<span class="hl com">** compilation command:</span>
<span class="hl com">**   atscc -O3 -fomit-frame-pointer reverse-complement2.dats -o reverse-complement2</span>
<span class="hl com">*)</span>

<span class="hl com">(* ****** ****** *)</span>

staload <span class="hl str">&quot;libc/SATS/stdio.sats&quot;</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">sta</span> l_iubcmpltarr<span class="hl sym">:</span> addr
<span class="hl kwa">extern prval</span>
  pfbox_iubcmpltarr<span class="hl sym">:</span> vbox <span class="hl sym">(</span>bytes<span class="hl sym">(</span>BYTE_MAX<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span> &#64; l_iubcmpltarr<span class="hl sym">)</span>
<span class="hl kwa">val</span> p_iubcmpltarr <span class="hl sym">=</span> $extval <span class="hl sym">(</span>ptr l_iubcmpltarr<span class="hl sym">,</span> <span class="hl str">&quot;&amp;iubcmpltarr[0]&quot;</span><span class="hl sym">)</span>

<span class="hl kwa">fn</span> iubcmplt_get <span class="hl sym">(</span>b<span class="hl sym">:</span> byte<span class="hl sym">):</span> byte <span class="hl sym">=</span> <span class="hl kwa">let</span>
  <span class="hl kwa">val</span> i <span class="hl sym">=</span> int1_of_byte <span class="hl sym">(</span>b<span class="hl sym">);</span> <span class="hl kwa">prval</span> vbox pf <span class="hl sym">=</span> pfbox_iubcmpltarr <span class="hl kwa">in</span>
  p_iubcmpltarr<span class="hl sym">-&gt;[</span>i<span class="hl sym">]</span>
<span class="hl kwa">end</span> <span class="hl slc">// end of [iubcmplt_get]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl com">(* [reverse buf] reverse-complement the string [buf] in place. *)</span>
<span class="hl kwa">fn</span> reverse_buf <span class="hl sym">{</span>pos<span class="hl sym">,</span>bsz<span class="hl sym">:</span>nat <span class="hl sym">|</span> <span class="hl num">0</span> <span class="hl sym">&lt;</span> pos<span class="hl sym">;</span> pos <span class="hl sym">&lt;=</span> bsz<span class="hl sym">}</span>
  <span class="hl sym">(</span>buf<span class="hl sym">: &amp;</span>bytes<span class="hl sym">(</span>bsz<span class="hl sym">),</span> pos<span class="hl sym">:</span> size_t pos<span class="hl sym">):</span> void <span class="hl sym">=</span> loop <span class="hl sym">(</span>buf<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> pos<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">where</span> <span class="hl sym">{</span>
  <span class="hl kwa">fun</span> loop <span class="hl sym">{</span>i<span class="hl sym">:</span>nat <span class="hl sym">|</span> i <span class="hl sym">&lt;</span> pos<span class="hl sym">} .&lt;</span>pos<span class="hl sym">-</span>i<span class="hl sym">&gt;.</span>
    <span class="hl sym">(</span>buf<span class="hl sym">: &amp;</span>bytes<span class="hl sym">(</span>bsz<span class="hl sym">),</span> i<span class="hl sym">:</span> size_t i<span class="hl sym">,</span> j<span class="hl sym">:</span> size_t <span class="hl sym">(</span>pos<span class="hl sym">-</span>i<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)):</span> void <span class="hl sym">=</span>
    <span class="hl kwa">if</span> i <span class="hl sym">&lt;</span> j <span class="hl kwa">then let</span>
      <span class="hl kwa">val</span> bufi <span class="hl sym">=</span> buf<span class="hl sym">.[</span>i<span class="hl sym">]</span> <span class="hl kwa">and</span> bufj <span class="hl sym">=</span> buf<span class="hl sym">.[</span>j<span class="hl sym">]</span>
      <span class="hl kwa">val</span> <span class="hl sym">() =</span> buf<span class="hl sym">.[</span>i<span class="hl sym">] :=</span> iubcmplt_get bufj <span class="hl kwa">and</span> <span class="hl sym">() =</span> buf<span class="hl sym">.[</span>j<span class="hl sym">] :=</span> iubcmplt_get bufi
    <span class="hl kwa">in</span>
      loop <span class="hl sym">(</span>buf<span class="hl sym">,</span> i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">,</span> j<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span>
    <span class="hl kwa">end</span> <span class="hl com">(* end of [if] *)</span>
  <span class="hl slc">// end of [loop]</span>
<span class="hl sym">}</span> <span class="hl slc">// end of [reverse_buf]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl dir">#define LINE 128</span>
<span class="hl dir">#define BUFSZ 1024</span>

<span class="hl dir">#define WIDTH 60</span>
<span class="hl kwa">macdef</span> WIDTH_sz <span class="hl sym">=</span> size1_of_int1 <span class="hl sym">(</span>WIDTH<span class="hl sym">)</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl slc">// *_unlocked I/O functions are used to implement these two:</span>
<span class="hl kwa">extern fun</span> fputc <span class="hl sym">(</span>c<span class="hl sym">:</span> char<span class="hl sym">,</span> out<span class="hl sym">:</span> FILEref<span class="hl sym">):</span> void <span class="hl sym">=</span> <span class="hl str">&quot;fasta_fputc&quot;</span>
<span class="hl kwa">extern fun</span> fwrite_byte <span class="hl sym">{</span>bsz<span class="hl sym">,</span>n<span class="hl sym">:</span>nat <span class="hl sym">|</span> n <span class="hl sym">&lt;=</span> bsz<span class="hl sym">} {</span>l<span class="hl sym">:</span>addr<span class="hl sym">}</span>
  <span class="hl sym">(</span>pf<span class="hl sym">: !</span>bytes <span class="hl sym">(</span>bsz<span class="hl sym">)</span> &#64; l <span class="hl sym">|</span> p<span class="hl sym">:</span> ptr l<span class="hl sym">,</span> n<span class="hl sym">:</span> size_t n<span class="hl sym">,</span> out<span class="hl sym">:</span> FILEref<span class="hl sym">):&lt;&gt;</span> sizeLte n
  <span class="hl sym">=</span> <span class="hl str">&quot;fasta_fwrite_byte&quot;</span>

<span class="hl slc">// no proofs are provided for the following two theorems:</span>
<span class="hl kwa">extern praxi</span> bytes_v_split <span class="hl sym">{</span>n<span class="hl sym">,</span>i<span class="hl sym">:</span>nat <span class="hl sym">|</span> i <span class="hl sym">&lt;=</span> n<span class="hl sym">}</span>
  <span class="hl sym">{</span>l<span class="hl sym">:</span>addr<span class="hl sym">} (</span>pf<span class="hl sym">:</span> bytes <span class="hl sym">(</span>n<span class="hl sym">)</span> &#64; l<span class="hl sym">):</span> &#64;<span class="hl sym">(</span>bytes <span class="hl sym">(</span>i<span class="hl sym">)</span> &#64; l<span class="hl sym">,</span> bytes <span class="hl sym">(</span>n<span class="hl sym">-</span>i<span class="hl sym">)</span> &#64; l<span class="hl sym">+</span>i<span class="hl sym">)</span>
<span class="hl kwa">extern praxi</span> bytes_v_unsplit <span class="hl sym">{</span>n1<span class="hl sym">,</span>n2<span class="hl sym">:</span>nat<span class="hl sym">}</span>
  <span class="hl sym">{</span>l<span class="hl sym">:</span>addr<span class="hl sym">} (</span>pf1<span class="hl sym">:</span> bytes<span class="hl sym">(</span>n1<span class="hl sym">)</span> &#64; l<span class="hl sym">,</span> pf2<span class="hl sym">:</span> bytes<span class="hl sym">(</span>n2<span class="hl sym">)</span> &#64; l<span class="hl sym">+</span>n1<span class="hl sym">):</span> bytes <span class="hl sym">(</span>n1<span class="hl sym">+</span>n2<span class="hl sym">)</span> &#64; l

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">fun</span> fasta_print <span class="hl sym">{</span>n<span class="hl sym">,</span>sz<span class="hl sym">:</span>nat <span class="hl sym">|</span> n <span class="hl sym">&lt;=</span> sz<span class="hl sym">} {</span>l<span class="hl sym">:</span>addr<span class="hl sym">}</span>
  <span class="hl sym">(</span>pf<span class="hl sym">: !</span>bytes <span class="hl sym">(</span>sz<span class="hl sym">)</span> &#64; l <span class="hl sym">|</span> p<span class="hl sym">:</span> ptr l<span class="hl sym">,</span> n<span class="hl sym">:</span> size_t n<span class="hl sym">):</span> void <span class="hl sym">=</span>
  <span class="hl kwa">if</span> n <span class="hl sym">&gt;</span> WIDTH_sz <span class="hl kwa">then let</span>
    <span class="hl kwa">val</span> _ <span class="hl sym">=</span> fwrite_byte <span class="hl sym">(</span>pf <span class="hl sym">|</span> p<span class="hl sym">,</span> WIDTH_sz<span class="hl sym">,</span> stdout_ref<span class="hl sym">)</span>
    <span class="hl kwa">val</span> <span class="hl sym">() =</span> fputc <span class="hl sym">(</span>'\n'<span class="hl sym">,</span> stdout_ref<span class="hl sym">)</span>
    <span class="hl kwa">prval</span> <span class="hl sym">(</span>pf1<span class="hl sym">,</span> pf2<span class="hl sym">) =</span> bytes_v_split <span class="hl sym">{</span>sz<span class="hl sym">,</span>WIDTH<span class="hl sym">} (</span>pf<span class="hl sym">)</span>
    <span class="hl kwa">val</span> <span class="hl sym">() =</span> fasta_print <span class="hl sym">(</span>pf2 <span class="hl sym">|</span> p <span class="hl sym">+</span> WIDTH_sz<span class="hl sym">,</span> n <span class="hl sym">-</span> WIDTH<span class="hl sym">)</span>
    <span class="hl kwa">val</span> <span class="hl sym">() =</span> pf <span class="hl sym">:=</span> bytes_v_unsplit <span class="hl sym">(</span>pf1<span class="hl sym">,</span> pf2<span class="hl sym">)</span>
  <span class="hl kwa">in</span>
    <span class="hl slc">// empty</span>
  <span class="hl kwa">end else let</span>
    <span class="hl kwa">val</span> _ <span class="hl sym">=</span> fwrite_byte <span class="hl sym">(</span>pf <span class="hl sym">|</span> p<span class="hl sym">,</span> n<span class="hl sym">,</span> stdout_ref<span class="hl sym">)</span>
    <span class="hl kwa">val</span> <span class="hl sym">() =</span> fputc <span class="hl sym">(</span>'\n'<span class="hl sym">,</span> stdout_ref<span class="hl sym">)</span>
  <span class="hl kwa">in</span>
    <span class="hl slc">// empty</span>
  <span class="hl kwa">end</span> <span class="hl slc">// end of [if]    </span>
<span class="hl slc">// end of [fasta_print]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">fn</span> fwrite_buf
  <span class="hl sym">{</span>pos<span class="hl sym">,</span>len<span class="hl sym">,</span>bsz<span class="hl sym">:</span>nat <span class="hl sym">|</span> pos <span class="hl sym">+</span> len <span class="hl sym">&lt;=</span> bsz<span class="hl sym">} {</span>l_buf<span class="hl sym">:</span>addr<span class="hl sym">} (</span>
    pf<span class="hl sym">: !</span>bytes <span class="hl sym">(</span>bsz<span class="hl sym">)</span> &#64; l_buf
  <span class="hl sym">|</span> p_buf<span class="hl sym">:</span> ptr l_buf<span class="hl sym">,</span> pos<span class="hl sym">:</span> size_t pos<span class="hl sym">,</span> len<span class="hl sym">:</span> size_t len<span class="hl sym">,</span> file<span class="hl sym">:</span> FILEref
  <span class="hl sym">) :</span> void <span class="hl sym">= ()</span> <span class="hl kwa">where</span> <span class="hl sym">{</span>
  <span class="hl kwa">prval</span> <span class="hl sym">(</span>pf1<span class="hl sym">,</span> pf2<span class="hl sym">) =</span> bytes_v_split <span class="hl sym">{</span>bsz<span class="hl sym">,</span>pos<span class="hl sym">} (</span>pf<span class="hl sym">)</span>
  <span class="hl kwa">val</span> _ <span class="hl sym">=</span> fwrite_byte <span class="hl sym">(</span>pf2 <span class="hl sym">|</span> p_buf <span class="hl sym">+</span> pos<span class="hl sym">,</span> len<span class="hl sym">,</span> file<span class="hl sym">)</span>
  <span class="hl kwa">prval</span> <span class="hl sym">() =</span> pf <span class="hl sym">:=</span> bytes_v_unsplit <span class="hl sym">(</span>pf1<span class="hl sym">,</span> pf2<span class="hl sym">)</span>
<span class="hl sym">}</span> <span class="hl com">/* end of [fwrite_buf] */</span>

<span class="hl kwa">typedef</span> sizeBtw <span class="hl sym">(</span>lb<span class="hl sym">:</span>int<span class="hl sym">,</span> ub<span class="hl sym">:</span>int<span class="hl sym">) = [</span>i<span class="hl sym">:</span>int <span class="hl sym">|</span> lb <span class="hl sym">&lt;=</span> i<span class="hl sym">;</span> i <span class="hl sym">&lt;</span> ub<span class="hl sym">]</span> size_t i

<span class="hl kwa">fn</span> fread_buf_line
  <span class="hl sym">{</span>pos<span class="hl sym">,</span>len<span class="hl sym">,</span>bsz<span class="hl sym">:</span>nat <span class="hl sym">|</span> <span class="hl num">0</span> <span class="hl sym">&lt;</span> len<span class="hl sym">;</span> pos <span class="hl sym">+</span> len <span class="hl sym">&lt;=</span> bsz<span class="hl sym">} {</span>l_buf<span class="hl sym">:</span>addr<span class="hl sym">} (</span>
    pf<span class="hl sym">: !</span>bytes <span class="hl sym">(</span>bsz<span class="hl sym">)</span> &#64; l_buf
  <span class="hl sym">|</span> p_buf<span class="hl sym">:</span> ptr l_buf<span class="hl sym">,</span> pos<span class="hl sym">:</span> size_t pos<span class="hl sym">,</span> len<span class="hl sym">:</span> int len<span class="hl sym">,</span> inp<span class="hl sym">: &amp;</span>FILE r
  <span class="hl sym">) :</span> sizeBtw <span class="hl sym">(</span>pos<span class="hl sym">,</span> pos<span class="hl sym">+</span>len<span class="hl sym">) =</span> <span class="hl kwa">let</span>
  <span class="hl kwa">prval</span> <span class="hl sym">(</span>pf1<span class="hl sym">,</span> pf2<span class="hl sym">) =</span> bytes_v_split <span class="hl sym">{</span>bsz<span class="hl sym">,</span>pos<span class="hl sym">} (</span>pf<span class="hl sym">)</span>
  <span class="hl kwa">val</span> p_beg <span class="hl sym">=</span> p_buf<span class="hl sym">+</span>pos
  <span class="hl kwa">val</span> <span class="hl sym">() =</span> fgets_exn <span class="hl sym">(</span>file_mode_lte_r_r<span class="hl sym">,</span> pf2 <span class="hl sym">|</span> p_beg<span class="hl sym">,</span> len<span class="hl sym">,</span> inp<span class="hl sym">)</span>
  <span class="hl kwa">val</span> n <span class="hl sym">=</span> strbuf_length <span class="hl sym">(!</span>p_beg<span class="hl sym">)</span>
  <span class="hl kwa">val</span> pos1 <span class="hl sym">=</span> pos <span class="hl sym">+</span> n
<span class="hl kwa">in</span>
  <span class="hl kwa">case</span><span class="hl sym">+</span> <span class="hl num">0</span> <span class="hl kwa">of</span>
  <span class="hl sym">|</span> _ <span class="hl kwa">when</span> n <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl sym">=&gt;</span> <span class="hl kwa">let</span>
      <span class="hl kwa">val</span> c <span class="hl sym">=</span> strbuf_get_char_at <span class="hl sym">(!</span>p_beg<span class="hl sym">,</span> n<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span>
      <span class="hl kwa">prval</span> pf2 <span class="hl sym">=</span> bytes_v_of_strbuf_v <span class="hl sym">(</span>pf2<span class="hl sym">)</span>
      <span class="hl kwa">prval</span> <span class="hl sym">() =</span> pf <span class="hl sym">:=</span> bytes_v_unsplit <span class="hl sym">(</span>pf1<span class="hl sym">,</span> pf2<span class="hl sym">)</span>
    <span class="hl kwa">in</span>
      <span class="hl kwa">if</span> c <span class="hl sym">=</span> '\n' <span class="hl kwa">then</span> pos1 <span class="hl sym">-</span> <span class="hl num">1</span> <span class="hl kwa">else</span> pos1
    <span class="hl kwa">end</span> <span class="hl slc">// end of [_ when ...]</span>
  <span class="hl sym">|</span> _ <span class="hl sym">=&gt;</span> pos1 <span class="hl kwa">where</span> <span class="hl sym">{</span>
      <span class="hl kwa">prval</span> pf2 <span class="hl sym">=</span> bytes_v_of_strbuf_v <span class="hl sym">(</span>pf2<span class="hl sym">)</span>
      <span class="hl kwa">prval</span> <span class="hl sym">() =</span> pf <span class="hl sym">:=</span> bytes_v_unsplit <span class="hl sym">(</span>pf1<span class="hl sym">,</span> pf2<span class="hl sym">)</span>
    <span class="hl sym">}</span> <span class="hl slc">// end of [_]</span>
<span class="hl kwa">end</span> <span class="hl com">(* end of [fread_buf_line] *)</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">implement</span> main <span class="hl sym">(</span>argc<span class="hl sym">,</span> argv<span class="hl sym">) =</span> <span class="hl kwa">let</span>

<span class="hl kwa">macdef</span> GT <span class="hl sym">=</span> byte_of_char '<span class="hl sym">&gt;</span>' 
<span class="hl kwa">fun</span> loop <span class="hl sym">{</span>pos<span class="hl sym">,</span>bsz<span class="hl sym">:</span>nat <span class="hl sym">|</span> bsz <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">} {</span>l_buf<span class="hl sym">:</span>addr<span class="hl sym">} (</span>
    pf_gc<span class="hl sym">:</span> free_gc_v <span class="hl sym">(</span>bsz<span class="hl sym">,</span> l_buf<span class="hl sym">),</span> pf_buf<span class="hl sym">:</span> bytes <span class="hl sym">(</span>bsz<span class="hl sym">)</span> &#64; l_buf
  <span class="hl sym">|</span> inp<span class="hl sym">: &amp;</span>FILE r<span class="hl sym">,</span> p_buf<span class="hl sym">:</span> ptr l_buf<span class="hl sym">,</span> bsz<span class="hl sym">:</span> size_t bsz<span class="hl sym">,</span> pos<span class="hl sym">:</span> size_t pos
  <span class="hl sym">) :</span> void <span class="hl sym">=</span> <span class="hl kwa">begin</span>
  <span class="hl kwa">if</span> pos <span class="hl sym">+</span> LINE <span class="hl sym">&lt;=</span> bsz <span class="hl kwa">then let</span>
    <span class="hl kwa">val</span> pos_new <span class="hl sym">=</span> fread_buf_line <span class="hl sym">(</span>pf_buf <span class="hl sym">|</span> p_buf<span class="hl sym">,</span> pos<span class="hl sym">,</span> LINE<span class="hl sym">,</span> inp<span class="hl sym">)</span>
  <span class="hl kwa">in</span>
    <span class="hl kwa">if</span> pos_new <span class="hl sym">&gt;</span> pos <span class="hl kwa">then begin</span>
      <span class="hl kwa">if</span> p_buf<span class="hl sym">-&gt;[</span>pos<span class="hl sym">] =</span> GT <span class="hl kwa">then let</span>
        <span class="hl kwa">val</span> <span class="hl sym">() =</span> <span class="hl kwa">if</span> pos <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then let</span>
          <span class="hl kwa">val</span> <span class="hl sym">() =</span> reverse_buf <span class="hl sym">(!</span>p_buf<span class="hl sym">,</span> pos<span class="hl sym">)</span> <span class="hl kwa">in</span> fasta_print <span class="hl sym">(</span>pf_buf <span class="hl sym">|</span> p_buf<span class="hl sym">,</span> pos<span class="hl sym">)</span>
        <span class="hl kwa">end</span> <span class="hl slc">// end of [val]</span>
        <span class="hl kwa">val</span> <span class="hl sym">() =</span> fwrite_buf <span class="hl sym">(</span>pf_buf <span class="hl sym">|</span> p_buf<span class="hl sym">,</span> pos<span class="hl sym">,</span> pos_new<span class="hl sym">-</span>pos<span class="hl sym">,</span> stdout_ref<span class="hl sym">)</span>
        <span class="hl kwa">val</span> <span class="hl sym">() =</span> fputc <span class="hl sym">(</span>'\n'<span class="hl sym">,</span> stdout_ref<span class="hl sym">)</span>
      <span class="hl kwa">in</span>
        loop <span class="hl sym">(</span>pf_gc<span class="hl sym">,</span> pf_buf <span class="hl sym">|</span> inp<span class="hl sym">,</span> p_buf<span class="hl sym">,</span> bsz<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">)</span>
      <span class="hl kwa">end else begin</span>
        loop <span class="hl sym">(</span>pf_gc<span class="hl sym">,</span> pf_buf <span class="hl sym">|</span> inp<span class="hl sym">,</span> p_buf<span class="hl sym">,</span> bsz<span class="hl sym">,</span> pos_new<span class="hl sym">)</span>
      <span class="hl kwa">end</span> <span class="hl com">(* end of [if] *)</span>
    <span class="hl kwa">end else let</span>
      <span class="hl kwa">val</span> <span class="hl sym">() =</span> <span class="hl kwa">if</span> pos <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then let</span>
        <span class="hl kwa">val</span> <span class="hl sym">() =</span> reverse_buf <span class="hl sym">(!</span>p_buf<span class="hl sym">,</span> pos<span class="hl sym">)</span>
        <span class="hl kwa">val</span> <span class="hl sym">() =</span> fasta_print <span class="hl sym">(</span>pf_buf <span class="hl sym">|</span> p_buf<span class="hl sym">,</span> pos<span class="hl sym">);</span>
      <span class="hl kwa">in</span>
        <span class="hl slc">// empty</span>
      <span class="hl kwa">end</span> <span class="hl slc">// end of [val]</span>
      <span class="hl kwa">val</span> <span class="hl sym">() =</span> free_gc <span class="hl sym">(</span>pf_gc<span class="hl sym">,</span> pf_buf <span class="hl sym">|</span> p_buf<span class="hl sym">)</span>
    <span class="hl kwa">in</span>
      <span class="hl slc">// empty</span>
    <span class="hl kwa">end</span> <span class="hl com">(* end of [if] *)</span>
  <span class="hl kwa">end else let</span>
    <span class="hl kwa">val</span> bsz <span class="hl sym">=</span> bsz <span class="hl sym">+</span> bsz
    <span class="hl kwa">val</span> <span class="hl sym">(</span>pf_gc<span class="hl sym">,</span> pf_buf <span class="hl sym">|</span> p_buf<span class="hl sym">) =</span> realloc_gc <span class="hl sym">(</span>pf_gc<span class="hl sym">,</span> pf_buf <span class="hl sym">|</span> p_buf<span class="hl sym">,</span> bsz<span class="hl sym">)</span>
    <span class="hl kwa">prval</span> pf_buf <span class="hl sym">=</span> bytes_v_of_b0ytes_v pf_buf
  <span class="hl kwa">in</span>
    loop <span class="hl sym">(</span>pf_gc<span class="hl sym">,</span> pf_buf <span class="hl sym">|</span> inp<span class="hl sym">,</span> p_buf<span class="hl sym">,</span> bsz<span class="hl sym">,</span> pos<span class="hl sym">)</span>
  <span class="hl kwa">end</span> <span class="hl slc">// end of [if]</span>
<span class="hl kwa">end</span> <span class="hl com">(* end of [loop] *)</span>

<span class="hl kwa">val</span> <span class="hl sym">() =</span> iubcmpltarr_initialize <span class="hl sym">()</span> <span class="hl kwa">where</span> <span class="hl sym">{</span>
  <span class="hl kwa">extern fun</span> iubcmpltarr_initialize <span class="hl sym">():</span> void <span class="hl sym">=</span> <span class="hl str">&quot;iubcmpltarr_initialize&quot;</span>
<span class="hl sym">}</span>
<span class="hl kwa">val</span> <span class="hl sym">(</span>pf_gc<span class="hl sym">,</span> pf_buf <span class="hl sym">|</span> p_buf<span class="hl sym">) =</span> malloc_gc <span class="hl sym">(</span>BUFSZ<span class="hl sym">)</span>
<span class="hl kwa">prval</span> pf_buf <span class="hl sym">=</span> bytes_v_of_b0ytes_v pf_buf
<span class="hl kwa">val</span> <span class="hl sym">(</span>pf_stdin <span class="hl sym">|</span> p_stdin<span class="hl sym">) =</span> stdin_get <span class="hl sym">()</span>
<span class="hl kwa">val</span> <span class="hl sym">() =</span> loop <span class="hl sym">(</span>pf_gc<span class="hl sym">,</span> pf_buf <span class="hl sym">| !</span>p_stdin<span class="hl sym">,</span> p_buf<span class="hl sym">,</span> BUFSZ<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">)</span>
<span class="hl kwa">val</span> <span class="hl sym">() =</span> stdin_view_set <span class="hl sym">(</span>pf_stdin <span class="hl sym">|</span> <span class="hl com">(*none*)</span><span class="hl sym">)</span>

<span class="hl kwa">in</span>
  <span class="hl slc">// empty</span>
<span class="hl kwa">end</span> <span class="hl slc">// end of [main]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl sym">%{</span>^

<span class="hl slc">// reuse some existing C code for initialization</span>

<span class="hl dir">#include &lt;errno.h&gt;</span>

static unsigned char iubpairs<span class="hl sym">[][</span><span class="hl num">2</span><span class="hl sym">] = {</span>
    <span class="hl sym">{</span>    'A'<span class="hl sym">,</span>    'T'    <span class="hl sym">},</span>
    <span class="hl sym">{</span>    'C'<span class="hl sym">,</span>    'G'    <span class="hl sym">},</span>
    <span class="hl sym">{</span>    'B'<span class="hl sym">,</span>    'V'    <span class="hl sym">},</span>
    <span class="hl sym">{</span>    'D'<span class="hl sym">,</span>    'H'    <span class="hl sym">},</span>
    <span class="hl sym">{</span>    'K'<span class="hl sym">,</span>    'M'    <span class="hl sym">},</span>
    <span class="hl sym">{</span>    'R'<span class="hl sym">,</span>    'Y'    <span class="hl sym">},</span>
    <span class="hl sym">{</span>    '\000'<span class="hl sym">,</span>   '\000'   <span class="hl sym">}</span>
<span class="hl sym">} ;</span>

<span class="hl dir">#define BYTE_MAX 255</span>
static unsigned char iubcmpltarr<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">+</span>BYTE_MAX<span class="hl sym">];</span>

static inline
ats_void_type iubcmpltarr_initialize <span class="hl sym">() {</span>
  int i<span class="hl sym">;</span>
  <span class="hl kwa">for</span> <span class="hl sym">(</span>i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;=</span> BYTE_MAX<span class="hl sym">;</span> i<span class="hl sym">++) {</span>
    iubcmpltarr<span class="hl sym">[</span>i<span class="hl sym">] = (</span>unsigned char<span class="hl sym">)</span> i<span class="hl sym">;</span>
  <span class="hl sym">}</span>
  <span class="hl kwa">for</span> <span class="hl sym">(</span>i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> iubpairs<span class="hl sym">[</span>i<span class="hl sym">][</span><span class="hl num">0</span><span class="hl sym">] !=</span> '\<span class="hl num">0</span>'<span class="hl sym">;</span> i<span class="hl sym">++) {</span>
    iubcmpltarr<span class="hl sym">[</span>iubpairs<span class="hl sym">[</span>i<span class="hl sym">][</span><span class="hl num">0</span><span class="hl sym">]] =</span> iubpairs<span class="hl sym">[</span>i<span class="hl sym">][</span><span class="hl num">1</span><span class="hl sym">];</span>
    iubcmpltarr<span class="hl sym">[</span>iubpairs<span class="hl sym">[</span>i<span class="hl sym">][</span><span class="hl num">1</span><span class="hl sym">]] =</span> iubpairs<span class="hl sym">[</span>i<span class="hl sym">][</span><span class="hl num">0</span><span class="hl sym">];</span>
    iubcmpltarr<span class="hl sym">[</span>tolower<span class="hl sym">(</span>iubpairs<span class="hl sym">[</span>i<span class="hl sym">][</span><span class="hl num">0</span><span class="hl sym">])] =</span> iubpairs<span class="hl sym">[</span>i<span class="hl sym">][</span><span class="hl num">1</span><span class="hl sym">];</span>
    iubcmpltarr<span class="hl sym">[</span>tolower<span class="hl sym">(</span>iubpairs<span class="hl sym">[</span>i<span class="hl sym">][</span><span class="hl num">1</span><span class="hl sym">])] =</span> iubpairs<span class="hl sym">[</span>i<span class="hl sym">][</span><span class="hl num">0</span><span class="hl sym">];</span>
  <span class="hl sym">}</span>
<span class="hl sym">}</span> <span class="hl com">/* end of [iubcmpltarr_initialize] */</span>

<span class="hl slc">// locked/unlocked: does it really matter?</span>

ats_void_type
fasta_fputc <span class="hl sym">(</span>ats_char_type c<span class="hl sym">,</span> ats_ptr_type out<span class="hl sym">) {</span>
  fputc_unlocked <span class="hl sym">((</span>char<span class="hl sym">)</span>c<span class="hl sym">, (</span>FILE*)out<span class="hl sym">) ;</span> return <span class="hl sym">;</span>
<span class="hl sym">}</span>

ats_size_type
fasta_fwrite_byte
  <span class="hl sym">(</span>ats_ptr_type buf<span class="hl sym">,</span> ats_size_type n<span class="hl sym">,</span> ats_ptr_type fil<span class="hl sym">) {</span>
  return fwrite_unlocked <span class="hl sym">((</span>void*)buf<span class="hl sym">, (</span>size_t<span class="hl sym">)</span><span class="hl num">1</span><span class="hl sym">, (</span>size_t<span class="hl sym">)</span>n<span class="hl sym">, (</span>FILE*)fil<span class="hl sym">) ;</span>
<span class="hl sym">}</span>

<span class="hl sym">%}</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl com">(* end of [reverse-complement2.dats] *)</span>
