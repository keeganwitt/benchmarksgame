<span class="hl com">(* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * Contributed by Troestler Christophe</span>
<span class="hl com"> * Rough parallelization by Mauricio Fernandez</span>
<span class="hl com"> *)</span>

<span class="hl kwa">type</span> <span class="hl str">'a tree = Empty | Node of '</span>a tree <span class="hl opt">*</span> <span class="hl str">'a * '</span>a tree

<span class="hl kwa">let rec</span> make i d <span class="hl opt">=</span>
<span class="hl com">(* if d = 0 then Empty *)</span>
  <span class="hl kwa">if</span> d <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl kwa">then</span> <span class="hl kwd">Node</span><span class="hl opt">(</span><span class="hl kwd">Empty</span><span class="hl opt">,</span> i<span class="hl opt">,</span> <span class="hl kwd">Empty</span><span class="hl opt">)</span>
  <span class="hl kwa">else let</span> i2 <span class="hl opt">=</span> <span class="hl num">2</span> <span class="hl opt">*</span> i <span class="hl kwa">and</span> d <span class="hl opt">=</span> d <span class="hl opt">-</span> <span class="hl num">1</span> <span class="hl kwa">in</span> <span class="hl kwd">Node</span><span class="hl opt">(</span>make <span class="hl opt">(</span>i2 <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">)</span> d<span class="hl opt">,</span> i<span class="hl opt">,</span> make i2 d<span class="hl opt">)</span>

<span class="hl kwa">let rec</span> check <span class="hl opt">=</span> <span class="hl kwa">function</span> <span class="hl kwd">Empty</span> <span class="hl opt">-&gt;</span> <span class="hl num">0</span> | <span class="hl kwd">Node</span><span class="hl opt">(</span>l<span class="hl opt">,</span> i<span class="hl opt">,</span> r<span class="hl opt">) -&gt;</span> i <span class="hl opt">+</span> check l <span class="hl opt">-</span> check r

<span class="hl kwa">let</span> min_depth <span class="hl opt">=</span> <span class="hl num">4</span>
<span class="hl kwa">let</span> max_depth <span class="hl opt">= (</span><span class="hl kwa">let</span> n <span class="hl opt">=</span> <span class="hl kwa">try</span> int_of_string<span class="hl opt">(</span><span class="hl kwc">Array</span><span class="hl opt">.</span>get <span class="hl kwc">Sys</span><span class="hl opt">.</span>argv <span class="hl num">1</span><span class="hl opt">)</span> <span class="hl kwa">with</span> _ <span class="hl opt">-&gt;</span> <span class="hl num">10</span> <span class="hl kwa">in</span>
                 max <span class="hl opt">(</span>min_depth <span class="hl opt">+</span> <span class="hl num">2</span><span class="hl opt">)</span> n<span class="hl opt">)</span>
<span class="hl kwa">let</span> stretch_depth <span class="hl opt">=</span> max_depth <span class="hl opt">+</span> <span class="hl num">1</span>

<span class="hl kwa">let</span> <span class="hl opt">() =</span>
  <span class="hl com">(* Gc.set { (Gc.get()) with Gc.minor_heap_size = 1024 * 1024; max_overhead = -1; }; *)</span>
  <span class="hl kwa">let</span> c <span class="hl opt">=</span> check <span class="hl opt">(</span>make <span class="hl num">0</span> stretch_depth<span class="hl opt">)</span> <span class="hl kwa">in</span>
  <span class="hl kwc">Printf</span><span class="hl opt">.</span>printf <span class="hl str">&quot;stretch tree of depth %i</span><span class="hl esc">\t</span> <span class="hl str">check: %i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> stretch_depth c

<span class="hl kwa">let</span> long_lived_tree <span class="hl opt">=</span> make <span class="hl num">0</span> max_depth

<span class="hl kwa">let rec</span> loop_depths d <span class="hl opt">=</span>
  <span class="hl kwa">let</span> worker d <span class="hl opt">=</span>
    <span class="hl kwa">let</span> niter <span class="hl opt">=</span> <span class="hl num">1</span> <span class="hl kwa">lsl</span> <span class="hl opt">(</span>max_depth <span class="hl opt">-</span> d <span class="hl opt">+</span> min_depth<span class="hl opt">)</span> <span class="hl kwa">and</span> c <span class="hl opt">=</span> <span class="hl kwb">ref</span> <span class="hl num">0</span> <span class="hl kwa">in</span>
    <span class="hl kwa">for</span> i <span class="hl opt">=</span> <span class="hl num">1</span> <span class="hl kwa">to</span> niter <span class="hl kwa">do</span> c <span class="hl opt">:= !</span>c <span class="hl opt">+</span> check<span class="hl opt">(</span>make i d<span class="hl opt">) +</span> check<span class="hl opt">(</span>make <span class="hl opt">(-</span>i<span class="hl opt">)</span> d<span class="hl opt">)</span> <span class="hl kwa">done</span><span class="hl opt">;</span>
    <span class="hl opt">(</span>niter<span class="hl opt">, !</span>c<span class="hl opt">)</span> <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> workers <span class="hl opt">=</span> <span class="hl kwc">Array</span><span class="hl opt">.</span>init <span class="hl opt">((</span>max_depth <span class="hl opt">-</span> d<span class="hl opt">) /</span> <span class="hl num">2</span> <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">)</span>
                  <span class="hl opt">(</span><span class="hl kwa">fun</span> i <span class="hl opt">-&gt;</span> <span class="hl kwa">let</span> d <span class="hl opt">=</span> d <span class="hl opt">+</span> i <span class="hl opt">*</span> <span class="hl num">2</span> <span class="hl kwa">in</span> <span class="hl opt">(</span>d<span class="hl opt">,</span> invoke worker d<span class="hl opt">))</span>
  <span class="hl kwa">in</span> <span class="hl kwc">Array</span><span class="hl opt">.</span>iter
       <span class="hl opt">(</span><span class="hl kwa">fun</span> <span class="hl opt">(</span>d<span class="hl opt">,</span> w<span class="hl opt">) -&gt;</span>
          <span class="hl kwa">let</span> niter<span class="hl opt">,</span> c <span class="hl opt">=</span> w <span class="hl opt">()</span> <span class="hl kwa">in</span>
          <span class="hl kwc">Printf</span><span class="hl opt">.</span>printf <span class="hl str">&quot;%i</span><span class="hl esc">\t</span> <span class="hl str">trees of depth %i</span><span class="hl esc">\t</span> <span class="hl str">check: %i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> <span class="hl opt">(</span><span class="hl num">2</span> <span class="hl opt">*</span> niter<span class="hl opt">)</span> d c<span class="hl opt">)</span>
       workers

<span class="hl com">(* function originally due to Jon D. Harrop *)</span>
<span class="hl kwa">and</span> invoke <span class="hl opt">(</span>f <span class="hl opt">:</span> <span class="hl str">'a -&gt; '</span>b<span class="hl opt">)</span> x <span class="hl opt">:</span> <span class="hl kwb">unit</span> <span class="hl opt">-&gt;</span> <span class="hl str">'b =</span>
<span class="hl str">  let input, output = Unix.pipe() in</span>
<span class="hl str">  match Unix.fork() with</span>
<span class="hl str">  | -1 -&gt; Unix.close input; Unix.close output; (let v = f x in fun () -&gt; v)</span>
<span class="hl str">  | 0 -&gt;</span>
<span class="hl str">      Unix.close input;</span>
<span class="hl str">      let output = Unix.out_channel_of_descr output in</span>
<span class="hl str">      Marshal.to_channel output (try `Res(f x) with e -&gt; `Exn e) [];</span>
<span class="hl str">      close_out output;</span>
<span class="hl str">      exit 0</span>
<span class="hl str">  | pid -&gt;</span>
<span class="hl str">      Unix.close output;</span>
<span class="hl str">      let input = Unix.in_channel_of_descr input in</span>
<span class="hl str">      fun () -&gt;</span>
<span class="hl str">        let v = Marshal.from_channel input in</span>
<span class="hl str">        ignore (Unix.waitpid [] pid);</span>
<span class="hl str">        close_in input;</span>
<span class="hl str">        match v with</span>
<span class="hl str">        | `Res x -&gt; x</span>
<span class="hl str">        | `Exn e -&gt; raise e</span>
<span class="hl str"></span>
<span class="hl str">let () =</span>
<span class="hl str">  flush stdout;</span>
<span class="hl str">  loop_depths min_depth;</span>
<span class="hl str">  Printf.printf &quot;long lived tree of depth %i</span><span class="hl esc">\t</span> <span class="hl str">check: %i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span>
<span class="hl str">    max_depth (check long_lived_tree)</span>
<span class="hl str"></span>
