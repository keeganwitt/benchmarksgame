<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"> * contributed by Rex Kerr</span>
<span class="hl com"> * (based partially on the single-threaded version by Isaac Gouy</span>
<span class="hl com"> * with fixes from Iulian Dragos and Meiko Rachimow)</span>
<span class="hl com"> */</span>

<span class="hl kwa">import</span> java<span class="hl opt">.</span>io<span class="hl opt">.</span>_
<span class="hl kwa">import</span> scala<span class="hl opt">.</span>collection<span class="hl opt">.</span>mutable<span class="hl opt">.</span>_
<span class="hl kwa">import</span> scala<span class="hl opt">.</span>actors<span class="hl opt">.</span>_
<span class="hl kwa">import</span> Actor<span class="hl opt">.</span>loop

<span class="hl kwa">object</span> knucleotide <span class="hl opt">{</span>
  <span class="hl kwa">class</span> <span class="hl kwd">ShiftScan</span><span class="hl opt">(</span>offset<span class="hl opt">:</span>Int<span class="hl opt">,</span> stride<span class="hl opt">:</span>Int<span class="hl opt">)</span> <span class="hl kwa">extends</span> Actor <span class="hl opt">{</span>
    <span class="hl kwa">val</span> bag <span class="hl opt">=</span> <span class="hl kwa">new</span> HashBag
    <span class="hl kwa">def</span> <span class="hl kwd">findFreq</span><span class="hl opt">(</span>s<span class="hl opt">:</span>String<span class="hl opt">,</span> j<span class="hl opt">:</span>Int<span class="hl opt">) = {</span>
      <span class="hl kwa">val</span> n <span class="hl opt">=</span> s<span class="hl opt">.</span>length <span class="hl opt">-</span> j <span class="hl opt">+</span> <span class="hl num">1</span>
      <span class="hl kwa">var</span> i <span class="hl opt">=</span> offset
      <span class="hl kwa">while</span> <span class="hl opt">(</span>i <span class="hl opt">&lt;</span> n<span class="hl opt">) {</span>
        <span class="hl kwd">bag</span><span class="hl opt">(</span>s<span class="hl opt">.</span><span class="hl kwd">substring</span><span class="hl opt">(</span>i<span class="hl opt">,</span>i<span class="hl opt">+</span>j<span class="hl opt">)).</span>inc
        i <span class="hl opt">+=</span> j
      <span class="hl opt">}</span>
      bag
    <span class="hl opt">}</span>
    <span class="hl kwa">def</span> <span class="hl kwd">act</span><span class="hl opt">() {</span> loop <span class="hl opt">{</span> react <span class="hl opt">{</span>
      <span class="hl kwa">case</span> seq <span class="hl opt">:</span> String <span class="hl opt">=&gt;</span>
        sender <span class="hl opt">!</span> <span class="hl kwd">findFreq</span><span class="hl opt">(</span>seq<span class="hl opt">,</span>stride<span class="hl opt">)</span>
        exit
    <span class="hl opt">}}}</span>
  <span class="hl opt">}</span>

  <span class="hl kwa">class</span> <span class="hl kwd">SizeScan</span><span class="hl opt">(</span>length<span class="hl opt">:</span>Int<span class="hl opt">,</span> boss<span class="hl opt">:</span>Actor<span class="hl opt">)</span> <span class="hl kwa">extends</span> Actor <span class="hl opt">{</span>
    <span class="hl kwa">var</span> bags <span class="hl opt">=</span> List<span class="hl opt">[</span>HashBag<span class="hl opt">]()</span>
    <span class="hl kwa">val</span> workers <span class="hl opt">= (</span><span class="hl num">0</span> until length<span class="hl opt">).</span><span class="hl kwd">map</span><span class="hl opt">(</span><span class="hl kwa">new</span> <span class="hl kwd">ShiftScan</span><span class="hl opt">(</span>_<span class="hl opt">,</span>length<span class="hl opt">))</span>
    <span class="hl kwa">def</span> <span class="hl kwd">act</span><span class="hl opt">() {</span> loop <span class="hl opt">{</span> react <span class="hl opt">{</span>
      <span class="hl kwa">case</span> b <span class="hl opt">:</span> HashBag <span class="hl opt">=&gt;</span>
        bags <span class="hl opt">=</span> b <span class="hl opt">::</span> bags
        <span class="hl kwa">if</span> <span class="hl opt">(</span>bags<span class="hl opt">.</span>length<span class="hl opt">==</span>workers<span class="hl opt">.</span>length<span class="hl opt">) {</span>
          boss <span class="hl opt">! (</span>bags<span class="hl opt">.</span>head <span class="hl opt">/:</span> bags<span class="hl opt">.</span>tail<span class="hl opt">)(</span>_ <span class="hl opt">++</span> _<span class="hl opt">)</span>
          exit
        <span class="hl opt">}</span>
      <span class="hl kwa">case</span> seq <span class="hl opt">:</span> String <span class="hl opt">=&gt;</span>
        workers<span class="hl opt">.</span><span class="hl kwd">foreach</span><span class="hl opt">(</span>_<span class="hl opt">.</span>start <span class="hl opt">!</span> seq<span class="hl opt">)</span>
    <span class="hl opt">}}}</span>
  <span class="hl opt">}</span>

  <span class="hl kwa">class</span> <span class="hl kwd">Scan</span><span class="hl opt">(</span>work <span class="hl opt">:</span> String<span class="hl opt">*)</span> <span class="hl kwa">extends</span> Actor <span class="hl opt">{</span>
    <span class="hl kwa">val</span> lengths <span class="hl opt">=</span> work<span class="hl opt">.</span><span class="hl kwd">map</span><span class="hl opt">(</span>_<span class="hl opt">.</span>length<span class="hl opt">)</span>
    <span class="hl kwa">val</span> freqs <span class="hl opt">=</span> work<span class="hl opt">.</span><span class="hl kwd">filter</span><span class="hl opt">(</span><span class="hl kwd">_</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">)==</span><span class="hl str">'*'</span><span class="hl opt">).</span><span class="hl kwd">map</span><span class="hl opt">(</span>_<span class="hl opt">.</span>length<span class="hl opt">)</span>
    <span class="hl kwa">val</span> counts <span class="hl opt">=</span> work<span class="hl opt">.</span><span class="hl kwd">filter</span><span class="hl opt">(</span><span class="hl kwd">_</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">)!=</span><span class="hl str">'*'</span><span class="hl opt">)</span>
    <span class="hl kwa">val</span> scans <span class="hl opt">=</span> <span class="hl kwa">new</span> HashMap<span class="hl opt">[</span>Int<span class="hl opt">,</span>HashBag<span class="hl opt">]()</span>
    <span class="hl kwa">var</span> seq_len <span class="hl opt">=</span> <span class="hl num">0</span>
     
    <span class="hl kwa">def</span> <span class="hl kwd">writeFreqs</span><span class="hl opt">(</span>j <span class="hl opt">:</span> Int<span class="hl opt">) {</span>
      <span class="hl kwa">val</span> n  <span class="hl opt">=</span> <span class="hl num">1.0</span> <span class="hl opt">+</span> seq_len <span class="hl opt">-</span> j
      <span class="hl kwa">val</span> sorted <span class="hl opt">=</span> <span class="hl kwd">scans</span><span class="hl opt">(</span>j<span class="hl opt">).</span>elements<span class="hl opt">.</span>toList<span class="hl opt">.</span><span class="hl kwd">sort</span><span class="hl opt">(</span>
        <span class="hl opt">(</span>a<span class="hl opt">,</span>b<span class="hl opt">) =&gt; (</span>a<span class="hl opt">.</span>value<span class="hl opt">&gt;</span>b<span class="hl opt">.</span>value<span class="hl opt">) || (</span>a<span class="hl opt">.</span>value<span class="hl opt">==</span>b<span class="hl opt">.</span>value <span class="hl opt">&amp;&amp;</span> a<span class="hl opt">.</span>key <span class="hl opt">&gt;</span> b<span class="hl opt">.</span>key<span class="hl opt">)</span>
      <span class="hl opt">)</span>
      sorted<span class="hl opt">.</span><span class="hl kwd">foreach</span><span class="hl opt">(</span>a <span class="hl opt">=&gt;</span> <span class="hl kwd">printf</span><span class="hl opt">(</span>a<span class="hl opt">.</span>key <span class="hl opt">+</span> <span class="hl str">&quot; %.3f</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> a<span class="hl opt">.</span>value <span class="hl opt">*</span> <span class="hl num">100.0</span> <span class="hl opt">/</span> n<span class="hl opt">))</span>
      println
    <span class="hl opt">}</span>
     
    <span class="hl kwa">def</span> <span class="hl kwd">act</span><span class="hl opt">() {</span> loop <span class="hl opt">{</span> react <span class="hl opt">{</span>
      <span class="hl kwa">case</span> seq <span class="hl opt">:</span> String <span class="hl opt">=&gt;</span>
        seq_len <span class="hl opt">=</span> seq<span class="hl opt">.</span>length
        lengths<span class="hl opt">.</span><span class="hl kwd">foreach</span><span class="hl opt">(</span>l <span class="hl opt">=&gt;</span> <span class="hl kwa">new</span> <span class="hl kwd">SizeScan</span><span class="hl opt">(</span>l<span class="hl opt">,</span><span class="hl kwa">this</span><span class="hl opt">).</span><span class="hl kwd">start</span><span class="hl opt">() !</span> seq<span class="hl opt">)</span>
      <span class="hl kwa">case</span> h <span class="hl opt">:</span> HashBag <span class="hl opt">=&gt;</span>
        <span class="hl kwa">val</span> n <span class="hl opt">=</span> h<span class="hl opt">.</span>elements<span class="hl opt">.</span>next<span class="hl opt">.</span>key<span class="hl opt">.</span>length
        <span class="hl kwd">scans</span><span class="hl opt">(</span>n<span class="hl opt">) =</span> h
        <span class="hl kwa">if</span> <span class="hl opt">(</span>lengths<span class="hl opt">.</span><span class="hl kwd">forall</span><span class="hl opt">(</span>scans contains _<span class="hl opt">)) {</span>
          freqs<span class="hl opt">.</span><span class="hl kwd">foreach</span><span class="hl opt">(</span><span class="hl kwd">writeFreqs</span><span class="hl opt">(</span>_<span class="hl opt">))</span>
          counts<span class="hl opt">.</span><span class="hl kwd">foreach</span><span class="hl opt">(</span>s <span class="hl opt">=&gt;</span> <span class="hl kwd">println</span><span class="hl opt">(</span><span class="hl kwd">scans</span><span class="hl opt">(</span>s<span class="hl opt">.</span>length<span class="hl opt">)(</span>s<span class="hl opt">).</span>value <span class="hl opt">+</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span><span class="hl str">&quot;</span> <span class="hl opt">+</span> s<span class="hl opt">))</span>
          exit
        <span class="hl opt">}</span>
    <span class="hl opt">}}}</span>
  <span class="hl opt">}</span>

  <span class="hl kwa">def</span> <span class="hl kwd">readSequence</span><span class="hl opt">(</span>id<span class="hl opt">:</span> String<span class="hl opt">,</span> r<span class="hl opt">:</span> BufferedReader<span class="hl opt">) = {</span>
    <span class="hl kwa">val</span> b <span class="hl opt">=</span> <span class="hl kwa">new</span> java<span class="hl opt">.</span>lang<span class="hl opt">.</span><span class="hl kwd">StringBuilder</span><span class="hl opt">()</span>
     
    <span class="hl kwa">var</span> line <span class="hl opt">=</span> r<span class="hl opt">.</span>readLine
    <span class="hl kwa">while</span> <span class="hl opt">(</span>line <span class="hl opt">!=</span> null<span class="hl opt">) {</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">line</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">)==</span><span class="hl str">'&gt;'</span> <span class="hl opt">&amp;&amp;</span> line<span class="hl opt">.</span><span class="hl kwd">startsWith</span><span class="hl opt">(</span>id<span class="hl opt">))</span> line <span class="hl opt">=</span> null
      <span class="hl kwa">else</span> line <span class="hl opt">=</span> r<span class="hl opt">.</span>readLine
    <span class="hl opt">}</span>
     
    line <span class="hl opt">=</span> r<span class="hl opt">.</span>readLine
    <span class="hl kwa">while</span> <span class="hl opt">(</span>line <span class="hl opt">!=</span> null<span class="hl opt">) {</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">line</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">)==</span><span class="hl str">'&gt;'</span><span class="hl opt">)</span> line <span class="hl opt">=</span> null
      <span class="hl kwa">else</span> <span class="hl opt">{</span>
        b<span class="hl opt">.</span><span class="hl kwd">append</span><span class="hl opt">(</span>line<span class="hl opt">.</span>toUpperCase<span class="hl opt">)</span>
        line <span class="hl opt">=</span> r<span class="hl opt">.</span>readLine
      <span class="hl opt">}</span>
    <span class="hl opt">}</span>
    b<span class="hl opt">.</span>toString
  <span class="hl opt">}</span>
  
  <span class="hl kwa">def</span> <span class="hl kwd">main</span><span class="hl opt">(</span>args<span class="hl opt">:</span> Array<span class="hl opt">[</span>String<span class="hl opt">]) {</span>
    <span class="hl kwa">val</span> r <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">BufferedReader</span><span class="hl opt">(</span><span class="hl kwa">new</span> <span class="hl kwd">InputStreamReader</span><span class="hl opt">(</span>System<span class="hl opt">.</span><span class="hl kwa">in</span><span class="hl opt">))</span>
    <span class="hl kwa">val</span> seq <span class="hl opt">=</span> <span class="hl kwd">readSequence</span><span class="hl opt">(</span><span class="hl str">&quot;&gt;THREE&quot;</span><span class="hl opt">,</span>r<span class="hl opt">)</span>
    r<span class="hl opt">.</span>close
      
    <span class="hl kwa">val</span> scanner <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Scan</span><span class="hl opt">(</span><span class="hl str">&quot;*&quot;</span><span class="hl opt">,</span><span class="hl str">&quot;**&quot;</span><span class="hl opt">,</span><span class="hl str">&quot;GGT&quot;</span><span class="hl opt">,</span><span class="hl str">&quot;GGTA&quot;</span><span class="hl opt">,</span><span class="hl str">&quot;GGTATT&quot;</span><span class="hl opt">,</span>
                           <span class="hl str">&quot;GGTATTTTAATT&quot;</span><span class="hl opt">,</span><span class="hl str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="hl opt">)</span>
    scanner<span class="hl opt">.</span><span class="hl kwd">start</span><span class="hl opt">() !</span> seq
  <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl kwa">class</span> HashBag <span class="hl kwa">extends</span> HashTable<span class="hl opt">[</span>String<span class="hl opt">] {</span>
  <span class="hl kwa">class</span> <span class="hl kwd">Counter</span><span class="hl opt">(</span><span class="hl kwa">val</span> key<span class="hl opt">:</span> String<span class="hl opt">,</span> <span class="hl kwa">var</span> value<span class="hl opt">:</span> Int<span class="hl opt">)</span>
        <span class="hl kwa">extends</span> HashEntry<span class="hl opt">[</span>String<span class="hl opt">,</span>Counter<span class="hl opt">]</span>
  <span class="hl opt">{</span>
    <span class="hl kwa">def</span> inc <span class="hl opt">{</span> value <span class="hl opt">+=</span> <span class="hl num">1</span> <span class="hl opt">}</span>
    <span class="hl kwa">def</span> <span class="hl opt">+=(</span>i<span class="hl opt">:</span>Int<span class="hl opt">) {</span> value <span class="hl opt">+=</span> i <span class="hl opt">}</span>
  <span class="hl opt">}</span>

  <span class="hl kwa">protected type</span> Entry <span class="hl opt">=</span> Counter
  <span class="hl kwa">protected def</span> <span class="hl kwd">entryKey</span><span class="hl opt">(</span>e<span class="hl opt">:</span> Entry<span class="hl opt">) =</span> e<span class="hl opt">.</span>key
  <span class="hl kwa">def</span> elements <span class="hl opt">=</span> entries
   
  <span class="hl kwa">def</span> <span class="hl kwd">apply</span><span class="hl opt">(</span>key<span class="hl opt">:</span>String<span class="hl opt">):</span> Counter <span class="hl opt">= {</span>
    <span class="hl kwa">var</span> bucket <span class="hl opt">=</span> <span class="hl kwd">table</span><span class="hl opt">(</span><span class="hl kwd">index</span><span class="hl opt">(</span><span class="hl kwd">elemHashCode</span><span class="hl opt">(</span>key<span class="hl opt">))).</span>asInstanceOf<span class="hl opt">[</span>Entry<span class="hl opt">]</span>
    <span class="hl kwa">while</span> <span class="hl opt">(</span>bucket ne null<span class="hl opt">) {</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">elemEquals</span><span class="hl opt">(</span><span class="hl kwd">entryKey</span><span class="hl opt">(</span>bucket<span class="hl opt">),</span>key<span class="hl opt">))</span> <span class="hl kwa">return</span> bucket
      bucket <span class="hl opt">=</span> bucket<span class="hl opt">.</span>next
    <span class="hl opt">}</span>
    bucket <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Entry</span><span class="hl opt">(</span>key<span class="hl opt">,</span><span class="hl num">0</span><span class="hl opt">)</span>
    <span class="hl kwd">addEntry</span><span class="hl opt">(</span>bucket<span class="hl opt">)</span>
    bucket
  <span class="hl opt">}</span>
     
  <span class="hl kwa">def</span> <span class="hl opt">++(</span>h <span class="hl opt">:</span> HashBag<span class="hl opt">) :</span> HashBag <span class="hl opt">= {</span>
    h<span class="hl opt">.</span>elements<span class="hl opt">.</span><span class="hl kwd">foreach</span><span class="hl opt">(</span>kv <span class="hl opt">=&gt;</span> <span class="hl kwa">this</span><span class="hl opt">(</span>kv<span class="hl opt">.</span>key<span class="hl opt">) +=</span> kv<span class="hl opt">.</span>value<span class="hl opt">)</span>
    <span class="hl kwa">this</span>
  <span class="hl opt">}</span>
<span class="hl opt">}</span>
