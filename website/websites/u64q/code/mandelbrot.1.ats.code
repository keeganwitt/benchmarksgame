<span class="hl com">(*</span>
<span class="hl com">** The Computer Language Benchmarks Game</span>
<span class="hl com">** http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com">**</span>
<span class="hl com">** contributed by Hongwei Xi </span>
<span class="hl com">**</span>
<span class="hl com">** compilation command:</span>
<span class="hl com">**   atscc -D_GNU_SOURCE -D_ATS_MULTITHREAD -lpthread -msse2 -O3 mandelbrot2.dats -o mandelbrot2</span>
<span class="hl com">**</span>
<span class="hl com">*)</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl ppc">#define TIMES 50</span>
<span class="hl ppc">#define LIMIT 2.0; #define LIMIT2 (LIMIT * LIMIT)</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">staload</span> <span class="hl str">&quot;libc/SATS/SIMD_v2df.sats&quot;</span> <span class="hl slc">// no dynamic loading</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">staload</span> <span class="hl str">&quot;libc/SATS/sched.sats&quot;</span>
<span class="hl kwa">staload</span> <span class="hl kwd">TYPES</span> <span class="hl opt">=</span> <span class="hl str">&quot;libc/sys/SATS/types.sats&quot;</span>
<span class="hl kwa">macdef</span> pid_t <span class="hl opt">=</span> $<span class="hl kwc">TYPES</span><span class="hl opt">.</span>pid_of_int

<span class="hl kwa">staload</span> <span class="hl str">&quot;libats/SATS/parworkshop.sats&quot;</span>
<span class="hl kwa">staload</span> _ <span class="hl opt">=</span> <span class="hl str">&quot;libats/DATS/parworkshop.dats&quot;</span>

<span class="hl com">(* ****** ****** *)</span>

viewtypedef work <span class="hl opt">= () -&lt;</span>lincloptr1<span class="hl opt">&gt;</span> void
viewtypedef <span class="hl kwd">WSptr</span> <span class="hl opt">(</span>l<span class="hl opt">:</span>addr<span class="hl opt">) =</span> <span class="hl kwd">WORKSHOPptr</span> <span class="hl opt">(</span>work<span class="hl opt">,</span> l<span class="hl opt">)</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">fun</span> fwork <span class="hl opt">{</span>l<span class="hl opt">:</span>agz<span class="hl opt">}</span>
  <span class="hl opt">(</span>ws<span class="hl opt">: !</span><span class="hl kwd">WSptr</span> l<span class="hl opt">,</span> wk<span class="hl opt">: &amp;</span>work <span class="hl opt">&gt;&gt;</span> work?<span class="hl opt">):</span> <span class="hl kwb">int</span> <span class="hl opt">=</span> <span class="hl kwa">let</span>
  <span class="hl kwa">val</span> wk <span class="hl opt">=</span> wk
  <span class="hl kwa">val</span> pfun <span class="hl opt">=</span> __cast <span class="hl opt">(</span>wk<span class="hl opt">)</span> where <span class="hl opt">{</span>
    <span class="hl kwa">extern</span> castfn __cast
      <span class="hl opt">(</span>wk<span class="hl opt">: !</span>work <span class="hl opt">&gt;&gt;</span> opt <span class="hl opt">(</span>work<span class="hl opt">,</span> i <span class="hl opt">&gt;=</span> <span class="hl num">1</span><span class="hl opt">)):</span> <span class="hl ppc">#[i:nat] uintptr i</span>
  <span class="hl opt">}</span> <span class="hl slc">// end of [val]</span>
<span class="hl kwa">in</span>
  <span class="hl kwa">if</span> pfun <span class="hl opt">&gt;= (</span>uintptr1_of_uint1<span class="hl opt">)</span><span class="hl num">1U</span> <span class="hl kwa">then let</span>
    prval <span class="hl opt">() =</span> opt_unsome <span class="hl opt">{</span>work<span class="hl opt">} (</span>wk<span class="hl opt">)</span>
    <span class="hl kwa">val</span> <span class="hl opt">() =</span> wk <span class="hl opt">()</span>
    <span class="hl kwa">val</span> <span class="hl opt">() =</span> cloptr_free <span class="hl opt">(</span>wk<span class="hl opt">)</span>
  <span class="hl kwa">in</span>
    <span class="hl num">1</span> <span class="hl slc">// the worker is to continue</span>
  <span class="hl kwa">end else let</span>
    <span class="hl kwa">val</span> u <span class="hl opt">=</span> uint1_of_uintptr1 <span class="hl opt">(</span>pfun<span class="hl opt">)</span>
    <span class="hl kwa">val</span> i <span class="hl opt">=</span> int_of_uint <span class="hl opt">(</span>u<span class="hl opt">)</span>
    prval <span class="hl opt">() =</span> opt_unnone <span class="hl opt">{</span>work<span class="hl opt">} (</span>wk<span class="hl opt">)</span>
    prval <span class="hl opt">() =</span> cleanup_top <span class="hl opt">{</span>work<span class="hl opt">} (</span>wk<span class="hl opt">)</span>
  <span class="hl kwa">in</span>
    ~i <span class="hl slc">// the worker is to pause or quit</span>
  <span class="hl kwa">end</span> <span class="hl slc">// end of [if]</span>
<span class="hl kwa">end</span> <span class="hl slc">// end of [fwork]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl ppc">#define i2d double_of_int</span>

<span class="hl opt">%{^</span>
<span class="hl kwd">ATSinline</span><span class="hl opt">()</span>
ats_void_type output_byte <span class="hl opt">(</span>
  ats_ptr_type <span class="hl kwd">A</span><span class="hl opt">,</span> ats_int_type i<span class="hl opt">,</span> ats_byte_type b
<span class="hl opt">) {</span>
  <span class="hl opt">((</span>char*)<span class="hl kwd">A</span><span class="hl opt">)[</span>i<span class="hl opt">] =</span> b <span class="hl opt">;</span> <span class="hl kwa">return</span> <span class="hl opt">;</span>
<span class="hl opt">}</span> <span class="hl slc">// end of [output_byte]</span>
<span class="hl opt">%}</span>
<span class="hl kwa">extern</span>
<span class="hl kwa">fun</span> output_byte <span class="hl opt">(</span><span class="hl kwd">A</span><span class="hl opt">:</span> ptr<span class="hl opt">,</span> i<span class="hl opt">:</span> <span class="hl kwb">int</span><span class="hl opt">,</span> b<span class="hl opt">:</span> byte<span class="hl opt">):</span> void <span class="hl opt">=</span> <span class="hl str">&quot;output_byte&quot;</span>
<span class="hl slc">// end of [output_byte]</span>

<span class="hl com">(* ****** ****** *)</span>

fn mandelbrot <span class="hl opt">{</span>l<span class="hl opt">:</span>agz<span class="hl opt">}</span>
  <span class="hl opt">(</span>ws<span class="hl opt">: !</span><span class="hl kwd">WSptr</span> l<span class="hl opt">,</span> <span class="hl kwd">A</span><span class="hl opt">:</span> ptr<span class="hl opt">,</span> h<span class="hl opt">:</span> <span class="hl kwb">int</span><span class="hl opt">,</span> w<span class="hl opt">:</span> <span class="hl kwb">int</span><span class="hl opt">):</span> void <span class="hl opt">=</span> <span class="hl kwa">let</span>

  <span class="hl kwa">val</span> h_rcp <span class="hl opt">=</span> <span class="hl num">1.0</span> / <span class="hl opt">(</span>i2d h<span class="hl opt">)</span> <span class="hl kwa">and</span> w_rcp <span class="hl opt">=</span> <span class="hl num">1.0</span> / <span class="hl opt">(</span>i2d w<span class="hl opt">)</span>
  
  <span class="hl kwa">fun</span> test <span class="hl opt">(</span>x<span class="hl opt">:</span> <span class="hl kwb">int</span><span class="hl opt">,</span> y<span class="hl opt">:</span> <span class="hl kwb">int</span><span class="hl opt">):&lt;</span>cloref1<span class="hl opt">&gt;</span> <span class="hl kwb">int</span> <span class="hl opt">=</span> <span class="hl kwa">let</span>
    <span class="hl kwa">val</span> x2 <span class="hl opt">=</span> i2d <span class="hl opt">(</span>x <span class="hl opt">&lt;&lt;</span> <span class="hl num">1</span><span class="hl opt">)</span>
    <span class="hl kwa">val</span> <span class="hl kwd">Cr0</span> <span class="hl opt">=</span> x2 <span class="hl opt">*</span> w_rcp <span class="hl opt">-</span> <span class="hl num">1.5</span>
    <span class="hl kwa">val</span> <span class="hl kwd">Cr1</span> <span class="hl opt">= (</span>x2 <span class="hl opt">+</span> <span class="hl num">2.0</span><span class="hl opt">) *</span> w_rcp <span class="hl opt">-</span> <span class="hl num">1.5</span>
    <span class="hl kwa">val</span> y2 <span class="hl opt">=</span> i2d <span class="hl opt">(</span>y <span class="hl opt">&lt;&lt;</span> <span class="hl num">1</span><span class="hl opt">)</span>
    <span class="hl kwa">val</span> <span class="hl kwd">Ci0</span> <span class="hl opt">=</span> y2 <span class="hl opt">*</span> h_rcp <span class="hl opt">-</span> <span class="hl num">1.0</span>
    <span class="hl kwa">val</span> <span class="hl kwd">Ci1</span> <span class="hl opt">=</span> <span class="hl kwd">Ci0</span>
    <span class="hl kwa">val</span> <span class="hl kwd">Crv</span> <span class="hl opt">=</span> v2df_make <span class="hl opt">(</span><span class="hl kwd">Cr0</span><span class="hl opt">,</span> <span class="hl kwd">Cr1</span><span class="hl opt">)</span>
    <span class="hl kwa">val</span> <span class="hl kwd">Civ</span> <span class="hl opt">=</span> v2df_make <span class="hl opt">(</span><span class="hl kwd">Ci0</span><span class="hl opt">,</span> <span class="hl kwd">Ci1</span><span class="hl opt">)</span>
  
    <span class="hl kwa">fun</span> loop <span class="hl opt">(</span>
        eo<span class="hl opt">:</span> <span class="hl kwb">int</span>
      <span class="hl opt">,</span> <span class="hl kwd">Cr</span><span class="hl opt">:</span> double<span class="hl opt">,</span> <span class="hl kwd">Ci</span><span class="hl opt">:</span> double<span class="hl opt">,</span> <span class="hl kwd">Zr</span><span class="hl opt">:</span> double<span class="hl opt">,</span> <span class="hl kwd">Zi</span><span class="hl opt">:</span> double
      <span class="hl opt">,</span> times<span class="hl opt">:</span> <span class="hl kwb">int</span>
      <span class="hl opt">) :&lt;</span>fun1<span class="hl opt">&gt;</span> <span class="hl kwb">int</span> <span class="hl opt">=</span> <span class="hl kwa">let</span>
      <span class="hl kwa">val</span> <span class="hl kwd">Tr</span> <span class="hl opt">=</span> <span class="hl kwd">Zr</span> <span class="hl opt">*</span> <span class="hl kwd">Zr</span> <span class="hl kwa">and</span> <span class="hl kwd">Ti</span> <span class="hl opt">=</span> <span class="hl kwd">Zi</span> <span class="hl opt">*</span> <span class="hl kwd">Zi</span><span class="hl opt">;</span> <span class="hl kwa">val</span> <span class="hl kwd">Tri</span> <span class="hl opt">=</span> <span class="hl kwd">Tr</span> <span class="hl opt">+</span> <span class="hl kwd">Ti</span>
    <span class="hl kwa">in</span>
      case<span class="hl opt">+</span> <span class="hl num">0</span> <span class="hl kwa">of</span>
      | _ <span class="hl kwa">when</span> <span class="hl kwd">Tri</span> <span class="hl opt">&lt;=</span> <span class="hl kwd">LIMIT2</span> <span class="hl opt">=&gt;</span> <span class="hl kwa">begin</span>
          <span class="hl kwa">if</span> times <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl kwa">then</span> eo <span class="hl kwa">else let</span>
            <span class="hl kwa">val</span> <span class="hl kwd">Zr_new</span> <span class="hl opt">=</span> <span class="hl kwd">Tr</span> <span class="hl opt">-</span> <span class="hl kwd">Ti</span> <span class="hl opt">+</span> <span class="hl kwd">Cr</span><span class="hl opt">;</span> <span class="hl kwa">val</span> <span class="hl kwd">Zi_new</span> <span class="hl opt">=</span> <span class="hl num">2.0</span> <span class="hl opt">* (</span><span class="hl kwd">Zr</span> <span class="hl opt">*</span> <span class="hl kwd">Zi</span><span class="hl opt">) +</span> <span class="hl kwd">Ci</span>
          <span class="hl kwa">in</span>
            loop <span class="hl opt">(</span>eo<span class="hl opt">,</span> <span class="hl kwd">Cr</span><span class="hl opt">,</span> <span class="hl kwd">Ci</span><span class="hl opt">,</span> <span class="hl kwd">Zr_new</span><span class="hl opt">,</span> <span class="hl kwd">Zi_new</span><span class="hl opt">,</span> times<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">)</span>
          <span class="hl kwa">end</span> <span class="hl slc">// end of [if]</span>
        <span class="hl kwa">end</span> <span class="hl slc">// end of [_ when ...]</span>
      | _ <span class="hl opt">=&gt;</span> <span class="hl num">0</span>
    <span class="hl kwa">end</span> <span class="hl slc">// end of [loop]</span>
  
    <span class="hl kwa">fun</span> loopv
      <span class="hl opt">(</span><span class="hl kwd">Zrv</span><span class="hl opt">:</span> v2df<span class="hl opt">,</span> <span class="hl kwd">Ziv</span><span class="hl opt">:</span> v2df<span class="hl opt">,</span> times<span class="hl opt">:</span> <span class="hl kwb">int</span><span class="hl opt">):&lt;</span>cloref1<span class="hl opt">&gt;</span> <span class="hl kwb">int</span> <span class="hl opt">=</span> <span class="hl kwa">let</span>
      <span class="hl kwa">val</span> <span class="hl kwd">Trv</span> <span class="hl opt">=</span> <span class="hl kwd">Zrv</span> <span class="hl opt">*</span> <span class="hl kwd">Zrv</span> <span class="hl kwa">and</span> <span class="hl kwd">Tiv</span> <span class="hl opt">=</span> <span class="hl kwd">Ziv</span> <span class="hl opt">*</span> <span class="hl kwd">Ziv</span><span class="hl opt">;</span> <span class="hl kwa">val</span> <span class="hl kwd">Triv</span> <span class="hl opt">=</span> <span class="hl kwd">Trv</span> <span class="hl opt">+</span> <span class="hl kwd">Tiv</span>
      <span class="hl kwa">val</span> <span class="hl kwd">Tri0</span> <span class="hl opt">=</span> v2df_get_fst <span class="hl opt">(</span><span class="hl kwd">Triv</span><span class="hl opt">)</span> <span class="hl kwa">and</span> <span class="hl kwd">Tri1</span> <span class="hl opt">=</span> v2df_get_snd <span class="hl opt">(</span><span class="hl kwd">Triv</span><span class="hl opt">)</span>
      <span class="hl kwa">val</span> <span class="hl kwd">Zrv_new</span> <span class="hl opt">=</span> <span class="hl kwd">Trv</span> <span class="hl opt">-</span> <span class="hl kwd">Tiv</span> <span class="hl opt">+</span> <span class="hl kwd">Crv</span>
      <span class="hl kwa">val</span> <span class="hl kwd">Ziv_new</span> <span class="hl opt">= (</span>x <span class="hl opt">+</span> x<span class="hl opt">) +</span> <span class="hl kwd">Civ</span>  where <span class="hl opt">{</span> <span class="hl kwa">val</span> x <span class="hl opt">=</span> <span class="hl kwd">Zrv</span> <span class="hl opt">*</span> <span class="hl kwd">Ziv</span> <span class="hl opt">}</span>
    <span class="hl kwa">in</span>
      case<span class="hl opt">+</span> <span class="hl num">0</span> <span class="hl kwa">of</span>
      | _ <span class="hl kwa">when</span> <span class="hl kwd">Tri0</span> <span class="hl opt">&lt;=</span> <span class="hl kwd">LIMIT2</span> <span class="hl opt">=&gt;</span> <span class="hl kwa">begin</span> case<span class="hl opt">+</span> <span class="hl num">0</span> <span class="hl kwa">of</span>
        | _ <span class="hl kwa">when</span> <span class="hl kwd">Tri1</span> <span class="hl opt">&lt;=</span> <span class="hl kwd">LIMIT2</span> <span class="hl opt">=&gt;</span> <span class="hl kwa">begin</span>
            <span class="hl kwa">if</span> times <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl kwa">then</span> <span class="hl num">0x3</span> <span class="hl kwa">else</span> loopv <span class="hl opt">(</span><span class="hl kwd">Zrv_new</span><span class="hl opt">,</span> <span class="hl kwd">Ziv_new</span><span class="hl opt">,</span> times<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">)</span>
          <span class="hl kwa">end</span> <span class="hl slc">// end of [_ when ...]</span>
        | _ <span class="hl opt">=&gt;</span> <span class="hl kwa">begin</span>
            <span class="hl kwa">if</span> times <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl kwa">then</span> <span class="hl num">0x2</span> <span class="hl kwa">else let</span>
              <span class="hl kwa">val</span> <span class="hl kwd">Zr0_new</span> <span class="hl opt">=</span> v2df_get_fst <span class="hl opt">(</span><span class="hl kwd">Zrv_new</span><span class="hl opt">)</span> <span class="hl kwa">and</span> <span class="hl kwd">Zi0_new</span> <span class="hl opt">=</span> v2df_get_fst <span class="hl opt">(</span><span class="hl kwd">Ziv_new</span><span class="hl opt">)</span>
            <span class="hl kwa">in</span>
              loop <span class="hl opt">(</span><span class="hl num">0x2</span><span class="hl com">(*eo*)</span><span class="hl opt">,</span> <span class="hl kwd">Cr0</span><span class="hl opt">,</span> <span class="hl kwd">Ci0</span><span class="hl opt">,</span> <span class="hl kwd">Zr0_new</span><span class="hl opt">,</span> <span class="hl kwd">Zi0_new</span><span class="hl opt">,</span> times<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">)</span>
            <span class="hl kwa">end</span> <span class="hl slc">// end of [if]</span>
          <span class="hl kwa">end</span> <span class="hl slc">// end of [_]</span>
        <span class="hl kwa">end</span> <span class="hl slc">// end of [_ when ...]</span>
      | _ <span class="hl opt">=&gt;</span> <span class="hl kwa">begin</span> case<span class="hl opt">+</span> <span class="hl num">0</span> <span class="hl kwa">of</span>
        | _ <span class="hl kwa">when</span> <span class="hl kwd">Tri1</span> <span class="hl opt">&lt;=</span> <span class="hl kwd">LIMIT2</span> <span class="hl opt">=&gt;</span> <span class="hl kwa">begin</span>
            <span class="hl kwa">if</span> times <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl kwa">then</span> <span class="hl num">0x1</span> <span class="hl kwa">else let</span>
              <span class="hl kwa">val</span> <span class="hl kwd">Zr1_new</span> <span class="hl opt">=</span> v2df_get_snd <span class="hl opt">(</span><span class="hl kwd">Zrv_new</span><span class="hl opt">)</span> <span class="hl kwa">and</span> <span class="hl kwd">Zi1_new</span> <span class="hl opt">=</span> v2df_get_snd <span class="hl opt">(</span><span class="hl kwd">Ziv_new</span><span class="hl opt">)</span>
            <span class="hl kwa">in</span>
              loop <span class="hl opt">(</span><span class="hl num">0x1</span><span class="hl com">(*eo*)</span><span class="hl opt">,</span> <span class="hl kwd">Cr1</span><span class="hl opt">,</span> <span class="hl kwd">Ci1</span><span class="hl opt">,</span> <span class="hl kwd">Zr1_new</span><span class="hl opt">,</span> <span class="hl kwd">Zi1_new</span><span class="hl opt">,</span> times<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">)</span>
            <span class="hl kwa">end</span> <span class="hl slc">// end of [if]</span>
          <span class="hl kwa">end</span> <span class="hl slc">// end of [_ when ...]</span>
        | _ <span class="hl opt">=&gt;</span> <span class="hl num">0x0</span> <span class="hl slc">// return value</span>
        <span class="hl kwa">end</span> <span class="hl slc">// end of [_]</span>
    <span class="hl kwa">end</span> <span class="hl slc">// end of [loopv]</span>
  <span class="hl kwa">in</span>
    loopv <span class="hl opt">(</span>v2df_0_0<span class="hl opt">,</span> v2df_0_0<span class="hl opt">,</span> <span class="hl kwd">TIMES</span><span class="hl opt">)</span>
  <span class="hl kwa">end</span> <span class="hl slc">// end of [test]</span>
  
  <span class="hl ppc">#define i2b byte_of_int</span>
  <span class="hl kwa">fun</span> output_one <span class="hl opt">(</span>
      x<span class="hl opt">:</span> <span class="hl kwb">int</span><span class="hl opt">,</span> y<span class="hl opt">:</span> <span class="hl kwb">int</span><span class="hl opt">,</span> i<span class="hl opt">:</span> <span class="hl kwb">int</span><span class="hl opt">,</span> b<span class="hl opt">:</span> byte<span class="hl opt">,</span> n<span class="hl opt">:</span> natLte <span class="hl num">8</span>
    <span class="hl opt">) :&lt;</span>cloref1<span class="hl opt">&gt;</span> void <span class="hl opt">=</span>
    <span class="hl kwa">if</span> x <span class="hl opt">&lt;</span> w <span class="hl kwa">then let</span>
      <span class="hl kwa">val</span> res <span class="hl opt">=</span> test <span class="hl opt">(</span>x<span class="hl opt">,</span> y<span class="hl opt">);</span> <span class="hl kwa">val</span> res <span class="hl opt">=</span> i2b res <span class="hl kwa">in</span>
      case<span class="hl opt">+</span> <span class="hl num">0</span> <span class="hl kwa">of</span>
      | _ <span class="hl kwa">when</span> n <span class="hl opt">&gt;=</span> <span class="hl num">2</span> <span class="hl opt">=&gt;</span> <span class="hl kwa">begin</span>
          output_one <span class="hl opt">(</span>x <span class="hl opt">+</span> <span class="hl num">2</span><span class="hl opt">,</span> y<span class="hl opt">,</span> i<span class="hl opt">, (</span>b <span class="hl opt">&lt;&lt;</span> <span class="hl num">2</span><span class="hl opt">) +</span> res<span class="hl opt">,</span> n <span class="hl opt">-</span> <span class="hl num">2</span><span class="hl opt">)</span>
        <span class="hl kwa">end</span> <span class="hl slc">// end of [_ when ...]</span>
      | _ <span class="hl com">(*n=0*)</span> <span class="hl opt">=&gt;</span> <span class="hl kwa">let</span>
          <span class="hl kwa">val</span> <span class="hl opt">() =</span> output_byte <span class="hl opt">(</span><span class="hl kwd">A</span><span class="hl opt">,</span> i<span class="hl opt">,</span> b<span class="hl opt">)</span> <span class="hl slc">// A[i] = b</span>
        <span class="hl kwa">in</span>
          output_one <span class="hl opt">(</span>x <span class="hl opt">+</span> <span class="hl num">2</span><span class="hl opt">,</span> y<span class="hl opt">,</span> i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">,</span> res<span class="hl opt">,</span> <span class="hl num">6</span><span class="hl opt">)</span>
        <span class="hl kwa">end</span> <span class="hl slc">// end of [_]</span>
    <span class="hl kwa">end else begin</span>
      output_byte <span class="hl opt">(</span><span class="hl kwd">A</span><span class="hl opt">,</span> i<span class="hl opt">,</span> b <span class="hl opt">&lt;&lt;</span> n<span class="hl opt">)</span>
    <span class="hl kwa">end</span> <span class="hl slc">// end of [if]</span>
  <span class="hl slc">// end of [output_one]</span>
  
  <span class="hl kwa">macdef</span> byte <span class="hl opt">=</span> byte_of_int
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> output_all <span class="hl opt">(</span>ws<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">)</span> where <span class="hl opt">{</span>
    <span class="hl kwa">fun</span> output_all <span class="hl opt">{</span>l<span class="hl opt">:</span>agz<span class="hl opt">}</span>
      <span class="hl opt">(</span>ws<span class="hl opt">: !</span><span class="hl kwd">WSptr</span> l<span class="hl opt">,</span> y<span class="hl opt">:</span> <span class="hl kwb">int</span><span class="hl opt">):&lt;</span>cloref1<span class="hl opt">&gt;</span> void <span class="hl opt">=</span>
      <span class="hl kwa">if</span> y <span class="hl opt">&lt;</span> h <span class="hl kwa">then let</span>
        <span class="hl kwa">val</span> <span class="hl opt">() =</span> workshop_insert_work <span class="hl opt">(</span>ws<span class="hl opt">,</span> f<span class="hl opt">)</span> where <span class="hl opt">{</span>
          <span class="hl kwa">val</span> i <span class="hl opt">=</span> y <span class="hl opt">* ((</span>w <span class="hl opt">+</span> <span class="hl num">7</span><span class="hl opt">)</span> / <span class="hl num">8</span><span class="hl opt">)</span>
          <span class="hl kwa">val</span> f <span class="hl opt">=</span> lam <span class="hl opt">():</span> void <span class="hl opt">=&lt;</span>lincloptr1<span class="hl opt">&gt;</span> output_one <span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> y<span class="hl opt">,</span> i<span class="hl opt">, (</span>byte<span class="hl opt">)</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">8</span><span class="hl opt">)</span>
        <span class="hl opt">}</span> <span class="hl slc">// end of [val]</span>
      <span class="hl kwa">in</span>
        output_all <span class="hl opt">(</span>ws<span class="hl opt">,</span> y<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)</span> 
      <span class="hl kwa">end</span> <span class="hl slc">// end of [if]</span>
    <span class="hl slc">// end of [output_all]</span>
  <span class="hl opt">}</span> <span class="hl slc">// end of [val]  </span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> workshop_wait_blocked_all <span class="hl opt">(</span>ws<span class="hl opt">)</span>
<span class="hl kwa">in</span>
  <span class="hl slc">// nothing</span>
<span class="hl kwa">end</span> <span class="hl slc">// end of [mandelbrot]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">fun</span> ncore_get <span class="hl opt">():</span> <span class="hl kwb">int</span> <span class="hl opt">=</span> <span class="hl kwa">let</span>
  var cs<span class="hl opt">:</span> cpu_set0_t <span class="hl slc">// uninitialized</span>
  prval <span class="hl opt">() =</span> cpusetinit <span class="hl opt">(</span>cs<span class="hl opt">)</span> <span class="hl slc">// not a real initialization</span>
  stavar nset<span class="hl opt">:</span> <span class="hl kwb">int</span>
  <span class="hl kwa">val</span> nset <span class="hl opt">=</span> cpusetsize_get <span class="hl opt">(</span>cs<span class="hl opt">)</span>
  <span class="hl kwa">val</span> err <span class="hl opt">=</span> sched_getaffinity <span class="hl opt">((</span>pid_t<span class="hl opt">)</span><span class="hl num">0</span><span class="hl opt">,</span> nset<span class="hl opt">,</span> cs<span class="hl opt">)</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> assert_errmsg <span class="hl opt">(</span>nset <span class="hl opt">&gt;=</span> <span class="hl num">2</span><span class="hl opt">,</span> <span class="hl ppc">#LOCATION)</span>
  var count<span class="hl opt">:</span> <span class="hl kwd">Nat</span> <span class="hl opt">=</span> <span class="hl num">0</span>
  var i<span class="hl opt">:</span> <span class="hl kwd">Nat</span> <span class="hl slc">// uninitialized</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> <span class="hl kwa">for</span><span class="hl opt">* (</span>cs<span class="hl opt">:</span> cpu_set_t nset<span class="hl opt">) =&gt;</span>
    <span class="hl opt">(</span>i <span class="hl opt">:=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> <span class="hl num">16</span><span class="hl opt">;</span> i <span class="hl opt">:=</span> i <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">)</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">CPU_ISSET</span> <span class="hl opt">(</span>i<span class="hl opt">,</span> cs<span class="hl opt">) &gt;</span> <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">then</span> <span class="hl opt">(</span>count <span class="hl opt">:=</span> count <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">)</span>
  <span class="hl slc">// end of [val]</span>
<span class="hl kwa">in</span>
  count
<span class="hl kwa">end</span> <span class="hl slc">// end of [ncore_get]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl opt">%{^</span>
ats_void_type
print_bytearr <span class="hl opt">(</span>
  ats_ptr_type <span class="hl kwd">A</span><span class="hl opt">,</span> ats_size_type sz
<span class="hl opt">) {</span>
  <span class="hl kwb">int</span> n<span class="hl opt">,</span> lft <span class="hl opt">=</span> sz <span class="hl opt">;</span>
  <span class="hl kwa">while</span> <span class="hl opt">(</span>lft <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">) {</span> n <span class="hl opt">=</span> fwrite <span class="hl opt">(</span><span class="hl kwd">A</span><span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">,</span> lft<span class="hl opt">,</span> stdout<span class="hl opt">) ;</span> lft <span class="hl opt">-=</span> n <span class="hl opt">; }</span>
  <span class="hl kwa">return</span> <span class="hl opt">;</span>
<span class="hl opt">}</span> <span class="hl slc">// end of [print_bytearr]</span>
<span class="hl opt">%}</span> <span class="hl slc">// end of [%{^]</span>


<span class="hl ppc">#define QSZ 1024</span>

<span class="hl kwa">implement</span> main <span class="hl opt">(</span>argc<span class="hl opt">,</span> argv<span class="hl opt">) =</span> <span class="hl kwa">let</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> assert_errmsg_bool1
    <span class="hl opt">(</span>argc <span class="hl opt">&gt;=</span> <span class="hl num">2</span><span class="hl opt">,</span> <span class="hl str">&quot;Exit: wrong command format!</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">)</span>
  <span class="hl kwa">val</span> i <span class="hl opt">=</span> int1_of_string <span class="hl opt">(</span>argv<span class="hl opt">.[</span><span class="hl num">1</span><span class="hl opt">])</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> assert_errmsg_bool1
    <span class="hl opt">(</span>i <span class="hl opt">&gt;=</span> <span class="hl num">2</span><span class="hl opt">,</span> <span class="hl str">&quot;The input integer needs to be at least 2.</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">)</span>
<span class="hl slc">//</span>
  <span class="hl kwa">val</span> ncore <span class="hl opt">=</span> ncore_get <span class="hl opt">()</span>
  <span class="hl kwa">val</span> nworker <span class="hl opt">=</span>
    <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(</span>argc <span class="hl opt">&gt;=</span> <span class="hl num">3</span><span class="hl opt">)</span> <span class="hl kwa">then</span> int_of argv<span class="hl opt">.[</span><span class="hl num">2</span><span class="hl opt">]</span> <span class="hl kwa">else</span> ncore<span class="hl opt">):</span> <span class="hl kwb">int</span>
  <span class="hl slc">// val () = (prerr &quot;nworker = &quot;; prerr nworker; prerr_newline ())</span>
  <span class="hl kwa">val</span> nworker <span class="hl opt">=</span> int1_of_int <span class="hl opt">(</span>nworker<span class="hl opt">)</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> assert_errmsg <span class="hl opt">(</span>nworker <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl ppc">#LOCATION)</span>
  <span class="hl kwa">val</span> ws <span class="hl opt">=</span> workshop_make<span class="hl opt">&lt;</span>work<span class="hl opt">&gt; (</span><span class="hl kwd">QSZ</span><span class="hl opt">,</span> fwork<span class="hl opt">)</span>
  <span class="hl kwa">val</span> _err <span class="hl opt">=</span> workshop_add_nworker <span class="hl opt">(</span>ws<span class="hl opt">,</span> nworker<span class="hl opt">)</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> assert_errmsg <span class="hl opt">(</span>_err <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl ppc">#LOCATION)</span>
<span class="hl slc">//</span>
  <span class="hl kwa">val</span> h <span class="hl opt">=</span> i
  <span class="hl kwa">val</span> w8 <span class="hl opt">= (</span>i <span class="hl opt">+</span> <span class="hl num">7</span><span class="hl opt">)</span> / <span class="hl num">8</span>
  <span class="hl kwa">val</span> sz <span class="hl opt">=</span> h nmul w8
  <span class="hl kwa">val</span> sz <span class="hl opt">=</span> size1_of_int1 <span class="hl opt">(</span>sz<span class="hl opt">)</span>
  <span class="hl kwa">val</span> <span class="hl opt">[</span>l0<span class="hl opt">:</span>addr<span class="hl opt">] (</span>pfgc<span class="hl opt">,</span> pfarr | p<span class="hl opt">) =</span> malloc_gc <span class="hl opt">(</span>sz<span class="hl opt">)</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> mandelbrot <span class="hl opt">(</span>ws<span class="hl opt">,</span> p<span class="hl opt">,</span> i<span class="hl opt">,</span> i<span class="hl opt">)</span>
  <span class="hl kwa">extern fun</span> print_bytearr <span class="hl opt">(</span><span class="hl kwd">A</span><span class="hl opt">:</span> ptr<span class="hl opt">,</span> sz<span class="hl opt">:</span> size_t<span class="hl opt">):</span> void <span class="hl opt">=</span> <span class="hl str">&quot;print_bytearr&quot;</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> <span class="hl kwa">begin</span>
    printf <span class="hl opt">(</span><span class="hl str">&quot;P4</span><span class="hl esc">\n</span><span class="hl str">%i %i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> &#64;<span class="hl opt">(</span>i<span class="hl opt">,</span> i<span class="hl opt">));</span> <span class="hl kwa">if</span> <span class="hl opt">(</span>h <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">then</span> print_bytearr <span class="hl opt">(</span>p<span class="hl opt">,</span> sz<span class="hl opt">)</span>
  <span class="hl kwa">end</span> <span class="hl slc">// end of [val]</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> free_gc <span class="hl opt">(</span>pfgc<span class="hl opt">,</span> pfarr | p<span class="hl opt">)</span>
<span class="hl slc">//</span>
  var i<span class="hl opt">:</span> <span class="hl kwd">Nat</span> <span class="hl opt">=</span> <span class="hl num">0</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> <span class="hl kwa">while</span> <span class="hl opt">(</span>i <span class="hl opt">&lt;</span> nworker<span class="hl opt">)</span> <span class="hl kwa">let</span>
    <span class="hl kwa">val</span> _quit <span class="hl opt">=</span> $extval <span class="hl opt">(</span>work<span class="hl opt">,</span> <span class="hl str">&quot;(void*)0&quot;</span><span class="hl opt">)</span>
    <span class="hl kwa">val</span> <span class="hl opt">() =</span> workshop_insert_work <span class="hl opt">(</span>ws<span class="hl opt">,</span> _quit<span class="hl opt">)</span> <span class="hl kwa">in</span> i <span class="hl opt">:=</span> i <span class="hl opt">+</span> <span class="hl num">1</span>
  <span class="hl kwa">end</span> <span class="hl slc">// end of [val]</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> workshop_wait_quit_all <span class="hl opt">(</span>ws<span class="hl opt">)</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> workshop_free_vt_exn <span class="hl opt">(</span>ws<span class="hl opt">)</span>
<span class="hl kwa">in</span>
  <span class="hl slc">// nothing</span>
<span class="hl kwa">end</span> <span class="hl slc">// end of [main]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl com">(* end of [mandelbrot2.dats] *)</span>
