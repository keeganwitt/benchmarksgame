<span class="hl com">{-  The Computer Language Benchmarks Game </span>
<span class="hl com"></span>
<span class="hl com">    http://benchmarkgame.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">    contributed by Bryan O'Sullivan</span>
<span class="hl com">-}</span>

<span class="hl kwd">import</span> Control<span class="hl opt">.</span>Monad
<span class="hl kwd">import</span> Data<span class="hl opt">.</span>ByteString<span class="hl opt">.</span>Unsafe
<span class="hl kwd">import</span> Foreign<span class="hl opt">.</span>Ptr
<span class="hl kwd">import</span> Foreign<span class="hl opt">.</span>Storable
<span class="hl kwd">import</span> System<span class="hl opt">.</span>Environment
<span class="hl kwd">import qualified</span> Data<span class="hl opt">.</span>ByteString<span class="hl opt">.</span>Char8 <span class="hl kwd">as</span> B
<span class="hl kwd">import qualified</span> Data<span class="hl opt">.</span>ByteString<span class="hl opt">.</span>Lazy<span class="hl opt">.</span>Char8 <span class="hl kwd">as</span> L

main <span class="hl opt">=</span> <span class="hl kwd">do</span>
    n <span class="hl opt">&lt;-</span> <span class="hl kwc">getArgs</span> <span class="hl opt">&gt;&gt;=</span> <span class="hl kwc">readIO</span><span class="hl opt">.</span><span class="hl kwc">head</span>
    writeAlu <span class="hl str">&quot;&gt;ONE Homo sapiens alu&quot;</span> <span class="hl opt">(</span>L<span class="hl opt">.</span><span class="hl kwc">take</span> <span class="hl opt">(</span><span class="hl kwc">fromIntegral</span> n<span class="hl opt">*</span><span class="hl num">2</span><span class="hl opt">) (</span>L<span class="hl opt">.</span><span class="hl kwc">cycle</span> alu<span class="hl opt">))</span>
    make <span class="hl str">&quot;&gt;TWO IUB ambiguity codes&quot;</span> <span class="hl opt">(</span>n<span class="hl opt">*</span><span class="hl num">3</span><span class="hl opt">)</span> iub <span class="hl num">42</span> <span class="hl opt">&gt;&gt;=</span>
      void <span class="hl opt">.</span> make <span class="hl str">&quot;&gt;THREE Homo sapiens frequency&quot;</span> <span class="hl opt">(</span>n<span class="hl opt">*</span><span class="hl num">5</span><span class="hl opt">)</span> homosapiens

writeAlu name s0 <span class="hl opt">=</span> B<span class="hl opt">.</span><span class="hl kwc">putStrLn</span> name <span class="hl opt">&gt;&gt;</span> go s0
 <span class="hl kwd">where</span> go s <span class="hl opt">=</span> L<span class="hl opt">.</span><span class="hl kwc">putStrLn</span> h <span class="hl opt">&gt;&gt;</span> <span class="hl kwc">unless</span> <span class="hl opt">(</span>L<span class="hl opt">.</span><span class="hl kwc">null</span> t<span class="hl opt">) (</span>go t<span class="hl opt">)</span>
         <span class="hl kwd">where</span> <span class="hl opt">(</span>h<span class="hl opt">,</span>t<span class="hl opt">) =</span> L<span class="hl opt">.</span><span class="hl kwc">splitAt</span> <span class="hl num">60</span> s

make name n0 tbl seed0 <span class="hl opt">=</span> <span class="hl kwd">do</span>
  B<span class="hl opt">.</span><span class="hl kwc">putStrLn</span> name
  <span class="hl kwd">let</span> modulus <span class="hl opt">=</span> <span class="hl num">139968</span>
      fill <span class="hl opt">((</span>c<span class="hl opt">,</span>p<span class="hl opt">):</span>cps<span class="hl opt">)</span> j <span class="hl opt">=</span>
	<span class="hl kwd">let</span> <span class="hl opt">!</span>k <span class="hl opt">=</span> <span class="hl kwc">min</span> modulus <span class="hl opt">(</span><span class="hl kwa">floor</span> <span class="hl opt">(</span><span class="hl kwc">fromIntegral</span> modulus <span class="hl opt">* (</span>p<span class="hl opt">::</span><span class="hl kwb">Float</span><span class="hl opt">) +</span> <span class="hl num">1</span><span class="hl opt">))</span>
	<span class="hl kwd">in</span> B<span class="hl opt">.</span><span class="hl kwc">replicate</span> <span class="hl opt">(</span>k <span class="hl opt">-</span> j<span class="hl opt">)</span> c <span class="hl opt">:</span> fill cps k
      fill _ _ <span class="hl opt">= []</span>
      lookupTable <span class="hl opt">=</span> B<span class="hl opt">.</span><span class="hl kwc">concat</span> <span class="hl opt">$</span> fill <span class="hl opt">(</span><span class="hl kwc">scanl1</span> <span class="hl opt">(\(</span>_<span class="hl opt">,</span>p<span class="hl opt">) (</span>c<span class="hl opt">,</span>q<span class="hl opt">) -&gt; (</span>c<span class="hl opt">,</span>p<span class="hl opt">+</span>q<span class="hl opt">))</span> tbl<span class="hl opt">)</span> <span class="hl num">0</span>
      line <span class="hl opt">=</span> B<span class="hl opt">.</span><span class="hl kwc">replicate</span> <span class="hl num">60</span> <span class="hl opt">'\</span><span class="hl num">0</span><span class="hl opt">'</span>
  unsafeUseAsCString line <span class="hl opt">$ \</span>ptr <span class="hl opt">-&gt;</span> <span class="hl kwd">do</span>
    <span class="hl kwd">let</span> make<span class="hl opt">'</span> n <span class="hl opt">!</span>i seed
	    | n <span class="hl opt">&gt; (</span><span class="hl num">0</span><span class="hl opt">::</span><span class="hl kwb">Int</span><span class="hl opt">) =</span> <span class="hl kwd">do</span>
		<span class="hl kwd">let</span> newseed <span class="hl opt">=</span> <span class="hl kwc">rem</span> <span class="hl opt">(</span>seed <span class="hl opt">*</span> <span class="hl num">3877</span> <span class="hl opt">+</span> <span class="hl num">29573</span><span class="hl opt">)</span> modulus
		plusPtr ptr i `poke` unsafeIndex lookupTable newseed
		<span class="hl kwd">if</span> i<span class="hl opt">+</span><span class="hl num">1</span> <span class="hl opt">&gt;=</span> <span class="hl num">60</span>
		    <span class="hl kwd">then</span> puts line <span class="hl num">60</span> <span class="hl opt">&gt;&gt;</span> make<span class="hl opt">' (</span>n<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">)</span> <span class="hl num">0</span> newseed
		    <span class="hl kwd">else</span> make<span class="hl opt">' (</span>n<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">) (</span>i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)</span> newseed
	    | <span class="hl kwc">otherwise</span> <span class="hl opt">=</span> <span class="hl kwc">when</span> <span class="hl opt">(</span>i <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">) (</span>puts line i<span class="hl opt">) &gt;&gt;</span> <span class="hl kwc">return</span> seed
    make<span class="hl opt">'</span> n0 <span class="hl num">0</span> seed0

alu <span class="hl opt">=</span> <span class="hl str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGGGAGGCCGAGGCGGGCGGATCACCTGAGG\</span>
<span class="hl str">    \TCAGGAGTTCGAGACCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAATACAAAAATTAGCCGGG\</span>
<span class="hl str">    \CGTGGTGGCGCGCGCCTGTAATCCCAGCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGGAGGC\</span>
<span class="hl str">    \GGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCCAGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span>

iub <span class="hl opt">= [('</span>a<span class="hl opt">',</span><span class="hl num">0.27</span><span class="hl opt">),('</span>c<span class="hl opt">',</span><span class="hl num">0.12</span><span class="hl opt">),('</span>g<span class="hl opt">',</span><span class="hl num">0.12</span><span class="hl opt">),('</span>t<span class="hl opt">',</span><span class="hl num">0.27</span><span class="hl opt">),('</span>B<span class="hl opt">',</span><span class="hl num">0.02</span><span class="hl opt">)</span>
      <span class="hl opt">,('</span>D<span class="hl opt">',</span><span class="hl num">0.02</span><span class="hl opt">),('</span>H<span class="hl opt">',</span><span class="hl num">0.02</span><span class="hl opt">),('</span>K<span class="hl opt">',</span><span class="hl num">0.02</span><span class="hl opt">),('</span>M<span class="hl opt">',</span><span class="hl num">0.02</span><span class="hl opt">),('</span>N<span class="hl opt">',</span><span class="hl num">0.02</span><span class="hl opt">)</span>
      <span class="hl opt">,('</span>R<span class="hl opt">',</span><span class="hl num">0.02</span><span class="hl opt">),('</span>S<span class="hl opt">',</span><span class="hl num">0.02</span><span class="hl opt">),('</span>V<span class="hl opt">',</span><span class="hl num">0.02</span><span class="hl opt">),('</span>W<span class="hl opt">',</span><span class="hl num">0.02</span><span class="hl opt">),('</span>Y<span class="hl opt">',</span><span class="hl num">0.02</span><span class="hl opt">)]</span>

homosapiens <span class="hl opt">= [('</span>a<span class="hl opt">',</span><span class="hl num">0.3029549426680</span><span class="hl opt">),('</span>c<span class="hl opt">',</span><span class="hl num">0.1979883004921</span><span class="hl opt">)</span>
              <span class="hl opt">,('</span>g<span class="hl opt">',</span><span class="hl num">0.1975473066391</span><span class="hl opt">),('</span>t<span class="hl opt">',</span><span class="hl num">0.3015094502008</span><span class="hl opt">)]</span>

puts bs n <span class="hl opt">=</span> B<span class="hl opt">.</span><span class="hl kwc">putStrLn</span> <span class="hl opt">(</span>B<span class="hl opt">.</span><span class="hl kwc">take</span> n bs<span class="hl opt">)</span>
