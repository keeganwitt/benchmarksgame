<span class="hl slc">;;   The Computer Language Benchmarks Game</span>
<span class="hl slc">;;   http://benchmarksgame.alioth.debian.org/</span>

<span class="hl slc">;; contributed by Andy Fingerhut</span>

<span class="hl opt">(</span><span class="hl kwa">ns</span> regexdna
  <span class="hl opt">(:</span>gen-class<span class="hl opt">)</span>
  <span class="hl opt">(:</span>require <span class="hl opt">[</span>clojure.string <span class="hl opt">:</span>as str<span class="hl opt">])</span>
  <span class="hl opt">(:</span>import <span class="hl opt">(</span><span class="hl kwa">java</span>.util.regex Pattern<span class="hl opt">)))</span>


<span class="hl slc">;; Slightly modified from standard library slurp so that it can read</span>
<span class="hl slc">;; from standard input.</span>

<span class="hl opt">(</span><span class="hl kwa">defn</span> slurp-std-input
  <span class="hl slc">;; Reads the standard input using the encoding enc into a string and</span>
  <span class="hl slc">;; returns it.</span>
  <span class="hl opt">([] (</span><span class="hl kwa">slurp-std-input</span> <span class="hl opt">(</span>.name <span class="hl opt">(</span><span class="hl kwa">java</span>.nio.charset.Charset<span class="hl opt">/</span>defaultCharset<span class="hl opt">))))</span>
  <span class="hl opt">([#</span>^String enc<span class="hl opt">]</span>
     <span class="hl opt">(</span><span class="hl kwa">with-open</span> <span class="hl opt">[</span>r <span class="hl opt">(</span><span class="hl kwa">new</span> java.io.BufferedReader <span class="hl opt">*</span>in<span class="hl opt">*)]</span>
       <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">[</span>sb <span class="hl opt">(</span><span class="hl kwa">new</span> StringBuilder<span class="hl opt">)]</span>
	 <span class="hl opt">(</span><span class="hl kwa">loop</span> <span class="hl opt">[</span>c <span class="hl opt">(</span>.read r<span class="hl opt">)]</span>
	   <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">neg</span>? c<span class="hl opt">)</span>
	     <span class="hl opt">(</span><span class="hl kwa">str</span> sb<span class="hl opt">)</span>
	     <span class="hl opt">(</span><span class="hl kwa">do</span>
	       <span class="hl opt">(</span>.append sb <span class="hl opt">(</span><span class="hl kwa">char</span> c<span class="hl opt">))</span>
	       <span class="hl opt">(</span><span class="hl kwa">recur</span> <span class="hl opt">(</span>.read r<span class="hl opt">)))))))))</span>


<span class="hl opt">(</span><span class="hl kwa">def</span> dna-seq-regexes <span class="hl opt">'(</span>    <span class="hl str">&quot;agggtaaa|tttaccct&quot;</span>
		       <span class="hl str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span>
		       <span class="hl str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span>
		       <span class="hl str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span>
		       <span class="hl str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span>
		       <span class="hl str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span>
		       <span class="hl str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span>
		       <span class="hl str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span>
		       <span class="hl str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span> <span class="hl opt">))</span>


<span class="hl opt">(</span><span class="hl kwa">def</span> iub-codes <span class="hl opt">'( [</span> <span class="hl str">&quot;B&quot;</span>  <span class="hl str">&quot;(c|g|t)&quot;</span>   <span class="hl opt">]</span>
		  <span class="hl opt">[</span> <span class="hl str">&quot;D&quot;</span>  <span class="hl str">&quot;(a|g|t)&quot;</span>   <span class="hl opt">]</span>
		  <span class="hl opt">[</span> <span class="hl str">&quot;H&quot;</span>  <span class="hl str">&quot;(a|c|t)&quot;</span>   <span class="hl opt">]</span>
		  <span class="hl opt">[</span> <span class="hl str">&quot;K&quot;</span>  <span class="hl str">&quot;(g|t)&quot;</span>     <span class="hl opt">]</span>
		  <span class="hl opt">[</span> <span class="hl str">&quot;M&quot;</span>  <span class="hl str">&quot;(a|c)&quot;</span>     <span class="hl opt">]</span>
		  <span class="hl opt">[</span> <span class="hl str">&quot;N&quot;</span>  <span class="hl str">&quot;(a|c|g|t)&quot;</span> <span class="hl opt">]</span>
		  <span class="hl opt">[</span> <span class="hl str">&quot;R&quot;</span>  <span class="hl str">&quot;(a|g)&quot;</span>     <span class="hl opt">]</span>
		  <span class="hl opt">[</span> <span class="hl str">&quot;S&quot;</span>  <span class="hl str">&quot;(c|g)&quot;</span>     <span class="hl opt">]</span>
		  <span class="hl opt">[</span> <span class="hl str">&quot;V&quot;</span>  <span class="hl str">&quot;(a|c|g)&quot;</span>   <span class="hl opt">]</span>
		  <span class="hl opt">[</span> <span class="hl str">&quot;W&quot;</span>  <span class="hl str">&quot;(a|t)&quot;</span>     <span class="hl opt">]</span>
		  <span class="hl opt">[</span> <span class="hl str">&quot;Y&quot;</span>  <span class="hl str">&quot;(c|t)&quot;</span>     <span class="hl opt">] ))</span>


<span class="hl opt">(</span><span class="hl kwa">defn</span> one-replacement <span class="hl opt">[</span>str <span class="hl opt">[</span>iub-str iub-replacement<span class="hl opt">]]</span>
  <span class="hl opt">(</span><span class="hl kwa">str</span><span class="hl opt">/</span>replace str <span class="hl opt">(</span>. Pattern <span class="hl opt">(</span><span class="hl kwa">compile</span> iub-str<span class="hl opt">))</span> iub-replacement<span class="hl opt">))</span>


<span class="hl opt">(</span><span class="hl kwa">defn</span> count-regex-occurrences <span class="hl opt">[</span>re s<span class="hl opt">]</span>
  <span class="hl slc">;; Prepending (?i) to the regexp in Java makes it</span>
  <span class="hl slc">;; case-insensitive.</span>
  <span class="hl opt">[</span>re <span class="hl opt">(</span><span class="hl kwa">count</span> <span class="hl opt">(</span><span class="hl kwa">re-seq</span> <span class="hl opt">(</span>. Pattern <span class="hl opt">(</span><span class="hl kwa">compile</span> <span class="hl opt">(</span><span class="hl kwa">str</span> <span class="hl str">&quot;(?i)&quot;</span> re<span class="hl opt">)))</span>
                     s<span class="hl opt">))])</span>


<span class="hl opt">(</span><span class="hl kwa">defn</span> -main
  <span class="hl opt">[&amp;</span> args<span class="hl opt">]</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">[</span>content <span class="hl opt">(</span><span class="hl kwa">slurp-std-input</span><span class="hl opt">)</span>
        original-len <span class="hl opt">(</span><span class="hl kwa">count</span> content<span class="hl opt">)</span>
        <span class="hl slc">;; I'd prefer if I could use the regexp #&quot;(^&gt;.*)?\n&quot; like the</span>
        <span class="hl slc">;; Perl benchmark does, but that only matches ^ at the beginning</span>
        <span class="hl slc">;; of the string, not at the beginning of a line in the middle</span>
        <span class="hl slc">;; of the string.</span>
        content <span class="hl opt">(</span><span class="hl kwa">str</span><span class="hl opt">/</span>replace content <span class="hl opt">#</span><span class="hl str">&quot;(^&gt;.*|</span><span class="hl esc">\n</span><span class="hl str">&gt;.*)?</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> <span class="hl str">&quot;&quot;</span><span class="hl opt">)</span>
        dna-seq-only-len <span class="hl opt">(</span><span class="hl kwa">count</span> content<span class="hl opt">)]</span>
    
    <span class="hl opt">(</span><span class="hl kwa">doseq</span> <span class="hl opt">[[</span>re num-matches<span class="hl opt">] (</span><span class="hl kwa">pmap</span> <span class="hl opt">#(</span><span class="hl kwa">count-regex-occurrences</span> % content<span class="hl opt">)</span>
                                   dna-seq-regexes<span class="hl opt">)]</span>
      <span class="hl opt">(</span><span class="hl kwa">printf</span> <span class="hl str">&quot;%s %d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> re num-matches<span class="hl opt">))</span>
    
    <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">[</span>content <span class="hl opt">(</span><span class="hl kwa">reduce</span> one-replacement content iub-codes<span class="hl opt">)]</span>
      <span class="hl opt">(</span><span class="hl kwa">printf</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">%d</span><span class="hl esc">\n</span><span class="hl str">%d</span><span class="hl esc">\n</span><span class="hl str">%d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> original-len dna-seq-only-len <span class="hl opt">(</span><span class="hl kwa">count</span> content<span class="hl opt">))))</span>
  <span class="hl opt">(</span><span class="hl kwa">flush</span><span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">shutdown-agents</span><span class="hl opt">))</span>
