<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * contributed by Ricardo Garcia</span>
<span class="hl com"> */</span>

<span class="hl ppc">#include &lt;assert.h&gt;</span>
<span class="hl ppc">#include &lt;pthread.h&gt;</span>
<span class="hl ppc">#include &lt;semaphore.h&gt;</span>
<span class="hl ppc">#include &lt;stdio.h&gt;</span>
<span class="hl ppc">#include &lt;stdlib.h&gt;</span>
<span class="hl ppc">#include &lt;limits.h&gt;</span>

<span class="hl ppc">#define NUM_THREADS (503)</span>

pthread_t threads<span class="hl opt">[</span>NUM_THREADS<span class="hl opt">];</span>   <span class="hl com">/* Threads. */</span>
<span class="hl kwb">int</span> names<span class="hl opt">[</span>NUM_THREADS<span class="hl opt">];</span>      <span class="hl com">/* Thread &quot;names&quot;. */</span>
<span class="hl kwb">long</span> mailboxes<span class="hl opt">[</span>NUM_THREADS<span class="hl opt">];</span>   <span class="hl com">/* Read tokens from here. */</span>
sem_t greenlights<span class="hl opt">[</span>NUM_THREADS<span class="hl opt">];</span>   <span class="hl com">/* Semaphores to signal token presence. */</span>

<span class="hl kwb">void</span> <span class="hl opt">*</span><span class="hl kwd">ring_routine</span><span class="hl opt">(</span><span class="hl kwb">void</span> <span class="hl opt">*</span>myname<span class="hl opt">)</span>
<span class="hl opt">{</span>
   <span class="hl kwb">int</span> name <span class="hl opt">= *(</span><span class="hl kwb">int</span> <span class="hl opt">*)(</span>myname<span class="hl opt">);</span>   <span class="hl com">/* My name (1..NUM_THREADS). */</span>
   <span class="hl kwb">int</span> index <span class="hl opt">=</span> name <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">;</span>      <span class="hl com">/* My index for the arrays. */</span>
   <span class="hl kwb">int</span> next <span class="hl opt">= (</span>index <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">) %</span> NUM_THREADS<span class="hl opt">;</span>
   <span class="hl kwb">long</span> token<span class="hl opt">;</span>

   <span class="hl kwa">for</span> <span class="hl opt">(;;) {</span>
      <span class="hl kwd">sem_wait</span><span class="hl opt">(</span>greenlights <span class="hl opt">+</span> index<span class="hl opt">);</span>   <span class="hl com">/* Wait for a new token. */</span>
      token <span class="hl opt">=</span> mailboxes<span class="hl opt">[</span>index<span class="hl opt">];</span>   <span class="hl com">/* Get token. */</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>token <span class="hl opt">==</span> <span class="hl num">0</span><span class="hl opt">) {</span>      <span class="hl com">/* Game over. */</span>
         <span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;%d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> name<span class="hl opt">);</span>
         <span class="hl kwd">exit</span><span class="hl opt">(</span>EXIT_SUCCESS<span class="hl opt">);</span>
      <span class="hl opt">}</span>
      mailboxes<span class="hl opt">[</span>next<span class="hl opt">] =</span> token <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">;</span>   <span class="hl com">/* Decrement and pass. */</span>
      <span class="hl kwd">sem_post</span><span class="hl opt">(</span>greenlights <span class="hl opt">+</span> next<span class="hl opt">);</span>   <span class="hl com">/* Green ligh for next thr. */</span>
   <span class="hl opt">}</span>
   <span class="hl kwa">return</span> NULL<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span> <span class="hl opt">*</span>argv<span class="hl opt">[])</span>
<span class="hl opt">{</span>
   <span class="hl kwb">long</span> first_token<span class="hl opt">;</span>
   <span class="hl kwb">int</span> ii<span class="hl opt">;</span>
   pthread_attr_t attributes<span class="hl opt">;</span>
   sem_t permanent_red<span class="hl opt">;</span>
   
   <span class="hl com">/* Read first token. */</span>
   first_token <span class="hl opt">=</span> <span class="hl kwd">strtol</span><span class="hl opt">(</span>argv<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">],</span> NULL<span class="hl opt">,</span> <span class="hl num">10</span><span class="hl opt">);</span>

   <span class="hl com">/* Initialize attributes. */</span>
   <span class="hl kwd">pthread_attr_init</span><span class="hl opt">(&amp;</span>attributes<span class="hl opt">);</span>
   <span class="hl kwd">pthread_attr_setdetachstate</span><span class="hl opt">(&amp;</span>attributes<span class="hl opt">,</span> PTHREAD_CREATE_DETACHED<span class="hl opt">);</span>
   <span class="hl kwd">pthread_attr_setstacksize</span><span class="hl opt">(&amp;</span>attributes<span class="hl opt">,</span> PTHREAD_STACK_MIN<span class="hl opt">);</span>

   <span class="hl com">/* Initialize arrays and create threads. */</span>
   <span class="hl kwa">for</span> <span class="hl opt">(</span>ii <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> ii <span class="hl opt">&lt;</span> NUM_THREADS<span class="hl opt">; ++</span>ii<span class="hl opt">) {</span>
      names<span class="hl opt">[</span>ii<span class="hl opt">] =</span> ii <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span>
      <span class="hl kwd">sem_init</span><span class="hl opt">(</span>greenlights <span class="hl opt">+</span> ii<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">);</span>
      <span class="hl kwd">pthread_create</span><span class="hl opt">(</span>threads <span class="hl opt">+</span> ii<span class="hl opt">, &amp;</span>attributes<span class="hl opt">,</span> ring_routine<span class="hl opt">,</span> names <span class="hl opt">+</span> ii<span class="hl opt">);</span>
   <span class="hl opt">}</span>

   <span class="hl com">/* Pass first token. */</span>
   mailboxes<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] =</span> first_token<span class="hl opt">;</span>
   <span class="hl kwd">sem_post</span><span class="hl opt">(</span>greenlights <span class="hl opt">+</span> <span class="hl num">0</span><span class="hl opt">);</span>

   <span class="hl com">/* Wait forever. */</span>
   <span class="hl kwd">sem_init</span><span class="hl opt">(&amp;</span>permanent_red<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">);</span>
   <span class="hl kwd">sem_wait</span><span class="hl opt">(&amp;</span>permanent_red<span class="hl opt">);</span>
   <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
