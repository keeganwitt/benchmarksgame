<span class="hl com">/*</span>
<span class="hl com">   The Computer Language Benchmarks Game</span>
<span class="hl com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com">   contributed by Michael Stover</span>
<span class="hl com"> */</span>

<span class="hl kwa">import</span> java<span class="hl opt">.</span>io<span class="hl opt">.</span>BufferedReader<span class="hl opt">;</span>
<span class="hl kwa">import</span> java<span class="hl opt">.</span>io<span class="hl opt">.</span>IOException<span class="hl opt">;</span>
<span class="hl kwa">import</span> java<span class="hl opt">.</span>io<span class="hl opt">.</span>InputStreamReader<span class="hl opt">;</span>
<span class="hl kwa">import</span> java<span class="hl opt">.</span>util<span class="hl opt">.</span>HashMap<span class="hl opt">;</span>
<span class="hl kwa">import</span> java<span class="hl opt">.</span>util<span class="hl opt">.</span>Map<span class="hl opt">;</span>
<span class="hl kwa">import</span> java<span class="hl opt">.</span>util<span class="hl opt">.</span>regex<span class="hl opt">.</span>Matcher<span class="hl opt">;</span>
<span class="hl kwa">import</span> java<span class="hl opt">.</span>util<span class="hl opt">.</span>regex<span class="hl opt">.</span>Pattern<span class="hl opt">;</span>

<span class="hl kwa">public final class</span> regexdna <span class="hl opt">{</span>

   <span class="hl kwa">private static final</span> Map<span class="hl opt">&lt;</span>String<span class="hl opt">,</span> String<span class="hl opt">&gt;</span> replacements <span class="hl opt">=</span> <span class="hl kwa">new</span> HashMap<span class="hl opt">&lt;</span>String<span class="hl opt">,</span> String<span class="hl opt">&gt;();</span>

   <span class="hl kwa">static</span> <span class="hl opt">{</span>

      replacements<span class="hl opt">.</span><span class="hl kwd">put</span><span class="hl opt">(</span><span class="hl str">&quot;W&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(a|t)&quot;</span><span class="hl opt">);</span>
      replacements<span class="hl opt">.</span><span class="hl kwd">put</span><span class="hl opt">(</span><span class="hl str">&quot;Y&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(c|t)&quot;</span><span class="hl opt">);</span>
      replacements<span class="hl opt">.</span><span class="hl kwd">put</span><span class="hl opt">(</span><span class="hl str">&quot;K&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(g|t)&quot;</span><span class="hl opt">);</span>
      replacements<span class="hl opt">.</span><span class="hl kwd">put</span><span class="hl opt">(</span><span class="hl str">&quot;M&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(a|c)&quot;</span><span class="hl opt">);</span>
      replacements<span class="hl opt">.</span><span class="hl kwd">put</span><span class="hl opt">(</span><span class="hl str">&quot;S&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(c|g)&quot;</span><span class="hl opt">);</span>
      replacements<span class="hl opt">.</span><span class="hl kwd">put</span><span class="hl opt">(</span><span class="hl str">&quot;R&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(a|g)&quot;</span><span class="hl opt">);</span>
      replacements<span class="hl opt">.</span><span class="hl kwd">put</span><span class="hl opt">(</span><span class="hl str">&quot;B&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(c|g|t)&quot;</span><span class="hl opt">);</span>
      replacements<span class="hl opt">.</span><span class="hl kwd">put</span><span class="hl opt">(</span><span class="hl str">&quot;D&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(a|g|t)&quot;</span><span class="hl opt">);</span>
      replacements<span class="hl opt">.</span><span class="hl kwd">put</span><span class="hl opt">(</span><span class="hl str">&quot;V&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(a|c|g)&quot;</span><span class="hl opt">);</span>
      replacements<span class="hl opt">.</span><span class="hl kwd">put</span><span class="hl opt">(</span><span class="hl str">&quot;H&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(a|c|t)&quot;</span><span class="hl opt">);</span>
      replacements<span class="hl opt">.</span><span class="hl kwd">put</span><span class="hl opt">(</span><span class="hl str">&quot;N&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(a|c|g|t)&quot;</span><span class="hl opt">);</span>
   <span class="hl opt">}</span>

   <span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">main</span><span class="hl opt">(</span>String<span class="hl opt">[]</span> args<span class="hl opt">)</span> <span class="hl kwa">throws</span> IOException <span class="hl opt">{</span>
      BufferedReader r <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">BufferedReader</span><span class="hl opt">(</span><span class="hl kwa">new</span> <span class="hl kwd">InputStreamReader</span><span class="hl opt">(</span>System<span class="hl opt">.</span><span class="hl kwa">in</span><span class="hl opt">,</span>
            <span class="hl str">&quot;US-ASCII&quot;</span><span class="hl opt">));</span>
      StringBuffer sb <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">StringBuffer</span><span class="hl opt">();</span>
      String line<span class="hl opt">;</span>
      <span class="hl kwa">while</span> <span class="hl opt">((</span>line <span class="hl opt">=</span> r<span class="hl opt">.</span><span class="hl kwd">readLine</span><span class="hl opt">()) !=</span> null<span class="hl opt">) {</span>
         sb<span class="hl opt">.</span><span class="hl kwd">append</span><span class="hl opt">(</span>line<span class="hl opt">);</span>
         sb<span class="hl opt">.</span><span class="hl kwd">append</span><span class="hl opt">(</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">);</span>
      <span class="hl opt">}</span>

      <span class="hl kwb">int</span> initialLength <span class="hl opt">=</span> sb<span class="hl opt">.</span><span class="hl kwd">length</span><span class="hl opt">();</span>

      <span class="hl kwa">final</span> String sequence <span class="hl opt">=</span> sb<span class="hl opt">.</span><span class="hl kwd">toString</span><span class="hl opt">().</span><span class="hl kwd">replaceAll</span><span class="hl opt">(</span><span class="hl str">&quot;&gt;.*</span><span class="hl esc">\n</span><span class="hl str">|</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;&quot;</span><span class="hl opt">);</span>

      <span class="hl kwb">int</span> codeLength <span class="hl opt">=</span> sequence<span class="hl opt">.</span><span class="hl kwd">length</span><span class="hl opt">();</span>

      String<span class="hl opt">[]</span> variants <span class="hl opt">= {</span> <span class="hl str">&quot;agggtaaa|tttaccct&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span><span class="hl opt">,</span>
            <span class="hl str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span><span class="hl opt">,</span>
            <span class="hl str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span><span class="hl opt">,</span>
            <span class="hl str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span><span class="hl opt">,</span>
            <span class="hl str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span> <span class="hl opt">};</span>

      <span class="hl kwa">final</span> Map<span class="hl opt">&lt;</span>String<span class="hl opt">,</span> Integer<span class="hl opt">&gt;</span> results <span class="hl opt">=</span> <span class="hl kwa">new</span> HashMap<span class="hl opt">&lt;</span>String<span class="hl opt">,</span> Integer<span class="hl opt">&gt;();</span>
      ThreadGroup tg <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">ThreadGroup</span><span class="hl opt">(</span><span class="hl str">&quot;regexWork&quot;</span><span class="hl opt">);</span>
      <span class="hl kwa">for</span> <span class="hl opt">(</span>String v <span class="hl opt">:</span> variants<span class="hl opt">) {</span>
         <span class="hl kwa">final</span> String variant <span class="hl opt">=</span> v<span class="hl opt">;</span>
         <span class="hl kwa">new</span> <span class="hl kwd">Thread</span><span class="hl opt">(</span>tg<span class="hl opt">,</span> v<span class="hl opt">) {</span>
            <span class="hl kwc">&#64;Override</span>
            <span class="hl kwa">public</span> <span class="hl kwb">void</span> <span class="hl kwd">run</span><span class="hl opt">() {</span>
               <span class="hl kwb">int</span> count <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
               Matcher m <span class="hl opt">=</span> Pattern<span class="hl opt">.</span><span class="hl kwd">compile</span><span class="hl opt">(</span>variant<span class="hl opt">).</span><span class="hl kwd">matcher</span><span class="hl opt">(</span>sequence<span class="hl opt">);</span>
               <span class="hl kwa">while</span> <span class="hl opt">(</span>m<span class="hl opt">.</span><span class="hl kwd">find</span><span class="hl opt">()) {</span>
                  count<span class="hl opt">++;</span>
               <span class="hl opt">}</span>
               results<span class="hl opt">.</span><span class="hl kwd">put</span><span class="hl opt">(</span>variant<span class="hl opt">,</span> count<span class="hl opt">);</span>
            <span class="hl opt">}</span>
         <span class="hl opt">}.</span><span class="hl kwd">start</span><span class="hl opt">();</span>
      <span class="hl opt">}</span>
      Thread<span class="hl opt">[]</span> threads <span class="hl opt">=</span> <span class="hl kwa">new</span> Thread<span class="hl opt">[</span>variants<span class="hl opt">.</span>length<span class="hl opt">];</span>
      tg<span class="hl opt">.</span><span class="hl kwd">enumerate</span><span class="hl opt">(</span>threads<span class="hl opt">);</span>
      <span class="hl kwa">for</span> <span class="hl opt">(</span>Thread t <span class="hl opt">:</span> threads<span class="hl opt">) {</span>
         <span class="hl kwa">try</span> <span class="hl opt">{</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>t <span class="hl opt">!=</span> null<span class="hl opt">) {</span>
               t<span class="hl opt">.</span><span class="hl kwd">join</span><span class="hl opt">();</span>
            <span class="hl opt">}</span>
         <span class="hl opt">}</span> <span class="hl kwa">catch</span> <span class="hl opt">(</span>InterruptedException e<span class="hl opt">) {</span>
            <span class="hl slc">// noop</span>
         <span class="hl opt">}</span>
      <span class="hl opt">}</span>
      tg<span class="hl opt">.</span><span class="hl kwd">destroy</span><span class="hl opt">();</span>
      <span class="hl kwa">for</span> <span class="hl opt">(</span>String variant <span class="hl opt">:</span> variants<span class="hl opt">) {</span>
         System<span class="hl opt">.</span>out<span class="hl opt">.</span><span class="hl kwd">println</span><span class="hl opt">(</span>variant <span class="hl opt">+</span> <span class="hl str">&quot; &quot;</span> <span class="hl opt">+</span> results<span class="hl opt">.</span><span class="hl kwd">get</span><span class="hl opt">(</span>variant<span class="hl opt">));</span>
      <span class="hl opt">}</span>
      StringBuffer buf <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">StringBuffer</span><span class="hl opt">();</span>
      Matcher m <span class="hl opt">=</span> Pattern<span class="hl opt">.</span><span class="hl kwd">compile</span><span class="hl opt">(</span><span class="hl str">&quot;[WYKMSRBDVHN]&quot;</span><span class="hl opt">).</span><span class="hl kwd">matcher</span><span class="hl opt">(</span>sequence<span class="hl opt">);</span>
      <span class="hl kwa">while</span> <span class="hl opt">(</span>m<span class="hl opt">.</span><span class="hl kwd">find</span><span class="hl opt">()) {</span>
         m<span class="hl opt">.</span><span class="hl kwd">appendReplacement</span><span class="hl opt">(</span>buf<span class="hl opt">,</span> <span class="hl str">&quot;&quot;</span><span class="hl opt">);</span>
         buf<span class="hl opt">.</span><span class="hl kwd">append</span><span class="hl opt">(</span>replacements<span class="hl opt">.</span><span class="hl kwd">get</span><span class="hl opt">(</span>m<span class="hl opt">.</span><span class="hl kwd">group</span><span class="hl opt">()));</span>
      <span class="hl opt">}</span>
      m<span class="hl opt">.</span><span class="hl kwd">appendTail</span><span class="hl opt">(</span>buf<span class="hl opt">);</span>

      System<span class="hl opt">.</span>out<span class="hl opt">.</span><span class="hl kwd">println</span><span class="hl opt">();</span>
      System<span class="hl opt">.</span>out<span class="hl opt">.</span><span class="hl kwd">println</span><span class="hl opt">(</span>initialLength<span class="hl opt">);</span>
      System<span class="hl opt">.</span>out<span class="hl opt">.</span><span class="hl kwd">println</span><span class="hl opt">(</span>codeLength<span class="hl opt">);</span>
      System<span class="hl opt">.</span>out<span class="hl opt">.</span><span class="hl kwd">println</span><span class="hl opt">(</span>buf<span class="hl opt">.</span><span class="hl kwd">length</span><span class="hl opt">());</span>
   <span class="hl opt">}</span>
<span class="hl opt">}</span>
