<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">contributed by Seth Heeren</span>
<span class="hl com">*/</span>
<span class="hl ppc">#include &lt;iostream&gt;</span>
<span class="hl ppc">#include &lt;string&gt;</span>

<span class="hl kwa">using</span> std<span class="hl opt">::</span>string<span class="hl opt">;</span>
<span class="hl kwa">using</span> std<span class="hl opt">::</span>cin<span class="hl opt">;</span>
<span class="hl kwa">using</span> std<span class="hl opt">::</span>cout<span class="hl opt">;</span>
<span class="hl kwa">using</span> std<span class="hl opt">::</span>getline<span class="hl opt">;</span>
<span class="hl kwa">using</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>

<span class="hl kwc">template</span> <span class="hl opt">&lt;</span>typename Ch<span class="hl opt">&gt;</span> <span class="hl kwc">inline</span> Ch <span class="hl kwd">complement</span><span class="hl opt">(</span>Ch c<span class="hl opt">)</span>
<span class="hl opt">{</span>
    <span class="hl kwa">switch</span> <span class="hl opt">(</span>c<span class="hl opt">)</span>
    <span class="hl opt">{</span>
        <span class="hl slc">// IDEA: Reorder branches after profiling?</span>
        <span class="hl slc">// IDEA: (gcc probably compiles the switch into a jump table)</span>
        <span class="hl kwa">case</span> <span class="hl str">'t'</span><span class="hl opt">:</span> <span class="hl kwa">case</span> <span class="hl str">'T'</span><span class="hl opt">:</span>             <span class="hl slc">//  7707842</span>
        <span class="hl kwa">case</span> <span class="hl str">'u'</span><span class="hl opt">:</span> <span class="hl kwa">case</span> <span class="hl str">'U'</span><span class="hl opt">:</span> <span class="hl kwa">return</span> <span class="hl str">'A'</span><span class="hl opt">;</span> <span class="hl slc">//</span>
        <span class="hl kwa">case</span> <span class="hl str">'a'</span><span class="hl opt">:</span> <span class="hl kwa">case</span> <span class="hl str">'A'</span><span class="hl opt">:</span> <span class="hl kwa">return</span> <span class="hl str">'T'</span><span class="hl opt">;</span> <span class="hl slc">//  7592592</span>
        <span class="hl kwa">case</span> <span class="hl str">'g'</span><span class="hl opt">:</span> <span class="hl kwa">case</span> <span class="hl str">'G'</span><span class="hl opt">:</span> <span class="hl kwa">return</span> <span class="hl str">'C'</span><span class="hl opt">;</span> <span class="hl slc">//  5552804</span>
        <span class="hl kwa">case</span> <span class="hl str">'c'</span><span class="hl opt">:</span> <span class="hl kwa">case</span> <span class="hl str">'C'</span><span class="hl opt">:</span> <span class="hl kwa">return</span> <span class="hl str">'G'</span><span class="hl opt">;</span> <span class="hl slc">//  5442702</span>
        <span class="hl kwa">case</span> <span class="hl str">'v'</span><span class="hl opt">:</span> <span class="hl kwa">case</span> <span class="hl str">'V'</span><span class="hl opt">:</span> <span class="hl kwa">return</span> <span class="hl str">'B'</span><span class="hl opt">;</span> <span class="hl slc">//   205714</span>
        <span class="hl kwa">case</span> <span class="hl str">'s'</span><span class="hl opt">:</span> <span class="hl kwa">case</span> <span class="hl str">'S'</span><span class="hl opt">:</span> <span class="hl kwa">return</span> <span class="hl str">'S'</span><span class="hl opt">;</span> <span class="hl slc">//   200078</span>
        <span class="hl kwa">case</span> <span class="hl str">'h'</span><span class="hl opt">:</span> <span class="hl kwa">case</span> <span class="hl str">'H'</span><span class="hl opt">:</span> <span class="hl kwa">return</span> <span class="hl str">'D'</span><span class="hl opt">;</span> <span class="hl slc">//   197260</span>
        <span class="hl kwa">case</span> <span class="hl str">'w'</span><span class="hl opt">:</span> <span class="hl kwa">case</span> <span class="hl str">'W'</span><span class="hl opt">:</span> <span class="hl kwa">return</span> <span class="hl str">'W'</span><span class="hl opt">;</span> <span class="hl slc">//   194442</span>
        <span class="hl kwa">case</span> <span class="hl str">'r'</span><span class="hl opt">:</span> <span class="hl kwa">case</span> <span class="hl str">'R'</span><span class="hl opt">:</span> <span class="hl kwa">return</span> <span class="hl str">'Y'</span><span class="hl opt">;</span> <span class="hl slc">//   194442</span>
        <span class="hl kwa">case</span> <span class="hl str">'m'</span><span class="hl opt">:</span> <span class="hl kwa">case</span> <span class="hl str">'M'</span><span class="hl opt">:</span> <span class="hl kwa">return</span> <span class="hl str">'K'</span><span class="hl opt">;</span> <span class="hl slc">//   174716</span>
        <span class="hl kwa">case</span> <span class="hl str">'y'</span><span class="hl opt">:</span> <span class="hl kwa">case</span> <span class="hl str">'Y'</span><span class="hl opt">:</span> <span class="hl kwa">return</span> <span class="hl str">'R'</span><span class="hl opt">;</span> <span class="hl slc">//   157808</span>
        <span class="hl kwa">case</span> <span class="hl str">'k'</span><span class="hl opt">:</span> <span class="hl kwa">case</span> <span class="hl str">'K'</span><span class="hl opt">:</span> <span class="hl kwa">return</span> <span class="hl str">'M'</span><span class="hl opt">;</span> <span class="hl slc">//   154990</span>
        <span class="hl kwa">case</span> <span class="hl str">'b'</span><span class="hl opt">:</span> <span class="hl kwa">case</span> <span class="hl str">'B'</span><span class="hl opt">:</span> <span class="hl kwa">return</span> <span class="hl str">'V'</span><span class="hl opt">;</span> <span class="hl slc">//   146536</span>
        <span class="hl kwa">case</span> <span class="hl str">'d'</span><span class="hl opt">:</span> <span class="hl kwa">case</span> <span class="hl str">'D'</span><span class="hl opt">:</span> <span class="hl kwa">return</span> <span class="hl str">'H'</span><span class="hl opt">;</span> <span class="hl slc">//   132446</span>
        <span class="hl kwa">case</span> <span class="hl str">'n'</span><span class="hl opt">:</span> <span class="hl kwa">case</span> <span class="hl str">'N'</span><span class="hl opt">:</span> <span class="hl kwa">return</span> <span class="hl str">'N'</span><span class="hl opt">;</span> <span class="hl slc">//   129628</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">throw</span> <span class="hl str">&quot;parse error&quot;</span><span class="hl opt">;</span> <span class="hl slc">// TODO proper exception</span>
<span class="hl opt">}</span>

<span class="hl kwc">template</span> <span class="hl opt">&lt;</span>typename Out<span class="hl opt">&gt;</span>
<span class="hl kwc">inline</span> <span class="hl kwb">static void</span> <span class="hl kwd">print_reverse</span><span class="hl opt">(</span>std<span class="hl opt">::</span>string <span class="hl kwb">const</span><span class="hl opt">&amp;</span> sequence<span class="hl opt">,</span> Out<span class="hl opt">&amp;</span> out<span class="hl opt">)</span>
<span class="hl opt">{</span>
    <span class="hl kwc">auto</span> <span class="hl kwb">const</span> rend <span class="hl opt">=</span> sequence<span class="hl opt">.</span><span class="hl kwd">rend</span><span class="hl opt">();</span>
    <span class="hl kwb">size_t</span> count <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwc">auto</span> i <span class="hl opt">=</span> sequence<span class="hl opt">.</span><span class="hl kwd">rbegin</span><span class="hl opt">();</span> i <span class="hl opt">!=</span> rend<span class="hl opt">; ++</span>i<span class="hl opt">)</span>
    <span class="hl opt">{</span>
        <span class="hl opt">*</span>out<span class="hl opt">++ = *</span>i<span class="hl opt">;</span> <span class="hl slc">// TODO: buffer writes and append line by line?</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl num">0</span> <span class="hl opt">== ++</span>count <span class="hl opt">%</span> <span class="hl num">60</span><span class="hl opt">)</span>
            <span class="hl opt">*</span>out<span class="hl opt">++ =</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>count <span class="hl opt">%</span> <span class="hl num">60</span><span class="hl opt">)</span>
        <span class="hl opt">*</span>out<span class="hl opt">++ =</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">()</span>
<span class="hl opt">{</span>
    string sequence<span class="hl opt">,</span> line<span class="hl opt">;</span>
    sequence<span class="hl opt">.</span><span class="hl kwd">reserve</span><span class="hl opt">(</span><span class="hl num">12000</span><span class="hl opt">);</span> <span class="hl slc">// arbitrary heuristic preallocation</span>

    cin<span class="hl opt">.</span><span class="hl kwd">unsetf</span><span class="hl opt">(</span>std<span class="hl opt">::</span>ios<span class="hl opt">::</span>skipws<span class="hl opt">);</span>
    std<span class="hl opt">::</span>cin<span class="hl opt">.</span><span class="hl kwd">tie</span><span class="hl opt">(</span><span class="hl kwc">nullptr</span><span class="hl opt">);</span>
    std<span class="hl opt">::</span>cout<span class="hl opt">.</span><span class="hl kwd">tie</span><span class="hl opt">(</span><span class="hl kwc">nullptr</span><span class="hl opt">);</span>

    <span class="hl kwc">auto</span> out <span class="hl opt">=</span> std<span class="hl opt">::</span>ostreambuf_iterator<span class="hl opt">&lt;</span><span class="hl kwb">char</span><span class="hl opt">&gt;(</span>std<span class="hl opt">::</span>cout<span class="hl opt">);</span>
    <span class="hl kwa">while</span> <span class="hl opt">(</span><span class="hl kwd">getline</span><span class="hl opt">(</span>cin<span class="hl opt">,</span> line<span class="hl opt">))</span>
    <span class="hl opt">{</span>
        <span class="hl kwb">const bool</span> is_header <span class="hl opt">= (</span>line<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] ==</span> <span class="hl str">'&gt;'</span><span class="hl opt">);</span>

        <span class="hl kwa">if</span> <span class="hl opt">(</span>is_header<span class="hl opt">)</span>
        <span class="hl opt">{</span>
            <span class="hl kwa">if</span> <span class="hl opt">(!</span>sequence<span class="hl opt">.</span><span class="hl kwd">empty</span><span class="hl opt">())</span>
            <span class="hl opt">{</span>
                <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwc">auto</span><span class="hl opt">&amp;</span> c <span class="hl opt">:</span> sequence<span class="hl opt">)</span>
                    c <span class="hl opt">=</span> <span class="hl kwd">complement</span><span class="hl opt">(</span>c<span class="hl opt">);</span>
                <span class="hl kwd">print_reverse</span><span class="hl opt">(</span>sequence<span class="hl opt">,</span> out<span class="hl opt">);</span>
            <span class="hl opt">}</span>
            <span class="hl slc">// clear, (retain allocated capacity)</span>
            sequence<span class="hl opt">.</span><span class="hl kwd">resize</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">);</span>

            <span class="hl slc">// print header line</span>
            cout <span class="hl opt">&lt;&lt;</span> line <span class="hl opt">&lt;&lt;</span> endl<span class="hl opt">;</span>
        <span class="hl opt">}</span>
        <span class="hl kwa">else</span>
        <span class="hl opt">{</span>
            sequence<span class="hl opt">.</span><span class="hl kwd">append</span><span class="hl opt">(</span>line<span class="hl opt">);</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">if</span> <span class="hl opt">(!</span>sequence<span class="hl opt">.</span><span class="hl kwd">empty</span><span class="hl opt">())</span>
    <span class="hl opt">{</span>
        <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwc">auto</span><span class="hl opt">&amp;</span> c <span class="hl opt">:</span> sequence<span class="hl opt">)</span>
            c <span class="hl opt">=</span> <span class="hl kwd">complement</span><span class="hl opt">(</span>c<span class="hl opt">);</span>
        <span class="hl kwd">print_reverse</span><span class="hl opt">(</span>sequence<span class="hl opt">,</span> out<span class="hl opt">);</span>
    <span class="hl opt">}</span>
<span class="hl opt">}</span>
