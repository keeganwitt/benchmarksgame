<span class="hl com">/*</span>
<span class="hl com"> * The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * modified by Enotus</span>
<span class="hl com"> *</span>
<span class="hl com"> */</span>

<span class="hl kwa">import</span> java<span class="hl sym">.</span>io<span class="hl sym">.*;</span>

<span class="hl kwa">public class</span> fasta <span class="hl sym">{</span>

    <span class="hl kwa">static final</span> <span class="hl kwb">int</span> LINE_LENGTH <span class="hl sym">=</span> <span class="hl num">60</span><span class="hl sym">;</span>
    <span class="hl kwa">static final</span> <span class="hl kwb">int</span> OUT_BUFFER_SIZE <span class="hl sym">=</span> <span class="hl num">256</span><span class="hl sym">*</span><span class="hl num">1024</span><span class="hl sym">;</span>
    <span class="hl kwa">static final</span> <span class="hl kwb">int</span> LOOKUP_SIZE <span class="hl sym">=</span> <span class="hl num">4</span><span class="hl sym">*</span><span class="hl num">1024</span><span class="hl sym">;</span>
    <span class="hl kwa">static final</span> <span class="hl kwb">double</span> LOOKUP_SCALE <span class="hl sym">=</span> LOOKUP_SIZE <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">;</span>

    <span class="hl kwa">static final class</span> Freq <span class="hl sym">{</span>
        <span class="hl kwb">byte</span> c<span class="hl sym">;</span>
        <span class="hl kwb">double</span> p<span class="hl sym">;</span>
        <span class="hl kwd">Freq</span><span class="hl sym">(</span><span class="hl kwb">char</span> cc<span class="hl sym">,</span> <span class="hl kwb">double</span> pp<span class="hl sym">) {</span>c <span class="hl sym">= (</span><span class="hl kwb">byte</span><span class="hl sym">)</span> cc<span class="hl sym">;</span>p <span class="hl sym">=</span> pp<span class="hl sym">;}</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">static final</span> <span class="hl kwc">String</span> ALU <span class="hl sym">=</span>
            <span class="hl str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span>
            <span class="hl sym">+</span> <span class="hl str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span>
            <span class="hl sym">+</span> <span class="hl str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span>
            <span class="hl sym">+</span> <span class="hl str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span>
            <span class="hl sym">+</span> <span class="hl str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span>
            <span class="hl sym">+</span> <span class="hl str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span>
            <span class="hl sym">+</span> <span class="hl str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span><span class="hl sym">;</span>
    <span class="hl kwa">static final</span> Freq<span class="hl sym">[]</span> IUB <span class="hl sym">= {</span>
        <span class="hl kwa">new</span> <span class="hl kwd">Freq</span><span class="hl sym">(</span><span class="hl str">'a'</span><span class="hl sym">,</span> <span class="hl num">0.27</span><span class="hl sym">),</span>
        <span class="hl kwa">new</span> <span class="hl kwd">Freq</span><span class="hl sym">(</span><span class="hl str">'c'</span><span class="hl sym">,</span> <span class="hl num">0.12</span><span class="hl sym">),</span>
        <span class="hl kwa">new</span> <span class="hl kwd">Freq</span><span class="hl sym">(</span><span class="hl str">'g'</span><span class="hl sym">,</span> <span class="hl num">0.12</span><span class="hl sym">),</span>
        <span class="hl kwa">new</span> <span class="hl kwd">Freq</span><span class="hl sym">(</span><span class="hl str">'t'</span><span class="hl sym">,</span> <span class="hl num">0.27</span><span class="hl sym">),</span>
        <span class="hl kwa">new</span> <span class="hl kwd">Freq</span><span class="hl sym">(</span><span class="hl str">'B'</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">),</span>
        <span class="hl kwa">new</span> <span class="hl kwd">Freq</span><span class="hl sym">(</span><span class="hl str">'D'</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">),</span>
        <span class="hl kwa">new</span> <span class="hl kwd">Freq</span><span class="hl sym">(</span><span class="hl str">'H'</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">),</span>
        <span class="hl kwa">new</span> <span class="hl kwd">Freq</span><span class="hl sym">(</span><span class="hl str">'K'</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">),</span>
        <span class="hl kwa">new</span> <span class="hl kwd">Freq</span><span class="hl sym">(</span><span class="hl str">'M'</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">),</span>
        <span class="hl kwa">new</span> <span class="hl kwd">Freq</span><span class="hl sym">(</span><span class="hl str">'N'</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">),</span>
        <span class="hl kwa">new</span> <span class="hl kwd">Freq</span><span class="hl sym">(</span><span class="hl str">'R'</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">),</span>
        <span class="hl kwa">new</span> <span class="hl kwd">Freq</span><span class="hl sym">(</span><span class="hl str">'S'</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">),</span>
        <span class="hl kwa">new</span> <span class="hl kwd">Freq</span><span class="hl sym">(</span><span class="hl str">'V'</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">),</span>
        <span class="hl kwa">new</span> <span class="hl kwd">Freq</span><span class="hl sym">(</span><span class="hl str">'W'</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">),</span>
        <span class="hl kwa">new</span> <span class="hl kwd">Freq</span><span class="hl sym">(</span><span class="hl str">'Y'</span><span class="hl sym">,</span> <span class="hl num">0.02</span><span class="hl sym">)};</span>
    <span class="hl kwa">static final</span> Freq<span class="hl sym">[]</span> HomoSapiens <span class="hl sym">= {</span>
        <span class="hl kwa">new</span> <span class="hl kwd">Freq</span><span class="hl sym">(</span><span class="hl str">'a'</span><span class="hl sym">,</span> <span class="hl num">0.3029549426680</span><span class="hl sym">),</span>
        <span class="hl kwa">new</span> <span class="hl kwd">Freq</span><span class="hl sym">(</span><span class="hl str">'c'</span><span class="hl sym">,</span> <span class="hl num">0.1979883004921</span><span class="hl sym">),</span>
        <span class="hl kwa">new</span> <span class="hl kwd">Freq</span><span class="hl sym">(</span><span class="hl str">'g'</span><span class="hl sym">,</span> <span class="hl num">0.1975473066391</span><span class="hl sym">),</span>
        <span class="hl kwa">new</span> <span class="hl kwd">Freq</span><span class="hl sym">(</span><span class="hl str">'t'</span><span class="hl sym">,</span> <span class="hl num">0.3015094502008</span><span class="hl sym">)};</span>

    <span class="hl kwa">static</span> <span class="hl kwb">void</span> <span class="hl kwd">sumAndScale</span><span class="hl sym">(</span>Freq<span class="hl sym">[]</span> a<span class="hl sym">) {</span>
        <span class="hl kwb">double</span> p <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
        <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> a<span class="hl sym">.</span>length<span class="hl sym">;</span> i<span class="hl sym">++)</span>
            a<span class="hl sym">[</span>i<span class="hl sym">].</span>p <span class="hl sym">= (</span>p <span class="hl sym">+=</span> a<span class="hl sym">[</span>i<span class="hl sym">].</span>p<span class="hl sym">) *</span> LOOKUP_SCALE<span class="hl sym">;</span>
        a<span class="hl sym">[</span>a<span class="hl sym">.</span>length <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">].</span>p <span class="hl sym">=</span> LOOKUP_SCALE<span class="hl sym">;</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">static final class</span> <span class="hl kwc">Random</span> <span class="hl sym">{</span>
    
        <span class="hl kwa">static final</span> <span class="hl kwb">int</span> IM <span class="hl sym">=</span> <span class="hl num">139968</span><span class="hl sym">;</span>
        <span class="hl kwa">static final</span> <span class="hl kwb">int</span> IA <span class="hl sym">=</span> <span class="hl num">3877</span><span class="hl sym">;</span>
        <span class="hl kwa">static final</span> <span class="hl kwb">int</span> IC <span class="hl sym">=</span> <span class="hl num">29573</span><span class="hl sym">;</span>
        <span class="hl kwa">static final</span> <span class="hl kwb">double</span> SCALE <span class="hl sym">=</span> LOOKUP_SCALE <span class="hl sym">/</span> IM<span class="hl sym">;</span>
        <span class="hl kwa">static</span> <span class="hl kwb">int</span> last <span class="hl sym">=</span> <span class="hl num">42</span><span class="hl sym">;</span>

        <span class="hl kwa">static</span> <span class="hl kwb">double</span> <span class="hl kwd">next</span><span class="hl sym">() {</span>
            <span class="hl kwa">return</span> SCALE <span class="hl sym">* (</span>last <span class="hl sym">= (</span>last <span class="hl sym">*</span> IA <span class="hl sym">+</span> IC<span class="hl sym">) %</span> IM<span class="hl sym">);</span>
        <span class="hl sym">}</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">static final class</span> Out <span class="hl sym">{</span>
    
        <span class="hl kwa">static final</span> <span class="hl kwb">byte</span> buf<span class="hl sym">[] =</span> <span class="hl kwa">new</span> <span class="hl kwb">byte</span><span class="hl sym">[</span>OUT_BUFFER_SIZE<span class="hl sym">];</span>
        <span class="hl kwa">static final</span> <span class="hl kwb">int</span> lim <span class="hl sym">=</span> OUT_BUFFER_SIZE <span class="hl sym">-</span> <span class="hl num">2</span><span class="hl sym">*</span>LINE_LENGTH <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">;</span>
        <span class="hl kwa">static</span> <span class="hl kwb">int</span> ct <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
        <span class="hl kwa">static</span> <span class="hl kwc">OutputStream</span> stream<span class="hl sym">;</span>

        <span class="hl kwa">static</span> <span class="hl kwb">void</span> <span class="hl kwd">checkFlush</span><span class="hl sym">()</span> <span class="hl kwa">throws</span> <span class="hl kwc">IOException</span> <span class="hl sym">{</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>ct <span class="hl sym">&gt;=</span> lim<span class="hl sym">) {</span> stream<span class="hl sym">.</span><span class="hl kwd">write</span><span class="hl sym">(</span>buf<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> ct<span class="hl sym">);</span> ct <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;}</span>
        <span class="hl sym">}</span>
        
        <span class="hl kwa">static</span> <span class="hl kwb">void</span> <span class="hl kwd">close</span><span class="hl sym">()</span> <span class="hl kwa">throws</span> <span class="hl kwc">IOException</span> <span class="hl sym">{</span>
            stream<span class="hl sym">.</span><span class="hl kwd">write</span><span class="hl sym">(</span>buf<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> ct<span class="hl sym">);</span>ct <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
            stream<span class="hl sym">.</span><span class="hl kwd">close</span><span class="hl sym">();</span>
        <span class="hl sym">}</span>
    <span class="hl sym">}</span>
    
    <span class="hl kwa">static final class</span> RandomFasta <span class="hl sym">{</span>

        <span class="hl kwa">static final</span> Freq<span class="hl sym">[]</span> lookup<span class="hl sym">=</span><span class="hl kwa">new</span> Freq<span class="hl sym">[</span>LOOKUP_SIZE<span class="hl sym">];</span>
        
        <span class="hl kwa">static</span> <span class="hl kwb">void</span> <span class="hl kwd">makeLookup</span><span class="hl sym">(</span>Freq<span class="hl sym">[]</span> a<span class="hl sym">) {</span>
            <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">,</span> j <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> LOOKUP_SIZE<span class="hl sym">;</span> i<span class="hl sym">++) {</span>
                <span class="hl kwa">while</span> <span class="hl sym">(</span>a<span class="hl sym">[</span>j<span class="hl sym">].</span>p <span class="hl sym">&lt;</span> i<span class="hl sym">)</span> j<span class="hl sym">++;</span>
                lookup<span class="hl sym">[</span>i<span class="hl sym">] =</span> a<span class="hl sym">[</span>j<span class="hl sym">];</span>
            <span class="hl sym">}</span>
        <span class="hl sym">}</span>

        <span class="hl kwa">static</span> <span class="hl kwb">void</span> <span class="hl kwd">addLine</span><span class="hl sym">(</span><span class="hl kwb">int</span> bytes<span class="hl sym">)</span> <span class="hl kwa">throws</span> <span class="hl kwc">IOException</span><span class="hl sym">{</span>
            Out<span class="hl sym">.</span><span class="hl kwd">checkFlush</span><span class="hl sym">();</span>
            <span class="hl kwb">int</span> lct<span class="hl sym">=</span>Out<span class="hl sym">.</span>ct<span class="hl sym">;</span>
            <span class="hl kwa">while</span><span class="hl sym">(</span>lct<span class="hl sym">&lt;</span>Out<span class="hl sym">.</span>ct<span class="hl sym">+</span>bytes<span class="hl sym">){</span>
                <span class="hl kwb">double</span> r <span class="hl sym">=</span> <span class="hl kwc">Random</span><span class="hl sym">.</span><span class="hl kwd">next</span><span class="hl sym">();</span>
                <span class="hl kwb">int</span> ai <span class="hl sym">= (</span><span class="hl kwb">int</span><span class="hl sym">)</span> r<span class="hl sym">;</span> <span class="hl kwa">while</span> <span class="hl sym">(</span>lookup<span class="hl sym">[</span>ai<span class="hl sym">].</span>p <span class="hl sym">&lt;</span> r<span class="hl sym">)</span> ai<span class="hl sym">++;</span>
                Out<span class="hl sym">.</span>buf<span class="hl sym">[</span>lct<span class="hl sym">++] =</span> lookup<span class="hl sym">[</span>ai<span class="hl sym">].</span>c<span class="hl sym">;</span>
            <span class="hl sym">}</span>
            Out<span class="hl sym">.</span>buf<span class="hl sym">[</span>lct<span class="hl sym">++] = (</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl sym">;</span>
            Out<span class="hl sym">.</span>ct<span class="hl sym">=</span>lct<span class="hl sym">;</span>
        <span class="hl sym">}</span>

        <span class="hl kwa">static</span> <span class="hl kwb">void</span> <span class="hl kwd">make</span><span class="hl sym">(</span><span class="hl kwc">String</span> desc<span class="hl sym">,</span> Freq<span class="hl sym">[]</span> a<span class="hl sym">,</span> <span class="hl kwb">int</span> n<span class="hl sym">)</span> <span class="hl kwa">throws</span> <span class="hl kwc">IOException</span> <span class="hl sym">{</span>
            <span class="hl kwd">makeLookup</span><span class="hl sym">(</span>a<span class="hl sym">);</span>

            <span class="hl kwc">System</span><span class="hl sym">.</span><span class="hl kwd">arraycopy</span><span class="hl sym">(</span>desc<span class="hl sym">.</span><span class="hl kwd">getBytes</span><span class="hl sym">(),</span> <span class="hl num">0</span><span class="hl sym">,</span> Out<span class="hl sym">.</span>buf<span class="hl sym">,</span> Out<span class="hl sym">.</span>ct<span class="hl sym">,</span> desc<span class="hl sym">.</span><span class="hl kwd">length</span><span class="hl sym">());</span>
            Out<span class="hl sym">.</span>ct<span class="hl sym">+=</span>desc<span class="hl sym">.</span><span class="hl kwd">length</span><span class="hl sym">();</span>
            
            <span class="hl kwa">while</span> <span class="hl sym">(</span>n <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">) {</span>
                <span class="hl kwb">int</span> bytes <span class="hl sym">=</span> <span class="hl kwc">Math</span><span class="hl sym">.</span><span class="hl kwd">min</span><span class="hl sym">(</span>LINE_LENGTH<span class="hl sym">,</span> n<span class="hl sym">);</span>
                <span class="hl kwd">addLine</span><span class="hl sym">(</span>bytes<span class="hl sym">);</span>
                n <span class="hl sym">-=</span> bytes<span class="hl sym">;</span>
            <span class="hl sym">}</span>
        <span class="hl sym">}</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">static final class</span> RepeatFasta <span class="hl sym">{</span>

        <span class="hl kwa">static</span> <span class="hl kwb">void</span> <span class="hl kwd">make</span><span class="hl sym">(</span><span class="hl kwc">String</span> desc<span class="hl sym">,</span> <span class="hl kwb">byte</span><span class="hl sym">[]</span> alu<span class="hl sym">,</span> <span class="hl kwb">int</span> n<span class="hl sym">)</span> <span class="hl kwa">throws</span> <span class="hl kwc">IOException</span> <span class="hl sym">{</span>
            <span class="hl kwc">System</span><span class="hl sym">.</span><span class="hl kwd">arraycopy</span><span class="hl sym">(</span>desc<span class="hl sym">.</span><span class="hl kwd">getBytes</span><span class="hl sym">(),</span> <span class="hl num">0</span><span class="hl sym">,</span> Out<span class="hl sym">.</span>buf<span class="hl sym">,</span> Out<span class="hl sym">.</span>ct<span class="hl sym">,</span> desc<span class="hl sym">.</span><span class="hl kwd">length</span><span class="hl sym">());</span>
            Out<span class="hl sym">.</span>ct<span class="hl sym">+=</span>desc<span class="hl sym">.</span><span class="hl kwd">length</span><span class="hl sym">();</span>

            <span class="hl kwb">byte</span> buf<span class="hl sym">[] =</span> <span class="hl kwa">new</span> <span class="hl kwb">byte</span><span class="hl sym">[</span>alu<span class="hl sym">.</span>length <span class="hl sym">+</span> LINE_LENGTH<span class="hl sym">];</span>
            <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> buf<span class="hl sym">.</span>length<span class="hl sym">;</span> i <span class="hl sym">+=</span> alu<span class="hl sym">.</span>length<span class="hl sym">)</span>
                <span class="hl kwc">System</span><span class="hl sym">.</span><span class="hl kwd">arraycopy</span><span class="hl sym">(</span>alu<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> buf<span class="hl sym">,</span> i<span class="hl sym">,</span> <span class="hl kwc">Math</span><span class="hl sym">.</span><span class="hl kwd">min</span><span class="hl sym">(</span>alu<span class="hl sym">.</span>length<span class="hl sym">,</span> buf<span class="hl sym">.</span>length <span class="hl sym">-</span> i<span class="hl sym">));</span>

            <span class="hl kwb">int</span> pos <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
            <span class="hl kwa">while</span> <span class="hl sym">(</span>n <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">) {</span>
                <span class="hl kwb">int</span> bytes <span class="hl sym">=</span> <span class="hl kwc">Math</span><span class="hl sym">.</span><span class="hl kwd">min</span><span class="hl sym">(</span>LINE_LENGTH<span class="hl sym">,</span> n<span class="hl sym">);</span>
                Out<span class="hl sym">.</span><span class="hl kwd">checkFlush</span><span class="hl sym">();</span>
                <span class="hl kwc">System</span><span class="hl sym">.</span><span class="hl kwd">arraycopy</span><span class="hl sym">(</span>buf<span class="hl sym">,</span> pos<span class="hl sym">,</span> Out<span class="hl sym">.</span>buf<span class="hl sym">,</span> Out<span class="hl sym">.</span>ct<span class="hl sym">,</span> bytes<span class="hl sym">);</span> Out<span class="hl sym">.</span>ct<span class="hl sym">+=</span>bytes<span class="hl sym">;</span>
                Out<span class="hl sym">.</span>buf<span class="hl sym">[</span>Out<span class="hl sym">.</span>ct<span class="hl sym">++] = (</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl sym">;</span>
                pos <span class="hl sym">= (</span>pos <span class="hl sym">+</span> bytes<span class="hl sym">) %</span> alu<span class="hl sym">.</span>length<span class="hl sym">;</span>
                n <span class="hl sym">-=</span> bytes<span class="hl sym">;</span>
            <span class="hl sym">}</span>
        <span class="hl sym">}</span>
    <span class="hl sym">}</span>


    <span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwc">String</span><span class="hl sym">[]</span> args<span class="hl sym">)</span> <span class="hl kwa">throws</span> <span class="hl kwc">IOException</span> <span class="hl sym">{</span>
        <span class="hl kwb">int</span> n <span class="hl sym">=</span> <span class="hl num">2500000</span><span class="hl sym">;</span>
        <span class="hl kwa">if</span> <span class="hl sym">(</span>args<span class="hl sym">.</span>length <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">)</span> 
            n <span class="hl sym">=</span> <span class="hl kwc">Integer</span><span class="hl sym">.</span><span class="hl kwd">parseInt</span><span class="hl sym">(</span>args<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]);</span>

        <span class="hl kwd">sumAndScale</span><span class="hl sym">(</span>IUB<span class="hl sym">);</span>
        <span class="hl kwd">sumAndScale</span><span class="hl sym">(</span>HomoSapiens<span class="hl sym">);</span>

        Out<span class="hl sym">.</span>stream<span class="hl sym">=</span><span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">;</span>
        RepeatFasta<span class="hl sym">.</span><span class="hl kwd">make</span><span class="hl sym">(</span><span class="hl str">&quot;&gt;ONE Homo sapiens alu</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> ALU<span class="hl sym">.</span><span class="hl kwd">getBytes</span><span class="hl sym">(),</span> n <span class="hl sym">*</span> <span class="hl num">2</span><span class="hl sym">);</span>
        RandomFasta<span class="hl sym">.</span><span class="hl kwd">make</span><span class="hl sym">(</span><span class="hl str">&quot;&gt;TWO IUB ambiguity codes</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> IUB<span class="hl sym">,</span> n <span class="hl sym">*</span> <span class="hl num">3</span><span class="hl sym">);</span>
        RandomFasta<span class="hl sym">.</span><span class="hl kwd">make</span><span class="hl sym">(</span><span class="hl str">&quot;&gt;THREE Homo sapiens frequency</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> HomoSapiens<span class="hl sym">,</span> n <span class="hl sym">*</span> <span class="hl num">5</span><span class="hl sym">);</span>
        Out<span class="hl sym">.</span><span class="hl kwd">close</span><span class="hl sym">();</span>
    <span class="hl sym">}</span>
<span class="hl sym">}</span>
