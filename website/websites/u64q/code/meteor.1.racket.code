<span class="hl opt">#</span>lang racket<span class="hl opt">/</span>base

<span class="hl slc">;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;; http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">;;</span>
<span class="hl slc">;; Based on a Python version:</span>
<span class="hl slc">;;   contributed by Olof Kraigher</span>
<span class="hl slc">;;    modified by Tupteq</span>
<span class="hl slc">;;   contributed by Matthew Flatt</span>
<span class="hl slc">;;   optimized by Eli Barzilay</span>

<span class="hl opt">(</span><span class="hl kwa">require</span> racket<span class="hl opt">/</span>cmdline<span class="hl opt">)</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> width <span class="hl num">5</span><span class="hl opt">)</span>
<span class="hl opt">(</span><span class="hl kwa">define</span> height <span class="hl num">10</span><span class="hl opt">)</span>
<span class="hl opt">(</span><span class="hl kwa">define</span> size <span class="hl opt">(*</span> width height<span class="hl opt">))</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">valid-xy</span>? x y<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">and</span> <span class="hl opt">(</span><span class="hl kwa">0</span> . <span class="hl opt">&lt;=</span> . x<span class="hl opt">)</span>
       <span class="hl opt">(</span><span class="hl kwa">x</span> . <span class="hl opt">&lt;</span> . width<span class="hl opt">)</span>
       <span class="hl opt">(</span><span class="hl kwa">0</span> . <span class="hl opt">&lt;=</span> . y<span class="hl opt">)</span>
       <span class="hl opt">(</span><span class="hl kwa">y</span> . <span class="hl opt">&lt;</span> . height<span class="hl opt">)))</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">mover</span> fun<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">([</span>t <span class="hl opt">(</span><span class="hl kwa">make-vector</span> size<span class="hl opt">)])</span>
    <span class="hl opt">(</span><span class="hl kwa">for</span> <span class="hl opt">([</span>p <span class="hl opt">(</span><span class="hl kwa">in-range</span> size<span class="hl opt">)])</span>
      <span class="hl opt">(</span><span class="hl kwa">vector-set</span><span class="hl opt">!</span> t p <span class="hl opt">(</span><span class="hl kwa">let</span><span class="hl opt">*</span>-values <span class="hl opt">([(</span><span class="hl kwa">y</span> x<span class="hl opt">) (</span><span class="hl kwa">quotient</span><span class="hl opt">/</span>remainder p width<span class="hl opt">)]</span>
                                     <span class="hl opt">[(</span><span class="hl kwa">x</span> y<span class="hl opt">) (</span><span class="hl kwa">fun</span> x y<span class="hl opt">)])</span>
                         <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">valid-xy</span>? x y<span class="hl opt">) (+</span> x <span class="hl opt">(*</span> y width<span class="hl opt">))</span> -<span class="hl num">1</span><span class="hl opt">))))</span>
    t<span class="hl opt">))</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> E
  <span class="hl opt">(</span><span class="hl kwa">mover</span> <span class="hl opt">(</span><span class="hl kwa">lambda</span> <span class="hl opt">(</span><span class="hl kwa">x</span> y<span class="hl opt">) (</span><span class="hl kwa">values</span> <span class="hl opt">(</span><span class="hl kwa">add1</span> x<span class="hl opt">)</span> y<span class="hl opt">))))</span>
<span class="hl opt">(</span><span class="hl kwa">define</span> W
  <span class="hl opt">(</span><span class="hl kwa">mover</span> <span class="hl opt">(</span><span class="hl kwa">lambda</span> <span class="hl opt">(</span><span class="hl kwa">x</span> y<span class="hl opt">) (</span><span class="hl kwa">values</span> <span class="hl opt">(</span><span class="hl kwa">sub1</span> x<span class="hl opt">)</span> y<span class="hl opt">))))</span>
<span class="hl opt">(</span><span class="hl kwa">define</span> NE
  <span class="hl opt">(</span><span class="hl kwa">mover</span> <span class="hl opt">(</span><span class="hl kwa">lambda</span> <span class="hl opt">(</span><span class="hl kwa">x</span> y<span class="hl opt">) (</span><span class="hl kwa">values</span> <span class="hl opt">(+</span> x <span class="hl opt">(</span><span class="hl kwa">bitwise-and</span> y <span class="hl num">1</span><span class="hl opt">)) (</span><span class="hl kwa">sub1</span> y<span class="hl opt">)))))</span>
<span class="hl opt">(</span><span class="hl kwa">define</span> NW
  <span class="hl opt">(</span><span class="hl kwa">mover</span> <span class="hl opt">(</span><span class="hl kwa">lambda</span> <span class="hl opt">(</span><span class="hl kwa">x</span> y<span class="hl opt">) (</span><span class="hl kwa">values</span> <span class="hl opt">(</span><span class="hl kwa">sub1</span> <span class="hl opt">(+</span> x <span class="hl opt">(</span><span class="hl kwa">bitwise-and</span> y <span class="hl num">1</span><span class="hl opt">))) (</span><span class="hl kwa">sub1</span> y<span class="hl opt">)))))</span>
<span class="hl opt">(</span><span class="hl kwa">define</span> SE
  <span class="hl opt">(</span><span class="hl kwa">mover</span> <span class="hl opt">(</span><span class="hl kwa">lambda</span> <span class="hl opt">(</span><span class="hl kwa">x</span> y<span class="hl opt">) (</span><span class="hl kwa">values</span> <span class="hl opt">(+</span> x <span class="hl opt">(</span><span class="hl kwa">bitwise-and</span> y <span class="hl num">1</span><span class="hl opt">)) (</span><span class="hl kwa">add1</span> y<span class="hl opt">)))))</span>
<span class="hl opt">(</span><span class="hl kwa">define</span> SW
  <span class="hl opt">(</span><span class="hl kwa">mover</span> <span class="hl opt">(</span><span class="hl kwa">lambda</span> <span class="hl opt">(</span><span class="hl kwa">x</span> y<span class="hl opt">) (</span><span class="hl kwa">values</span> <span class="hl opt">(</span><span class="hl kwa">sub1</span> <span class="hl opt">(+</span> x <span class="hl opt">(</span><span class="hl kwa">bitwise-and</span> y <span class="hl num">1</span><span class="hl opt">))) (</span><span class="hl kwa">add1</span> y<span class="hl opt">)))))</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> rotate-list <span class="hl opt">(</span><span class="hl kwa">list</span> E NE NW W SW SE E<span class="hl opt">))</span>
<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">rotate</span> dir<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">cadr</span> <span class="hl opt">(</span><span class="hl kwa">memq</span> dir rotate-list<span class="hl opt">)))</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> flip-alist <span class="hl opt">(</span><span class="hl kwa">list</span> <span class="hl opt">(</span><span class="hl kwa">cons</span> E W<span class="hl opt">) (</span><span class="hl kwa">cons</span> NE NW<span class="hl opt">) (</span><span class="hl kwa">cons</span> NW NE<span class="hl opt">)</span>
                         <span class="hl opt">(</span><span class="hl kwa">cons</span> W E<span class="hl opt">) (</span><span class="hl kwa">cons</span> SW SE<span class="hl opt">) (</span><span class="hl kwa">cons</span> SE SW<span class="hl opt">)))</span>
<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">flip</span> dir<span class="hl opt">) (</span><span class="hl kwa">cdr</span> <span class="hl opt">(</span><span class="hl kwa">assq</span> dir flip-alist<span class="hl opt">)))</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> movers <span class="hl opt">(</span><span class="hl kwa">list</span> E W NE NW SE SW<span class="hl opt">))</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">valid</span>? p<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">p</span> . <span class="hl opt">&gt;=</span> . <span class="hl num">0</span><span class="hl opt">))</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">clear</span>? board pos<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">not</span> <span class="hl opt">(</span><span class="hl kwa">bitwise-bit-set</span>? board pos<span class="hl opt">)))</span>
<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">set</span> board pos<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">bitwise-ior</span> board <span class="hl opt">(</span><span class="hl kwa">arithmetic-shift</span> <span class="hl num">1</span> pos<span class="hl opt">)))</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">zero-count</span> board<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">for</span><span class="hl opt">/</span>fold <span class="hl opt">([</span>count <span class="hl num">0</span><span class="hl opt">]) ([</span>i <span class="hl opt">(</span><span class="hl kwa">in-range</span> size<span class="hl opt">)])</span>
    <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">clear</span>? board i<span class="hl opt">) (</span><span class="hl kwa">add1</span> count<span class="hl opt">)</span> count<span class="hl opt">)))</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">find-free-cell</span> board<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">for</span><span class="hl opt">/</span>or <span class="hl opt">([</span>p <span class="hl opt">(</span><span class="hl kwa">in-range</span> <span class="hl num">0</span> size<span class="hl opt">)])</span>
    <span class="hl opt">(</span><span class="hl kwa">and</span> <span class="hl opt">(</span><span class="hl kwa">clear</span>? board p<span class="hl opt">)</span> p<span class="hl opt">)))</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">flood-fill</span> board p<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">for</span><span class="hl opt">/</span>fold <span class="hl opt">([</span>board <span class="hl opt">(</span><span class="hl kwa">set</span> board p<span class="hl opt">)]) ([</span>mover <span class="hl opt">(</span><span class="hl kwa">in-list</span> movers<span class="hl opt">)])</span>
    <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">([</span>p <span class="hl opt">(</span><span class="hl kwa">vector-ref</span> mover p<span class="hl opt">)])</span>
      <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">and</span> <span class="hl opt">(</span><span class="hl kwa">valid</span>? p<span class="hl opt">) (</span><span class="hl kwa">clear</span>? board p<span class="hl opt">))</span>
        <span class="hl opt">(</span><span class="hl kwa">flood-fill</span> board p<span class="hl opt">)</span>
        board<span class="hl opt">))))</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">no-islands</span>? mask<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">([</span>zeros <span class="hl opt">(</span><span class="hl kwa">zero-count</span> mask<span class="hl opt">)])</span>
    <span class="hl opt">(</span><span class="hl kwa">and</span> <span class="hl opt">(</span><span class="hl kwa">zeros</span> . <span class="hl opt">&gt;=</span> . <span class="hl num">5</span><span class="hl opt">)</span>
         <span class="hl opt">(</span><span class="hl kwa">let</span> loop <span class="hl opt">([</span>mask mask<span class="hl opt">] [</span>zeros zeros<span class="hl opt">])</span>
           <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(=</span> mask <span class="hl opt">#</span>x3FFFFFFFFFFFF<span class="hl opt">)</span>
             <span class="hl opt">#</span>t
             <span class="hl opt">(</span><span class="hl kwa">let</span><span class="hl opt">* ([</span>p <span class="hl opt">(</span><span class="hl kwa">find-free-cell</span> mask<span class="hl opt">)]</span>
                    <span class="hl opt">[</span>mask <span class="hl opt">(</span><span class="hl kwa">flood-fill</span> mask p<span class="hl opt">)]</span>
                    <span class="hl opt">[</span>new-zeros <span class="hl opt">(</span><span class="hl kwa">zero-count</span> mask<span class="hl opt">)])</span>
               <span class="hl opt">(</span><span class="hl kwa">and</span> <span class="hl opt">((</span><span class="hl kwa">-</span> zeros new-zeros<span class="hl opt">)</span> . <span class="hl opt">&gt;=</span> . <span class="hl num">5</span><span class="hl opt">)</span>
                    <span class="hl opt">(</span><span class="hl kwa">loop</span> mask new-zeros<span class="hl opt">))))))))</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">get-bitmask</span> p piece<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">([</span>mask <span class="hl opt">(</span><span class="hl kwa">arithmetic-shift</span> <span class="hl num">1</span> p<span class="hl opt">)])</span>
    <span class="hl opt">(</span><span class="hl kwa">let</span> loop <span class="hl opt">([</span>p p<span class="hl opt">] [</span>cells piece<span class="hl opt">] [</span>mask mask<span class="hl opt">])</span>
      <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">null</span>? cells<span class="hl opt">)</span>
        mask
        <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">([</span>p <span class="hl opt">(</span><span class="hl kwa">vector-ref</span> <span class="hl opt">(</span><span class="hl kwa">car</span> cells<span class="hl opt">)</span> p<span class="hl opt">)])</span>
          <span class="hl opt">(</span><span class="hl kwa">and</span> <span class="hl opt">(</span><span class="hl kwa">valid</span>? p<span class="hl opt">) (</span><span class="hl kwa">loop</span> p <span class="hl opt">(</span><span class="hl kwa">cdr</span> cells<span class="hl opt">) (</span><span class="hl kwa">set</span> mask p<span class="hl opt">))))))))</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">all-bitmasks</span> piece color<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">([</span>pieces
         <span class="hl opt">(</span><span class="hl kwa">let-values</span> <span class="hl opt">([(</span><span class="hl kwa">accum</span> piece<span class="hl opt">)</span>
                       <span class="hl opt">(</span><span class="hl kwa">for</span><span class="hl opt">/</span>fold <span class="hl opt">([</span>accum null<span class="hl opt">] [</span>piece piece<span class="hl opt">])</span>
                                 <span class="hl opt">([</span>orientations <span class="hl opt">(</span><span class="hl kwa">in-range</span> <span class="hl num">2</span><span class="hl opt">)])</span>
                         <span class="hl opt">(</span><span class="hl kwa">let-values</span> <span class="hl opt">([(</span><span class="hl kwa">accum</span> piece<span class="hl opt">)</span>
                                       <span class="hl opt">(</span><span class="hl kwa">for</span><span class="hl opt">/</span>fold <span class="hl opt">([</span>accum accum<span class="hl opt">] [</span>piece piece<span class="hl opt">])</span>
                                                 <span class="hl opt">([</span>orientations <span class="hl opt">(</span><span class="hl kwa">in-range</span> <span class="hl opt">(</span><span class="hl kwa">-</span> <span class="hl num">6</span> <span class="hl opt">(*</span> <span class="hl num">3</span> <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(=</span> color <span class="hl num">4</span><span class="hl opt">)</span> <span class="hl num">1 0</span><span class="hl opt">))))])</span>
                                         <span class="hl opt">(</span><span class="hl kwa">values</span> <span class="hl opt">(</span><span class="hl kwa">cons</span> piece accum<span class="hl opt">)</span>
                                                 <span class="hl opt">(</span><span class="hl kwa">map</span> rotate piece<span class="hl opt">)))])</span>
                           <span class="hl opt">(</span><span class="hl kwa">values</span> accum <span class="hl opt">(</span><span class="hl kwa">map</span> flip piece<span class="hl opt">))))])</span>
           accum<span class="hl opt">)])</span>
    <span class="hl opt">(</span><span class="hl kwa">reverse</span>
     <span class="hl opt">(</span><span class="hl kwa">for</span><span class="hl opt">*/</span>fold <span class="hl opt">([</span>accum null<span class="hl opt">])</span>
                <span class="hl opt">([</span>piece <span class="hl opt">(</span><span class="hl kwa">in-list</span> pieces<span class="hl opt">)]</span>
                 <span class="hl opt">[</span>p <span class="hl opt">(</span><span class="hl kwa">in-range</span> <span class="hl num">0</span> size<span class="hl opt">)])</span>
       <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">([</span>mask <span class="hl opt">(</span><span class="hl kwa">get-bitmask</span> p piece<span class="hl opt">)])</span>
         <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">and</span> mask <span class="hl opt">(</span><span class="hl kwa">no-islands</span>? mask<span class="hl opt">)) (</span><span class="hl kwa">cons</span> mask accum<span class="hl opt">)</span> accum<span class="hl opt">))))))</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> generate-bitmasks-pieces
  <span class="hl opt">(</span><span class="hl kwa">list</span> <span class="hl opt">(</span><span class="hl kwa">list</span> E  E  E  SE<span class="hl opt">)</span>
        <span class="hl opt">(</span><span class="hl kwa">list</span> SE SW W  SW<span class="hl opt">)</span>
        <span class="hl opt">(</span><span class="hl kwa">list</span> W  W  SW SE<span class="hl opt">)</span>
        <span class="hl opt">(</span><span class="hl kwa">list</span> E  E  SW SE<span class="hl opt">)</span>
        <span class="hl opt">(</span><span class="hl kwa">list</span> NW W  NW SE SW<span class="hl opt">)</span>
        <span class="hl opt">(</span><span class="hl kwa">list</span> E  E  NE W<span class="hl opt">)</span>
        <span class="hl opt">(</span><span class="hl kwa">list</span> NW NE NE W<span class="hl opt">)</span>
        <span class="hl opt">(</span><span class="hl kwa">list</span> NE SE E  NE<span class="hl opt">)</span>
        <span class="hl opt">(</span><span class="hl kwa">list</span> SE SE E  SE<span class="hl opt">)</span>
        <span class="hl opt">(</span><span class="hl kwa">list</span> E  NW NW NW<span class="hl opt">)))</span>
<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">generate-bitmasks</span><span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">([</span>masks-at-cell
         <span class="hl opt">(</span><span class="hl kwa">list-</span><span class="hl opt">&gt;</span>vector
          <span class="hl opt">(</span><span class="hl kwa">for</span><span class="hl opt">/</span>list <span class="hl opt">([</span>i <span class="hl opt">(</span><span class="hl kwa">in-range</span> size<span class="hl opt">)])</span>
            <span class="hl opt">(</span><span class="hl kwa">list-</span><span class="hl opt">&gt;</span>vector <span class="hl opt">(</span><span class="hl kwa">for</span><span class="hl opt">/</span>list <span class="hl opt">([</span>j <span class="hl opt">(</span><span class="hl kwa">in-range</span> <span class="hl num">10</span><span class="hl opt">)])</span> null<span class="hl opt">))))])</span>
    <span class="hl opt">(</span><span class="hl kwa">for</span> <span class="hl opt">([</span>piece <span class="hl opt">(</span><span class="hl kwa">in-list</span> generate-bitmasks-pieces<span class="hl opt">)]</span>
          <span class="hl opt">[</span>color <span class="hl opt">(</span><span class="hl kwa">in-naturals</span><span class="hl opt">)])</span>
      <span class="hl opt">(</span><span class="hl kwa">let</span> loop <span class="hl opt">([</span>masks <span class="hl opt">(</span><span class="hl kwa">sort</span> <span class="hl opt">(</span><span class="hl kwa">all-bitmasks</span> piece color<span class="hl opt">) &gt;)]</span>
                 <span class="hl opt">[</span>cell-bit <span class="hl opt">(</span><span class="hl kwa">sub1</span> size<span class="hl opt">)]</span>
                 <span class="hl opt">[</span>cell-counter <span class="hl opt">(</span><span class="hl kwa">sub1</span> size<span class="hl opt">)])</span>
        <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">null</span>? masks<span class="hl opt">)</span>
          masks-at-cell
          <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">bitwise-bit-set</span>? <span class="hl opt">(</span><span class="hl kwa">car</span> masks<span class="hl opt">)</span> cell-bit<span class="hl opt">)</span>
            <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">([</span>vec <span class="hl opt">(</span><span class="hl kwa">vector-ref</span> masks-at-cell cell-counter<span class="hl opt">)])</span>
              <span class="hl opt">(</span><span class="hl kwa">vector-set</span><span class="hl opt">!</span> vec color <span class="hl opt">(</span><span class="hl kwa">cons</span> <span class="hl opt">(</span><span class="hl kwa">car</span> masks<span class="hl opt">) (</span><span class="hl kwa">vector-ref</span> vec color<span class="hl opt">)))</span>
              <span class="hl opt">(</span><span class="hl kwa">loop</span> <span class="hl opt">(</span><span class="hl kwa">cdr</span> masks<span class="hl opt">)</span> cell-bit cell-counter<span class="hl opt">))</span>
            <span class="hl opt">(</span><span class="hl kwa">loop</span> masks <span class="hl opt">(</span><span class="hl kwa">sub1</span> cell-bit<span class="hl opt">) (</span><span class="hl kwa">sub1</span> cell-counter<span class="hl opt">))))))</span>
    <span class="hl opt">(</span><span class="hl kwa">for</span> <span class="hl opt">([</span>v <span class="hl opt">(</span><span class="hl kwa">in-vector</span> masks-at-cell<span class="hl opt">)])</span>
      <span class="hl opt">(</span><span class="hl kwa">for</span> <span class="hl opt">([</span>j <span class="hl opt">(</span><span class="hl kwa">in-naturals</span><span class="hl opt">)]</span>
            <span class="hl opt">[</span>val <span class="hl opt">(</span><span class="hl kwa">in-vector</span> v<span class="hl opt">)])</span>
        <span class="hl opt">(</span><span class="hl kwa">vector-set</span><span class="hl opt">!</span> v j <span class="hl opt">(</span><span class="hl kwa">reverse</span> val<span class="hl opt">))))</span>
    masks-at-cell<span class="hl opt">))</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> masks-at-cell <span class="hl opt">(</span><span class="hl kwa">generate-bitmasks</span><span class="hl opt">))</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> masks <span class="hl opt">(</span><span class="hl kwa">make-vector</span> <span class="hl num">10 0</span><span class="hl opt">))</span>
<span class="hl opt">(</span><span class="hl kwa">define</span> to-go <span class="hl num">0</span><span class="hl opt">)</span>
<span class="hl opt">(</span><span class="hl kwa">define</span> solutions <span class="hl opt">(</span><span class="hl kwa">mcons</span> <span class="hl opt">#</span>f <span class="hl opt">#</span>f<span class="hl opt">))</span> <span class="hl slc">; keeps (min max) solutions</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">solve-cell</span><span class="hl opt">!</span> cell board<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">when</span> <span class="hl opt">(</span><span class="hl kwa">and</span> <span class="hl opt">(</span><span class="hl kwa">positive</span>? to-go<span class="hl opt">) (</span><span class="hl kwa">not</span> <span class="hl opt">(</span><span class="hl kwa">negative</span>? cell<span class="hl opt">)))</span>
    <span class="hl slc">;; Need solutions and not off board</span>
    <span class="hl opt">(</span><span class="hl kwa">cond</span> <span class="hl opt">[(=</span> board <span class="hl opt">#</span>x3FFFFFFFFFFFF<span class="hl opt">)</span>
           <span class="hl slc">;; Solved</span>
           <span class="hl opt">(</span><span class="hl kwa">add-solutions</span><span class="hl opt">!)]</span>
          <span class="hl opt">[(</span><span class="hl kwa">not</span> <span class="hl opt">(</span><span class="hl kwa">clear</span>? board cell<span class="hl opt">))</span>
           <span class="hl slc">;; Cell full, so try next</span>
           <span class="hl opt">(</span><span class="hl kwa">solve-cell</span><span class="hl opt">! (</span><span class="hl kwa">sub1</span> cell<span class="hl opt">)</span> board<span class="hl opt">)]</span>
          <span class="hl opt">[</span>else
           <span class="hl slc">;; Recur</span>
           <span class="hl opt">(</span><span class="hl kwa">for</span><span class="hl opt">* ([</span>color <span class="hl opt">(</span><span class="hl kwa">in-range</span> <span class="hl num">10</span><span class="hl opt">)]</span>
                  <span class="hl opt">#:</span>when <span class="hl opt">(</span><span class="hl kwa">zero</span>? <span class="hl opt">(</span><span class="hl kwa">vector-ref</span> masks color<span class="hl opt">))</span>
                  <span class="hl opt">[</span>mask <span class="hl opt">(</span><span class="hl kwa">in-list</span> <span class="hl opt">(</span><span class="hl kwa">vector-ref</span> <span class="hl opt">(</span><span class="hl kwa">vector-ref</span> masks-at-cell cell<span class="hl opt">)</span>
                                             color<span class="hl opt">))]</span>
                  <span class="hl opt">#:</span>when <span class="hl opt">(</span><span class="hl kwa">zero</span>? <span class="hl opt">(</span><span class="hl kwa">bitwise-and</span> mask board<span class="hl opt">)))</span>
             <span class="hl opt">(</span><span class="hl kwa">vector-set</span><span class="hl opt">!</span> masks color mask<span class="hl opt">)</span>
             <span class="hl opt">(</span><span class="hl kwa">solve-cell</span><span class="hl opt">! (</span><span class="hl kwa">sub1</span> cell<span class="hl opt">) (</span><span class="hl kwa">bitwise-ior</span> board mask<span class="hl opt">))</span>
             <span class="hl opt">(</span><span class="hl kwa">vector-set</span><span class="hl opt">!</span> masks color <span class="hl num">0</span><span class="hl opt">))])))</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">add-solutions</span><span class="hl opt">!)</span>
  <span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">add</span><span class="hl opt">!</span> solution<span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl kwa">cond</span> <span class="hl opt">[(</span><span class="hl kwa">not</span> <span class="hl opt">(</span><span class="hl kwa">mcar</span> solutions<span class="hl opt">))</span>
           <span class="hl opt">(</span><span class="hl kwa">set-mcar</span><span class="hl opt">!</span> solutions solution<span class="hl opt">)</span>
           <span class="hl opt">(</span><span class="hl kwa">set-mcdr</span><span class="hl opt">!</span> solutions solution<span class="hl opt">)]</span>
          <span class="hl opt">[(</span><span class="hl kwa">bytes</span><span class="hl opt">&lt;</span>? solution <span class="hl opt">(</span><span class="hl kwa">mcar</span> solutions<span class="hl opt">))</span>
           <span class="hl opt">(</span><span class="hl kwa">set-mcar</span><span class="hl opt">!</span> solutions solution<span class="hl opt">)]</span>
          <span class="hl opt">[(</span><span class="hl kwa">bytes</span><span class="hl opt">&gt;</span>? solution <span class="hl opt">(</span><span class="hl kwa">mcdr</span> solutions<span class="hl opt">))</span>
           <span class="hl opt">(</span><span class="hl kwa">set-mcdr</span><span class="hl opt">!</span> solutions solution<span class="hl opt">)]))</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span><span class="hl opt">* ([</span>s <span class="hl opt">(</span><span class="hl kwa">list-</span><span class="hl opt">&gt;</span>bytes
             <span class="hl opt">(</span><span class="hl kwa">for</span><span class="hl opt">/</span>list <span class="hl opt">([</span>pos <span class="hl opt">(</span><span class="hl kwa">in-range</span> size<span class="hl opt">)])</span>
               <span class="hl opt">(</span><span class="hl kwa">for</span><span class="hl opt">/</span>or <span class="hl opt">([</span>color <span class="hl opt">(</span><span class="hl kwa">in-range</span> <span class="hl num">10</span><span class="hl opt">)])</span>
                       <span class="hl opt">(</span><span class="hl kwa">and</span> <span class="hl opt">(</span><span class="hl kwa">not</span> <span class="hl opt">(</span><span class="hl kwa">clear</span>? <span class="hl opt">(</span><span class="hl kwa">vector-ref</span> masks color<span class="hl opt">)</span> pos<span class="hl opt">))</span>
                            <span class="hl opt">(+</span> color <span class="hl opt">(</span><span class="hl kwa">char-</span><span class="hl opt">&gt;</span>integer <span class="hl opt">#</span>\<span class="hl num">0</span><span class="hl opt">))))))]</span>
         <span class="hl opt">[</span>ns <span class="hl opt">(</span><span class="hl kwa">make-bytes</span> size<span class="hl opt">)])</span>
    <span class="hl slc">;; Inverse</span>
    <span class="hl opt">(</span><span class="hl kwa">for</span><span class="hl opt">* ([</span>y <span class="hl opt">(</span><span class="hl kwa">in-range</span> height<span class="hl opt">)]</span>
           <span class="hl opt">[</span>x <span class="hl opt">(</span><span class="hl kwa">in-range</span> width<span class="hl opt">)])</span>
      <span class="hl opt">(</span><span class="hl kwa">bytes-set</span><span class="hl opt">!</span> ns <span class="hl opt">(+</span> x <span class="hl opt">(*</span> y width<span class="hl opt">))</span>
                  <span class="hl opt">(</span><span class="hl kwa">bytes-ref</span> s <span class="hl opt">(+ (</span><span class="hl kwa">-</span> width <span class="hl opt">(+</span> x <span class="hl num">1</span><span class="hl opt">))</span>
                                  <span class="hl opt">(*</span> width <span class="hl opt">(</span><span class="hl kwa">-</span> height <span class="hl opt">(+</span> y <span class="hl num">1</span><span class="hl opt">)))))))</span>
    <span class="hl slc">;; Keep first and last only</span>
    <span class="hl opt">(</span><span class="hl kwa">add</span><span class="hl opt">!</span> s<span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl kwa">add</span><span class="hl opt">!</span> ns<span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl kwa">set</span><span class="hl opt">!</span> to-go <span class="hl opt">(</span><span class="hl kwa">-</span> to-go <span class="hl num">2</span><span class="hl opt">))))</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">print-solution</span> solution<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">([</span>solution <span class="hl opt">(</span><span class="hl kwa">bytes-</span><span class="hl opt">&gt;</span>string<span class="hl opt">/</span>utf-8 solution<span class="hl opt">)])</span>
    <span class="hl opt">(</span><span class="hl kwa">for</span> <span class="hl opt">([</span>y <span class="hl opt">(</span><span class="hl kwa">in-range</span> height<span class="hl opt">)])</span>
      <span class="hl opt">(</span><span class="hl kwa">when</span> <span class="hl opt">(</span><span class="hl kwa">odd</span>? y<span class="hl opt">) (</span><span class="hl kwa">display</span> <span class="hl str">&quot; &quot;</span><span class="hl opt">))</span>
      <span class="hl opt">(</span><span class="hl kwa">for</span> <span class="hl opt">([</span>x <span class="hl opt">(</span><span class="hl kwa">in-range</span> width<span class="hl opt">)])</span>
        <span class="hl opt">(</span><span class="hl kwa">printf</span> <span class="hl str">&quot;~a &quot;</span> <span class="hl opt">(</span><span class="hl kwa">string-ref</span> solution <span class="hl opt">(+</span> x <span class="hl opt">(*</span> y width<span class="hl opt">)))))</span>
      <span class="hl opt">(</span><span class="hl kwa">printf</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">))</span>
    <span class="hl opt">(</span><span class="hl kwa">newline</span><span class="hl opt">)))</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">solve</span><span class="hl opt">!</span> n<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">set</span><span class="hl opt">!</span> to-go n<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">solve-cell</span><span class="hl opt">! (</span><span class="hl kwa">sub1</span> size<span class="hl opt">)</span> <span class="hl num">0</span><span class="hl opt">))</span>

<span class="hl opt">(</span><span class="hl kwa">command-line</span> <span class="hl opt">#:</span>args <span class="hl opt">(</span><span class="hl kwa">n</span><span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">([</span>n <span class="hl opt">(</span><span class="hl kwa">string-</span><span class="hl opt">&gt;</span>number n<span class="hl opt">)])</span>
    <span class="hl opt">(</span><span class="hl kwa">solve</span><span class="hl opt">!</span> n<span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl kwa">printf</span> <span class="hl str">&quot;~a solutions found</span><span class="hl esc">\n\n</span><span class="hl str">&quot;</span> <span class="hl opt">(</span><span class="hl kwa">-</span> n to-go<span class="hl opt">))</span>
    <span class="hl opt">(</span><span class="hl kwa">print-solution</span> <span class="hl opt">(</span><span class="hl kwa">mcar</span> solutions<span class="hl opt">))</span>
    <span class="hl opt">(</span><span class="hl kwa">print-solution</span> <span class="hl opt">(</span><span class="hl kwa">mcdr</span> solutions<span class="hl opt">))))</span>
