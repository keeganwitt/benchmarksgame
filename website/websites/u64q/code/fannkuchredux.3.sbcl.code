<span class="hl slc">;;   The Computer Language Benchmarks Game</span>
<span class="hl slc">;;   http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">;;;</span>
<span class="hl slc">;;; By Jon Smith (rev 3) added some more declarations.</span>
<span class="hl slc">;;; Tranlated from OCaml implementation by ?, who translated it from</span>
<span class="hl slc">;;; the Scala implementation by Otto Bommer.</span>
<span class="hl slc">;;; </span>
<span class="hl slc">;;; This is a single core implementation. </span>
<span class="hl slc">;;; I am sure that this program can be improved upon quite a lot.</span>
<span class="hl slc">;;; Most likely it will involve knowing how sbcl does its optimizations.</span>
<span class="hl slc">;;; As you can see, I simply used fixnums everywhere. There may be a better choice.</span>
<span class="hl slc">;;;</span>
<span class="hl slc">;;; To compile</span>
<span class="hl slc">;;; sbcl --load fannkuch.lisp --eval &quot;(save-lisp-and-die \&quot;fannkuch.core\&quot; :purify t :toplevel (lambda () (main) (quit)))&quot;</span>
<span class="hl slc">;;; To run</span>
<span class="hl slc">;;; sbcl --noinform --core fannkuch.core %A</span>

<span class="hl slc">;(setf *efficiency-note-cost-threshold* 1)</span>
<span class="hl slc">;(setf *efficiency-note-limit* 8)</span>

<span class="hl opt">(</span><span class="hl kwa">declaim</span> <span class="hl opt">(</span><span class="hl kwa">optimize</span> <span class="hl opt">(</span><span class="hl kwa">speed</span> <span class="hl num">3</span><span class="hl opt">) (</span><span class="hl kwa">safety</span> <span class="hl num">0</span><span class="hl opt">) (</span><span class="hl kwa">space</span> <span class="hl num">1</span><span class="hl opt">) (</span><span class="hl kwa">debug</span> <span class="hl num">0</span><span class="hl opt">)))</span>

<span class="hl opt">(</span><span class="hl kwa">defmacro</span> sb <span class="hl opt">(</span><span class="hl kwa">a</span><span class="hl opt">) `(</span><span class="hl kwa">the</span> fixnum <span class="hl opt">,</span>a<span class="hl opt">))</span>
<span class="hl opt">(</span><span class="hl kwa">deftype</span> sb <span class="hl opt">() '</span>fixnum<span class="hl opt">)</span>

<span class="hl opt">(</span><span class="hl kwa">defmacro</span> setlambda<span class="hl opt">(</span><span class="hl kwa">n</span><span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> fixnum n<span class="hl opt">))</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">((</span><span class="hl kwa">copy</span> <span class="hl opt">(</span><span class="hl kwa">gensym</span><span class="hl opt">))</span>
	<span class="hl opt">(</span><span class="hl kwa">perm</span> <span class="hl opt">(</span><span class="hl kwa">gensym</span><span class="hl opt">)))</span>
  <span class="hl opt">`(</span><span class="hl kwa">lambda</span> <span class="hl opt">(,</span>perm <span class="hl opt">,</span>copy<span class="hl opt">)</span>
     <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">optimize</span> <span class="hl opt">(</span><span class="hl kwa">speed</span> <span class="hl num">3</span><span class="hl opt">) (</span><span class="hl kwa">safety</span> <span class="hl num">0</span><span class="hl opt">) (</span><span class="hl kwa">space</span> <span class="hl num">0</span><span class="hl opt">) (</span><span class="hl kwa">debug</span> <span class="hl num">0</span><span class="hl opt">))</span>
      <span class="hl opt">(</span><span class="hl kwa">type</span> <span class="hl opt">(</span><span class="hl kwa">simple-array</span> sb <span class="hl opt">(,</span>n<span class="hl opt">)) ,</span>copy <span class="hl opt">,</span>perm<span class="hl opt">))</span>
     <span class="hl opt">,&#64;(</span><span class="hl kwa">loop</span> for i of-type fixnum from <span class="hl num">0</span> below n collect
	    <span class="hl opt">`(</span><span class="hl kwa">setf</span> <span class="hl opt">(</span><span class="hl kwa">aref</span> <span class="hl opt">,</span>copy <span class="hl opt">,</span>i<span class="hl opt">) (</span><span class="hl kwa">aref</span> <span class="hl opt">,</span>perm <span class="hl opt">,</span>i<span class="hl opt">))))))</span>

<span class="hl opt">(</span><span class="hl kwa">defmacro</span> countfliplambda <span class="hl opt">(</span><span class="hl kwa">n</span><span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> fixnum n<span class="hl opt">))</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">((</span><span class="hl kwa">copy</span> <span class="hl opt">(</span><span class="hl kwa">gensym</span><span class="hl opt">))</span>
	<span class="hl opt">(</span><span class="hl kwa">c</span> <span class="hl opt">(</span><span class="hl kwa">gensym</span><span class="hl opt">))</span>
	<span class="hl opt">(</span><span class="hl kwa">z</span> <span class="hl opt">(</span><span class="hl kwa">gensym</span><span class="hl opt">)))</span>
    <span class="hl opt">`(</span><span class="hl kwa">lambda</span> <span class="hl opt">(,</span>copy <span class="hl opt">&amp;</span>aux <span class="hl opt">(,</span>c <span class="hl num">0</span><span class="hl opt">))</span>
       <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">optimize</span> <span class="hl opt">(</span><span class="hl kwa">speed</span> <span class="hl num">3</span><span class="hl opt">) (</span><span class="hl kwa">safety</span> <span class="hl num">0</span><span class="hl opt">) (</span><span class="hl kwa">space</span> <span class="hl num">0</span><span class="hl opt">) (</span><span class="hl kwa">debug</span> <span class="hl num">0</span><span class="hl opt">))</span>
		<span class="hl opt">(</span><span class="hl kwa">type</span> sb <span class="hl opt">,</span>c<span class="hl opt">)</span>
		<span class="hl opt">(</span><span class="hl kwa">type</span> <span class="hl opt">(</span><span class="hl kwa">simple-array</span> sb <span class="hl opt">(,</span>n<span class="hl opt">)) ,</span>copy<span class="hl opt">))</span>
       <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">((,</span>z <span class="hl opt">(</span><span class="hl kwa">aref</span> <span class="hl opt">,</span>copy <span class="hl num">0</span><span class="hl opt">)))</span>
	 <span class="hl opt">(</span><span class="hl kwa">loop</span> until <span class="hl opt">(= ,</span>z <span class="hl num">0</span><span class="hl opt">)</span> do
	      <span class="hl opt">(</span><span class="hl kwa">progn</span>
		<span class="hl opt">(</span><span class="hl kwa">case</span> <span class="hl opt">,</span>z 
		  <span class="hl opt">,&#64;(</span><span class="hl kwa">loop</span> for i of-type sb from <span class="hl num">1</span> to <span class="hl opt">(</span><span class="hl kwa">-</span> n <span class="hl num">1</span><span class="hl opt">)</span> collect
			 <span class="hl opt">`(,</span>i
			   <span class="hl opt">,&#64;(</span><span class="hl kwa">loop</span> for j of-type sb from <span class="hl num">0</span> to <span class="hl opt">(</span><span class="hl kwa">ash</span> i -<span class="hl num">1</span><span class="hl opt">)</span>
				if <span class="hl opt">(</span><span class="hl kwa">not</span> <span class="hl opt">(=</span> j <span class="hl opt">(</span><span class="hl kwa">-</span> i j<span class="hl opt">)))</span>
				collect <span class="hl opt">`(</span><span class="hl kwa">rotatef</span> <span class="hl opt">(</span><span class="hl kwa">aref</span> <span class="hl opt">,</span>copy <span class="hl opt">,</span>j<span class="hl opt">)</span> 
						  <span class="hl opt">(</span><span class="hl kwa">aref</span> <span class="hl opt">,</span>copy <span class="hl opt">,(</span><span class="hl kwa">-</span> i j<span class="hl opt">)))))))</span>
		<span class="hl opt">(</span><span class="hl kwa">incf</span> <span class="hl opt">,</span>c<span class="hl opt">)</span>
		<span class="hl opt">(</span><span class="hl kwa">setf</span> <span class="hl opt">,</span>z <span class="hl opt">(</span><span class="hl kwa">aref</span> <span class="hl opt">,</span>copy <span class="hl num">0</span><span class="hl opt">)))))</span>
       <span class="hl opt">,</span>c<span class="hl opt">)))</span>

<span class="hl opt">(</span><span class="hl kwa">defun</span> fannkuch <span class="hl opt">(</span><span class="hl kwa">n</span><span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> sb n<span class="hl opt">))</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">((</span><span class="hl kwa">csum</span> <span class="hl num">0</span><span class="hl opt">)</span>
	<span class="hl opt">(</span><span class="hl kwa">fmax</span> <span class="hl num">0</span><span class="hl opt">))</span>
    <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> sb csum fmax<span class="hl opt">))</span>
    <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">((</span><span class="hl kwa">perm</span> <span class="hl opt">(</span><span class="hl kwa">make-array</span> n <span class="hl opt">:</span>element-type <span class="hl opt">'</span>fixnum<span class="hl opt">))</span>
	  <span class="hl opt">(</span><span class="hl kwa">copy</span> <span class="hl opt">(</span><span class="hl kwa">make-array</span> n <span class="hl opt">:</span>element-type <span class="hl opt">'</span>fixnum<span class="hl opt">))</span>
	  <span class="hl opt">(</span><span class="hl kwa">num</span> <span class="hl num">0</span><span class="hl opt">)</span>
	  <span class="hl opt">(</span><span class="hl kwa">cflip</span> <span class="hl opt">(</span><span class="hl kwa">the</span> <span class="hl opt">(</span><span class="hl kwa">function</span> <span class="hl opt">((</span><span class="hl kwa">simple-array</span> sb <span class="hl opt">(*)))) (</span><span class="hl kwa">eval</span> <span class="hl opt">`(</span><span class="hl kwa">countfliplambda</span> <span class="hl opt">,</span>n<span class="hl opt">))))</span>
	  <span class="hl opt">(</span><span class="hl kwa">copyfn</span> <span class="hl opt">(</span><span class="hl kwa">the</span> <span class="hl opt">(</span><span class="hl kwa">function</span> <span class="hl opt">((</span><span class="hl kwa">simple-array</span> sb <span class="hl opt">(*)) (</span><span class="hl kwa">simple-array</span> sb <span class="hl opt">(*)))) (</span><span class="hl kwa">eval</span> <span class="hl opt">`(</span><span class="hl kwa">setlambda</span> <span class="hl opt">,</span>n<span class="hl opt">)))))</span>
      <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> <span class="hl opt">(</span><span class="hl kwa">simple-array</span> sb <span class="hl opt">(*))</span> perm copy<span class="hl opt">)</span>
	       <span class="hl opt">(</span><span class="hl kwa">type</span> sb num<span class="hl opt">))</span>

      <span class="hl opt">(</span><span class="hl kwa">loop</span> for i from <span class="hl num">0</span> to <span class="hl opt">(</span><span class="hl kwa">-</span> n <span class="hl num">1</span><span class="hl opt">)</span> do <span class="hl opt">(</span><span class="hl kwa">setf</span> <span class="hl opt">(</span><span class="hl kwa">aref</span> perm i<span class="hl opt">)</span> i<span class="hl opt">))</span>
      
      <span class="hl opt">(</span><span class="hl kwa">labels</span> <span class="hl opt">((</span><span class="hl kwa">do-iter</span> <span class="hl opt">(</span><span class="hl kwa">ht</span><span class="hl opt">)</span>
		 <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> sb ht<span class="hl opt">))</span>
		 <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(=</span> ht <span class="hl num">1</span><span class="hl opt">)</span>
		     <span class="hl opt">(</span><span class="hl kwa">progn</span>
		       <span class="hl opt">(</span><span class="hl kwa">funcall</span> copyfn perm copy<span class="hl opt">)</span>
		       <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">((</span><span class="hl kwa">c</span> <span class="hl opt">(</span><span class="hl kwa">funcall</span> cflip copy<span class="hl opt">)))</span>
			 <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> sb c<span class="hl opt">))</span>
			 <span class="hl opt">(</span><span class="hl kwa">setf</span> csum <span class="hl opt">(</span><span class="hl kwa">sb</span> <span class="hl opt">(+</span> csum  <span class="hl opt">(</span><span class="hl kwa">sb</span> <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">evenp</span> num<span class="hl opt">)</span> c <span class="hl opt">(</span><span class="hl kwa">-</span> c<span class="hl opt">))))))</span>
			 <span class="hl opt">(</span><span class="hl kwa">when</span> <span class="hl opt">(&gt;</span> c fmax<span class="hl opt">)</span>
			   <span class="hl opt">(</span><span class="hl kwa">setf</span> fmax c<span class="hl opt">)))</span>
		       <span class="hl opt">(</span><span class="hl kwa">incf</span> num<span class="hl opt">))</span>
		     <span class="hl opt">(</span><span class="hl kwa">loop</span> for i of-type sb from <span class="hl num">1</span> to ht do
			  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">((</span><span class="hl kwa">m</span> <span class="hl opt">(</span><span class="hl kwa">-</span> ht <span class="hl num">1</span><span class="hl opt">)))</span> 
			    <span class="hl opt">(</span><span class="hl kwa">do-iter</span> m<span class="hl opt">)</span>
			    <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">((</span><span class="hl kwa">temp</span> <span class="hl opt">(</span><span class="hl kwa">aref</span> perm <span class="hl num">0</span><span class="hl opt">)))</span>
			      <span class="hl opt">(</span><span class="hl kwa">loop</span> for i from <span class="hl num">1</span> to m do
				   <span class="hl opt">(</span><span class="hl kwa">setf</span> <span class="hl opt">(</span><span class="hl kwa">aref</span> perm <span class="hl opt">(</span><span class="hl kwa">-</span> i <span class="hl num">1</span><span class="hl opt">)) (</span><span class="hl kwa">aref</span> perm i<span class="hl opt">)))</span>
			      <span class="hl opt">(</span><span class="hl kwa">setf</span> <span class="hl opt">(</span><span class="hl kwa">aref</span> perm m<span class="hl opt">)</span> temp<span class="hl opt">)))))))</span>

	<span class="hl opt">(</span><span class="hl kwa">do-iter</span> n<span class="hl opt">)))</span>
    <span class="hl opt">(</span><span class="hl kwa">format</span> t <span class="hl str">&quot;~s~%Pfannkuchen(~s) = ~s~%&quot;</span> csum n fmax<span class="hl opt">)))</span>


<span class="hl opt">(</span><span class="hl kwa">defun</span> main <span class="hl opt">()</span>  
  <span class="hl opt">(</span><span class="hl kwa">let</span><span class="hl opt">* ((</span><span class="hl kwa">args</span> <span class="hl opt">(</span><span class="hl kwa">cdr</span> sb-ext<span class="hl opt">:*</span>posix-argv<span class="hl opt">*))</span>
         <span class="hl opt">(</span><span class="hl kwa">n</span> <span class="hl opt">(</span><span class="hl kwa">parse-integer</span> <span class="hl opt">(</span><span class="hl kwa">car</span> args<span class="hl opt">))))</span>
    <span class="hl opt">(</span><span class="hl kwa">fannkuch</span> n<span class="hl opt">)))</span>
