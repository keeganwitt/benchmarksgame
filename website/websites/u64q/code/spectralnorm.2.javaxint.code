<span class="hl com">/*</span>
<span class="hl com">The Computer Language Benchmarks Game</span>
<span class="hl com">http://shootout.alioth.debian.org/</span>
<span class="hl com"> </span>
<span class="hl com">Based on C# entry by Isaac Gouy</span>
<span class="hl com">contributed by Jarkko Miettinen</span>
<span class="hl com">Parallel by The Anh Tran</span>
<span class="hl com"> */</span>

<span class="hl kwa">import</span> java<span class="hl sym">.</span>text<span class="hl sym">.</span><span class="hl kwc">DecimalFormat</span><span class="hl sym">;</span>
<span class="hl kwa">import</span> java<span class="hl sym">.</span>text<span class="hl sym">.</span><span class="hl kwc">NumberFormat</span><span class="hl sym">;</span>
<span class="hl kwa">import</span> java<span class="hl sym">.</span>util<span class="hl sym">.</span>concurrent<span class="hl sym">.</span><span class="hl kwc">CyclicBarrier</span><span class="hl sym">;</span>

<span class="hl kwa">public class</span> spectralnorm
<span class="hl sym">{</span>
    <span class="hl kwa">private static final</span> <span class="hl kwc">NumberFormat</span> formatter <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">DecimalFormat</span> <span class="hl sym">(</span><span class="hl str">&quot;#.000000000&quot;</span><span class="hl sym">);</span>
    
    <span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">main</span> <span class="hl sym">(</span><span class="hl kwc">String</span><span class="hl sym">[]</span> args<span class="hl sym">)</span>
    <span class="hl sym">{</span>
        <span class="hl kwb">int</span> n <span class="hl sym">=</span> <span class="hl num">1000</span><span class="hl sym">;</span>
        <span class="hl kwa">if</span> <span class="hl sym">(</span>args<span class="hl sym">.</span>length <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">)</span> n <span class="hl sym">=</span> <span class="hl kwc">Integer</span><span class="hl sym">.</span><span class="hl kwd">parseInt</span> <span class="hl sym">(</span>args<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]);</span>
        
        <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span> <span class="hl sym">(</span>formatter<span class="hl sym">.</span><span class="hl kwd">format</span> <span class="hl sym">(</span><span class="hl kwd">spectralnormGame</span> <span class="hl sym">(</span>n<span class="hl sym">)) );</span>
    <span class="hl sym">}</span>
    
    
    <span class="hl kwa">private static final</span> <span class="hl kwb">double</span> <span class="hl kwd">spectralnormGame</span> <span class="hl sym">(</span><span class="hl kwb">int</span> n<span class="hl sym">)</span>
    <span class="hl sym">{</span>
        <span class="hl slc">// create unit vector</span>
        <span class="hl kwb">double</span><span class="hl sym">[]</span> u <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwb">double</span><span class="hl sym">[</span>n<span class="hl sym">];</span>
        <span class="hl kwb">double</span><span class="hl sym">[]</span> v <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwb">double</span><span class="hl sym">[</span>n<span class="hl sym">];</span>
        <span class="hl kwb">double</span><span class="hl sym">[]</span> tmp <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwb">double</span><span class="hl sym">[</span>n<span class="hl sym">];</span>
        
        <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> n<span class="hl sym">;</span> i<span class="hl sym">++)</span>
            u<span class="hl sym">[</span>i<span class="hl sym">] =</span> <span class="hl num">1.0</span><span class="hl sym">;</span>
        
        <span class="hl slc">// get available processor, then set up syn object</span>
        <span class="hl kwb">int</span> nthread <span class="hl sym">=</span> <span class="hl kwc">Runtime</span><span class="hl sym">.</span><span class="hl kwd">getRuntime</span> <span class="hl sym">().</span><span class="hl kwd">availableProcessors</span> <span class="hl sym">();</span>
        Approximate<span class="hl sym">.</span>barrier <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">CyclicBarrier</span> <span class="hl sym">(</span>nthread<span class="hl sym">);</span>
        
        <span class="hl kwb">int</span> chunk <span class="hl sym">=</span> n <span class="hl sym">/</span> nthread<span class="hl sym">;</span>
        Approximate<span class="hl sym">[]</span> ap <span class="hl sym">=</span> <span class="hl kwa">new</span> Approximate<span class="hl sym">[</span>nthread<span class="hl sym">];</span>
        
        <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> nthread<span class="hl sym">;</span> i<span class="hl sym">++)</span>
        <span class="hl sym">{</span>
            <span class="hl kwb">int</span> r1 <span class="hl sym">=</span> i <span class="hl sym">*</span> chunk<span class="hl sym">;</span>
            <span class="hl kwb">int</span> r2 <span class="hl sym">= (</span>i <span class="hl sym">&lt; (</span>nthread <span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">))</span> ? r1 <span class="hl sym">+</span> chunk <span class="hl sym">:</span> n<span class="hl sym">;</span>
            
            ap<span class="hl sym">[</span>i<span class="hl sym">] =</span> <span class="hl kwa">new</span> <span class="hl kwd">Approximate</span> <span class="hl sym">(</span>u<span class="hl sym">,</span> v<span class="hl sym">,</span> tmp<span class="hl sym">,</span> r1<span class="hl sym">,</span> r2<span class="hl sym">);</span>
        <span class="hl sym">}</span>
        
        
        <span class="hl kwb">double</span> vBv <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">,</span> vv <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
        <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> nthread<span class="hl sym">;</span> i<span class="hl sym">++)</span>
        <span class="hl sym">{</span>
            <span class="hl kwa">try</span>
            <span class="hl sym">{</span>
                ap<span class="hl sym">[</span>i<span class="hl sym">].</span><span class="hl kwd">join</span> <span class="hl sym">();</span>
                
                vBv <span class="hl sym">+=</span> ap<span class="hl sym">[</span>i<span class="hl sym">].</span>m_vBv<span class="hl sym">;</span>
                vv <span class="hl sym">+=</span> ap<span class="hl sym">[</span>i<span class="hl sym">].</span>m_vv<span class="hl sym">;</span>
            <span class="hl sym">}</span>
            <span class="hl kwa">catch</span> <span class="hl sym">(</span><span class="hl kwc">Exception</span> e<span class="hl sym">)</span>
            <span class="hl sym">{</span>
                e<span class="hl sym">.</span><span class="hl kwd">printStackTrace</span> <span class="hl sym">();</span>
            <span class="hl sym">}</span>
        <span class="hl sym">}</span>
        
        <span class="hl kwa">return</span> <span class="hl kwc">Math</span><span class="hl sym">.</span><span class="hl kwd">sqrt</span> <span class="hl sym">(</span>vBv<span class="hl sym">/</span>vv<span class="hl sym">);</span>
    <span class="hl sym">}</span>
    
    
    <span class="hl kwa">private static class</span> Approximate <span class="hl kwa">extends</span> <span class="hl kwc">Thread</span>
    <span class="hl sym">{</span>
        <span class="hl kwa">private static</span> <span class="hl kwc">CyclicBarrier</span> barrier<span class="hl sym">;</span>
        
        <span class="hl kwa">private</span> <span class="hl kwb">double</span><span class="hl sym">[]</span> _u<span class="hl sym">;</span>
        <span class="hl kwa">private</span> <span class="hl kwb">double</span><span class="hl sym">[]</span> _v<span class="hl sym">;</span>
        <span class="hl kwa">private</span> <span class="hl kwb">double</span><span class="hl sym">[]</span> _tmp<span class="hl sym">;</span>
        
        <span class="hl kwa">private</span> <span class="hl kwb">int</span> range_begin<span class="hl sym">,</span> range_end<span class="hl sym">;</span>
        <span class="hl kwa">private</span> <span class="hl kwb">double</span> m_vBv <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">,</span> m_vv <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
        
        
        <span class="hl kwa">public</span> <span class="hl kwd">Approximate</span> <span class="hl sym">(</span><span class="hl kwb">double</span><span class="hl sym">[]</span> u<span class="hl sym">,</span> <span class="hl kwb">double</span><span class="hl sym">[]</span> v<span class="hl sym">,</span> <span class="hl kwb">double</span><span class="hl sym">[]</span> tmp<span class="hl sym">,</span> <span class="hl kwb">int</span> rbegin<span class="hl sym">,</span> <span class="hl kwb">int</span> rend<span class="hl sym">)</span>
        <span class="hl sym">{</span>
            <span class="hl kwa">super</span> <span class="hl sym">();</span>
            
            _u <span class="hl sym">=</span> u<span class="hl sym">;</span>
            _v <span class="hl sym">=</span> v<span class="hl sym">;</span>
            _tmp <span class="hl sym">=</span> tmp<span class="hl sym">;</span>
            
            range_begin <span class="hl sym">=</span> rbegin<span class="hl sym">;</span>
            range_end <span class="hl sym">=</span> rend<span class="hl sym">;</span>
            
            <span class="hl kwd">start</span> <span class="hl sym">();</span>
        <span class="hl sym">}</span>
        
        <span class="hl kwa">public</span> <span class="hl kwb">void</span> <span class="hl kwd">run</span> <span class="hl sym">()</span>
        <span class="hl sym">{</span>
            <span class="hl slc">// 20 steps of the power method</span>
            <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> <span class="hl num">10</span><span class="hl sym">;</span> i<span class="hl sym">++)</span>
            <span class="hl sym">{</span>
                <span class="hl kwd">MultiplyAtAv</span> <span class="hl sym">(</span>_u<span class="hl sym">,</span> _tmp<span class="hl sym">,</span> _v<span class="hl sym">);</span>
                <span class="hl kwd">MultiplyAtAv</span> <span class="hl sym">(</span>_v<span class="hl sym">,</span> _tmp<span class="hl sym">,</span> _u<span class="hl sym">);</span>
            <span class="hl sym">}</span>
            
            <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> range_begin<span class="hl sym">;</span> i <span class="hl sym">&lt;</span> range_end<span class="hl sym">;</span> i<span class="hl sym">++)</span>
            <span class="hl sym">{</span>
                m_vBv <span class="hl sym">+=</span> _u<span class="hl sym">[</span>i<span class="hl sym">] *</span> _v<span class="hl sym">[</span>i<span class="hl sym">];</span>
                m_vv  <span class="hl sym">+=</span> _v<span class="hl sym">[</span>i<span class="hl sym">] *</span> _v<span class="hl sym">[</span>i<span class="hl sym">];</span>
            <span class="hl sym">}</span>
        <span class="hl sym">}</span>
        
        <span class="hl com">/* return element i,j of infinite matrix A */</span>
        <span class="hl kwa">private final static</span> <span class="hl kwb">double</span> <span class="hl kwd">eval_A</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">,</span> <span class="hl kwb">int</span> j<span class="hl sym">)</span>
        <span class="hl sym">{</span>
            <span class="hl kwb">int</span> div <span class="hl sym">= ( ((</span>i<span class="hl sym">+</span>j<span class="hl sym">) * (</span>i<span class="hl sym">+</span>j<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">) &gt;&gt;&gt;</span> <span class="hl num">1</span><span class="hl sym">) +</span>i<span class="hl sym">+</span><span class="hl num">1</span> <span class="hl sym">);</span>
            <span class="hl kwa">return</span> <span class="hl num">1.0</span> <span class="hl sym">/</span> div<span class="hl sym">;</span>
        <span class="hl sym">}</span>
        
        <span class="hl com">/* multiply vector v by matrix A, each thread evaluate its range only */</span>
        <span class="hl kwa">private final</span> <span class="hl kwb">void</span> <span class="hl kwd">MultiplyAv</span> <span class="hl sym">(</span><span class="hl kwa">final</span> <span class="hl kwb">double</span><span class="hl sym">[]</span> v<span class="hl sym">,</span> <span class="hl kwb">double</span><span class="hl sym">[]</span> Av<span class="hl sym">)</span>
        <span class="hl sym">{</span>
            <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> range_begin<span class="hl sym">;</span> i <span class="hl sym">&lt;</span> range_end<span class="hl sym">;</span> i<span class="hl sym">++)</span>
            <span class="hl sym">{</span>
                <span class="hl kwb">double</span> sum <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
                <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> j <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> j <span class="hl sym">&lt;</span> v<span class="hl sym">.</span>length<span class="hl sym">;</span> j<span class="hl sym">++)</span>
                    sum <span class="hl sym">+=</span> <span class="hl kwd">eval_A</span> <span class="hl sym">(</span>i<span class="hl sym">,</span> j<span class="hl sym">) *</span> v<span class="hl sym">[</span>j<span class="hl sym">];</span>
                
                Av<span class="hl sym">[</span>i<span class="hl sym">] =</span> sum<span class="hl sym">;</span>
            <span class="hl sym">}</span>
        <span class="hl sym">}</span>
        
        <span class="hl com">/* multiply vector v by matrix A transposed */</span>
        <span class="hl kwa">private final</span> <span class="hl kwb">void</span> <span class="hl kwd">MultiplyAtv</span> <span class="hl sym">(</span><span class="hl kwa">final</span> <span class="hl kwb">double</span><span class="hl sym">[]</span> v<span class="hl sym">,</span> <span class="hl kwb">double</span><span class="hl sym">[]</span> Atv<span class="hl sym">)</span>
        <span class="hl sym">{</span>
            <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> range_begin<span class="hl sym">;</span> i <span class="hl sym">&lt;</span> range_end<span class="hl sym">;</span> i<span class="hl sym">++)</span>
            <span class="hl sym">{</span>
                <span class="hl kwb">double</span> sum <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
                <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> j <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> j <span class="hl sym">&lt;</span> v<span class="hl sym">.</span>length<span class="hl sym">;</span> j<span class="hl sym">++)</span>
                    sum <span class="hl sym">+=</span> <span class="hl kwd">eval_A</span> <span class="hl sym">(</span>j<span class="hl sym">,</span> i<span class="hl sym">) *</span> v<span class="hl sym">[</span>j<span class="hl sym">];</span>
                
                Atv<span class="hl sym">[</span>i<span class="hl sym">] =</span> sum<span class="hl sym">;</span>
            <span class="hl sym">}</span>
        <span class="hl sym">}</span>
        
        <span class="hl com">/* multiply vector v by matrix A and then by matrix A transposed */</span>
        <span class="hl kwa">private final</span> <span class="hl kwb">void</span> <span class="hl kwd">MultiplyAtAv</span> <span class="hl sym">(</span><span class="hl kwa">final</span> <span class="hl kwb">double</span><span class="hl sym">[]</span> v<span class="hl sym">,</span> <span class="hl kwb">double</span><span class="hl sym">[]</span> tmp<span class="hl sym">,</span> <span class="hl kwb">double</span><span class="hl sym">[]</span> AtAv<span class="hl sym">)</span>
        <span class="hl sym">{</span>
            <span class="hl kwa">try</span>
            <span class="hl sym">{</span>
                <span class="hl kwd">MultiplyAv</span> <span class="hl sym">(</span>v<span class="hl sym">,</span> tmp<span class="hl sym">);</span>
                <span class="hl slc">// all thread must syn at completion</span>
                barrier<span class="hl sym">.</span><span class="hl kwd">await</span> <span class="hl sym">();</span>
                <span class="hl kwd">MultiplyAtv</span> <span class="hl sym">(</span>tmp<span class="hl sym">,</span> AtAv<span class="hl sym">);</span>
                <span class="hl slc">// all thread must syn at completion</span>
                barrier<span class="hl sym">.</span><span class="hl kwd">await</span> <span class="hl sym">();</span>
            <span class="hl sym">}</span>
            <span class="hl kwa">catch</span> <span class="hl sym">(</span><span class="hl kwc">Exception</span> e<span class="hl sym">)</span>
            <span class="hl sym">{</span>
                e<span class="hl sym">.</span><span class="hl kwd">printStackTrace</span> <span class="hl sym">();</span>
            <span class="hl sym">}</span>
        <span class="hl sym">}</span>
    <span class="hl sym">}</span>
<span class="hl sym">}</span>
