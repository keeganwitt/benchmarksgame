<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by Marc Millstone</span>
<span class="hl com">*/</span>


<span class="hl kwa">import</span> scala<span class="hl opt">.</span>annotation<span class="hl opt">.</span>tailrec
<span class="hl kwa">import</span> scala<span class="hl opt">.</span>actors<span class="hl opt">.</span>Futures<span class="hl opt">.</span>_

<span class="hl kwa">object</span> spectralnorm  <span class="hl opt">{</span>
<span class="hl kwa">def</span> <span class="hl kwd">main</span><span class="hl opt">(</span>args<span class="hl opt">:</span> Array<span class="hl opt">[</span>String<span class="hl opt">]) = {</span>
   <span class="hl kwa">val</span> n <span class="hl opt">= (</span><span class="hl kwa">if</span> <span class="hl opt">(</span>args<span class="hl opt">.</span>length<span class="hl opt">&gt;</span><span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwd">args</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">).</span>toInt <span class="hl kwa">else</span> <span class="hl num">100</span><span class="hl opt">)</span>
   <span class="hl kwa">val</span> sTime <span class="hl opt">=</span> System<span class="hl opt">.</span>currentTimeMillis   
   <span class="hl kwa">val</span> solution <span class="hl opt">=</span> <span class="hl kwd">RecursiveSpectralNorm</span><span class="hl opt">(</span>n<span class="hl opt">).</span>approximate 
   <span class="hl kwa">val</span> totalTime <span class="hl opt">=</span> System<span class="hl opt">.</span>currentTimeMillis <span class="hl opt">-</span> sTime
   <span class="hl kwd">println</span><span class="hl opt">(</span><span class="hl str">&quot;%.09f&quot;</span><span class="hl opt">.</span><span class="hl kwd">format</span><span class="hl opt">(</span>solution<span class="hl opt">))</span> 
 <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl slc">//Companion object for construction</span>
<span class="hl kwa">object</span> RecursiveSpectralNorm<span class="hl opt">{</span>
  <span class="hl kwa">def</span> <span class="hl kwd">apply</span><span class="hl opt">(</span>size<span class="hl opt">:</span>Int<span class="hl opt">) = {</span>
   <span class="hl kwa">new</span> <span class="hl kwd">RecursiveSpectralNorm</span><span class="hl opt">(</span>size<span class="hl opt">)</span>
  <span class="hl opt">}</span>
<span class="hl opt">}</span>


<span class="hl kwa">class</span> <span class="hl kwd">RecursiveSpectralNorm</span><span class="hl opt">(</span>size<span class="hl opt">:</span>Int<span class="hl opt">){</span>  
   <span class="hl slc">//v = A'A*u</span>
   <span class="hl slc">//u = A'A*v</span>

   <span class="hl slc">//Evaluate matrix (and transpose) elements</span>
   <span class="hl kwa">val</span> A <span class="hl opt">= (</span>i<span class="hl opt">:</span> Int<span class="hl opt">,</span> j<span class="hl opt">:</span> Int<span class="hl opt">) =&gt;</span> <span class="hl num">1.0</span><span class="hl opt">/((</span>i<span class="hl opt">+</span>j<span class="hl opt">)*(</span>i<span class="hl opt">+</span>j<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)/</span><span class="hl num">2</span> <span class="hl opt">+</span>i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)</span>
   <span class="hl kwa">val</span> At <span class="hl opt">= (</span>j<span class="hl opt">:</span> Int<span class="hl opt">,</span> i<span class="hl opt">:</span> Int<span class="hl opt">) =&gt;</span> <span class="hl num">1.0</span><span class="hl opt">/((</span>i<span class="hl opt">+</span>j<span class="hl opt">)*(</span>i<span class="hl opt">+</span>j<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)/</span><span class="hl num">2</span> <span class="hl opt">+</span>i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)</span>

   <span class="hl slc">//For parallelization, get number of cores (virtual cores) </span>
   <span class="hl kwa">val</span> numProcessors <span class="hl opt">=</span> Runtime<span class="hl opt">.</span>getRuntime<span class="hl opt">.</span>availableProcessors

   <span class="hl slc">//Break up problem into Chunks correponding to rows</span>
   <span class="hl kwa">val</span> chunk <span class="hl opt">= (</span>size<span class="hl opt">/</span>numProcessors<span class="hl opt">)</span>  

   <span class="hl slc">// generate a list of tuples of chunks to process</span>
   <span class="hl slc">// (0,chunk-1) (chunk, 2*chunk-1) ... (_, size-1)</span>
   <span class="hl kwa">val</span> chunkIndex <span class="hl opt">= (</span><span class="hl num">0</span> to numProcessors<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">).</span><span class="hl kwd">map</span><span class="hl opt">(</span>s<span class="hl opt">=&gt;</span> s<span class="hl opt">*</span>chunk<span class="hl opt">).</span><span class="hl kwd">zip</span><span class="hl opt">(</span> 
                <span class="hl opt">((</span><span class="hl num">1</span> to numProcessors<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">).</span><span class="hl kwd">map</span><span class="hl opt">(</span>
                  s<span class="hl opt">=&gt;</span>s<span class="hl opt">*</span>chunk<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">).</span>toList<span class="hl opt">:::</span><span class="hl kwd">List</span><span class="hl opt">((</span>size<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">))))</span>

   <span class="hl slc">// Mulitples M from row StartRow to endRow times a vector</span>
   <span class="hl kwa">def</span> <span class="hl kwd">subMatrixTimesVector</span><span class="hl opt">(</span>Mat<span class="hl opt">: (</span>Int<span class="hl opt">,</span>Int<span class="hl opt">) =&gt;</span> Double<span class="hl opt">,</span> 
                      indexTuple<span class="hl opt">:</span>Tuple2<span class="hl opt">[</span>Int<span class="hl opt">,</span>Int<span class="hl opt">],</span> vec<span class="hl opt">:</span>Array<span class="hl opt">[</span>Double<span class="hl opt">]) = {</span>
      <span class="hl kwa">val</span> chunkSize <span class="hl opt">=</span> indexTuple<span class="hl opt">.</span>_2 <span class="hl opt">-</span> indexTuple<span class="hl opt">.</span>_1 <span class="hl opt">+</span> <span class="hl num">1</span> 
      <span class="hl kwa">var</span> w <span class="hl opt">=</span> Array<span class="hl opt">.</span><span class="hl kwd">fill</span><span class="hl opt">(</span>chunkSize<span class="hl opt">)(</span><span class="hl num">0</span><span class="hl opt">.)</span>
      <span class="hl kwa">var</span> i <span class="hl opt">=</span> indexTuple<span class="hl opt">.</span>_1 
      <span class="hl kwa">var</span> indexW <span class="hl opt">=</span> <span class="hl num">0</span>
      <span class="hl kwa">while</span> <span class="hl opt">(</span>i <span class="hl opt">&lt;=</span> indexTuple<span class="hl opt">.</span>_2<span class="hl opt">){</span>
         <span class="hl kwa">var</span> sum <span class="hl opt">=</span> <span class="hl num">0.0</span>
         <span class="hl kwa">var</span> j <span class="hl opt">=</span> <span class="hl num">0</span>
         <span class="hl kwa">while</span><span class="hl opt">(</span>j <span class="hl opt">&lt;</span> size<span class="hl opt">){</span>
            sum<span class="hl opt">+=</span> <span class="hl kwd">Mat</span><span class="hl opt">(</span>i<span class="hl opt">,</span>j<span class="hl opt">)*</span><span class="hl kwd">vec</span><span class="hl opt">(</span>j<span class="hl opt">)</span>
            j<span class="hl opt">+=</span><span class="hl num">1</span>
         <span class="hl opt">}</span>
         <span class="hl kwd">w</span><span class="hl opt">(</span>indexW<span class="hl opt">) =</span> sum
         indexW<span class="hl opt">+=</span><span class="hl num">1</span>
         i<span class="hl opt">+=</span><span class="hl num">1</span>
      <span class="hl opt">}</span>
      w
     <span class="hl opt">}</span>


   <span class="hl slc">// Uses non-blocking Scala futures to perform the required matrix-vector</span>
   <span class="hl slc">//products.  Uses a number of threads equal to the number of</span>
   <span class="hl slc">// available (virtual) cores.</span>
   <span class="hl kwa">def</span> <span class="hl kwd">fastMatrixTimesVector</span><span class="hl opt">(</span>Mat<span class="hl opt">: (</span>Int<span class="hl opt">,</span>Int<span class="hl opt">) =&gt;</span> Double<span class="hl opt">,</span> vec<span class="hl opt">:</span>Array<span class="hl opt">[</span>Double<span class="hl opt">]) = {</span>
    <span class="hl kwa">var</span> w<span class="hl opt">:</span>List<span class="hl opt">[</span>scala<span class="hl opt">.</span>actors<span class="hl opt">.</span>Future<span class="hl opt">[</span>Array<span class="hl opt">[</span>Double<span class="hl opt">]]] =</span> <span class="hl kwd">List</span><span class="hl opt">()</span>
    <span class="hl kwa">for</span><span class="hl opt">(</span>i <span class="hl opt">&lt;-</span> <span class="hl num">0</span> <span class="hl kwd">to</span> <span class="hl opt">(</span>numProcessors <span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">))</span>
      w <span class="hl opt">=</span> w <span class="hl opt">:::</span> <span class="hl kwd">List</span><span class="hl opt">(</span>future<span class="hl opt">{</span><span class="hl kwd">subMatrixTimesVector</span><span class="hl opt">(</span>Mat<span class="hl opt">,</span><span class="hl kwd">chunkIndex</span><span class="hl opt">(</span>i<span class="hl opt">),</span>vec<span class="hl opt">)})</span>
    
    <span class="hl slc">//Complete the future and concatenate the results</span>
   w<span class="hl opt">.</span><span class="hl kwd">map</span><span class="hl opt">(</span>s <span class="hl opt">=&gt;</span> s<span class="hl opt">.</span>apply<span class="hl opt">).</span>flatten<span class="hl opt">.</span>toArray

   <span class="hl opt">}</span>


   <span class="hl kwa">def</span> <span class="hl kwd">matrixTimesVector</span><span class="hl opt">(</span>Mat<span class="hl opt">: (</span>Int<span class="hl opt">,</span>Int<span class="hl opt">) =&gt;</span> Double<span class="hl opt">,</span> vec<span class="hl opt">:</span>Array<span class="hl opt">[</span>Double<span class="hl opt">]) = {</span>
      <span class="hl kwa">var</span> w <span class="hl opt">=</span> Array<span class="hl opt">.</span><span class="hl kwd">fill</span><span class="hl opt">(</span>size<span class="hl opt">)(</span><span class="hl num">0</span><span class="hl opt">.)</span>
      <span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span>
      <span class="hl kwd">subMatrixTimesVector</span><span class="hl opt">(</span>Mat<span class="hl opt">,(</span><span class="hl num">0</span><span class="hl opt">,</span>size<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">),</span>vec<span class="hl opt">)</span>
   <span class="hl opt">}</span>

   <span class="hl kwa">def</span> <span class="hl kwd">computeNewUandV</span><span class="hl opt">(</span>u<span class="hl opt">:</span>Array<span class="hl opt">[</span>Double<span class="hl opt">]) = {</span>
      <span class="hl kwa">val</span> w <span class="hl opt">=</span> <span class="hl kwd">fastMatrixTimesVector</span><span class="hl opt">(</span>A<span class="hl opt">,</span>u<span class="hl opt">)</span>
      <span class="hl kwd">fastMatrixTimesVector</span><span class="hl opt">(</span>At<span class="hl opt">,</span>w<span class="hl opt">)</span>
   <span class="hl opt">}</span>

   <span class="hl kwa">def</span> <span class="hl kwd">updateUandV</span><span class="hl opt">(</span>u<span class="hl opt">:</span> Array<span class="hl opt">[</span>Double<span class="hl opt">],</span> v<span class="hl opt">:</span>Array<span class="hl opt">[</span>Double<span class="hl opt">])</span>
               <span class="hl opt">:</span> Tuple2<span class="hl opt">[</span>Array<span class="hl opt">[</span>Double<span class="hl opt">],</span> Array<span class="hl opt">[</span>Double<span class="hl opt">]] = {</span>
     <span class="hl kwa">val</span> vnew <span class="hl opt">=</span> <span class="hl kwd">computeNewUandV</span><span class="hl opt">(</span>u<span class="hl opt">)</span>
     <span class="hl kwa">val</span> unew <span class="hl opt">=</span> <span class="hl kwd">computeNewUandV</span><span class="hl opt">(</span>vnew<span class="hl opt">)</span>
     <span class="hl opt">(</span>unew<span class="hl opt">,</span>vnew<span class="hl opt">)</span>
   <span class="hl opt">}</span>

   <span class="hl kwa">def</span> <span class="hl kwd">computeSolution</span><span class="hl opt">(</span>u<span class="hl opt">:</span>Array<span class="hl opt">[</span>Double<span class="hl opt">],</span> v<span class="hl opt">:</span>Array<span class="hl opt">[</span>Double<span class="hl opt">]) = {</span>
     <span class="hl kwa">var</span> vbv<span class="hl opt">,</span>vv <span class="hl opt">=</span> <span class="hl num">0.0</span>
     <span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span>
     <span class="hl kwa">while</span> <span class="hl opt">(</span>i <span class="hl opt">&lt;</span> size<span class="hl opt">) {</span>
      vbv <span class="hl opt">+=</span> <span class="hl kwd">u</span><span class="hl opt">(</span>i<span class="hl opt">)*</span><span class="hl kwd">v</span><span class="hl opt">(</span>i<span class="hl opt">)</span>
      vv <span class="hl opt">+=</span> <span class="hl kwd">v</span><span class="hl opt">(</span>i<span class="hl opt">)*</span><span class="hl kwd">v</span><span class="hl opt">(</span>i<span class="hl opt">)</span>
      i <span class="hl opt">+=</span> <span class="hl num">1</span>
     <span class="hl opt">}</span>
     math<span class="hl opt">.</span><span class="hl kwd">sqrt</span><span class="hl opt">(</span>vbv<span class="hl opt">/</span>vv<span class="hl opt">)</span>
   <span class="hl opt">}</span>   
   

   <span class="hl slc">//Uses a tail recursive helper function, approximateHelper to approximate</span>
   <span class="hl slc">//the spectral norm of A.  Observe that approximateHelper returns a tuple of</span>
   <span class="hl slc">//arrays.  The parallization is performed in the Matrix -vector product code</span>
   <span class="hl slc">// FastMatrixTimesVector</span>

   <span class="hl kwa">def</span> <span class="hl kwd">approximate</span><span class="hl opt">() = {</span> 
     <span class="hl slc">// (u,v) = approximate(u,v) recursive call</span>

     <span class="hl kwc">&#64;tailrec</span> <span class="hl kwa">def</span> <span class="hl kwd">approximateHelper</span><span class="hl opt">(</span>iter<span class="hl opt">:</span> Int<span class="hl opt">,</span> 
                            UVpair<span class="hl opt">:</span>Tuple2<span class="hl opt">[</span>Array<span class="hl opt">[</span>Double<span class="hl opt">],</span>Array<span class="hl opt">[</span>Double<span class="hl opt">]])</span>
                            <span class="hl opt">:</span> Tuple2<span class="hl opt">[</span>Array<span class="hl opt">[</span>Double<span class="hl opt">],</span>Array<span class="hl opt">[</span>Double<span class="hl opt">]] = {</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>iter <span class="hl opt">==</span> <span class="hl num">9</span><span class="hl opt">)</span>
        UVpair
      <span class="hl kwa">else</span> <span class="hl opt">{</span> 
        <span class="hl kwd">approximateHelper</span><span class="hl opt">(</span>iter<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl kwd">updateUandV</span><span class="hl opt">(</span>UVpair<span class="hl opt">.</span>_1<span class="hl opt">,</span>UVpair<span class="hl opt">.</span>_2<span class="hl opt">))</span>
      <span class="hl opt">}</span>
     <span class="hl opt">}</span>
     <span class="hl kwa">val</span> UV <span class="hl opt">=</span> <span class="hl kwd">approximateHelper</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">, (</span>Array<span class="hl opt">.</span><span class="hl kwd">fill</span><span class="hl opt">(</span>size<span class="hl opt">)(</span><span class="hl num">1.0</span><span class="hl opt">),</span>Array<span class="hl opt">.</span><span class="hl kwd">fill</span><span class="hl opt">(</span>size<span class="hl opt">)(</span><span class="hl num">1.0</span><span class="hl opt">)))</span>

     <span class="hl slc">//Compute the result  </span>
     
     <span class="hl kwd">computeSolution</span><span class="hl opt">(</span>UV<span class="hl opt">.</span>_1<span class="hl opt">,</span> UV<span class="hl opt">.</span>_2<span class="hl opt">)</span> 
         
   <span class="hl opt">}</span>
<span class="hl opt">}</span>
