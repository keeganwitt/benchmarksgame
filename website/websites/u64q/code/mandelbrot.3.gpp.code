<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com">   contributed by Greg Buchholz</span>
<span class="hl com">   compile:  g++ -O3</span>
<span class="hl com">*/</span>

<span class="hl ppc">#include &lt;stdio.h&gt;</span>
<span class="hl ppc">#include &lt;stdlib.h&gt;</span>
<span class="hl ppc">#include&lt;iostream&gt;</span>
<span class="hl ppc">#include&lt;complex&gt;</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span> <span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span> <span class="hl opt">**</span>argv<span class="hl opt">)</span>
<span class="hl opt">{</span>
  <span class="hl kwb">char</span>  bit_num <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">,</span> byte_acc <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
  <span class="hl kwb">const int</span> iter <span class="hl opt">=</span> <span class="hl num">50</span><span class="hl opt">;</span>
  <span class="hl kwb">const double</span> lim <span class="hl opt">=</span> <span class="hl num">2.0</span> <span class="hl opt">*</span> <span class="hl num">2.0</span><span class="hl opt">;</span>
  
  std<span class="hl opt">::</span>ios_base<span class="hl opt">::</span><span class="hl kwd">sync_with_stdio</span><span class="hl opt">(</span><span class="hl kwa">false</span><span class="hl opt">);</span>
  <span class="hl kwb">int</span> n <span class="hl opt">=</span> <span class="hl kwd">atoi</span><span class="hl opt">(</span>argv<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">]);</span>

  std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;P4</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> <span class="hl opt">&lt;&lt;</span> n <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot; &quot;</span> <span class="hl opt">&lt;&lt;</span> n <span class="hl opt">&lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>

  <span class="hl kwa">for</span><span class="hl opt">(</span><span class="hl kwb">int</span> y<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span> y<span class="hl opt">&lt;</span>n<span class="hl opt">; ++</span>y<span class="hl opt">)</span> 
    <span class="hl kwa">for</span><span class="hl opt">(</span><span class="hl kwb">int</span> x<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span> x<span class="hl opt">&lt;</span>n<span class="hl opt">; ++</span>x<span class="hl opt">)</span>
    <span class="hl opt">{</span>
       std<span class="hl opt">::</span><span class="hl kwb">complex</span><span class="hl opt">&lt;</span><span class="hl kwb">double</span><span class="hl opt">&gt;</span> <span class="hl kwd">Z</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">0</span><span class="hl opt">),</span><span class="hl kwd">C</span><span class="hl opt">(</span><span class="hl num">2</span><span class="hl opt">*(</span><span class="hl kwb">double</span><span class="hl opt">)</span>x<span class="hl opt">/</span>n <span class="hl opt">-</span> <span class="hl num">1.5</span><span class="hl opt">,</span> <span class="hl num">2</span><span class="hl opt">*(</span><span class="hl kwb">double</span><span class="hl opt">)</span>y<span class="hl opt">/</span>n <span class="hl opt">-</span> <span class="hl num">1.0</span><span class="hl opt">);</span>
       
       <span class="hl slc">//manually inlining &quot;norm&quot; results in a 5x-7x speedup on gcc</span>
       <span class="hl kwa">for</span><span class="hl opt">(</span><span class="hl kwb">int</span> i<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span> i<span class="hl opt">&lt;</span>iter <span class="hl kwa">and</span> Z<span class="hl opt">.</span><span class="hl kwd">real</span><span class="hl opt">()*</span>Z<span class="hl opt">.</span><span class="hl kwd">real</span><span class="hl opt">() +</span> Z<span class="hl opt">.</span><span class="hl kwd">imag</span><span class="hl opt">()*</span>Z<span class="hl opt">.</span><span class="hl kwd">imag</span><span class="hl opt">() &lt;=</span> lim<span class="hl opt">; ++</span>i<span class="hl opt">)</span>
         Z <span class="hl opt">=</span> Z<span class="hl opt">*</span>Z <span class="hl opt">+</span> C<span class="hl opt">;</span>
        
       byte_acc <span class="hl opt">= (</span>byte_acc <span class="hl opt">&lt;&lt;</span> <span class="hl num">1</span><span class="hl opt">) | ((</span><span class="hl kwd">norm</span><span class="hl opt">(</span>Z<span class="hl opt">) &gt;</span> lim<span class="hl opt">)</span> ? <span class="hl num">0x00</span><span class="hl opt">:</span><span class="hl num">0x01</span><span class="hl opt">);</span>

       <span class="hl kwa">if</span><span class="hl opt">(++</span>bit_num <span class="hl opt">==</span> <span class="hl num">8</span><span class="hl opt">){</span> std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> byte_acc<span class="hl opt">;</span> bit_num <span class="hl opt">=</span> byte_acc <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">; }</span>
       <span class="hl kwa">else if</span><span class="hl opt">(</span>x <span class="hl opt">==</span> n<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">) {</span> byte_acc  <span class="hl opt">&lt;&lt;= (</span><span class="hl num">8</span><span class="hl opt">-</span>n<span class="hl opt">%</span><span class="hl num">8</span><span class="hl opt">);</span>
                           std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> byte_acc<span class="hl opt">;</span>
                           bit_num <span class="hl opt">=</span> byte_acc <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">; }</span>
    <span class="hl opt">}</span>
<span class="hl opt">}</span>
