<span class="hl slc">;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;;   http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">;;</span>
<span class="hl slc">;;   contributed by Alexey Voznyuk</span>
<span class="hl slc">;;</span>

<span class="hl opt">(</span><span class="hl kwa">defpackage</span> <span class="hl opt">#:</span>k-nucleotide
  <span class="hl opt">(:</span>use <span class="hl opt">:</span>cl<span class="hl opt">))</span>

<span class="hl opt">(</span><span class="hl kwa">in-package</span> <span class="hl opt">:</span>k-nucleotide<span class="hl opt">)</span>

<span class="hl opt">(</span><span class="hl kwa">defmacro</span> with-packed-sequences <span class="hl opt">((&amp;</span>rest sequences<span class="hl opt">) &amp;</span>body body<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">loop</span> <span class="hl opt">:</span>for <span class="hl opt">(</span><span class="hl kwa">bind</span> update length<span class="hl opt">) :</span>in sequences
     <span class="hl opt">:</span>collect <span class="hl opt">`(,</span>bind <span class="hl num">0</span><span class="hl opt">) :</span>into binds
     <span class="hl opt">:</span>collect <span class="hl opt">`(</span><span class="hl kwa">type</span> <span class="hl opt">(</span><span class="hl kwa">integer</span> <span class="hl num">0</span> <span class="hl opt">,(</span><span class="hl kwa">1-</span> <span class="hl opt">(</span><span class="hl kwa">expt</span> <span class="hl num">4</span> length<span class="hl opt">))) ,</span>bind<span class="hl opt">) :</span>into decls
     <span class="hl opt">:</span>collect <span class="hl opt">`(,</span>update <span class="hl opt">(</span><span class="hl kwa">char</span><span class="hl opt">) `(</span><span class="hl kwa">setf</span> <span class="hl opt">,',</span>bind
                                      <span class="hl opt">(</span><span class="hl kwa">logior</span> <span class="hl opt">(</span><span class="hl kwa">ash</span> <span class="hl opt">,',</span>bind -<span class="hl num">2</span><span class="hl opt">)</span>
                                              <span class="hl opt">(</span><span class="hl kwa">ash</span> <span class="hl opt">(</span><span class="hl kwa">logand</span> <span class="hl opt">(</span><span class="hl kwa">char-code</span> <span class="hl opt">,</span>char<span class="hl opt">) #</span>x6<span class="hl opt">)</span>
                                                   <span class="hl opt">,',(</span><span class="hl kwa">1-</span> <span class="hl opt">(* (</span><span class="hl kwa">1-</span> length<span class="hl opt">)</span> <span class="hl num">2</span><span class="hl opt">)))))) :</span>into updates
     <span class="hl opt">:</span>finally <span class="hl opt">(</span><span class="hl kwa">return</span> <span class="hl opt">`(</span><span class="hl kwa">let</span> <span class="hl opt">(,&#64;</span>binds<span class="hl opt">) (</span><span class="hl kwa">declare</span> <span class="hl opt">,&#64;</span>decls<span class="hl opt">) (</span><span class="hl kwa">macrolet</span> <span class="hl opt">(,&#64;</span>updates<span class="hl opt">) ,&#64;</span>body<span class="hl opt">)))))</span>

<span class="hl opt">(</span><span class="hl kwa">defmacro</span> pack-sequence <span class="hl opt">(</span><span class="hl kwa">sequence</span><span class="hl opt">)</span>
  <span class="hl opt">`(</span><span class="hl kwa">with-packed-sequences</span> <span class="hl opt">((</span><span class="hl kwa">bind</span> update <span class="hl opt">,(</span><span class="hl kwa">length</span> sequence<span class="hl opt">)))</span>
     <span class="hl opt">(</span><span class="hl kwa">loop</span> <span class="hl opt">:</span>for char <span class="hl opt">:</span>across <span class="hl opt">,</span>sequence
        <span class="hl opt">:</span>do <span class="hl opt">(</span><span class="hl kwa">update</span> char<span class="hl opt">))</span>
     bind<span class="hl opt">))</span>

<span class="hl opt">(</span><span class="hl kwa">defun</span> unpack-sequence <span class="hl opt">(</span><span class="hl kwa">length</span> packed-seq<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">optimize</span> <span class="hl opt">(</span><span class="hl kwa">speed</span> <span class="hl num">3</span><span class="hl opt">) (</span><span class="hl kwa">safety</span> <span class="hl num">0</span><span class="hl opt">) (</span><span class="hl kwa">debug</span> <span class="hl num">0</span><span class="hl opt">))</span>
           <span class="hl opt">(</span><span class="hl kwa">type</span> fixnum length packed-seq<span class="hl opt">))</span>
  <span class="hl opt">(</span><span class="hl kwa">with-output-to-string</span> <span class="hl opt">(</span><span class="hl kwa">seq-out</span><span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl kwa">loop</span> <span class="hl opt">:</span>repeat length
       <span class="hl opt">:</span>do <span class="hl opt">(</span><span class="hl kwa">write-char</span> <span class="hl opt">(</span><span class="hl kwa">ecase</span> <span class="hl opt">(</span><span class="hl kwa">logand</span> packed-seq <span class="hl opt">#</span>x3<span class="hl opt">)</span>
                         <span class="hl opt">(</span><span class="hl kwa">0</span> <span class="hl opt">#</span>\A<span class="hl opt">) (</span><span class="hl kwa">1</span> <span class="hl opt">#</span>\C<span class="hl opt">) (</span><span class="hl kwa">2</span> <span class="hl opt">#</span>\T<span class="hl opt">) (</span><span class="hl kwa">3</span> <span class="hl opt">#</span>\G<span class="hl opt">))</span>
                       seq-out<span class="hl opt">)</span>
       <span class="hl opt">:</span>do <span class="hl opt">(</span><span class="hl kwa">setf</span> packed-seq <span class="hl opt">(</span><span class="hl kwa">ash</span> packed-seq -<span class="hl num">2</span><span class="hl opt">)))))</span>

<span class="hl opt">(</span><span class="hl kwa">defmacro</span> with-packed-caches-fill <span class="hl opt">((</span><span class="hl kwa">hash-access</span><span class="hl opt">) &amp;</span>rest updaters<span class="hl opt">)</span>
  <span class="hl opt">`(</span><span class="hl kwa">progn</span> <span class="hl opt">,&#64;(</span><span class="hl kwa">loop</span>
               <span class="hl opt">:</span>for tick <span class="hl opt">:</span>from <span class="hl num">1</span> <span class="hl opt">:</span>to <span class="hl opt">(</span><span class="hl kwa">apply</span> <span class="hl opt">#'</span>max <span class="hl opt">(</span><span class="hl kwa">mapcar</span> <span class="hl opt">#'</span>third updaters<span class="hl opt">))</span>
               <span class="hl opt">:</span>collect <span class="hl opt">`(</span><span class="hl kwa">with-current-char</span> <span class="hl opt">(</span><span class="hl kwa">char</span> <span class="hl opt">:</span>skip-newline t<span class="hl opt">)</span>
                           <span class="hl opt">,&#64;(</span><span class="hl kwa">loop</span> <span class="hl opt">:</span>for <span class="hl opt">(</span><span class="hl kwa">bind</span> update length<span class="hl opt">) :</span>in updaters
                                <span class="hl opt">:</span>collect <span class="hl opt">`(,</span>update char<span class="hl opt">)</span>
                                <span class="hl opt">:</span>when <span class="hl opt">(&gt;=</span> tick length<span class="hl opt">)</span>
                                <span class="hl opt">:</span>collect <span class="hl opt">`(,</span>hash-access <span class="hl opt">,</span>length <span class="hl opt">,</span>bind<span class="hl opt">))))))</span>

<span class="hl opt">(</span><span class="hl kwa">defmacro</span> with-reading-stream <span class="hl opt">((</span><span class="hl kwa">stream</span> <span class="hl opt">&amp;</span>key <span class="hl opt">(</span><span class="hl kwa">block-size</span> <span class="hl num">8192</span><span class="hl opt">)) &amp;</span>body body<span class="hl opt">)</span>
  <span class="hl opt">`(</span><span class="hl kwa">block</span> outer-tag
     <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">((</span><span class="hl kwa">advance</span> <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">((</span><span class="hl kwa">buffer</span> <span class="hl opt">(</span><span class="hl kwa">make-array</span> <span class="hl opt">,</span>block-size <span class="hl opt">:</span>element-type <span class="hl opt">'</span>standard-char <span class="hl opt">:</span>initial-element <span class="hl opt">#</span>\Newline<span class="hl opt">))</span>
                          <span class="hl opt">(</span><span class="hl kwa">index</span> <span class="hl num">0</span><span class="hl opt">)</span>
                          <span class="hl opt">(</span><span class="hl kwa">amount</span> <span class="hl num">0</span><span class="hl opt">))</span>
                      <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> fixnum index amount<span class="hl opt">))</span>
                      <span class="hl opt">(</span><span class="hl kwa">lambda</span> <span class="hl opt">()</span>
                        <span class="hl opt">(</span><span class="hl kwa">prog2</span> <span class="hl opt">(</span><span class="hl kwa">when</span> <span class="hl opt">(&gt;=</span> index amount<span class="hl opt">)</span>
                                 <span class="hl opt">(</span><span class="hl kwa">setf</span> amount <span class="hl opt">(</span><span class="hl kwa">read-sequence</span> buffer <span class="hl opt">,</span>stream<span class="hl opt">)</span>
                                       index <span class="hl num">0</span><span class="hl opt">)</span>
                                 <span class="hl opt">(</span><span class="hl kwa">when</span> <span class="hl opt">(</span><span class="hl kwa">zerop</span> amount<span class="hl opt">)</span>
                                   <span class="hl opt">(</span><span class="hl kwa">return-from</span> outer-tag nil<span class="hl opt">)))</span>
                            <span class="hl opt">(</span><span class="hl kwa">elt</span> buffer index<span class="hl opt">)</span>
                          <span class="hl opt">(</span><span class="hl kwa">incf</span> index<span class="hl opt">))))))</span>
       <span class="hl opt">(</span><span class="hl kwa">flet</span> <span class="hl opt">((</span><span class="hl kwa">get-char</span> <span class="hl opt">() (</span><span class="hl kwa">funcall</span> advance<span class="hl opt">)))</span>
         <span class="hl opt">(</span><span class="hl kwa">macrolet</span> <span class="hl opt">((</span><span class="hl kwa">with-current-char</span> <span class="hl opt">((</span><span class="hl kwa">char</span> <span class="hl opt">&amp;</span>key skip-newline<span class="hl opt">) &amp;</span>body body<span class="hl opt">)</span>
                      <span class="hl opt">`(</span><span class="hl kwa">let</span> <span class="hl opt">((,</span>char <span class="hl opt">,(</span><span class="hl kwa">if</span> skip-newline
                                         <span class="hl opt">`(</span><span class="hl kwa">loop</span> <span class="hl opt">:</span>for <span class="hl opt">,</span>char <span class="hl opt">= (</span><span class="hl kwa">get-char</span><span class="hl opt">) :</span>while <span class="hl opt">(</span><span class="hl kwa">char</span><span class="hl opt">= ,</span>char <span class="hl opt">#</span>\Newline<span class="hl opt">)</span>
                                             <span class="hl opt">:</span>finally <span class="hl opt">(</span><span class="hl kwa">return</span> <span class="hl opt">,</span>char<span class="hl opt">))</span>
                                         <span class="hl opt">`(</span><span class="hl kwa">get-char</span><span class="hl opt">))))</span>
                         <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> standard-char <span class="hl opt">,</span>char<span class="hl opt">))</span>
                         <span class="hl opt">,&#64;</span>body<span class="hl opt">)))</span>
           <span class="hl opt">,&#64;</span>body<span class="hl opt">)))))</span>

<span class="hl opt">(</span><span class="hl kwa">defmacro</span> skip-buffer-to <span class="hl opt">(&amp;</span>rest patterns<span class="hl opt">)</span>
  <span class="hl opt">`(</span><span class="hl kwa">progn</span> <span class="hl opt">,&#64;(</span><span class="hl kwa">loop</span> <span class="hl opt">:</span>for pattern <span class="hl opt">:</span>in patterns
               <span class="hl opt">:</span>collect <span class="hl opt">`(</span><span class="hl kwa">loop</span> <span class="hl opt">:</span>until <span class="hl opt">(</span><span class="hl kwa">and</span> <span class="hl opt">,&#64;(</span><span class="hl kwa">loop</span> <span class="hl opt">:</span>for char <span class="hl opt">:</span>across <span class="hl opt">(</span><span class="hl kwa">string</span> pattern<span class="hl opt">)</span>
                                                <span class="hl opt">:</span>collect <span class="hl opt">`(</span><span class="hl kwa">with-current-char</span> <span class="hl opt">(</span><span class="hl kwa">char</span><span class="hl opt">)</span>
                                                            <span class="hl opt">(</span><span class="hl kwa">char</span><span class="hl opt">=</span> char <span class="hl opt">,</span>char<span class="hl opt">))))))))</span>

<span class="hl opt">(</span><span class="hl kwa">defmacro</span> with-dna-analyzed <span class="hl opt">((</span><span class="hl kwa">stream</span> hash-access <span class="hl opt">&amp;</span>key <span class="hl opt">(</span><span class="hl kwa">block-size</span> <span class="hl num">8192</span><span class="hl opt">)) &amp;</span>rest sequence-lengths<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">loop</span> <span class="hl opt">:</span>for length <span class="hl opt">:</span>in sequence-lengths
     <span class="hl opt">:</span>collect <span class="hl opt">(</span><span class="hl kwa">gensym</span><span class="hl opt">) :</span>into binds
     <span class="hl opt">:</span>collect <span class="hl opt">(</span><span class="hl kwa">gensym</span><span class="hl opt">) :</span>into updaters
     <span class="hl opt">:</span>finally <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">((</span><span class="hl kwa">desc</span> <span class="hl opt">(</span><span class="hl kwa">mapcar</span> <span class="hl opt">#'</span>list binds updaters sequence-lengths<span class="hl opt">)))</span>
                <span class="hl opt">(</span><span class="hl kwa">return</span> <span class="hl opt">`(</span><span class="hl kwa">with-packed-sequences</span> <span class="hl opt">(,&#64;</span>desc<span class="hl opt">)</span>
                           <span class="hl opt">(</span><span class="hl kwa">with-reading-stream</span> <span class="hl opt">(,</span>stream <span class="hl opt">:</span>block-size <span class="hl opt">,</span>block-size<span class="hl opt">)</span>
                             <span class="hl opt">(</span><span class="hl kwa">skip-buffer-to</span> <span class="hl str">&quot;&gt;THREE&quot;</span> <span class="hl opt">#</span>\Newline<span class="hl opt">)</span>
                             <span class="hl opt">(</span><span class="hl kwa">with-packed-caches-fill</span> <span class="hl opt">(,</span>hash-access<span class="hl opt">)</span>
                               <span class="hl opt">,&#64;</span>desc<span class="hl opt">)</span>
                             <span class="hl opt">(</span><span class="hl kwa">loop</span> <span class="hl opt">(</span><span class="hl kwa">with-current-char</span> <span class="hl opt">(</span><span class="hl kwa">char</span> <span class="hl opt">:</span>skip-newline t<span class="hl opt">)</span>
                                     <span class="hl opt">,&#64;(</span><span class="hl kwa">loop</span>
                                          <span class="hl opt">:</span>for update <span class="hl opt">:</span>in updaters
                                          <span class="hl opt">:</span>for bind <span class="hl opt">:</span>in binds
                                          <span class="hl opt">:</span>for length <span class="hl opt">:</span>in sequence-lengths
                                          <span class="hl opt">:</span>collect <span class="hl opt">`(,</span>update char<span class="hl opt">)</span>
                                          <span class="hl opt">:</span>collect <span class="hl opt">`(,</span>hash-access <span class="hl opt">,</span>length <span class="hl opt">,</span>bind<span class="hl opt">))))))))))</span>

<span class="hl opt">(</span><span class="hl kwa">defun</span> seq<span class="hl opt">= (</span><span class="hl kwa">seq-a</span> seq-b<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">optimize</span> <span class="hl opt">(</span><span class="hl kwa">speed</span> <span class="hl num">3</span><span class="hl opt">) (</span><span class="hl kwa">safety</span> <span class="hl num">0</span><span class="hl opt">) (</span><span class="hl kwa">debug</span> <span class="hl num">0</span><span class="hl opt">)) (</span><span class="hl kwa">type</span> fixnum seq-a seq-b<span class="hl opt">))</span>
  <span class="hl opt">(=</span> seq-a seq-b<span class="hl opt">))</span>

<span class="hl opt">(</span><span class="hl kwa">defun</span> seq-hash <span class="hl opt">(</span><span class="hl kwa">seq</span><span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">optimize</span> <span class="hl opt">(</span><span class="hl kwa">speed</span> <span class="hl num">3</span><span class="hl opt">) (</span><span class="hl kwa">safety</span> <span class="hl num">0</span><span class="hl opt">) (</span><span class="hl kwa">debug</span> <span class="hl num">0</span><span class="hl opt">)) (</span><span class="hl kwa">type</span> fixnum seq<span class="hl opt">))</span>
  seq<span class="hl opt">)</span>

<span class="hl opt">(</span><span class="hl kwa">sb-ext</span><span class="hl opt">:</span>define-hash-table-test seq<span class="hl opt">=</span> seq-hash<span class="hl opt">)</span>

<span class="hl opt">(</span><span class="hl kwa">defmacro</span> with-smart-dna-hash <span class="hl opt">((</span><span class="hl kwa">hash-access</span> hash-loop <span class="hl opt">&amp;</span>key <span class="hl opt">(</span><span class="hl kwa">vector-threshold</span> <span class="hl num">1048576</span><span class="hl opt">)) (&amp;</span>rest sequence-lengths<span class="hl opt">) &amp;</span>body body<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">loop</span> <span class="hl opt">:</span>for length <span class="hl opt">:</span>in sequence-lengths
     <span class="hl opt">:</span>for bind <span class="hl opt">= (</span><span class="hl kwa">gensym</span><span class="hl opt">)</span>
     <span class="hl opt">:</span>for area <span class="hl opt">= (</span><span class="hl kwa">expt</span> <span class="hl num">4</span> length<span class="hl opt">)</span>
     <span class="hl opt">:</span>for vec-p <span class="hl opt">= (&lt;=</span> area vector-threshold<span class="hl opt">)</span>
     <span class="hl opt">:</span>collect <span class="hl opt">`(,</span>bind <span class="hl opt">,(</span><span class="hl kwa">if</span> vec-p
                           <span class="hl opt">`(</span><span class="hl kwa">make-array</span> <span class="hl opt">,</span>area <span class="hl opt">:</span>element-type <span class="hl opt">'</span>fixnum <span class="hl opt">:</span>initial-element <span class="hl num">0</span><span class="hl opt">)</span>
                           <span class="hl opt">`(</span><span class="hl kwa">make-hash-table</span> <span class="hl opt">:</span>test <span class="hl opt">',(</span><span class="hl kwa">if</span> <span class="hl opt">(&lt;</span> area most-positive-fixnum<span class="hl opt">) '</span>seq<span class="hl opt">= '</span>eql<span class="hl opt">)</span>
                                             <span class="hl opt">:</span>rehash-size <span class="hl opt">,(</span><span class="hl kwa">expt</span> <span class="hl num">2</span> <span class="hl opt">(</span><span class="hl kwa">1-</span> length<span class="hl opt">))</span>
                                             <span class="hl opt">:</span>rehash-threshold <span class="hl num">0.7</span><span class="hl opt">))) :</span>into binds
     <span class="hl opt">:</span>collect <span class="hl opt">`(,</span>length <span class="hl opt">,(</span><span class="hl kwa">if</span> vec-p <span class="hl opt">``(</span><span class="hl kwa">elt</span> <span class="hl opt">,',</span>bind <span class="hl opt">,</span>key<span class="hl opt">) ``(</span><span class="hl kwa">the</span> fixnum <span class="hl opt">(</span><span class="hl kwa">gethash</span> <span class="hl opt">,</span>key <span class="hl opt">,',</span>bind <span class="hl num">0</span><span class="hl opt">)))) :</span>into accesses
     <span class="hl opt">:</span>collect <span class="hl opt">`(,</span>length <span class="hl opt">,(</span><span class="hl kwa">if</span> vec-p
                             <span class="hl opt">``(</span><span class="hl kwa">loop</span> <span class="hl opt">:</span>for i <span class="hl opt">:</span>from <span class="hl num">0</span> <span class="hl opt">:</span>below <span class="hl opt">,',(</span><span class="hl kwa">expt</span> <span class="hl num">4</span> length<span class="hl opt">)</span>
                                  <span class="hl opt">:</span>for <span class="hl opt">,</span>value <span class="hl opt">= (</span><span class="hl kwa">elt</span> <span class="hl opt">,',</span>bind i<span class="hl opt">)</span>
                                  <span class="hl opt">:</span>for <span class="hl opt">,</span>key <span class="hl opt">= (</span><span class="hl kwa">unpack-sequence</span> <span class="hl opt">,',</span>length i<span class="hl opt">)</span>
                                  <span class="hl opt">:</span>unless <span class="hl opt">(</span><span class="hl kwa">zerop</span> <span class="hl opt">,</span>value<span class="hl opt">)</span>
                                  <span class="hl opt">,&#64;</span>loop-keywords<span class="hl opt">)</span>
                             <span class="hl opt">``(</span><span class="hl kwa">loop</span> <span class="hl opt">:</span>for packed-key <span class="hl opt">:</span>being <span class="hl opt">:</span>the <span class="hl opt">:</span>hash-keys <span class="hl opt">:</span>in <span class="hl opt">,',</span>bind
                                  <span class="hl opt">:</span>for <span class="hl opt">,</span>key <span class="hl opt">= (</span><span class="hl kwa">unpack-sequence</span> <span class="hl opt">,',</span>length packed-key<span class="hl opt">)</span>
                                  <span class="hl opt">:</span>for <span class="hl opt">,</span>value <span class="hl opt">= (,',</span>hash-access <span class="hl opt">,',</span>length packed-key<span class="hl opt">)</span>
                                  <span class="hl opt">,&#64;</span>loop-keywords<span class="hl opt">))) :</span>into loops
     <span class="hl opt">:</span>finally <span class="hl opt">(</span><span class="hl kwa">return</span> <span class="hl opt">`(</span><span class="hl kwa">let</span> <span class="hl opt">(,&#64;</span>binds<span class="hl opt">)</span>
                         <span class="hl opt">(</span><span class="hl kwa">macrolet</span> <span class="hl opt">((,</span>hash-access <span class="hl opt">(</span><span class="hl kwa">seq-length</span> key<span class="hl opt">) (</span><span class="hl kwa">ecase</span> seq-length <span class="hl opt">,&#64;</span>accesses<span class="hl opt">))</span>
                                    <span class="hl opt">(,</span>hash-loop <span class="hl opt">((</span><span class="hl kwa">seq-length</span> key value<span class="hl opt">) &amp;</span>rest loop-keywords<span class="hl opt">) (</span><span class="hl kwa">ecase</span> seq-length <span class="hl opt">,&#64;</span>loops<span class="hl opt">)))</span>
                           <span class="hl opt">,&#64;</span>body<span class="hl opt">)))))</span>

<span class="hl opt">(</span><span class="hl kwa">defmacro</span> with-percentage <span class="hl opt">((</span><span class="hl kwa">hash-loop</span> <span class="hl opt">&amp;</span>rest seq-descriptions<span class="hl opt">) &amp;</span>body body<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">null</span> seq-descriptions<span class="hl opt">)</span>
      <span class="hl opt">`(</span><span class="hl kwa">progn</span> <span class="hl opt">,&#64;</span>body<span class="hl opt">)</span>
      <span class="hl opt">(</span><span class="hl kwa">destructuring-bind</span> <span class="hl opt">(</span><span class="hl kwa">seq-bind</span> seq-length<span class="hl opt">)</span>
          <span class="hl opt">(</span><span class="hl kwa">car</span> seq-descriptions<span class="hl opt">)</span>
        <span class="hl opt">`(</span><span class="hl kwa">let</span> <span class="hl opt">((,</span>seq-bind <span class="hl opt">(,</span>hash-loop <span class="hl opt">(,</span>seq-length k v<span class="hl opt">)</span>
                                      <span class="hl opt">:</span>summing v <span class="hl opt">:</span>into total <span class="hl opt">:</span>of-type fixnum
                                      <span class="hl opt">:</span>and <span class="hl opt">:</span>collect k <span class="hl opt">:</span>into seqs
                                      <span class="hl opt">:</span>and <span class="hl opt">:</span>collect v <span class="hl opt">:</span>into counts
                                      <span class="hl opt">:</span>finally <span class="hl opt">(</span><span class="hl kwa">return</span> <span class="hl opt">(</span><span class="hl kwa">mapcar</span> <span class="hl opt">#'</span>list
                                                               seqs
                                                               <span class="hl opt">(</span><span class="hl kwa">mapcar</span> <span class="hl opt">(</span><span class="hl kwa">lambda</span> <span class="hl opt">(</span><span class="hl kwa">count</span><span class="hl opt">)</span>
                                                                         <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> fixnum count<span class="hl opt">))</span>
                                                                         <span class="hl opt">(/ (*</span> count <span class="hl num">100.0</span><span class="hl opt">)</span> total<span class="hl opt">))</span>
                                                                       counts<span class="hl opt">))))))</span>
           <span class="hl opt">(</span><span class="hl kwa">with-percentage</span> <span class="hl opt">(,</span>hash-loop <span class="hl opt">,&#64;(</span><span class="hl kwa">cdr</span> seq-descriptions<span class="hl opt">)) ,&#64;</span>body<span class="hl opt">)))))</span>

<span class="hl opt">(</span><span class="hl kwa">defmacro</span> obtain-seq-count <span class="hl opt">(</span><span class="hl kwa">hash-access</span> seq<span class="hl opt">)</span>
  <span class="hl opt">`(</span><span class="hl kwa">list</span> <span class="hl opt">(,</span>hash-access <span class="hl opt">,(</span><span class="hl kwa">length</span> seq<span class="hl opt">) (</span><span class="hl kwa">pack-sequence</span> <span class="hl opt">,</span>seq<span class="hl opt">)) #</span>\Tab <span class="hl opt">,</span>seq<span class="hl opt">))</span>

<span class="hl opt">(</span><span class="hl kwa">defun</span> perform-work <span class="hl opt">(</span><span class="hl kwa">stream</span><span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">optimize</span> <span class="hl opt">(</span><span class="hl kwa">speed</span> <span class="hl num">3</span><span class="hl opt">) (</span><span class="hl kwa">safety</span> <span class="hl num">0</span><span class="hl opt">) (</span><span class="hl kwa">debug</span> <span class="hl num">0</span><span class="hl opt">)))</span>
  <span class="hl opt">(</span><span class="hl kwa">with-smart-dna-hash</span> <span class="hl opt">(</span><span class="hl kwa">hash-access</span> hash-loop <span class="hl opt">:</span>vector-threshold <span class="hl num">16777216</span><span class="hl opt">)</span>
      <span class="hl opt">(</span><span class="hl kwa">1</span> <span class="hl num">2 3 4 6 12 18</span><span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl kwa">macrolet</span> <span class="hl opt">((</span><span class="hl kwa">incf-hash-element</span> <span class="hl opt">(</span><span class="hl kwa">seq-length</span> key<span class="hl opt">)</span>
                 <span class="hl opt">`(</span><span class="hl kwa">incf</span> <span class="hl opt">(</span><span class="hl kwa">hash-access</span> <span class="hl opt">,</span>seq-length <span class="hl opt">,</span>key<span class="hl opt">))))</span>
      <span class="hl opt">(</span><span class="hl kwa">with-dna-analyzed</span> <span class="hl opt">(</span><span class="hl kwa">stream</span> incf-hash-element <span class="hl opt">:</span>block-size <span class="hl num">655350</span><span class="hl opt">)</span> <span class="hl num">1 2 3 4 6 12 18</span><span class="hl opt">)</span>
      <span class="hl opt">(</span><span class="hl kwa">with-percentage</span> <span class="hl opt">(</span><span class="hl kwa">hash-loop</span> <span class="hl opt">(</span><span class="hl kwa">seqs-1</span> <span class="hl num">1</span><span class="hl opt">) (</span><span class="hl kwa">seqs-2</span> <span class="hl num">2</span><span class="hl opt">))</span>
        <span class="hl opt">(</span><span class="hl kwa">values</span> <span class="hl opt">(</span><span class="hl kwa">list</span> seqs-1 seqs-2<span class="hl opt">)</span>
                <span class="hl opt">(</span><span class="hl kwa">list</span> <span class="hl opt">(</span><span class="hl kwa">obtain-seq-count</span> hash-access <span class="hl str">&quot;GGT&quot;</span><span class="hl opt">)</span>
                      <span class="hl opt">(</span><span class="hl kwa">obtain-seq-count</span> hash-access <span class="hl str">&quot;GGTA&quot;</span><span class="hl opt">)</span>
                      <span class="hl opt">(</span><span class="hl kwa">obtain-seq-count</span> hash-access <span class="hl str">&quot;GGTATT&quot;</span><span class="hl opt">)</span>
                      <span class="hl opt">(</span><span class="hl kwa">obtain-seq-count</span> hash-access <span class="hl str">&quot;GGTATTTTAATT&quot;</span><span class="hl opt">)</span>
                      <span class="hl opt">(</span><span class="hl kwa">obtain-seq-count</span> hash-access <span class="hl str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="hl opt">)))))))</span>

<span class="hl opt">(</span><span class="hl kwa">defun</span> print-results <span class="hl opt">(</span><span class="hl kwa">seq-freqs</span> seq-counts<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">labels</span> <span class="hl opt">((</span><span class="hl kwa">compare</span> <span class="hl opt">(</span><span class="hl kwa">a</span> b<span class="hl opt">)</span>
             <span class="hl opt">(</span><span class="hl kwa">cond</span> <span class="hl opt">((&gt; (</span><span class="hl kwa">second</span> a<span class="hl opt">) (</span><span class="hl kwa">second</span> b<span class="hl opt">))</span> t<span class="hl opt">)</span>
                   <span class="hl opt">((&lt; (</span><span class="hl kwa">second</span> a<span class="hl opt">) (</span><span class="hl kwa">second</span> b<span class="hl opt">))</span> nil<span class="hl opt">)</span>
                   <span class="hl opt">(</span><span class="hl kwa">t</span> <span class="hl opt">(</span><span class="hl kwa">string</span><span class="hl opt">&lt; (</span><span class="hl kwa">first</span> a<span class="hl opt">) (</span><span class="hl kwa">first</span> b<span class="hl opt">)))))</span>
           <span class="hl opt">(</span><span class="hl kwa">print-freq</span> <span class="hl opt">(</span><span class="hl kwa">freq</span><span class="hl opt">)</span>
             <span class="hl opt">(</span><span class="hl kwa">format</span> t <span class="hl str">&quot;~{~{~a ~3$~}~%~}~%&quot;</span> <span class="hl opt">(</span><span class="hl kwa">sort</span> freq <span class="hl opt">#'</span>compare<span class="hl opt">))))</span>
    <span class="hl opt">(</span><span class="hl kwa">mapc</span> <span class="hl opt">#'</span>print-freq seq-freqs<span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl kwa">format</span> t <span class="hl str">&quot;~{~{~a~c~a~}~%~}&quot;</span> seq-counts<span class="hl opt">)))</span>


<span class="hl opt">(</span><span class="hl kwa">defun</span> main <span class="hl opt">()</span>
  <span class="hl opt">(</span><span class="hl kwa">with-open-file</span> <span class="hl opt">(</span><span class="hl kwa">input-s</span> <span class="hl opt">#</span>p<span class="hl str">&quot;/dev/stdin&quot;</span> <span class="hl opt">:</span>external-format <span class="hl opt">:</span>iso-8859-1<span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl kwa">multiple-value-bind</span> <span class="hl opt">(</span><span class="hl kwa">freqs</span> counts<span class="hl opt">)</span>
        <span class="hl opt">(</span><span class="hl kwa">perform-work</span> input-s<span class="hl opt">)</span>
      <span class="hl opt">(</span><span class="hl kwa">print-results</span> freqs counts<span class="hl opt">))))</span>


<span class="hl opt">(</span><span class="hl kwa">in-package</span> <span class="hl opt">:</span>cl-user<span class="hl opt">)</span>

<span class="hl opt">(</span><span class="hl kwa">defun</span> main <span class="hl opt">()</span>
  <span class="hl opt">(</span><span class="hl kwa">k-nucleotide</span><span class="hl opt">::</span>main<span class="hl opt">))</span>

