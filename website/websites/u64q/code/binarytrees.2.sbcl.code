<span class="hl slc">;;   The Computer Language Benchmarks Game</span>
<span class="hl slc">;;   http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">;;;</span>
<span class="hl slc">;;; contributed by Manuel Giraud</span>
<span class="hl slc">;;; modified by Nicolas Neuss</span>
<span class="hl slc">;;; modified by Juho Snellman 2005-10-26</span>
<span class="hl slc">;;;</span>
<span class="hl slc">;;; modified by Witali Kusnezow 2009-01-20</span>
<span class="hl slc">;;;  * simplified structure of leaf nodes</span>
<span class="hl slc">;;;  * optimize GC usage</span>
<span class="hl slc">;;;  * optimize all functions</span>
<span class="hl slc">;;;</span>
<span class="hl slc">;;; modified by Witali Kusnezow 2009-08-20</span>
<span class="hl slc">;;;  * remove GC hacks to satisfy new versions of the sbcl</span>
<span class="hl slc">;;;</span>
<span class="hl slc">;;; modified by Marko Kocic 2011-02-18</span>
<span class="hl slc">;;;  * add declaim to optimize for speed</span>
<span class="hl slc">;;;</span>

<span class="hl slc">;;; Node is either (DATA) (for leaf nodes) or an improper list (DATA LEFT . RIGHT)</span>

<span class="hl opt">(</span><span class="hl kwa">declaim</span> <span class="hl opt">(</span><span class="hl kwa">optimize</span> <span class="hl opt">(</span><span class="hl kwa">speed</span> <span class="hl num">3</span><span class="hl opt">) (</span><span class="hl kwa">debug</span> <span class="hl num">0</span><span class="hl opt">) (</span><span class="hl kwa">space</span> <span class="hl num">0</span><span class="hl opt">) (</span><span class="hl kwa">safety</span> <span class="hl num">0</span><span class="hl opt">)))</span>

<span class="hl opt">(</span><span class="hl kwa">defun</span> build-btree <span class="hl opt">(</span><span class="hl kwa">item</span> depth<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">fixnum</span> item depth<span class="hl opt">))</span>
  <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">zerop</span> depth<span class="hl opt">) (</span><span class="hl kwa">list</span> item<span class="hl opt">)</span>
      <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">((</span><span class="hl kwa">item2</span> <span class="hl opt">(+</span> item item<span class="hl opt">))</span>
            <span class="hl opt">(</span><span class="hl kwa">depth-1</span> <span class="hl opt">(</span><span class="hl kwa">1-</span> depth<span class="hl opt">)))</span>
        <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">fixnum</span> item2 depth-1<span class="hl opt">))</span>
        <span class="hl opt">(</span><span class="hl kwa">cons</span> item
				<span class="hl opt">(</span><span class="hl kwa">cons</span> <span class="hl opt">(</span><span class="hl kwa">build-btree</span> <span class="hl opt">(</span><span class="hl kwa">the</span> fixnum <span class="hl opt">(</span><span class="hl kwa">1-</span> item2<span class="hl opt">))</span> depth-1<span class="hl opt">)</span> 
					  <span class="hl opt">(</span><span class="hl kwa">build-btree</span> item2 depth-1<span class="hl opt">))))))</span>

<span class="hl opt">(</span><span class="hl kwa">defun</span> check-node <span class="hl opt">(</span><span class="hl kwa">node</span><span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">values</span> fixnum<span class="hl opt">))</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">((</span><span class="hl kwa">data</span> <span class="hl opt">(</span><span class="hl kwa">car</span> node<span class="hl opt">))</span>
        <span class="hl opt">(</span><span class="hl kwa">kids</span> <span class="hl opt">(</span><span class="hl kwa">cdr</span> node<span class="hl opt">)))</span>
    <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">fixnum</span> data<span class="hl opt">))</span>
    <span class="hl opt">(</span><span class="hl kwa">if</span> kids
        <span class="hl opt">(</span><span class="hl kwa">-</span> <span class="hl opt">(+</span> data <span class="hl opt">(</span><span class="hl kwa">check-node</span> <span class="hl opt">(</span><span class="hl kwa">car</span> kids<span class="hl opt">)))</span>
           <span class="hl opt">(</span><span class="hl kwa">check-node</span> <span class="hl opt">(</span><span class="hl kwa">cdr</span> kids<span class="hl opt">)))</span>
        data<span class="hl opt">)))</span>

<span class="hl opt">(</span><span class="hl kwa">defun</span> loop-depths <span class="hl opt">(</span><span class="hl kwa">max-depth</span> <span class="hl opt">&amp;</span>key <span class="hl opt">(</span><span class="hl kwa">min-depth</span> <span class="hl num">4</span><span class="hl opt">))</span>
  <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> fixnum max-depth min-depth<span class="hl opt">))</span>
  <span class="hl opt">(</span><span class="hl kwa">loop</span> for d of-type fixnum from min-depth by <span class="hl num">2</span> upto max-depth do
       <span class="hl opt">(</span><span class="hl kwa">loop</span> with iterations of-type fixnum <span class="hl opt">= (</span><span class="hl kwa">ash</span> <span class="hl num">1</span> <span class="hl opt">(+</span> max-depth min-depth <span class="hl opt">(</span><span class="hl kwa">-</span> d<span class="hl opt">)))</span>
          for i of-type fixnum from <span class="hl num">1</span> upto iterations
          sum <span class="hl opt">(+ (</span><span class="hl kwa">the</span> fixnum <span class="hl opt">(</span><span class="hl kwa">check-node</span> <span class="hl opt">(</span><span class="hl kwa">build-btree</span> i d<span class="hl opt">)))</span>
                 <span class="hl opt">(</span><span class="hl kwa">the</span> fixnum <span class="hl opt">(</span><span class="hl kwa">check-node</span> <span class="hl opt">(</span><span class="hl kwa">build-btree</span> <span class="hl opt">(</span><span class="hl kwa">-</span> i<span class="hl opt">)</span> d<span class="hl opt">))))</span>
          into result of-type fixnum
          finally
            <span class="hl opt">(</span><span class="hl kwa">format</span> t <span class="hl str">&quot;~D	 trees of depth ~D	 check: ~D~%&quot;</span>
                    <span class="hl opt">(</span><span class="hl kwa">the</span> fixnum <span class="hl opt">(+</span> iterations iterations <span class="hl opt">))</span> d result<span class="hl opt">))))</span>

<span class="hl opt">(</span><span class="hl kwa">defun</span> main <span class="hl opt">(&amp;</span>optional <span class="hl opt">(</span><span class="hl kwa">n</span> <span class="hl opt">(</span><span class="hl kwa">parse-integer</span>
                           <span class="hl opt">(</span><span class="hl kwa">or</span> <span class="hl opt">(</span><span class="hl kwa">car</span> <span class="hl opt">(</span><span class="hl kwa">last</span> <span class="hl opt">#+</span>sbcl sb-ext<span class="hl opt">:*</span>posix-argv<span class="hl opt">*</span>
                                          <span class="hl opt">#+</span>cmu  extensions<span class="hl opt">:*</span>command-line-strings<span class="hl opt">*</span>
                                          <span class="hl opt">#+</span>gcl  si<span class="hl opt">::*</span>command-args<span class="hl opt">*))</span>
                               <span class="hl str">&quot;1&quot;</span><span class="hl opt">))))</span>
  <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> <span class="hl opt">(</span><span class="hl kwa">integer</span> <span class="hl num">0 255</span><span class="hl opt">)</span> n<span class="hl opt">))</span>
  <span class="hl opt">(</span><span class="hl kwa">format</span> t <span class="hl str">&quot;stretch tree of depth ~D	 check: ~D~%&quot;</span> <span class="hl opt">(</span><span class="hl kwa">1</span><span class="hl opt">+</span> n<span class="hl opt">) (</span><span class="hl kwa">check-node</span> <span class="hl opt">(</span><span class="hl kwa">build-btree</span> <span class="hl num">0</span> <span class="hl opt">(</span><span class="hl kwa">1</span><span class="hl opt">+</span> n<span class="hl opt">))))</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">((*</span>print-pretty<span class="hl opt">*</span> nil<span class="hl opt">) (</span><span class="hl kwa">long-lived-tree</span> <span class="hl opt">(</span><span class="hl kwa">build-btree</span> <span class="hl num">0</span> n<span class="hl opt">)))</span>
    <span class="hl opt">(</span><span class="hl kwa">purify</span><span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl kwa">loop-depths</span> n<span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl kwa">format</span> t <span class="hl str">&quot;long lived tree of depth ~D	 check: ~D~%&quot;</span> n <span class="hl opt">(</span><span class="hl kwa">check-node</span> long-lived-tree<span class="hl opt">))))</span>
