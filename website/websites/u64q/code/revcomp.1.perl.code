<span class="hl slc"># The Computer Language Benchmarks Game</span>
<span class="hl slc"># http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">#</span>
<span class="hl slc"># Contributed by Bradford Powell</span>
<span class="hl slc"># Fixed slow print substr-solution, by Kjetil Skotheim</span>
<span class="hl slc"># Changed input reading method and avoid a sub call by Bruno Vecchi</span>

<span class="hl kwa">use</span> strict<span class="hl opt">;</span>
<span class="hl kwa">use</span> feature <span class="hl str">'say'</span><span class="hl opt">;</span>

<span class="hl kwc">local</span> <span class="hl opt">$/ =</span> <span class="hl str">&quot;&gt;&quot;</span><span class="hl opt">;</span>
<span class="hl kwa">while</span> <span class="hl opt">(</span><span class="hl kwc">my</span> <span class="hl kwb">$entry</span> <span class="hl opt">= &lt;</span>STDIN<span class="hl opt">&gt;) {</span>
    <span class="hl kwc">chomp</span> <span class="hl kwb">$entry</span><span class="hl opt">;</span>

    <span class="hl kwc">my</span> <span class="hl opt">(</span><span class="hl kwb">$header</span><span class="hl opt">,</span> <span class="hl kwb">$seq</span><span class="hl opt">) =</span> <span class="hl kwc">split</span> <span class="hl kwd">/\n/</span><span class="hl opt">,</span> <span class="hl kwb">$entry</span><span class="hl opt">,</span> <span class="hl num">2</span><span class="hl opt">;</span>
    <span class="hl kwa">next unless</span> <span class="hl kwb">$header</span><span class="hl opt">;</span>

    <span class="hl opt">{</span>
        <span class="hl kwc">local</span> <span class="hl opt">$/ =</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">;</span>
        <span class="hl kwc">say</span> <span class="hl str">&quot;&gt;&quot;</span><span class="hl opt">,</span> <span class="hl kwb">$header</span><span class="hl opt">;</span>

        <span class="hl kwb">$seq</span> <span class="hl opt">=~</span> <span class="hl kwd">s/\n//g</span><span class="hl opt">;</span>
        <span class="hl kwb">$seq</span> <span class="hl opt">=</span>  <span class="hl kwc">reverse</span> <span class="hl kwb">$seq</span><span class="hl opt">;</span>
        <span class="hl kwb">$seq</span> <span class="hl opt">=~</span> tr<span class="hl opt">{</span>wsatugcyrkmbdhvnATUGCYRKMBDHV<span class="hl opt">}</span>
                  <span class="hl opt">{</span>WSTAACGRYMKVHDBNTAACGRYMKVHDB<span class="hl opt">};</span>

        <span class="hl kwc">my</span> <span class="hl kwb">$lines</span>   <span class="hl opt">=</span> <span class="hl kwc">length</span><span class="hl opt">(</span><span class="hl kwb">$seq</span><span class="hl opt">)/</span><span class="hl num">60</span><span class="hl opt">;</span>
        <span class="hl kwc">my</span> <span class="hl kwb">$current</span> <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>

        <span class="hl kwc">say substr</span><span class="hl opt">(</span><span class="hl kwb">$seq</span><span class="hl opt">,</span> <span class="hl kwb">$current</span><span class="hl opt">++*</span><span class="hl num">60</span><span class="hl opt">,</span> <span class="hl num">60</span><span class="hl opt">)</span>
            <span class="hl kwa">while</span> <span class="hl kwb">$current</span> <span class="hl opt">&lt;</span> <span class="hl kwb">$lines</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>
<span class="hl opt">}</span>
