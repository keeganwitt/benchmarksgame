<span class="hl slc">// The Computer Language Benchmarks Game</span>
<span class="hl slc">// http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">//</span>
<span class="hl slc">// Modified version of Valentin Kraevskiy</span>
<span class="hl slc">// Contributed by Vassil Keremidchiev</span>

<span class="hl kwa">open</span> <span class="hl kwd">System</span><span class="hl opt">.</span><span class="hl kwd">Text</span><span class="hl opt">.</span><span class="hl kwd">RegularExpressions</span>
<span class="hl kwa">open</span> <span class="hl kwd">System</span><span class="hl opt">.</span><span class="hl kwd">Threading</span>

<span class="hl kwa">let</span> regex s <span class="hl opt">=</span> <span class="hl kwd">Regex</span> <span class="hl opt">(</span>s<span class="hl opt">,</span> <span class="hl kwd">RegexOptions</span><span class="hl opt">.</span><span class="hl kwd">Compiled</span><span class="hl opt">)</span>
<span class="hl kwa">let</span> input <span class="hl opt">=</span> stdin<span class="hl opt">.</span><span class="hl kwd">ReadToEnd</span> <span class="hl opt">()</span>
<span class="hl kwa">let</span> withoutComments <span class="hl opt">= (</span>regex <span class="hl str">&quot;&gt;.*</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">).</span><span class="hl kwd">Replace</span> <span class="hl opt">(</span>input<span class="hl opt">,</span> <span class="hl str">&quot;&quot;</span><span class="hl opt">)</span>
<span class="hl kwa">let</span> text <span class="hl opt">= (</span>regex <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">).</span><span class="hl kwd">Replace</span> <span class="hl opt">(</span>withoutComments<span class="hl opt">,</span> <span class="hl str">&quot;&quot;</span><span class="hl opt">)</span>

<span class="hl kwa">let</span> textSize <span class="hl opt">=</span> text<span class="hl opt">.</span><span class="hl kwd">Length</span>
<span class="hl kwa">let</span> blockSize <span class="hl opt">=</span> textSize <span class="hl opt">/</span> <span class="hl num">2</span>

<span class="hl kwa">let</span> onblocks overlapSize blockSize <span class="hl opt">=</span>
    <span class="hl kwa">let rec</span> onblocks<span class="hl str">' res = function</span>
<span class="hl str">        | &quot;&quot; -&gt; res</span>
<span class="hl str">        | s when s.Length &lt;= blockSize -&gt; res &#64; [s]</span>
<span class="hl str">        | s -&gt; onblocks'</span> <span class="hl opt">(</span>res <span class="hl opt">&#64; [</span>s<span class="hl opt">.</span><span class="hl kwd">Substring</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> blockSize<span class="hl opt">)]) (</span>s<span class="hl opt">.</span><span class="hl kwd">Substring</span><span class="hl opt">(</span>blockSize <span class="hl opt">-</span> overlapSize<span class="hl opt">))</span> 
    onblocks<span class="hl str">' []</span>
<span class="hl str"></span>
<span class="hl str">let onProcBlocks = onblocks 0 ((textSize / System.Environment.ProcessorCount) + 1) </span>
<span class="hl str"></span>
<span class="hl str">let DNAcodes = [ &quot;agggtaaa|tttaccct&quot;</span>
<span class="hl str">                 &quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span>
<span class="hl str">                 &quot;a[act]ggtaaa|tttacc[agt]t&quot;</span>
<span class="hl str">                 &quot;ag[act]gtaaa|tttac[agt]ct&quot;</span>
<span class="hl str">                 &quot;agg[act]taaa|ttta[agt]cct&quot;</span>
<span class="hl str">                 &quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span>
<span class="hl str">                 &quot;agggt[cgt]aa|tt[acg]accct&quot;</span>
<span class="hl str">                 &quot;agggta[cgt]a|t[acg]taccct&quot;</span>
<span class="hl str">                 &quot;agggtaa[cgt]|[acg]ttaccct&quot; ]</span>
<span class="hl str"></span>
<span class="hl str">// Calculate all chunks in parallel</span>
<span class="hl str">let chunksCounts = </span>
<span class="hl str">    let chunkedMatch (matchStr:string) = </span>
<span class="hl str">        text |&gt; onblocks (matchStr.Length - 1) blockSize </span>
<span class="hl str">             |&gt; List.map (fun t -&gt; async { return matchStr, ((regex matchStr).Matches t).Count })</span>
<span class="hl str"></span>
<span class="hl str">    DNAcodes |&gt; List.collect chunkedMatch |&gt; Async.Parallel |&gt; Async.RunSynchronously </span>
<span class="hl str"></span>
<span class="hl str">// Gather result counts by summing them per DNA code</span>
<span class="hl str">DNAcodes |&gt; List.map (fun key -&gt; key, chunksCounts |&gt; Array.fold (fun S (k,cnt) -&gt; if k=key then S+cnt else S) 0)</span>
<span class="hl str">         |&gt; List.iter (fun (key, cnt) -&gt; printfn &quot;%s %i&quot; key cnt)</span>
<span class="hl str">  </span>
<span class="hl str">let lengthAfterReplace text =</span>
<span class="hl str">    [&quot;B&quot;, &quot;(c|g|t)&quot;</span>
<span class="hl str">     &quot;D&quot;, &quot;(a|g|t)&quot;</span>
<span class="hl str">     &quot;H&quot;, &quot;(a|c|t)&quot;</span>
<span class="hl str">     &quot;K&quot;, &quot;(g|t)&quot;</span>
<span class="hl str">     &quot;M&quot;, &quot;(a|c)&quot;</span>
<span class="hl str">     &quot;N&quot;, &quot;(a|c|g|t)&quot;</span>
<span class="hl str">     &quot;R&quot;, &quot;(a|g)&quot;</span>
<span class="hl str">     &quot;S&quot;, &quot;(c|g)&quot;</span>
<span class="hl str">     &quot;V&quot;, &quot;(a|c|g)&quot;</span>
<span class="hl str">     &quot;W&quot;, &quot;(a|t)&quot;</span>
<span class="hl str">     &quot;Y&quot;, &quot;(c|t)&quot;]</span>
<span class="hl str">     |&gt; List.fold (fun s (code, alt) -&gt; (regex code).Replace (s, alt)) text </span>
<span class="hl str">     |&gt; String.length</span>
<span class="hl str"></span>
<span class="hl str">let replacedSize = </span>
<span class="hl str">    text |&gt; onProcBlocks </span>
<span class="hl str">    |&gt; List.map (fun chunk -&gt; async { return lengthAfterReplace chunk } ) </span>
<span class="hl str">    |&gt; Async.Parallel |&gt; Async.RunSynchronously</span>
<span class="hl str">    |&gt; Array.sum</span>
<span class="hl str"></span>
<span class="hl str">printf &quot;</span><span class="hl esc">\n</span><span class="hl str">%i</span><span class="hl esc">\n</span><span class="hl str">%i</span><span class="hl esc">\n</span><span class="hl str">%i</span><span class="hl esc">\n</span><span class="hl str">&quot; input.Length textSize replacedSize</span>
