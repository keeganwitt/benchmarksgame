<span class="hl slc">;;   The Computer Language Benchmarks Game</span>
<span class="hl slc">;;   http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">;;</span>
<span class="hl slc">;; Contributed by: Alex Miller</span>

<span class="hl opt">(</span><span class="hl kwa">ns</span> regexdna
  <span class="hl opt">(:</span>import <span class="hl opt">[</span>java.io FileInputStream FileDescriptor<span class="hl opt">]</span>
           <span class="hl opt">[</span>java.nio ByteBuffer<span class="hl opt">]</span>
           <span class="hl opt">[</span>java.util.regex Pattern<span class="hl opt">])</span>
  <span class="hl opt">(:</span>gen-class<span class="hl opt">))</span>

<span class="hl opt">(</span><span class="hl kwa">set</span><span class="hl opt">! *</span>warn-on-reflection<span class="hl opt">*</span> true<span class="hl opt">)</span>
<span class="hl opt">(</span><span class="hl kwa">set</span><span class="hl opt">! *</span>unchecked-math<span class="hl opt">*</span> true<span class="hl opt">)</span>

<span class="hl opt">(</span><span class="hl kwa">defn</span> -main <span class="hl opt">[&amp;</span> args<span class="hl opt">]</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">[</span>cin <span class="hl opt">(</span><span class="hl kwa">-</span><span class="hl opt">&gt;</span> FileDescriptor<span class="hl opt">/</span>in FileInputStream. .getChannel<span class="hl opt">)</span>
        bb <span class="hl opt">(</span><span class="hl kwa">-</span><span class="hl opt">&gt;</span> cin .size int ByteBuffer<span class="hl opt">/</span>allocate<span class="hl opt">)]</span>
    <span class="hl opt">(</span>.read cin bb<span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">[</span>input <span class="hl opt">(</span><span class="hl kwa">String</span>. <span class="hl opt">(</span>.array bb<span class="hl opt">)</span> <span class="hl str">&quot;US-ASCII&quot;</span><span class="hl opt">)</span>
          sequence <span class="hl opt">(</span>.replaceAll input <span class="hl str">&quot;&gt;.*</span><span class="hl esc">\n</span><span class="hl str">|</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> <span class="hl str">&quot;&quot;</span><span class="hl opt">)</span>
          replacements <span class="hl opt">(</span><span class="hl kwa">array-map</span> <span class="hl str">&quot;B&quot;</span> <span class="hl str">&quot;(c|g|t)&quot;</span>
                                  <span class="hl str">&quot;D&quot;</span> <span class="hl str">&quot;(a|g|t)&quot;</span>
                                  <span class="hl str">&quot;H&quot;</span> <span class="hl str">&quot;(a|c|t)&quot;</span>
                                  <span class="hl str">&quot;K&quot;</span> <span class="hl str">&quot;(g|t)&quot;</span>
                                  <span class="hl str">&quot;M&quot;</span> <span class="hl str">&quot;(a|c)&quot;</span>
                                  <span class="hl str">&quot;N&quot;</span> <span class="hl str">&quot;(a|c|g|t)&quot;</span>
                                  <span class="hl str">&quot;R&quot;</span> <span class="hl str">&quot;(a|g)&quot;</span>
                                  <span class="hl str">&quot;S&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(c|g)&quot;</span>
                                  <span class="hl str">&quot;V&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(a|c|g)&quot;</span>
                                  <span class="hl str">&quot;W&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(a|t)&quot;</span>
                                  <span class="hl str">&quot;Y&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(c|t)&quot;</span><span class="hl opt">)</span>
          buflen <span class="hl opt">(</span><span class="hl kwa">future-call</span> <span class="hl opt">#(</span><span class="hl kwa">let</span> <span class="hl opt">[</span>buf <span class="hl opt">(</span><span class="hl kwa">StringBuffer</span>.<span class="hl opt">)</span>
                                     m <span class="hl opt">(</span>.matcher <span class="hl opt">(</span><span class="hl kwa">Pattern</span><span class="hl opt">/</span>compile <span class="hl str">&quot;[WYKMSRBDVHN]&quot;</span><span class="hl opt">)</span> sequence<span class="hl opt">)]</span>
                                 <span class="hl opt">(</span><span class="hl kwa">loop</span> <span class="hl opt">[]</span>
                                   <span class="hl opt">(</span><span class="hl kwa">when</span> <span class="hl opt">(</span>.find m<span class="hl opt">)</span>
                                     <span class="hl opt">(</span>.appendReplacement m buf <span class="hl str">&quot;&quot;</span><span class="hl opt">)</span>
                                     <span class="hl opt">(</span>.append buf <span class="hl opt">(</span><span class="hl kwa">get</span> replacements <span class="hl opt">(</span>.group m<span class="hl opt">)))</span>
                                     <span class="hl opt">(</span><span class="hl kwa">recur</span><span class="hl opt">)))</span>
                                 <span class="hl opt">(</span>.appendTail m buf<span class="hl opt">)</span>
                                 <span class="hl opt">(</span>.length buf<span class="hl opt">)))</span>
          variants <span class="hl opt">[</span><span class="hl str">&quot;agggtaaa|tttaccct&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span><span class="hl opt">,</span>
                    <span class="hl str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span><span class="hl opt">,</span>
                    <span class="hl str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span><span class="hl opt">,</span>
                    <span class="hl str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span><span class="hl opt">,</span>
                    <span class="hl str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span><span class="hl opt">]</span>
          match-fn <span class="hl opt">(</span><span class="hl kwa">fn</span> <span class="hl opt">[</span>^String v<span class="hl opt">]</span>
                     <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">[</span>m <span class="hl opt">(</span>.matcher <span class="hl opt">(</span><span class="hl kwa">Pattern</span><span class="hl opt">/</span>compile v<span class="hl opt">)</span> sequence<span class="hl opt">)]</span>
                       <span class="hl opt">(</span><span class="hl kwa">loop</span> <span class="hl opt">[</span>c <span class="hl num">0</span><span class="hl opt">]</span>
                         <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(</span>.find m<span class="hl opt">)</span>
                           <span class="hl opt">(</span><span class="hl kwa">recur</span> <span class="hl opt">(</span><span class="hl kwa">inc</span> c<span class="hl opt">))</span>
                           <span class="hl opt">[</span>v c<span class="hl opt">]))))</span>
          results <span class="hl opt">(</span><span class="hl kwa">pmap</span> match-fn variants<span class="hl opt">)]</span>
      <span class="hl opt">(</span><span class="hl kwa">doall</span> <span class="hl opt">(</span><span class="hl kwa">for</span> <span class="hl opt">[[</span>variant c<span class="hl opt">]</span> results<span class="hl opt">] (</span><span class="hl kwa">println</span> variant c<span class="hl opt">)))</span>
      <span class="hl opt">(</span><span class="hl kwa">println</span><span class="hl opt">)</span>
      <span class="hl opt">(</span><span class="hl kwa">println</span> <span class="hl opt">(</span>.length input<span class="hl opt">))</span>
      <span class="hl opt">(</span><span class="hl kwa">println</span> <span class="hl opt">(</span>.length sequence<span class="hl opt">))</span>
      <span class="hl opt">(</span><span class="hl kwa">println</span> <span class="hl opt">&#64;</span>buflen<span class="hl opt">)</span>
      <span class="hl opt">(</span><span class="hl kwa">shutdown-agents</span><span class="hl opt">))))</span>
