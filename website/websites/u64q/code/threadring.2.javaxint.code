<span class="hl com">/**</span>
<span class="hl com"> * The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> * contributed by Klaus Friedel</span>
<span class="hl com"> */</span>

<span class="hl kwa">import</span> java<span class="hl sym">.</span>util<span class="hl sym">.*;</span>

<span class="hl kwa">public class</span> threadring <span class="hl sym">{</span>

  <span class="hl kwa">public static</span> <span class="hl kwb">long</span> startTime<span class="hl sym">;</span>
  <span class="hl kwa">public static final</span> <span class="hl kwb">int</span> THREAD_COUNT <span class="hl sym">=</span> <span class="hl num">503</span><span class="hl sym">;</span>

  <span class="hl slc">// The scheduler for cooperative Multithreading</span>
  <span class="hl kwa">static class</span> Scheduler <span class="hl kwa">extends</span> <span class="hl kwc">Thread</span><span class="hl sym">{</span>
    <span class="hl kwa">private final</span> <span class="hl kwc">List</span><span class="hl sym">&lt;</span>CooperativeThread<span class="hl sym">&gt;</span> threads <span class="hl sym">=</span> <span class="hl kwc">Collections</span><span class="hl sym">.</span><span class="hl kwd">synchronizedList</span><span class="hl sym">(</span><span class="hl kwa">new</span> <span class="hl kwc">ArrayList</span><span class="hl sym">&lt;</span>CooperativeThread<span class="hl sym">&gt;());</span>
    <span class="hl kwa">private</span> <span class="hl kwb">int</span> rrIndex <span class="hl sym">= -</span><span class="hl num">1</span><span class="hl sym">;</span>

    <span class="hl kwa">public</span> <span class="hl kwb">void</span> <span class="hl kwd">start</span><span class="hl sym">(</span>CooperativeThread t<span class="hl sym">){</span>
      threads<span class="hl sym">.</span><span class="hl kwd">add</span><span class="hl sym">(</span>t<span class="hl sym">);</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">public</span> <span class="hl kwb">void</span> <span class="hl kwd">run</span><span class="hl sym">() {</span>
      <span class="hl kwa">for</span><span class="hl sym">(;;){</span> <span class="hl slc">// Scheduler will run foerever</span>
        CooperativeThread nextThread<span class="hl sym">;</span>
        <span class="hl kwa">synchronized</span> <span class="hl sym">(</span>threads<span class="hl sym">){</span>
          rrIndex<span class="hl sym">++;</span>
          <span class="hl kwa">if</span><span class="hl sym">(</span>rrIndex <span class="hl sym">&gt;=</span> threads<span class="hl sym">.</span><span class="hl kwd">size</span><span class="hl sym">())</span> rrIndex <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
          nextThread <span class="hl sym">=</span> threads<span class="hl sym">.</span><span class="hl kwd">get</span><span class="hl sym">(</span>rrIndex<span class="hl sym">);</span>
        <span class="hl sym">}</span>
        nextThread<span class="hl sym">.</span><span class="hl kwd">handleMessage</span><span class="hl sym">();</span>
      <span class="hl sym">}</span>
    <span class="hl sym">}</span>
  <span class="hl sym">}</span>

  <span class="hl kwa">static abstract class</span> CooperativeThread<span class="hl sym">{</span>
    <span class="hl kwa">public abstract</span> <span class="hl kwb">void</span> <span class="hl kwd">handleMessage</span><span class="hl sym">();</span>
  <span class="hl sym">}</span>

  <span class="hl kwa">static class</span> MessageThread <span class="hl kwa">extends</span> CooperativeThread<span class="hl sym">{</span>
      MessageThread nextThread<span class="hl sym">;</span>
      <span class="hl kwc">String</span> name<span class="hl sym">;</span>
      <span class="hl kwc">Integer</span> msg<span class="hl sym">;</span>

      <span class="hl kwa">public</span> <span class="hl kwd">MessageThread</span><span class="hl sym">(</span>MessageThread nextThread<span class="hl sym">,</span> <span class="hl kwb">int</span> name<span class="hl sym">) {</span>
        <span class="hl kwa">this</span><span class="hl sym">.</span>name <span class="hl sym">=</span> <span class="hl str">&quot;&quot;</span> <span class="hl sym">+</span> name<span class="hl sym">;</span>
        <span class="hl kwa">this</span><span class="hl sym">.</span>nextThread <span class="hl sym">=</span> nextThread<span class="hl sym">;</span>
      <span class="hl sym">}</span>

      <span class="hl kwa">public</span> <span class="hl kwb">void</span> <span class="hl kwd">handleMessage</span><span class="hl sym">(){</span>
        <span class="hl kwa">if</span><span class="hl sym">(</span>msg <span class="hl sym">==</span> null<span class="hl sym">)</span> <span class="hl kwa">return</span><span class="hl sym">;</span>
        <span class="hl kwa">if</span><span class="hl sym">(</span>msg <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">){</span>
          <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">(</span><span class="hl kwd">getName</span><span class="hl sym">());</span>
          <span class="hl kwc">System</span><span class="hl sym">.</span><span class="hl kwd">exit</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">);</span>
        <span class="hl sym">}</span>
        nextThread<span class="hl sym">.</span><span class="hl kwd">put</span><span class="hl sym">(</span>msg <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">);</span>
        msg <span class="hl sym">=</span> null<span class="hl sym">;</span>
      <span class="hl sym">}</span>

      <span class="hl kwb">void</span> <span class="hl kwd">put</span><span class="hl sym">(</span><span class="hl kwc">Integer</span> message<span class="hl sym">){</span>
        msg <span class="hl sym">=</span> message<span class="hl sym">;</span>
      <span class="hl sym">}</span>

      <span class="hl kwc">String</span> <span class="hl kwd">getName</span><span class="hl sym">() {</span>
        <span class="hl kwa">return</span> name<span class="hl sym">;</span>
      <span class="hl sym">}</span>
    <span class="hl sym">}</span>


  <span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwc">String</span> args<span class="hl sym">[])</span> <span class="hl kwa">throws</span> <span class="hl kwc">Exception</span><span class="hl sym">{</span>
    <span class="hl kwb">int</span> hopCount <span class="hl sym">=</span> <span class="hl kwc">Integer</span><span class="hl sym">.</span><span class="hl kwd">parseInt</span><span class="hl sym">(</span>args<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]);</span>

    MessageThread thread <span class="hl sym">=</span> null<span class="hl sym">;</span>
    MessageThread last <span class="hl sym">=</span> null<span class="hl sym">;</span>
    <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> THREAD_COUNT<span class="hl sym">;</span> i <span class="hl sym">&gt;=</span> <span class="hl num">1</span> <span class="hl sym">;</span> i<span class="hl sym">--) {</span>
      thread <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">MessageThread</span><span class="hl sym">(</span>thread<span class="hl sym">,</span> i<span class="hl sym">);</span>
      <span class="hl kwa">if</span><span class="hl sym">(</span>i <span class="hl sym">==</span> THREAD_COUNT<span class="hl sym">)</span> last <span class="hl sym">=</span> thread<span class="hl sym">;</span>
    <span class="hl sym">}</span>
    <span class="hl slc">// close the ring:</span>
    last<span class="hl sym">.</span>nextThread <span class="hl sym">=</span> thread<span class="hl sym">;</span>

    Scheduler scheduler <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Scheduler</span><span class="hl sym">();</span>
    <span class="hl slc">// start all Threads</span>
    MessageThread t <span class="hl sym">=</span> thread<span class="hl sym">;</span>
    <span class="hl kwa">do</span><span class="hl sym">{</span>
      scheduler<span class="hl sym">.</span><span class="hl kwd">start</span><span class="hl sym">(</span>t<span class="hl sym">);</span>
      t <span class="hl sym">=</span> t<span class="hl sym">.</span>nextThread<span class="hl sym">;</span>
    <span class="hl sym">}</span><span class="hl kwa">while</span><span class="hl sym">(</span>t <span class="hl sym">!=</span> thread<span class="hl sym">);</span>
    scheduler<span class="hl sym">.</span><span class="hl kwd">start</span><span class="hl sym">();</span>

    <span class="hl slc">// inject message</span>
    thread<span class="hl sym">.</span><span class="hl kwd">put</span><span class="hl sym">(</span>hopCount<span class="hl sym">);</span>
  <span class="hl sym">}</span>
<span class="hl sym">}</span>
