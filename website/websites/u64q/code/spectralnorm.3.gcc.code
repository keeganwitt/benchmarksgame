<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * Contributed by Mr Ledrug</span>
<span class="hl com"> *</span>
<span class="hl com"> * Algorithm lifted from Intel Fortran #2 code by Steve Decker et al.</span>
<span class="hl com">*/</span>

<span class="hl ppc">#include &lt;stdio.h&gt;</span>
<span class="hl ppc">#include &lt;stdlib.h&gt;</span>
<span class="hl ppc">#include &lt;math.h&gt;</span>

<span class="hl kwc">inline</span> <span class="hl kwb">int</span> <span class="hl kwd">A</span><span class="hl opt">(</span><span class="hl kwb">int</span> i<span class="hl opt">,</span> <span class="hl kwb">int</span> j<span class="hl opt">) {</span>
   <span class="hl kwa">return</span> <span class="hl opt">((</span>i<span class="hl opt">+</span>j<span class="hl opt">) * (</span>i<span class="hl opt">+</span>j<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">) /</span> <span class="hl num">2</span> <span class="hl opt">+</span> i <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwb">double</span> <span class="hl kwd">dot</span><span class="hl opt">(</span><span class="hl kwb">double</span> <span class="hl opt">*</span> v<span class="hl opt">,</span> <span class="hl kwb">double</span> <span class="hl opt">*</span> u<span class="hl opt">,</span> <span class="hl kwb">int</span> n<span class="hl opt">) {</span>
   <span class="hl kwb">int</span> i<span class="hl opt">;</span>
   <span class="hl kwb">double</span> sum <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
   <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> n<span class="hl opt">;</span> i<span class="hl opt">++)</span>
      sum <span class="hl opt">+=</span> v<span class="hl opt">[</span>i<span class="hl opt">] *</span> u<span class="hl opt">[</span>i<span class="hl opt">];</span>
   <span class="hl kwa">return</span> sum<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwb">void</span> <span class="hl kwd">mult_Av</span><span class="hl opt">(</span><span class="hl kwb">double</span> <span class="hl opt">*</span> v<span class="hl opt">,</span> <span class="hl kwb">double</span> <span class="hl opt">*</span> out<span class="hl opt">,</span> <span class="hl kwb">const int</span> n<span class="hl opt">) {</span>
   <span class="hl kwb">int</span> i<span class="hl opt">,</span> j<span class="hl opt">;</span>
   <span class="hl kwb">double</span> sum<span class="hl opt">;</span>
<span class="hl ppc">#   pragma omp parallel for private(sum,j)</span>
   <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> n<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
      <span class="hl kwa">for</span> <span class="hl opt">(</span>sum <span class="hl opt">=</span> j <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> j <span class="hl opt">&lt;</span> n<span class="hl opt">;</span> j<span class="hl opt">++)</span>
         sum <span class="hl opt">+=</span> v<span class="hl opt">[</span>j<span class="hl opt">] /</span> <span class="hl kwd">A</span><span class="hl opt">(</span>i<span class="hl opt">,</span>j<span class="hl opt">);</span>
      out<span class="hl opt">[</span>i<span class="hl opt">] =</span> sum<span class="hl opt">;</span>
   <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl kwb">void</span> <span class="hl kwd">mult_Atv</span><span class="hl opt">(</span><span class="hl kwb">double</span> <span class="hl opt">*</span> v<span class="hl opt">,</span> <span class="hl kwb">double</span> <span class="hl opt">*</span> out<span class="hl opt">,</span> <span class="hl kwb">const int</span> n<span class="hl opt">) {</span>
   <span class="hl kwb">int</span> i<span class="hl opt">,</span> j<span class="hl opt">;</span>
   <span class="hl kwb">double</span> sum<span class="hl opt">;</span>
<span class="hl ppc">#   pragma omp parallel for private(sum,j)</span>
   <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> n<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
      <span class="hl kwa">for</span> <span class="hl opt">(</span>sum <span class="hl opt">=</span> j <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> j <span class="hl opt">&lt;</span> n<span class="hl opt">;</span> j<span class="hl opt">++)</span>
         sum <span class="hl opt">+=</span> v<span class="hl opt">[</span>j<span class="hl opt">] /</span> <span class="hl kwd">A</span><span class="hl opt">(</span>j<span class="hl opt">,</span>i<span class="hl opt">);</span>
      out<span class="hl opt">[</span>i<span class="hl opt">] =</span> sum<span class="hl opt">;</span>
   <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl kwb">double</span> <span class="hl opt">*</span>tmp<span class="hl opt">;</span>
<span class="hl kwb">void</span> <span class="hl kwd">mult_AtAv</span><span class="hl opt">(</span><span class="hl kwb">double</span> <span class="hl opt">*</span>v<span class="hl opt">,</span> <span class="hl kwb">double</span> <span class="hl opt">*</span>out<span class="hl opt">,</span> <span class="hl kwb">const int</span> n<span class="hl opt">) {</span>
   <span class="hl kwd">mult_Av</span><span class="hl opt">(</span>v<span class="hl opt">,</span> tmp<span class="hl opt">,</span> n<span class="hl opt">);</span>
   <span class="hl kwd">mult_Atv</span><span class="hl opt">(</span>tmp<span class="hl opt">,</span> out<span class="hl opt">,</span> n<span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span><span class="hl opt">**</span>argv<span class="hl opt">) {</span>
   <span class="hl kwb">int</span> n <span class="hl opt">=</span> <span class="hl kwd">atoi</span><span class="hl opt">(</span>argv<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">]);</span>
   <span class="hl kwa">if</span> <span class="hl opt">(</span>n <span class="hl opt">&lt;=</span> <span class="hl num">0</span><span class="hl opt">)</span> n <span class="hl opt">=</span> <span class="hl num">2000</span><span class="hl opt">;</span>

   <span class="hl kwb">double</span> <span class="hl opt">*</span>u<span class="hl opt">, *</span>v<span class="hl opt">;</span>
   u <span class="hl opt">=</span> <span class="hl kwd">malloc</span><span class="hl opt">(</span>n <span class="hl opt">*</span> <span class="hl kwa">sizeof</span><span class="hl opt">(</span><span class="hl kwb">double</span><span class="hl opt">));</span>
   v <span class="hl opt">=</span> <span class="hl kwd">malloc</span><span class="hl opt">(</span>n <span class="hl opt">*</span> <span class="hl kwa">sizeof</span><span class="hl opt">(</span><span class="hl kwb">double</span><span class="hl opt">));</span>
   tmp <span class="hl opt">=</span> <span class="hl kwd">malloc</span><span class="hl opt">(</span>n <span class="hl opt">*</span> <span class="hl kwa">sizeof</span><span class="hl opt">(</span><span class="hl kwb">double</span><span class="hl opt">));</span>

   <span class="hl kwb">int</span> i<span class="hl opt">;</span>
   <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> n<span class="hl opt">;</span> i<span class="hl opt">++)</span> u<span class="hl opt">[</span>i<span class="hl opt">] =</span> <span class="hl num">1</span><span class="hl opt">;</span>
   <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> <span class="hl num">10</span><span class="hl opt">;</span> i<span class="hl opt">++) {</span>
      <span class="hl kwd">mult_AtAv</span><span class="hl opt">(</span>u<span class="hl opt">,</span> v<span class="hl opt">,</span> n<span class="hl opt">);</span>
      <span class="hl kwd">mult_AtAv</span><span class="hl opt">(</span>v<span class="hl opt">,</span> u<span class="hl opt">,</span> n<span class="hl opt">);</span>
   <span class="hl opt">}</span>

   <span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;%.9f</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> <span class="hl kwd">sqrt</span><span class="hl opt">(</span><span class="hl kwd">dot</span><span class="hl opt">(</span>u<span class="hl opt">,</span>v<span class="hl opt">,</span> n<span class="hl opt">) /</span> <span class="hl kwd">dot</span><span class="hl opt">(</span>v<span class="hl opt">,</span>v<span class="hl opt">,</span>n<span class="hl opt">)));</span>

   <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
