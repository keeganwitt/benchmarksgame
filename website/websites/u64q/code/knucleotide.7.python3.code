<span class="hl slc"># The Computer Language Benchmarks Game</span>
<span class="hl slc"># http://shootout.alioth.debian.org/</span>
<span class="hl slc">#</span>
<span class="hl slc"># contributed by Jeroen Dirks</span>
<span class="hl slc"># added multiprocessing to submission by Ian Osgood</span>
<span class="hl slc"># in order to use all available cores.</span>
<span class="hl slc"># modified by Paul Ivanov: added the default dictionary to get rid of if</span>
<span class="hl slc"># statement in gen_freq and removed some local variables to improve</span>
<span class="hl slc"># performance.</span>
<span class="hl slc"># modified by Christian Schubert: don't use gen_freq to count longer</span>
<span class="hl slc"># sequences, drastically reduce memory consumption, some other simplifications</span>

<span class="hl slc"># 2to3</span>

<span class="hl kwa">from</span> sys <span class="hl kwa">import</span> stdin
<span class="hl kwa">from</span> multiprocessing <span class="hl kwa">import</span> Pool
<span class="hl kwa">from</span> collections <span class="hl kwa">import</span> defaultdict

<span class="hl kwa">def</span> <span class="hl kwd">gen_freq</span><span class="hl sym">(</span>seq<span class="hl sym">,</span> frame<span class="hl sym">,</span> freqs<span class="hl sym">):</span>
    <span class="hl kwa">for</span> ii <span class="hl kwa">in</span> <span class="hl kwb">range</span><span class="hl sym">(</span><span class="hl kwb">len</span><span class="hl sym">(</span>seq<span class="hl sym">)+</span><span class="hl num">1</span><span class="hl sym">-</span>frame<span class="hl sym">):</span>
        freqs<span class="hl sym">[</span>seq<span class="hl sym">[</span>ii<span class="hl sym">:</span>ii<span class="hl sym">+</span>frame<span class="hl sym">]] +=</span> <span class="hl num">1</span>
    <span class="hl kwa">return</span> ii<span class="hl sym">+</span><span class="hl num">1</span>

<span class="hl kwa">def</span> <span class="hl kwd">sort_seq</span><span class="hl sym">(</span>seq<span class="hl sym">,</span> length<span class="hl sym">):</span>
    freqs <span class="hl sym">=</span> <span class="hl kwd">defaultdict</span><span class="hl sym">(</span><span class="hl kwb">int</span><span class="hl sym">)</span>
    n <span class="hl sym">=</span> <span class="hl kwd">gen_freq</span><span class="hl sym">(</span>seq<span class="hl sym">,</span> length<span class="hl sym">,</span> freqs<span class="hl sym">)</span>
    l <span class="hl sym">=</span> <span class="hl kwb">sorted</span><span class="hl sym">(</span><span class="hl kwb">list</span><span class="hl sym">(</span>freqs<span class="hl sym">.</span><span class="hl kwd">items</span><span class="hl sym">()),</span> reverse<span class="hl sym">=</span><span class="hl kwa">True</span><span class="hl sym">,</span> key<span class="hl sym">=</span><span class="hl kwa">lambda</span> seq_freq<span class="hl sym">: (</span>seq_freq<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">],</span>seq_freq<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]))</span>
    <span class="hl kwa">return</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl sym">.</span><span class="hl kwd">join</span><span class="hl sym">(</span><span class="hl str">&quot;%s %.3f&quot;</span> <span class="hl sym">% (</span>st<span class="hl sym">,</span> <span class="hl num">100.0</span><span class="hl sym">*</span>fr<span class="hl sym">/</span>n<span class="hl sym">)</span> <span class="hl kwa">for</span> st<span class="hl sym">,</span>fr <span class="hl kwa">in</span> l<span class="hl sym">) +</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span>

<span class="hl kwa">def</span> <span class="hl kwd">test_process</span><span class="hl sym">(</span>key<span class="hl sym">):</span>
    <span class="hl kwa">if</span> key <span class="hl kwa">in</span> <span class="hl sym">[</span><span class="hl str">&quot;1&quot;</span><span class="hl sym">,</span><span class="hl str">&quot;2&quot;</span><span class="hl sym">]:</span>
        <span class="hl kwa">return</span> <span class="hl kwd">sort_seq</span><span class="hl sym">(</span>seq<span class="hl sym">,</span> <span class="hl kwb">int</span><span class="hl sym">(</span>key<span class="hl sym">))</span>
    <span class="hl kwa">else</span><span class="hl sym">:</span>
        f <span class="hl sym">=</span> <span class="hl kwb">len</span><span class="hl sym">(</span>key<span class="hl sym">)</span>
        n <span class="hl sym">=</span> <span class="hl kwb">sum</span><span class="hl sym">(</span>seq<span class="hl sym">[</span>ii<span class="hl sym">:</span>ii<span class="hl sym">+</span>f<span class="hl sym">]==</span>key <span class="hl kwa">for</span> ii <span class="hl kwa">in</span> <span class="hl kwb">range</span><span class="hl sym">(</span><span class="hl kwb">len</span><span class="hl sym">(</span>seq<span class="hl sym">)+</span><span class="hl num">1</span><span class="hl sym">-</span>f<span class="hl sym">))</span>
        <span class="hl kwa">return</span> <span class="hl str">&quot;%d</span><span class="hl esc">\t</span><span class="hl str">%s&quot;</span> <span class="hl sym">% (</span>n<span class="hl sym">,</span> key<span class="hl sym">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">readSeq</span><span class="hl sym">():</span>
    <span class="hl kwa">for</span> line <span class="hl kwa">in</span> stdin<span class="hl sym">:</span>
        <span class="hl kwa">if</span> line<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">:</span><span class="hl num">3</span><span class="hl sym">].</span><span class="hl kwd">startswith</span><span class="hl sym">(</span><span class="hl str">&quot;&gt;TH&quot;</span><span class="hl sym">):</span>
            <span class="hl kwa">break</span>
    seq <span class="hl sym">= []</span>
    <span class="hl kwa">for</span> line <span class="hl kwa">in</span> stdin<span class="hl sym">:</span>
        <span class="hl kwa">if</span> line<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]</span> <span class="hl kwa">in</span> <span class="hl str">&quot;&gt;;&quot;</span><span class="hl sym">:</span>
            <span class="hl kwa">break</span>
        seq<span class="hl sym">.</span><span class="hl kwd">append</span><span class="hl sym">(</span>line<span class="hl sym">[:-</span><span class="hl num">1</span><span class="hl sym">])</span>
    <span class="hl kwa">return</span> <span class="hl str">&quot;&quot;</span><span class="hl sym">.</span><span class="hl kwd">join</span><span class="hl sym">(</span>seq<span class="hl sym">).</span><span class="hl kwd">upper</span><span class="hl sym">()</span>

<span class="hl kwa">if</span> __name__ <span class="hl sym">==</span> <span class="hl str">'__main__'</span><span class="hl sym">:</span>
    seq <span class="hl sym">=</span> <span class="hl kwd">readSeq</span><span class="hl sym">()</span>
    <span class="hl kwa">for</span> line <span class="hl kwa">in</span> <span class="hl kwd">Pool</span><span class="hl sym">().</span><span class="hl kwb">map</span><span class="hl sym">(</span>test_process<span class="hl sym">,</span> <span class="hl str">&quot;1 2 GGT GGTA GGTATT GGTATTTTAATT GGTATTTTAATTTATAGT&quot;</span><span class="hl sym">.</span><span class="hl kwd">split</span><span class="hl sym">()):</span>
        <span class="hl kwa">print</span><span class="hl sym">(</span>line<span class="hl sym">)</span>
