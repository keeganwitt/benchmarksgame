<span class="hl com">(*  The Computer Language Benchmarks Game</span>
<span class="hl com">    http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">    contributed by Jimmy Tang *)</span>

<span class="hl kwa">open</span> <span class="hl kwd">System</span><span class="hl opt">;</span>
<span class="hl kwa">open</span> <span class="hl kwd">System</span><span class="hl opt">.</span><span class="hl kwd">IO</span><span class="hl opt">;</span>

<span class="hl kwa">let</span> <span class="hl kwd">IM</span><span class="hl opt">,</span> <span class="hl kwd">IA</span><span class="hl opt">,</span> <span class="hl kwd">IC</span> <span class="hl opt">=</span> <span class="hl num">139968</span><span class="hl opt">,</span> <span class="hl num">3877</span><span class="hl opt">,</span> <span class="hl num">29573</span>
<span class="hl kwa">let</span> cols<span class="hl opt">,</span> <span class="hl kwd">LUTLEN</span> <span class="hl opt">=</span> <span class="hl num">60</span><span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">&lt;&lt;&lt;</span><span class="hl num">9</span>
<span class="hl kwa">let mutable</span> s <span class="hl opt">=</span> <span class="hl num">42</span>

<span class="hl kwa">let</span> alu <span class="hl opt">=</span> <span class="hl str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG\</span>
<span class="hl str">    GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA\</span>
<span class="hl str">    CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT\</span>
<span class="hl str">    ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA\</span>
<span class="hl str">    GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG\</span>
<span class="hl str">    AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC\</span>
<span class="hl str">    AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span><span class="hl kwd">B</span>
    
<span class="hl kwa">let</span> iubvalues <span class="hl opt">= [</span><span class="hl num">0.27</span><span class="hl opt">;</span> <span class="hl num">0.12</span><span class="hl opt">;</span> <span class="hl num">0.12</span><span class="hl opt">;</span> <span class="hl num">0.27</span><span class="hl opt">] &#64;</span> <span class="hl kwd">List</span><span class="hl opt">.</span>replicate <span class="hl num">12 0.02</span>
<span class="hl kwa">let</span> iub <span class="hl opt">=</span> <span class="hl kwd">Seq</span><span class="hl opt">.</span>zip <span class="hl str">&quot;acgtBDHKMNRSVWY&quot;</span><span class="hl kwd">B</span> iubvalues
<span class="hl kwa">let</span> homosapien <span class="hl opt">= [</span> <span class="hl str">'a'</span><span class="hl kwd">B</span><span class="hl opt">,</span> <span class="hl num">0.3029549426680</span>
                   <span class="hl str">'c'</span><span class="hl kwd">B</span><span class="hl opt">,</span> <span class="hl num">0.1979883004921</span>
                   <span class="hl str">'g'</span><span class="hl kwd">B</span><span class="hl opt">,</span> <span class="hl num">0.1975473066391</span>
                   <span class="hl str">'t'</span><span class="hl kwd">B</span><span class="hl opt">,</span> <span class="hl num">0.3015094502008</span> <span class="hl opt">]</span>

<span class="hl kwa">let</span> os <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">BufferedStream</span><span class="hl opt">(</span><span class="hl kwd">Console</span><span class="hl opt">.</span><span class="hl kwd">OpenStandardOutput</span><span class="hl opt">(),</span> <span class="hl num">1</span><span class="hl opt">&lt;&lt;&lt;</span><span class="hl num">16</span><span class="hl opt">)</span>
<span class="hl kwa">let</span> repeatFasta alu n <span class="hl opt">=</span>
    <span class="hl kwa">let</span> r <span class="hl opt">=</span> <span class="hl kwd">Array</span><span class="hl opt">.</span>length alu
    <span class="hl kwa">let</span> s <span class="hl opt">=</span> <span class="hl kwd">Array</span><span class="hl opt">.</span>concat <span class="hl opt">[</span>alu<span class="hl opt">;</span>alu<span class="hl opt">]</span>
    <span class="hl kwa">for</span> j <span class="hl kwa">in</span> <span class="hl num">0</span><span class="hl opt">..</span>cols<span class="hl opt">..</span>n<span class="hl opt">-</span>cols <span class="hl kwa">do</span>
        os<span class="hl opt">.</span><span class="hl kwd">Write</span><span class="hl opt">(</span>s<span class="hl opt">,</span> j<span class="hl opt">%</span>r<span class="hl opt">,</span> cols<span class="hl opt">)</span>
        os<span class="hl opt">.</span><span class="hl kwd">WriteByte</span><span class="hl opt">(</span><span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl kwd">B</span><span class="hl opt">)</span>
    os<span class="hl opt">.</span><span class="hl kwd">Write</span><span class="hl opt">(</span>s<span class="hl opt">,(</span>n<span class="hl opt">/</span>cols<span class="hl opt">*</span>cols<span class="hl opt">)%</span>r<span class="hl opt">,</span> n <span class="hl opt">%</span> cols<span class="hl opt">)</span>
    <span class="hl kwa">if</span> n<span class="hl opt">%</span>cols <span class="hl opt">&lt;&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span> os<span class="hl opt">.</span><span class="hl kwd">WriteByte</span><span class="hl opt">(</span><span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl kwd">B</span><span class="hl opt">)</span>
    os<span class="hl opt">.</span><span class="hl kwd">Flush</span><span class="hl opt">()</span>

<span class="hl kwa">let</span> randomFasta src n <span class="hl opt">=</span> 
    <span class="hl slc">// cumulative probability for each nucleotide</span>
    <span class="hl kwa">let</span> cumuArray <span class="hl opt">=</span>
        <span class="hl kwa">let</span> f <span class="hl opt">(</span>a<span class="hl opt">,</span>c<span class="hl opt">,</span>d<span class="hl opt">) (</span>x<span class="hl opt">,</span>y<span class="hl opt">) = (</span>x<span class="hl opt">,</span>c<span class="hl opt">+</span>y<span class="hl opt">,</span>d<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)</span>
        src |<span class="hl opt">&gt;</span> <span class="hl kwd">Seq</span><span class="hl opt">.</span>scan f <span class="hl opt">(</span><span class="hl num">0uy</span><span class="hl opt">,</span><span class="hl num">0.0</span><span class="hl opt">,</span><span class="hl num">0</span><span class="hl opt">)</span> |<span class="hl opt">&gt;</span> <span class="hl kwd">Seq</span><span class="hl opt">.</span>toArray
    <span class="hl slc">// lookup table optimization</span>
    <span class="hl kwa">let</span> lut <span class="hl opt">=</span> 
        <span class="hl kwa">let</span> arr <span class="hl opt">=</span> <span class="hl kwd">Array</span><span class="hl opt">.</span>zeroCreate <span class="hl kwd">LUTLEN</span>
        <span class="hl kwa">let mutable</span> j <span class="hl opt">=</span> <span class="hl num">0</span>
        <span class="hl kwa">for</span> key<span class="hl opt">,</span> cum<span class="hl opt">,</span> i <span class="hl kwa">in</span> cumuArray <span class="hl kwa">do</span>
            <span class="hl kwa">let</span> v <span class="hl opt">=</span> j
            <span class="hl kwa">while</span> j <span class="hl opt">&lt;=</span> <span class="hl kwb">int</span><span class="hl opt">(</span><span class="hl kwb">float</span><span class="hl opt">(</span><span class="hl kwd">LUTLEN</span><span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">) *</span> cum<span class="hl opt">)</span> <span class="hl kwa">do</span>
                arr<span class="hl opt">.[</span>j<span class="hl opt">] &lt;-</span> key<span class="hl opt">,</span> i
                j <span class="hl opt">&lt;-</span> j <span class="hl opt">+</span> <span class="hl num">1</span>
            <span class="hl kwa">if</span> j <span class="hl opt">&lt;&gt;</span> v <span class="hl kwa">then</span> arr<span class="hl opt">.[</span>j<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">] &lt;-</span> <span class="hl num">0uy</span><span class="hl opt">,</span> i
        arr
    <span class="hl kwa">let</span> lookup x <span class="hl opt">=</span> 
        <span class="hl kwa">match</span> lut<span class="hl opt">.[</span>x<span class="hl opt">*(</span><span class="hl kwd">LUTLEN</span><span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">)/</span><span class="hl kwd">IM</span><span class="hl opt">]</span> <span class="hl kwa">with</span>
        | <span class="hl num">0uy</span><span class="hl opt">,</span>p <span class="hl opt">-&gt;</span> 
            <span class="hl kwa">let</span> a<span class="hl opt">,</span>b<span class="hl opt">,</span>c <span class="hl opt">=</span> cumuArray<span class="hl opt">.[</span>p<span class="hl opt">]</span>
            <span class="hl kwa">let</span> i<span class="hl opt">,</span>j<span class="hl opt">,</span>k <span class="hl opt">=</span> cumuArray<span class="hl opt">.[</span>p<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">]</span>
            <span class="hl kwa">if</span> <span class="hl kwb">float</span><span class="hl opt">(</span>x<span class="hl opt">)/</span><span class="hl kwb">float</span><span class="hl opt">(</span><span class="hl kwd">IM</span><span class="hl opt">) &lt;</span> b <span class="hl kwa">then</span> a <span class="hl kwa">else</span> i
        | c<span class="hl opt">,</span>p <span class="hl opt">-&gt;</span> c
    <span class="hl slc">// write output one line at a time</span>
    <span class="hl kwa">let</span> buf <span class="hl opt">=</span> <span class="hl kwd">Array</span><span class="hl opt">.</span>zeroCreate <span class="hl opt">(</span>cols<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)</span>
    <span class="hl kwa">for</span> x <span class="hl kwa">in</span> n<span class="hl opt">..(-</span>cols<span class="hl opt">).</span><span class="hl num">.1</span> <span class="hl kwa">do</span>
        <span class="hl kwa">let</span> e <span class="hl opt">=</span> <span class="hl kwa">if</span> x <span class="hl opt">&lt;</span> cols <span class="hl kwa">then</span> x <span class="hl kwa">else</span> cols
        buf<span class="hl opt">.[</span>e<span class="hl opt">] &lt;-</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl kwd">B</span>
        <span class="hl kwa">for</span> y <span class="hl kwa">in</span> <span class="hl num">0</span><span class="hl opt">..</span>e<span class="hl opt">-</span><span class="hl num">1</span> <span class="hl kwa">do</span> 
            s <span class="hl opt">&lt;- (</span>s<span class="hl opt">*</span><span class="hl kwd">IA</span> <span class="hl opt">+</span> <span class="hl kwd">IC</span><span class="hl opt">)%</span><span class="hl kwd">IM</span>
            buf<span class="hl opt">.[</span>y<span class="hl opt">] &lt;-</span> lookup s
        os<span class="hl opt">.</span><span class="hl kwd">Write</span><span class="hl opt">(</span>buf<span class="hl opt">,</span><span class="hl num">0</span><span class="hl opt">,</span>e<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)</span>
    os<span class="hl opt">.</span><span class="hl kwd">Flush</span><span class="hl opt">()</span>

<span class="hl opt">[&lt;</span><span class="hl kwd">EntryPoint</span><span class="hl opt">&gt;]</span>
<span class="hl kwa">let</span> main args <span class="hl opt">=</span>
    <span class="hl kwa">let</span> n <span class="hl opt">=</span> <span class="hl kwa">try</span> <span class="hl kwb">int</span> args<span class="hl opt">.[</span><span class="hl num">0</span><span class="hl opt">]</span> <span class="hl kwa">with</span> _ <span class="hl opt">-&gt;</span> <span class="hl num">2500000</span><span class="hl opt">;</span>
    printfn <span class="hl str">&quot;&gt;ONE Homo sapiens alu&quot;</span>
    repeatFasta alu <span class="hl opt">(</span><span class="hl num">2</span><span class="hl opt">*</span>n<span class="hl opt">)</span>
    printfn <span class="hl str">&quot;&gt;TWO IUB ambiguity codes&quot;</span>
    randomFasta iub <span class="hl opt">(</span><span class="hl num">3</span><span class="hl opt">*</span>n<span class="hl opt">)</span>
    printfn <span class="hl str">&quot;&gt;THREE Homo sapiens frequency&quot;</span>
    randomFasta homosapien <span class="hl opt">(</span><span class="hl num">5</span><span class="hl opt">*</span>n<span class="hl opt">)</span>
    <span class="hl num">0</span>
