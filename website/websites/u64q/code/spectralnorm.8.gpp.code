<span class="hl slc">// The Computer Language Benchmarks Game</span>
<span class="hl slc">// http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">//</span>
<span class="hl slc">// Original C contributed by Sebastien Loisel</span>
<span class="hl slc">// Conversion to C++ by Jon Harrop</span>
<span class="hl slc">// OpenMP parallelize by The Anh Tran</span>
<span class="hl slc">// Add SSE by The Anh Tran</span>

<span class="hl slc">// Fastest with this flag: -Os</span>
<span class="hl slc">// g++ -pipe -Os -fomit-frame-pointer -march=native -fopenmp -mfpmath=sse -msse2 ./spec.c++ -o ./spec.run</span>

<span class="hl ppc">#include &lt;cmath&gt;</span>
<span class="hl ppc">#include &lt;cstdlib&gt;</span>
<span class="hl ppc">#include &lt;cstdio&gt;</span>
<span class="hl ppc">#include &lt;sched.h&gt;</span>
<span class="hl ppc">#include &lt;omp.h&gt;</span>


<span class="hl slc">// define SIMD data type. 2 doubles are packed in 1 XMM register</span>
<span class="hl kwc">typedef</span> <span class="hl kwb">double</span> v2dt <span class="hl kwd">__attribute__</span><span class="hl opt">((</span><span class="hl kwd">vector_size</span><span class="hl opt">(</span><span class="hl num">16</span><span class="hl opt">)));</span>
v2dt <span class="hl kwb">const</span> v1 <span class="hl opt">= {</span><span class="hl num">1.0</span><span class="hl opt">,</span> <span class="hl num">1.0</span><span class="hl opt">};</span>


<span class="hl kwb">struct</span> Param
<span class="hl opt">{</span>
   <span class="hl kwb">union</span>
   <span class="hl opt">{</span>
      <span class="hl kwb">double</span><span class="hl opt">*</span> u<span class="hl opt">;</span>      <span class="hl slc">// source</span>
      v2dt<span class="hl opt">*</span>   xmm_u<span class="hl opt">;</span>
   <span class="hl opt">};</span>

   <span class="hl kwb">union</span>
   <span class="hl opt">{</span>
      <span class="hl kwb">double</span><span class="hl opt">*</span> tmp<span class="hl opt">;</span>   <span class="hl slc">// temporary</span>
      v2dt<span class="hl opt">*</span>   xmm_tmp<span class="hl opt">;</span>
   <span class="hl opt">};</span>

   <span class="hl kwb">union</span>
   <span class="hl opt">{</span>
      <span class="hl kwb">double</span><span class="hl opt">*</span> v<span class="hl opt">;</span>         <span class="hl slc">// destination</span>
      v2dt<span class="hl opt">*</span>   xmm_v<span class="hl opt">;</span>
   <span class="hl opt">};</span>

   <span class="hl kwb">int</span>    length<span class="hl opt">;</span>         <span class="hl slc">// source/desti vec's length</span>
   <span class="hl kwb">int</span>    half_length<span class="hl opt">;</span>

   <span class="hl kwb">int</span>    r_begin<span class="hl opt">;</span>      <span class="hl slc">// working range of each thread</span>
   <span class="hl kwb">int</span>    r_end<span class="hl opt">;</span>

   <span class="hl kwb">double</span>   vBv<span class="hl opt">;</span>
   <span class="hl kwb">double</span>   vv<span class="hl opt">;</span>
<span class="hl opt">};</span>


<span class="hl slc">// Return:   1.0 / (i + j) * (i + j +1) / 2 + i + 1;</span>
<span class="hl kwb">double</span>
<span class="hl kwd">eval_A</span><span class="hl opt">(</span><span class="hl kwb">int</span> i<span class="hl opt">,</span> <span class="hl kwb">int</span> j<span class="hl opt">)</span>
<span class="hl opt">{</span>
   <span class="hl kwb">int</span> d <span class="hl opt">= (((</span>i<span class="hl opt">+</span>j<span class="hl opt">) * (</span>i<span class="hl opt">+</span>j<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)) &gt;&gt;</span> <span class="hl num">1</span><span class="hl opt">) +</span> i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">;</span>

   <span class="hl kwa">return</span> <span class="hl num">1.0</span> <span class="hl opt">/</span> d<span class="hl opt">;</span>
<span class="hl opt">}</span>


<span class="hl slc">// Return: 2 doubles in xmm register [double1, double2]</span>
<span class="hl slc">//      double1 = 1.0 / (i + j) * (i + j +1) / 2 + i + 1;</span>
<span class="hl slc">//      double2 = 1.0 / (i+1 + j) * (i+1 + j +1) / 2 + i+1 + 1;</span>
<span class="hl slc">//   Or:</span>
<span class="hl slc">//      double2 = 1.0 / (i + j+1) * (i + j+1 +1) / 2 + i + 1;</span>
<span class="hl kwc">template</span><span class="hl opt">&lt;</span><span class="hl kwb">bool</span> inc_i<span class="hl opt">&gt;</span>
v2dt
<span class="hl kwd">eval_A_xmm</span><span class="hl opt">(</span><span class="hl kwb">int</span> i<span class="hl opt">,</span> <span class="hl kwb">int</span> j<span class="hl opt">)</span>
<span class="hl opt">{</span>
   <span class="hl kwa">if</span> <span class="hl opt">(</span>inc_i<span class="hl opt">)</span>
      i <span class="hl opt">&lt;&lt;=</span> <span class="hl num">1</span><span class="hl opt">;</span>
   <span class="hl kwa">else</span>
      j <span class="hl opt">&lt;&lt;=</span> <span class="hl num">1</span><span class="hl opt">;</span>

   <span class="hl kwb">int</span> d1 <span class="hl opt">= (((</span>i<span class="hl opt">+</span>j<span class="hl opt">) * (</span>i<span class="hl opt">+</span>j<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)) &gt;&gt;</span> <span class="hl num">1</span><span class="hl opt">) +</span> i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">;</span>
   <span class="hl kwb">int</span> d2 <span class="hl opt">= (((</span>i<span class="hl opt">+</span><span class="hl num">1</span> <span class="hl opt">+</span>j<span class="hl opt">) * (</span>i<span class="hl opt">+</span><span class="hl num">1</span> <span class="hl opt">+</span>j<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)) &gt;&gt;</span> <span class="hl num">1</span><span class="hl opt">) +</span> i <span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">;</span>

   <span class="hl kwa">if</span> <span class="hl opt">(</span>inc_i<span class="hl opt">)</span>
      d2 <span class="hl opt">+=</span> <span class="hl num">1</span><span class="hl opt">;</span>

   v2dt r <span class="hl opt">= {</span>d1<span class="hl opt">,</span> d2<span class="hl opt">};</span>
   <span class="hl kwa">return</span> v1 <span class="hl opt">/</span> r<span class="hl opt">;</span>
<span class="hl opt">}</span>


<span class="hl kwb">double</span>
<span class="hl kwd">hz_add</span><span class="hl opt">(</span>v2dt x<span class="hl opt">)</span>
<span class="hl opt">{</span>
   <span class="hl kwb">double const</span><span class="hl opt">*</span> val <span class="hl opt">=</span> <span class="hl kwa">reinterpret_cast</span><span class="hl opt">&lt;</span><span class="hl kwb">double const</span><span class="hl opt">*&gt;(&amp;</span>x<span class="hl opt">);</span>
   <span class="hl kwa">return</span> val<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] +</span> val<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">];</span>
<span class="hl opt">}</span>


<span class="hl kwb">void</span>
<span class="hl kwd">eval_A_times_u</span> <span class="hl opt">(</span>Param <span class="hl kwb">const</span> <span class="hl opt">&amp;</span>p<span class="hl opt">)</span>
<span class="hl opt">{</span>
   <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> p<span class="hl opt">.</span>r_begin<span class="hl opt">,</span> ie <span class="hl opt">=</span> p<span class="hl opt">.</span>r_end<span class="hl opt">;</span> i <span class="hl opt">&lt;</span> ie<span class="hl opt">; ++</span>i<span class="hl opt">)</span>
   <span class="hl opt">{</span>
      v2dt sum <span class="hl opt">= {</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">};</span>

      <span class="hl slc">// xmm = 2 doubles =&gt; index [0..length/2)</span>
      <span class="hl kwb">int</span> j <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
      <span class="hl kwa">for</span> <span class="hl opt">(;</span> j <span class="hl opt">&lt;</span> p<span class="hl opt">.</span>half_length<span class="hl opt">; ++</span>j<span class="hl opt">)</span>
         sum <span class="hl opt">+=</span> eval_A_xmm<span class="hl opt">&lt;</span><span class="hl kwa">false</span><span class="hl opt">&gt;(</span>i<span class="hl opt">,</span> j<span class="hl opt">) *</span> p<span class="hl opt">.</span>xmm_u<span class="hl opt">[</span>j<span class="hl opt">];</span>

      p<span class="hl opt">.</span>tmp<span class="hl opt">[</span>i<span class="hl opt">] =</span> <span class="hl kwd">hz_add</span><span class="hl opt">(</span>sum<span class="hl opt">);</span>

      <span class="hl slc">// If source vector is odd size. This should be called &lt;= 1 time</span>
      <span class="hl kwa">for</span> <span class="hl opt">(</span>j <span class="hl opt">=</span> j<span class="hl opt">*</span><span class="hl num">2</span><span class="hl opt">;</span> j <span class="hl opt">&lt;</span> p<span class="hl opt">.</span>length<span class="hl opt">; ++</span>j<span class="hl opt">)</span>
         p<span class="hl opt">.</span>tmp<span class="hl opt">[</span>i<span class="hl opt">] +=</span> <span class="hl kwd">eval_A</span><span class="hl opt">(</span>i<span class="hl opt">,</span> j<span class="hl opt">) *</span> p<span class="hl opt">.</span>u<span class="hl opt">[</span>j<span class="hl opt">];</span>
   <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl kwb">void</span>
<span class="hl kwd">eval_At_times_u</span><span class="hl opt">(</span>Param <span class="hl kwb">const</span> <span class="hl opt">&amp;</span>p<span class="hl opt">)</span>
<span class="hl opt">{</span>
   <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> p<span class="hl opt">.</span>r_begin<span class="hl opt">,</span> ie <span class="hl opt">=</span> p<span class="hl opt">.</span>r_end<span class="hl opt">;</span> i <span class="hl opt">&lt;</span> ie<span class="hl opt">; ++</span>i<span class="hl opt">)</span>
   <span class="hl opt">{</span>
      v2dt sum <span class="hl opt">= {</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">};</span>

      <span class="hl kwb">int</span> j <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
      <span class="hl kwa">for</span> <span class="hl opt">(;</span> j <span class="hl opt">&lt;</span> p<span class="hl opt">.</span>half_length<span class="hl opt">; ++</span>j<span class="hl opt">)</span>
         sum <span class="hl opt">+=</span> eval_A_xmm<span class="hl opt">&lt;</span><span class="hl kwa">true</span><span class="hl opt">&gt;(</span>j<span class="hl opt">,</span> i<span class="hl opt">) *</span> p<span class="hl opt">.</span>xmm_tmp<span class="hl opt">[</span>j<span class="hl opt">];</span>

      p<span class="hl opt">.</span>v<span class="hl opt">[</span>i<span class="hl opt">] =</span> <span class="hl kwd">hz_add</span><span class="hl opt">(</span>sum<span class="hl opt">);</span>

      <span class="hl kwa">for</span> <span class="hl opt">(</span>j <span class="hl opt">=</span> j<span class="hl opt">*</span><span class="hl num">2</span><span class="hl opt">;</span> j <span class="hl opt">&lt;</span> p<span class="hl opt">.</span>length<span class="hl opt">; ++</span>j<span class="hl opt">)</span>
         p<span class="hl opt">.</span>v<span class="hl opt">[</span>i<span class="hl opt">] +=</span> <span class="hl kwd">eval_A</span><span class="hl opt">(</span>j<span class="hl opt">,</span> i<span class="hl opt">) *</span> p<span class="hl opt">.</span>tmp<span class="hl opt">[</span>j<span class="hl opt">];</span>
   <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl slc">// Each thread modifies its portion in destination vector</span>
<span class="hl slc">// -&gt; barrier needed to sync access</span>
<span class="hl kwb">void</span>
<span class="hl kwd">eval_AtA_times_u</span><span class="hl opt">(</span>Param <span class="hl kwb">const</span> <span class="hl opt">&amp;</span>p<span class="hl opt">)</span>
<span class="hl opt">{</span>
   <span class="hl kwd">eval_A_times_u</span><span class="hl opt">(</span> p <span class="hl opt">);</span>
   <span class="hl ppc">#pragma omp barrier</span>

   <span class="hl kwd">eval_At_times_u</span><span class="hl opt">(</span> p <span class="hl opt">);</span>
   <span class="hl ppc">#pragma omp barrier</span>
<span class="hl opt">}</span>

<span class="hl kwb">void</span>
<span class="hl kwd">final_sum</span><span class="hl opt">(</span>Param<span class="hl opt">&amp;</span> p<span class="hl opt">)</span>
<span class="hl opt">{</span>
   v2dt sum_vBv   <span class="hl opt">= {</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">0</span><span class="hl opt">};</span>
   v2dt sum_vv      <span class="hl opt">= {</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">0</span><span class="hl opt">};</span>

   <span class="hl kwb">int</span> i <span class="hl opt">=</span> p<span class="hl opt">.</span>r_begin <span class="hl opt">/</span><span class="hl num">2</span><span class="hl opt">;</span>
   <span class="hl kwb">int</span> ie <span class="hl opt">=</span> p<span class="hl opt">.</span>r_end <span class="hl opt">/</span><span class="hl num">2</span><span class="hl opt">;</span>

   <span class="hl kwa">for</span> <span class="hl opt">(;</span> i <span class="hl opt">&lt;</span> ie<span class="hl opt">; ++</span>i<span class="hl opt">)</span>
   <span class="hl opt">{</span>
      sum_vv   <span class="hl opt">+=</span> p<span class="hl opt">.</span>xmm_v<span class="hl opt">[</span>i<span class="hl opt">] *</span> p<span class="hl opt">.</span>xmm_v<span class="hl opt">[</span>i<span class="hl opt">];</span>
      sum_vBv   <span class="hl opt">+=</span> p<span class="hl opt">.</span>xmm_u<span class="hl opt">[</span>i<span class="hl opt">] *</span> p<span class="hl opt">.</span>xmm_v<span class="hl opt">[</span>i<span class="hl opt">];</span>
   <span class="hl opt">}</span>

   p<span class="hl opt">.</span>vBv   <span class="hl opt">=</span> <span class="hl kwd">hz_add</span><span class="hl opt">(</span>sum_vBv<span class="hl opt">);</span>
   p<span class="hl opt">.</span>vv   <span class="hl opt">=</span> <span class="hl kwd">hz_add</span><span class="hl opt">(</span>sum_vv<span class="hl opt">);</span>

   <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">=</span> i<span class="hl opt">*</span><span class="hl num">2</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> p<span class="hl opt">.</span>r_end<span class="hl opt">; ++</span>i<span class="hl opt">)</span>
   <span class="hl opt">{</span>
      p<span class="hl opt">.</span>vBv   <span class="hl opt">+=</span> p<span class="hl opt">.</span>u<span class="hl opt">[</span>i<span class="hl opt">] *</span> p<span class="hl opt">.</span>v<span class="hl opt">[</span>i<span class="hl opt">];</span>
      p<span class="hl opt">.</span>vv   <span class="hl opt">+=</span> p<span class="hl opt">.</span>v<span class="hl opt">[</span>i<span class="hl opt">] *</span> p<span class="hl opt">.</span>v<span class="hl opt">[</span>i<span class="hl opt">];</span>
   <span class="hl opt">}</span>
<span class="hl opt">}</span>


<span class="hl kwb">void</span>
<span class="hl kwd">fill_10</span><span class="hl opt">(</span>Param <span class="hl kwb">const</span><span class="hl opt">&amp;</span> p<span class="hl opt">)</span>
<span class="hl opt">{</span>
   <span class="hl kwb">int</span> i <span class="hl opt">=</span> p<span class="hl opt">.</span>r_begin <span class="hl opt">/</span><span class="hl num">2</span><span class="hl opt">;</span>
   <span class="hl kwb">int</span> ie <span class="hl opt">=</span> p<span class="hl opt">.</span>r_end <span class="hl opt">/</span><span class="hl num">2</span><span class="hl opt">;</span>

   <span class="hl kwa">for</span> <span class="hl opt">(;</span> i <span class="hl opt">&lt;</span> ie<span class="hl opt">; ++</span>i<span class="hl opt">)</span>
      p<span class="hl opt">.</span>xmm_u<span class="hl opt">[</span>i<span class="hl opt">] =</span> v1<span class="hl opt">;</span>

   <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">=</span> i<span class="hl opt">*</span><span class="hl num">2</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> p<span class="hl opt">.</span>r_end<span class="hl opt">; ++</span>i<span class="hl opt">)</span>
      p<span class="hl opt">.</span>u<span class="hl opt">[</span>i<span class="hl opt">] =</span> <span class="hl num">1.0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>


<span class="hl slc">// Search for appropriate number of threads to spawn</span>
<span class="hl kwb">int</span>
<span class="hl kwd">GetThreadCount</span><span class="hl opt">()</span>
<span class="hl opt">{</span>
   cpu_set_t cs<span class="hl opt">;</span>
   <span class="hl kwd">CPU_ZERO</span><span class="hl opt">(&amp;</span>cs<span class="hl opt">);</span>
   <span class="hl kwd">sched_getaffinity</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl kwa">sizeof</span><span class="hl opt">(</span>cs<span class="hl opt">), &amp;</span>cs<span class="hl opt">);</span>

   <span class="hl kwb">int</span> count <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
   <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> CPU_SETSIZE<span class="hl opt">; ++</span>i<span class="hl opt">)</span>
   <span class="hl opt">{</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">CPU_ISSET</span><span class="hl opt">(</span>i<span class="hl opt">, &amp;</span>cs<span class="hl opt">))</span>
         <span class="hl opt">++</span>count<span class="hl opt">;</span>
   <span class="hl opt">}</span>
   <span class="hl kwa">return</span> count<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwb">double</span>
<span class="hl kwd">spectral_game</span><span class="hl opt">(</span><span class="hl kwb">int</span> N<span class="hl opt">)</span>
<span class="hl opt">{</span>
   <span class="hl slc">// Align L2 cache line</span>
   <span class="hl kwd">__attribute__</span><span class="hl opt">((</span><span class="hl kwd">aligned</span><span class="hl opt">(</span><span class="hl num">64</span><span class="hl opt">)))</span> <span class="hl kwb">double</span> u<span class="hl opt">[</span>N<span class="hl opt">];</span>
   <span class="hl kwd">__attribute__</span><span class="hl opt">((</span><span class="hl kwd">aligned</span><span class="hl opt">(</span><span class="hl num">64</span><span class="hl opt">)))</span> <span class="hl kwb">double</span> tmp<span class="hl opt">[</span>N<span class="hl opt">];</span>
   <span class="hl kwd">__attribute__</span><span class="hl opt">((</span><span class="hl kwd">aligned</span><span class="hl opt">(</span><span class="hl num">64</span><span class="hl opt">)))</span> <span class="hl kwb">double</span> v<span class="hl opt">[</span>N<span class="hl opt">];</span>

   <span class="hl kwb">double</span> vBv   <span class="hl opt">=</span> <span class="hl num">0.0</span><span class="hl opt">;</span>
   <span class="hl kwb">double</span> vv   <span class="hl opt">=</span> <span class="hl num">0.0</span><span class="hl opt">;</span>

   <span class="hl ppc">#pragma omp parallel default(shared) num_threads(GetThreadCount())</span>
   <span class="hl opt">{</span>
      <span class="hl slc">// this block will be executed by NUM_THREADS</span>
      <span class="hl slc">// variable declared in this block is private for each thread</span>
      <span class="hl kwb">int</span> threadid   <span class="hl opt">=</span> <span class="hl kwd">omp_get_thread_num</span><span class="hl opt">();</span>
      <span class="hl kwb">int</span> threadcount   <span class="hl opt">=</span> <span class="hl kwd">omp_get_num_threads</span><span class="hl opt">();</span>
      <span class="hl kwb">int</span> chunk      <span class="hl opt">=</span> N <span class="hl opt">/</span> threadcount<span class="hl opt">;</span>

      Param my_param<span class="hl opt">;</span>

      my_param<span class="hl opt">.</span>u             <span class="hl opt">=</span> u<span class="hl opt">;</span>
      my_param<span class="hl opt">.</span>tmp         <span class="hl opt">=</span> tmp<span class="hl opt">;</span>
      my_param<span class="hl opt">.</span>v             <span class="hl opt">=</span> v<span class="hl opt">;</span>

      my_param<span class="hl opt">.</span>length         <span class="hl opt">=</span> N<span class="hl opt">;</span>
      my_param<span class="hl opt">.</span>half_length   <span class="hl opt">=</span> N <span class="hl opt">/</span><span class="hl num">2</span><span class="hl opt">;</span>

      <span class="hl slc">// calculate each thread's working range [r1 .. r2) =&gt; static schedule</span>
      my_param<span class="hl opt">.</span>r_begin   <span class="hl opt">=</span> threadid <span class="hl opt">*</span> chunk<span class="hl opt">;</span>
      my_param<span class="hl opt">.</span>r_end      <span class="hl opt">= (</span>threadid <span class="hl opt">&lt; (</span>threadcount <span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">))</span> ? <span class="hl opt">(</span>my_param<span class="hl opt">.</span>r_begin <span class="hl opt">+</span> chunk<span class="hl opt">) :</span> N<span class="hl opt">;</span>


      <span class="hl kwd">fill_10</span><span class="hl opt">(</span>my_param<span class="hl opt">);</span>
      <span class="hl ppc">#pragma omp barrier</span>

      <span class="hl slc">// Evaluating</span>
      <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> ite <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> ite <span class="hl opt">&lt;</span> <span class="hl num">10</span><span class="hl opt">; ++</span>ite<span class="hl opt">)</span>
      <span class="hl opt">{</span>
         my_param<span class="hl opt">.</span>u <span class="hl opt">=</span> u<span class="hl opt">;</span>   <span class="hl slc">// source is u</span>
         my_param<span class="hl opt">.</span>v <span class="hl opt">=</span> v<span class="hl opt">;</span>   <span class="hl slc">// desti is v</span>
         <span class="hl kwd">eval_AtA_times_u</span><span class="hl opt">(</span>my_param<span class="hl opt">);</span>

         my_param<span class="hl opt">.</span>u <span class="hl opt">=</span> v<span class="hl opt">;</span> <span class="hl slc">// source is v</span>
         my_param<span class="hl opt">.</span>v <span class="hl opt">=</span> u<span class="hl opt">;</span> <span class="hl slc">// desti is u</span>
         <span class="hl kwd">eval_AtA_times_u</span><span class="hl opt">(</span>my_param<span class="hl opt">);</span>
      <span class="hl opt">}</span>

      my_param<span class="hl opt">.</span>u <span class="hl opt">=</span> u<span class="hl opt">;</span>
      my_param<span class="hl opt">.</span>v <span class="hl opt">=</span> v<span class="hl opt">;</span>
      <span class="hl kwd">final_sum</span><span class="hl opt">(</span>my_param<span class="hl opt">);</span>

      <span class="hl ppc">#pragma omp critical</span>
      <span class="hl opt">{</span>
         vBv   <span class="hl opt">+=</span> my_param<span class="hl opt">.</span>vBv<span class="hl opt">;</span>
         vv   <span class="hl opt">+=</span> my_param<span class="hl opt">.</span>vv<span class="hl opt">;</span>
      <span class="hl opt">}</span>
   <span class="hl opt">}</span> <span class="hl slc">// parallel region</span>

   <span class="hl kwa">return</span> <span class="hl kwd">sqrt</span><span class="hl opt">(</span> vBv<span class="hl opt">/</span>vv <span class="hl opt">);</span>
<span class="hl opt">}</span>


<span class="hl kwb">int</span>
<span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span> <span class="hl opt">*</span>argv<span class="hl opt">[])</span>
<span class="hl opt">{</span>
   <span class="hl kwb">int</span> N <span class="hl opt">= ((</span>argc <span class="hl opt">&gt;=</span> <span class="hl num">2</span><span class="hl opt">)</span> ? <span class="hl kwd">atoi</span><span class="hl opt">(</span>argv<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">]) :</span> <span class="hl num">2000</span><span class="hl opt">);</span>

   <span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;%.9f</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> <span class="hl kwd">spectral_game</span><span class="hl opt">(</span>N<span class="hl opt">));</span>
   <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>

