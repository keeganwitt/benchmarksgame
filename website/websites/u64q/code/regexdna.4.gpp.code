<span class="hl slc">// The Computer Language Benchmarks Game</span>
<span class="hl slc">// http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">//</span>
<span class="hl slc">// Contributed by The Anh Tran</span>

<span class="hl ppc">#include &lt;omp.h&gt;</span>
<span class="hl ppc">#include &lt;sched.h&gt;</span>
<span class="hl ppc">#include &lt;memory.h&gt;</span>

<span class="hl ppc">#include &lt;cassert&gt;</span>
<span class="hl ppc">#include &lt;cstdio&gt;</span>

<span class="hl ppc">#include &lt;iostream&gt;</span>
<span class="hl ppc">#include &lt;vector&gt;</span>
<span class="hl ppc">#include &lt;iterator&gt;</span>

<span class="hl ppc">#include &lt;boost/format.hpp&gt;</span>
<span class="hl ppc">#include &lt;boost/scoped_array.hpp&gt;</span>
<span class="hl ppc">#include &lt;boost/xpressive/xpressive_static.hpp&gt;</span>


<span class="hl kwa">using namespace</span> boost<span class="hl opt">::</span>xpressive<span class="hl opt">;</span>
<span class="hl kwa">namespace</span> x <span class="hl opt">=</span> boost<span class="hl opt">::</span>xpressive<span class="hl opt">;</span>
<span class="hl kwa">using namespace</span> std<span class="hl opt">;</span>

<span class="hl kwc">typedef</span> <span class="hl kwb">char</span>         Char_T<span class="hl opt">;</span>
<span class="hl kwc">typedef</span> Char_T <span class="hl kwb">const</span><span class="hl opt">*</span>   PChar_T<span class="hl opt">;</span>
<span class="hl kwc">typedef</span> vector<span class="hl opt">&lt;</span>Char_T<span class="hl opt">&gt;</span>   Data_T<span class="hl opt">;</span>

<span class="hl kwc">typedef</span> Data_T<span class="hl opt">::</span>const_iterator         CIte_Data_T<span class="hl opt">;</span>
<span class="hl kwc">typedef</span> back_insert_iterator<span class="hl opt">&lt;</span>Data_T<span class="hl opt">&gt;</span>   OIte_Data_T<span class="hl opt">;</span>

<span class="hl kwc">typedef</span> basic_regex<span class="hl opt">&lt;</span>CIte_Data_T<span class="hl opt">&gt;</span>      Regex_Data_T<span class="hl opt">;</span>



<span class="hl slc">// read all redirected data from stdin</span>
<span class="hl slc">// strip DNA headers and newline characters</span>
<span class="hl kwb">size_t</span> 
<span class="hl kwd">ReadInput_StripHeader</span><span class="hl opt">(</span>   <span class="hl kwb">size_t</span> <span class="hl opt">&amp;</span>file_size<span class="hl opt">,</span> Data_T <span class="hl opt">&amp;</span>output <span class="hl opt">)</span>
<span class="hl opt">{</span>
   <span class="hl slc">// get input size</span>
   file_size <span class="hl opt">=</span> <span class="hl kwd">ftell</span><span class="hl opt">(</span>stdin<span class="hl opt">);</span>
   <span class="hl kwd">fseek</span><span class="hl opt">(</span>stdin<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> SEEK_END<span class="hl opt">);</span>
   file_size <span class="hl opt">=</span> <span class="hl kwd">ftell</span><span class="hl opt">(</span>stdin<span class="hl opt">) -</span> file_size<span class="hl opt">;</span>
   <span class="hl kwd">fseek</span><span class="hl opt">(</span>stdin<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> SEEK_SET<span class="hl opt">);</span>
   file_size <span class="hl opt">/=</span> <span class="hl kwa">sizeof</span><span class="hl opt">(</span>Char_T<span class="hl opt">);</span>


   <span class="hl slc">// load content into memory</span>
   boost<span class="hl opt">::</span>scoped_array<span class="hl opt">&lt;</span>Char_T<span class="hl opt">&gt;</span> <span class="hl kwd">p_src</span><span class="hl opt">(</span><span class="hl kwa">new</span> Char_T<span class="hl opt">[</span>file_size <span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">]);</span>
   <span class="hl opt">{</span>
      <span class="hl kwb">size_t</span> sz <span class="hl opt">=</span> <span class="hl kwd">fread</span><span class="hl opt">(</span>p_src<span class="hl opt">.</span><span class="hl kwd">get</span><span class="hl opt">(),</span> <span class="hl kwa">sizeof</span><span class="hl opt">(</span>Char_T<span class="hl opt">),</span> file_size<span class="hl opt">,</span> stdin<span class="hl opt">);</span>
      <span class="hl kwa">assert</span><span class="hl opt">(</span>sz <span class="hl opt">==</span> file_size<span class="hl opt">);</span>
      p_src<span class="hl opt">[</span>file_size<span class="hl opt">] =</span> <span class="hl num">0</span><span class="hl opt">;</span>
   <span class="hl opt">}</span>

   
   PChar_T p_src_beg <span class="hl opt">=</span> p_src<span class="hl opt">.</span><span class="hl kwd">get</span><span class="hl opt">();</span>
   PChar_T p_src_end <span class="hl opt">=</span> p_src_beg <span class="hl opt">+</span> file_size<span class="hl opt">;</span>
   output<span class="hl opt">.</span><span class="hl kwd">reserve</span> <span class="hl opt">(</span>file_size<span class="hl opt">);</span>

   <span class="hl kwd">regex_replace</span> <span class="hl opt">(</span>   <span class="hl kwd">OIte_Data_T</span><span class="hl opt">(</span>output<span class="hl opt">),</span> 
               p_src_beg<span class="hl opt">,</span> p_src_end<span class="hl opt">,</span> 

               <span class="hl slc">// &quot;&gt;.*\n | \n&quot;</span>
               basic_regex<span class="hl opt">&lt;</span>PChar_T<span class="hl opt">&gt;(</span> <span class="hl kwd">as_xpr</span><span class="hl opt">(</span><span class="hl str">'&gt;'</span><span class="hl opt">) &gt;&gt; *(~</span>_n<span class="hl opt">) &gt;&gt;</span> _n <span class="hl opt">|</span> _n <span class="hl opt">),</span>

               <span class="hl str">&quot;&quot;</span><span class="hl opt">);</span> 

   <span class="hl kwa">return</span> output<span class="hl opt">.</span><span class="hl kwd">size</span><span class="hl opt">();</span>
<span class="hl opt">}</span>



<span class="hl kwb">void</span> 
<span class="hl kwd">Count_Patterns</span><span class="hl opt">(</span>Data_T <span class="hl kwb">const</span><span class="hl opt">&amp;</span> input<span class="hl opt">,</span> string<span class="hl opt">&amp;</span> result<span class="hl opt">)</span>
<span class="hl opt">{</span>
   <span class="hl kwc">typedef</span> std<span class="hl opt">::</span>pair<span class="hl opt">&lt;</span>PChar_T<span class="hl opt">,</span> Regex_Data_T<span class="hl opt">&gt;</span> PReg<span class="hl opt">;</span>
   
   <span class="hl kwb">static</span> PReg <span class="hl kwb">const</span> ptns<span class="hl opt">[] =</span> 
   <span class="hl opt">{</span>
      <span class="hl kwd">PReg</span><span class="hl opt">(</span><span class="hl str">&quot;agggtaaa|tttaccct&quot;</span><span class="hl opt">,</span>   
         <span class="hl kwd">as_xpr</span><span class="hl opt">(</span><span class="hl str">&quot;agggtaaa&quot;</span><span class="hl opt">) |</span> <span class="hl str">&quot;tttaccct&quot;</span>   <span class="hl opt">),</span>

      <span class="hl kwd">PReg</span><span class="hl opt">(</span><span class="hl str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span><span class="hl opt">,</span>   
            <span class="hl opt">(</span>x<span class="hl opt">::</span>set<span class="hl opt">=</span><span class="hl str">'c'</span><span class="hl opt">,</span><span class="hl str">'g'</span><span class="hl opt">,</span><span class="hl str">'t'</span><span class="hl opt">) &gt;&gt;</span> <span class="hl str">&quot;gggtaaa&quot;</span>
         <span class="hl opt">|</span>    <span class="hl str">&quot;tttaccc&quot;</span> <span class="hl opt">&gt;&gt; (</span>x<span class="hl opt">::</span>set<span class="hl opt">=</span><span class="hl str">'a'</span><span class="hl opt">,</span><span class="hl str">'c'</span><span class="hl opt">,</span><span class="hl str">'g'</span><span class="hl opt">)   ),</span>

      <span class="hl kwd">PReg</span><span class="hl opt">(</span><span class="hl str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span><span class="hl opt">,</span>   
            <span class="hl kwd">as_xpr</span><span class="hl opt">(</span><span class="hl str">'a'</span><span class="hl opt">) &gt;&gt; (</span>x<span class="hl opt">::</span>set<span class="hl opt">=</span><span class="hl str">'a'</span><span class="hl opt">,</span><span class="hl str">'c'</span><span class="hl opt">,</span><span class="hl str">'t'</span><span class="hl opt">) &gt;&gt;</span> <span class="hl str">&quot;ggtaaa&quot;</span>
         <span class="hl opt">|</span>   <span class="hl str">&quot;tttacc&quot;</span> <span class="hl opt">&gt;&gt; (</span>x<span class="hl opt">::</span>set<span class="hl opt">=</span><span class="hl str">'a'</span><span class="hl opt">,</span><span class="hl str">'g'</span><span class="hl opt">,</span><span class="hl str">'t'</span><span class="hl opt">) &gt;&gt;</span> <span class="hl str">'t'</span>   <span class="hl opt">),</span>

      <span class="hl kwd">PReg</span><span class="hl opt">(</span><span class="hl str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span><span class="hl opt">,</span>   
            <span class="hl kwd">as_xpr</span><span class="hl opt">(</span><span class="hl str">&quot;ag&quot;</span><span class="hl opt">) &gt;&gt; (</span>x<span class="hl opt">::</span>set<span class="hl opt">=</span><span class="hl str">'a'</span><span class="hl opt">,</span><span class="hl str">'c'</span><span class="hl opt">,</span><span class="hl str">'t'</span><span class="hl opt">) &gt;&gt;</span> <span class="hl str">&quot;gtaaa&quot;</span>
         <span class="hl opt">|</span>   <span class="hl str">&quot;tttac&quot;</span> <span class="hl opt">&gt;&gt; (</span>x<span class="hl opt">::</span>set<span class="hl opt">=</span><span class="hl str">'a'</span><span class="hl opt">,</span><span class="hl str">'g'</span><span class="hl opt">,</span><span class="hl str">'t'</span><span class="hl opt">) &gt;&gt;</span> <span class="hl str">&quot;ct&quot;</span>   <span class="hl opt">),</span>
         
      <span class="hl kwd">PReg</span><span class="hl opt">(</span><span class="hl str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span><span class="hl opt">,</span>   
            <span class="hl kwd">as_xpr</span><span class="hl opt">(</span><span class="hl str">&quot;agg&quot;</span><span class="hl opt">) &gt;&gt; (</span>x<span class="hl opt">::</span>set<span class="hl opt">=</span><span class="hl str">'a'</span><span class="hl opt">,</span><span class="hl str">'c'</span><span class="hl opt">,</span><span class="hl str">'t'</span><span class="hl opt">) &gt;&gt;</span> <span class="hl str">&quot;taaa&quot;</span>
         <span class="hl opt">|</span>   <span class="hl str">&quot;ttta&quot;</span> <span class="hl opt">&gt;&gt; (</span>x<span class="hl opt">::</span>set<span class="hl opt">=</span><span class="hl str">'a'</span><span class="hl opt">,</span><span class="hl str">'g'</span><span class="hl opt">,</span><span class="hl str">'t'</span><span class="hl opt">) &gt;&gt;</span> <span class="hl str">&quot;cct&quot;</span>   <span class="hl opt">),</span>
         
      <span class="hl kwd">PReg</span><span class="hl opt">(</span><span class="hl str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span><span class="hl opt">,</span>   
            <span class="hl kwd">as_xpr</span><span class="hl opt">(</span><span class="hl str">&quot;aggg&quot;</span><span class="hl opt">) &gt;&gt; (</span>x<span class="hl opt">::</span>set<span class="hl opt">=</span><span class="hl str">'a'</span><span class="hl opt">,</span><span class="hl str">'c'</span><span class="hl opt">,</span><span class="hl str">'g'</span><span class="hl opt">) &gt;&gt;</span> <span class="hl str">&quot;aaa&quot;</span>
         <span class="hl opt">|</span>   <span class="hl str">&quot;ttt&quot;</span> <span class="hl opt">&gt;&gt; (</span>x<span class="hl opt">::</span>set<span class="hl opt">=</span><span class="hl str">'c'</span><span class="hl opt">,</span><span class="hl str">'g'</span><span class="hl opt">,</span><span class="hl str">'t'</span><span class="hl opt">) &gt;&gt;</span> <span class="hl str">&quot;ccct&quot;</span>   <span class="hl opt">),</span>
         
      <span class="hl kwd">PReg</span><span class="hl opt">(</span><span class="hl str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span><span class="hl opt">,</span>   
            <span class="hl kwd">as_xpr</span><span class="hl opt">(</span><span class="hl str">&quot;agggt&quot;</span><span class="hl opt">) &gt;&gt; (</span>x<span class="hl opt">::</span>set<span class="hl opt">=</span><span class="hl str">'c'</span><span class="hl opt">,</span><span class="hl str">'g'</span><span class="hl opt">,</span><span class="hl str">'t'</span><span class="hl opt">) &gt;&gt;</span> <span class="hl str">&quot;aa&quot;</span>
         <span class="hl opt">|</span>   <span class="hl str">&quot;tt&quot;</span> <span class="hl opt">&gt;&gt; (</span>x<span class="hl opt">::</span>set<span class="hl opt">=</span><span class="hl str">'a'</span><span class="hl opt">,</span><span class="hl str">'c'</span><span class="hl opt">,</span><span class="hl str">'g'</span><span class="hl opt">) &gt;&gt;</span> <span class="hl str">&quot;accct&quot;</span>   <span class="hl opt">),</span>
         
      <span class="hl kwd">PReg</span><span class="hl opt">(</span><span class="hl str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span><span class="hl opt">,</span>   
            <span class="hl kwd">as_xpr</span><span class="hl opt">(</span><span class="hl str">&quot;agggta&quot;</span><span class="hl opt">) &gt;&gt; (</span>x<span class="hl opt">::</span>set<span class="hl opt">=</span><span class="hl str">'c'</span><span class="hl opt">,</span><span class="hl str">'g'</span><span class="hl opt">,</span><span class="hl str">'t'</span><span class="hl opt">) &gt;&gt;</span> <span class="hl str">'a'</span>   
         <span class="hl opt">|</span>   <span class="hl str">'t'</span> <span class="hl opt">&gt;&gt; (</span>x<span class="hl opt">::</span>set<span class="hl opt">=</span><span class="hl str">'a'</span><span class="hl opt">,</span><span class="hl str">'c'</span><span class="hl opt">,</span><span class="hl str">'g'</span><span class="hl opt">) &gt;&gt;</span> <span class="hl str">&quot;taccct&quot;</span>   <span class="hl opt">),</span>
         
      <span class="hl kwd">PReg</span><span class="hl opt">(</span><span class="hl str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span><span class="hl opt">,</span>   
            <span class="hl kwd">as_xpr</span><span class="hl opt">(</span><span class="hl str">&quot;agggtaa&quot;</span><span class="hl opt">) &gt;&gt; (</span>x<span class="hl opt">::</span>set<span class="hl opt">=</span><span class="hl str">'c'</span><span class="hl opt">,</span><span class="hl str">'g'</span><span class="hl opt">,</span><span class="hl str">'t'</span><span class="hl opt">)</span>
         <span class="hl opt">|   (</span>x<span class="hl opt">::</span>set<span class="hl opt">=</span><span class="hl str">'a'</span><span class="hl opt">,</span><span class="hl str">'c'</span><span class="hl opt">,</span><span class="hl str">'g'</span><span class="hl opt">) &gt;&gt;</span> <span class="hl str">&quot;ttaccct&quot;</span>   <span class="hl opt">)</span>
   <span class="hl opt">};</span>
   <span class="hl kwb">static int const</span> n_ptns <span class="hl opt">=</span> <span class="hl kwa">sizeof</span><span class="hl opt">(</span>ptns<span class="hl opt">) /</span> <span class="hl kwa">sizeof</span><span class="hl opt">(</span>ptns<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">]);</span>
   <span class="hl kwb">static size_t</span> counters<span class="hl opt">[</span>n_ptns<span class="hl opt">] = {</span><span class="hl num">0</span><span class="hl opt">};</span>


   <span class="hl ppc">#pragma omp for schedule(dynamic, 1) nowait</span>
   <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> n_ptns<span class="hl opt">; ++</span>i<span class="hl opt">)</span>
   <span class="hl opt">{</span>
      <span class="hl kwc">typedef</span> regex_iterator<span class="hl opt">&lt;</span>CIte_Data_T<span class="hl opt">&gt;</span> RI_T<span class="hl opt">;</span>

      <span class="hl slc">// static regex</span>
      Regex_Data_T <span class="hl kwb">const</span><span class="hl opt">&amp;</span> <span class="hl kwd">regex</span><span class="hl opt">(</span>ptns<span class="hl opt">[</span>i<span class="hl opt">].</span>second<span class="hl opt">);</span>
      counters<span class="hl opt">[</span>i<span class="hl opt">] =</span> <span class="hl kwd">distance</span><span class="hl opt">(</span>   <span class="hl kwd">RI_T</span><span class="hl opt">(</span>input<span class="hl opt">.</span><span class="hl kwd">begin</span><span class="hl opt">(),</span> input<span class="hl opt">.</span><span class="hl kwd">end</span><span class="hl opt">(),</span> regex<span class="hl opt">),</span> <span class="hl kwd">RI_T</span><span class="hl opt">()   );</span>
   <span class="hl opt">}</span>

   <span class="hl slc">// we want the last thread, reaching this code block, to print result</span>
   <span class="hl kwb">static size_t</span> thread_passed <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
   <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">__sync_add_and_fetch</span><span class="hl opt">(&amp;</span>thread_passed<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">) ==</span> <span class="hl kwa">static_cast</span><span class="hl opt">&lt;</span><span class="hl kwb">size_t</span><span class="hl opt">&gt;(</span><span class="hl kwd">omp_get_num_threads</span><span class="hl opt">()))</span>
   <span class="hl opt">{</span>
      boost<span class="hl opt">::</span>format <span class="hl kwd">format</span><span class="hl opt">(</span><span class="hl str">&quot;%1% %2%</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">);</span>

      <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> n_ptns<span class="hl opt">; ++</span>i<span class="hl opt">)</span>
      <span class="hl opt">{</span>
         format <span class="hl opt">%</span> ptns<span class="hl opt">[</span>i<span class="hl opt">].</span>first <span class="hl opt">%</span> counters<span class="hl opt">[</span>i<span class="hl opt">];</span>
         result <span class="hl opt">+=</span> format<span class="hl opt">.</span><span class="hl kwd">str</span><span class="hl opt">();</span>
      <span class="hl opt">}</span>
      thread_passed <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
   <span class="hl opt">}</span>
<span class="hl opt">}</span>


<span class="hl kwb">struct</span> IUB
<span class="hl opt">{</span>
   PChar_T   iub<span class="hl opt">;</span>
   <span class="hl kwb">int</span>      len<span class="hl opt">;</span>
<span class="hl opt">};</span>

IUB <span class="hl kwb">const</span> iub_table<span class="hl opt">[] =</span> 
<span class="hl opt">{</span>
   <span class="hl opt">{</span><span class="hl num">0</span><span class="hl opt">},</span> 
   <span class="hl opt">{</span><span class="hl str">&quot;(c|g|t)&quot;</span><span class="hl opt">,</span>   <span class="hl num">7</span><span class="hl opt">},</span> 
   <span class="hl opt">{</span><span class="hl num">0</span><span class="hl opt">},</span> 
   <span class="hl opt">{</span><span class="hl str">&quot;(a|g|t)&quot;</span><span class="hl opt">,</span>   <span class="hl num">7</span><span class="hl opt">},</span> 
   <span class="hl opt">{</span><span class="hl num">0</span><span class="hl opt">}, {</span><span class="hl num">0</span><span class="hl opt">}, {</span><span class="hl num">0</span><span class="hl opt">},</span> 
   <span class="hl opt">{</span><span class="hl str">&quot;(a|c|t)&quot;</span><span class="hl opt">,</span>   <span class="hl num">7</span><span class="hl opt">},</span> 
   <span class="hl opt">{</span><span class="hl num">0</span><span class="hl opt">}, {</span><span class="hl num">0</span><span class="hl opt">},</span> 
   <span class="hl opt">{</span><span class="hl str">&quot;(g|t)&quot;</span><span class="hl opt">,</span>   <span class="hl num">5</span><span class="hl opt">},</span> 
   <span class="hl opt">{</span><span class="hl num">0</span><span class="hl opt">},</span> 
   <span class="hl opt">{</span><span class="hl str">&quot;(a|c)&quot;</span><span class="hl opt">,</span>   <span class="hl num">5</span><span class="hl opt">},</span> 
   <span class="hl opt">{</span><span class="hl str">&quot;(a|c|g|t)&quot;</span><span class="hl opt">,</span>   <span class="hl num">9</span><span class="hl opt">},</span> 
   <span class="hl opt">{</span><span class="hl num">0</span><span class="hl opt">}, {</span><span class="hl num">0</span><span class="hl opt">}, {</span><span class="hl num">0</span><span class="hl opt">},</span> 
   <span class="hl opt">{</span><span class="hl str">&quot;(a|g)&quot;</span><span class="hl opt">,</span>   <span class="hl num">5</span><span class="hl opt">},</span> 
   <span class="hl opt">{</span><span class="hl str">&quot;(c|t)&quot;</span><span class="hl opt">,</span>   <span class="hl num">5</span><span class="hl opt">},</span> 
   <span class="hl opt">{</span><span class="hl num">0</span><span class="hl opt">}, {</span><span class="hl num">0</span><span class="hl opt">},</span> 
   <span class="hl opt">{</span><span class="hl str">&quot;(a|c|g)&quot;</span><span class="hl opt">,</span>   <span class="hl num">7</span><span class="hl opt">},</span> 
   <span class="hl opt">{</span><span class="hl str">&quot;(a|t)&quot;</span><span class="hl opt">,</span>   <span class="hl num">5</span><span class="hl opt">},</span> 
   <span class="hl opt">{</span><span class="hl num">0</span><span class="hl opt">},</span> 
   <span class="hl opt">{</span><span class="hl str">&quot;(c|t)&quot;</span><span class="hl opt">,</span>   <span class="hl num">5</span><span class="hl opt">}</span>
<span class="hl opt">};</span>
<span class="hl kwb">int const</span> n_iub <span class="hl opt">=</span> <span class="hl kwa">sizeof</span><span class="hl opt">(</span>iub_table<span class="hl opt">)/</span><span class="hl kwa">sizeof</span><span class="hl opt">(</span>iub_table<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">]);</span>


<span class="hl kwb">struct</span> Formatter
<span class="hl opt">{</span>
   <span class="hl kwc">template</span><span class="hl opt">&lt;</span>typename Match<span class="hl opt">,</span> typename Out<span class="hl opt">&gt;</span>
   Out 
   <span class="hl kwc">operator</span><span class="hl opt">()(</span>Match <span class="hl kwb">const</span> <span class="hl opt">&amp;</span>m<span class="hl opt">,</span> Out o<span class="hl opt">)</span> <span class="hl kwb">const</span>
   <span class="hl opt">{</span>
      IUB <span class="hl kwb">const</span> <span class="hl opt">&amp;</span><span class="hl kwd">i</span> <span class="hl opt">(</span>iub_table<span class="hl opt">[ *</span>m<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">].</span>first <span class="hl opt">-</span> <span class="hl str">'A'</span> <span class="hl opt">]);</span>
      <span class="hl kwa">return</span> <span class="hl kwd">copy</span><span class="hl opt">(</span>i<span class="hl opt">.</span>iub<span class="hl opt">,</span> i<span class="hl opt">.</span>iub <span class="hl opt">+</span> i<span class="hl opt">.</span>len<span class="hl opt">,</span> o<span class="hl opt">);</span>
   <span class="hl opt">}</span>
<span class="hl opt">};</span>


<span class="hl kwb">void</span> <span class="hl kwd">Replace_Patterns</span><span class="hl opt">(</span>Data_T <span class="hl kwb">const</span><span class="hl opt">&amp;</span> input<span class="hl opt">,</span> <span class="hl kwb">size_t</span> <span class="hl opt">&amp;</span>replace_len<span class="hl opt">)</span>
<span class="hl opt">{</span>
   <span class="hl ppc">#pragma omp single nowait</span>
   <span class="hl opt">{</span>
      Data_T         output<span class="hl opt">;</span>
      output<span class="hl opt">.</span><span class="hl kwd">reserve</span>   <span class="hl opt">(</span>input<span class="hl opt">.</span><span class="hl kwd">size</span><span class="hl opt">() + (</span>input<span class="hl opt">.</span><span class="hl kwd">size</span><span class="hl opt">() &gt;&gt;</span> <span class="hl num">1</span><span class="hl opt">));</span>   <span class="hl slc">// size * 1.5</span>

      <span class="hl kwd">regex_replace</span><span class="hl opt">(</span>   <span class="hl kwd">OIte_Data_T</span><span class="hl opt">(</span>output<span class="hl opt">),</span> 
                  input<span class="hl opt">.</span><span class="hl kwd">begin</span><span class="hl opt">(),</span> input<span class="hl opt">.</span><span class="hl kwd">end</span><span class="hl opt">(),</span> 

                  <span class="hl slc">// &quot;[BDHKMNRSVWY]&quot;</span>
                  <span class="hl kwd">Regex_Data_T</span><span class="hl opt">( (</span>x<span class="hl opt">::</span>set<span class="hl opt">=</span><span class="hl str">'B'</span><span class="hl opt">,</span><span class="hl str">'D'</span><span class="hl opt">,</span><span class="hl str">'H'</span><span class="hl opt">,</span><span class="hl str">'K'</span><span class="hl opt">,</span><span class="hl str">'M'</span><span class="hl opt">,</span><span class="hl str">'N'</span><span class="hl opt">,</span><span class="hl str">'R'</span><span class="hl opt">,</span><span class="hl str">'S'</span><span class="hl opt">,</span><span class="hl str">'V'</span><span class="hl opt">,</span><span class="hl str">'W'</span><span class="hl opt">,</span><span class="hl str">'Y'</span><span class="hl opt">) ),</span> 

                  <span class="hl kwd">Formatter</span><span class="hl opt">()   );</span>

      replace_len <span class="hl opt">=</span> output<span class="hl opt">.</span><span class="hl kwd">size</span><span class="hl opt">();</span>
   <span class="hl opt">}</span>
<span class="hl opt">}</span>



<span class="hl slc">// Detect single - multi thread benchmark</span>
<span class="hl kwb">int</span> 
<span class="hl kwd">GetThreadCount</span><span class="hl opt">()</span>
<span class="hl opt">{</span>
   cpu_set_t cs<span class="hl opt">;</span>
   <span class="hl kwd">CPU_ZERO</span><span class="hl opt">(&amp;</span>cs<span class="hl opt">);</span>
   <span class="hl kwd">sched_getaffinity</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl kwa">sizeof</span><span class="hl opt">(</span>cs<span class="hl opt">), &amp;</span>cs<span class="hl opt">);</span>

   <span class="hl kwb">int</span> count <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
   <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> <span class="hl num">16</span><span class="hl opt">; ++</span>i<span class="hl opt">)</span>
   <span class="hl opt">{</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">CPU_ISSET</span><span class="hl opt">(</span>i<span class="hl opt">, &amp;</span>cs<span class="hl opt">))</span>
      <span class="hl opt">++</span>count<span class="hl opt">;</span>
   <span class="hl opt">}</span>
   <span class="hl kwa">return</span> count<span class="hl opt">;</span>
<span class="hl opt">}</span>


<span class="hl kwb">int</span> 
<span class="hl kwd">main</span><span class="hl opt">()</span>
<span class="hl opt">{</span>
   <span class="hl kwb">size_t</span> initial_length <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
   <span class="hl kwb">size_t</span> striped_length <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
   <span class="hl kwb">size_t</span> replace_length <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
   
   Data_T input<span class="hl opt">;</span>
   
   striped_length <span class="hl opt">=</span> <span class="hl kwd">ReadInput_StripHeader</span> <span class="hl opt">(</span>initial_length<span class="hl opt">,</span> input<span class="hl opt">);</span>

   std<span class="hl opt">::</span>string match_result<span class="hl opt">;</span>
   <span class="hl ppc">#pragma omp parallel default(shared) num_threads(GetThreadCount())</span>
   <span class="hl opt">{</span>
      <span class="hl kwd">Count_Patterns</span>   <span class="hl opt">(</span>input<span class="hl opt">,</span> match_result<span class="hl opt">);</span>
      <span class="hl kwd">Replace_Patterns</span><span class="hl opt">(</span>input<span class="hl opt">,</span> replace_length<span class="hl opt">);</span>
   <span class="hl opt">}</span>

   std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt; (</span>   boost<span class="hl opt">::</span><span class="hl kwd">format</span><span class="hl opt">(</span><span class="hl str">&quot;%1%</span><span class="hl esc">\n</span><span class="hl str">%2%</span><span class="hl esc">\n</span><span class="hl str">%3%</span><span class="hl esc">\n</span><span class="hl str">%4%</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">)</span> 
      <span class="hl opt">%</span> match_result 
      <span class="hl opt">%</span> initial_length <span class="hl opt">%</span> striped_length <span class="hl opt">%</span> replace_length <span class="hl opt">);</span>

   <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>

