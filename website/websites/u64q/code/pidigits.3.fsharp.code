<span class="hl com">(**</span>
<span class="hl com"> * The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * Port to F# by Jomo Fisher of the C# port that uses native GMP:</span>
<span class="hl com"> * 	contributed by Mike Pall</span>
<span class="hl com"> * 	java port by Stefan Krause</span>
<span class="hl com"> *  C# port by Miguel de Icaza</span>
<span class="hl com">*)</span>
<span class="hl kwa">module</span> <span class="hl kwd">PiDigits</span>
<span class="hl kwa">open</span> <span class="hl kwd">System</span>
<span class="hl kwa">open</span> <span class="hl kwd">System</span><span class="hl opt">.</span><span class="hl kwd">Runtime</span><span class="hl opt">.</span><span class="hl kwd">InteropServices</span>

<span class="hl opt">[&lt;</span><span class="hl kwd">StructLayout</span> <span class="hl opt">(</span><span class="hl kwd">LayoutKind</span><span class="hl opt">.</span><span class="hl kwd">Sequential</span><span class="hl opt">)&gt;]</span>
<span class="hl opt">[&lt;</span><span class="hl kwd">Struct</span><span class="hl opt">&gt;]</span>
<span class="hl kwa">type</span> mpz_t <span class="hl opt">=</span>
   <span class="hl kwa">val</span> _mp_alloc<span class="hl opt">:</span><span class="hl kwb">int</span>
   <span class="hl kwa">val</span> _mp_size<span class="hl opt">:</span><span class="hl kwb">int</span>
   <span class="hl kwa">val</span> ptr<span class="hl opt">:</span><span class="hl kwd">IntPtr</span>

<span class="hl opt">[&lt;</span><span class="hl kwd">DllImport</span> <span class="hl opt">(</span><span class="hl str">&quot;gmp&quot;</span><span class="hl opt">,</span> <span class="hl kwd">EntryPoint</span><span class="hl opt">=</span><span class="hl str">&quot;__gmpz_init&quot;</span><span class="hl opt">)&gt;]</span>
<span class="hl kwa">let</span> mpz_init<span class="hl opt">(</span>value <span class="hl opt">:</span> mpz_t byref<span class="hl opt">) :</span> <span class="hl kwb">unit</span> <span class="hl opt">=</span> failwith <span class="hl str">&quot;&quot;</span>

<span class="hl opt">[&lt;</span><span class="hl kwd">DllImport</span> <span class="hl opt">(</span><span class="hl str">&quot;gmp&quot;</span><span class="hl opt">,</span> <span class="hl kwd">EntryPoint</span><span class="hl opt">=</span><span class="hl str">&quot;__gmpz_mul_si&quot;</span><span class="hl opt">)&gt;]</span>
<span class="hl kwa">let</span> mpz_mul_si<span class="hl opt">(</span>dest <span class="hl opt">:</span> mpz_t byref<span class="hl opt">,</span> src <span class="hl opt">:</span> mpz_t byref<span class="hl opt">,</span> value <span class="hl opt">:</span> <span class="hl kwb">int</span><span class="hl opt">) :</span> <span class="hl kwb">unit</span> <span class="hl opt">=</span> failwith <span class="hl str">&quot;&quot;</span>

<span class="hl opt">[&lt;</span><span class="hl kwd">DllImport</span> <span class="hl opt">(</span><span class="hl str">&quot;gmp&quot;</span><span class="hl opt">,</span> <span class="hl kwd">EntryPoint</span><span class="hl opt">=</span><span class="hl str">&quot;__gmpz_add&quot;</span><span class="hl opt">)&gt;]</span>
<span class="hl kwa">let</span> mpz_add<span class="hl opt">(</span>dest <span class="hl opt">:</span> mpz_t byref<span class="hl opt">,</span> src <span class="hl opt">:</span> mpz_t byref<span class="hl opt">,</span> src2 <span class="hl opt">:</span> mpz_t byref<span class="hl opt">) :</span> <span class="hl kwb">unit</span> <span class="hl opt">=</span> failwith <span class="hl str">&quot;&quot;</span>

<span class="hl opt">[&lt;</span><span class="hl kwd">DllImport</span> <span class="hl opt">(</span><span class="hl str">&quot;gmp&quot;</span><span class="hl opt">,</span> <span class="hl kwd">EntryPoint</span><span class="hl opt">=</span><span class="hl str">&quot;__gmpz_tdiv_q&quot;</span><span class="hl opt">)&gt;]</span>
<span class="hl kwa">let</span> mpz_tdiv_q<span class="hl opt">(</span>dest <span class="hl opt">:</span> mpz_t byref<span class="hl opt">,</span> src <span class="hl opt">:</span> mpz_t byref<span class="hl opt">,</span> src2 <span class="hl opt">:</span> mpz_t byref<span class="hl opt">) :</span> <span class="hl kwb">unit</span> <span class="hl opt">=</span> failwith <span class="hl str">&quot;&quot;</span>

<span class="hl opt">[&lt;</span><span class="hl kwd">DllImport</span> <span class="hl opt">(</span><span class="hl str">&quot;gmp&quot;</span><span class="hl opt">,</span> <span class="hl kwd">EntryPoint</span><span class="hl opt">=</span><span class="hl str">&quot;__gmpz_set_si&quot;</span><span class="hl opt">)&gt;]</span>
<span class="hl kwa">let</span> mpz_set_si<span class="hl opt">(</span>src <span class="hl opt">:</span> mpz_t byref<span class="hl opt">,</span> value <span class="hl opt">:</span> <span class="hl kwb">int</span><span class="hl opt">) :</span> <span class="hl kwb">unit</span> <span class="hl opt">=</span> failwith <span class="hl str">&quot;&quot;</span>

<span class="hl opt">[&lt;</span><span class="hl kwd">DllImport</span> <span class="hl opt">(</span><span class="hl str">&quot;gmp&quot;</span><span class="hl opt">,</span> <span class="hl kwd">EntryPoint</span><span class="hl opt">=</span><span class="hl str">&quot;__gmpz_get_si&quot;</span><span class="hl opt">)&gt;]</span> 
<span class="hl kwa">let</span> mpz_get_si<span class="hl opt">(</span>src <span class="hl opt">:</span> mpz_t byref<span class="hl opt">) :</span> <span class="hl kwb">int</span> <span class="hl opt">=</span> <span class="hl num">0</span>

<span class="hl kwa">let</span> init<span class="hl opt">() =</span> 
    <span class="hl kwa">let mutable</span> result <span class="hl opt">=</span> mpz_t<span class="hl opt">()</span>
    mpz_init<span class="hl opt">(&amp;</span>result<span class="hl opt">)</span>
    result

<span class="hl kwa">let mutable</span> q<span class="hl opt">,</span>r<span class="hl opt">,</span>s<span class="hl opt">,</span>t<span class="hl opt">,</span>u<span class="hl opt">,</span>v<span class="hl opt">,</span>w <span class="hl opt">=</span> init<span class="hl opt">(),</span>init<span class="hl opt">(),</span>init<span class="hl opt">(),</span>init<span class="hl opt">(),</span>init<span class="hl opt">(),</span>init<span class="hl opt">(),</span>init<span class="hl opt">()</span>

<span class="hl kwa">let mutable</span> i <span class="hl opt">=</span> <span class="hl num">0</span>
<span class="hl kwa">let mutable</span> c <span class="hl opt">=</span> <span class="hl num">0</span>
<span class="hl kwa">let</span> ch <span class="hl opt">=</span> <span class="hl kwd">Array</span><span class="hl opt">.</span>zeroCreate <span class="hl num">10</span>
<span class="hl kwa">let</span> args <span class="hl opt">=</span> <span class="hl kwd">System</span><span class="hl opt">.</span><span class="hl kwd">Environment</span><span class="hl opt">.</span><span class="hl kwd">GetCommandLineArgs</span><span class="hl opt">()</span>
<span class="hl kwa">let</span> n <span class="hl opt">=</span> <span class="hl kwd">Int32</span><span class="hl opt">.</span><span class="hl kwd">Parse</span> args<span class="hl opt">.[</span><span class="hl num">1</span><span class="hl opt">]</span>
<span class="hl kwa">let</span> intZero <span class="hl opt">=</span> <span class="hl kwb">int</span> <span class="hl str">'0'</span>

<span class="hl kwa">let inline</span> compose_r<span class="hl opt">(</span>bq<span class="hl opt">,</span> br<span class="hl opt">,</span> bs<span class="hl opt">,</span> bt<span class="hl opt">) =</span> 
    mpz_mul_si<span class="hl opt">(&amp;</span>u<span class="hl opt">, &amp;</span>r<span class="hl opt">,</span> bs<span class="hl opt">)</span>
    mpz_mul_si<span class="hl opt">(&amp;</span>r<span class="hl opt">, &amp;</span>r<span class="hl opt">,</span> bq<span class="hl opt">)</span>
    mpz_mul_si<span class="hl opt">(&amp;</span>v<span class="hl opt">, &amp;</span>t<span class="hl opt">,</span> br<span class="hl opt">)</span>
    mpz_add<span class="hl opt">(&amp;</span>r<span class="hl opt">, &amp;</span>r<span class="hl opt">, &amp;</span>v<span class="hl opt">)</span>
    mpz_mul_si<span class="hl opt">(&amp;</span>t<span class="hl opt">, &amp;</span>t<span class="hl opt">,</span> bt<span class="hl opt">)</span>
    mpz_add<span class="hl opt">(&amp;</span>t<span class="hl opt">, &amp;</span>t<span class="hl opt">, &amp;</span>u<span class="hl opt">)</span>
    mpz_mul_si<span class="hl opt">(&amp;</span>s<span class="hl opt">, &amp;</span>s<span class="hl opt">,</span> bt<span class="hl opt">)</span>
    mpz_mul_si<span class="hl opt">(&amp;</span>u<span class="hl opt">, &amp;</span>q<span class="hl opt">,</span> bs<span class="hl opt">)</span>
    mpz_add<span class="hl opt">(&amp;</span>s<span class="hl opt">, &amp;</span>s<span class="hl opt">, &amp;</span>u<span class="hl opt">)</span>
    mpz_mul_si<span class="hl opt">(&amp;</span>q<span class="hl opt">, &amp;</span>q<span class="hl opt">,</span> bq<span class="hl opt">)</span>

<span class="hl slc">// Compose matrix with numbers on the left.</span>
<span class="hl kwa">let inline</span> compose_l<span class="hl opt">(</span>bq<span class="hl opt">,</span> br<span class="hl opt">,</span> bs<span class="hl opt">,</span> bt<span class="hl opt">) =</span>
    mpz_mul_si<span class="hl opt">(&amp;</span>r<span class="hl opt">, &amp;</span>r<span class="hl opt">,</span> bt<span class="hl opt">)</span>
    mpz_mul_si<span class="hl opt">(&amp;</span>u<span class="hl opt">, &amp;</span>q<span class="hl opt">,</span> br<span class="hl opt">)</span>
    mpz_add<span class="hl opt">(&amp;</span>r<span class="hl opt">, &amp;</span>r<span class="hl opt">, &amp;</span>u<span class="hl opt">)</span>
    mpz_mul_si<span class="hl opt">(&amp;</span>u<span class="hl opt">, &amp;</span>t<span class="hl opt">,</span> bs<span class="hl opt">)</span>
    mpz_mul_si<span class="hl opt">(&amp;</span>t<span class="hl opt">, &amp;</span>t<span class="hl opt">,</span> bt<span class="hl opt">)</span>
    mpz_mul_si<span class="hl opt">(&amp;</span>v<span class="hl opt">, &amp;</span>s<span class="hl opt">,</span> br<span class="hl opt">)</span>
    mpz_add<span class="hl opt">(&amp;</span>t<span class="hl opt">, &amp;</span>t<span class="hl opt">, &amp;</span>v<span class="hl opt">)</span>
    mpz_mul_si<span class="hl opt">(&amp;</span>s<span class="hl opt">, &amp;</span>s<span class="hl opt">,</span> bq<span class="hl opt">)</span>
    mpz_add<span class="hl opt">(&amp;</span>s<span class="hl opt">, &amp;</span>s<span class="hl opt">, &amp;</span>u<span class="hl opt">)</span>
    mpz_mul_si<span class="hl opt">(&amp;</span>q<span class="hl opt">, &amp;</span>q<span class="hl opt">,</span> bq<span class="hl opt">)</span>

<span class="hl slc">// Extract one digit.</span>
<span class="hl kwa">let inline</span> extract<span class="hl opt">(</span>j<span class="hl opt">) =</span> 
    mpz_mul_si<span class="hl opt">(&amp;</span>u<span class="hl opt">, &amp;</span>q<span class="hl opt">,</span> j<span class="hl opt">)</span>
    mpz_add<span class="hl opt">(&amp;</span>u<span class="hl opt">, &amp;</span>u<span class="hl opt">, &amp;</span>r<span class="hl opt">)</span>
    mpz_mul_si<span class="hl opt">(&amp;</span>v<span class="hl opt">, &amp;</span>s<span class="hl opt">,</span> j<span class="hl opt">)</span>
    mpz_add<span class="hl opt">(&amp;</span>v<span class="hl opt">, &amp;</span>v<span class="hl opt">, &amp;</span>t<span class="hl opt">)</span>
    mpz_tdiv_q<span class="hl opt">(&amp;</span>w<span class="hl opt">, &amp;</span>u<span class="hl opt">, &amp;</span>v<span class="hl opt">)</span>
    mpz_get_si<span class="hl opt">(&amp;</span>w<span class="hl opt">)</span>


<span class="hl slc">// Print one digit. Returns 1 for the last digit. </span>
<span class="hl kwa">let inline</span> prdigit<span class="hl opt">(</span>y<span class="hl opt">:</span><span class="hl kwb">int</span><span class="hl opt">) =</span> 
    ch<span class="hl opt">.[</span>c<span class="hl opt">] &lt;-</span> char <span class="hl opt">(</span>intZero <span class="hl opt">+</span> y<span class="hl opt">)</span>
    c <span class="hl opt">&lt;-</span> c <span class="hl opt">+</span> <span class="hl num">1</span>
    i <span class="hl opt">&lt;-</span> i <span class="hl opt">+</span> <span class="hl num">1</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>i<span class="hl opt">%</span><span class="hl num">10</span><span class="hl opt">=</span><span class="hl num">0</span> || i <span class="hl opt">=</span> n<span class="hl opt">)</span> <span class="hl kwa">then</span>
        <span class="hl kwa">while</span> c<span class="hl opt">&lt;&gt;</span>ch<span class="hl opt">.</span><span class="hl kwd">Length</span> <span class="hl kwa">do</span>
            ch<span class="hl opt">.[</span>c<span class="hl opt">] &lt;-</span> <span class="hl str">' '</span>
            c<span class="hl opt">&lt;-</span>c<span class="hl opt">+</span><span class="hl num">1</span>
        c <span class="hl opt">&lt;-</span> <span class="hl num">0</span>
        <span class="hl kwd">Console</span><span class="hl opt">.</span><span class="hl kwd">Write</span><span class="hl opt">(</span>ch<span class="hl opt">)</span>
        <span class="hl kwd">Console</span><span class="hl opt">.</span><span class="hl kwd">Write</span><span class="hl opt">(</span><span class="hl str">&quot;</span><span class="hl esc">\t</span><span class="hl str">:&quot;</span><span class="hl opt">)</span>
        <span class="hl kwd">Console</span><span class="hl opt">.</span><span class="hl kwd">WriteLine</span><span class="hl opt">(</span>i<span class="hl opt">)</span>
    i <span class="hl opt">=</span> n

<span class="hl slc">// Generate successive digits of PI. </span>
<span class="hl kwa">let mutable</span> k <span class="hl opt">=</span> <span class="hl num">1</span>
i <span class="hl opt">&lt;-</span> <span class="hl num">0</span>
mpz_set_si<span class="hl opt">(&amp;</span>q<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">)</span>
mpz_set_si<span class="hl opt">(&amp;</span>r<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">)</span>
mpz_set_si<span class="hl opt">(&amp;</span>s<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">)</span>
mpz_set_si<span class="hl opt">(&amp;</span>t<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">)</span>
<span class="hl kwa">let mutable</span> more <span class="hl opt">=</span> <span class="hl kwa">true</span>
<span class="hl kwa">while</span> more <span class="hl kwa">do</span>
    <span class="hl kwa">let</span> y <span class="hl opt">=</span> extract <span class="hl num">3</span>
    <span class="hl kwa">if</span> y <span class="hl opt">=</span> extract <span class="hl num">4</span> <span class="hl kwa">then</span>
        <span class="hl kwa">if</span> prdigit y <span class="hl kwa">then</span> more<span class="hl opt">&lt;-</span><span class="hl kwa">false</span>
        <span class="hl kwa">else</span> compose_r<span class="hl opt">(</span><span class="hl num">10</span><span class="hl opt">, -</span><span class="hl num">10</span><span class="hl opt">*</span>y<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">)</span>
    <span class="hl kwa">else</span>
        compose_l<span class="hl opt">(</span>k<span class="hl opt">,</span> <span class="hl num">4</span><span class="hl opt">*</span>k<span class="hl opt">+</span><span class="hl num">2</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">2</span><span class="hl opt">*</span>k<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">);</span>
        k<span class="hl opt">&lt;-</span>k<span class="hl opt">+</span><span class="hl num">1</span>


