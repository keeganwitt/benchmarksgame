<span class="hl opt">#</span>lang racket<span class="hl opt">/</span>base

<span class="hl slc">;;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;;; http://benchmarksgame.alioth.debian.org/</span>

<span class="hl slc">;;; contributed by Matthew Flatt</span>
<span class="hl slc">;;;</span>
<span class="hl slc">;;; Uses Racket threads</span>

<span class="hl opt">(</span><span class="hl kwa">require</span> racket<span class="hl opt">/</span>cmdline
         racket<span class="hl opt">/</span>match<span class="hl opt">)</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">change</span> c1 c2<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">case</span> c1
    <span class="hl opt">[(</span><span class="hl kwa">red</span><span class="hl opt">)</span>
     <span class="hl opt">(</span><span class="hl kwa">case</span> c2 <span class="hl opt">[(</span><span class="hl kwa">blue</span><span class="hl opt">) '</span>yellow<span class="hl opt">] [(</span><span class="hl kwa">yellow</span><span class="hl opt">) '</span>blue<span class="hl opt">] [</span>else c1<span class="hl opt">])]</span>
    <span class="hl opt">[(</span><span class="hl kwa">yellow</span><span class="hl opt">)</span>
     <span class="hl opt">(</span><span class="hl kwa">case</span> c2 <span class="hl opt">[(</span><span class="hl kwa">blue</span><span class="hl opt">) '</span>red<span class="hl opt">] [(</span><span class="hl kwa">red</span><span class="hl opt">) '</span>blue<span class="hl opt">] [</span>else c1<span class="hl opt">])]</span>
    <span class="hl opt">[(</span><span class="hl kwa">blue</span><span class="hl opt">)</span>
     <span class="hl opt">(</span><span class="hl kwa">case</span> c2 <span class="hl opt">[(</span><span class="hl kwa">yellow</span><span class="hl opt">) '</span>red<span class="hl opt">] [(</span><span class="hl kwa">red</span><span class="hl opt">) '</span>yellow<span class="hl opt">] [</span>else c1<span class="hl opt">])]))</span>
  
<span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">([</span>colors <span class="hl opt">'(</span><span class="hl kwa">blue</span> red yellow<span class="hl opt">)])</span>
  <span class="hl opt">(</span><span class="hl kwa">for</span><span class="hl opt">* ([</span>a colors<span class="hl opt">][</span>b colors<span class="hl opt">])</span>
    <span class="hl opt">(</span><span class="hl kwa">printf</span> <span class="hl str">&quot;~a + ~a -&gt; ~a</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> a b <span class="hl opt">(</span><span class="hl kwa">change</span> a b<span class="hl opt">))))</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">place</span> meeting-ch n<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">thread</span>
   <span class="hl opt">(</span><span class="hl kwa">lambda</span> <span class="hl opt">()</span>
     <span class="hl opt">(</span><span class="hl kwa">let</span> loop <span class="hl opt">([</span>n n<span class="hl opt">])</span>
       <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">zero</span>? n<span class="hl opt">)</span>
           <span class="hl slc">;; Fade all:</span>
           <span class="hl opt">(</span><span class="hl kwa">let</span> loop <span class="hl opt">()</span>
             <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">([</span>c <span class="hl opt">(</span><span class="hl kwa">channel-get</span> meeting-ch<span class="hl opt">)])</span>
               <span class="hl opt">(</span><span class="hl kwa">channel-put</span> <span class="hl opt">(</span><span class="hl kwa">car</span> c<span class="hl opt">) #</span>f<span class="hl opt">)</span>
               <span class="hl opt">(</span><span class="hl kwa">loop</span><span class="hl opt">)))</span>
           <span class="hl slc">;; Let two meet:</span>
           <span class="hl opt">(</span><span class="hl kwa">match-let</span> <span class="hl opt">([(</span><span class="hl kwa">cons</span> ch1 v1<span class="hl opt">) (</span><span class="hl kwa">channel-get</span> meeting-ch<span class="hl opt">)]</span>
                       <span class="hl opt">[(</span><span class="hl kwa">cons</span> ch2 v2<span class="hl opt">) (</span><span class="hl kwa">channel-get</span> meeting-ch<span class="hl opt">)])</span>
             <span class="hl opt">(</span><span class="hl kwa">channel-put</span> ch1 v2<span class="hl opt">)</span>
             <span class="hl opt">(</span><span class="hl kwa">channel-put</span> ch2 v1<span class="hl opt">)</span>
             <span class="hl opt">(</span><span class="hl kwa">loop</span> <span class="hl opt">(</span><span class="hl kwa">sub1</span> n<span class="hl opt">))))))))</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">creature</span> color meeting-ch result-ch<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">thread</span> 
   <span class="hl opt">(</span><span class="hl kwa">lambda</span> <span class="hl opt">()</span>
     <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">([</span>ch <span class="hl opt">(</span><span class="hl kwa">make-channel</span><span class="hl opt">)]</span>
           <span class="hl opt">[</span>name <span class="hl opt">(</span><span class="hl kwa">gensym</span><span class="hl opt">)])</span>
       <span class="hl opt">(</span><span class="hl kwa">let</span> loop <span class="hl opt">([</span>color color<span class="hl opt">][</span>met <span class="hl num">0</span><span class="hl opt">][</span>same <span class="hl num">0</span><span class="hl opt">])</span>
         <span class="hl opt">(</span><span class="hl kwa">channel-put</span> meeting-ch <span class="hl opt">(</span><span class="hl kwa">cons</span> ch <span class="hl opt">(</span><span class="hl kwa">cons</span> color name<span class="hl opt">)))</span>
         <span class="hl opt">(</span><span class="hl kwa">match</span> <span class="hl opt">(</span><span class="hl kwa">channel-get</span> ch<span class="hl opt">)</span>
           <span class="hl opt">[(</span><span class="hl kwa">cons</span> other-color other-name<span class="hl opt">)</span>
            <span class="hl slc">;; Meet:</span>
            <span class="hl opt">(</span><span class="hl kwa">sleep</span><span class="hl opt">)</span> <span class="hl slc">; avoid imbalance from weak fairness</span>
            <span class="hl opt">(</span><span class="hl kwa">loop</span> <span class="hl opt">(</span><span class="hl kwa">change</span> color other-color<span class="hl opt">)</span> 
                  <span class="hl opt">(</span><span class="hl kwa">add1</span> met<span class="hl opt">)</span>
                  <span class="hl opt">(+</span> same <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">eq</span>? name other-name<span class="hl opt">)</span>
                              <span class="hl num">1</span>
                              <span class="hl num">0</span><span class="hl opt">)))]</span>
           <span class="hl opt">[#</span>f
            <span class="hl slc">;; Done:</span>
            <span class="hl opt">(</span><span class="hl kwa">channel-put</span> result-ch <span class="hl opt">(</span><span class="hl kwa">cons</span> met same<span class="hl opt">))]))))))</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">spell</span> n<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">for</span> <span class="hl opt">([</span>i <span class="hl opt">(</span><span class="hl kwa">number-</span><span class="hl opt">&gt;</span>string n<span class="hl opt">)])</span>
    <span class="hl opt">(</span><span class="hl kwa">display</span> <span class="hl str">&quot; &quot;</span><span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl kwa">display</span> <span class="hl opt">(</span><span class="hl kwa">hash-ref</span> digits i<span class="hl opt">))))</span>
  
<span class="hl opt">(</span><span class="hl kwa">define</span> digits
  <span class="hl opt">#</span>hash<span class="hl opt">((#</span>\<span class="hl num">0</span> . <span class="hl str">&quot;zero&quot;</span><span class="hl opt">)</span>
        <span class="hl opt">(#</span>\<span class="hl num">1</span> . <span class="hl str">&quot;one&quot;</span><span class="hl opt">)</span>
        <span class="hl opt">(#</span>\<span class="hl num">2</span> . <span class="hl str">&quot;two&quot;</span><span class="hl opt">)</span>
        <span class="hl opt">(#</span>\<span class="hl num">3</span> . <span class="hl str">&quot;three&quot;</span><span class="hl opt">)</span>
        <span class="hl opt">(#</span>\<span class="hl num">4</span> . <span class="hl str">&quot;four&quot;</span><span class="hl opt">)</span>
        <span class="hl opt">(#</span>\<span class="hl num">5</span> . <span class="hl str">&quot;five&quot;</span><span class="hl opt">)</span>
        <span class="hl opt">(#</span>\<span class="hl num">6</span> . <span class="hl str">&quot;six&quot;</span><span class="hl opt">)</span>
        <span class="hl opt">(#</span>\<span class="hl num">7</span> . <span class="hl str">&quot;seven&quot;</span><span class="hl opt">)</span>
        <span class="hl opt">(#</span>\<span class="hl num">8</span> . <span class="hl str">&quot;eight&quot;</span><span class="hl opt">)</span>
        <span class="hl opt">(#</span>\<span class="hl num">9</span> . <span class="hl str">&quot;nine&quot;</span><span class="hl opt">)))</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">go</span> n inits<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">([</span>result-ch <span class="hl opt">(</span><span class="hl kwa">make-channel</span><span class="hl opt">)]</span>
        <span class="hl opt">[</span>meeting-ch <span class="hl opt">(</span><span class="hl kwa">make-channel</span><span class="hl opt">)])</span>
    <span class="hl opt">(</span><span class="hl kwa">place</span> meeting-ch n<span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl kwa">newline</span><span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl kwa">for</span> <span class="hl opt">([</span>init inits<span class="hl opt">])</span>
      <span class="hl opt">(</span><span class="hl kwa">printf</span> <span class="hl str">&quot; ~a&quot;</span> init<span class="hl opt">)</span>
      <span class="hl opt">(</span><span class="hl kwa">creature</span> init meeting-ch result-ch<span class="hl opt">))</span>
    <span class="hl opt">(</span><span class="hl kwa">newline</span><span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">([</span>results <span class="hl opt">(</span><span class="hl kwa">for</span><span class="hl opt">/</span>list <span class="hl opt">([</span>i inits<span class="hl opt">])</span>
                     <span class="hl opt">(</span><span class="hl kwa">channel-get</span> result-ch<span class="hl opt">))])</span>
      <span class="hl opt">(</span><span class="hl kwa">for</span> <span class="hl opt">([</span>r results<span class="hl opt">])</span>
        <span class="hl opt">(</span><span class="hl kwa">display</span> <span class="hl opt">(</span><span class="hl kwa">car</span> r<span class="hl opt">))</span>
        <span class="hl opt">(</span><span class="hl kwa">spell</span> <span class="hl opt">(</span><span class="hl kwa">cdr</span> r<span class="hl opt">))</span>
        <span class="hl opt">(</span><span class="hl kwa">newline</span><span class="hl opt">))</span>
      <span class="hl opt">(</span><span class="hl kwa">spell</span> <span class="hl opt">(</span><span class="hl kwa">apply</span> <span class="hl opt">+ (</span><span class="hl kwa">map</span> car results<span class="hl opt">)))</span>
      <span class="hl opt">(</span><span class="hl kwa">newline</span><span class="hl opt">))))</span>

<span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">([</span>n <span class="hl opt">(</span><span class="hl kwa">command-line</span> <span class="hl opt">#:</span>args <span class="hl opt">(</span><span class="hl kwa">n</span><span class="hl opt">) (</span><span class="hl kwa">string-</span><span class="hl opt">&gt;</span>number n<span class="hl opt">))])</span>
  <span class="hl opt">(</span><span class="hl kwa">go</span> n <span class="hl opt">'(</span><span class="hl kwa">blue</span> red yellow<span class="hl opt">))</span>
  <span class="hl opt">(</span><span class="hl kwa">go</span> n <span class="hl opt">'(</span><span class="hl kwa">blue</span> red yellow red yellow blue red yellow red blue<span class="hl opt">))</span>
  <span class="hl opt">(</span><span class="hl kwa">newline</span><span class="hl opt">))</span>
