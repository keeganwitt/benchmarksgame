<span class="hl com">/**</span>
<span class="hl com"> * The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * contributed by Fabien Le Floc'h</span>
<span class="hl com"> *</span>
<span class="hl com"> * This implementation cheats by adapting closely to the benchmark specifications. </span>
<span class="hl com"> * We use only 1 thread to process messages, we don't use a blocking queue but </span>
<span class="hl com"> * instead a linked list. The Nodes don't map directly to a thread, even though</span>
<span class="hl com"> * they are processed in a different thread (the consumer). This is probably this kind</span>
<span class="hl com"> * of scheme that more advanced languages like Haskell do behind the scenes.</span>
<span class="hl com"> * </span>
<span class="hl com"> * I say it is a bit cheating because we don't use here a concurrent queue, because </span>
<span class="hl com"> * we know everything is processed in 1 thread: the consumer except the first message.</span>
<span class="hl com"> */</span>


<span class="hl kwa">import</span> java<span class="hl opt">.</span>util<span class="hl opt">.</span>LinkedList<span class="hl opt">;</span>
<span class="hl kwa">import</span> java<span class="hl opt">.</span>util<span class="hl opt">.</span>Queue<span class="hl opt">;</span>


<span class="hl kwa">public class</span> threadring <span class="hl opt">{</span>
    <span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">main</span><span class="hl opt">(</span>String<span class="hl opt">[]</span> args<span class="hl opt">) {</span>
        Node<span class="hl opt">[]</span> ring <span class="hl opt">=</span> <span class="hl kwa">new</span> Node<span class="hl opt">[</span><span class="hl num">503</span><span class="hl opt">];</span>
        <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span> i<span class="hl opt">&lt;</span>ring<span class="hl opt">.</span>length<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
            ring<span class="hl opt">[</span>i<span class="hl opt">] =</span> <span class="hl kwa">new</span> <span class="hl kwd">Node</span><span class="hl opt">(</span>i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">);</span>
        <span class="hl opt">}</span>
        <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span> i<span class="hl opt">&lt;</span>ring<span class="hl opt">.</span>length<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
            <span class="hl kwb">int</span> nextIndex <span class="hl opt">= (</span>ring<span class="hl opt">[</span>i<span class="hl opt">].</span>label <span class="hl opt">%</span> ring<span class="hl opt">.</span>length<span class="hl opt">);</span>
            ring<span class="hl opt">[</span>i<span class="hl opt">].</span>next <span class="hl opt">=</span> ring<span class="hl opt">[</span>nextIndex<span class="hl opt">];</span>            
        <span class="hl opt">}</span>
        <span class="hl kwb">int</span> nHops <span class="hl opt">=</span> Integer<span class="hl opt">.</span><span class="hl kwd">parseInt</span><span class="hl opt">(</span>args<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">]);</span>
        <span class="hl kwa">new</span> <span class="hl kwd">Thread</span><span class="hl opt">(</span><span class="hl kwa">new</span> <span class="hl kwd">Consumer</span><span class="hl opt">()).</span><span class="hl kwd">start</span><span class="hl opt">();</span>
        ring<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">].</span><span class="hl kwd">sendMessage</span><span class="hl opt">(</span>nHops<span class="hl opt">);</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">private static</span> Queue<span class="hl opt">&lt;</span>Node<span class="hl opt">&gt;</span> q <span class="hl opt">=</span> <span class="hl kwa">new</span> LinkedList<span class="hl opt">&lt;</span>Node<span class="hl opt">&gt;();</span>

    <span class="hl kwa">static class</span> Consumer <span class="hl kwa">implements</span> Runnable <span class="hl opt">{</span>

        <span class="hl kwa">public</span> <span class="hl kwb">void</span> <span class="hl kwd">run</span><span class="hl opt">() {</span>
            <span class="hl kwa">while</span> <span class="hl opt">(</span>true<span class="hl opt">) {</span>
                <span class="hl kwa">try</span> <span class="hl opt">{</span>
                    Node node<span class="hl opt">;</span>
                    node <span class="hl opt">=</span> q<span class="hl opt">.</span><span class="hl kwd">poll</span><span class="hl opt">();</span>
                    <span class="hl kwa">if</span> <span class="hl opt">(</span>node <span class="hl opt">==</span> null<span class="hl opt">) {</span>
                        <span class="hl slc">//ignore, wait for some element</span>
                        Thread<span class="hl opt">.</span><span class="hl kwd">sleep</span><span class="hl opt">(</span><span class="hl num">100</span><span class="hl opt">);</span>
                    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
                        node<span class="hl opt">.</span><span class="hl kwd">run</span><span class="hl opt">();</span>
                    <span class="hl opt">}</span> 
                <span class="hl opt">}</span> <span class="hl kwa">catch</span> <span class="hl opt">(</span>InterruptedException e<span class="hl opt">) {</span>
                    e<span class="hl opt">.</span><span class="hl kwd">printStackTrace</span><span class="hl opt">();</span>
                <span class="hl opt">}</span>
            <span class="hl opt">}</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">static class</span> Node <span class="hl kwa">implements</span> Runnable <span class="hl opt">{</span>
        <span class="hl kwa">private final</span> <span class="hl kwb">int</span> label<span class="hl opt">;</span>
        <span class="hl kwa">private</span> Node next<span class="hl opt">;</span>
        <span class="hl kwa">private</span> <span class="hl kwb">int</span> message<span class="hl opt">;</span>

        <span class="hl kwa">public</span> <span class="hl kwd">Node</span><span class="hl opt">(</span><span class="hl kwb">int</span> label<span class="hl opt">) {</span>
            <span class="hl kwa">this</span><span class="hl opt">.</span>label <span class="hl opt">=</span> label<span class="hl opt">;</span>
        <span class="hl opt">}</span>

        <span class="hl kwa">public</span> <span class="hl kwb">void</span> <span class="hl kwd">sendMessage</span><span class="hl opt">(</span><span class="hl kwb">int</span> message<span class="hl opt">) {</span>
            <span class="hl kwa">this</span><span class="hl opt">.</span>message<span class="hl opt">=</span>message<span class="hl opt">;</span>
            q<span class="hl opt">.</span><span class="hl kwd">add</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">);</span>            
        <span class="hl opt">}</span>

        <span class="hl kwa">public</span> <span class="hl kwb">void</span> <span class="hl kwd">run</span><span class="hl opt">() {</span>
            <span class="hl slc">//                System.out.println(&quot;after lock&quot;);</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>message <span class="hl opt">==</span> <span class="hl num">0</span><span class="hl opt">) {</span>
                System<span class="hl opt">.</span>out<span class="hl opt">.</span><span class="hl kwd">println</span><span class="hl opt">(</span>label<span class="hl opt">);</span>
                System<span class="hl opt">.</span><span class="hl kwd">exit</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">);</span>
            <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
                next<span class="hl opt">.</span><span class="hl kwd">sendMessage</span><span class="hl opt">(</span>message <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">);</span>
            <span class="hl opt">}</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span>
<span class="hl opt">}</span>
