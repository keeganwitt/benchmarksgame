<span class="hl slc"># The Computer Language Benchmarks Game</span>
<span class="hl slc"># http://benchmarksgame.alioth.debian.org</span>
<span class="hl slc">#   contributed by Kevin Barnes (Ruby novice)</span>

<span class="hl slc"># PROGRAM:  the main body is at the bottom.  </span>
<span class="hl slc">#   1) read about the problem here: http://www-128.ibm.com/developerworks/java/library/j-javaopt/</span>
<span class="hl slc">#   2) see how I represent a board as a bitmask by reading the blank_board comments</span>
<span class="hl slc">#   3) read as your mental paths take you</span>

<span class="hl slc"># class to represent all information about a particular rotation of a particular piece</span>
<span class="hl kwa">class</span> Rotation
  <span class="hl slc"># an array (by location) containing a bit mask for how the piece maps at the given location.</span>
  <span class="hl slc"># if the rotation is illegal at that location the mask will contain false</span>
  attr_reader <span class="hl kwc">:start_masks</span>
  
  <span class="hl slc"># maps a direction to a relative location.  these differ depending on whether it is an even or</span>
  <span class="hl slc"># odd row being mapped from</span>
  &#64;<span class="hl kwb">&#64;rotation_even_adder</span> <span class="hl opt">=</span> <span class="hl esc">{ :west =&gt; -1, :east =&gt; 1, :nw =&gt; -7, :ne =&gt; -6, :sw =&gt; 5, :se =&gt; 6 }</span>
  &#64;<span class="hl kwb">&#64;rotation_odd_adder</span> <span class="hl opt">=</span> <span class="hl esc">{ :west =&gt; -1, :east =&gt; 1, :nw =&gt; -6, :ne =&gt; -5, :sw =&gt; 6, :se =&gt; 7 }</span>
  
  <span class="hl kwa">def</span> <span class="hl kwd">initialize</span><span class="hl opt">(</span> directions )
    <span class="hl kwb">&#64;even_offsets</span><span class="hl opt">,</span> <span class="hl kwb">&#64;odd_offsets</span> <span class="hl opt">=</span> <span class="hl kwd">normalize_offsets</span><span class="hl opt">(</span> <span class="hl kwd">get_values</span><span class="hl opt">(</span> directions ))
      
    <span class="hl kwb">&#64;even_mask</span> <span class="hl opt">=</span> <span class="hl kwd">mask_for_offsets</span><span class="hl opt">(</span> <span class="hl kwb">&#64;even_offsets</span>)
    <span class="hl kwb">&#64;odd_mask</span> <span class="hl opt">=</span> <span class="hl kwd">mask_for_offsets</span><span class="hl opt">(</span> <span class="hl kwb">&#64;odd_offsets</span>)

    <span class="hl kwb">&#64;start_masks</span> <span class="hl opt">=</span> Array<span class="hl opt">.</span><span class="hl kwd">new</span><span class="hl opt">(</span><span class="hl num">60</span>)
    
    <span class="hl slc"># create the rotational masks by placing the base mask at the location and seeing if</span>
    <span class="hl slc"># 1) it overlaps the boundries and 2) it produces a prunable board.  if either of these</span>
    <span class="hl slc"># is true the piece cannot be placed</span>
    <span class="hl num">0</span><span class="hl opt">.</span><span class="hl kwd">upto</span><span class="hl opt">(</span><span class="hl num">59</span>) <span class="hl kwa">do</span> <span class="hl opt">|</span> offset <span class="hl opt">|</span>
      mask <span class="hl opt">=</span> <span class="hl kwd">is_even</span><span class="hl opt">(</span>offset) <span class="hl opt">? (</span><span class="hl kwb">&#64;even_mask</span> <span class="hl opt">&lt;&lt;</span> offset) <span class="hl opt">: (</span><span class="hl kwb">&#64;odd_mask</span> <span class="hl opt">&lt;&lt;</span> offset)
      <span class="hl kwa">if</span> <span class="hl opt">(</span>blank_board <span class="hl opt">&amp;</span> mask <span class="hl opt">==</span> <span class="hl num">0</span> <span class="hl opt">&amp;&amp; !</span><span class="hl kwd">prunable</span><span class="hl opt">(</span>blank_board <span class="hl opt">|</span> mask<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl kwa">true</span>)) <span class="hl kwa">then</span>
        imask <span class="hl opt">=</span> <span class="hl kwd">compute_required</span><span class="hl opt">(</span> mask<span class="hl opt">,</span> offset)
        <span class="hl kwb">&#64;start_masks</span><span class="hl opt">[</span>offset<span class="hl opt">] = [</span> mask<span class="hl opt">,</span> imask<span class="hl opt">,</span> imask <span class="hl opt">|</span> mask <span class="hl opt">]</span>
      <span class="hl kwa">else</span>
        <span class="hl kwb">&#64;start_masks</span><span class="hl opt">[</span>offset<span class="hl opt">] =</span> <span class="hl kwa">false</span> 
      <span class="hl kwa">end</span>
    <span class="hl kwa">end</span>
  <span class="hl kwa">end</span>
  
  <span class="hl kwa">def</span> <span class="hl kwd">compute_required</span><span class="hl opt">(</span> mask<span class="hl opt">,</span> offset )
    board <span class="hl opt">=</span> blank_board
    <span class="hl num">0</span><span class="hl opt">.</span><span class="hl kwd">upto</span><span class="hl opt">(</span>offset) <span class="hl esc">{ | i | board |= 1 &lt;&lt; i }</span>
    board <span class="hl opt">|=</span> mask
    <span class="hl kwa">return</span> <span class="hl num">0</span> <span class="hl kwa">if</span> <span class="hl opt">(!</span><span class="hl kwd">prunable</span><span class="hl opt">(</span>board <span class="hl opt">|</span> mask<span class="hl opt">,</span> offset))
    board <span class="hl opt">=</span> <span class="hl kwd">flood_fill</span><span class="hl opt">(</span>board<span class="hl opt">,</span><span class="hl num">58</span>)
    count <span class="hl opt">=</span> <span class="hl num">0</span>
    imask <span class="hl opt">=</span> <span class="hl num">0</span>
    <span class="hl num">0</span><span class="hl opt">.</span><span class="hl kwd">upto</span><span class="hl opt">(</span><span class="hl num">59</span>) <span class="hl kwa">do</span> <span class="hl opt">|</span> i <span class="hl opt">|</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>board<span class="hl opt">[</span>i<span class="hl opt">] ==</span> <span class="hl num">0</span>) <span class="hl kwa">then</span>
        imask <span class="hl opt">|= (</span><span class="hl num">1</span> <span class="hl opt">&lt;&lt;</span> i) 
        count <span class="hl opt">+=</span> <span class="hl num">1</span>
      <span class="hl kwa">end</span>
    <span class="hl kwa">end</span>
    <span class="hl opt">(</span>count <span class="hl opt">&gt;</span> <span class="hl num">0</span> <span class="hl opt">&amp;&amp;</span> count <span class="hl opt">&lt;</span> <span class="hl num">5</span>) <span class="hl opt">?</span> imask <span class="hl opt">:</span> <span class="hl num">0</span>
  <span class="hl kwa">end</span>
  
  <span class="hl kwa">def</span> <span class="hl kwd">flood_fill</span><span class="hl opt">(</span> board<span class="hl opt">,</span> location)
    <span class="hl kwa">return</span> board <span class="hl kwa">if</span> <span class="hl opt">(</span>board<span class="hl opt">[</span>location<span class="hl opt">] ==</span> <span class="hl num">1</span>)
    board <span class="hl opt">|=</span> <span class="hl num">1</span> <span class="hl opt">&lt;&lt;</span> location
    row<span class="hl opt">,</span> col <span class="hl opt">=</span> location<span class="hl opt">.</span><span class="hl kwd">divmod</span><span class="hl opt">(</span><span class="hl num">6</span>)
    board <span class="hl opt">=</span> <span class="hl kwd">flood_fill</span><span class="hl opt">(</span> board<span class="hl opt">,</span> location <span class="hl opt">-</span> <span class="hl num">1</span>) <span class="hl kwa">if</span> <span class="hl opt">(</span>col <span class="hl opt">&gt;</span> <span class="hl num">0</span>)
    board <span class="hl opt">=</span> <span class="hl kwd">flood_fill</span><span class="hl opt">(</span> board<span class="hl opt">,</span> location <span class="hl opt">+</span> <span class="hl num">1</span>) <span class="hl kwa">if</span> <span class="hl opt">(</span>col <span class="hl opt">&lt;</span> <span class="hl num">4</span>)
    <span class="hl kwa">if</span> <span class="hl opt">(</span>row <span class="hl opt">%</span> <span class="hl num">2</span> <span class="hl opt">==</span> <span class="hl num">0</span>) <span class="hl kwa">then</span>
      board <span class="hl opt">=</span> <span class="hl kwd">flood_fill</span><span class="hl opt">(</span> board<span class="hl opt">,</span> location <span class="hl opt">-</span> <span class="hl num">7</span>) <span class="hl kwa">if</span> <span class="hl opt">(</span>col <span class="hl opt">&gt;</span> <span class="hl num">0</span> <span class="hl opt">&amp;&amp;</span> row <span class="hl opt">&gt;</span> <span class="hl num">0</span>)
      board <span class="hl opt">=</span> <span class="hl kwd">flood_fill</span><span class="hl opt">(</span> board<span class="hl opt">,</span> location <span class="hl opt">-</span> <span class="hl num">6</span>) <span class="hl kwa">if</span> <span class="hl opt">(</span>row <span class="hl opt">&gt;</span> <span class="hl num">0</span>)
      board <span class="hl opt">=</span> <span class="hl kwd">flood_fill</span><span class="hl opt">(</span> board<span class="hl opt">,</span> location <span class="hl opt">+</span> <span class="hl num">6</span>) <span class="hl kwa">if</span> <span class="hl opt">(</span>row <span class="hl opt">&lt;</span> <span class="hl num">9</span>)
      board <span class="hl opt">=</span> <span class="hl kwd">flood_fill</span><span class="hl opt">(</span> board<span class="hl opt">,</span> location <span class="hl opt">+</span> <span class="hl num">5</span>) <span class="hl kwa">if</span> <span class="hl opt">(</span>col <span class="hl opt">&gt;</span> <span class="hl num">0</span> <span class="hl opt">&amp;&amp;</span> row <span class="hl opt">&lt;</span> <span class="hl num">9</span>)
    <span class="hl kwa">else</span>
      board <span class="hl opt">=</span> <span class="hl kwd">flood_fill</span><span class="hl opt">(</span> board<span class="hl opt">,</span> location <span class="hl opt">-</span> <span class="hl num">5</span>) <span class="hl kwa">if</span> <span class="hl opt">(</span>col <span class="hl opt">&lt;</span> <span class="hl num">4</span> <span class="hl opt">&amp;&amp;</span> row <span class="hl opt">&gt;</span> <span class="hl num">0</span>)
      board <span class="hl opt">=</span> <span class="hl kwd">flood_fill</span><span class="hl opt">(</span> board<span class="hl opt">,</span> location <span class="hl opt">-</span> <span class="hl num">6</span>) <span class="hl kwa">if</span> <span class="hl opt">(</span>row <span class="hl opt">&gt;</span> <span class="hl num">0</span>)
      board <span class="hl opt">=</span> <span class="hl kwd">flood_fill</span><span class="hl opt">(</span> board<span class="hl opt">,</span> location <span class="hl opt">+</span> <span class="hl num">6</span>) <span class="hl kwa">if</span> <span class="hl opt">(</span>row <span class="hl opt">&lt;</span> <span class="hl num">9</span>)
      board <span class="hl opt">=</span> <span class="hl kwd">flood_fill</span><span class="hl opt">(</span> board<span class="hl opt">,</span> location <span class="hl opt">+</span> <span class="hl num">7</span>) <span class="hl kwa">if</span> <span class="hl opt">(</span>col <span class="hl opt">&lt;</span> <span class="hl num">4</span> <span class="hl opt">&amp;&amp;</span> row <span class="hl opt">&lt;</span> <span class="hl num">9</span>)
    <span class="hl kwa">end</span>
    board
  <span class="hl kwa">end</span>
  
  <span class="hl slc"># given a location, produces a list of relative locations covered by the piece at this rotation</span>
  <span class="hl kwa">def</span> <span class="hl kwd">offsets</span><span class="hl opt">(</span> location)
    <span class="hl kwa">if</span> <span class="hl kwd">is_even</span><span class="hl opt">(</span> location) <span class="hl kwa">then</span>
      <span class="hl kwb">&#64;even_offsets</span><span class="hl opt">.</span>collect <span class="hl esc">{ | value | value + location }</span>
    <span class="hl kwa">else</span>
      <span class="hl kwb">&#64;odd_offsets</span><span class="hl opt">.</span>collect <span class="hl esc">{ | value | value + location }</span>
    <span class="hl kwa">end</span>
  <span class="hl kwa">end</span>
  
  <span class="hl slc"># returns a set of offsets relative to the top-left most piece of the rotation (by even or odd rows)</span>
  <span class="hl slc"># this is hard to explain. imagine we have this partial board:</span>
  <span class="hl slc">#   0 0 0 0 0 x        [positions 0-5]</span>
  <span class="hl slc">#    0 0 1 1 0 x       [positions 6-11]</span>
  <span class="hl slc">#   0 0 1 0 0 x        [positions 12-17]</span>
  <span class="hl slc">#    0 1 0 0 0 x       [positions 18-23]</span>
  <span class="hl slc">#   0 1 0 0 0 x        [positions 24-29]</span>
  <span class="hl slc">#    0 0 0 0 0 x       [positions 30-35]</span>
  <span class="hl slc">#       ...</span>
  <span class="hl slc"># The top-left of the piece is at position 8, the</span>
  <span class="hl slc"># board would be passed as a set of positions (values array) containing [8,9,14,19,25] not necessarily in that</span>
  <span class="hl slc"># sorted order.  Since that array starts on an odd row, the offsets for an odd row are: [0,1,6,11,17] obtained </span>
  <span class="hl slc"># by subtracting 8 from everything.  Now imagine the piece shifted up and to the right so it's on an even row:</span>
  <span class="hl slc">#   0 0 0 1 1 x        [positions 0-5]</span>
  <span class="hl slc">#    0 0 1 0 0 x       [positions 6-11]</span>
  <span class="hl slc">#   0 0 1 0 0 x        [positions 12-17]</span>
  <span class="hl slc">#    0 1 0 0 0 x       [positions 18-23]</span>
  <span class="hl slc">#   0 0 0 0 0 x        [positions 24-29]</span>
  <span class="hl slc">#    0 0 0 0 0 x       [positions 30-35]</span>
  <span class="hl slc">#       ...</span>
  <span class="hl slc"># Now the positions are [3,4,8,14,19] which after subtracting the lowest value (3) gives [0,1,5,11,16] thus, the </span>
  <span class="hl slc"># offsets for this particular piece are (in even, odd order) [0,1,5,11,16],[0,1,6,11,17] which is what</span>
  <span class="hl slc"># this function would return</span>
  <span class="hl kwa">def</span> <span class="hl kwd">normalize_offsets</span><span class="hl opt">(</span> values)
    min <span class="hl opt">=</span> values<span class="hl opt">.</span>min
    even_min <span class="hl opt">=</span> <span class="hl kwd">is_even</span><span class="hl opt">(</span>min)
    other_min <span class="hl opt">=</span> even_min <span class="hl opt">?</span> min <span class="hl opt">+</span> <span class="hl num">6</span> <span class="hl opt">:</span> min <span class="hl opt">+</span> <span class="hl num">7</span>
    other_values <span class="hl opt">=</span> values<span class="hl opt">.</span>collect <span class="hl kwa">do</span> <span class="hl opt">|</span> value <span class="hl opt">|</span> 
      <span class="hl kwa">if</span> <span class="hl kwd">is_even</span><span class="hl opt">(</span>value) <span class="hl kwa">then</span> 
        value <span class="hl opt">+</span> <span class="hl num">6</span> <span class="hl opt">-</span> other_min 
      <span class="hl kwa">else</span> 
        value <span class="hl opt">+</span> <span class="hl num">7</span> <span class="hl opt">-</span> other_min 
      <span class="hl kwa">end</span>
    <span class="hl kwa">end</span>
    values<span class="hl opt">.</span>collect<span class="hl opt">!</span> <span class="hl esc">{ | value | value - min }</span>
    
    <span class="hl kwa">if</span> even_min <span class="hl kwa">then</span>
      <span class="hl opt">[</span>values<span class="hl opt">,</span> other_values<span class="hl opt">]</span>
    <span class="hl kwa">else</span>
      <span class="hl opt">[</span>other_values<span class="hl opt">,</span> values<span class="hl opt">]</span>
    <span class="hl kwa">end</span>
  <span class="hl kwa">end</span>
  
  <span class="hl slc"># produce a bitmask representation of an array of offset locations</span>
  <span class="hl kwa">def</span> <span class="hl kwd">mask_for_offsets</span><span class="hl opt">(</span> offsets )
    mask <span class="hl opt">=</span> <span class="hl num">0</span>
    offsets<span class="hl opt">.</span>each <span class="hl esc">{ | value | mask = mask + ( 1 &lt;&lt; value ) }</span>
    mask
  <span class="hl kwa">end</span>

  <span class="hl slc"># finds a &quot;safe&quot; position that a position as described by a list of directions can be placed</span>
  <span class="hl slc"># without falling off any edge of the board.  the values returned a location to place the first piece</span>
  <span class="hl slc"># at so it will fit after making the described moves</span>
  <span class="hl kwa">def</span> <span class="hl kwd">start_adjust</span><span class="hl opt">(</span> directions )
    south <span class="hl opt">=</span> east <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    directions<span class="hl opt">.</span>each <span class="hl kwa">do</span> <span class="hl opt">|</span> direction <span class="hl opt">|</span>
      east <span class="hl opt">+=</span> <span class="hl num">1</span> <span class="hl kwa">if</span> <span class="hl opt">(</span> direction <span class="hl opt">==</span> <span class="hl kwc">:sw</span> <span class="hl opt">||</span> direction <span class="hl opt">==</span> <span class="hl kwc">:nw</span> <span class="hl opt">||</span> direction <span class="hl opt">==</span> <span class="hl kwc">:west</span> )
      south <span class="hl opt">+=</span> <span class="hl num">1</span> <span class="hl kwa">if</span> <span class="hl opt">(</span> direction <span class="hl opt">==</span> <span class="hl kwc">:nw</span> <span class="hl opt">||</span> direction <span class="hl opt">==</span> <span class="hl kwc">:ne</span> )   
    <span class="hl kwa">end</span>
    south <span class="hl opt">*</span> <span class="hl num">6</span> <span class="hl opt">+</span> east
  <span class="hl kwa">end</span>

  <span class="hl slc"># given a set of directions places the piece (as defined by a set of directions) on the board at </span>
  <span class="hl slc"># a location that will not take it off the edge</span>
  <span class="hl kwa">def</span> <span class="hl kwd">get_values</span> <span class="hl opt">(</span> directions )
    start <span class="hl opt">=</span> <span class="hl kwd">start_adjust</span><span class="hl opt">(</span>directions)
    values <span class="hl opt">= [</span> start <span class="hl opt">]</span>
    directions<span class="hl opt">.</span>each <span class="hl kwa">do</span> <span class="hl opt">|</span> direction <span class="hl opt">|</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>start <span class="hl opt">%</span> <span class="hl num">12</span> <span class="hl opt">&gt;=</span> <span class="hl num">6</span>) <span class="hl kwa">then</span> 
        start <span class="hl opt">+=</span> &#64;<span class="hl kwb">&#64;rotation_odd_adder</span><span class="hl opt">[</span>direction<span class="hl opt">]</span>
      <span class="hl kwa">else</span> 
        start <span class="hl opt">+=</span> &#64;<span class="hl kwb">&#64;rotation_even_adder</span><span class="hl opt">[</span>direction<span class="hl opt">]</span>
      <span class="hl kwa">end</span>
      values <span class="hl opt">+= [</span> start <span class="hl opt">]</span>
    <span class="hl kwa">end</span>
    
    <span class="hl slc"># some moves take you back to an existing location, we'll strip duplicates</span>
    values<span class="hl opt">.</span>uniq
  <span class="hl kwa">end</span>
<span class="hl kwa">end</span>

<span class="hl slc"># describes a piece and caches information about its rotations to as to be efficient for iteration</span>
<span class="hl slc"># ATTRIBUTES:</span>
<span class="hl slc">#   rotations -- all the rotations of the piece</span>
<span class="hl slc">#   type -- a numeic &quot;name&quot; of the piece</span>
<span class="hl slc">#   masks -- an array by location of all legal rotational masks (a n inner array) for that location</span>
<span class="hl slc">#   placed -- the mask that this piece was last placed at (not a location, but the actual mask used)</span>
<span class="hl kwa">class</span> Piece
  attr_reader <span class="hl kwc">:rotations</span><span class="hl opt">,</span> <span class="hl kwc">:type</span><span class="hl opt">,</span> <span class="hl kwc">:masks</span> 
  attr_accessor <span class="hl kwc">:placed</span> 
  
  <span class="hl slc"># transform hashes that change one direction into another when you either flip or rotate a set of directions</span>
  &#64;<span class="hl kwb">&#64;flip_converter</span> <span class="hl opt">=</span> <span class="hl esc">{ :west =&gt; :west, :east =&gt; :east, :nw =&gt; :sw, :ne =&gt; :se, :sw =&gt; :nw, :se =&gt; :ne }</span>
  &#64;<span class="hl kwb">&#64;rotate_converter</span> <span class="hl opt">=</span> <span class="hl esc">{ :west =&gt; :nw, :east =&gt; :se, :nw =&gt; :ne, :ne =&gt; :east, :sw =&gt; :west, :se =&gt; :sw }</span>
  
  <span class="hl kwa">def</span> <span class="hl kwd">initialize</span><span class="hl opt">(</span> directions<span class="hl opt">,</span> type )
    <span class="hl kwb">&#64;type</span> <span class="hl opt">=</span> type
    <span class="hl kwb">&#64;rotations</span> <span class="hl opt">=</span> Array<span class="hl opt">.</span><span class="hl kwd">new</span><span class="hl opt">(</span>)<span class="hl opt">;</span>
    <span class="hl kwb">&#64;map</span> <span class="hl opt">=</span> <span class="hl esc">{}</span>
    
    <span class="hl kwd">generate_rotations</span><span class="hl opt">(</span> directions )
    directions<span class="hl opt">.</span>collect<span class="hl opt">!</span> <span class="hl esc">{ | value | &#64;&#64;flip_converter[value] }</span>
    <span class="hl kwd">generate_rotations</span><span class="hl opt">(</span> directions )
    
    <span class="hl slc"># creates the masks AND a map that returns [location, rotation] for any given mask</span>
    <span class="hl slc"># this is used when a board is found and we want to draw it, otherwise the map is unused</span>
    <span class="hl kwb">&#64;masks</span> <span class="hl opt">=</span> Array<span class="hl opt">.</span><span class="hl kwd">new</span><span class="hl opt">(</span>)<span class="hl opt">;</span>
    <span class="hl num">0</span><span class="hl opt">.</span><span class="hl kwd">upto</span><span class="hl opt">(</span><span class="hl num">59</span>) <span class="hl kwa">do</span> <span class="hl opt">|</span> i <span class="hl opt">|</span>
      even <span class="hl opt">=</span> <span class="hl kwa">true</span>
      <span class="hl kwb">&#64;masks</span><span class="hl opt">[</span>i<span class="hl opt">] =</span> <span class="hl kwb">&#64;rotations</span><span class="hl opt">.</span>collect <span class="hl kwa">do</span> <span class="hl opt">|</span> rotation <span class="hl opt">|</span> 
        mask <span class="hl opt">=</span> rotation<span class="hl opt">.</span>start_masks<span class="hl opt">[</span>i<span class="hl opt">]</span>
        <span class="hl kwb">&#64;map</span><span class="hl opt">[</span>mask<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">]] = [</span> i<span class="hl opt">,</span> rotation <span class="hl opt">]</span> <span class="hl kwa">if</span> <span class="hl opt">(</span>mask) 
        mask <span class="hl opt">||</span> <span class="hl kwa">nil</span>
      <span class="hl kwa">end</span>
      <span class="hl kwb">&#64;masks</span><span class="hl opt">[</span>i<span class="hl opt">].</span>compact<span class="hl opt">!</span>
    <span class="hl kwa">end</span>
  <span class="hl kwa">end</span>
  
  <span class="hl slc"># rotates a set of directions through all six angles and adds a Rotation to the list for each one</span>
  <span class="hl kwa">def</span> <span class="hl kwd">generate_rotations</span><span class="hl opt">(</span> directions ) 
    <span class="hl num">6</span><span class="hl opt">.</span>times <span class="hl kwa">do</span>
      rotations<span class="hl opt">.</span><span class="hl kwd">push</span><span class="hl opt">(</span> Rotation<span class="hl opt">.</span><span class="hl kwd">new</span><span class="hl opt">(</span>directions))
      directions<span class="hl opt">.</span>collect<span class="hl opt">!</span> <span class="hl esc">{ | value | &#64;&#64;rotate_converter[value] }</span>
    <span class="hl kwa">end</span>
  <span class="hl kwa">end</span>
  
  <span class="hl slc"># given a board string, adds this piece to the board at whatever location/rotation</span>
  <span class="hl slc"># important: the outbound board string is 5 wide, the normal location notation is six wide (padded)</span>
  <span class="hl kwa">def</span> <span class="hl kwd">fill_string</span><span class="hl opt">(</span> board_string)
    location<span class="hl opt">,</span> rotation <span class="hl opt">=</span> <span class="hl kwb">&#64;map</span><span class="hl opt">[</span><span class="hl kwb">&#64;placed</span><span class="hl opt">]</span>
    rotation<span class="hl opt">.</span><span class="hl kwd">offsets</span><span class="hl opt">(</span>location)<span class="hl opt">.</span>each <span class="hl kwa">do</span> <span class="hl opt">|</span> offset <span class="hl opt">|</span>
      row<span class="hl opt">,</span> col <span class="hl opt">=</span> offset<span class="hl opt">.</span><span class="hl kwd">divmod</span><span class="hl opt">(</span><span class="hl num">6</span>)
      board_string<span class="hl opt">[</span> row<span class="hl opt">*</span><span class="hl num">5</span> <span class="hl opt">+</span> col<span class="hl opt">,</span> <span class="hl num">1</span> <span class="hl opt">] =</span> <span class="hl kwb">&#64;type</span><span class="hl opt">.</span>to_s
    <span class="hl kwa">end</span>
  <span class="hl kwa">end</span>
<span class="hl kwa">end</span>

<span class="hl slc"># a blank bit board having this form:</span>
<span class="hl slc">#</span>
<span class="hl slc">#    0 0 0 0 0 1</span>
<span class="hl slc">#     0 0 0 0 0 1</span>
<span class="hl slc">#    0 0 0 0 0 1</span>
<span class="hl slc">#     0 0 0 0 0 1</span>
<span class="hl slc">#    0 0 0 0 0 1</span>
<span class="hl slc">#     0 0 0 0 0 1</span>
<span class="hl slc">#    0 0 0 0 0 1</span>
<span class="hl slc">#     0 0 0 0 0 1</span>
<span class="hl slc">#    0 0 0 0 0 1</span>
<span class="hl slc">#     0 0 0 0 0 1</span>
<span class="hl slc">#    1 1 1 1 1 1</span>
<span class="hl slc">#</span>
<span class="hl slc"># where left lest significant bit is the top left and the most significant is the lower right </span>
<span class="hl slc"># the actual board only consists of the 0 places, the 1 places are blockers to keep things from running </span>
<span class="hl slc"># off the edges or bottom</span>
<span class="hl kwa">def</span> blank_board
  <span class="hl num">0b111111100000100000100000100000100000100000100000100000100000100000</span>
<span class="hl kwa">end</span>

<span class="hl kwa">def</span> full_board
  <span class="hl num">0b111111111111111111111111111111111111111111111111111111111111111111</span>
<span class="hl kwa">end</span>

<span class="hl slc"># determines if a location (bit position) is in an even row</span>
<span class="hl kwa">def</span> <span class="hl kwd">is_even</span><span class="hl opt">(</span> location)
  <span class="hl opt">(</span>location <span class="hl opt">%</span> <span class="hl num">12</span>) <span class="hl opt">&lt;</span> <span class="hl num">6</span>
<span class="hl kwa">end</span>

<span class="hl slc"># support function that create three utility maps:</span>
<span class="hl slc">#  &#64;&#64;converter -- for each row an array that maps a five bit row (via array mapping) </span>
<span class="hl slc">#                 to the a a five bit representation of the bits below it</span>
<span class="hl slc">#  &#64;&#64;bit_count -- maps a five bit row (via array mapping) to the number of 1s in the row</span>
<span class="hl slc">#  &#64;&#64;new_regions -- maps a five bit row (via array mapping) to an array of &quot;region&quot; arrays</span>
<span class="hl slc">#                   a region array has three values the first is a mask of bits in the region, </span>
<span class="hl slc">#                   the second is the count of those bits and the third is identical to the first</span>
<span class="hl slc">#                   examples:</span>
<span class="hl slc">#                           0b10010 =&gt; [ 0b01100, 2, 0b01100 ], [ 0b00001, 1, 0b00001]</span>
<span class="hl slc">#                           0b01010 =&gt; [ 0b10000, 1, 0b10000 ], [ 0b00100, 1, 0b00100 ], [ 0b00001, 1, 0b00001]</span>
<span class="hl slc">#                           0b10001 =&gt; [ 0b01110, 3, 0b01110 ]</span>
<span class="hl kwa">def</span> create_collector_support
  odd_map <span class="hl opt">= [</span><span class="hl num">0b11</span><span class="hl opt">,</span> <span class="hl num">0b110</span><span class="hl opt">,</span> <span class="hl num">0b1100</span><span class="hl opt">,</span> <span class="hl num">0b11000</span><span class="hl opt">,</span> <span class="hl num">0b10000</span><span class="hl opt">]</span> 
  even_map <span class="hl opt">= [</span><span class="hl num">0b1</span><span class="hl opt">,</span> <span class="hl num">0b11</span><span class="hl opt">,</span> <span class="hl num">0b110</span><span class="hl opt">,</span> <span class="hl num">0b1100</span><span class="hl opt">,</span> <span class="hl num">0b11000</span><span class="hl opt">]</span> 
  
  all_odds <span class="hl opt">=</span> Array<span class="hl opt">.</span><span class="hl kwd">new</span><span class="hl opt">(</span><span class="hl num">0b100000</span>)
  all_evens <span class="hl opt">=</span> Array<span class="hl opt">.</span><span class="hl kwd">new</span><span class="hl opt">(</span><span class="hl num">0b100000</span>)
  bit_counts <span class="hl opt">=</span> Array<span class="hl opt">.</span><span class="hl kwd">new</span><span class="hl opt">(</span><span class="hl num">0b100000</span>)
  new_regions <span class="hl opt">=</span> Array<span class="hl opt">.</span><span class="hl kwd">new</span><span class="hl opt">(</span><span class="hl num">0b100000</span>)
  <span class="hl num">0</span><span class="hl opt">.</span><span class="hl kwd">upto</span><span class="hl opt">(</span><span class="hl num">0b11111</span>) <span class="hl kwa">do</span> <span class="hl opt">|</span> i <span class="hl opt">|</span>
    bit_count <span class="hl opt">=</span> odd <span class="hl opt">=</span> even <span class="hl opt">=</span> <span class="hl num">0</span>
    <span class="hl num">0</span><span class="hl opt">.</span><span class="hl kwd">upto</span><span class="hl opt">(</span><span class="hl num">4</span>) <span class="hl kwa">do</span> <span class="hl opt">|</span> bit <span class="hl opt">|</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>i<span class="hl opt">[</span>bit<span class="hl opt">] ==</span> <span class="hl num">1</span>) <span class="hl kwa">then</span>
        bit_count <span class="hl opt">+=</span> <span class="hl num">1</span>
        odd <span class="hl opt">|=</span> odd_map<span class="hl opt">[</span>bit<span class="hl opt">]</span>
        even <span class="hl opt">|=</span> even_map<span class="hl opt">[</span>bit<span class="hl opt">]</span>
      <span class="hl kwa">end</span>
    <span class="hl kwa">end</span>
    all_odds<span class="hl opt">[</span>i<span class="hl opt">] =</span> odd
    all_evens<span class="hl opt">[</span>i<span class="hl opt">] =</span> even
    bit_counts<span class="hl opt">[</span>i<span class="hl opt">] =</span> bit_count
    new_regions<span class="hl opt">[</span>i<span class="hl opt">] =</span> <span class="hl kwd">create_regions</span><span class="hl opt">(</span> i)
  <span class="hl kwa">end</span>

  &#64;<span class="hl kwb">&#64;converter</span> <span class="hl opt">= []</span>
  <span class="hl num">10</span><span class="hl opt">.</span>times <span class="hl esc">{ | row | &#64;&#64;converter.push((row % 2 == 0) ? all_evens : all_odds) }</span>
  &#64;<span class="hl kwb">&#64;bit_counts</span> <span class="hl opt">=</span> bit_counts
  &#64;<span class="hl kwb">&#64;regions</span> <span class="hl opt">=</span> new_regions<span class="hl opt">.</span>collect <span class="hl esc">{ | set | set.collect { | value | [ value, bit_counts[value], value] }</span> <span class="hl opt">}</span>
<span class="hl kwa">end</span>
 
<span class="hl slc"># determines if a board is punable, meaning that there is no possibility that it </span>
<span class="hl slc"># can be filled up with pieces.  A board is prunable if there is a grouping of unfilled spaces</span>
<span class="hl slc"># that are not a multiple of five.  The following board is an example of a prunable board:</span>
<span class="hl slc">#    0 0 1 0 0</span>
<span class="hl slc">#     0 1 0 0 0</span>
<span class="hl slc">#    1 1 0 0 0</span>
<span class="hl slc">#     0 1 0 0 0</span>
<span class="hl slc">#    0 0 0 0 0</span>
<span class="hl slc">#       ...</span>
<span class="hl slc">#</span>
<span class="hl slc"># This board is prunable because the top left corner is only 3 bits in area, no piece will ever fit it</span>
<span class="hl slc"># parameters:</span>
<span class="hl slc">#   board -- an initial bit board (6 bit padded rows, see blank_board for format)</span>
<span class="hl slc">#   location -- starting location, everything above and to the left is already full</span>
<span class="hl slc">#   slotting -- set to true only when testing initial pieces, when filling normally</span>
<span class="hl slc">#               additional assumptions are possible</span>
<span class="hl slc">#</span>
<span class="hl slc"># Algorithm:</span>
<span class="hl slc">#    The algorithm starts at the top row (as determined by location) and iterates a row at a time</span>
<span class="hl slc">#    maintainng counts of active open areas (kept in the collector array) each collector contains</span>
<span class="hl slc">#    three values at the start of an iteration: </span>
<span class="hl slc">#          0: mask of bits that would be adjacent to the collector in this row</span>
<span class="hl slc">#          1: the number of bits collected so far</span>
<span class="hl slc">#          2: a scratch space starting as zero, but used during the computation to represent</span>
<span class="hl slc">#             the empty bits in the new row that are adjacent (position 0)</span>
<span class="hl slc">#  The exact procedure is described in-code </span>
<span class="hl kwa">def</span> <span class="hl kwd">prunable</span><span class="hl opt">(</span> board<span class="hl opt">,</span> location<span class="hl opt">,</span> slotting <span class="hl opt">=</span> <span class="hl kwa">false</span>)
  collectors <span class="hl opt">= []</span>
  <span class="hl slc"># loop accross the rows</span>
  <span class="hl opt">(</span>location <span class="hl opt">/</span> <span class="hl num">6</span>)<span class="hl opt">.</span>to_i<span class="hl opt">.</span><span class="hl kwd">upto</span><span class="hl opt">(</span><span class="hl num">9</span>) <span class="hl kwa">do</span> <span class="hl opt">|</span> row_on <span class="hl opt">|</span> 
    <span class="hl slc"># obtain a set of regions representing the bits of the curent row.  </span>
    regions <span class="hl opt">=</span> &#64;<span class="hl kwb">&#64;regions</span><span class="hl opt">[(</span>board <span class="hl opt">&gt;&gt; (</span>row_on <span class="hl opt">*</span> <span class="hl num">6</span>)) <span class="hl opt">&amp;</span> <span class="hl num">0b11111</span><span class="hl opt">]</span>
    converter <span class="hl opt">=</span> &#64;<span class="hl kwb">&#64;converter</span><span class="hl opt">[</span>row_on<span class="hl opt">]</span>
    
    <span class="hl slc"># track the number of collectors at the start of the cycle so that</span>
    <span class="hl slc"># we don't compute against newly created collectors, only existing collectors</span>
    initial_collector_count <span class="hl opt">=</span> collectors<span class="hl opt">.</span>length
    
    <span class="hl slc"># loop against the regions.  For each region of the row</span>
    <span class="hl slc"># we will see if it connects to one or more existing collectors.</span>
    <span class="hl slc"># if it connects to 1 collector, the bits from the region are added to the </span>
    <span class="hl slc"># bits of the collector and the mask is placed in collector[2]</span>
    <span class="hl slc"># If the region overlaps more than one collector then all the collectors</span>
    <span class="hl slc"># it overlaps with are merged into the first one (the others are set to nil in the array) </span>
    <span class="hl slc"># if NO collectors are found then the region is copied as a new collector</span>
    regions<span class="hl opt">.</span>each <span class="hl kwa">do</span> <span class="hl opt">|</span> region <span class="hl opt">|</span>
      collector_found <span class="hl opt">=</span> <span class="hl kwa">nil</span>
      region_mask <span class="hl opt">=</span> region<span class="hl opt">[</span><span class="hl num">2</span><span class="hl opt">]</span>
      initial_collector_count<span class="hl opt">.</span>times <span class="hl kwa">do</span> <span class="hl opt">|</span> collector_num <span class="hl opt">|</span>
        collector <span class="hl opt">=</span> collectors<span class="hl opt">[</span>collector_num<span class="hl opt">]</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>collector) <span class="hl kwa">then</span>
          collector_mask <span class="hl opt">=</span> collector<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">]</span>
          <span class="hl kwa">if</span> <span class="hl opt">(</span>collector_mask <span class="hl opt">&amp;</span> region_mask <span class="hl opt">!=</span> <span class="hl num">0</span>) <span class="hl kwa">then</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>collector_found) <span class="hl kwa">then</span>
              collector_found<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] |=</span> collector_mask
              collector_found<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">] +=</span> collector<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">]</span>
              collector_found<span class="hl opt">[</span><span class="hl num">2</span><span class="hl opt">] |=</span> collector<span class="hl opt">[</span><span class="hl num">2</span><span class="hl opt">]</span>
              collectors<span class="hl opt">[</span>collector_num<span class="hl opt">] =</span> <span class="hl kwa">nil</span>
            <span class="hl kwa">else</span>
              collector_found <span class="hl opt">=</span> collector
              collector<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">] +=</span> region<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">]</span>
              collector<span class="hl opt">[</span><span class="hl num">2</span><span class="hl opt">] |=</span> region_mask
            <span class="hl kwa">end</span>
          <span class="hl kwa">end</span>
        <span class="hl kwa">end</span>
      <span class="hl kwa">end</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>collector_found <span class="hl opt">==</span> <span class="hl kwa">nil</span>) <span class="hl kwa">then</span>
        collectors<span class="hl opt">.</span><span class="hl kwd">push</span><span class="hl opt">(</span>Array<span class="hl opt">.</span><span class="hl kwd">new</span><span class="hl opt">(</span>region))
      <span class="hl kwa">end</span>
    <span class="hl kwa">end</span>
    
    <span class="hl slc"># check the existing collectors, if any collector overlapped no bits in the region its [2] value will</span>
    <span class="hl slc"># be zero.  The size of any such reaason is tested if it is not a muliple of five true is returned since</span>
    <span class="hl slc"># the board is prunable.  if it is a multiple of five it is removed.</span>
    <span class="hl slc"># Collector that are still active have a new adjacent value [0] set based n the matched bits </span>
    <span class="hl slc"># and have [2] cleared out for the next cycle.</span>
    collectors<span class="hl opt">.</span>length<span class="hl opt">.</span>times <span class="hl kwa">do</span> <span class="hl opt">|</span> collector_num <span class="hl opt">|</span>
      collector <span class="hl opt">=</span> collectors<span class="hl opt">[</span>collector_num<span class="hl opt">]</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>collector) <span class="hl kwa">then</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>collector<span class="hl opt">[</span><span class="hl num">2</span><span class="hl opt">] ==</span> <span class="hl num">0</span>) <span class="hl kwa">then</span>
          <span class="hl kwa">return true if</span> <span class="hl opt">(</span>collector<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">] %</span> <span class="hl num">5</span> <span class="hl opt">!=</span> <span class="hl num">0</span>)
          collectors<span class="hl opt">[</span>collector_num<span class="hl opt">] =</span> <span class="hl kwa">nil</span>
        <span class="hl kwa">else</span>
          <span class="hl slc"># if a collector matches all bits in the row then we can return unprunable early for the </span>
          <span class="hl slc"># follwing reasons:</span>
          <span class="hl slc">#    1) there can be no more unavailable bits bince we fill from the top left downward</span>
          <span class="hl slc">#    2) all previous regions have been closed or joined so only this region can fail</span>
          <span class="hl slc">#    3) this region must be good since there can never be only 1 region that is nuot</span>
          <span class="hl slc">#       a multiple of five</span>
          <span class="hl slc"># this rule only applies when filling normally, so we ignore the rule if we are &quot;slotting&quot;</span>
          <span class="hl slc"># in pieces to see what configurations work for them (the only other time this algorithm is used).</span>
          <span class="hl kwa">return false if</span> <span class="hl opt">(</span>collector<span class="hl opt">[</span><span class="hl num">2</span><span class="hl opt">] ==</span> <span class="hl num">0b11111</span> <span class="hl opt">&amp;&amp; !</span>slotting)
          collector<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] =</span> converter<span class="hl opt">[</span>collector<span class="hl opt">[</span><span class="hl num">2</span><span class="hl opt">]]</span>
          collector<span class="hl opt">[</span><span class="hl num">2</span><span class="hl opt">] =</span> <span class="hl num">0</span>
        <span class="hl kwa">end</span>
      <span class="hl kwa">end</span>
    <span class="hl kwa">end</span>
    
    <span class="hl slc"># get rid of all the empty converters for the next round</span>
    collectors<span class="hl opt">.</span>compact<span class="hl opt">!</span>
  <span class="hl kwa">end</span>
  <span class="hl kwa">return false if</span> <span class="hl opt">(</span>collectors<span class="hl opt">.</span>length <span class="hl opt">&lt;=</span> <span class="hl num">1</span>) <span class="hl slc"># 1 collector or less and the region is fine</span>
  collectors<span class="hl opt">.</span>any<span class="hl opt">?</span> <span class="hl esc">{ | collector | (collector[1] % 5) != 0 }</span> <span class="hl slc"># more than 1 and we test them all for bad size</span>
<span class="hl kwa">end</span>
  
<span class="hl slc"># creates a region given a row mask.  see prunable for what a &quot;region&quot; is</span>
<span class="hl kwa">def</span> <span class="hl kwd">create_regions</span><span class="hl opt">(</span> value )
  regions <span class="hl opt">= []</span>
  cur_region <span class="hl opt">=</span> <span class="hl num">0</span>
  <span class="hl num">5</span><span class="hl opt">.</span>times <span class="hl kwa">do</span> <span class="hl opt">|</span> bit <span class="hl opt">|</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>value<span class="hl opt">[</span>bit<span class="hl opt">] ==</span> <span class="hl num">0</span>) <span class="hl kwa">then</span>
      cur_region <span class="hl opt">|=</span> <span class="hl num">1</span> <span class="hl opt">&lt;&lt;</span> bit
    <span class="hl kwa">else</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>cur_region <span class="hl opt">!=</span> <span class="hl num">0</span> ) <span class="hl kwa">then</span>
        regions<span class="hl opt">.</span><span class="hl kwd">push</span><span class="hl opt">(</span> cur_region)
        cur_region <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
      <span class="hl kwa">end</span>
    <span class="hl kwa">end</span>
  <span class="hl kwa">end</span>
  regions<span class="hl opt">.</span><span class="hl kwd">push</span><span class="hl opt">(</span>cur_region) <span class="hl kwa">if</span> <span class="hl opt">(</span>cur_region <span class="hl opt">!=</span> <span class="hl num">0</span>)
  regions
<span class="hl kwa">end</span>

<span class="hl slc"># find up to the counted number of solutions (or all solutions) and prints the final result</span>
<span class="hl kwa">def</span> find_all
  <span class="hl kwd">find_top</span><span class="hl opt">(</span> <span class="hl num">1</span>)
  <span class="hl kwd">find_top</span><span class="hl opt">(</span> <span class="hl num">0</span>)
  print_results
<span class="hl kwa">end</span>

<span class="hl slc"># show the board</span>
<span class="hl kwa">def</span> print_results
  print <span class="hl str">&quot;</span><span class="hl esc">#{&#64;boards_found}</span> <span class="hl str">solutions found\n\n&quot;</span>
  <span class="hl kwd">print_full_board</span><span class="hl opt">(</span> <span class="hl kwb">&#64;min_board</span>)
  print <span class="hl str">&quot;\n&quot;</span>
  <span class="hl kwd">print_full_board</span><span class="hl opt">(</span> <span class="hl kwb">&#64;max_board</span>)
  print <span class="hl str">&quot;\n&quot;</span>
<span class="hl kwa">end</span>

<span class="hl slc"># finds solutions.  This special version of the main function is only used for the top level</span>
<span class="hl slc"># the reason for it is basically to force a particular ordering on how the rotations are tested for</span>
<span class="hl slc"># the first piece.  It is called twice, first looking for placements of the odd rotations and then </span>
<span class="hl slc"># looking for placements of the even locations.</span>
<span class="hl slc"># </span>
<span class="hl slc"># WHY?</span>
<span class="hl slc">#   Since any found solution has an inverse we want to maximize finding solutions that are not already found </span>
<span class="hl slc">#   as an inverse.  The inverse will ALWAYS be 3 one of the piece configurations that is exactly 3 rotations away </span>
<span class="hl slc">#   (an odd number).  Checking even vs odd then produces a higher probability of finding more pieces earlier </span>
<span class="hl slc">#   in the cycle.  We still need to keep checking all the permutations, but our probability of finding one will</span>
<span class="hl slc">#   diminsh over time.  Since we are TOLD how many to search for this lets us exit before checking all pieces</span>
<span class="hl slc">#   this bennifit is very great when seeking small numbers of solutions and is 0 when looking for more than the </span>
<span class="hl slc">#   maximum number </span>
<span class="hl kwa">def</span> <span class="hl kwd">find_top</span><span class="hl opt">(</span> rotation_skip) 
  board <span class="hl opt">=</span> blank_board
  <span class="hl opt">(</span><span class="hl kwb">&#64;pieces</span><span class="hl opt">.</span>length-1)<span class="hl opt">.</span>times <span class="hl kwa">do</span>
    piece <span class="hl opt">=</span> <span class="hl kwb">&#64;pieces</span><span class="hl opt">.</span>shift
    piece<span class="hl opt">.</span>masks<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">].</span>each <span class="hl kwa">do</span> <span class="hl opt">|</span> mask<span class="hl opt">,</span> imask<span class="hl opt">,</span> cmask <span class="hl opt">|</span>
      <span class="hl kwa">if</span> <span class="hl opt">((</span>rotation_skip <span class="hl opt">+=</span> <span class="hl num">1</span>) <span class="hl opt">%</span> <span class="hl num">2</span> <span class="hl opt">==</span> <span class="hl num">0</span>) <span class="hl kwa">then</span>
        piece<span class="hl opt">.</span>placed <span class="hl opt">=</span> mask
        <span class="hl kwd">find</span><span class="hl opt">(</span> <span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">,</span> board <span class="hl opt">|</span> mask) 
      <span class="hl kwa">end</span>
    <span class="hl kwa">end</span>
    <span class="hl kwb">&#64;pieces</span><span class="hl opt">.</span><span class="hl kwd">push</span><span class="hl opt">(</span>piece)
  <span class="hl kwa">end</span>
  piece <span class="hl opt">=</span> <span class="hl kwb">&#64;pieces</span><span class="hl opt">.</span>shift
  <span class="hl kwb">&#64;pieces</span><span class="hl opt">.</span><span class="hl kwd">push</span><span class="hl opt">(</span>piece)
<span class="hl kwa">end</span>

<span class="hl slc"># the normail find routine, iterates through the available pieces, checks all rotations at the current location</span>
<span class="hl slc"># and adds any boards found.  depth is acheived via recursion.  the overall approach is described </span>
<span class="hl slc"># here: http://www-128.ibm.com/developerworks/java/library/j-javaopt/</span>
<span class="hl slc"># parameters:</span>
<span class="hl slc">#  start_location -- where to start looking for place for the next piece at</span>
<span class="hl slc">#  placed -- number of pieces placed</span>
<span class="hl slc">#  board -- current state of the board</span>
<span class="hl slc">#</span>
<span class="hl slc"># see in-code comments</span>
<span class="hl kwa">def</span> <span class="hl kwd">find</span><span class="hl opt">(</span> start_location<span class="hl opt">,</span> placed<span class="hl opt">,</span> board) 
  <span class="hl slc"># find the next location to place a piece by looking for an empty bit</span>
  <span class="hl kwa">while</span> board<span class="hl opt">[</span>start_location<span class="hl opt">] ==</span> <span class="hl num">1</span>
    start_location <span class="hl opt">+=</span> <span class="hl num">1</span> 
  <span class="hl kwa">end</span>
  
  <span class="hl kwb">&#64;pieces</span><span class="hl opt">.</span>length<span class="hl opt">.</span>times <span class="hl kwa">do</span>
    piece <span class="hl opt">=</span> <span class="hl kwb">&#64;pieces</span><span class="hl opt">.</span>shift
    piece<span class="hl opt">.</span>masks<span class="hl opt">[</span>start_location<span class="hl opt">].</span>each <span class="hl kwa">do</span> <span class="hl opt">|</span> mask<span class="hl opt">,</span> imask<span class="hl opt">,</span> cmask <span class="hl opt">|</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span> board <span class="hl opt">&amp;</span> cmask <span class="hl opt">==</span> imask) <span class="hl kwa">then</span>
        piece<span class="hl opt">.</span>placed <span class="hl opt">=</span> mask
        <span class="hl kwa">if</span> <span class="hl opt">(</span>placed <span class="hl opt">==</span> <span class="hl num">9</span>) <span class="hl kwa">then</span>
          add_board
        <span class="hl kwa">else</span>
          <span class="hl kwd">find</span><span class="hl opt">(</span> start_location <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">,</span> placed <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">,</span> board <span class="hl opt">|</span> mask) 
        <span class="hl kwa">end</span>
      <span class="hl kwa">end</span>
    <span class="hl kwa">end</span>
    <span class="hl kwb">&#64;pieces</span><span class="hl opt">.</span><span class="hl kwd">push</span><span class="hl opt">(</span>piece)
  <span class="hl kwa">end</span>
<span class="hl kwa">end</span>

<span class="hl slc"># print the board</span>
<span class="hl kwa">def</span> <span class="hl kwd">print_full_board</span><span class="hl opt">(</span> board_string)
  <span class="hl num">10</span><span class="hl opt">.</span>times <span class="hl kwa">do</span> <span class="hl opt">|</span> row <span class="hl opt">|</span>
    print <span class="hl str">&quot; &quot;</span> <span class="hl kwa">if</span> <span class="hl opt">(</span>row <span class="hl opt">%</span> <span class="hl num">2</span> <span class="hl opt">==</span> <span class="hl num">1</span>) 
    <span class="hl num">5</span><span class="hl opt">.</span>times <span class="hl kwa">do</span> <span class="hl opt">|</span> col <span class="hl opt">|</span>
      print <span class="hl str">&quot;</span><span class="hl esc">#{board_string[row*5 + col,1]}</span> <span class="hl str">&quot;</span>
    <span class="hl kwa">end</span>
    print <span class="hl str">&quot;\n&quot;</span>
  <span class="hl kwa">end</span>
<span class="hl kwa">end</span>

<span class="hl slc"># when a board is found we &quot;draw it&quot; into a string and then flip that string, adding both to</span>
<span class="hl slc"># the list (hash) of solutions if they are unique.  </span>
<span class="hl kwa">def</span> add_board
  board_string <span class="hl opt">=</span> <span class="hl str">&quot;99999999999999999999999999999999999999999999999999&quot;</span>
  <span class="hl kwb">&#64;all_pieces</span><span class="hl opt">.</span>each <span class="hl esc">{  | piece | piece.fill_string( board_string ) }</span>
  <span class="hl kwd">save</span><span class="hl opt">(</span> board_string)
  <span class="hl kwd">save</span><span class="hl opt">(</span> board_string<span class="hl opt">.</span>reverse)
<span class="hl kwa">end</span>

<span class="hl slc"># adds a board string to the list (if new) and updates the current best/worst board</span>
<span class="hl kwa">def</span> <span class="hl kwd">save</span><span class="hl opt">(</span> board_string)
  <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwb">&#64;all_boards</span><span class="hl opt">[</span>board_string<span class="hl opt">] ==</span> <span class="hl kwa">nil</span>) <span class="hl kwa">then</span>
    <span class="hl kwb">&#64;min_board</span> <span class="hl opt">=</span> board_string <span class="hl kwa">if</span> <span class="hl opt">(</span>board_string <span class="hl opt">&lt;</span> <span class="hl kwb">&#64;min_board</span>)
    <span class="hl kwb">&#64;max_board</span> <span class="hl opt">=</span> board_string <span class="hl kwa">if</span> <span class="hl opt">(</span>board_string <span class="hl opt">&gt;</span> <span class="hl kwb">&#64;max_board</span>)
    <span class="hl kwb">&#64;all_boards</span><span class="hl opt">.</span><span class="hl kwd">store</span><span class="hl opt">(</span>board_string<span class="hl opt">,</span><span class="hl kwa">true</span>)
    <span class="hl kwb">&#64;boards_found</span> <span class="hl opt">+=</span> <span class="hl num">1</span>

    <span class="hl slc"># the exit motif is a time saver.  Ideally the function should return, but those tests</span>
    <span class="hl slc"># take noticable time (performance).</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwb">&#64;boards_found</span> <span class="hl opt">==</span> <span class="hl kwb">&#64;stop_count</span>) <span class="hl kwa">then</span>
      print_results
      <span class="hl kwd">exit</span><span class="hl opt">(</span><span class="hl num">0</span>)
    <span class="hl kwa">end</span>
  <span class="hl kwa">end</span>
<span class="hl kwa">end</span>


<span class="hl slc">##</span>
<span class="hl slc">## MAIN BODY :)</span>
<span class="hl slc">##</span>
create_collector_support
<span class="hl kwb">&#64;pieces</span> <span class="hl opt">= [</span> 
  Piece<span class="hl opt">.</span><span class="hl kwd">new</span><span class="hl opt">( [</span> <span class="hl kwc">:nw</span><span class="hl opt">,</span> <span class="hl kwc">:ne</span><span class="hl opt">,</span> <span class="hl kwc">:east</span><span class="hl opt">,</span> <span class="hl kwc">:east</span> <span class="hl opt">],</span> <span class="hl num">2</span>)<span class="hl opt">,</span>
  Piece<span class="hl opt">.</span><span class="hl kwd">new</span><span class="hl opt">( [</span> <span class="hl kwc">:ne</span><span class="hl opt">,</span> <span class="hl kwc">:se</span><span class="hl opt">,</span> <span class="hl kwc">:east</span><span class="hl opt">,</span> <span class="hl kwc">:ne</span> <span class="hl opt">],</span> <span class="hl num">7</span>)<span class="hl opt">,</span>
  Piece<span class="hl opt">.</span><span class="hl kwd">new</span><span class="hl opt">( [</span> <span class="hl kwc">:ne</span><span class="hl opt">,</span> <span class="hl kwc">:east</span><span class="hl opt">,</span> <span class="hl kwc">:ne</span><span class="hl opt">,</span> <span class="hl kwc">:nw</span> <span class="hl opt">],</span> <span class="hl num">1</span>)<span class="hl opt">,</span>
  Piece<span class="hl opt">.</span><span class="hl kwd">new</span><span class="hl opt">( [</span> <span class="hl kwc">:east</span><span class="hl opt">,</span> <span class="hl kwc">:sw</span><span class="hl opt">,</span> <span class="hl kwc">:sw</span><span class="hl opt">,</span> <span class="hl kwc">:se</span> <span class="hl opt">],</span> <span class="hl num">6</span>)<span class="hl opt">,</span>
  Piece<span class="hl opt">.</span><span class="hl kwd">new</span><span class="hl opt">( [</span> <span class="hl kwc">:east</span><span class="hl opt">,</span> <span class="hl kwc">:ne</span><span class="hl opt">,</span> <span class="hl kwc">:se</span><span class="hl opt">,</span> <span class="hl kwc">:ne</span> <span class="hl opt">],</span> <span class="hl num">5</span>)<span class="hl opt">,</span>
  Piece<span class="hl opt">.</span><span class="hl kwd">new</span><span class="hl opt">( [</span> <span class="hl kwc">:east</span><span class="hl opt">,</span> <span class="hl kwc">:east</span><span class="hl opt">,</span> <span class="hl kwc">:east</span><span class="hl opt">,</span> <span class="hl kwc">:se</span> <span class="hl opt">],</span> <span class="hl num">0</span>)<span class="hl opt">,</span>
  Piece<span class="hl opt">.</span><span class="hl kwd">new</span><span class="hl opt">( [</span> <span class="hl kwc">:ne</span><span class="hl opt">,</span> <span class="hl kwc">:nw</span><span class="hl opt">,</span> <span class="hl kwc">:se</span><span class="hl opt">,</span> <span class="hl kwc">:east</span><span class="hl opt">,</span> <span class="hl kwc">:se</span> <span class="hl opt">],</span> <span class="hl num">4</span>)<span class="hl opt">,</span>
  Piece<span class="hl opt">.</span><span class="hl kwd">new</span><span class="hl opt">( [</span> <span class="hl kwc">:se</span><span class="hl opt">,</span> <span class="hl kwc">:se</span><span class="hl opt">,</span> <span class="hl kwc">:se</span><span class="hl opt">,</span> <span class="hl kwc">:west</span> <span class="hl opt">],</span> <span class="hl num">9</span>)<span class="hl opt">,</span> 
  Piece<span class="hl opt">.</span><span class="hl kwd">new</span><span class="hl opt">( [</span> <span class="hl kwc">:se</span><span class="hl opt">,</span> <span class="hl kwc">:se</span><span class="hl opt">,</span> <span class="hl kwc">:east</span><span class="hl opt">,</span> <span class="hl kwc">:se</span> <span class="hl opt">],</span> <span class="hl num">8</span>)<span class="hl opt">,</span>
  Piece<span class="hl opt">.</span><span class="hl kwd">new</span><span class="hl opt">( [</span> <span class="hl kwc">:east</span><span class="hl opt">,</span> <span class="hl kwc">:east</span><span class="hl opt">,</span> <span class="hl kwc">:sw</span><span class="hl opt">,</span> <span class="hl kwc">:se</span> <span class="hl opt">],</span> <span class="hl num">3</span>)
  <span class="hl opt">];</span>
  
<span class="hl kwb">&#64;all_pieces</span> <span class="hl opt">=</span> Array<span class="hl opt">.</span><span class="hl kwd">new</span><span class="hl opt">(</span> <span class="hl kwb">&#64;pieces</span>)

<span class="hl kwb">&#64;min_board</span> <span class="hl opt">=</span> <span class="hl str">&quot;99999999999999999999999999999999999999999999999999&quot;</span>
<span class="hl kwb">&#64;max_board</span> <span class="hl opt">=</span> <span class="hl str">&quot;00000000000000000000000000000000000000000000000000&quot;</span>
<span class="hl kwb">&#64;stop_count</span> <span class="hl opt">=</span> <span class="hl kwc">ARGV</span><span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">].</span>to_i <span class="hl opt">||</span> <span class="hl num">2089</span>
<span class="hl kwb">&#64;all_boards</span> <span class="hl opt">=</span> <span class="hl esc">{}</span>
<span class="hl kwb">&#64;boards_found</span> <span class="hl opt">=</span> <span class="hl num">0</span>

find_all <span class="hl slc">######## DO IT!!!</span>

