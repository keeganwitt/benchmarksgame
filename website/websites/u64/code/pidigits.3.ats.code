<span class="hl com">(*</span>
<span class="hl com">** The Computer Language Benchmarks Game</span>
<span class="hl com">** http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com">**</span>
<span class="hl com">** contributed by Hongwei Xi </span>
<span class="hl com">** contributed by Zhiqiang Ren </span>
<span class="hl com">**</span>
<span class="hl com">** This code is nearly a direct translation from a C submission</span>
<span class="hl com">** by Bonzini, Bartell and Mellor</span>
<span class="hl com">**</span>
<span class="hl com">** compilation command:</span>
<span class="hl com">**   atscc -O3 -fomit-frame-pointer pidigits3.dats -o pidigits3 -lgmp</span>
<span class="hl com">*)</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">staload</span> <span class="hl str">&quot;libc/SATS/gmp.sats&quot;</span>

<span class="hl com">(* ****** ****** *)</span>

var numer<span class="hl opt">:</span> mpz_vt
viewdef v_numer <span class="hl opt">=</span> mpz_vt &#64; numer
<span class="hl kwa">val</span> <span class="hl opt">() =</span> mpz_init_set_uint <span class="hl opt">(</span>numer<span class="hl opt">,</span> <span class="hl num">1U</span><span class="hl opt">)</span>

var denom<span class="hl opt">:</span> mpz_vt
viewdef v_denom <span class="hl opt">=</span> mpz_vt &#64; denom
<span class="hl kwa">val</span> <span class="hl opt">() =</span> mpz_init_set_uint <span class="hl opt">(</span>denom<span class="hl opt">,</span> <span class="hl num">1U</span><span class="hl opt">)</span>

var accum<span class="hl opt">:</span> mpz_vt
viewdef v_accum <span class="hl opt">=</span> mpz_vt &#64; accum
<span class="hl kwa">val</span> <span class="hl opt">() =</span> mpz_init_set_uint <span class="hl opt">(</span>accum<span class="hl opt">,</span> <span class="hl num">0U</span><span class="hl opt">)</span>

var tmp1<span class="hl opt">:</span> mpz_vt
viewdef v_tmp1 <span class="hl opt">=</span> mpz_vt &#64; tmp1
<span class="hl kwa">val</span> <span class="hl opt">() =</span> mpz_init <span class="hl opt">(</span>tmp1<span class="hl opt">)</span>

var tmp2<span class="hl opt">:</span> mpz_vt
viewdef v_tmp2 <span class="hl opt">=</span> mpz_vt &#64; tmp2
<span class="hl kwa">val</span> <span class="hl opt">() =</span> mpz_init <span class="hl opt">(</span>tmp2<span class="hl opt">)</span>

<span class="hl com">(* ****** ****** *)</span>

viewdef v_all <span class="hl opt">=</span> &#64;<span class="hl opt">(</span>v_numer<span class="hl opt">,</span> v_denom<span class="hl opt">,</span> v_accum<span class="hl opt">,</span> v_tmp1<span class="hl opt">,</span> v_tmp2<span class="hl opt">)</span>
prval pf_all <span class="hl opt">=</span> &#64;<span class="hl opt">(</span>
  view&#64; numer<span class="hl opt">,</span> view&#64; denom<span class="hl opt">,</span> view&#64; accum<span class="hl opt">,</span> view&#64; tmp1<span class="hl opt">,</span> view&#64; tmp2
<span class="hl opt">)</span>
prval pfbox_all <span class="hl opt">=</span>
  vbox_make <span class="hl opt">{</span>v_all<span class="hl opt">} (</span>pf_all<span class="hl opt">)</span> where <span class="hl opt">{</span>
  <span class="hl kwa">extern</span> prfun vbox_make <span class="hl opt">{</span>v<span class="hl opt">:</span>view<span class="hl opt">} (</span>pf<span class="hl opt">:</span> v<span class="hl opt">):</span> vbox <span class="hl opt">(</span>v<span class="hl opt">)</span>
<span class="hl opt">}</span> <span class="hl slc">// end of [val]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">extern</span>
<span class="hl kwa">fun</span> mpz_mul_2exp <span class="hl opt">(</span>
    _<span class="hl opt">: &amp;</span>mpz_vt<span class="hl opt">,</span> _<span class="hl opt">: &amp;</span>mpz_vt<span class="hl opt">,</span> _<span class="hl opt">:</span> <span class="hl kwb">int</span>
  <span class="hl opt">) :&lt;&gt;</span> void <span class="hl opt">=</span> <span class="hl str">&quot;__mpz_mul_2exp&quot;</span>

<span class="hl kwa">extern</span>
<span class="hl kwa">fun</span> mpz_fdiv_qr <span class="hl opt">(</span>
    _<span class="hl opt">: &amp;</span>mpz_vt<span class="hl opt">,</span> _<span class="hl opt">: &amp;</span>mpz_vt<span class="hl opt">,</span> _<span class="hl opt">: &amp;</span>mpz_vt<span class="hl opt">,</span> _<span class="hl opt">: &amp;</span>mpz_vt
  <span class="hl opt">) :&lt;&gt;</span> void <span class="hl opt">=</span> <span class="hl str">&quot;__mpz_fdiv_qr&quot;</span>

<span class="hl opt">%{^</span>

<span class="hl slc">// for backward compatibility</span>

<span class="hl kwa">static inline</span>
ats_void_type
__mpz_mul_2exp <span class="hl opt">(</span>
  ats_mpz_ptr_type x
<span class="hl opt">,</span> ats_mpz_ptr_type y
<span class="hl opt">,</span> ats_int_type n
<span class="hl opt">) {</span>
  mpz_mul_2exp<span class="hl opt">((</span>mpz_ptr<span class="hl opt">)</span>x<span class="hl opt">, (</span>mpz_ptr<span class="hl opt">)</span>y<span class="hl opt">,</span> n<span class="hl opt">) ;</span> <span class="hl kwa">return</span> <span class="hl opt">;</span>
<span class="hl opt">}</span> <span class="hl slc">// end of [atslib_mpz_mul_2exp]</span>

<span class="hl kwa">static inline</span>
ats_void_type
__mpz_fdiv_qr <span class="hl opt">(</span>
  ats_mpz_ptr_type q
<span class="hl opt">,</span> ats_mpz_ptr_type r
<span class="hl opt">,</span> ats_mpz_ptr_type x
<span class="hl opt">,</span> ats_mpz_ptr_type y
<span class="hl opt">) {</span>
  mpz_fdiv_qr<span class="hl opt">((</span>mpz_ptr<span class="hl opt">)</span>q<span class="hl opt">, (</span>mpz_ptr<span class="hl opt">)</span>r<span class="hl opt">, (</span>mpz_ptr<span class="hl opt">)</span>x<span class="hl opt">, (</span>mpz_ptr<span class="hl opt">)</span>y<span class="hl opt">) ;</span> <span class="hl kwa">return</span> <span class="hl opt">;</span>
<span class="hl opt">}</span> <span class="hl slc">// end of [__mpz_fdiv_qr]</span>

<span class="hl opt">%}</span> <span class="hl slc">// end of [%{^]</span>

<span class="hl com">(* ****** ****** *)</span>

fn extract_digit <span class="hl opt">(</span>
    pf_numer<span class="hl opt">: !</span>v_numer
  <span class="hl opt">,</span> pf_denom<span class="hl opt">: !</span>v_denom
  <span class="hl opt">,</span> pf_accum<span class="hl opt">: !</span>v_accum
  <span class="hl opt">,</span> pf_tmp1<span class="hl opt">: !</span>v_tmp1<span class="hl opt">,</span> pf_tmp2<span class="hl opt">: !</span>v_tmp2
  | <span class="hl com">(*none*)</span>
  <span class="hl opt">) :&lt;&gt;</span> <span class="hl kwb">int</span> <span class="hl opt">=</span> <span class="hl kwa">let</span>
  <span class="hl kwa">val</span> sgn <span class="hl opt">=</span> mpz_cmp <span class="hl opt">(</span>numer<span class="hl opt">,</span> accum<span class="hl opt">)</span>
<span class="hl kwa">in</span>
  case<span class="hl opt">+</span> <span class="hl num">0</span> <span class="hl kwa">of</span>
  | _ <span class="hl kwa">when</span> sgn <span class="hl opt">&gt;</span> <span class="hl num">0</span> <span class="hl opt">=&gt;</span> ~<span class="hl num">1</span>
  | _ <span class="hl opt">=&gt;</span> <span class="hl kwa">let</span>
      <span class="hl kwa">val</span> <span class="hl opt">() =</span> mpz_mul_2exp <span class="hl opt">(</span>tmp1<span class="hl opt">,</span> numer<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">)</span>
      <span class="hl kwa">val</span> <span class="hl opt">() =</span> mpz_add <span class="hl opt">(</span>tmp1<span class="hl opt">,</span> numer<span class="hl opt">)</span>
      <span class="hl kwa">val</span> <span class="hl opt">() =</span> mpz_add <span class="hl opt">(</span>tmp1<span class="hl opt">,</span> accum<span class="hl opt">)</span>
      <span class="hl kwa">val</span> <span class="hl opt">() =</span> mpz_fdiv_qr <span class="hl opt">(</span>tmp1<span class="hl opt">,</span> tmp2<span class="hl opt">, &amp;</span>tmp1<span class="hl opt">,</span> denom<span class="hl opt">)</span> where <span class="hl opt">{</span>
        <span class="hl kwa">extern fun</span> mpz_fdiv_qr
          <span class="hl opt">(</span>_<span class="hl opt">: &amp;</span>mpz_vt<span class="hl opt">,</span> _<span class="hl opt">: &amp;</span>mpz_vt<span class="hl opt">,</span> _<span class="hl opt">:</span> ptr<span class="hl opt">,</span> _<span class="hl opt">: &amp;</span>mpz_vt<span class="hl opt">):&lt;&gt;</span> void <span class="hl opt">=</span> <span class="hl str">&quot;__mpz_fdiv_qr&quot;</span>
      <span class="hl opt">}</span> <span class="hl slc">// end of [val]</span>
      <span class="hl kwa">val</span> <span class="hl opt">() =</span> mpz_add <span class="hl opt">(</span>tmp2<span class="hl opt">,</span> numer<span class="hl opt">)</span>
    <span class="hl kwa">in</span>
      <span class="hl kwa">if</span> mpz_cmp <span class="hl opt">(</span>tmp2<span class="hl opt">,</span> denom<span class="hl opt">) &gt;=</span> <span class="hl num">0</span> <span class="hl kwa">then</span> ~<span class="hl num">1</span> <span class="hl kwa">else</span> mpz_get_int <span class="hl opt">(</span>tmp1<span class="hl opt">)</span>
    <span class="hl kwa">end</span> <span class="hl slc">// end of [_]</span>
<span class="hl kwa">end</span> <span class="hl slc">// end of [extract_digit]</span>

<span class="hl com">(* ****** ****** *)</span>

fn next_term <span class="hl opt">(</span>
    pf_numer<span class="hl opt">: !</span>v_numer
  <span class="hl opt">,</span> pf_denom<span class="hl opt">: !</span>v_denom
  <span class="hl opt">,</span> pf_accum<span class="hl opt">: !</span>v_accum
  <span class="hl opt">,</span> pf_tmp1<span class="hl opt">: !</span>v_tmp1<span class="hl opt">,</span> pf_tmp2<span class="hl opt">: !</span>v_tmp2
  | k<span class="hl opt">:</span> uint
  <span class="hl opt">) :&lt;&gt;</span> void <span class="hl opt">=</span> <span class="hl kwa">let</span>
  <span class="hl kwa">val</span> y2 <span class="hl opt">=</span> <span class="hl num">2U</span> <span class="hl opt">*</span> k <span class="hl opt">+</span> <span class="hl num">1U</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> mpz_mul_2exp <span class="hl opt">(</span>tmp1<span class="hl opt">,</span> numer<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">)</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> mpz_add <span class="hl opt">(</span>accum<span class="hl opt">,</span> tmp1<span class="hl opt">)</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> mpz_mul <span class="hl opt">(</span>accum<span class="hl opt">,</span> y2<span class="hl opt">)</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> mpz_mul <span class="hl opt">(</span>numer<span class="hl opt">,</span> k<span class="hl opt">)</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> mpz_mul <span class="hl opt">(</span>denom<span class="hl opt">,</span> y2<span class="hl opt">)</span>
<span class="hl kwa">in</span>
  <span class="hl slc">// nothing</span>
<span class="hl kwa">end</span> <span class="hl slc">// end of [next_term] </span>

<span class="hl com">(* ****** ****** *)</span>

fn eliminate_digit <span class="hl opt">(</span>
    pf_numer<span class="hl opt">: !</span>v_numer
  <span class="hl opt">,</span> pf_denom<span class="hl opt">: !</span>v_denom
  <span class="hl opt">,</span> pf_accum<span class="hl opt">: !</span>v_accum
  | d<span class="hl opt">:</span> uint
  <span class="hl opt">) :&lt;&gt;</span> void <span class="hl opt">= ()</span> where <span class="hl opt">{</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> <span class="hl kwa">begin</span>
    mpz_submul <span class="hl opt">(</span>accum<span class="hl opt">,</span> denom<span class="hl opt">,</span> d<span class="hl opt">);</span> mpz_mul <span class="hl opt">(</span>accum<span class="hl opt">,</span> <span class="hl num">10</span><span class="hl opt">);</span> mpz_mul <span class="hl opt">(</span>numer<span class="hl opt">,</span> <span class="hl num">10</span><span class="hl opt">)</span>
  <span class="hl kwa">end</span> <span class="hl slc">// end of [val]</span>
<span class="hl opt">}</span> <span class="hl slc">// end of [eliminate_digit]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">staload</span> <span class="hl str">&quot;libc/SATS/stdio.sats&quot;</span>

fn pidigits <span class="hl opt">(</span>
    pf_numer<span class="hl opt">: !</span>v_numer
  <span class="hl opt">,</span> pf_denom<span class="hl opt">: !</span>v_denom
  <span class="hl opt">,</span> pf_accum<span class="hl opt">: !</span>v_accum
  <span class="hl opt">,</span> pf_tmp1<span class="hl opt">: !</span>v_tmp1<span class="hl opt">,</span> pf_tmp2<span class="hl opt">: !</span>v_tmp2
  | n<span class="hl opt">:</span> <span class="hl kwb">int</span>
  <span class="hl opt">) :&lt;!</span>ntm<span class="hl opt">&gt;</span> void <span class="hl opt">= ()</span> where <span class="hl opt">{</span>
  var d<span class="hl opt">:</span> <span class="hl kwb">int</span> <span class="hl opt">=</span> ~<span class="hl num">1</span> <span class="hl slc">// not needed at run-time</span>
  var i<span class="hl opt">:</span> <span class="hl kwb">int</span> <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl kwa">and</span> k<span class="hl opt">:</span> uint <span class="hl opt">=</span> <span class="hl num">0U</span> <span class="hl kwa">and</span> m<span class="hl opt">:</span> <span class="hl kwb">int</span>?
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> <span class="hl kwa">while</span> <span class="hl opt">(</span><span class="hl kwa">true</span><span class="hl opt">)</span> <span class="hl kwa">let</span>
    <span class="hl kwa">val</span> <span class="hl opt">() =</span> <span class="hl kwa">while</span> <span class="hl opt">(</span><span class="hl kwa">true</span><span class="hl opt">)</span> <span class="hl kwa">let</span>
      <span class="hl kwa">val</span> <span class="hl opt">() =</span> k <span class="hl opt">:=</span> k<span class="hl opt">+</span><span class="hl num">1U</span>
      <span class="hl kwa">val</span> <span class="hl opt">() =</span> next_term
        <span class="hl opt">(</span>pf_numer<span class="hl opt">,</span> pf_denom<span class="hl opt">,</span> pf_accum<span class="hl opt">,</span> pf_tmp1<span class="hl opt">,</span> pf_tmp2 | k<span class="hl opt">)</span>
      <span class="hl kwa">val</span> <span class="hl opt">() =</span> d <span class="hl opt">:=</span> extract_digit
        <span class="hl opt">(</span>pf_numer<span class="hl opt">,</span> pf_denom<span class="hl opt">,</span> pf_accum<span class="hl opt">,</span> pf_tmp1<span class="hl opt">,</span> pf_tmp2 | <span class="hl com">(*none*)</span><span class="hl opt">)</span>
    <span class="hl kwa">in</span>
      <span class="hl kwa">if</span> d <span class="hl opt">&lt;&gt;</span> ~<span class="hl num">1</span> <span class="hl kwa">then</span> break
    <span class="hl kwa">end</span> <span class="hl slc">// end of [while]</span>
    <span class="hl kwa">val</span> _ <span class="hl opt">=</span> fputc_err <span class="hl opt">(</span>char_of_int <span class="hl opt">(</span><span class="hl num">0x30</span><span class="hl com">(*'0'*)</span> <span class="hl opt">+</span> d<span class="hl opt">),</span> stdout_ref<span class="hl opt">)</span>
    <span class="hl kwa">val</span> <span class="hl opt">() =</span> i <span class="hl opt">:=</span> i<span class="hl opt">+</span><span class="hl num">1</span>
    <span class="hl kwa">val</span> <span class="hl opt">() =</span> m <span class="hl opt">:=</span> i <span class="hl kwa">mod</span> <span class="hl num">10</span>
    <span class="hl kwa">val</span> <span class="hl opt">() =</span> <span class="hl kwa">if</span> <span class="hl opt">(</span>m <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">then</span> $effmask_all <span class="hl opt">(</span>fprintf <span class="hl opt">(</span>stdout_ref<span class="hl opt">,</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span><span class="hl str">:%d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> &#64;<span class="hl opt">(</span>i<span class="hl opt">)))</span>
    <span class="hl kwa">val</span> <span class="hl opt">() =</span> <span class="hl kwa">if</span> <span class="hl opt">(</span>i <span class="hl opt">&gt;=</span> n<span class="hl opt">)</span> <span class="hl kwa">then</span> break
    <span class="hl kwa">val</span> <span class="hl opt">() =</span> eliminate_digit <span class="hl opt">(</span>pf_numer<span class="hl opt">,</span> pf_denom<span class="hl opt">,</span> pf_accum | uint_of_int d<span class="hl opt">);</span>
  <span class="hl kwa">in</span>
    <span class="hl slc">// nothing</span>
  <span class="hl kwa">end</span> <span class="hl slc">// end of [while]</span>
<span class="hl opt">}</span> <span class="hl slc">// end of [pidigits]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">implement</span> main <span class="hl opt">(</span>argc<span class="hl opt">,</span> argv<span class="hl opt">) =</span> <span class="hl kwa">let</span>
  <span class="hl kwa">val</span> n <span class="hl opt">= (</span><span class="hl kwa">if</span> argc <span class="hl opt">&gt;</span> <span class="hl num">1</span> <span class="hl kwa">then</span> int_of_string <span class="hl opt">(</span>argv<span class="hl opt">.[</span><span class="hl num">1</span><span class="hl opt">])</span> <span class="hl kwa">else</span> <span class="hl num">27</span><span class="hl opt">):</span> <span class="hl kwb">int</span>
  prval vbox pf_all <span class="hl opt">=</span> pfbox_all
<span class="hl kwa">in</span>
  pidigits <span class="hl opt">(</span>pf_all<span class="hl num">.0</span><span class="hl opt">,</span> pf_all<span class="hl num">.1</span><span class="hl opt">,</span> pf_all<span class="hl num">.2</span><span class="hl opt">,</span> pf_all<span class="hl num">.3</span><span class="hl opt">,</span> pf_all<span class="hl num">.4</span> | n<span class="hl opt">)</span>
<span class="hl kwa">end</span> <span class="hl slc">// end of [main]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl com">(* end of [pidigits3.dats] *)</span>
