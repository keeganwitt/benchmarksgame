<span class="hl slc">% The Computer Language Benchmarks Game</span>
<span class="hl slc">% http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">%% Contributed by Fredrik Svahn based on Per Gustafsson's mandelbrot program</span>

<span class="hl opt">-</span><span class="hl kwd">module</span><span class="hl opt">(</span>mandelbrot<span class="hl opt">).</span>
<span class="hl opt">-</span><span class="hl kwd">export</span><span class="hl opt">([</span>main<span class="hl opt">/</span><span class="hl num">1</span><span class="hl opt">]).</span>
<span class="hl opt">-</span><span class="hl kwd">define</span><span class="hl opt">(</span>LIM_SQR<span class="hl opt">,</span> <span class="hl num">4.0</span><span class="hl opt">).</span>
<span class="hl opt">-</span><span class="hl kwd">define</span><span class="hl opt">(</span>ITER<span class="hl opt">,</span> <span class="hl num">50</span><span class="hl opt">).</span>
<span class="hl opt">-</span><span class="hl kwd">define</span><span class="hl opt">(</span>SR<span class="hl opt">, -</span><span class="hl num">1.5</span><span class="hl opt">).</span>
<span class="hl opt">-</span><span class="hl kwd">define</span><span class="hl opt">(</span>SI<span class="hl opt">, -</span><span class="hl num">1</span><span class="hl opt">).</span>

<span class="hl kwd">main</span><span class="hl opt">([</span>Arg<span class="hl opt">]) -&gt;</span>
    N <span class="hl opt">=</span> <span class="hl kwb">list_to_integer</span><span class="hl opt">(</span>Arg<span class="hl opt">),</span>
    <span class="hl kwc">io</span><span class="hl opt">:</span><span class="hl kwd">put_chars</span><span class="hl opt">([</span><span class="hl str">&quot;P4</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> Arg<span class="hl opt">,</span> <span class="hl str">&quot; &quot;</span><span class="hl opt">,</span> Arg<span class="hl opt">,</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">]),</span>
    
    <span class="hl slc">%% Spawn one process per row</span>
    Row <span class="hl opt">=</span> <span class="hl kwa">fun</span><span class="hl opt">(</span>Y<span class="hl opt">)-&gt;</span> <span class="hl kwb">spawn</span><span class="hl opt">(</span><span class="hl kwa">fun</span><span class="hl opt">()-&gt;</span> <span class="hl kwd">row</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> ?SI<span class="hl opt">+</span>Y<span class="hl opt">*</span><span class="hl num">2</span><span class="hl opt">/</span>N<span class="hl opt">,</span> N<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">, [],</span> <span class="hl num">7</span><span class="hl opt">)</span> <span class="hl kwa">end</span><span class="hl opt">)</span> <span class="hl kwa">end</span><span class="hl opt">,</span>
    Pids <span class="hl opt">=</span> <span class="hl kwc">lists</span><span class="hl opt">:</span><span class="hl kwd">map</span><span class="hl opt">(</span>Row<span class="hl opt">,</span> <span class="hl kwc">lists</span><span class="hl opt">:</span><span class="hl kwd">seq</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span>N<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">)),</span>

    <span class="hl slc">%Pass token around to make sure printouts are in the right order</span>
    <span class="hl kwb">hd</span><span class="hl opt">(</span>Pids<span class="hl opt">) !</span> <span class="hl kwb">tl</span><span class="hl opt">(</span>Pids<span class="hl opt">) ++ [</span> <span class="hl kwb">self</span><span class="hl opt">() ],</span>
    <span class="hl kwa">receive</span> _Token <span class="hl opt">-&gt;</span> <span class="hl kwb">halt</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">end</span><span class="hl opt">.</span>

<span class="hl slc">%Iterate over a row, collect bits, bytes and finally print the row</span>
<span class="hl kwd">row</span><span class="hl opt">(</span>X<span class="hl opt">,</span> _<span class="hl opt">,</span> N<span class="hl opt">,</span> Bits<span class="hl opt">,</span> Bytes<span class="hl opt">,</span> BitC<span class="hl opt">)</span> <span class="hl kwa">when</span> X <span class="hl opt">=:=</span> N<span class="hl opt">-</span><span class="hl num">1</span> <span class="hl opt">-&gt;</span>
    <span class="hl kwa">receive</span> Pids <span class="hl opt">-&gt;</span>
	    <span class="hl kwd">put_chars</span><span class="hl opt">(</span>Bits<span class="hl opt">,</span> Bytes<span class="hl opt">,</span> BitC<span class="hl opt">),</span>
	    <span class="hl kwb">hd</span><span class="hl opt">(</span>Pids<span class="hl opt">) !</span> <span class="hl kwb">tl</span><span class="hl opt">(</span>Pids<span class="hl opt">)</span>
    <span class="hl kwa">end</span><span class="hl opt">;</span>

<span class="hl kwd">row</span><span class="hl opt">(</span>X<span class="hl opt">,</span> Y2<span class="hl opt">,</span> N<span class="hl opt">,</span> Bits<span class="hl opt">,</span> Bytes<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">) -&gt;</span>
    <span class="hl kwd">row</span><span class="hl opt">(</span>X<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">,</span> Y2<span class="hl opt">,</span> N<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">, [</span>Bits bsl <span class="hl num">1</span> <span class="hl opt">+</span> <span class="hl kwd">m</span><span class="hl opt">(</span>?ITER<span class="hl opt">,</span> ?SR<span class="hl opt">+</span>X<span class="hl opt">*</span><span class="hl num">2</span><span class="hl opt">/</span>N<span class="hl opt">,</span> Y2<span class="hl opt">)</span> | Bytes<span class="hl opt">],</span> <span class="hl num">7</span><span class="hl opt">);</span>

<span class="hl kwd">row</span><span class="hl opt">(</span>X<span class="hl opt">,</span> Y2<span class="hl opt">,</span> N<span class="hl opt">,</span> Bits<span class="hl opt">,</span> Bytes<span class="hl opt">,</span> BitC<span class="hl opt">) -&gt;</span>
    <span class="hl kwd">row</span><span class="hl opt">(</span>X<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">,</span> Y2<span class="hl opt">,</span> N<span class="hl opt">,</span> Bits bsl <span class="hl num">1</span> <span class="hl opt">+</span> <span class="hl kwd">m</span><span class="hl opt">(</span>?ITER<span class="hl opt">,</span> ?SR<span class="hl opt">+</span>X<span class="hl opt">*</span><span class="hl num">2</span><span class="hl opt">/</span>N<span class="hl opt">,</span> Y2<span class="hl opt">),</span> Bytes<span class="hl opt">,</span> BitC<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">).</span>

<span class="hl slc">%Mandelbrot algorithm</span>
<span class="hl kwd">m</span><span class="hl opt">(</span>Iter<span class="hl opt">,</span> CR<span class="hl opt">,</span>CI<span class="hl opt">) -&gt;</span> <span class="hl kwd">m</span><span class="hl opt">(</span>Iter <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">,</span> CR<span class="hl opt">,</span> CI<span class="hl opt">,</span> CR<span class="hl opt">,</span> CI<span class="hl opt">).</span>

<span class="hl kwd">m</span><span class="hl opt">(</span>Iter<span class="hl opt">,</span> R<span class="hl opt">,</span> I<span class="hl opt">,</span> CR<span class="hl opt">,</span> CI<span class="hl opt">) -&gt;</span>
    <span class="hl kwa">case</span> R<span class="hl opt">*</span>R<span class="hl opt">+</span>I<span class="hl opt">*</span>I <span class="hl opt">&gt;</span> ?LIM_SQR <span class="hl kwa">of</span> 
	false <span class="hl kwa">when</span> Iter <span class="hl opt">&gt;</span> <span class="hl num">0</span> <span class="hl opt">-&gt;</span> <span class="hl kwd">m</span><span class="hl opt">(</span>Iter<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">,</span> R<span class="hl opt">*</span>R<span class="hl opt">-</span>I<span class="hl opt">*</span>I<span class="hl opt">+</span>CR<span class="hl opt">,</span> <span class="hl num">2</span><span class="hl opt">*</span>R<span class="hl opt">*</span>I<span class="hl opt">+</span>CI<span class="hl opt">,</span> CR<span class="hl opt">,</span> CI<span class="hl opt">);</span>
	false <span class="hl opt">-&gt;</span> <span class="hl num">1</span><span class="hl opt">;</span>
	true <span class="hl opt">-&gt;</span> <span class="hl num">0</span>
    <span class="hl kwa">end</span><span class="hl opt">.</span>

<span class="hl kwd">put_chars</span><span class="hl opt">(</span>_<span class="hl opt">,</span> Bytes<span class="hl opt">,</span> <span class="hl num">7</span><span class="hl opt">)-&gt;</span> <span class="hl kwc">io</span><span class="hl opt">:</span><span class="hl kwd">put_chars</span><span class="hl opt">(</span><span class="hl kwc">lists</span><span class="hl opt">:</span><span class="hl kwd">reverse</span><span class="hl opt">(</span>Bytes<span class="hl opt">));</span>
<span class="hl kwd">put_chars</span><span class="hl opt">(</span>Bits<span class="hl opt">,</span> Bytes<span class="hl opt">,</span> C<span class="hl opt">) -&gt;</span> <span class="hl kwc">io</span><span class="hl opt">:</span><span class="hl kwd">put_chars</span><span class="hl opt">(</span><span class="hl kwc">lists</span><span class="hl opt">:</span><span class="hl kwd">reverse</span><span class="hl opt">([</span>Bits <span class="hl kwd">bsl</span> <span class="hl opt">(</span>C<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)</span> | Bytes<span class="hl opt">])).</span>
