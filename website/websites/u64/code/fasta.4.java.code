<span class="hl com">/*</span>
<span class="hl com"> * The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * modified by Mehmet D. AKIN</span>
<span class="hl com"> * modified by Rikard Mustaj√§rvi</span>
<span class="hl com"> */</span>

<span class="hl kwa">import</span> java<span class="hl opt">.</span>io<span class="hl opt">.</span>IOException<span class="hl opt">;</span>
<span class="hl kwa">import</span> java<span class="hl opt">.</span>io<span class="hl opt">.</span>OutputStream<span class="hl opt">;</span>

<span class="hl kwa">class</span> fasta <span class="hl opt">{</span>
   <span class="hl kwa">static final</span> <span class="hl kwb">int</span> IM <span class="hl opt">=</span> <span class="hl num">139968</span><span class="hl opt">;</span>
   <span class="hl kwa">static final</span> <span class="hl kwb">int</span> IA <span class="hl opt">=</span> <span class="hl num">3877</span><span class="hl opt">;</span>
   <span class="hl kwa">static final</span> <span class="hl kwb">int</span> IC <span class="hl opt">=</span> <span class="hl num">29573</span><span class="hl opt">;</span>

   <span class="hl kwa">static final</span> <span class="hl kwb">int</span> LINE_LENGTH <span class="hl opt">=</span> <span class="hl num">60</span><span class="hl opt">;</span>
   <span class="hl kwa">static final</span> <span class="hl kwb">int</span> BUFFER_SIZE <span class="hl opt">= (</span>LINE_LENGTH <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">)*</span><span class="hl num">1024</span><span class="hl opt">;</span> <span class="hl slc">// add 1 for '\n'</span>

    <span class="hl slc">// Weighted selection from alphabet</span>
    <span class="hl kwa">public static</span> String ALU <span class="hl opt">=</span>
              <span class="hl str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span>
            <span class="hl opt">+</span> <span class="hl str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span>
            <span class="hl opt">+</span> <span class="hl str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span>
            <span class="hl opt">+</span> <span class="hl str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span>
            <span class="hl opt">+</span> <span class="hl str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span>
            <span class="hl opt">+</span> <span class="hl str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span>
            <span class="hl opt">+</span> <span class="hl str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span><span class="hl opt">;</span>

    <span class="hl kwa">private static final</span> FloatProbFreq IUB <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">FloatProbFreq</span><span class="hl opt">(</span>
          <span class="hl kwa">new</span> <span class="hl kwb">byte</span><span class="hl opt">[]{</span>
                <span class="hl str">'a'</span><span class="hl opt">,</span>  <span class="hl str">'c'</span><span class="hl opt">,</span>  <span class="hl str">'g'</span><span class="hl opt">,</span>  <span class="hl str">'t'</span><span class="hl opt">,</span>
                <span class="hl str">'B'</span><span class="hl opt">,</span>  <span class="hl str">'D'</span><span class="hl opt">,</span>  <span class="hl str">'H'</span><span class="hl opt">,</span>  <span class="hl str">'K'</span><span class="hl opt">,</span>
                <span class="hl str">'M'</span><span class="hl opt">,</span>  <span class="hl str">'N'</span><span class="hl opt">,</span>  <span class="hl str">'R'</span><span class="hl opt">,</span>  <span class="hl str">'S'</span><span class="hl opt">,</span>
                <span class="hl str">'V'</span><span class="hl opt">,</span>  <span class="hl str">'W'</span><span class="hl opt">,</span>  <span class="hl str">'Y'</span><span class="hl opt">},</span>
          <span class="hl kwa">new</span> <span class="hl kwb">double</span><span class="hl opt">[]{</span>
                <span class="hl num">0.27</span><span class="hl opt">,</span> <span class="hl num">0.12</span><span class="hl opt">,</span> <span class="hl num">0.12</span><span class="hl opt">,</span> <span class="hl num">0.27</span><span class="hl opt">,</span>
                <span class="hl num">0.02</span><span class="hl opt">,</span> <span class="hl num">0.02</span><span class="hl opt">,</span> <span class="hl num">0.02</span><span class="hl opt">,</span> <span class="hl num">0.02</span><span class="hl opt">,</span>
                <span class="hl num">0.02</span><span class="hl opt">,</span> <span class="hl num">0.02</span><span class="hl opt">,</span> <span class="hl num">0.02</span><span class="hl opt">,</span> <span class="hl num">0.02</span><span class="hl opt">,</span>
                <span class="hl num">0.02</span><span class="hl opt">,</span> <span class="hl num">0.02</span><span class="hl opt">,</span> <span class="hl num">0.02</span><span class="hl opt">,</span>
                <span class="hl opt">}</span>
          <span class="hl opt">);</span>

    <span class="hl kwa">private static final</span> FloatProbFreq HOMO_SAPIENS <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">FloatProbFreq</span><span class="hl opt">(</span>
          <span class="hl kwa">new</span> <span class="hl kwb">byte</span><span class="hl opt">[]{</span>
                <span class="hl str">'a'</span><span class="hl opt">,</span>
                <span class="hl str">'c'</span><span class="hl opt">,</span>
                <span class="hl str">'g'</span><span class="hl opt">,</span>
                <span class="hl str">'t'</span><span class="hl opt">},</span>
          <span class="hl kwa">new</span> <span class="hl kwb">double</span><span class="hl opt">[]{</span>
                <span class="hl num">0.3029549426680</span>d<span class="hl opt">,</span>
                <span class="hl num">0.1979883004921</span>d<span class="hl opt">,</span>
                <span class="hl num">0.1975473066391</span>d<span class="hl opt">,</span>
                <span class="hl num">0.3015094502008</span>d<span class="hl opt">}</span>
          <span class="hl opt">);</span>

   <span class="hl kwa">static final</span> <span class="hl kwb">void</span> <span class="hl kwd">makeRandomFasta</span><span class="hl opt">(</span>String id<span class="hl opt">,</span> String desc<span class="hl opt">,</span>
         FloatProbFreq fpf<span class="hl opt">,</span> <span class="hl kwb">int</span> nChars<span class="hl opt">,</span> OutputStream writer<span class="hl opt">)</span>
         <span class="hl kwa">throws</span> IOException
   <span class="hl opt">{</span>
      <span class="hl kwa">final</span> <span class="hl kwb">int</span> LINE_LENGTH <span class="hl opt">=</span> fasta<span class="hl opt">.</span>LINE_LENGTH<span class="hl opt">;</span>
      <span class="hl kwa">final</span> <span class="hl kwb">int</span> BUFFER_SIZE <span class="hl opt">=</span> fasta<span class="hl opt">.</span>BUFFER_SIZE<span class="hl opt">;</span>
      <span class="hl kwb">byte</span><span class="hl opt">[]</span> buffer <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwb">byte</span><span class="hl opt">[</span>BUFFER_SIZE<span class="hl opt">];</span>

      <span class="hl kwa">if</span> <span class="hl opt">(</span>buffer<span class="hl opt">.</span>length <span class="hl opt">% (</span>LINE_LENGTH <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">) !=</span> <span class="hl num">0</span><span class="hl opt">) {</span>
         <span class="hl kwa">throw new</span> <span class="hl kwd">IllegalStateException</span><span class="hl opt">(</span>
            <span class="hl str">&quot;buffer size must be a multiple of &quot;</span> <span class="hl opt">+</span>
            <span class="hl str">&quot;line length (including line break)&quot;</span><span class="hl opt">);</span>
      <span class="hl opt">}</span>

      String descStr <span class="hl opt">=</span> <span class="hl str">&quot;&gt;&quot;</span> <span class="hl opt">+</span> id <span class="hl opt">+</span> <span class="hl str">&quot; &quot;</span> <span class="hl opt">+</span> desc <span class="hl opt">+</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl opt">;</span>
      writer<span class="hl opt">.</span><span class="hl kwd">write</span><span class="hl opt">(</span>descStr<span class="hl opt">.</span><span class="hl kwd">getBytes</span><span class="hl opt">());</span>

      <span class="hl kwb">int</span> bufferIndex <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
      <span class="hl kwa">while</span> <span class="hl opt">(</span>nChars <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">) {</span>
         <span class="hl kwb">int</span> chunkSize<span class="hl opt">;</span>
         <span class="hl kwa">if</span> <span class="hl opt">(</span>nChars <span class="hl opt">&gt;=</span> LINE_LENGTH<span class="hl opt">) {</span>
            chunkSize <span class="hl opt">=</span> LINE_LENGTH<span class="hl opt">;</span>
         <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
            chunkSize <span class="hl opt">=</span> nChars<span class="hl opt">;</span>
         <span class="hl opt">}</span>

         <span class="hl kwa">if</span> <span class="hl opt">(</span>bufferIndex <span class="hl opt">==</span> BUFFER_SIZE<span class="hl opt">) {</span>
            writer<span class="hl opt">.</span><span class="hl kwd">write</span><span class="hl opt">(</span>buffer<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> bufferIndex<span class="hl opt">);</span>
            bufferIndex <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
         <span class="hl opt">}</span>

         bufferIndex <span class="hl opt">=</span> fpf
            <span class="hl opt">.</span><span class="hl kwd">selectRandomIntoBuffer</span><span class="hl opt">(</span>buffer<span class="hl opt">,</span> bufferIndex<span class="hl opt">,</span> chunkSize<span class="hl opt">);</span>
         buffer<span class="hl opt">[</span>bufferIndex<span class="hl opt">++] =</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl opt">;</span>

         nChars <span class="hl opt">-=</span> chunkSize<span class="hl opt">;</span>
      <span class="hl opt">}</span>

      writer<span class="hl opt">.</span><span class="hl kwd">write</span><span class="hl opt">(</span>buffer<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> bufferIndex<span class="hl opt">);</span>
   <span class="hl opt">}</span>

    <span class="hl kwa">static final</span> <span class="hl kwb">void</span> <span class="hl kwd">makeRepeatFasta</span><span class="hl opt">(</span>
          String id<span class="hl opt">,</span> String desc<span class="hl opt">,</span> String alu<span class="hl opt">,</span>
          <span class="hl kwb">int</span> nChars<span class="hl opt">,</span> OutputStream writer<span class="hl opt">)</span> <span class="hl kwa">throws</span> IOException
    <span class="hl opt">{</span>
       <span class="hl kwa">final</span> <span class="hl kwb">byte</span><span class="hl opt">[]</span> aluBytes <span class="hl opt">=</span> alu<span class="hl opt">.</span><span class="hl kwd">getBytes</span><span class="hl opt">();</span>
       <span class="hl kwb">int</span> aluIndex <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>

       <span class="hl kwa">final</span> <span class="hl kwb">int</span> LINE_LENGTH <span class="hl opt">=</span> fasta<span class="hl opt">.</span>LINE_LENGTH<span class="hl opt">;</span>
       <span class="hl kwa">final</span> <span class="hl kwb">int</span> BUFFER_SIZE <span class="hl opt">=</span> fasta<span class="hl opt">.</span>BUFFER_SIZE<span class="hl opt">;</span>
       <span class="hl kwb">byte</span><span class="hl opt">[]</span> buffer <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwb">byte</span><span class="hl opt">[</span>BUFFER_SIZE<span class="hl opt">];</span>

       <span class="hl kwa">if</span> <span class="hl opt">(</span>buffer<span class="hl opt">.</span>length <span class="hl opt">% (</span>LINE_LENGTH <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">) !=</span> <span class="hl num">0</span><span class="hl opt">) {</span>
          <span class="hl kwa">throw new</span> <span class="hl kwd">IllegalStateException</span><span class="hl opt">(</span>
                <span class="hl str">&quot;buffer size must be a multiple &quot;</span> <span class="hl opt">+</span>
                <span class="hl str">&quot;of line length (including line break)&quot;</span><span class="hl opt">);</span>
       <span class="hl opt">}</span>

        String descStr <span class="hl opt">=</span> <span class="hl str">&quot;&gt;&quot;</span> <span class="hl opt">+</span> id <span class="hl opt">+</span> <span class="hl str">&quot; &quot;</span> <span class="hl opt">+</span> desc <span class="hl opt">+</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl opt">;</span>
        writer<span class="hl opt">.</span><span class="hl kwd">write</span><span class="hl opt">(</span>descStr<span class="hl opt">.</span><span class="hl kwd">getBytes</span><span class="hl opt">());</span>

        <span class="hl kwb">int</span> bufferIndex <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
        <span class="hl kwa">while</span> <span class="hl opt">(</span>nChars <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">) {</span>
           <span class="hl kwa">final</span> <span class="hl kwb">int</span> chunkSize<span class="hl opt">;</span>
           <span class="hl kwa">if</span> <span class="hl opt">(</span>nChars <span class="hl opt">&gt;=</span> LINE_LENGTH<span class="hl opt">) {</span>
              chunkSize <span class="hl opt">=</span> LINE_LENGTH<span class="hl opt">;</span>
         <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
            chunkSize <span class="hl opt">=</span> nChars<span class="hl opt">;</span>
         <span class="hl opt">}</span>

           <span class="hl kwa">if</span> <span class="hl opt">(</span>bufferIndex <span class="hl opt">==</span> BUFFER_SIZE<span class="hl opt">) {</span>
                writer<span class="hl opt">.</span><span class="hl kwd">write</span><span class="hl opt">(</span>buffer<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> bufferIndex<span class="hl opt">);</span>
                bufferIndex <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
           <span class="hl opt">}</span>

           <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> chunkSize<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
              <span class="hl kwa">if</span> <span class="hl opt">(</span>aluIndex <span class="hl opt">==</span> aluBytes<span class="hl opt">.</span>length<span class="hl opt">) {</span>
                 aluIndex <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
              <span class="hl opt">}</span>

              buffer<span class="hl opt">[</span>bufferIndex<span class="hl opt">++] =</span> aluBytes<span class="hl opt">[</span>aluIndex<span class="hl opt">++];</span>
           <span class="hl opt">}</span>
           buffer<span class="hl opt">[</span>bufferIndex<span class="hl opt">++] =</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl opt">;</span>

           nChars <span class="hl opt">-=</span> chunkSize<span class="hl opt">;</span>
        <span class="hl opt">}</span>

       writer<span class="hl opt">.</span><span class="hl kwd">write</span><span class="hl opt">(</span>buffer<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> bufferIndex<span class="hl opt">);</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">main</span><span class="hl opt">(</span>String<span class="hl opt">[]</span> args<span class="hl opt">)</span> <span class="hl kwa">throws</span> IOException
    <span class="hl opt">{</span>
        <span class="hl kwb">int</span> n <span class="hl opt">=</span> <span class="hl num">1000</span><span class="hl opt">;</span>
<span class="hl slc">//        int n = 25000000;</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>args<span class="hl opt">.</span>length <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">) {</span>
         n <span class="hl opt">=</span> Integer<span class="hl opt">.</span><span class="hl kwd">parseInt</span><span class="hl opt">(</span>args<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">]);</span>
      <span class="hl opt">}</span>

        OutputStream out <span class="hl opt">=</span> System<span class="hl opt">.</span>out<span class="hl opt">;</span>
        <span class="hl kwd">makeRepeatFasta</span><span class="hl opt">(</span><span class="hl str">&quot;ONE&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;Homo sapiens alu&quot;</span><span class="hl opt">,</span> ALU<span class="hl opt">,</span> n <span class="hl opt">*</span> <span class="hl num">2</span><span class="hl opt">,</span> out<span class="hl opt">);</span>
        <span class="hl kwd">makeRandomFasta</span><span class="hl opt">(</span><span class="hl str">&quot;TWO&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;IUB ambiguity codes&quot;</span><span class="hl opt">,</span> IUB<span class="hl opt">,</span> n <span class="hl opt">*</span> <span class="hl num">3</span><span class="hl opt">,</span> out<span class="hl opt">);</span>
        <span class="hl kwd">makeRandomFasta</span><span class="hl opt">(</span><span class="hl str">&quot;THREE&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;Homo sapiens frequency&quot;</span><span class="hl opt">,</span> HOMO_SAPIENS<span class="hl opt">,</span> n <span class="hl opt">*</span> <span class="hl num">5</span><span class="hl opt">,</span> out<span class="hl opt">);</span>
        out<span class="hl opt">.</span><span class="hl kwd">close</span><span class="hl opt">();</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">public static final class</span> FloatProbFreq <span class="hl opt">{</span>
       <span class="hl kwa">static</span> <span class="hl kwb">int</span> last <span class="hl opt">=</span> <span class="hl num">42</span><span class="hl opt">;</span>
       <span class="hl kwa">final</span> <span class="hl kwb">byte</span><span class="hl opt">[]</span> chars<span class="hl opt">;</span>
       <span class="hl kwa">final</span> <span class="hl kwb">float</span><span class="hl opt">[]</span> probs<span class="hl opt">;</span>

       <span class="hl kwa">public</span> <span class="hl kwd">FloatProbFreq</span><span class="hl opt">(</span><span class="hl kwb">byte</span><span class="hl opt">[]</span> chars<span class="hl opt">,</span> <span class="hl kwb">double</span><span class="hl opt">[]</span> probs<span class="hl opt">) {</span>
          <span class="hl kwa">this</span><span class="hl opt">.</span>chars <span class="hl opt">=</span> chars<span class="hl opt">;</span>
          <span class="hl kwa">this</span><span class="hl opt">.</span>probs <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwb">float</span><span class="hl opt">[</span>probs<span class="hl opt">.</span>length<span class="hl opt">];</span>
          <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> probs<span class="hl opt">.</span>length<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
             <span class="hl kwa">this</span><span class="hl opt">.</span>probs<span class="hl opt">[</span>i<span class="hl opt">] = (</span><span class="hl kwb">float</span><span class="hl opt">)</span>probs<span class="hl opt">[</span>i<span class="hl opt">];</span>
          <span class="hl opt">}</span>
          <span class="hl kwd">makeCumulative</span><span class="hl opt">();</span>
       <span class="hl opt">}</span>

       <span class="hl kwa">private final</span> <span class="hl kwb">void</span> <span class="hl kwd">makeCumulative</span><span class="hl opt">() {</span>
            <span class="hl kwb">double</span> cp <span class="hl opt">=</span> <span class="hl num">0.0</span><span class="hl opt">;</span>
            <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> probs<span class="hl opt">.</span>length<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
                cp <span class="hl opt">+=</span> probs<span class="hl opt">[</span>i<span class="hl opt">];</span>
                probs<span class="hl opt">[</span>i<span class="hl opt">] = (</span><span class="hl kwb">float</span><span class="hl opt">)</span>cp<span class="hl opt">;</span>
            <span class="hl opt">}</span>
        <span class="hl opt">}</span>

       <span class="hl kwa">public final</span> <span class="hl kwb">int</span> <span class="hl kwd">selectRandomIntoBuffer</span><span class="hl opt">(</span>
             <span class="hl kwb">byte</span><span class="hl opt">[]</span> buffer<span class="hl opt">,</span> <span class="hl kwb">int</span> bufferIndex<span class="hl opt">,</span> <span class="hl kwa">final</span> <span class="hl kwb">int</span> nRandom<span class="hl opt">) {</span>
          <span class="hl kwa">final</span> <span class="hl kwb">byte</span><span class="hl opt">[]</span> chars <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>chars<span class="hl opt">;</span>
          <span class="hl kwa">final</span> <span class="hl kwb">float</span><span class="hl opt">[]</span> probs <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">.</span>probs<span class="hl opt">;</span>
          <span class="hl kwa">final</span> <span class="hl kwb">int</span> len <span class="hl opt">=</span> probs<span class="hl opt">.</span>length<span class="hl opt">;</span>

          outer<span class="hl opt">:</span>
          <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> rIndex <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> rIndex <span class="hl opt">&lt;</span> nRandom<span class="hl opt">;</span> rIndex<span class="hl opt">++) {</span>
             <span class="hl kwa">final</span> <span class="hl kwb">float</span> r <span class="hl opt">=</span> <span class="hl kwd">random</span><span class="hl opt">(</span><span class="hl num">1.0</span>f<span class="hl opt">);</span>
                <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> len<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
                 <span class="hl kwa">if</span> <span class="hl opt">(</span>r <span class="hl opt">&lt;</span> probs<span class="hl opt">[</span>i<span class="hl opt">]) {</span>
                    buffer<span class="hl opt">[</span>bufferIndex<span class="hl opt">++] =</span> chars<span class="hl opt">[</span>i<span class="hl opt">];</span>
                    <span class="hl kwa">continue</span> outer<span class="hl opt">;</span>
                 <span class="hl opt">}</span>
              <span class="hl opt">}</span>

                buffer<span class="hl opt">[</span>bufferIndex<span class="hl opt">++] =</span> chars<span class="hl opt">[</span>len<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">];</span>
          <span class="hl opt">}</span>

            <span class="hl kwa">return</span> bufferIndex<span class="hl opt">;</span>
       <span class="hl opt">}</span>

        <span class="hl slc">// pseudo-random number generator</span>
        <span class="hl kwa">public static final</span> <span class="hl kwb">float</span> <span class="hl kwd">random</span><span class="hl opt">(</span><span class="hl kwa">final</span> <span class="hl kwb">float</span> max<span class="hl opt">) {</span>
           <span class="hl kwa">final</span> <span class="hl kwb">float</span> oneOverIM <span class="hl opt">= (</span><span class="hl num">1.0</span>f<span class="hl opt">/</span> IM<span class="hl opt">);</span>
            last <span class="hl opt">= (</span>last <span class="hl opt">*</span> IA <span class="hl opt">+</span> IC<span class="hl opt">) %</span> IM<span class="hl opt">;</span>
            <span class="hl kwa">return</span> max <span class="hl opt">*</span> last <span class="hl opt">*</span> oneOverIM<span class="hl opt">;</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span>
<span class="hl opt">}</span>
