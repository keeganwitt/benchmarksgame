<span class="hl slc">% The Computer Language Benchmarks Game</span>
<span class="hl slc">% http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">%%</span>
<span class="hl slc">%% k-nucleotide - using binaries and process dictionaries</span>
<span class="hl slc">%% Contributed by Erik Søe Sørensen</span>
<span class="hl slc">%%</span>

<span class="hl opt">-</span><span class="hl kwd">module</span><span class="hl opt">(</span>knucleotide_pdict<span class="hl opt">).</span>

<span class="hl opt">-</span><span class="hl kwd">export</span><span class="hl opt">([</span>main<span class="hl opt">/</span><span class="hl num">1</span><span class="hl opt">,</span> body<span class="hl opt">/</span><span class="hl num">0</span><span class="hl opt">]).</span>

<span class="hl opt">-</span><span class="hl kwd">define</span><span class="hl opt">(</span>WORKER_LENGTHS<span class="hl opt">, [</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">2</span><span class="hl opt">,</span><span class="hl num">3</span><span class="hl opt">,</span><span class="hl num">4</span><span class="hl opt">,</span><span class="hl num">6</span><span class="hl opt">,</span><span class="hl num">12</span><span class="hl opt">,</span><span class="hl num">18</span><span class="hl opt">]).</span>
<span class="hl opt">-</span><span class="hl kwd">define</span><span class="hl opt">(</span>WORKER_QUERIES<span class="hl opt">,</span>
		  <span class="hl opt">[</span>all_by_frequency<span class="hl opt">,</span>
		   all_by_frequency<span class="hl opt">,</span>
		   <span class="hl opt">{</span>find_frequency<span class="hl opt">, &lt;&lt;</span><span class="hl str">&quot;GGT&quot;</span><span class="hl opt">&gt;&gt;},</span>
		   <span class="hl opt">{</span>find_frequency<span class="hl opt">, &lt;&lt;</span><span class="hl str">&quot;GGTA&quot;</span><span class="hl opt">&gt;&gt;},</span>
		   <span class="hl opt">{</span>find_frequency<span class="hl opt">, &lt;&lt;</span><span class="hl str">&quot;GGTATT&quot;</span><span class="hl opt">&gt;&gt;},</span>
		   <span class="hl opt">{</span>find_frequency<span class="hl opt">, &lt;&lt;</span><span class="hl str">&quot;GGTATTTTAATT&quot;</span><span class="hl opt">&gt;&gt;},</span>
		   <span class="hl opt">{</span>find_frequency<span class="hl opt">, &lt;&lt;</span><span class="hl str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="hl opt">&gt;&gt;}]).</span>

<span class="hl kwd">find_seq</span><span class="hl opt">() -&gt;</span>
    <span class="hl kwa">case</span> <span class="hl kwc">io</span><span class="hl opt">:</span><span class="hl kwd">get_line</span><span class="hl opt">(</span><span class="hl str">''</span><span class="hl opt">)</span> <span class="hl kwa">of</span>
	<span class="hl opt">&lt;&lt;</span><span class="hl str">&quot;&gt;&quot;</span><span class="hl opt">,</span> _<span class="hl opt">/</span><span class="hl kwb">binary</span><span class="hl opt">&gt;&gt; -&gt;</span>
	    ok<span class="hl opt">;</span>         <span class="hl slc">% Found</span>
	eof <span class="hl opt">-&gt;</span>
	    <span class="hl kwb">exit</span><span class="hl opt">(</span>eof<span class="hl opt">);</span>
	_ <span class="hl opt">-&gt;</span>
	    <span class="hl kwd">find_seq</span><span class="hl opt">()</span>  <span class="hl slc">% Keep searching</span>
    <span class="hl kwa">end</span><span class="hl opt">.</span>

<span class="hl kwd">process_seq</span><span class="hl opt">(</span>Dests<span class="hl opt">) -&gt;</span>
    <span class="hl kwa">case</span> <span class="hl kwc">io</span><span class="hl opt">:</span><span class="hl kwd">get_line</span><span class="hl opt">(</span><span class="hl str">''</span><span class="hl opt">)</span> <span class="hl kwa">of</span>
	<span class="hl opt">&lt;&lt;</span><span class="hl str">&quot;&gt;&quot;</span><span class="hl opt">,</span> _<span class="hl opt">/</span><span class="hl kwb">binary</span><span class="hl opt">&gt;&gt; -&gt;</span>
	    done<span class="hl opt">;</span>
	eof <span class="hl opt">-&gt;</span>
	    <span class="hl kwc">lists</span><span class="hl opt">:</span><span class="hl kwd">foreach</span><span class="hl opt">(</span><span class="hl kwa">fun</span><span class="hl opt">(</span>Dest<span class="hl opt">)-&gt;</span>Dest <span class="hl opt">!</span> eof <span class="hl kwa">end</span><span class="hl opt">,</span> Dests<span class="hl opt">),</span>
	    ok<span class="hl opt">;</span>
	Line <span class="hl kwa">when</span> <span class="hl kwd">is_binary</span><span class="hl opt">(</span>Line<span class="hl opt">) -&gt;</span>
	    Data <span class="hl opt">=</span> <span class="hl kwd">normalize_line</span><span class="hl opt">(</span>Line<span class="hl opt">),</span>
	    <span class="hl kwc">lists</span><span class="hl opt">:</span><span class="hl kwd">foreach</span><span class="hl opt">(</span><span class="hl kwa">fun</span><span class="hl opt">(</span>Dest<span class="hl opt">)-&gt;</span>Dest <span class="hl opt">!</span> Data <span class="hl kwa">end</span><span class="hl opt">,</span> Dests<span class="hl opt">),</span>
	    <span class="hl kwd">process_seq</span><span class="hl opt">(</span>Dests<span class="hl opt">)</span>
    <span class="hl kwa">end</span><span class="hl opt">.</span>


<span class="hl kwd">normalize_line</span><span class="hl opt">(</span>Bin<span class="hl opt">) -&gt;</span>
    <span class="hl kwb">list_to_binary</span><span class="hl opt">([</span><span class="hl kwd">to_upper</span><span class="hl opt">(</span>C<span class="hl opt">)</span> || C<span class="hl opt">&lt;-</span><span class="hl kwb">binary_to_list</span><span class="hl opt">(</span>Bin<span class="hl opt">),</span> C <span class="hl opt">=/=</span> $<span class="hl esc">\n</span><span class="hl opt">]).</span>

<span class="hl kwd">to_upper</span><span class="hl opt">(</span>Char<span class="hl opt">)</span> <span class="hl kwa">when</span> $a <span class="hl opt">=&lt;</span> Char<span class="hl opt">,</span> Char <span class="hl opt">=&lt;</span> $z <span class="hl opt">-&gt;</span> Char <span class="hl opt">-</span> $a <span class="hl opt">+</span> $A<span class="hl opt">;</span>
<span class="hl kwd">to_upper</span><span class="hl opt">(</span>Char<span class="hl opt">)                             -&gt;</span> Char<span class="hl opt">.</span>

<span class="hl kwd">spawn_worker</span><span class="hl opt">(</span>Len<span class="hl opt">) -&gt;</span>
    <span class="hl kwb">spawn</span><span class="hl opt">(</span><span class="hl kwa">fun</span><span class="hl opt">()-&gt;</span><span class="hl kwd">worker_read</span><span class="hl opt">(</span>Len<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">, &lt;&lt;&gt;&gt;)</span> <span class="hl kwa">end</span><span class="hl opt">).</span>

<span class="hl kwd">worker_read</span><span class="hl opt">(</span>Len<span class="hl opt">,</span> Total<span class="hl opt">,</span>Buf<span class="hl opt">)</span> <span class="hl kwa">when</span> <span class="hl kwd">is_integer</span><span class="hl opt">(</span>Len<span class="hl opt">),</span>
				      <span class="hl kwd">is_integer</span><span class="hl opt">(</span>Total<span class="hl opt">),</span>
				<span class="hl kwd">is_binary</span><span class="hl opt">(</span>Buf<span class="hl opt">),</span>
				<span class="hl kwd">byte_size</span><span class="hl opt">(</span>Buf<span class="hl opt">) &lt;</span> Len <span class="hl opt">-&gt;</span>
    <span class="hl kwa">receive</span>
	Data <span class="hl kwa">when</span> <span class="hl kwd">is_binary</span><span class="hl opt">(</span>Data<span class="hl opt">) -&gt;</span>
	    <span class="hl kwd">worker_read</span><span class="hl opt">(</span>Len<span class="hl opt">,</span> Total<span class="hl opt">, &lt;&lt;</span>Buf<span class="hl opt">/</span><span class="hl kwb">binary</span><span class="hl opt">,</span> Data<span class="hl opt">/</span><span class="hl kwb">binary</span><span class="hl opt">&gt;&gt;);</span>
	eof <span class="hl opt">-&gt;</span>
	    <span class="hl kwd">worker_done</span><span class="hl opt">(</span>Total<span class="hl opt">)</span>
    <span class="hl kwa">end</span><span class="hl opt">;</span>
<span class="hl kwd">worker_read</span><span class="hl opt">(</span>Len<span class="hl opt">,</span> Total<span class="hl opt">,</span> Buf<span class="hl opt">)</span> <span class="hl kwa">when</span> <span class="hl kwd">is_integer</span><span class="hl opt">(</span>Len<span class="hl opt">),</span>
                                <span class="hl kwd">is_integer</span><span class="hl opt">(</span>Total<span class="hl opt">),</span>
				<span class="hl kwd">is_binary</span><span class="hl opt">(</span>Buf<span class="hl opt">),</span>
				<span class="hl kwd">byte_size</span><span class="hl opt">(</span>Buf<span class="hl opt">) &gt;=</span> Len <span class="hl opt">-&gt;</span>
    <span class="hl opt">&lt;&lt;</span><span class="hl kwc">Key</span><span class="hl opt">:</span>Len<span class="hl opt">/</span><span class="hl kwb">binary</span><span class="hl opt">,</span> _<span class="hl opt">/</span><span class="hl kwb">binary</span><span class="hl opt">&gt;&gt; =</span> Buf<span class="hl opt">,</span>
    Before <span class="hl opt">=</span> <span class="hl kwa">case</span> <span class="hl kwb">get</span><span class="hl opt">(</span>Key<span class="hl opt">)</span> <span class="hl kwa">of</span>
		 undefined <span class="hl opt">-&gt;</span> <span class="hl num">0</span><span class="hl opt">;</span>
		 X <span class="hl kwa">when</span> <span class="hl kwd">is_integer</span><span class="hl opt">(</span>X<span class="hl opt">) -&gt;</span> X
	     <span class="hl kwa">end</span><span class="hl opt">,</span>
    <span class="hl kwb">put</span><span class="hl opt">(</span>Key<span class="hl opt">,</span> Before <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">),</span>
    <span class="hl opt">&lt;&lt;</span>_<span class="hl opt">,</span> Rest<span class="hl opt">/</span><span class="hl kwb">binary</span><span class="hl opt">&gt;&gt; =</span> Buf<span class="hl opt">,</span>
    <span class="hl kwd">worker_read</span><span class="hl opt">(</span>Len<span class="hl opt">,</span> Total<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">,</span> Rest<span class="hl opt">).</span>

<span class="hl kwd">worker_done</span><span class="hl opt">(</span>Total<span class="hl opt">) -&gt;</span>
    <span class="hl kwa">receive</span>
	<span class="hl opt">{</span>all_by_frequency<span class="hl opt">,</span> Pid<span class="hl opt">,</span> Ref<span class="hl opt">} -&gt;</span>
	    Answer <span class="hl opt">=</span> <span class="hl kwc">lists</span><span class="hl opt">:</span><span class="hl kwd">keysort</span><span class="hl opt">(</span><span class="hl num">2</span><span class="hl opt">,</span> <span class="hl kwb">get</span><span class="hl opt">()),</span>
	    TxtAnswer <span class="hl opt">=</span> <span class="hl kwc">lists</span><span class="hl opt">:</span><span class="hl kwd">foldl</span><span class="hl opt">(</span><span class="hl kwa">fun</span><span class="hl opt">({</span>Key<span class="hl opt">,</span>Freq<span class="hl opt">},</span>Acc<span class="hl opt">) -&gt;</span>
					    <span class="hl opt">[</span>Key<span class="hl opt">,</span> $\ <span class="hl opt">,</span>
					     <span class="hl kwc">io_lib</span><span class="hl opt">:</span><span class="hl kwd">format</span><span class="hl opt">(</span><span class="hl str">&quot;~.3f&quot;</span><span class="hl opt">, [</span>Freq<span class="hl opt">*</span><span class="hl num">100</span><span class="hl opt">/</span>Total<span class="hl opt">]),</span>
					     $<span class="hl esc">\n</span> | Acc<span class="hl opt">]</span>
				    <span class="hl kwa">end</span><span class="hl opt">,</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> Answer<span class="hl opt">),</span>
	    Pid <span class="hl opt">! {</span>Ref<span class="hl opt">,</span>TxtAnswer<span class="hl opt">};</span>
	<span class="hl opt">{{</span>find_frequency<span class="hl opt">,</span> Key<span class="hl opt">},</span> Pid<span class="hl opt">,</span>Ref<span class="hl opt">} -&gt;</span>
	    Freq <span class="hl opt">=</span> <span class="hl kwa">case</span> <span class="hl kwb">get</span><span class="hl opt">(</span>Key<span class="hl opt">)</span> <span class="hl kwa">of</span>
		       undefined <span class="hl opt">-&gt;</span> <span class="hl num">0</span><span class="hl opt">;</span>
		       X <span class="hl opt">-&gt;</span> X
		   <span class="hl kwa">end</span><span class="hl opt">,</span>
	    TxtAnswer <span class="hl opt">= [</span><span class="hl kwb">integer_to_list</span><span class="hl opt">(</span>Freq<span class="hl opt">),</span> $<span class="hl esc">\t</span><span class="hl opt">,</span> Key<span class="hl opt">,</span> $<span class="hl esc">\n</span><span class="hl opt">],</span>
	    Pid <span class="hl opt">! {</span>Ref<span class="hl opt">,</span>TxtAnswer<span class="hl opt">};</span>
	stop <span class="hl opt">-&gt;</span>
	    <span class="hl kwb">exit</span><span class="hl opt">(</span>normal<span class="hl opt">)</span>
    <span class="hl kwa">end</span><span class="hl opt">,</span>
    done<span class="hl opt">.</span>

<span class="hl kwd">body</span><span class="hl opt">() -&gt;</span>
    <span class="hl slc">%% Start workers in background:</span>
    Pids <span class="hl opt">=</span> <span class="hl kwc">lists</span><span class="hl opt">:</span><span class="hl kwd">map</span><span class="hl opt">(</span><span class="hl kwa">fun</span> spawn_worker<span class="hl opt">/</span><span class="hl num">1</span><span class="hl opt">,</span> ?WORKER_LENGTHS<span class="hl opt">),</span>

    <span class="hl kwc">io</span><span class="hl opt">:</span><span class="hl kwd">setopts</span><span class="hl opt">(</span>standard_io<span class="hl opt">, [</span><span class="hl kwb">binary</span><span class="hl opt">]),</span>

    <span class="hl slc">%% Skip to third sequence:</span>
    <span class="hl kwd">find_seq</span><span class="hl opt">(),</span>
    <span class="hl kwd">find_seq</span><span class="hl opt">(),</span>
    <span class="hl kwd">find_seq</span><span class="hl opt">(),</span>
    <span class="hl kwd">process_seq</span><span class="hl opt">(</span>Pids<span class="hl opt">),</span>

    <span class="hl slc">%% Request answers:</span>
    Refs <span class="hl opt">=</span>
	<span class="hl kwc">lists</span><span class="hl opt">:</span><span class="hl kwd">zipwith</span><span class="hl opt">(</span><span class="hl kwa">fun</span> <span class="hl opt">(</span>Pid<span class="hl opt">,</span>Query<span class="hl opt">) -&gt;</span>
			      Ref <span class="hl opt">=</span> <span class="hl kwb">make_ref</span><span class="hl opt">(),</span>
			      Pid <span class="hl opt">! {</span>Query<span class="hl opt">,</span> <span class="hl kwb">self</span><span class="hl opt">(),</span> Ref<span class="hl opt">},</span>
			      Ref
		      <span class="hl kwa">end</span><span class="hl opt">,</span>
		      Pids<span class="hl opt">,</span> ?WORKER_QUERIES<span class="hl opt">),</span>

    <span class="hl slc">%% Receive and print answers:</span>
    <span class="hl kwc">lists</span><span class="hl opt">:</span><span class="hl kwd">foreach</span><span class="hl opt">(</span><span class="hl kwa">fun</span><span class="hl opt">(</span>Ref<span class="hl opt">) -&gt;</span>
			  <span class="hl kwa">receive</span> <span class="hl opt">{</span>Ref<span class="hl opt">,</span> Answer<span class="hl opt">} -&gt;</span>
				  <span class="hl kwc">io</span><span class="hl opt">:</span><span class="hl kwd">put_chars</span><span class="hl opt">(</span>Answer<span class="hl opt">)</span>
			  <span class="hl kwa">end</span>
		  <span class="hl kwa">end</span><span class="hl opt">,</span> Refs<span class="hl opt">),</span>
    ok<span class="hl opt">.</span>

<span class="hl kwd">main</span><span class="hl opt">(</span>_Args<span class="hl opt">) -&gt;</span>
    <span class="hl kwd">body</span><span class="hl opt">(),</span>
    <span class="hl kwb">halt</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">).</span>
