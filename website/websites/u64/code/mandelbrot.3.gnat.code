<span class="hl slc">--  The Computer Language Benchmarks Game</span>
<span class="hl slc">--  http://benchmarksgame.alioth.debian.org</span>
<span class="hl slc">--</span>
<span class="hl slc">--  Contributed by Jim Rogers</span>
<span class="hl slc">--  Modified by Pascal Obry, Gautier de Montmollin, Georg Bauhaus, Jonathan Parker</span>

<span class="hl kwa">pragma</span> Restrictions <span class="hl opt">(</span>No_Abort_Statements<span class="hl opt">);</span>
<span class="hl kwa">pragma</span> Restrictions <span class="hl opt">(</span>Max_Asynchronous_Select_Nesting <span class="hl opt">=&gt;</span> <span class="hl num">0</span><span class="hl opt">);</span>

<span class="hl kwa">with</span> Ada<span class="hl opt">.</span>Command_Line<span class="hl opt">;</span>      <span class="hl kwa">use</span> Ada<span class="hl opt">.</span>Command_Line<span class="hl opt">;</span>

<span class="hl kwa">with</span> Interfaces<span class="hl opt">;</span>            <span class="hl kwa">use</span> Interfaces<span class="hl opt">;</span>
<span class="hl kwa">with</span> Ada<span class="hl opt">.</span>Streams<span class="hl opt">.</span>Stream_IO<span class="hl opt">;</span> <span class="hl kwa">use</span> Ada<span class="hl opt">.</span>Streams<span class="hl opt">;</span>

<span class="hl kwa">procedure</span> Mandelbrot <span class="hl kwa">is</span>

   <span class="hl kwa">type</span> Real <span class="hl kwa">is digits</span> <span class="hl num">15</span><span class="hl opt">;</span>
   <span class="hl kwa">type</span> M8 <span class="hl kwa">is mod</span> <span class="hl num">8</span><span class="hl opt">;</span>
   <span class="hl kwa">type</span> PCount <span class="hl kwa">is range</span> <span class="hl num">0</span> <span class="hl opt">..</span> <span class="hl num">2</span><span class="hl opt">**</span><span class="hl num">20</span> <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">;</span>

   Iter        <span class="hl opt">:</span> <span class="hl kwa">constant</span> <span class="hl opt">:=</span> <span class="hl num">50</span><span class="hl opt">;</span>
   Limit       <span class="hl opt">:</span> <span class="hl kwa">constant</span> <span class="hl opt">:=</span> <span class="hl num">4.0</span><span class="hl opt">;</span>
   Size        <span class="hl opt">:</span> <span class="hl kwa">constant</span> <span class="hl kwb">Positive</span> <span class="hl opt">:=</span> <span class="hl kwb">Positive</span><span class="hl kwd">'Value</span> <span class="hl opt">(</span>Argument <span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">));</span>
   Two_on_Size <span class="hl opt">:</span> <span class="hl kwa">constant</span> Real <span class="hl opt">:=</span> <span class="hl num">2.0</span> <span class="hl opt">/</span> Real <span class="hl opt">(</span>Size<span class="hl opt">);</span>

   <span class="hl kwa">subtype</span> Output_Index <span class="hl kwa">is</span> Stream_Element_Offset <span class="hl kwa">range</span> <span class="hl num">1</span> <span class="hl opt">..</span> Stream_Element_Offset<span class="hl kwd">'Last</span><span class="hl opt">;</span>
   <span class="hl kwa">subtype</span> Output_Queue <span class="hl kwa">is</span> Stream_Element_Array<span class="hl opt">;</span>
   <span class="hl kwa">type</span> Output <span class="hl kwa">is access</span> Output_Queue<span class="hl opt">;</span>

   <span class="hl kwa">task type</span> X_Step <span class="hl kwa">is</span>
      <span class="hl kwa">entry</span> Compute_Z <span class="hl opt">(</span>Y1<span class="hl opt">,</span> Y2 <span class="hl opt">:</span> PCount<span class="hl opt">);</span>
      <span class="hl kwa">entry</span> Get_Output <span class="hl opt">(</span>Result <span class="hl opt">:</span> <span class="hl kwa">out</span> Output<span class="hl opt">);</span>
   <span class="hl kwa">end</span> X_Step<span class="hl opt">;</span>

   <span class="hl kwa">procedure</span> Allocate_Output_Queue <span class="hl opt">(</span>Y1<span class="hl opt">,</span> Y2 <span class="hl opt">:</span> PCount<span class="hl opt">;</span> Result <span class="hl opt">:</span> <span class="hl kwa">out</span> Output<span class="hl opt">);</span>
   <span class="hl kwa">pragma</span> Precondition
     <span class="hl opt">(</span>Output_Index<span class="hl kwd">'First</span> <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">);</span>
   <span class="hl kwa">pragma</span> Postcondition
     <span class="hl opt">(</span>Result<span class="hl kwd">'First</span> <span class="hl opt">=</span> Output_Index<span class="hl kwd">'First</span> <span class="hl kwa">and</span>
      Result<span class="hl kwd">'Last</span> <span class="hl opt">=</span> Output_Index<span class="hl kwd">'Max</span>
        <span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> Stream_Element_Offset <span class="hl opt">(</span><span class="hl kwb">Integer</span> <span class="hl opt">(</span>Y2 <span class="hl opt">-</span> Y1<span class="hl opt">) * (</span>Size <span class="hl opt">/</span> <span class="hl num">8</span> <span class="hl opt">+</span> <span class="hl kwb">Boolean</span><span class="hl kwd">'Pos</span> <span class="hl opt">(</span>Size <span class="hl kwa">mod</span> <span class="hl num">8</span> <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">)))));</span>

   <span class="hl kwa">procedure</span> Compute <span class="hl opt">(</span>Y1<span class="hl opt">,</span> Y2 <span class="hl opt">:</span> PCount<span class="hl opt">;</span> Result <span class="hl opt">:</span> Output<span class="hl opt">)</span>
   <span class="hl kwa">is</span>
      <span class="hl kwa">subtype</span> Instruction_Stream_Index <span class="hl kwa">is</span> <span class="hl kwb">Integer</span> <span class="hl kwa">range</span> <span class="hl num">1</span> <span class="hl opt">..</span> <span class="hl num">2</span><span class="hl opt">;</span>
      <span class="hl kwa">pragma</span> Assert <span class="hl opt">(</span>Instruction_Stream_Index<span class="hl kwd">'First</span> <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">);</span>

      Bit_Num  <span class="hl opt">:</span> M8         <span class="hl opt">:=</span> <span class="hl num">0</span><span class="hl opt">;</span>
      Byte_Acc <span class="hl opt">:</span> Unsigned_8 <span class="hl opt">:=</span> <span class="hl num">0</span><span class="hl opt">;</span>
      Byte_Acc_Storage <span class="hl opt">:</span> <span class="hl kwa">array</span> <span class="hl opt">(</span>Instruction_Stream_Index<span class="hl opt">)</span> <span class="hl kwa">of</span> Unsigned_8<span class="hl opt">;</span>
      Last     <span class="hl opt">:</span> Stream_Element_Offset <span class="hl opt">:=</span> Result<span class="hl kwd">'First</span> <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">;</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">for</span> Y <span class="hl kwa">in</span> Y1 <span class="hl opt">..</span> Y2 <span class="hl opt">-</span> <span class="hl num">1</span> <span class="hl kwa">loop</span>
         <span class="hl kwa">for</span> X <span class="hl kwa">in</span> <span class="hl num">0</span> <span class="hl opt">..</span> Size <span class="hl opt">/</span> Instruction_Stream_Index<span class="hl kwd">'Last</span> <span class="hl opt">-</span> <span class="hl num">1</span> <span class="hl kwa">loop</span>
            <span class="hl kwa">declare</span>
               Cr_1 <span class="hl opt">:</span> <span class="hl kwa">constant</span> Real <span class="hl opt">:=</span> Two_on_Size <span class="hl opt">* (</span>Real <span class="hl opt">(</span><span class="hl num">2</span><span class="hl opt">*</span>X<span class="hl opt">)) -</span> <span class="hl num">1.5</span><span class="hl opt">;</span>
               Ci_1 <span class="hl opt">:</span> <span class="hl kwa">constant</span> Real <span class="hl opt">:=</span> Two_on_Size <span class="hl opt">* (</span>Real <span class="hl opt">(</span>Y<span class="hl opt">)) -</span> <span class="hl num">1.0</span><span class="hl opt">;</span>
               Zr_1 <span class="hl opt">:</span> Real <span class="hl opt">:=</span> Cr_1<span class="hl opt">;</span>
               Zi_1 <span class="hl opt">:</span> Real <span class="hl opt">:=</span> Ci_1<span class="hl opt">;</span>
               ZZi_1 <span class="hl opt">:</span> Real <span class="hl opt">:=</span> Zi_1 <span class="hl opt">*</span> Zi_1<span class="hl opt">;</span>
               ZZr_1 <span class="hl opt">:</span> Real <span class="hl opt">:=</span> Zr_1 <span class="hl opt">*</span> Zr_1<span class="hl opt">;</span>
               Z_1_Exceeded_Limit <span class="hl opt">:</span> <span class="hl kwb">Boolean</span> <span class="hl opt">:=</span> <span class="hl kwd">False</span><span class="hl opt">;</span>
               Tmp_1 <span class="hl opt">:</span> Real<span class="hl opt">;</span>

               Cr_2 <span class="hl opt">:</span> <span class="hl kwa">constant</span> Real <span class="hl opt">:=</span> Two_on_Size <span class="hl opt">* (</span>Real <span class="hl opt">(</span><span class="hl num">2</span><span class="hl opt">*</span>X <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">)) -</span> <span class="hl num">1.5</span><span class="hl opt">;</span>
               Ci_2 <span class="hl opt">:</span> <span class="hl kwa">constant</span> Real <span class="hl opt">:=</span> Two_on_Size <span class="hl opt">* (</span>Real <span class="hl opt">(</span>Y<span class="hl opt">)) -</span> <span class="hl num">1.0</span><span class="hl opt">;</span>
               Zr_2 <span class="hl opt">:</span> Real <span class="hl opt">:=</span> Cr_2<span class="hl opt">;</span>
               Zi_2 <span class="hl opt">:</span> Real <span class="hl opt">:=</span> Ci_2<span class="hl opt">;</span>
               ZZi_2 <span class="hl opt">:</span> Real <span class="hl opt">:=</span> Zi_2 <span class="hl opt">*</span> Zi_2<span class="hl opt">;</span>
               ZZr_2 <span class="hl opt">:</span> Real <span class="hl opt">:=</span> Zr_2 <span class="hl opt">*</span> Zr_2<span class="hl opt">;</span>
               Z_2_Exceeded_Limit <span class="hl opt">:</span> <span class="hl kwb">Boolean</span> <span class="hl opt">:=</span> <span class="hl kwd">False</span><span class="hl opt">;</span>
               Tmp_2 <span class="hl opt">:</span> Real<span class="hl opt">;</span>
            <span class="hl kwa">begin</span>
               <span class="hl kwa">for</span> I <span class="hl kwa">in</span> <span class="hl num">1</span> <span class="hl opt">..</span> Iter <span class="hl kwa">loop</span>

                  Tmp_1 <span class="hl opt">:=</span> Zr_1 <span class="hl opt">*</span> Zi_1<span class="hl opt">;</span>
                  Tmp_2 <span class="hl opt">:=</span> Zr_2 <span class="hl opt">*</span> Zi_2<span class="hl opt">;</span>
                  Zr_1 <span class="hl opt">:=</span> Cr_1 <span class="hl opt">-</span> ZZi_1<span class="hl opt">;</span>
                  Zr_2 <span class="hl opt">:=</span> Cr_2 <span class="hl opt">-</span> ZZi_2<span class="hl opt">;</span>
                  Zi_1 <span class="hl opt">:=</span> Ci_1 <span class="hl opt">+</span> Tmp_1 <span class="hl opt">+</span> Tmp_1<span class="hl opt">;</span>
                  Zi_2 <span class="hl opt">:=</span> Ci_2 <span class="hl opt">+</span> Tmp_2 <span class="hl opt">+</span> Tmp_2<span class="hl opt">;</span>
                  Zr_1 <span class="hl opt">:=</span> Zr_1 <span class="hl opt">+</span> ZZr_1<span class="hl opt">;</span>
                  Zr_2 <span class="hl opt">:=</span> Zr_2 <span class="hl opt">+</span> ZZr_2<span class="hl opt">;</span>

                  <span class="hl kwa">if not</span> Z_1_Exceeded_Limit <span class="hl kwa">then</span>
                     <span class="hl kwa">if</span> ZZi_1 <span class="hl opt">+</span> ZZr_1 <span class="hl opt">&gt;</span> Limit <span class="hl kwa">then</span>
                        Z_1_Exceeded_Limit <span class="hl opt">:=</span> <span class="hl kwd">True</span><span class="hl opt">;</span>
                     <span class="hl kwa">end if</span><span class="hl opt">;</span>
                  <span class="hl kwa">end if</span><span class="hl opt">;</span>
                  <span class="hl kwa">if not</span> Z_1_Exceeded_Limit <span class="hl kwa">then</span>
                     ZZr_1 <span class="hl opt">:=</span> Zr_1 <span class="hl opt">*</span> Zr_1<span class="hl opt">;</span>
                     ZZi_1 <span class="hl opt">:=</span> Zi_1 <span class="hl opt">*</span> Zi_1<span class="hl opt">;</span>
                  <span class="hl kwa">end if</span><span class="hl opt">;</span>

                  <span class="hl kwa">if not</span> Z_2_Exceeded_Limit <span class="hl kwa">then</span>
                     <span class="hl kwa">if</span> ZZi_2 <span class="hl opt">+</span> ZZr_2 <span class="hl opt">&gt;</span> Limit <span class="hl kwa">then</span>
                        Z_2_Exceeded_Limit <span class="hl opt">:=</span> <span class="hl kwd">True</span><span class="hl opt">;</span>
                     <span class="hl kwa">end if</span><span class="hl opt">;</span>
                  <span class="hl kwa">end if</span><span class="hl opt">;</span>
                  <span class="hl kwa">if not</span> Z_2_Exceeded_Limit <span class="hl kwa">then</span>
                     ZZr_2 <span class="hl opt">:=</span> Zr_2 <span class="hl opt">*</span> Zr_2<span class="hl opt">;</span>
                     ZZi_2 <span class="hl opt">:=</span> Zi_2 <span class="hl opt">*</span> Zi_2<span class="hl opt">;</span>
                  <span class="hl kwa">end if</span><span class="hl opt">;</span>

                  <span class="hl kwa">exit when</span> Z_2_Exceeded_Limit <span class="hl kwa">and</span> Z_1_Exceeded_Limit<span class="hl opt">;</span>
               <span class="hl kwa">end loop</span><span class="hl opt">;</span>

               <span class="hl kwa">if</span> Z_1_Exceeded_Limit <span class="hl kwa">then</span>
                  Byte_Acc <span class="hl opt">:=</span> Shift_Left <span class="hl opt">(</span>Byte_Acc<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">)</span> <span class="hl kwa">or</span> <span class="hl num">16</span>#<span class="hl num">00</span>#<span class="hl opt">;</span>
               <span class="hl kwa">else</span>
                  Byte_Acc <span class="hl opt">:=</span> Shift_Left <span class="hl opt">(</span>Byte_Acc<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">)</span> <span class="hl kwa">or</span> <span class="hl num">16</span>#<span class="hl num">01</span>#<span class="hl opt">;</span>
               <span class="hl kwa">end if</span><span class="hl opt">;</span>
               Byte_Acc_Storage <span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">) :=</span> Byte_Acc<span class="hl opt">;</span>

               <span class="hl kwa">if</span> Z_2_Exceeded_Limit <span class="hl kwa">then</span>
                  Byte_Acc <span class="hl opt">:=</span> Shift_Left <span class="hl opt">(</span>Byte_Acc<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">)</span> <span class="hl kwa">or</span> <span class="hl num">16</span>#<span class="hl num">00</span>#<span class="hl opt">;</span>
               <span class="hl kwa">else</span>
                  Byte_Acc <span class="hl opt">:=</span> Shift_Left <span class="hl opt">(</span>Byte_Acc<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">)</span> <span class="hl kwa">or</span> <span class="hl num">16</span>#<span class="hl num">01</span>#<span class="hl opt">;</span>
               <span class="hl kwa">end if</span><span class="hl opt">;</span>
               Byte_Acc_Storage <span class="hl opt">(</span><span class="hl num">2</span><span class="hl opt">) :=</span> Byte_Acc<span class="hl opt">;</span>
            <span class="hl kwa">end</span><span class="hl opt">;</span>

            <span class="hl kwa">for</span> j <span class="hl kwa">in</span> Byte_Acc_Storage<span class="hl kwd">'Range</span> <span class="hl kwa">loop</span>

               Bit_Num <span class="hl opt">:=</span> Bit_Num <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span>

               <span class="hl kwa">if</span> Bit_Num <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
                  Last <span class="hl opt">:=</span> Last <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span>
                  Result <span class="hl opt">(</span>Last<span class="hl opt">) :=</span> Stream_Element <span class="hl opt">(</span>Byte_Acc_Storage <span class="hl opt">(</span>j<span class="hl opt">));</span>
                  Byte_Acc <span class="hl opt">:=</span> <span class="hl num">0</span><span class="hl opt">;</span>
               <span class="hl kwa">end if</span><span class="hl opt">;</span>

            <span class="hl kwa">end loop</span><span class="hl opt">;</span>
         <span class="hl kwa">end loop</span><span class="hl opt">;</span>

         <span class="hl kwa">case</span> M8 <span class="hl opt">(</span>Size <span class="hl kwa">mod</span> <span class="hl num">8</span><span class="hl opt">)</span> <span class="hl kwa">is</span>
            <span class="hl kwa">when</span> <span class="hl num">0</span> <span class="hl opt">=&gt;</span>
               <span class="hl kwa">null</span><span class="hl opt">;</span>
            <span class="hl kwa">when</span> <span class="hl num">1</span> | <span class="hl num">3</span> | <span class="hl num">5</span> | <span class="hl num">7</span> <span class="hl opt">=&gt;</span>
               <span class="hl kwa">pragma</span> Assert <span class="hl opt">(</span><span class="hl kwd">False</span><span class="hl opt">);</span>  <span class="hl slc">-- odd Size not covered</span>
               <span class="hl kwa">null</span><span class="hl opt">;</span>
            <span class="hl kwa">when</span> <span class="hl num">2</span> | <span class="hl num">4</span> | <span class="hl num">6</span> <span class="hl opt">=&gt;</span>
               Byte_Acc_Storage <span class="hl opt">(</span><span class="hl num">2</span><span class="hl opt">) :=</span> Shift_Left <span class="hl opt">(</span>Byte_Acc<span class="hl opt">,</span> <span class="hl num">8</span> <span class="hl opt">- (</span>Size <span class="hl kwa">mod</span> <span class="hl num">8</span><span class="hl opt">));</span>
               Last <span class="hl opt">:=</span> Last <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span>
               Result <span class="hl opt">(</span>Last<span class="hl opt">) :=</span> Stream_Element <span class="hl opt">(</span>Byte_Acc_Storage <span class="hl opt">(</span><span class="hl num">2</span><span class="hl opt">));</span>
               Byte_Acc <span class="hl opt">:=</span> <span class="hl num">0</span><span class="hl opt">;</span>
               Bit_Num  <span class="hl opt">:=</span> <span class="hl num">0</span><span class="hl opt">;</span>
         <span class="hl kwa">end case</span><span class="hl opt">;</span>
      <span class="hl kwa">end loop</span><span class="hl opt">;</span>
   <span class="hl kwa">end</span> Compute<span class="hl opt">;</span>

   <span class="hl kwa">task body</span> X_Step <span class="hl kwa">is</span>
      Y1<span class="hl opt">,</span> Y2 <span class="hl opt">:</span> PCount<span class="hl opt">;</span>
      Data   <span class="hl opt">:</span> Output<span class="hl opt">;</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">accept</span> Compute_Z <span class="hl opt">(</span>Y1<span class="hl opt">,</span> Y2 <span class="hl opt">:</span> PCount<span class="hl opt">)</span> <span class="hl kwa">do</span>
         X_Step<span class="hl opt">.</span>Y1 <span class="hl opt">:=</span> Y1<span class="hl opt">;</span>
         X_Step<span class="hl opt">.</span>Y2 <span class="hl opt">:=</span> Y2<span class="hl opt">;</span>
      <span class="hl kwa">end</span> Compute_Z<span class="hl opt">;</span>

      Allocate_Output_Queue <span class="hl opt">(</span>Y1<span class="hl opt">,</span> Y2<span class="hl opt">,</span> Result <span class="hl opt">=&gt;</span> Data<span class="hl opt">);</span>
      Compute <span class="hl opt">(</span>Y1<span class="hl opt">,</span> Y2<span class="hl opt">,</span> Result <span class="hl opt">=&gt;</span> Data<span class="hl opt">);</span>

      <span class="hl kwa">accept</span> Get_Output <span class="hl opt">(</span>Result <span class="hl opt">:</span> <span class="hl kwa">out</span> Output<span class="hl opt">)</span> <span class="hl kwa">do</span>
         Result <span class="hl opt">:=</span> Data<span class="hl opt">;</span>
      <span class="hl kwa">end</span> Get_Output<span class="hl opt">;</span>
   <span class="hl kwa">end</span> X_Step<span class="hl opt">;</span>

   <span class="hl kwa">procedure</span> Allocate_Output_Queue <span class="hl opt">(</span>Y1<span class="hl opt">,</span> Y2 <span class="hl opt">:</span> PCount<span class="hl opt">;</span> Result <span class="hl opt">:</span> <span class="hl kwa">out</span> Output<span class="hl opt">)</span> <span class="hl kwa">is</span>
      Limit <span class="hl opt">:</span> <span class="hl kwa">constant</span> <span class="hl kwb">Natural</span> <span class="hl opt">:=</span> <span class="hl kwb">Natural</span><span class="hl kwd">'Max</span>
        <span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span>
         <span class="hl kwb">Integer</span> <span class="hl opt">(</span>Y2 <span class="hl opt">-</span> Y1<span class="hl opt">) * (</span>Size <span class="hl opt">/</span> <span class="hl num">8</span> <span class="hl opt">+</span> <span class="hl kwb">Boolean</span><span class="hl kwd">'Pos</span> <span class="hl opt">(</span>Size <span class="hl kwa">mod</span> <span class="hl num">8</span> <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">)));</span>
   <span class="hl kwa">begin</span>
      Result <span class="hl opt">:=</span> <span class="hl kwa">new</span> Output_Queue <span class="hl opt">(</span><span class="hl num">1</span> <span class="hl opt">..</span> Output_Index<span class="hl kwd">'Base</span> <span class="hl opt">(</span>Limit<span class="hl opt">));</span>
   <span class="hl kwa">end</span> Allocate_Output_Queue<span class="hl opt">;</span>

<span class="hl kwa">begin</span>
   <span class="hl kwa">pragma</span> Assert <span class="hl opt">(</span>Size <span class="hl kwa">mod</span> <span class="hl num">2</span> <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl str">&quot;Size must be even at present&quot;</span><span class="hl opt">);</span>

   <span class="hl kwa">declare</span>
      <span class="hl kwa">subtype</span> Worker_Index <span class="hl kwa">is</span> <span class="hl kwb">Natural</span> <span class="hl kwa">range</span> <span class="hl num">0</span> <span class="hl opt">..</span> <span class="hl num">32</span><span class="hl opt">;</span>
      Chunk_Size <span class="hl opt">:</span> <span class="hl kwa">constant</span> <span class="hl kwb">Positive</span> <span class="hl opt">:=</span>
        <span class="hl opt">(</span>Size <span class="hl opt">+</span> Worker_Index<span class="hl kwd">'Last</span><span class="hl opt">) /</span> Worker_Index<span class="hl kwd">'Last</span><span class="hl opt">;</span>
      Worker     <span class="hl opt">:</span> <span class="hl kwa">array</span> <span class="hl opt">(</span>Worker_Index<span class="hl opt">)</span> <span class="hl kwa">of</span> X_Step<span class="hl opt">;</span>
      <span class="hl kwa">pragma</span>       Assert <span class="hl opt">(</span>Worker<span class="hl kwd">'Length</span> <span class="hl opt">*</span> Chunk_Size <span class="hl opt">&gt;=</span> Size<span class="hl opt">);</span>
      <span class="hl kwa">pragma</span>       Assert <span class="hl opt">(</span>Worker<span class="hl kwd">'First</span> <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">);</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">for</span> P <span class="hl kwa">in</span> Worker<span class="hl kwd">'Range</span> <span class="hl kwa">loop</span>
         Worker <span class="hl opt">(</span>P<span class="hl opt">).</span>Compute_Z
           <span class="hl opt">(</span>Y1 <span class="hl opt">=&gt;</span> PCount <span class="hl opt">(</span>P <span class="hl opt">*</span> Chunk_Size<span class="hl opt">),</span>
            Y2 <span class="hl opt">=&gt;</span> PCount <span class="hl opt">(</span><span class="hl kwb">Positive</span><span class="hl kwd">'Min</span> <span class="hl opt">((</span>P <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">) *</span> Chunk_Size<span class="hl opt">,</span> Size<span class="hl opt">)));</span>
      <span class="hl kwa">end loop</span><span class="hl opt">;</span>

      <span class="hl kwa">declare</span>
         Stdout <span class="hl opt">:</span> Stream_IO<span class="hl opt">.</span>File_Type<span class="hl opt">;</span>
         Header <span class="hl opt">:</span> <span class="hl kwa">constant</span> <span class="hl kwb">String</span> <span class="hl opt">:=</span> <span class="hl str">&quot;P4&quot;</span> <span class="hl opt">&amp;</span> ASCII<span class="hl opt">.</span>LF <span class="hl opt">&amp;</span>
           Argument <span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">) &amp;</span> <span class="hl str">&quot; &quot;</span> <span class="hl opt">&amp;</span> Argument <span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">) &amp;</span> ASCII<span class="hl opt">.</span>LF<span class="hl opt">;</span>
         Buffer <span class="hl opt">:</span> Output<span class="hl opt">;</span>

         Header_Bytes <span class="hl opt">:</span> Stream_Element_Array <span class="hl opt">(</span><span class="hl num">1</span> <span class="hl opt">..</span> Header<span class="hl kwd">'Length</span><span class="hl opt">);</span>
         <span class="hl kwa">pragma</span> Import <span class="hl opt">(</span>Ada<span class="hl opt">,</span> Header_Bytes<span class="hl opt">);</span>
         <span class="hl kwa">for</span> Header_Bytes<span class="hl kwd">'Address</span> <span class="hl kwa">use</span> Header<span class="hl kwd">'Address</span><span class="hl opt">;</span>
      <span class="hl kwa">begin</span>
         Stream_IO<span class="hl opt">.</span>Open <span class="hl opt">(</span>Stdout<span class="hl opt">,</span> Stream_IO<span class="hl opt">.</span>Out_File<span class="hl opt">,</span> <span class="hl str">&quot;/dev/stdout&quot;</span><span class="hl opt">);</span>
         Stream_IO<span class="hl opt">.</span>Write <span class="hl opt">(</span>Stdout<span class="hl opt">,</span> Header_Bytes<span class="hl opt">);</span>
         <span class="hl kwa">for</span> P <span class="hl kwa">in</span> Worker<span class="hl kwd">'Range</span> <span class="hl kwa">loop</span>
            Worker <span class="hl opt">(</span>P<span class="hl opt">).</span>Get_Output <span class="hl opt">(</span>Result <span class="hl opt">=&gt;</span> Buffer<span class="hl opt">);</span>
            Stream_IO<span class="hl opt">.</span>Write <span class="hl opt">(</span>Stdout<span class="hl opt">,</span> Buffer<span class="hl opt">.</span><span class="hl kwa">all</span><span class="hl opt">);</span>
         <span class="hl kwa">end loop</span><span class="hl opt">;</span>
      <span class="hl kwa">end</span><span class="hl opt">;</span>
   <span class="hl kwa">end</span><span class="hl opt">;</span>

<span class="hl kwa">end</span> Mandelbrot<span class="hl opt">;</span>

