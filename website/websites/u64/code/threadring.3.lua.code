<span class="hl slc">-- The Computer Language Benchmarks Game</span>
<span class="hl slc">-- http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">-- contributed by Sam Roberts</span>
<span class="hl slc">-- reviewed by Bruno Massa</span>

require<span class="hl str">&quot;coroutine&quot;</span>

<span class="hl slc">-- first and only argument is number of token passes</span>
<span class="hl kwa">local</span> n         <span class="hl opt">=</span> <span class="hl kwb">assert</span><span class="hl opt">(</span><span class="hl kwb">tonumber</span><span class="hl opt">(</span>arg<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">]))</span>

<span class="hl slc">-- fixed size pool</span>
<span class="hl kwa">local</span> poolsize  <span class="hl opt">=</span> <span class="hl num">503</span>
<span class="hl kwa">local</span> threads   <span class="hl opt">= {}</span>

<span class="hl slc">-- cache these to avoid global environment lookups</span>
<span class="hl kwa">local</span> create    <span class="hl opt">=</span> coroutine<span class="hl opt">.</span>create
<span class="hl kwa">local</span> resume    <span class="hl opt">=</span> coroutine<span class="hl opt">.</span>resume
<span class="hl kwa">local</span> yield     <span class="hl opt">=</span> coroutine<span class="hl opt">.</span>yield

<span class="hl kwa">local</span> id        <span class="hl opt">=</span> <span class="hl num">1</span>
<span class="hl kwa">local</span> token     <span class="hl opt">=</span> <span class="hl num">0</span>
<span class="hl kwa">local</span> ok

<span class="hl kwa">local</span> body <span class="hl opt">=</span> <span class="hl kwa">function</span><span class="hl opt">(</span>token<span class="hl opt">)</span>
  <span class="hl kwa">while true do</span>
    token <span class="hl opt">=</span> <span class="hl kwd">yield</span><span class="hl opt">(</span>token <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">)</span>
  <span class="hl kwa">end</span>
<span class="hl kwa">end</span>

<span class="hl slc">-- create all threads</span>
<span class="hl kwa">for</span> id <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">,</span> poolsize <span class="hl kwa">do</span>
  threads<span class="hl opt">[</span>id<span class="hl opt">] =</span> <span class="hl kwd">create</span><span class="hl opt">(</span>body<span class="hl opt">)</span>
<span class="hl kwa">end</span>

<span class="hl slc">-- send the token</span>
<span class="hl kwa">repeat</span>
  <span class="hl kwa">if</span> id <span class="hl opt">==</span> poolsize <span class="hl kwa">then</span>
    id <span class="hl opt">=</span> <span class="hl num">1</span>
  <span class="hl kwa">else</span>
    id <span class="hl opt">=</span> id <span class="hl opt">+</span> <span class="hl num">1</span>
  <span class="hl kwa">end</span>
  ok<span class="hl opt">,</span> token <span class="hl opt">=</span> <span class="hl kwd">resume</span><span class="hl opt">(</span>threads<span class="hl opt">[</span>id<span class="hl opt">],</span> token<span class="hl opt">)</span>
<span class="hl kwa">until</span> token <span class="hl opt">==</span> n

<span class="hl kwb">print</span><span class="hl opt">(</span>id<span class="hl opt">)</span>
