<span class="hl slc">-- The Computer Language Benchmarks Game</span>
<span class="hl slc">-- http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">--</span>
<span class="hl slc">-- Contributed by Pat Rogers</span>
<span class="hl slc">--</span>
<span class="hl slc">-- Based on the C++ version by Andrew Moon </span>
<span class="hl slc">-- and the C version by Dmitry Vyukov</span>
<span class="hl slc">--</span>
<span class="hl slc">-- A task (thread) is created for each chameneous.</span>
<span class="hl slc">-- An atomic compare-and-swap operation is used</span>
<span class="hl slc">-- for shared state manipulation.  A protected </span>
<span class="hl slc">-- type is used for completion notification.</span>
<span class="hl slc">-- A cache-aligned memory allocator is used.</span>


<span class="hl slc">-- Expected build command:</span>
<span class="hl slc">-- gnatmake -gnatp  -gnatn  -fstrict-aliasing -O3 -fomit-frame-pointer -march=native -ffunction-sections -fdata-sections -f chameneosredux.adb -o chameneosredux.gnat_run   -largs -Wl,--gc-sections</span>



<span class="hl kwa">pragma</span> Restrictions <span class="hl opt">(</span>No_Abort_Statements<span class="hl opt">);</span>
<span class="hl kwa">pragma</span> Restrictions <span class="hl opt">(</span>Max_Asynchronous_Select_Nesting <span class="hl opt">=&gt;</span> <span class="hl num">0</span><span class="hl opt">);</span>

<span class="hl kwa">with</span> Chameneos<span class="hl opt">.</span>Games<span class="hl opt">;</span>       <span class="hl kwa">use</span> Chameneos<span class="hl opt">.</span>Games<span class="hl opt">;</span>
<span class="hl kwa">with</span> Ada<span class="hl opt">.</span>Command_Line<span class="hl opt">;</span>      <span class="hl kwa">use</span> Ada<span class="hl opt">.</span>Command_Line<span class="hl opt">;</span>
<span class="hl kwa">with</span> Chameneos<span class="hl opt">.</span>Processors<span class="hl opt">;</span>  <span class="hl kwa">use</span> Chameneos<span class="hl opt">.</span>Processors<span class="hl opt">;</span>

<span class="hl kwa">procedure</span> ChameneosRedux <span class="hl kwa">is</span>

   <span class="hl kwa">use</span> Chameneos<span class="hl opt">;</span>

   N <span class="hl opt">:</span> Meeting_Count<span class="hl opt">;</span>

   Game1_Creature_Colors <span class="hl opt">:</span> <span class="hl kwa">constant</span> Color_List_Ref <span class="hl opt">:=</span> <span class="hl kwa">new</span> Color_List<span class="hl str">'(Blue, Red, Yellow);</span>
<span class="hl str"></span>
<span class="hl str">   Game2_Creature_Colors : constant Color_List_Ref :=</span>
<span class="hl str">      new Color_List'</span><span class="hl opt">(</span>Blue<span class="hl opt">,</span> Red<span class="hl opt">,</span> Yellow<span class="hl opt">,</span> Red<span class="hl opt">,</span> Yellow<span class="hl opt">,</span> Blue<span class="hl opt">,</span> Red<span class="hl opt">,</span> Yellow<span class="hl opt">,</span> Red<span class="hl opt">,</span> Blue<span class="hl opt">);</span>

   Game1 <span class="hl opt">:</span> Game <span class="hl opt">(</span>Num_Creatures <span class="hl opt">=&gt;</span> Game1_Creature_Colors<span class="hl kwd">'Length</span><span class="hl opt">);</span>

   Game2 <span class="hl opt">:</span> Game <span class="hl opt">(</span>Num_Creatures <span class="hl opt">=&gt;</span> Game2_Creature_Colors<span class="hl kwd">'Length</span><span class="hl opt">);</span>

<span class="hl kwa">begin</span>
   Print_Color_Complements<span class="hl opt">;</span>

   <span class="hl kwa">if</span> Argument_Count <span class="hl opt">&lt;</span> <span class="hl num">1</span> <span class="hl kwa">then</span>
      N <span class="hl opt">:=</span> <span class="hl num">6</span>_000_000<span class="hl opt">;</span>
   <span class="hl kwa">else</span>
      N <span class="hl opt">:=</span> Meeting_Count<span class="hl kwd">'Value</span> <span class="hl opt">(</span>Argument <span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">));</span>
   <span class="hl kwa">end if</span><span class="hl opt">;</span>

   <span class="hl kwa">if</span> Processor_Count <span class="hl opt">&lt;</span> <span class="hl num">4</span> <span class="hl kwa">then</span>  <span class="hl slc">-- run the games sequentially</span>
      Game1<span class="hl opt">.</span>Start <span class="hl opt">(</span>Game1_Creature_Colors<span class="hl opt">,</span> N<span class="hl opt">,</span> Slot <span class="hl opt">=&gt;</span> <span class="hl num">0</span><span class="hl opt">);</span>
      Game1<span class="hl opt">.</span>Await_Completion<span class="hl opt">;</span>

      Game2<span class="hl opt">.</span>Start <span class="hl opt">(</span>Game2_Creature_Colors<span class="hl opt">,</span> N<span class="hl opt">,</span> Slot <span class="hl opt">=&gt;</span> <span class="hl num">0</span><span class="hl opt">);</span>
      Game2<span class="hl opt">.</span>Await_Completion<span class="hl opt">;</span>
   <span class="hl kwa">else</span> <span class="hl slc">-- run the games in parallel</span>
      Game1<span class="hl opt">.</span>Start <span class="hl opt">(</span>Game1_Creature_Colors<span class="hl opt">,</span> N<span class="hl opt">,</span> Slot <span class="hl opt">=&gt;</span> <span class="hl num">1</span><span class="hl opt">);</span>
      Game2<span class="hl opt">.</span>Start <span class="hl opt">(</span>Game2_Creature_Colors<span class="hl opt">,</span> N<span class="hl opt">,</span> Slot <span class="hl opt">=&gt;</span> <span class="hl num">2</span><span class="hl opt">);</span>

      Game1<span class="hl opt">.</span>Await_Completion<span class="hl opt">;</span>
      Game2<span class="hl opt">.</span>Await_Completion<span class="hl opt">;</span>
   <span class="hl kwa">end if</span><span class="hl opt">;</span>

   Game1<span class="hl opt">.</span>Display<span class="hl opt">;</span>
   Game2<span class="hl opt">.</span>Display<span class="hl opt">;</span>
<span class="hl kwa">end</span> ChameneosRedux<span class="hl opt">;</span>

<span class="hl slc">-------------------------------------------------------------------------------</span>

<span class="hl kwa">with</span> Interfaces<span class="hl opt">;</span>                  <span class="hl kwa">use</span> Interfaces<span class="hl opt">;</span>
<span class="hl kwa">with</span> Cache_Aligned_Storage_Pools<span class="hl opt">;</span> <span class="hl kwa">use</span> Cache_Aligned_Storage_Pools<span class="hl opt">;</span>

<span class="hl kwa">package</span> Chameneos <span class="hl kwa">is</span>

   Storage <span class="hl opt">:</span> Cache_Aligned_Storage_Pool<span class="hl opt">;</span>
   <span class="hl slc">--  All allocators use this common pool, which is really just a wrapper for</span>
   <span class="hl slc">--  the system allocator, but with additional constraints on the addresses</span>
   <span class="hl slc">--  returned.</span>

   <span class="hl kwa">type</span> String_Access <span class="hl kwa">is access all</span> <span class="hl kwb">String</span><span class="hl opt">;</span>
   <span class="hl kwa">for</span> String_Access<span class="hl kwd">'Storage_Pool</span> <span class="hl kwa">use</span> Storage<span class="hl opt">;</span>

   <span class="hl kwa">type</span> Colors <span class="hl kwa">is</span> <span class="hl opt">(</span>Blue<span class="hl opt">,</span> Red<span class="hl opt">,</span> Yellow<span class="hl opt">);</span>

   Colors_Image <span class="hl opt">:</span> <span class="hl kwa">constant array</span> <span class="hl opt">(</span>Colors<span class="hl opt">)</span> <span class="hl kwa">of</span> String_Access <span class="hl opt">:=</span>
                    <span class="hl opt">(</span>Blue   <span class="hl opt">=&gt;</span> <span class="hl kwa">new</span> <span class="hl kwb">String</span><span class="hl str">'(&quot;blue&quot;),</span>
<span class="hl str">                     Red    =&gt; new String'</span><span class="hl opt">(</span><span class="hl str">&quot;red&quot;</span><span class="hl opt">),</span>
                     Yellow <span class="hl opt">=&gt;</span> <span class="hl kwa">new</span> <span class="hl kwb">String</span><span class="hl str">'(&quot;yellow&quot;));</span>
<span class="hl str"></span>
<span class="hl str">   type Colors_Complements is array (Colors, Colors) of Colors;</span>
<span class="hl str"></span>
<span class="hl str">   Complementary_Color : constant Colors_Complements :=</span>
<span class="hl str">                           (Blue   =&gt; (Blue   =&gt; Blue,</span>
<span class="hl str">                                       Red    =&gt; Yellow,</span>
<span class="hl str">                                       Yellow =&gt; Red),</span>
<span class="hl str">                            Red    =&gt; (Red    =&gt; Red,</span>
<span class="hl str">                                       Blue   =&gt; Yellow,</span>
<span class="hl str">                                       Yellow =&gt; Blue),</span>
<span class="hl str">                            Yellow =&gt; (Yellow =&gt; Yellow,</span>
<span class="hl str">                                       Blue   =&gt; Red,</span>
<span class="hl str">                                       Red    =&gt; Blue));</span>
<span class="hl str"></span>
<span class="hl str">   --  Print the Complementary_Color map</span>
<span class="hl str">   procedure Print_Color_Complements;</span>
<span class="hl str"></span>
<span class="hl str">   --  Returns a string representing the non-negative integer Value, in which</span>
<span class="hl str">   --  each digit of Value is spelled out as a distinct word</span>
<span class="hl str">   function Spelled (Value : Natural) return String;</span>
<span class="hl str"></span>
<span class="hl str"></span>
<span class="hl str">   type Color_List is array (Positive range &lt;&gt;) of Colors;</span>
<span class="hl str"></span>
<span class="hl str">   type Color_List_Ref is access constant Color_List;</span>
<span class="hl str">   for Color_List_Ref'Storage_Pool use Storage;</span>
<span class="hl str"></span>
<span class="hl str"></span>
<span class="hl str">   --  The efficiency of this design is due to the underlying use of a single</span>
<span class="hl str">   --  variable (per game) shared amongst all the creature threads. This</span>
<span class="hl str">   --  variable is used both for the count of the number of meetings completed</span>
<span class="hl str">   --  as well as an indication of the creatures present for meetings. Hence</span>
<span class="hl str">   --  some of the bits are used for the meeting count and some for the</span>
<span class="hl str">   --  creatures. The number of bits used for the creature mask, in combination</span>
<span class="hl str">   --  with the total number of bits in the shared variable, determine how many</span>
<span class="hl str">   --  creatures and how many total meetings are supported.</span>
<span class="hl str"></span>
<span class="hl str">   --  The number of bits allocated within the shared variable for identifying</span>
<span class="hl str">   --  creatures</span>
<span class="hl str">   Creature_Mask_Bits : constant := 4;</span>
<span class="hl str"></span>
<span class="hl str">   subtype Creature_Count is Unsigned_32 range 0 .. 2 ** Creature_Mask_Bits - 1;</span>
<span class="hl str"></span>
<span class="hl str">   --  The number of bits allocated within the shared variable for tracking the</span>
<span class="hl str">   --  total number of meetings completed</span>
<span class="hl str">   Meetings_Bits : constant := Unsigned_32'Size - Creature_Mask_Bits;</span>
<span class="hl str"></span>
<span class="hl str">   Max_Meetings : constant := 2 ** Meetings_Bits - 1;</span>
<span class="hl str"></span>
<span class="hl str">   subtype Meeting_Count is Unsigned_32 range 0 .. Max_Meetings;</span>
<span class="hl str"></span>
<span class="hl str">end Chameneos;</span>
<span class="hl str"></span>
<span class="hl str">-------------------------------------------------------------------------------</span>
<span class="hl str"></span>
<span class="hl str">with Chameneos.Meetings;</span>
<span class="hl str">with Chameneos.Countdown;</span>
<span class="hl str">with Chameneos.Processors;</span>
<span class="hl str"></span>
<span class="hl str">with System.Task_Info;  use System.Task_Info;</span>
<span class="hl str"></span>
<span class="hl str">package Chameneos.Creatures is</span>
<span class="hl str"></span>
<span class="hl str">   type Creature (Starting_Color : Colors) is tagged limited private;</span>
<span class="hl str">   --  Each creature has an initial color, but their current color is a function</span>
<span class="hl str">   --  of the colors of the other creatures met.</span>
<span class="hl str"></span>
<span class="hl str">   type Creature_Ref is access all Creature;</span>
<span class="hl str">   for Creature_Ref'Storage_Pool use Chameneos.Storage;</span>
<span class="hl str"></span>
<span class="hl str">   --  Tell the creature where all the creatures in the game are meeting, where</span>
<span class="hl str">   --  to signal when the creature is finished, and which slot to execute in.</span>
<span class="hl str">   procedure Start (This     : access Creature;</span>
<span class="hl str">                    Location : Chameneos.Meetings.Venue;</span>
<span class="hl str">                    Latch    : Chameneos.Countdown.Latch_Ref;</span>
<span class="hl str">                    Slot     : Natural);</span>
<span class="hl str"></span>
<span class="hl str">   --  The caller side of the rendezvous</span>
<span class="hl str">   procedure Meet (This : in out Creature;  Other : in out Creature);</span>
<span class="hl str"></span>
<span class="hl str">   --  The called side of the rendezvous</span>
<span class="hl str">   procedure Wait_Until_Met (This : in out Creature);</span>
<span class="hl str"></span>
<span class="hl str">   procedure Await_Completion (This : in out Creature);</span>
<span class="hl str"></span>
<span class="hl str">   procedure Set_Id (This : in out Creature;  To : Creature_Count);</span>
<span class="hl str"></span>
<span class="hl str">   function Id (This : Creature) return Creature_Count;</span>
<span class="hl str"></span>
<span class="hl str">   function Current_Color (This : Creature) return Colors;</span>
<span class="hl str"></span>
<span class="hl str">   function Initial_Color (This : Creature) return Colors;</span>
<span class="hl str"></span>
<span class="hl str">   procedure Display (This : in out Creature);</span>
<span class="hl str"></span>
<span class="hl str">   function Total_Met (This : Creature) return Natural;</span>
<span class="hl str"></span>
<span class="hl str">   pragma Inline (Set_Id, Id, Current_Color, Initial_Color, Total_Met);</span>
<span class="hl str"></span>
<span class="hl str">private</span>
<span class="hl str"></span>
<span class="hl str">   use Chameneos.Processors;</span>
<span class="hl str"></span>
<span class="hl str">   --  Objects of type Thread implement the active execution, i.e., the</span>
<span class="hl str">   --  symmetric rendezvous requirement, for their corresponding creatures.</span>
<span class="hl str">   --  Each thread instance has a discriminant designating the corresponding</span>
<span class="hl str">   --  creature. No state is maintained within the threads themselves. Each</span>
<span class="hl str">   --  thread instance executes in a given &quot;slot&quot; that specifies the cores it</span>
<span class="hl str">   --  can run upon, via processor affinities. The specific slot is also given</span>
<span class="hl str">   --  via discriminant.</span>
<span class="hl str">   task type Thread (This : access Creature;  Slot : Natural) is</span>
<span class="hl str">      pragma Task_Info (new Thread_Attributes'</span><span class="hl opt">(</span>CPU_Affinity <span class="hl opt">=&gt;</span> Affinity <span class="hl opt">(</span>Slot<span class="hl opt">)));</span>
   <span class="hl kwa">end</span> Thread<span class="hl opt">;</span>

   <span class="hl kwa">type</span> Thread_Ref <span class="hl kwa">is access all</span> Thread<span class="hl opt">;</span>
   <span class="hl kwa">for</span> Thread_Ref<span class="hl kwd">'Storage_Pool</span> <span class="hl kwa">use</span> Chameneos<span class="hl opt">.</span>Storage<span class="hl opt">;</span>

   <span class="hl kwa">type</span> Creature <span class="hl opt">(</span>Starting_Color <span class="hl opt">:</span> Colors<span class="hl opt">)</span> <span class="hl kwa">is tagged limited</span>
      <span class="hl kwa">record</span>
         Met              <span class="hl opt">:</span> <span class="hl kwb">Boolean</span> <span class="hl opt">:=</span> <span class="hl kwd">False</span><span class="hl opt">;</span>
         <span class="hl slc">--  Met is set by other threads so the pragma is essential</span>
         <span class="hl kwa">pragma</span> Volatile <span class="hl opt">(</span>Met<span class="hl opt">);</span>
         Count            <span class="hl opt">:</span> <span class="hl kwb">Natural</span> <span class="hl opt">:=</span> <span class="hl num">0</span><span class="hl opt">;</span>
         Same_Count       <span class="hl opt">:</span> <span class="hl kwb">Natural</span> <span class="hl opt">:=</span> <span class="hl num">0</span><span class="hl opt">;</span>
         Color            <span class="hl opt">:</span> Colors <span class="hl opt">:=</span> Starting_Color<span class="hl opt">;</span>
         Id               <span class="hl opt">:</span> Creature_Count<span class="hl opt">;</span>
         Rendezvous_Point <span class="hl opt">:</span> Meetings<span class="hl opt">.</span>Venue<span class="hl opt">;</span>
         Completion       <span class="hl opt">:</span> Chameneos<span class="hl opt">.</span>Countdown<span class="hl opt">.</span>Latch_Ref<span class="hl opt">;</span>
      <span class="hl kwa">end record</span><span class="hl opt">;</span>

<span class="hl kwa">end</span> Chameneos<span class="hl opt">.</span>Creatures<span class="hl opt">;</span>

<span class="hl slc">-------------------------------------------------------------------------------</span>

<span class="hl kwa">with</span> Chameneos<span class="hl opt">.</span>Creatures<span class="hl opt">;</span>  <span class="hl kwa">use</span> Chameneos<span class="hl opt">.</span>Creatures<span class="hl opt">;</span>
<span class="hl kwa">with</span> Chameneos<span class="hl opt">.</span>Meetings<span class="hl opt">;</span>
<span class="hl kwa">with</span> Chameneos<span class="hl opt">.</span>Countdown<span class="hl opt">;</span>

<span class="hl kwa">package</span> Chameneos<span class="hl opt">.</span>Games <span class="hl kwa">is</span>

   <span class="hl kwa">type</span> Game <span class="hl opt">(</span>Num_Creatures <span class="hl opt">:</span> Creature_Count<span class="hl opt">)</span> <span class="hl kwa">is tagged limited private</span><span class="hl opt">;</span>

   <span class="hl slc">--  Allocates the creature threads and all other required data.</span>
   <span class="hl kwa">procedure</span> Start
     <span class="hl opt">(</span>This            <span class="hl opt">:</span> <span class="hl kwa">in out</span> Game<span class="hl opt">;</span>
      Creature_Colors <span class="hl opt">:</span> Color_List_Ref<span class="hl opt">;</span>
      Num_Meetings    <span class="hl opt">:</span> Meeting_Count<span class="hl opt">;</span>
      Slot            <span class="hl opt">:</span> <span class="hl kwb">Natural</span><span class="hl opt">);</span>

   <span class="hl slc">--  Waits for all creatures (threads) to finish.</span>
   <span class="hl kwa">procedure</span> Await_Completion <span class="hl opt">(</span>This <span class="hl opt">:</span> Game<span class="hl opt">);</span>

   <span class="hl kwa">procedure</span> Display <span class="hl opt">(</span>This <span class="hl opt">:</span> Game<span class="hl opt">);</span>

<span class="hl kwa">private</span>

   <span class="hl kwa">use</span> Chameneos<span class="hl opt">;</span>

   <span class="hl kwa">type</span> Creatures_List <span class="hl kwa">is array</span> <span class="hl opt">(</span>Creature_Count <span class="hl kwa">range</span> <span class="hl opt">&lt;&gt;)</span> <span class="hl kwa">of</span> Creature_Ref<span class="hl opt">;</span>

   <span class="hl kwa">type</span> Game <span class="hl opt">(</span>Num_Creatures <span class="hl opt">:</span> Creature_Count<span class="hl opt">)</span> <span class="hl kwa">is tagged limited</span>
      <span class="hl kwa">record</span>
         <span class="hl slc">--  where all the creatures in the game meet</span>
         Rendezvous_Point <span class="hl opt">:</span> Meetings<span class="hl opt">.</span>Venue<span class="hl opt">;</span>
         <span class="hl slc">--  all the creatures in the game</span>
         Players <span class="hl opt">:</span> Creatures_List <span class="hl opt">(</span><span class="hl num">1</span> <span class="hl opt">..</span> Num_Creatures<span class="hl opt">);</span>
         <span class="hl slc">--  the common mechanism used for signalling creature completion</span>
         Latch <span class="hl opt">:</span> <span class="hl kwa">aliased</span> Countdown<span class="hl opt">.</span>Latch <span class="hl opt">(</span>Num_Creatures<span class="hl opt">);</span>
      <span class="hl kwa">end record</span><span class="hl opt">;</span>

<span class="hl kwa">end</span> Chameneos<span class="hl opt">.</span>Games<span class="hl opt">;</span>

<span class="hl slc">-------------------------------------------------------------------------------</span>

<span class="hl kwa">limited with</span> Chameneos<span class="hl opt">.</span>Creatures<span class="hl opt">;</span>

<span class="hl kwa">package</span> Chameneos<span class="hl opt">.</span>Meetings <span class="hl kwa">is</span>

   <span class="hl kwa">type</span> Place <span class="hl opt">(</span>Meetings_Expected <span class="hl opt">:</span> Meeting_Count<span class="hl opt">)</span> <span class="hl kwa">is tagged limited private</span><span class="hl opt">;</span>
   <span class="hl slc">--  Where creatures come to meet other creatures, potentially change colors,</span>
   <span class="hl slc">--  and play the game. Creatures are required to meet until the required</span>
   <span class="hl slc">--  number of total meetings has occurred. This number of required meetings</span>
   <span class="hl slc">--  is specified by the discriminant Meetings_Expected.</span>

   <span class="hl kwa">type</span> Venue <span class="hl kwa">is access all</span> Place<span class="hl opt">;</span>
   <span class="hl kwa">for</span> Venue<span class="hl kwd">'Storage_Pool</span> <span class="hl kwa">use</span> Chameneos<span class="hl opt">.</span>Storage<span class="hl opt">;</span>

   <span class="hl slc">--  Assign a location for the creature designated by Player, within This place,</span>
   <span class="hl slc">--  for the purpose of meeting any other creatures willing to meet.</span>
   <span class="hl kwa">procedure</span> Register
     <span class="hl opt">(</span>This   <span class="hl opt">:</span> <span class="hl kwa">in out</span> Place<span class="hl opt">;</span>
      Player <span class="hl opt">:</span> <span class="hl kwa">access</span> Chameneos<span class="hl opt">.</span>Creatures<span class="hl opt">.</span>Creature<span class="hl opt">);</span>

   <span class="hl slc">--  Have creature Player iteratively meet other creatures with This place,</span>
   <span class="hl slc">--  updating the count of the total number of creature meetings as they</span>
   <span class="hl slc">--  occur, and updating individual creature states as well (including</span>
   <span class="hl slc">--  individual meeting counts and color changes).</span>
   <span class="hl kwa">procedure</span> Meet_Others
     <span class="hl opt">(</span>This   <span class="hl opt">:</span> <span class="hl kwa">in out</span> Place<span class="hl opt">;</span>
      Player <span class="hl opt">:</span> <span class="hl kwa">access</span> Chameneos<span class="hl opt">.</span>Creatures<span class="hl opt">.</span>Creature<span class="hl opt">);</span>

<span class="hl kwa">private</span>

   <span class="hl kwa">type</span> Creature_Reference_List <span class="hl kwa">is</span>
     <span class="hl kwa">array</span> <span class="hl opt">(</span>Creature_Count <span class="hl kwa">range</span> <span class="hl num">1</span> <span class="hl opt">..</span> Creature_Count<span class="hl kwd">'Last</span><span class="hl opt">)</span> <span class="hl kwa">of</span>
        <span class="hl kwa">access</span> Chameneos<span class="hl opt">.</span>Creatures<span class="hl opt">.</span>Creature<span class="hl opt">;</span>

   <span class="hl kwa">subtype</span> Valid_Creature_Id <span class="hl kwa">is</span>
     Creature_Count <span class="hl kwa">range</span> <span class="hl num">1</span> <span class="hl opt">..</span> Creature_Count<span class="hl kwd">'Last</span><span class="hl opt">;</span>

   No_Creature <span class="hl opt">:</span> <span class="hl kwa">constant</span> Creature_Count <span class="hl opt">:=</span> Valid_Creature_Id<span class="hl kwd">'First</span> <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">;</span>
   <span class="hl slc">--  used in Meet_Others to determine whether any creatures are waiting</span>

   <span class="hl kwa">type</span> Place <span class="hl opt">(</span>Meetings_Expected <span class="hl opt">:</span> Meeting_Count<span class="hl opt">)</span> <span class="hl kwa">is tagged limited</span>
      <span class="hl kwa">record</span>
         Id_Generator <span class="hl opt">:</span> Valid_Creature_Id <span class="hl opt">:=</span> Valid_Creature_Id<span class="hl kwd">'First</span><span class="hl opt">;</span>
         <span class="hl slc">--  Used to assign unique id's to creature threads as they register.</span>
         Shared_State <span class="hl opt">:</span> <span class="hl kwa">aliased</span> Unsigned_32 <span class="hl opt">:=</span> Shift_Left <span class="hl opt">(</span>Meetings_Expected<span class="hl opt">,</span> Creature_Mask_Bits<span class="hl opt">);</span>
         <span class="hl slc">--  The essential aspect of this program's design is the use of this</span>
         <span class="hl slc">--  shared variable accessed by all the creature threads in a given</span>
         <span class="hl slc">--  game. This variable is used both for the count of the number of</span>
         <span class="hl slc">--  meetings completed as well as an indication of creatures waiting</span>
         <span class="hl slc">--  for meetings. Hence the initial value is the number of required</span>
         <span class="hl slc">--  meetings, shifted into the dedicated bits, with no creatures yet</span>
         <span class="hl slc">--  waiting.</span>
         <span class="hl kwa">pragma</span> Volatile <span class="hl opt">(</span>Shared_State<span class="hl opt">);</span>
         <span class="hl slc">--  Shared_State is accessed and modified by all the threads within a</span>
         <span class="hl slc">--  given game, so the pragma is essential!</span>
         Registered_Players <span class="hl opt">:</span> Creature_Reference_List<span class="hl opt">;</span>
      <span class="hl kwa">end record</span><span class="hl opt">;</span>

<span class="hl kwa">end</span> Chameneos<span class="hl opt">.</span>Meetings<span class="hl opt">;</span>

<span class="hl slc">-------------------------------------------------------------------------------</span>

<span class="hl kwa">with</span> System<span class="hl opt">.</span>Storage_Pools<span class="hl opt">;</span>
<span class="hl kwa">with</span> System<span class="hl opt">.</span>Storage_Elements<span class="hl opt">;</span>

<span class="hl kwa">package</span> Cache_Aligned_Storage_Pools <span class="hl kwa">is</span>

   <span class="hl kwa">package</span> SSE <span class="hl kwa">renames</span> System<span class="hl opt">.</span>Storage_Elements<span class="hl opt">;</span>
   <span class="hl kwa">package</span> SSP <span class="hl kwa">renames</span> System<span class="hl opt">.</span>Storage_Pools<span class="hl opt">;</span>

   <span class="hl kwa">type</span> Cache_Aligned_Storage_Pool <span class="hl kwa">is</span>
     <span class="hl kwa">new</span> SSP<span class="hl opt">.</span>Root_Storage_Pool <span class="hl kwa">with private</span><span class="hl opt">;</span>
   <span class="hl slc">--  A Cache_Aligned_Storage_Pool is a wrapper for the underlying operating</span>
   <span class="hl slc">--  system storage allocator. Allocations using pool objects of this type</span>
   <span class="hl slc">--  will return addresses that are aligned with the cache line size specified</span>
   <span class="hl slc">--  below.</span>

   Cache_Line_Size <span class="hl opt">:</span> <span class="hl kwa">constant</span> <span class="hl opt">:=</span> <span class="hl num">64</span><span class="hl opt">;</span>
   <span class="hl slc">--  The length of a cache line on this machine.  Change as necessary...</span>

   <span class="hl slc">--  Allocates a block of storage such that Storage_Address is aligned with</span>
   <span class="hl slc">--  Cache_Line_Size. Uses the system memory allocator to do the actual</span>
   <span class="hl slc">--  allocation but asks for more storage than Requested_Size so that an</span>
   <span class="hl slc">--  aligned address within the allocated block can be found.</span>
   <span class="hl kwa">procedure</span> Allocate
     <span class="hl opt">(</span>Pool            <span class="hl opt">:</span> <span class="hl kwa">in out</span> Cache_Aligned_Storage_Pool<span class="hl opt">;</span>
      Storage_Address <span class="hl opt">:</span> <span class="hl kwa">out</span> System<span class="hl opt">.</span>Address<span class="hl opt">;</span>
      Requested_Size  <span class="hl opt">:</span> SSE<span class="hl opt">.</span>Storage_Count<span class="hl opt">;</span>
      Alignment       <span class="hl opt">:</span> SSE<span class="hl opt">.</span>Storage_Count<span class="hl opt">);</span>

   <span class="hl slc">--  Uses the system memory routine to deallocate the entire block of storage</span>
   <span class="hl slc">--  in which Storage_Address is contained.</span>
   <span class="hl kwa">procedure</span> Deallocate
     <span class="hl opt">(</span>Pool            <span class="hl opt">:</span> <span class="hl kwa">in out</span> Cache_Aligned_Storage_Pool<span class="hl opt">;</span>
      Storage_Address <span class="hl opt">:</span> System<span class="hl opt">.</span>Address<span class="hl opt">;</span>
      Requested_Size  <span class="hl opt">:</span> SSE<span class="hl opt">.</span>Storage_Count<span class="hl opt">;</span>
      Alignment       <span class="hl opt">:</span> SSE<span class="hl opt">.</span>Storage_Count<span class="hl opt">);</span>

   <span class="hl slc">--  Returns a meaningless number since the system memory allocation and</span>
   <span class="hl slc">--  deallocation routines are used.</span>
   <span class="hl kwa">function</span> Storage_Size <span class="hl opt">(</span>Pool <span class="hl opt">:</span> Cache_Aligned_Storage_Pool<span class="hl opt">)</span>
      <span class="hl kwa">return</span> SSE<span class="hl opt">.</span>Storage_Count<span class="hl opt">;</span>

<span class="hl kwa">private</span>

   <span class="hl kwa">procedure</span> Allocate_Any
     <span class="hl opt">(</span>Pool            <span class="hl opt">:</span> <span class="hl kwa">in out</span> Cache_Aligned_Storage_Pool<span class="hl kwd">'Class</span><span class="hl opt">;</span>
      Storage_Address <span class="hl opt">:</span> <span class="hl kwa">out</span> System<span class="hl opt">.</span>Address<span class="hl opt">;</span>
      Requested_Size  <span class="hl opt">:</span> SSE<span class="hl opt">.</span>Storage_Count<span class="hl opt">;</span>
      Alignment       <span class="hl opt">:</span> SSE<span class="hl opt">.</span>Storage_Count<span class="hl opt">);</span>

   <span class="hl kwa">procedure</span> Deallocate_Any
     <span class="hl opt">(</span>Pool            <span class="hl opt">:</span> <span class="hl kwa">in out</span> Cache_Aligned_Storage_Pool<span class="hl kwd">'Class</span><span class="hl opt">;</span>
      Storage_Address <span class="hl opt">:</span> System<span class="hl opt">.</span>Address<span class="hl opt">;</span>
      Requested_Size  <span class="hl opt">:</span> SSE<span class="hl opt">.</span>Storage_Count<span class="hl opt">;</span>
      Alignment       <span class="hl opt">:</span> SSE<span class="hl opt">.</span>Storage_Count<span class="hl opt">);</span>

   <span class="hl kwa">type</span> Cache_Aligned_Storage_Pool <span class="hl kwa">is</span>
     <span class="hl kwa">new</span> SSP<span class="hl opt">.</span>Root_Storage_Pool <span class="hl kwa">with null record</span><span class="hl opt">;</span>  <span class="hl slc">-- just a wrapper...</span>

<span class="hl kwa">end</span> Cache_Aligned_Storage_Pools<span class="hl opt">;</span>

<span class="hl slc">-------------------------------------------------------------------------------</span>

<span class="hl kwa">package</span> Chameneos<span class="hl opt">.</span>Countdown <span class="hl kwa">is</span>

   <span class="hl slc">--  &quot;Latch&quot; is a non-cyclic traditional barrier abstraction. As a barrier it</span>
   <span class="hl slc">--  provides a means of blocking callers to Wait until a specified number of</span>
   <span class="hl slc">--  calls to Signal have occurred. At that point all of the prior calls to</span>
   <span class="hl slc">--  Wait are allowed to execute and, therefore, their callers are no longer</span>
   <span class="hl slc">--  blocked. The number of required calls to Signal is specified on a</span>
   <span class="hl slc">--  per-object basis via discriminant when objects of the type are declared.</span>
   <span class="hl slc">--  Latch is &quot;non-cyclic&quot;, i.e., it does not block another set of waiters</span>
   <span class="hl slc">--  after the first set is allowed to continue, because there is no</span>
   <span class="hl slc">--  requirement in this application for cyclic behavior.</span>
   <span class="hl kwa">protected type</span> Latch <span class="hl opt">(</span>Signallers <span class="hl opt">:</span> Creature_Count<span class="hl opt">)</span> <span class="hl kwa">is</span>
      <span class="hl kwa">entry</span> Wait<span class="hl opt">;</span>
      <span class="hl kwa">procedure</span> Signal<span class="hl opt">;</span>
   <span class="hl kwa">private</span>
      Count <span class="hl opt">:</span> Unsigned_32 <span class="hl opt">:=</span> Signallers<span class="hl opt">;</span>
   <span class="hl kwa">end</span> Latch<span class="hl opt">;</span>

   <span class="hl kwa">type</span> Latch_Ref <span class="hl kwa">is access all</span> Latch<span class="hl opt">;</span>
   <span class="hl kwa">for</span> Latch_Ref<span class="hl kwd">'Storage_Pool</span> <span class="hl kwa">use</span> Chameneos<span class="hl opt">.</span>Storage<span class="hl opt">;</span>

<span class="hl kwa">end</span> Chameneos<span class="hl opt">.</span>Countdown<span class="hl opt">;</span>

<span class="hl slc">-------------------------------------------------------------------------------</span>

<span class="hl kwa">with</span> System<span class="hl opt">.</span>Task_Info<span class="hl opt">;</span>     <span class="hl kwa">use</span> System<span class="hl opt">.</span>Task_Info<span class="hl opt">;</span>
<span class="hl kwa">pragma</span> Warnings <span class="hl opt">(</span>Off<span class="hl opt">);</span>
<span class="hl kwa">with</span> System<span class="hl opt">.</span>OS_Interface<span class="hl opt">;</span>  <span class="hl kwa">use</span> System<span class="hl opt">.</span>OS_Interface<span class="hl opt">;</span>
<span class="hl kwa">pragma</span> Warnings <span class="hl opt">(</span>On<span class="hl opt">);</span>

<span class="hl kwa">package</span> Chameneos<span class="hl opt">.</span>Processors <span class="hl kwa">is</span>
   <span class="hl kwa">pragma</span> Elaborate_Body<span class="hl opt">;</span>

   Processor_Count <span class="hl opt">:</span> <span class="hl kwa">constant</span> <span class="hl kwb">Positive</span> <span class="hl opt">:=</span> System<span class="hl opt">.</span>Task_Info<span class="hl opt">.</span>Number_Of_Processors<span class="hl opt">;</span>

   Max_Slots <span class="hl opt">:</span> <span class="hl kwa">constant</span> <span class="hl opt">:=</span> <span class="hl num">33</span><span class="hl opt">;</span>

   <span class="hl slc">--  Returns a bit mask indicating the cores on which a thread in Slot can</span>
   <span class="hl slc">--  execute. A game is assigned to a given slot, and as a result all the</span>
   <span class="hl slc">--  threads within that game will execute only on those cores, for the sake</span>
   <span class="hl slc">--  of locality (ie performance).</span>
   <span class="hl kwa">function</span> Affinity <span class="hl opt">(</span>Slot <span class="hl opt">:</span> <span class="hl kwb">Natural</span><span class="hl opt">)</span> <span class="hl kwa">return</span> CPU_Set<span class="hl opt">;</span>

   <span class="hl slc">--  Each slot has an affinity mask consisting of a pair of cores</span>
   <span class="hl slc">--  dedicated to that slot, except for slot 0 which is the global mask</span>
   <span class="hl slc">--  returned by the OS (which shows all processors available).</span>
   <span class="hl slc">--</span>
   <span class="hl slc">--  For example, imagine that we get a mask with the first 8 bits</span>
   <span class="hl slc">--  enabled, indicating that 8 processors (cores) are available.</span>
   <span class="hl slc">--  The resulting data structure would be as follows:</span>
   <span class="hl slc">--</span>
   <span class="hl slc">--                     bit#</span>
   <span class="hl slc">--   slot #         123456789...</span>
   <span class="hl slc">--     0            1111111100</span>
   <span class="hl slc">--     1            1100000000</span>
   <span class="hl slc">--     2            0011000000</span>
   <span class="hl slc">--     3            0000110000</span>
   <span class="hl slc">--     4            0000001100</span>
   <span class="hl slc">--     5            1100000000</span>
   <span class="hl slc">--     6            0011000000</span>
   <span class="hl slc">--    ...              ...</span>

<span class="hl kwa">end</span> Chameneos<span class="hl opt">.</span>Processors<span class="hl opt">;</span>

<span class="hl slc">-------------------------------------------------------------------------------</span>

<span class="hl kwa">with</span> Interfaces<span class="hl opt">;</span>   <span class="hl kwa">use</span> Interfaces<span class="hl opt">;</span>

<span class="hl kwa">package</span> x86_Atomic_Swap_Utils <span class="hl kwa">is</span>

   <span class="hl slc">-- Perform an atomic compare and swap: if the current value of</span>
   <span class="hl slc">-- Destination.all is Comparand, then write New_Value into Destination.all.</span>
   <span class="hl slc">-- Returns the content of Destination.all before the operation.</span>
   <span class="hl kwa">function</span> Sync_Val_Compare_And_Swap
     <span class="hl opt">(</span>Destination <span class="hl opt">:</span> <span class="hl kwa">access</span> Unsigned_32<span class="hl opt">;</span>
      Comparand   <span class="hl opt">:</span> Unsigned_32<span class="hl opt">;</span>
      New_Value   <span class="hl opt">:</span> Unsigned_32<span class="hl opt">)</span>
      <span class="hl kwa">return</span> Unsigned_32<span class="hl opt">;</span>

   <span class="hl kwa">pragma</span> Inline_Always <span class="hl opt">(</span>Sync_Val_Compare_And_Swap<span class="hl opt">);</span>

<span class="hl kwa">end</span> x86_Atomic_Swap_Utils<span class="hl opt">;</span>

<span class="hl slc">-------------------------------------------------------------------------------</span>

<span class="hl kwa">with</span> GNAT<span class="hl opt">.</span>IO<span class="hl opt">;</span> <span class="hl kwa">use</span> GNAT<span class="hl opt">.</span>IO<span class="hl opt">;</span>
<span class="hl kwa">with</span> Ada<span class="hl opt">.</span>Strings<span class="hl opt">.</span>Unbounded<span class="hl opt">;</span>

<span class="hl kwa">package body</span> Chameneos <span class="hl kwa">is</span>

   Numbers_Image <span class="hl opt">:</span> <span class="hl kwa">constant array</span> <span class="hl opt">(</span><span class="hl num">0</span> <span class="hl opt">..</span> <span class="hl num">9</span><span class="hl opt">)</span> <span class="hl kwa">of</span> String_Access <span class="hl opt">:=</span>
                     <span class="hl opt">(</span><span class="hl num">0</span> <span class="hl opt">=&gt;</span> <span class="hl kwa">new</span> <span class="hl kwb">String</span><span class="hl str">'(&quot; zero&quot;),</span>
<span class="hl str">                      1 =&gt; new String'</span><span class="hl opt">(</span><span class="hl str">&quot; one&quot;</span><span class="hl opt">),</span>
                      <span class="hl num">2</span> <span class="hl opt">=&gt;</span> <span class="hl kwa">new</span> <span class="hl kwb">String</span><span class="hl str">'(&quot; two&quot;),</span>
<span class="hl str">                      3 =&gt; new String'</span><span class="hl opt">(</span><span class="hl str">&quot; three&quot;</span><span class="hl opt">),</span>
                      <span class="hl num">4</span> <span class="hl opt">=&gt;</span> <span class="hl kwa">new</span> <span class="hl kwb">String</span><span class="hl str">'(&quot; four&quot;),</span>
<span class="hl str">                      5 =&gt; new String'</span><span class="hl opt">(</span><span class="hl str">&quot; five&quot;</span><span class="hl opt">),</span>
                      <span class="hl num">6</span> <span class="hl opt">=&gt;</span> <span class="hl kwa">new</span> <span class="hl kwb">String</span><span class="hl str">'(&quot; six&quot;),</span>
<span class="hl str">                      7 =&gt; new String'</span><span class="hl opt">(</span><span class="hl str">&quot; seven&quot;</span><span class="hl opt">),</span>
                      <span class="hl num">8</span> <span class="hl opt">=&gt;</span> <span class="hl kwa">new</span> <span class="hl kwb">String</span><span class="hl str">'(&quot; eight&quot;),</span>
<span class="hl str">                      9 =&gt; new String'</span><span class="hl opt">(</span><span class="hl str">&quot; nine&quot;</span><span class="hl opt">));</span>

   <span class="hl slc">-------------</span>
   <span class="hl slc">-- Spelled --</span>
   <span class="hl slc">-------------</span>

   <span class="hl kwa">function</span> Spelled <span class="hl opt">(</span>Value <span class="hl opt">:</span> <span class="hl kwb">Natural</span><span class="hl opt">)</span> <span class="hl kwa">return</span> <span class="hl kwb">String</span> <span class="hl kwa">is</span>
      <span class="hl kwa">use</span> Ada<span class="hl opt">.</span>Strings<span class="hl opt">.</span>Unbounded<span class="hl opt">;</span>
      Result <span class="hl opt">:</span> Unbounded_String<span class="hl opt">;</span>
      K      <span class="hl opt">:</span> <span class="hl kwb">Natural</span> <span class="hl opt">:=</span> Value<span class="hl opt">;</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">loop</span>
         Insert <span class="hl opt">(</span>Result<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">,</span> Numbers_Image <span class="hl opt">(</span>K <span class="hl kwa">rem</span> <span class="hl num">10</span><span class="hl opt">).</span><span class="hl kwa">all</span><span class="hl opt">);</span>
         K <span class="hl opt">:=</span> K <span class="hl opt">/</span> <span class="hl num">10</span><span class="hl opt">;</span>
         <span class="hl kwa">exit when</span> K <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
      <span class="hl kwa">end loop</span><span class="hl opt">;</span>
      <span class="hl kwa">return</span> To_String <span class="hl opt">(</span>Result<span class="hl opt">);</span>
   <span class="hl kwa">end</span> Spelled<span class="hl opt">;</span>

   <span class="hl slc">-------------------------</span>
   <span class="hl slc">-- Print_Color_Changes --</span>
   <span class="hl slc">-------------------------</span>

   <span class="hl kwa">procedure</span> Print_Color_Complements <span class="hl kwa">is</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">for</span> Self <span class="hl kwa">in</span> Colors <span class="hl kwa">loop</span>
         <span class="hl kwa">for</span> Other <span class="hl kwa">in</span> Colors <span class="hl kwa">loop</span>
            Put_Line <span class="hl opt">(</span>Colors_Image <span class="hl opt">(</span>Self<span class="hl opt">).</span><span class="hl kwa">all</span> <span class="hl opt">&amp;</span> <span class="hl str">&quot; + &quot;</span> <span class="hl opt">&amp;</span>
                      Colors_Image <span class="hl opt">(</span>Other<span class="hl opt">).</span><span class="hl kwa">all</span> <span class="hl opt">&amp;</span> <span class="hl str">&quot; -&gt; &quot;</span> <span class="hl opt">&amp;</span>
                      Colors_Image <span class="hl opt">(</span>Complementary_Color <span class="hl opt">(</span>Self<span class="hl opt">,</span> Other<span class="hl opt">)).</span><span class="hl kwa">all</span><span class="hl opt">);</span>
         <span class="hl kwa">end loop</span><span class="hl opt">;</span>
      <span class="hl kwa">end loop</span><span class="hl opt">;</span>
      New_Line<span class="hl opt">;</span>
   <span class="hl kwa">end</span> Print_Color_Complements<span class="hl opt">;</span>

<span class="hl kwa">end</span> Chameneos<span class="hl opt">;</span>

<span class="hl slc">-------------------------------------------------------------------------------</span>

<span class="hl kwa">with</span> GNAT<span class="hl opt">.</span>IO<span class="hl opt">;</span>  <span class="hl kwa">use</span> GNAT<span class="hl opt">.</span>IO<span class="hl opt">;</span>

<span class="hl kwa">package body</span> Chameneos<span class="hl opt">.</span>Creatures <span class="hl kwa">is</span>

   <span class="hl slc">-----------</span>
   <span class="hl slc">-- Start --</span>
   <span class="hl slc">-----------</span>

   <span class="hl kwa">procedure</span> Start
     <span class="hl opt">(</span>This     <span class="hl opt">:</span> <span class="hl kwa">access</span> Creature<span class="hl opt">;</span>
      Location <span class="hl opt">:</span> Chameneos<span class="hl opt">.</span>Meetings<span class="hl opt">.</span>Venue<span class="hl opt">;</span>
      Latch    <span class="hl opt">:</span> Chameneos<span class="hl opt">.</span>Countdown<span class="hl opt">.</span>Latch_Ref<span class="hl opt">;</span>
      Slot     <span class="hl opt">:</span> <span class="hl kwb">Natural</span><span class="hl opt">)</span>
   <span class="hl kwa">is</span>
      Player_To_Be_Named_Later <span class="hl opt">:</span> Thread_Ref<span class="hl opt">;</span>
      <span class="hl kwa">pragma</span> Unreferenced <span class="hl opt">(</span>Player_To_Be_Named_Later<span class="hl opt">);</span>
   <span class="hl kwa">begin</span>
      This<span class="hl opt">.</span>Rendezvous_Point <span class="hl opt">:=</span> Location<span class="hl opt">;</span>
      This<span class="hl opt">.</span>Completion <span class="hl opt">:=</span> Latch<span class="hl opt">;</span>
      This<span class="hl opt">.</span>Rendezvous_Point<span class="hl opt">.</span>Register <span class="hl opt">(</span>This<span class="hl opt">);</span>
      Player_To_Be_Named_Later <span class="hl opt">:=</span> <span class="hl kwa">new</span> Thread <span class="hl opt">(</span>This<span class="hl opt">,</span> Slot<span class="hl opt">);</span>
        <span class="hl slc">--  just launch the thread, no need to keep track of it</span>
   <span class="hl kwa">end</span> Start<span class="hl opt">;</span>

   <span class="hl slc">----------</span>
   <span class="hl slc">-- Meet --</span>
   <span class="hl slc">----------</span>

   <span class="hl kwa">procedure</span> Meet <span class="hl opt">(</span>This <span class="hl opt">:</span> <span class="hl kwa">in out</span> Creature<span class="hl opt">;</span> Other <span class="hl opt">:</span> <span class="hl kwa">in out</span> Creature<span class="hl opt">)</span> <span class="hl kwa">is</span>
      New_Color <span class="hl opt">:</span> Colors<span class="hl opt">;</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">if</span> This<span class="hl opt">.</span>Id <span class="hl opt">=</span> Other<span class="hl opt">.</span>Id <span class="hl kwa">then</span>
         This<span class="hl opt">.</span>Same_Count <span class="hl opt">:=</span> This<span class="hl opt">.</span>Same_Count <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span>
         Other<span class="hl opt">.</span>Same_Count <span class="hl opt">:=</span> Other<span class="hl opt">.</span>Same_Count <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span>
      <span class="hl kwa">end if</span><span class="hl opt">;</span>

      This<span class="hl opt">.</span>Count  <span class="hl opt">:=</span> This<span class="hl opt">.</span>Count <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span>
      Other<span class="hl opt">.</span>Count <span class="hl opt">:=</span> Other<span class="hl opt">.</span>Count <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span>

      New_Color <span class="hl opt">:=</span> Complementary_Color <span class="hl opt">(</span>This<span class="hl opt">.</span>Color<span class="hl opt">,</span> Other<span class="hl opt">.</span>Color<span class="hl opt">);</span>
      This<span class="hl opt">.</span>Color <span class="hl opt">:=</span> New_Color<span class="hl opt">;</span>
      Other<span class="hl opt">.</span>Color <span class="hl opt">:=</span> New_Color<span class="hl opt">;</span>

      Other<span class="hl opt">.</span>Met <span class="hl opt">:=</span> <span class="hl kwd">True</span><span class="hl opt">;</span>
   <span class="hl kwa">end</span> Meet<span class="hl opt">;</span>

   <span class="hl slc">--------------------</span>
   <span class="hl slc">-- Wait_Until_Met --</span>
   <span class="hl slc">--------------------</span>

   <span class="hl kwa">procedure</span> Wait_Until_Met <span class="hl opt">(</span>This <span class="hl opt">:</span> <span class="hl kwa">in out</span> Creature<span class="hl opt">)</span> <span class="hl kwa">is</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">if</span> Processor_Count <span class="hl opt">&gt;</span> <span class="hl num">1</span> <span class="hl kwa">then</span>
         <span class="hl kwa">declare</span>
            Spin_Count <span class="hl opt">:</span> <span class="hl kwb">Integer</span> <span class="hl opt">:=</span> <span class="hl num">0</span><span class="hl opt">;</span>
         <span class="hl kwa">begin</span>
            <span class="hl kwa">while not</span> This<span class="hl opt">.</span>Met <span class="hl kwa">loop</span>
               Spin_Count <span class="hl opt">:=</span> Spin_Count <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span>
               <span class="hl kwa">if</span> Spin_Count <span class="hl opt">&gt;</span> <span class="hl num">20</span>_000 <span class="hl kwa">then</span>  <span class="hl slc">-- arbitrary max</span>
                  <span class="hl kwa">delay</span> <span class="hl num">0.0</span><span class="hl opt">;</span>  <span class="hl slc">-- yield</span>
                  Spin_Count <span class="hl opt">:=</span> <span class="hl num">0</span><span class="hl opt">;</span>
               <span class="hl kwa">end if</span><span class="hl opt">;</span>
            <span class="hl kwa">end loop</span><span class="hl opt">;</span>
         <span class="hl kwa">end</span><span class="hl opt">;</span>
      <span class="hl kwa">else</span>
         <span class="hl kwa">while not</span> This<span class="hl opt">.</span>Met <span class="hl kwa">loop</span>
            <span class="hl kwa">delay</span> <span class="hl num">0.0</span><span class="hl opt">;</span> <span class="hl slc">-- yield</span>
         <span class="hl kwa">end loop</span><span class="hl opt">;</span>
      <span class="hl kwa">end if</span><span class="hl opt">;</span>
      This<span class="hl opt">.</span>Met <span class="hl opt">:=</span> <span class="hl kwd">False</span><span class="hl opt">;</span>
   <span class="hl kwa">end</span> Wait_Until_Met<span class="hl opt">;</span>

   <span class="hl slc">----------------------</span>
   <span class="hl slc">-- Await_Completion --</span>
   <span class="hl slc">----------------------</span>

   <span class="hl kwa">procedure</span> Await_Completion <span class="hl opt">(</span>This <span class="hl opt">:</span> <span class="hl kwa">in out</span> Creature<span class="hl opt">)</span> <span class="hl kwa">is</span>
   <span class="hl kwa">begin</span>
      This<span class="hl opt">.</span>Completion<span class="hl opt">.</span>Wait<span class="hl opt">;</span>
   <span class="hl kwa">end</span> Await_Completion<span class="hl opt">;</span>

   <span class="hl slc">------------</span>
   <span class="hl slc">-- Set_Id --</span>
   <span class="hl slc">------------</span>

   <span class="hl kwa">procedure</span> Set_Id <span class="hl opt">(</span>This <span class="hl opt">:</span> <span class="hl kwa">in out</span> Creature<span class="hl opt">;</span>  To <span class="hl opt">:</span> Creature_Count<span class="hl opt">)</span> <span class="hl kwa">is</span>
   <span class="hl kwa">begin</span>
      This<span class="hl opt">.</span>Id <span class="hl opt">:=</span> To<span class="hl opt">;</span>
   <span class="hl kwa">end</span> Set_Id<span class="hl opt">;</span>

   <span class="hl slc">--------</span>
   <span class="hl slc">-- Id --</span>
   <span class="hl slc">--------</span>

   <span class="hl kwa">function</span> Id <span class="hl opt">(</span>This <span class="hl opt">:</span> Creature<span class="hl opt">)</span> <span class="hl kwa">return</span> Creature_Count <span class="hl kwa">is</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">return</span> This<span class="hl opt">.</span>Id<span class="hl opt">;</span>
   <span class="hl kwa">end</span> Id<span class="hl opt">;</span>

   <span class="hl slc">-------------------</span>
   <span class="hl slc">-- Current_Color --</span>
   <span class="hl slc">-------------------</span>

   <span class="hl kwa">function</span> Current_Color <span class="hl opt">(</span>This <span class="hl opt">:</span> Creature<span class="hl opt">)</span> <span class="hl kwa">return</span> Colors <span class="hl kwa">is</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">return</span> This<span class="hl opt">.</span>Color<span class="hl opt">;</span>
   <span class="hl kwa">end</span> Current_Color<span class="hl opt">;</span>

   <span class="hl slc">-------------------</span>
   <span class="hl slc">-- Initial_Color --</span>
   <span class="hl slc">-------------------</span>

   <span class="hl kwa">function</span> Initial_Color <span class="hl opt">(</span>This <span class="hl opt">:</span> Creature<span class="hl opt">)</span> <span class="hl kwa">return</span> Colors <span class="hl kwa">is</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">return</span> This<span class="hl opt">.</span>Starting_Color<span class="hl opt">;</span>
   <span class="hl kwa">end</span> Initial_Color<span class="hl opt">;</span>

   <span class="hl slc">-------------</span>
   <span class="hl slc">-- Display --</span>
   <span class="hl slc">-------------</span>

   <span class="hl kwa">procedure</span> Display <span class="hl opt">(</span>This <span class="hl opt">:</span> <span class="hl kwa">in out</span> Creature<span class="hl opt">)</span> <span class="hl kwa">is</span>
   <span class="hl kwa">begin</span>
      Put <span class="hl opt">(</span>This<span class="hl opt">.</span>Count<span class="hl opt">);</span>
      Put_Line <span class="hl opt">(</span>Spelled <span class="hl opt">(</span>This<span class="hl opt">.</span>Same_Count<span class="hl opt">));</span>
   <span class="hl kwa">end</span> Display<span class="hl opt">;</span>

   <span class="hl slc">---------------</span>
   <span class="hl slc">-- Total_Met --</span>
   <span class="hl slc">---------------</span>

   <span class="hl kwa">function</span> Total_Met <span class="hl opt">(</span>This <span class="hl opt">:</span> Creature<span class="hl opt">)</span> <span class="hl kwa">return</span> <span class="hl kwb">Natural</span> <span class="hl kwa">is</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">return</span> This<span class="hl opt">.</span>Count<span class="hl opt">;</span>
   <span class="hl kwa">end</span> Total_Met<span class="hl opt">;</span>

   <span class="hl slc">------------</span>
   <span class="hl slc">-- Thread --</span>
   <span class="hl slc">------------</span>

   <span class="hl kwa">task body</span> Thread <span class="hl kwa">is</span>
      <span class="hl kwa">use</span> Chameneos<span class="hl opt">.</span>Meetings<span class="hl opt">;</span>
   <span class="hl kwa">begin</span>
      Meet_Others <span class="hl opt">(</span>This<span class="hl opt">.</span>Rendezvous_Point<span class="hl opt">.</span><span class="hl kwa">all</span><span class="hl opt">,</span> Player <span class="hl opt">=&gt;</span> This<span class="hl opt">);</span>
      This<span class="hl opt">.</span>Completion<span class="hl opt">.</span>Signal<span class="hl opt">;</span>
   <span class="hl kwa">end</span> Thread<span class="hl opt">;</span>

<span class="hl kwa">end</span> Chameneos<span class="hl opt">.</span>Creatures<span class="hl opt">;</span>

<span class="hl slc">-------------------------------------------------------------------------------</span>

<span class="hl kwa">with</span> GNAT<span class="hl opt">.</span>IO<span class="hl opt">;</span>  <span class="hl kwa">use</span> GNAT<span class="hl opt">.</span>IO<span class="hl opt">;</span>

<span class="hl kwa">package body</span> Chameneos<span class="hl opt">.</span>Games <span class="hl kwa">is</span>

   <span class="hl slc">-----------</span>
   <span class="hl slc">-- Start --</span>
   <span class="hl slc">-----------</span>

   <span class="hl kwa">procedure</span> Start
     <span class="hl opt">(</span>This            <span class="hl opt">:</span> <span class="hl kwa">in out</span> Game<span class="hl opt">;</span>
      Creature_Colors <span class="hl opt">:</span> Color_List_Ref<span class="hl opt">;</span>
      Num_Meetings    <span class="hl opt">:</span> Meeting_Count<span class="hl opt">;</span>
      Slot            <span class="hl opt">:</span> <span class="hl kwb">Natural</span><span class="hl opt">)</span>
   <span class="hl kwa">is</span>
      Color_Index <span class="hl opt">:</span> <span class="hl kwb">Positive</span> <span class="hl opt">:=</span> Creature_Colors<span class="hl kwd">'First</span><span class="hl opt">;</span>
      <span class="hl slc">--  We use a separate index, instead of the index used to iterate over</span>
      <span class="hl slc">--  This.Players, since the bounds need not be the same. The range of</span>
      <span class="hl slc">--  This.Players is 1 .. Num_Creatures, where that upper bound is set as a</span>
      <span class="hl slc">--  discriminant to the game when it is created. The actual value passed</span>
      <span class="hl slc">--  to this discriminant comes from the length of an array of colors,</span>
      <span class="hl slc">--  which is then passed to this procedure in Creature_Colors, so the</span>
      <span class="hl slc">--  count will be the same. There is no guarantee of that, of course, but</span>
      <span class="hl slc">--  in practice that will suffice.</span>
   <span class="hl kwa">begin</span>
      This<span class="hl opt">.</span>Rendezvous_Point <span class="hl opt">:=</span> <span class="hl kwa">new</span> Meetings<span class="hl opt">.</span>Place <span class="hl opt">(</span>Num_Meetings<span class="hl opt">);</span>
      <span class="hl kwa">for</span> K <span class="hl kwa">in</span> This<span class="hl opt">.</span>Players<span class="hl kwd">'Range</span> <span class="hl kwa">loop</span>
         This<span class="hl opt">.</span>Players <span class="hl opt">(</span>K<span class="hl opt">) :=</span> <span class="hl kwa">new</span> Creature <span class="hl opt">(</span>Creature_Colors <span class="hl opt">(</span>Color_Index<span class="hl opt">));</span>
         This<span class="hl opt">.</span>Players <span class="hl opt">(</span>K<span class="hl opt">).</span>Start
           <span class="hl opt">(</span>Location <span class="hl opt">=&gt;</span> This<span class="hl opt">.</span>Rendezvous_Point<span class="hl opt">,</span>
            Latch    <span class="hl opt">=&gt;</span> This<span class="hl opt">.</span>Latch<span class="hl kwd">'Unchecked_Access</span><span class="hl opt">,</span>
            Slot     <span class="hl opt">=&gt;</span> Slot<span class="hl opt">);</span>
         Color_Index <span class="hl opt">:=</span> Color_Index <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span>
      <span class="hl kwa">end loop</span><span class="hl opt">;</span>
   <span class="hl kwa">end</span> Start<span class="hl opt">;</span>

   <span class="hl slc">----------------------</span>
   <span class="hl slc">-- Await_Completion --</span>
   <span class="hl slc">----------------------</span>

   <span class="hl kwa">procedure</span> Await_Completion <span class="hl opt">(</span>This <span class="hl opt">:</span> Game<span class="hl opt">)</span> <span class="hl kwa">is</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">for</span> K <span class="hl kwa">in</span> This<span class="hl opt">.</span>Players<span class="hl kwd">'Range</span> <span class="hl kwa">loop</span>
         This<span class="hl opt">.</span>Players <span class="hl opt">(</span>K<span class="hl opt">).</span>Await_Completion<span class="hl opt">;</span>
      <span class="hl kwa">end loop</span><span class="hl opt">;</span>
   <span class="hl kwa">end</span> Await_Completion<span class="hl opt">;</span>

   <span class="hl slc">-------------</span>
   <span class="hl slc">-- Display --</span>
   <span class="hl slc">-------------</span>

   <span class="hl kwa">procedure</span> Display <span class="hl opt">(</span>This <span class="hl opt">:</span> Game<span class="hl opt">)</span> <span class="hl kwa">is</span>
      Grand_Total <span class="hl opt">:</span> <span class="hl kwb">Natural</span> <span class="hl opt">:=</span> <span class="hl num">0</span><span class="hl opt">;</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">for</span> K <span class="hl kwa">in</span> This<span class="hl opt">.</span>Players<span class="hl kwd">'Range</span> <span class="hl kwa">loop</span>
         Put<span class="hl opt">(</span> <span class="hl str">&quot; &quot;</span> <span class="hl opt">&amp;</span> Colors_Image <span class="hl opt">(</span>This<span class="hl opt">.</span>Players <span class="hl opt">(</span>K<span class="hl opt">).</span>Initial_Color<span class="hl opt">).</span><span class="hl kwa">all</span><span class="hl opt">);</span>
      <span class="hl kwa">end loop</span><span class="hl opt">;</span>
      New_Line<span class="hl opt">;</span>

      <span class="hl kwa">for</span> K <span class="hl kwa">in</span> This<span class="hl opt">.</span>Players<span class="hl kwd">'Range</span> <span class="hl kwa">loop</span>
         This<span class="hl opt">.</span>Players <span class="hl opt">(</span>K<span class="hl opt">).</span>Display<span class="hl opt">;</span>
         Grand_Total <span class="hl opt">:=</span> Grand_Total <span class="hl opt">+</span> This<span class="hl opt">.</span>Players <span class="hl opt">(</span>K<span class="hl opt">).</span>Total_Met<span class="hl opt">;</span>
      <span class="hl kwa">end loop</span><span class="hl opt">;</span>
      Put_Line <span class="hl opt">(</span>Spelled <span class="hl opt">(</span>Grand_Total<span class="hl opt">));</span>
      New_Line<span class="hl opt">;</span>
   <span class="hl kwa">end</span> Display<span class="hl opt">;</span>

<span class="hl kwa">end</span> Chameneos<span class="hl opt">.</span>Games<span class="hl opt">;</span>

<span class="hl slc">-------------------------------------------------------------------------------</span>

<span class="hl kwa">with</span> Chameneos<span class="hl opt">.</span>Creatures<span class="hl opt">;</span>
<span class="hl kwa">with</span> x86_Atomic_Swap_Utils<span class="hl opt">;</span>  <span class="hl kwa">use</span> x86_Atomic_Swap_Utils<span class="hl opt">;</span>

<span class="hl kwa">package body</span> Chameneos<span class="hl opt">.</span>Meetings <span class="hl kwa">is</span>

   <span class="hl slc">--------------</span>
   <span class="hl slc">-- Register --</span>
   <span class="hl slc">--------------</span>

   <span class="hl kwa">procedure</span> Register
     <span class="hl opt">(</span>This   <span class="hl opt">:</span> <span class="hl kwa">in out</span> Place<span class="hl opt">;</span>
      Player <span class="hl opt">:</span> <span class="hl kwa">access</span> Chameneos<span class="hl opt">.</span>Creatures<span class="hl opt">.</span>Creature<span class="hl opt">)</span>
   <span class="hl kwa">is</span>
      Id <span class="hl opt">:</span> <span class="hl kwa">constant</span> Creature_Count <span class="hl opt">:=</span> This<span class="hl opt">.</span>Id_Generator<span class="hl opt">;</span>
   <span class="hl kwa">begin</span>
      Player<span class="hl opt">.</span>Set_Id <span class="hl opt">(</span>Id<span class="hl opt">);</span>
      This<span class="hl opt">.</span>Registered_Players <span class="hl opt">(</span>Id<span class="hl opt">) :=</span> Player<span class="hl opt">;</span>
      This<span class="hl opt">.</span>Id_Generator <span class="hl opt">:=</span> This<span class="hl opt">.</span>Id_Generator <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span>
   <span class="hl kwa">end</span> Register<span class="hl opt">;</span>


   <span class="hl slc">--  the lower part of the shared variable State, used to represent those</span>
   <span class="hl slc">--  chameneos wating for a meeting in the mall</span>
   Creature_Mask <span class="hl opt">:</span> <span class="hl kwa">constant</span> <span class="hl opt">:=</span> <span class="hl num">2</span> <span class="hl opt">**</span> Creature_Mask_Bits <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">;</span>

   <span class="hl slc">--  the additional meeting count value due to the creature mask</span>
   Count_Offset <span class="hl opt">:</span> <span class="hl kwa">constant</span> Unsigned_32 <span class="hl opt">:=</span> Shift_Left <span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">,</span> Creature_Mask_Bits<span class="hl opt">);</span>


   <span class="hl slc">-----------------</span>
   <span class="hl slc">-- Meet_Others --</span>
   <span class="hl slc">-----------------</span>

   <span class="hl kwa">procedure</span> Meet_Others
     <span class="hl opt">(</span>This   <span class="hl opt">:</span> <span class="hl kwa">in out</span> Place<span class="hl opt">;</span>
      Player <span class="hl opt">:</span> <span class="hl kwa">access</span> Chameneos<span class="hl opt">.</span>Creatures<span class="hl opt">.</span>Creature<span class="hl opt">)</span>
   <span class="hl kwa">is</span>
      Local_State       <span class="hl opt">:</span> Unsigned_32 <span class="hl opt">:=</span> This<span class="hl opt">.</span>Shared_State<span class="hl opt">;</span>
      Waiting           <span class="hl opt">:</span> Unsigned_32<span class="hl opt">;</span>
      Target_State      <span class="hl opt">:</span> Unsigned_32<span class="hl opt">;</span>
      State_Before_Swap <span class="hl opt">:</span> Unsigned_32<span class="hl opt">;</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">loop</span>
         <span class="hl slc">--  get the Id of a creature waiting for a meeting, if any</span>
         Waiting <span class="hl opt">:=</span> Local_State <span class="hl kwa">and</span> Creature_Mask<span class="hl opt">;</span>
         <span class="hl kwa">if</span> Waiting <span class="hl opt">/=</span> No_Creature <span class="hl kwa">then</span>
            <span class="hl slc">--  at least one creature is in the mall, waiting for a rendezvous,</span>
            <span class="hl slc">--  so we set the target state to the current meeting count - 1 to</span>
            <span class="hl slc">--  reflect the meeting we're about to attempt</span>
            Target_State <span class="hl opt">:= (</span>Local_State <span class="hl kwa">and not</span> Creature_Mask<span class="hl opt">) -</span> Count_Offset<span class="hl opt">;</span>
         <span class="hl kwa">elsif</span> Local_State <span class="hl opt">/=</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
            <span class="hl slc">--  no creatures are waiting but there are meetings remaining so set</span>
            <span class="hl slc">--  the target state to reflect Player, who is willing to meet</span>
            Target_State <span class="hl opt">:=</span> Local_State <span class="hl kwa">or</span> Player<span class="hl opt">.</span>Id<span class="hl opt">;</span>
         <span class="hl kwa">else</span>  <span class="hl slc">--  no creatures waiting and no further meetings to be held</span>
            <span class="hl kwa">exit</span><span class="hl opt">;</span>
         <span class="hl kwa">end if</span><span class="hl opt">;</span>

         <span class="hl slc">--  Attempt to update the shared game state. If the value of the shared</span>
         <span class="hl slc">--  state is that of the local copy when the swap is attempted, then</span>
         <span class="hl slc">--  the shared state will be updated, otherwise it is not changed.</span>
         State_Before_Swap <span class="hl opt">:=</span> Sync_Val_Compare_And_Swap
           <span class="hl opt">(</span>Destination <span class="hl opt">=&gt;</span> This<span class="hl opt">.</span>Shared_State<span class="hl kwd">'Access</span><span class="hl opt">,</span>
            Comparand   <span class="hl opt">=&gt;</span> Local_State<span class="hl opt">,</span>
            New_Value   <span class="hl opt">=&gt;</span> Target_State<span class="hl opt">);</span>

         <span class="hl kwa">if</span> State_Before_Swap <span class="hl opt">=</span> Local_State <span class="hl kwa">then</span> <span class="hl slc">-- we successfully updated it</span>
            <span class="hl kwa">if</span> Waiting <span class="hl opt">/=</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
               Player<span class="hl opt">.</span>Meet <span class="hl opt">(</span>This<span class="hl opt">.</span>Registered_Players <span class="hl opt">(</span>Waiting<span class="hl opt">).</span><span class="hl kwa">all</span><span class="hl opt">);</span>
            <span class="hl kwa">else</span>
               Player<span class="hl opt">.</span>Wait_Until_Met<span class="hl opt">;</span>
            <span class="hl kwa">end if</span><span class="hl opt">;</span>

            Local_State <span class="hl opt">:=</span> Target_State<span class="hl opt">;</span>
         <span class="hl kwa">else</span>  <span class="hl slc">-- we did not update the shared state, so use the shared value</span>
            Local_State <span class="hl opt">:=</span> State_Before_Swap<span class="hl opt">;</span>
         <span class="hl kwa">end if</span><span class="hl opt">;</span>
      <span class="hl kwa">end loop</span><span class="hl opt">;</span>
   <span class="hl kwa">end</span> Meet_Others<span class="hl opt">;</span>

<span class="hl kwa">end</span> Chameneos<span class="hl opt">.</span>Meetings<span class="hl opt">;</span>

<span class="hl slc">-------------------------------------------------------------------------------</span>

<span class="hl kwa">package body</span> Chameneos<span class="hl opt">.</span>Countdown <span class="hl kwa">is</span>

   <span class="hl slc">-----------</span>
   <span class="hl slc">-- Latch --</span>
   <span class="hl slc">-----------</span>

   <span class="hl kwa">protected body</span> Latch <span class="hl kwa">is</span>

      <span class="hl slc">----------</span>
      <span class="hl slc">-- Wait --</span>
      <span class="hl slc">----------</span>

      <span class="hl kwa">entry</span> Wait <span class="hl kwa">when</span> Count <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl kwa">is</span>
      <span class="hl kwa">begin</span>
         <span class="hl kwa">null</span><span class="hl opt">;</span>
      <span class="hl kwa">end</span> Wait<span class="hl opt">;</span>

      <span class="hl slc">------------</span>
      <span class="hl slc">-- Signal --</span>
      <span class="hl slc">------------</span>

      <span class="hl kwa">procedure</span> Signal <span class="hl kwa">is</span>
      <span class="hl kwa">begin</span>
         Count <span class="hl opt">:=</span> Count <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">;</span>
      <span class="hl kwa">end</span> Signal<span class="hl opt">;</span>

   <span class="hl kwa">end</span> Latch<span class="hl opt">;</span>

<span class="hl kwa">end</span> Chameneos<span class="hl opt">.</span>Countdown<span class="hl opt">;</span>

<span class="hl slc">-------------------------------------------------------------------------------</span>

<span class="hl kwa">with</span> System<span class="hl opt">.</span>Memory<span class="hl opt">;</span>
<span class="hl kwa">with</span> Ada<span class="hl opt">.</span>Unchecked_Conversion<span class="hl opt">;</span>

<span class="hl kwa">package body</span> Cache_Aligned_Storage_Pools <span class="hl kwa">is</span>

   <span class="hl kwa">use</span> System<span class="hl opt">,</span> System<span class="hl opt">.</span>Storage_Elements<span class="hl opt">;</span>

   <span class="hl slc">--  we cannot use System.Address'Size as the modulus so we use the same thing</span>
   <span class="hl slc">--  that the compiler does (when declaring Address as a modular type in the</span>
   <span class="hl slc">--  full definition)</span>
   <span class="hl kwa">type</span> Unsigned_Address <span class="hl kwa">is mod</span> System<span class="hl opt">.</span>Memory_Size<span class="hl opt">;</span>

   <span class="hl kwa">function</span> As_Unsigned_Address <span class="hl kwa">is new</span> Ada<span class="hl opt">.</span>Unchecked_Conversion
     <span class="hl opt">(</span>Source <span class="hl opt">=&gt;</span> Address<span class="hl opt">,</span>
      Target <span class="hl opt">=&gt;</span> Unsigned_Address<span class="hl opt">);</span>

   <span class="hl kwa">function</span> As_Address <span class="hl kwa">is new</span> Ada<span class="hl opt">.</span>Unchecked_Conversion
     <span class="hl opt">(</span>Target <span class="hl opt">=&gt;</span> Address<span class="hl opt">,</span>
      Source <span class="hl opt">=&gt;</span> Unsigned_Address<span class="hl opt">);</span>

   <span class="hl kwa">type</span> Address_Pointer <span class="hl kwa">is access all</span> Address<span class="hl opt">;</span>
   <span class="hl kwa">for</span> Address_Pointer<span class="hl kwd">'Storage_Size</span> <span class="hl kwa">use</span> <span class="hl num">0</span><span class="hl opt">;</span>

   <span class="hl kwa">function</span> As_Address_Pointer <span class="hl kwa">is new</span> Ada<span class="hl opt">.</span>Unchecked_Conversion
     <span class="hl opt">(</span>Source <span class="hl opt">=&gt;</span> Address<span class="hl opt">,</span>
      Target <span class="hl opt">=&gt;</span> Address_Pointer<span class="hl opt">);</span>

   <span class="hl slc">--  size of an address in terms of storage units</span>
   Size_Of_Address <span class="hl opt">:</span> <span class="hl kwa">constant</span> Storage_Offset <span class="hl opt">:=</span> Address<span class="hl kwd">'Size</span> <span class="hl opt">/</span> System<span class="hl opt">.</span>Storage_Unit<span class="hl opt">;</span>

   Twice_Cache_Line_Size <span class="hl opt">:</span> <span class="hl kwa">constant</span> <span class="hl opt">:=</span> <span class="hl num">2</span> <span class="hl opt">*</span> Cache_Line_Size<span class="hl opt">;</span>

   <span class="hl slc">--------------</span>
   <span class="hl slc">-- Allocate --</span>
   <span class="hl slc">--------------</span>

   <span class="hl kwa">procedure</span> Allocate
     <span class="hl opt">(</span>Pool            <span class="hl opt">:</span> <span class="hl kwa">in out</span> Cache_Aligned_Storage_Pool<span class="hl opt">;</span>
      Storage_Address <span class="hl opt">:</span> <span class="hl kwa">out</span> System<span class="hl opt">.</span>Address<span class="hl opt">;</span>
      Requested_Size  <span class="hl opt">:</span> SSE<span class="hl opt">.</span>Storage_Count<span class="hl opt">;</span>
      Alignment       <span class="hl opt">:</span> SSE<span class="hl opt">.</span>Storage_Count<span class="hl opt">)</span>
   <span class="hl kwa">is</span>
      <span class="hl kwa">pragma</span> Unreferenced <span class="hl opt">(</span>Pool<span class="hl opt">);</span>
      <span class="hl kwa">pragma</span> Unreferenced <span class="hl opt">(</span>Alignment<span class="hl opt">);</span>

      Actual  <span class="hl opt">:</span> Address<span class="hl opt">;</span>
      Aligned <span class="hl opt">:</span> Address<span class="hl opt">;</span>
      Header  <span class="hl opt">:</span> Address<span class="hl opt">;</span>
      Temp    <span class="hl opt">:</span> Unsigned_Address<span class="hl opt">;</span>
   <span class="hl kwa">begin</span>
      Actual <span class="hl opt">:=</span> Memory<span class="hl opt">.</span>Alloc <span class="hl opt">(</span>Memory<span class="hl opt">.</span>size_t <span class="hl opt">(</span>Requested_Size <span class="hl opt">+</span> Twice_Cache_Line_Size<span class="hl opt">));</span>
      <span class="hl slc">--  The call to Alloc returns an address whose alignment is compatible</span>
      <span class="hl slc">--  with the worst case alignment requirement for the machine; thus the</span>
      <span class="hl slc">--  Alignment argument can be safely ignored.</span>

      <span class="hl kwa">if</span> Actual <span class="hl opt">=</span> Null_Address <span class="hl kwa">then</span>
         <span class="hl kwa">raise</span> Storage_Error<span class="hl opt">;</span>
      <span class="hl kwa">end if</span><span class="hl opt">;</span>

      <span class="hl slc">--  compute a cache-aligned address within the block allocated</span>
      Temp <span class="hl opt">:=</span> As_Unsigned_Address <span class="hl opt">(</span>Actual <span class="hl opt">+</span> Cache_Line_Size<span class="hl opt">)</span> <span class="hl kwa">and not</span> <span class="hl opt">(</span>Cache_Line_Size <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">);</span>
      Aligned <span class="hl opt">:=</span> As_Address <span class="hl opt">(</span>Temp<span class="hl opt">);</span>
      <span class="hl slc">--  Put the address of the whole allocated block just before the address</span>
      <span class="hl slc">--  given to the application so we can deallocate the whole block later</span>
      Header <span class="hl opt">:=</span> Aligned <span class="hl opt">-</span> Size_of_Address<span class="hl opt">;</span>
      As_Address_Pointer <span class="hl opt">(</span>Header<span class="hl opt">).</span><span class="hl kwa">all</span> <span class="hl opt">:=</span> Actual<span class="hl opt">;</span>
      Storage_Address <span class="hl opt">:=</span> Aligned<span class="hl opt">;</span>
   <span class="hl kwa">end</span> Allocate<span class="hl opt">;</span>

   <span class="hl slc">----------------</span>
   <span class="hl slc">-- Deallocate --</span>
   <span class="hl slc">----------------</span>

   <span class="hl kwa">procedure</span> Deallocate
     <span class="hl opt">(</span>Pool            <span class="hl opt">:</span> <span class="hl kwa">in out</span> Cache_Aligned_Storage_Pool<span class="hl opt">;</span>
      Storage_Address <span class="hl opt">:</span> System<span class="hl opt">.</span>Address<span class="hl opt">;</span>
      Requested_Size  <span class="hl opt">:</span> SSE<span class="hl opt">.</span>Storage_Count<span class="hl opt">;</span>
      Alignment       <span class="hl opt">:</span> SSE<span class="hl opt">.</span>Storage_Count<span class="hl opt">)</span>
   <span class="hl kwa">is</span>
      <span class="hl kwa">pragma</span> Unreferenced <span class="hl opt">(</span>Pool<span class="hl opt">);</span>
      <span class="hl kwa">pragma</span> Unreferenced <span class="hl opt">(</span>Requested_Size<span class="hl opt">);</span>
      <span class="hl kwa">pragma</span> Unreferenced <span class="hl opt">(</span>Alignment<span class="hl opt">);</span>

      Actual <span class="hl opt">:</span> Address<span class="hl opt">;</span>
      Header <span class="hl opt">:</span> Address<span class="hl opt">;</span>
   <span class="hl kwa">begin</span>
      Header <span class="hl opt">:=</span> Storage_Address <span class="hl opt">-</span> Size_of_Address<span class="hl opt">;</span>
      Actual <span class="hl opt">:=</span> As_Address_Pointer <span class="hl opt">(</span>Header<span class="hl opt">).</span><span class="hl kwa">all</span><span class="hl opt">;</span>
      Memory<span class="hl opt">.</span>Free <span class="hl opt">(</span>Actual<span class="hl opt">);</span>
   <span class="hl kwa">end</span> Deallocate<span class="hl opt">;</span>

   <span class="hl slc">------------------</span>
   <span class="hl slc">-- Storage_Size --</span>
   <span class="hl slc">------------------</span>

   <span class="hl kwa">function</span> Storage_Size
     <span class="hl opt">(</span>Pool  <span class="hl opt">:</span> Cache_Aligned_Storage_Pool<span class="hl opt">)</span>
      <span class="hl kwa">return</span>  SSE<span class="hl opt">.</span>Storage_Count
   <span class="hl kwa">is</span>
      <span class="hl kwa">pragma</span> Warnings <span class="hl opt">(</span>Off<span class="hl opt">,</span> Pool<span class="hl opt">);</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">return</span> SSE<span class="hl opt">.</span>Storage_Count<span class="hl kwd">'Last</span><span class="hl opt">;</span>
   <span class="hl kwa">end</span> Storage_Size<span class="hl opt">;</span>

   <span class="hl slc">------------------</span>
   <span class="hl slc">-- Allocate_Any --</span>
   <span class="hl slc">------------------</span>

   <span class="hl kwa">procedure</span> Allocate_Any
     <span class="hl opt">(</span>Pool            <span class="hl opt">:</span> <span class="hl kwa">in out</span> Cache_Aligned_Storage_Pool<span class="hl kwd">'Class</span><span class="hl opt">;</span>
      Storage_Address <span class="hl opt">:</span> <span class="hl kwa">out</span> System<span class="hl opt">.</span>Address<span class="hl opt">;</span>
      Requested_Size  <span class="hl opt">:</span> SSE<span class="hl opt">.</span>Storage_Count<span class="hl opt">;</span>
      Alignment       <span class="hl opt">:</span> SSE<span class="hl opt">.</span>Storage_Count<span class="hl opt">)</span>
   <span class="hl kwa">is</span>
   <span class="hl kwa">begin</span>
      Allocate <span class="hl opt">(</span>Pool<span class="hl opt">,</span> Storage_Address<span class="hl opt">,</span> Requested_Size<span class="hl opt">,</span> Alignment<span class="hl opt">);</span>
   <span class="hl kwa">end</span> Allocate_Any<span class="hl opt">;</span>

   <span class="hl slc">--------------------</span>
   <span class="hl slc">-- Deallocate_Any --</span>
   <span class="hl slc">--------------------</span>

   <span class="hl kwa">procedure</span> Deallocate_Any
     <span class="hl opt">(</span>Pool            <span class="hl opt">:</span> <span class="hl kwa">in out</span> Cache_Aligned_Storage_Pool<span class="hl kwd">'Class</span><span class="hl opt">;</span>
      Storage_Address <span class="hl opt">:</span> System<span class="hl opt">.</span>Address<span class="hl opt">;</span>
      Requested_Size  <span class="hl opt">:</span> SSE<span class="hl opt">.</span>Storage_Count<span class="hl opt">;</span>
      Alignment       <span class="hl opt">:</span> SSE<span class="hl opt">.</span>Storage_Count<span class="hl opt">)</span>
   <span class="hl kwa">is</span>
   <span class="hl kwa">begin</span>
      Deallocate <span class="hl opt">(</span>Pool<span class="hl opt">,</span> Storage_Address<span class="hl opt">,</span> Requested_Size<span class="hl opt">,</span> Alignment<span class="hl opt">);</span>
   <span class="hl kwa">end</span> Deallocate_Any<span class="hl opt">;</span>

<span class="hl kwa">end</span> Cache_Aligned_Storage_Pools<span class="hl opt">;</span>

<span class="hl slc">-------------------------------------------------------------------------------</span>

<span class="hl kwa">with</span> Interfaces<span class="hl opt">.</span>C<span class="hl opt">;</span>

<span class="hl kwa">package body</span> Chameneos<span class="hl opt">.</span>Processors <span class="hl kwa">is</span>

   Cores_Per_Slot <span class="hl opt">:</span> <span class="hl kwa">constant</span> <span class="hl opt">:=</span> <span class="hl num">2</span><span class="hl opt">;</span>

   Affinities <span class="hl opt">:</span> <span class="hl kwa">array</span> <span class="hl opt">(</span><span class="hl num">0</span> <span class="hl opt">..</span> Max_Slots<span class="hl opt">)</span> <span class="hl kwa">of aliased</span> CPU_Set<span class="hl opt">;</span>
   <span class="hl slc">--  we use the first slot (ie 0) for the global affinity mask, internally,</span>
   <span class="hl slc">--  hence there are Max_Slots-1 total slots available to the application</span>
   <span class="hl slc">--  threads, and a total of ((Max_Slots-1) * Cores_Per_Slot) cores supported</span>

   Slot_Modulus <span class="hl opt">:</span> <span class="hl kwb">Natural</span><span class="hl opt">;</span>

   <span class="hl slc">--------------</span>
   <span class="hl slc">-- Affinity --</span>
   <span class="hl slc">--------------</span>

   <span class="hl kwa">function</span> Affinity <span class="hl opt">(</span>Slot <span class="hl opt">:</span> <span class="hl kwb">Natural</span><span class="hl opt">)</span> <span class="hl kwa">return</span> cpu_set_t <span class="hl kwa">is</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">if</span> Slot <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
         <span class="hl kwa">return</span> Affinities <span class="hl opt">(</span>Slot<span class="hl opt">);</span>
      <span class="hl kwa">else</span>
         <span class="hl kwa">return</span> Affinities <span class="hl opt">((</span>Slot <span class="hl kwa">mod</span> Slot_Modulus<span class="hl opt">) +</span> <span class="hl num">1</span><span class="hl opt">);</span>
      <span class="hl kwa">end if</span><span class="hl opt">;</span>
   <span class="hl kwa">end</span> Affinity<span class="hl opt">;</span>

   <span class="hl slc">-----------------------</span>
   <span class="hl slc">-- sched_getaffinity --</span>
   <span class="hl slc">-----------------------</span>

   <span class="hl kwa">function</span> Sched_Getaffinity
     <span class="hl opt">(</span>Pid <span class="hl opt">:</span> Pid_T<span class="hl opt">;</span>  Cpusetsize <span class="hl opt">:</span> Unsigned_32<span class="hl opt">;</span>  Mask <span class="hl opt">:</span> <span class="hl kwa">access</span> CPU_Set<span class="hl opt">)</span>
      <span class="hl kwa">return</span> Interfaces<span class="hl opt">.</span>C<span class="hl opt">.</span>int<span class="hl opt">;</span>
   <span class="hl kwa">pragma</span> Import <span class="hl opt">(</span>C<span class="hl opt">,</span> sched_getaffinity<span class="hl opt">);</span>


   <span class="hl kwa">subtype</span> Bit_Number <span class="hl kwa">is</span> <span class="hl kwb">Integer</span> <span class="hl kwa">range</span> bit_field<span class="hl kwd">'Range</span><span class="hl opt">;</span>

   <span class="hl slc">--------------</span>
   <span class="hl slc">--  Set_Bit --</span>
   <span class="hl slc">--------------</span>

   <span class="hl kwa">procedure</span> Set_Bit <span class="hl opt">(</span>Bit <span class="hl opt">:</span> Bit_Number<span class="hl opt">;</span>  Within <span class="hl opt">:</span> <span class="hl kwa">in out</span> CPU_Set<span class="hl opt">)</span> <span class="hl kwa">is</span>
   <span class="hl kwa">begin</span>
      Within<span class="hl opt">.</span>bits <span class="hl opt">(</span>Bit<span class="hl opt">) :=</span> <span class="hl kwd">True</span><span class="hl opt">;</span>
   <span class="hl kwa">end</span> Set_Bit<span class="hl opt">;</span>

   <span class="hl slc">-------------------------------</span>
   <span class="hl slc">-- Define_Affinities_By_Slot --</span>
   <span class="hl slc">-------------------------------</span>

   <span class="hl kwa">procedure</span> Define_Affinities_By_Slot <span class="hl kwa">is</span>
      Num_Bits_Set     <span class="hl opt">:</span> <span class="hl kwb">Natural</span> <span class="hl opt">:=</span> <span class="hl num">0</span><span class="hl opt">;</span>
      Global_Mask      <span class="hl opt">:</span> CPU_Set <span class="hl kwa">renames</span> Affinities <span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">);</span>
      Result           <span class="hl opt">:</span> Int<span class="hl opt">;</span>
      Global_Mask_Size <span class="hl opt">:</span> <span class="hl kwa">constant</span> Unsigned_32 <span class="hl opt">:=</span> Global_Mask<span class="hl kwd">'Size</span> <span class="hl opt">/</span> System<span class="hl opt">.</span>Storage_Unit<span class="hl opt">;</span>
      Next_Affinity    <span class="hl opt">:</span> <span class="hl kwb">Natural</span><span class="hl opt">;</span>
      <span class="hl kwa">use type</span> Interfaces<span class="hl opt">.</span>C<span class="hl opt">.</span>int<span class="hl opt">;</span>
   <span class="hl kwa">begin</span>
      Result <span class="hl opt">:=</span> sched_getaffinity <span class="hl opt">(</span>getpid<span class="hl opt">,</span> Global_Mask_Size<span class="hl opt">,</span> Global_Mask<span class="hl kwd">'Access</span><span class="hl opt">);</span>
      <span class="hl kwa">if</span> Result <span class="hl opt">/=</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
         <span class="hl kwa">raise</span> Program_Error <span class="hl kwa">with</span> <span class="hl str">&quot;Could not get affinity&quot;</span><span class="hl opt">;</span>
      <span class="hl kwa">end if</span><span class="hl opt">;</span>

      <span class="hl kwa">for</span> B <span class="hl kwa">in</span> <span class="hl num">1</span> <span class="hl opt">..</span> CPU_SETSIZE <span class="hl kwa">loop</span>
         <span class="hl kwa">if</span> Global_Mask<span class="hl opt">.</span>Bits <span class="hl opt">(</span>B<span class="hl opt">)</span> <span class="hl kwa">then</span>
            Next_Affinity <span class="hl opt">:= (</span>Num_Bits_Set <span class="hl opt">/</span> Cores_Per_Slot<span class="hl opt">) +</span> <span class="hl num">1</span><span class="hl opt">;</span>
            <span class="hl kwa">if</span> Next_Affinity <span class="hl kwa">not in</span> Affinities<span class="hl kwd">'Range</span> <span class="hl kwa">then</span>
               <span class="hl slc">--  there are more processors enabled than we support, but</span>
               <span class="hl slc">--  that is OK since we only want a few</span>
               <span class="hl kwa">exit</span><span class="hl opt">;</span>
            <span class="hl kwa">end if</span><span class="hl opt">;</span>
            Set_Bit <span class="hl opt">(</span>B<span class="hl opt">,</span> Affinities <span class="hl opt">(</span>Next_Affinity<span class="hl opt">));</span>
            Num_Bits_Set <span class="hl opt">:=</span> Num_Bits_Set <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span>
         <span class="hl kwa">end if</span><span class="hl opt">;</span>
      <span class="hl kwa">end loop</span><span class="hl opt">;</span>

      <span class="hl kwa">if</span> Num_Bits_Set <span class="hl opt">&gt;</span> <span class="hl num">2</span> <span class="hl kwa">then</span>
         Slot_Modulus <span class="hl opt">:=</span> Num_Bits_Set <span class="hl opt">/</span> <span class="hl num">2</span><span class="hl opt">;</span>
      <span class="hl kwa">else</span>
         Slot_Modulus <span class="hl opt">:=</span> <span class="hl num">1</span><span class="hl opt">;</span>
      <span class="hl kwa">end if</span><span class="hl opt">;</span>
   <span class="hl kwa">end</span> Define_Affinities_By_Slot<span class="hl opt">;</span>


<span class="hl kwa">begin</span>
   <span class="hl kwa">for</span> K <span class="hl kwa">in</span> Affinities<span class="hl kwd">'Range</span> <span class="hl kwa">loop</span>
      Affinities <span class="hl opt">(</span>K<span class="hl opt">).</span>bits <span class="hl opt">:= (</span><span class="hl kwa">others</span> <span class="hl opt">=&gt;</span> <span class="hl kwd">False</span><span class="hl opt">);</span>
   <span class="hl kwa">end loop</span><span class="hl opt">;</span>
   Define_Affinities_By_Slot<span class="hl opt">;</span>
<span class="hl kwa">end</span> Chameneos<span class="hl opt">.</span>Processors<span class="hl opt">;</span>

<span class="hl slc">-------------------------------------------------------------------------------</span>

<span class="hl kwa">with</span> System<span class="hl opt">.</span>Machine_Code<span class="hl opt">;</span>  <span class="hl kwa">use</span> System<span class="hl opt">.</span>Machine_Code<span class="hl opt">;</span>

<span class="hl kwa">package body</span> x86_Atomic_Swap_Utils <span class="hl kwa">is</span>

   <span class="hl slc">-------------------------------</span>
   <span class="hl slc">-- Sync_Val_Compare_And_Swap --</span>
   <span class="hl slc">-------------------------------</span>

   <span class="hl kwa">function</span> Sync_Val_Compare_And_Swap
     <span class="hl opt">(</span>Destination <span class="hl opt">:</span> <span class="hl kwa">access</span> Unsigned_32<span class="hl opt">;</span>
      Comparand   <span class="hl opt">:</span> Unsigned_32<span class="hl opt">;</span>
      New_Value   <span class="hl opt">:</span> Unsigned_32<span class="hl opt">)</span>
      <span class="hl kwa">return</span> Unsigned_32
   <span class="hl kwa">is</span>
      Prior_Value <span class="hl opt">:</span> Unsigned_32<span class="hl opt">;</span>
      <span class="hl kwa">pragma</span> Suppress <span class="hl opt">(</span>All_Checks<span class="hl opt">);</span>
   <span class="hl kwa">begin</span>
      <span class="hl slc">--  %eax := Comparand</span>
      <span class="hl slc">--  if %eax = Destination.all then</span>
      <span class="hl slc">--     Destination.all := New_Value</span>
      <span class="hl slc">--  else</span>
      <span class="hl slc">--     %eax := Destination.all</span>
      <span class="hl slc">--  end if</span>
      Asm<span class="hl opt">(</span><span class="hl str">&quot;lock cmpxchg %1, %2;&quot;</span><span class="hl opt">,</span>
        Inputs  <span class="hl opt">=&gt; (</span>Unsigned_32<span class="hl kwd">'Asm_Input</span> <span class="hl opt">(</span><span class="hl str">&quot;r&quot;</span><span class="hl opt">,</span> New_Value<span class="hl opt">),</span>        <span class="hl slc">-- %1</span>
                    Unsigned_32<span class="hl kwd">'Asm_Input</span> <span class="hl opt">(</span><span class="hl str">&quot;m&quot;</span><span class="hl opt">,</span> Destination<span class="hl opt">.</span><span class="hl kwa">all</span><span class="hl opt">),</span>  <span class="hl slc">-- %2</span>
                    Unsigned_32<span class="hl kwd">'Asm_Input</span> <span class="hl opt">(</span><span class="hl str">&quot;a&quot;</span><span class="hl opt">,</span> Comparand<span class="hl opt">)),</span>
        Outputs <span class="hl opt">=&gt; (</span>Unsigned_32<span class="hl kwd">'Asm_Output</span> <span class="hl opt">(</span><span class="hl str">&quot;=a&quot;</span><span class="hl opt">,</span> Prior_Value<span class="hl opt">)),</span>   <span class="hl slc">-- %0</span>
        Clobber <span class="hl opt">=&gt;</span> <span class="hl str">&quot;memory, cc&quot;</span><span class="hl opt">,</span>
        Volatile <span class="hl opt">=&gt;</span> <span class="hl kwd">True</span><span class="hl opt">);</span>
      <span class="hl slc">--  return %eax</span>
      <span class="hl kwa">return</span> Prior_Value<span class="hl opt">;</span>
   <span class="hl kwa">end</span> Sync_Val_Compare_And_Swap<span class="hl opt">;</span>

<span class="hl kwa">end</span> x86_Atomic_Swap_Utils<span class="hl opt">;</span>
