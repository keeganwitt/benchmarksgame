<span class="hl com">{-</span>
<span class="hl com">The Computer Language Benchmarks Game</span>
<span class="hl com">http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">contributed by Louis Wasserman</span>
<span class="hl com">-}</span>

<span class="hl kwd">import</span> Control<span class="hl opt">.</span>Monad
<span class="hl kwd">import</span> Foreign
<span class="hl kwd">import</span> Data<span class="hl opt">.</span>ByteString<span class="hl opt">.</span>Internal
<span class="hl kwd">import</span> System<span class="hl opt">.</span><span class="hl kwb">IO</span>

<span class="hl kwd">data</span> Buf <span class="hl opt">=</span> Buf <span class="hl opt">!</span><span class="hl kwb">Int</span> <span class="hl opt">!</span><span class="hl kwb">Int</span> <span class="hl opt">!(</span>Ptr Word8<span class="hl opt">)</span> 

withBuf run <span class="hl opt">=</span> run <span class="hl opt">.</span> Buf <span class="hl num">0</span> ini <span class="hl opt">=&lt;&lt;</span> mallocBytes ini
  <span class="hl kwd">where</span> ini <span class="hl opt">=</span> <span class="hl num">1024</span>

newSize len sz
  | len <span class="hl opt">&lt;=</span> sz  <span class="hl opt">=</span> sz
  | <span class="hl kwc">otherwise</span>  <span class="hl opt">=</span> newSize len <span class="hl opt">(</span><span class="hl num">2</span> <span class="hl opt">*</span> sz<span class="hl opt">)</span>

<span class="hl com">{-# INLINE putBuf #-}</span>
putBuf pS lS <span class="hl opt">(</span>Buf lD szD pD<span class="hl opt">)</span> run
  | lD<span class="hl opt">' &gt;</span> szD  <span class="hl opt">=</span> <span class="hl kwd">do</span>
    <span class="hl kwd">let</span> szD<span class="hl opt">' =</span> newSize lD<span class="hl opt">'</span> szD
    pD<span class="hl opt">' &lt;-</span> reallocBytes pD szD<span class="hl opt">'</span>
    copyArray <span class="hl opt">(</span>pD<span class="hl opt">' +*</span> lD<span class="hl opt">)</span> pS lS
    run <span class="hl opt">(</span>Buf lD<span class="hl opt">'</span> szD<span class="hl opt">'</span> pD<span class="hl opt">')</span>
  | <span class="hl kwc">otherwise</span>  <span class="hl opt">=</span> <span class="hl kwd">do</span>
    copyArray <span class="hl opt">(</span>pD <span class="hl opt">+*</span> lD<span class="hl opt">)</span> pS lS
    run <span class="hl opt">(</span>Buf lD<span class="hl opt">'</span> szD pD<span class="hl opt">)</span>
  <span class="hl kwd">where</span> lD<span class="hl opt">' =</span> lD <span class="hl opt">+</span> lS

findChar p n c zero one <span class="hl opt">=</span> <span class="hl kwd">do</span>
    q <span class="hl opt">&lt;-</span> memchr p c <span class="hl opt">(</span><span class="hl kwc">fromIntegral</span> <span class="hl opt">(</span>n <span class="hl opt">::</span> <span class="hl kwb">Int</span><span class="hl opt">))</span>
    <span class="hl kwd">if</span> q <span class="hl opt">==</span> nullPtr <span class="hl kwd">then</span> zero <span class="hl kwd">else</span> one <span class="hl opt">$!</span> q `minusPtr` p

clearBuf <span class="hl opt">(</span>Buf _ lB pB<span class="hl opt">) =</span> Buf <span class="hl num">0</span> lB pB

main <span class="hl opt">=</span> allocaArray <span class="hl num">82</span> <span class="hl opt">$ \</span> line <span class="hl opt">-&gt;</span>
  <span class="hl kwd">let</span> go <span class="hl opt">!</span>buf <span class="hl opt">=</span> <span class="hl kwd">do</span>
      <span class="hl opt">!</span>m <span class="hl opt">&lt;-</span> hGetBuf <span class="hl kwc">stdin</span> line <span class="hl num">82</span>
      <span class="hl kwd">if</span> m <span class="hl opt">==</span> <span class="hl num">0</span> <span class="hl kwd">then</span> revcomp buf <span class="hl kwd">else do</span>
        findChar line m <span class="hl opt">(</span>c2w <span class="hl opt">'&gt;')</span> 
          <span class="hl opt">(</span>putBuf line m buf go<span class="hl opt">)</span>
          <span class="hl opt">(\</span> end <span class="hl opt">-&gt;</span> <span class="hl kwd">do</span>
            putBuf line end buf revcomp
            putBuf <span class="hl opt">(</span>line <span class="hl opt">+*</span> end<span class="hl opt">) (</span>m <span class="hl opt">-</span> end<span class="hl opt">) (</span>clearBuf buf<span class="hl opt">)</span>
              go<span class="hl opt">)</span>
    <span class="hl kwd">in</span> withBuf go

<span class="hl opt">(+*) =</span> advancePtr

<span class="hl com">{-# INLINE comps #-}</span>
comps <span class="hl opt">=</span> Prelude<span class="hl opt">.</span><span class="hl kwc">zipWith</span> <span class="hl opt">(\</span> a b <span class="hl opt">-&gt; (</span><span class="hl kwc">fromEnum</span> a<span class="hl opt">,</span> c2w b<span class="hl opt">))</span> <span class="hl str">&quot;AaCcGgTtUuMmRrYyKkVvHhDdBb&quot;</span> 
  <span class="hl str">&quot;TTGGCCAAAAKKYYRRMMBBDDHHVV&quot;</span>

ca <span class="hl opt">::</span> Ptr Word8
ca <span class="hl opt">=</span> inlinePerformIO <span class="hl opt">$</span> <span class="hl kwd">do</span>
       <span class="hl opt">!</span>a <span class="hl opt">&lt;-</span> mallocArray <span class="hl num">200</span>
       <span class="hl kwc">mapM_</span> <span class="hl opt">(\</span> i <span class="hl opt">-&gt;</span> pokeByteOff a <span class="hl opt">(</span><span class="hl kwc">fromIntegral</span> i<span class="hl opt">)</span> i <span class="hl opt">) [</span><span class="hl num">0</span><span class="hl opt">.</span><span class="hl num">.199</span><span class="hl opt">::</span>Word8<span class="hl opt">]</span>
       <span class="hl kwc">mapM_</span> <span class="hl opt">(</span><span class="hl kwc">uncurry</span> <span class="hl opt">(</span>pokeByteOff a<span class="hl opt">))</span> comps
       <span class="hl kwc">return</span> a

revcomp <span class="hl opt">(</span>Buf lBuf _ pBuf<span class="hl opt">) =</span> <span class="hl kwc">when</span> <span class="hl opt">(</span>lBuf <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">) $</span> ca `<span class="hl kwc">seq</span>`
  findChar pBuf lBuf <span class="hl opt">(</span>c2w <span class="hl opt">'</span><span class="hl esc">\n</span><span class="hl opt">')</span> <span class="hl kwc">undefined</span> <span class="hl opt">$ \</span> begin <span class="hl opt">-&gt;</span> <span class="hl kwd">let</span>
    begin<span class="hl opt">' =</span> begin <span class="hl opt">+</span> <span class="hl num">1</span>
    rc <span class="hl opt">::</span> Ptr Word8 <span class="hl opt">-&gt;</span> Ptr Word8 <span class="hl opt">-&gt;</span> <span class="hl kwb">IO</span> <span class="hl opt">()</span>
    rc <span class="hl opt">!</span>i <span class="hl opt">!</span>j | i <span class="hl opt">&lt;</span> j <span class="hl opt">=</span> <span class="hl kwd">do</span>
      x <span class="hl opt">&lt;-</span> peek i
      <span class="hl kwd">if</span> x <span class="hl opt">==</span> c2w <span class="hl opt">'</span><span class="hl esc">\n</span><span class="hl opt">'</span> <span class="hl kwd">then let</span> <span class="hl opt">!</span>i<span class="hl opt">' =</span> i <span class="hl opt">+*</span> <span class="hl num">1</span> <span class="hl kwd">in</span> rc1 j i<span class="hl opt">' =&lt;&lt;</span> peek i<span class="hl opt">'</span>
        <span class="hl kwd">else</span> rc1 j i x
    rc i j <span class="hl opt">=</span> <span class="hl kwc">when</span> <span class="hl opt">(</span>i <span class="hl opt">==</span> j<span class="hl opt">) (</span>poke i <span class="hl opt">=&lt;&lt;</span> comp <span class="hl opt">=&lt;&lt;</span> peek i<span class="hl opt">)</span>
    
    rc1 <span class="hl opt">!</span>j <span class="hl opt">!</span>i <span class="hl opt">!</span>xi <span class="hl opt">=</span> <span class="hl kwd">do</span>
      y <span class="hl opt">&lt;-</span> peek j
      <span class="hl kwd">if</span> y <span class="hl opt">==</span> c2w <span class="hl opt">'</span><span class="hl esc">\n</span><span class="hl opt">'</span> <span class="hl kwd">then let</span> <span class="hl opt">!</span>j<span class="hl opt">' =</span> j <span class="hl opt">+* (-</span><span class="hl num">1</span><span class="hl opt">)</span> <span class="hl kwd">in</span> rc2 i xi j<span class="hl opt">' =&lt;&lt;</span> peek j<span class="hl opt">'</span>
        <span class="hl kwd">else</span> rc2 i xi j y
    
    comp <span class="hl opt">=</span> peekElemOff ca <span class="hl opt">.</span> <span class="hl kwc">fromIntegral</span>
    
    rc2 <span class="hl opt">!</span>i <span class="hl opt">!</span>xi <span class="hl opt">!</span>j <span class="hl opt">!</span>xj <span class="hl opt">=</span> <span class="hl kwd">do</span>
      poke j <span class="hl opt">=&lt;&lt;</span> comp xi
      poke i <span class="hl opt">=&lt;&lt;</span> comp xj
      rc <span class="hl opt">(</span>i <span class="hl opt">+*</span> <span class="hl num">1</span><span class="hl opt">) (</span>j <span class="hl opt">+* (-</span><span class="hl num">1</span><span class="hl opt">))</span>
    <span class="hl kwd">in do</span>
      hPutBuf <span class="hl kwc">stdout</span> pBuf begin<span class="hl opt">'</span>
      rc <span class="hl opt">(</span>pBuf <span class="hl opt">+*</span> begin<span class="hl opt">') (</span>pBuf <span class="hl opt">+* (</span>lBuf <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">))</span>
      hPutBuf <span class="hl kwc">stdout</span> <span class="hl opt">(</span>pBuf <span class="hl opt">+*</span> begin<span class="hl opt">') (</span>lBuf <span class="hl opt">-</span> begin <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">)</span>
