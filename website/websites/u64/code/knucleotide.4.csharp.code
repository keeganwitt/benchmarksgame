<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * byte processing, C# 3.0 idioms, frame level paralellism by Robert F. Tobler</span>
<span class="hl com"> */</span>

<span class="hl kwa">using</span> System<span class="hl opt">;</span>
<span class="hl kwa">using</span> System<span class="hl opt">.</span>IO<span class="hl opt">;</span>
<span class="hl kwa">using</span> System<span class="hl opt">.</span>Collections<span class="hl opt">.</span>Generic<span class="hl opt">;</span>
<span class="hl kwa">using</span> System<span class="hl opt">.</span>Linq<span class="hl opt">;</span>
<span class="hl kwa">using</span> System<span class="hl opt">.</span>Text<span class="hl opt">;</span>
<span class="hl kwa">using</span> System<span class="hl opt">.</span>Threading<span class="hl opt">;</span>

<span class="hl kwa">public</span> <span class="hl kwb">struct</span> ByteString <span class="hl opt">:</span> IEquatable<span class="hl opt">&lt;</span>ByteString<span class="hl opt">&gt;</span>
<span class="hl opt">{</span>
    <span class="hl kwa">public</span> <span class="hl kwb">byte</span><span class="hl opt">[]</span> Array<span class="hl opt">;</span>
    <span class="hl kwa">public</span> <span class="hl kwb">int</span> Start<span class="hl opt">;</span>
    <span class="hl kwa">public</span> <span class="hl kwb">int</span> Length<span class="hl opt">;</span>

    <span class="hl kwa">public</span> <span class="hl kwd">ByteString</span><span class="hl opt">(</span><span class="hl kwb">byte</span><span class="hl opt">[]</span> array<span class="hl opt">,</span> <span class="hl kwb">int</span> start<span class="hl opt">,</span> <span class="hl kwb">int</span> length<span class="hl opt">)</span>
    <span class="hl opt">{</span>
        Array <span class="hl opt">=</span> array<span class="hl opt">;</span> Start <span class="hl opt">=</span> start<span class="hl opt">;</span> Length <span class="hl opt">=</span> length<span class="hl opt">;</span>
    <span class="hl opt">}</span>
    
    <span class="hl kwa">public</span> <span class="hl kwd">ByteString</span><span class="hl opt">(</span><span class="hl kwb">string</span> text<span class="hl opt">)</span>
    <span class="hl opt">{</span>
        Start <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> Length <span class="hl opt">=</span> text<span class="hl opt">.</span>Length<span class="hl opt">;</span>
        Array <span class="hl opt">=</span> Encoding<span class="hl opt">.</span>ASCII<span class="hl opt">.</span><span class="hl kwd">GetBytes</span><span class="hl opt">(</span>text<span class="hl opt">);</span>
    <span class="hl opt">}</span>
    
    <span class="hl kwa">public override</span> <span class="hl kwb">int</span> <span class="hl kwd">GetHashCode</span><span class="hl opt">()</span>
    <span class="hl opt">{</span>
        <span class="hl kwb">int</span> hc <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
        <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> Length<span class="hl opt">;</span> i<span class="hl opt">++)</span>
            hc <span class="hl opt">=</span> hc <span class="hl opt">*</span> <span class="hl num">31</span> <span class="hl opt">+</span> Array<span class="hl opt">[</span>Start <span class="hl opt">+</span> i<span class="hl opt">];</span>
        <span class="hl kwa">return</span> hc<span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">public</span> <span class="hl kwb">bool</span> <span class="hl kwd">Equals</span><span class="hl opt">(</span>ByteString other<span class="hl opt">)</span>
    <span class="hl opt">{</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>Length <span class="hl opt">!=</span> other<span class="hl opt">.</span>Length<span class="hl opt">)</span> <span class="hl kwa">return false</span><span class="hl opt">;</span>
        <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> Length<span class="hl opt">;</span> i<span class="hl opt">++)</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>Array<span class="hl opt">[</span>Start<span class="hl opt">+</span>i<span class="hl opt">] !=</span> other<span class="hl opt">.</span>Array<span class="hl opt">[</span>other<span class="hl opt">.</span>Start<span class="hl opt">+</span>i<span class="hl opt">])</span> <span class="hl kwa">return false</span><span class="hl opt">;</span>
        <span class="hl kwa">return true</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>
    
    <span class="hl kwa">public override</span> <span class="hl kwb">string</span> <span class="hl kwd">ToString</span><span class="hl opt">()</span>
    <span class="hl opt">{</span>
        <span class="hl kwa">return</span> Encoding<span class="hl opt">.</span>ASCII<span class="hl opt">.</span><span class="hl kwd">GetString</span><span class="hl opt">(</span>Array<span class="hl opt">,</span> Start<span class="hl opt">,</span> Length<span class="hl opt">);</span>
    <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl kwa">public static class</span> Extensions
<span class="hl opt">{</span>
    <span class="hl kwa">public static</span> <span class="hl kwb">byte</span><span class="hl opt">[]</span> <span class="hl kwd">GetBytes</span><span class="hl opt">(</span><span class="hl kwa">this</span> List<span class="hl opt">&lt;</span><span class="hl kwb">string</span><span class="hl opt">&gt;</span> lines<span class="hl opt">)</span>
    <span class="hl opt">{</span>
        <span class="hl kwb">int</span> count <span class="hl opt">=</span> lines<span class="hl opt">.</span><span class="hl kwd">Aggregate</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">, (</span>cnt<span class="hl opt">,</span> str<span class="hl opt">) =&gt;</span> cnt <span class="hl opt">+</span> str<span class="hl opt">.</span>Length<span class="hl opt">);</span>
        var array <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwb">byte</span><span class="hl opt">[</span>count<span class="hl opt">];</span>
        lines<span class="hl opt">.</span><span class="hl kwd">Aggregate</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">, (</span>pos<span class="hl opt">,</span> str<span class="hl opt">) =&gt; {</span>
                Encoding<span class="hl opt">.</span>ASCII<span class="hl opt">.</span><span class="hl kwd">GetBytes</span><span class="hl opt">(</span>str<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> str<span class="hl opt">.</span>Length<span class="hl opt">,</span> array<span class="hl opt">,</span> pos<span class="hl opt">);</span>
                <span class="hl kwa">return</span> pos <span class="hl opt">+</span> str<span class="hl opt">.</span> Length<span class="hl opt">;</span>
            <span class="hl opt">});</span>
        <span class="hl kwa">return</span> array<span class="hl opt">;</span>
    <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl kwa">public class</span> Program
<span class="hl opt">{</span>
    <span class="hl kwa">public static</span> <span class="hl kwb">int</span> TaskCount<span class="hl opt">;</span>
    <span class="hl kwa">public static</span> <span class="hl kwb">int</span> Current <span class="hl opt">= -</span><span class="hl num">1</span><span class="hl opt">;</span>
    <span class="hl kwa">public static</span> KNucleotide<span class="hl opt">[]</span> kna<span class="hl opt">;</span>

    <span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">Main</span><span class="hl opt">(</span><span class="hl kwb">string</span><span class="hl opt">[]</span> args<span class="hl opt">) {</span>
        <span class="hl kwb">string</span> line<span class="hl opt">;</span>
        StreamReader source <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">StreamReader</span><span class="hl opt">(</span>Console<span class="hl opt">.</span><span class="hl kwd">OpenStandardInput</span><span class="hl opt">());</span>
        var input <span class="hl opt">=</span> <span class="hl kwa">new</span> List<span class="hl opt">&lt;</span><span class="hl kwb">string</span><span class="hl opt">&gt;();</span>
    
        <span class="hl kwa">while</span> <span class="hl opt">( (</span>line <span class="hl opt">=</span> source<span class="hl opt">.</span><span class="hl kwd">ReadLine</span><span class="hl opt">() ) !=</span> <span class="hl kwa">null</span> <span class="hl opt">)</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>line<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] ==</span> <span class="hl str">'&gt;'</span> <span class="hl opt">&amp;&amp;</span> line<span class="hl opt">.</span><span class="hl kwd">Substring</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">5</span><span class="hl opt">) ==</span> <span class="hl str">&quot;THREE&quot;</span><span class="hl opt">)</span>
                <span class="hl kwa">break</span><span class="hl opt">;</span>
    
        <span class="hl kwa">while</span> <span class="hl opt">( (</span>line <span class="hl opt">=</span> source<span class="hl opt">.</span><span class="hl kwd">ReadLine</span><span class="hl opt">()) !=</span> <span class="hl kwa">null</span> <span class="hl opt">) {</span>
            <span class="hl kwb">char</span> c <span class="hl opt">=</span> line<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">];</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>c <span class="hl opt">==</span> <span class="hl str">'&gt;'</span><span class="hl opt">)</span> <span class="hl kwa">break</span><span class="hl opt">;</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>c <span class="hl opt">!=</span> <span class="hl str">';'</span><span class="hl opt">)</span> input<span class="hl opt">.</span><span class="hl kwd">Add</span><span class="hl opt">(</span>line<span class="hl opt">.</span><span class="hl kwd">ToUpper</span><span class="hl opt">());</span>
        <span class="hl opt">}</span>
    
        var lengths <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl opt">[] {</span> <span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">2</span><span class="hl opt">,</span> <span class="hl num">3</span><span class="hl opt">,</span> <span class="hl num">4</span><span class="hl opt">,</span> <span class="hl num">6</span><span class="hl opt">,</span> <span class="hl num">12</span><span class="hl opt">,</span> <span class="hl num">18</span> <span class="hl opt">};</span>
        
        TaskCount <span class="hl opt">=</span> lengths<span class="hl opt">.</span><span class="hl kwd">Aggregate</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">, (</span>cnt<span class="hl opt">,</span> len<span class="hl opt">) =&gt;</span> cnt <span class="hl opt">+</span> len<span class="hl opt">);</span>
        kna <span class="hl opt">=</span> <span class="hl kwa">new</span> KNucleotide<span class="hl opt">[</span>TaskCount<span class="hl opt">];</span>

        var bytes <span class="hl opt">=</span> input<span class="hl opt">.</span><span class="hl kwd">GetBytes</span><span class="hl opt">();</span>        
        lengths<span class="hl opt">.</span><span class="hl kwd">Aggregate</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">, (</span>cnt<span class="hl opt">,</span> len<span class="hl opt">) =&gt;</span> 
            <span class="hl opt">{</span>
                <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> len<span class="hl opt">;</span> i<span class="hl opt">++)</span>
                    kna<span class="hl opt">[</span>cnt <span class="hl opt">+</span> i<span class="hl opt">] =</span> <span class="hl kwa">new</span> <span class="hl kwd">KNucleotide</span><span class="hl opt">(</span>bytes<span class="hl opt">,</span> len<span class="hl opt">,</span> i<span class="hl opt">);</span> 
                <span class="hl kwa">return</span> cnt <span class="hl opt">+</span> len<span class="hl opt">;</span>
            <span class="hl opt">});</span>

        var threads <span class="hl opt">=</span> <span class="hl kwa">new</span> Thread<span class="hl opt">[</span>Environment<span class="hl opt">.</span>ProcessorCount<span class="hl opt">];</span>
        <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> threads<span class="hl opt">.</span>Length<span class="hl opt">;</span> i<span class="hl opt">++)</span>
            <span class="hl opt">(</span>threads<span class="hl opt">[</span>i<span class="hl opt">] =</span> <span class="hl kwa">new</span> <span class="hl kwd">Thread</span><span class="hl opt">(</span>CountFrequencies<span class="hl opt">)).</span><span class="hl kwd">Start</span><span class="hl opt">();</span>

        <span class="hl kwa">foreach</span> <span class="hl opt">(</span>var t <span class="hl kwa">in</span> threads<span class="hl opt">)</span>
            t<span class="hl opt">.</span><span class="hl kwd">Join</span><span class="hl opt">();</span>

        var seqs <span class="hl opt">=</span> <span class="hl kwa">new</span><span class="hl opt">[] {</span> <span class="hl kwa">null</span><span class="hl opt">,</span> <span class="hl kwa">null</span><span class="hl opt">,</span>
                <span class="hl str">&quot;GGT&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;GGTA&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;GGTATT&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;GGTATTTTAATT&quot;</span><span class="hl opt">,</span>
                <span class="hl str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="hl opt">};</span>

        <span class="hl kwb">int</span> index <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
        lengths<span class="hl opt">.</span><span class="hl kwd">Aggregate</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">, (</span>cnt<span class="hl opt">,</span> len<span class="hl opt">) =&gt;</span>
            <span class="hl opt">{</span>
                <span class="hl kwa">if</span> <span class="hl opt">(</span>len <span class="hl opt">&lt;</span> <span class="hl num">3</span><span class="hl opt">)</span>
                <span class="hl opt">{</span>
                    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> len<span class="hl opt">;</span> i<span class="hl opt">++)</span>
                        kna<span class="hl opt">[</span>cnt<span class="hl opt">].</span><span class="hl kwd">AddFrequencies</span><span class="hl opt">(</span>kna<span class="hl opt">[</span>cnt<span class="hl opt">+</span>i<span class="hl opt">]);</span>
                    kna<span class="hl opt">[</span>cnt<span class="hl opt">].</span><span class="hl kwd">WriteFrequencies</span><span class="hl opt">();</span>                    
                <span class="hl opt">}</span>
                <span class="hl kwa">else</span>
                <span class="hl opt">{</span>
                    var fragment <span class="hl opt">=</span> seqs<span class="hl opt">[</span>index<span class="hl opt">];</span>
                    <span class="hl kwb">int</span> freq <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
                    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> len<span class="hl opt">;</span> i<span class="hl opt">++)</span>
                        freq <span class="hl opt">+=</span> kna<span class="hl opt">[</span>cnt <span class="hl opt">+</span> i<span class="hl opt">].</span><span class="hl kwd">GetCount</span><span class="hl opt">(</span>fragment<span class="hl opt">);</span>
                    Console<span class="hl opt">.</span><span class="hl kwd">WriteLine</span><span class="hl opt">(</span><span class="hl str">&quot;{0}</span><span class="hl esc">\t</span><span class="hl str">{1}&quot;</span><span class="hl opt">,</span> freq<span class="hl opt">,</span> fragment<span class="hl opt">);</span>
                <span class="hl opt">}</span>
                index<span class="hl opt">++;</span>
                <span class="hl kwa">return</span> cnt <span class="hl opt">+</span> len<span class="hl opt">;</span>
            <span class="hl opt">});</span>
    <span class="hl opt">}</span>
    
    <span class="hl kwa">static</span> <span class="hl kwb">void</span> <span class="hl kwd">CountFrequencies</span><span class="hl opt">()</span>
    <span class="hl opt">{</span>
        <span class="hl kwb">int</span> index<span class="hl opt">;</span>
        <span class="hl kwa">while</span> <span class="hl opt">((</span>index <span class="hl opt">=</span> Interlocked<span class="hl opt">.</span><span class="hl kwd">Increment</span><span class="hl opt">(</span><span class="hl kwa">ref</span> Current<span class="hl opt">)) &lt;</span> TaskCount<span class="hl opt">)</span>
            kna<span class="hl opt">[</span>index<span class="hl opt">].</span><span class="hl kwd">KFrequency</span><span class="hl opt">();</span>
    <span class="hl opt">}</span>
    
<span class="hl opt">}</span>

<span class="hl kwa">public class</span> KNucleotide <span class="hl opt">{</span>

    <span class="hl kwa">private class</span> Count <span class="hl opt">{</span>
       <span class="hl kwa">public</span> <span class="hl kwb">int</span> V<span class="hl opt">;</span>
       <span class="hl kwa">public</span> <span class="hl kwd">Count</span><span class="hl opt">(</span><span class="hl kwb">int</span> v<span class="hl opt">) {</span> V <span class="hl opt">=</span> v<span class="hl opt">; }</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">private</span> Dictionary<span class="hl opt">&lt;</span>ByteString<span class="hl opt">,</span> Count<span class="hl opt">&gt;</span> frequencies
        <span class="hl opt">=</span> <span class="hl kwa">new</span> Dictionary<span class="hl opt">&lt;</span>ByteString<span class="hl opt">,</span> Count<span class="hl opt">&gt;();</span>
    <span class="hl kwa">private</span> <span class="hl kwb">byte</span><span class="hl opt">[]</span> sequence<span class="hl opt">;</span>
    <span class="hl kwb">int</span> length<span class="hl opt">;</span>
    <span class="hl kwb">int</span> frame<span class="hl opt">;</span>

    <span class="hl kwa">public</span> <span class="hl kwd">KNucleotide</span><span class="hl opt">(</span><span class="hl kwb">byte</span><span class="hl opt">[]</span> s<span class="hl opt">,</span> <span class="hl kwb">int</span> l<span class="hl opt">,</span> <span class="hl kwb">int</span> f<span class="hl opt">)</span>
    <span class="hl opt">{</span>   
        sequence <span class="hl opt">=</span> s<span class="hl opt">;</span> length <span class="hl opt">=</span> l<span class="hl opt">;</span> frame <span class="hl opt">=</span> f<span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">public</span> <span class="hl kwb">void</span> <span class="hl kwd">AddFrequencies</span><span class="hl opt">(</span>KNucleotide other<span class="hl opt">)</span>
    <span class="hl opt">{</span>
        <span class="hl kwa">foreach</span><span class="hl opt">(</span>var kvp <span class="hl kwa">in</span> other<span class="hl opt">.</span>frequencies<span class="hl opt">)</span>            
        <span class="hl opt">{</span>
            Count count<span class="hl opt">;</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>frequencies<span class="hl opt">.</span><span class="hl kwd">TryGetValue</span><span class="hl opt">(</span>kvp<span class="hl opt">.</span>Key<span class="hl opt">,</span> out count<span class="hl opt">))</span>
                count<span class="hl opt">.</span>V <span class="hl opt">+=</span> kvp<span class="hl opt">.</span>Value<span class="hl opt">.</span>V<span class="hl opt">;</span>
            <span class="hl kwa">else</span>
                frequencies<span class="hl opt">[</span>kvp<span class="hl opt">.</span>Key<span class="hl opt">] =</span> kvp<span class="hl opt">.</span>Value<span class="hl opt">;</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">public</span> <span class="hl kwb">void</span> <span class="hl kwd">WriteFrequencies</span><span class="hl opt">() {</span>
        var items <span class="hl opt">=</span> <span class="hl kwa">new</span> List<span class="hl opt">&lt;</span>KeyValuePair<span class="hl opt">&lt;</span>ByteString<span class="hl opt">,</span> Count<span class="hl opt">&gt;&gt;(</span>frequencies<span class="hl opt">);</span>
        items<span class="hl opt">.</span><span class="hl kwd">Sort</span><span class="hl opt">(</span>SortByFrequencyAndCode<span class="hl opt">);</span>    
        <span class="hl kwb">double</span> percent <span class="hl opt">=</span> <span class="hl num">100.0</span> <span class="hl opt">/ (</span>sequence<span class="hl opt">.</span>Length <span class="hl opt">-</span> length <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">);</span>
        <span class="hl kwa">foreach</span> <span class="hl opt">(</span>var item <span class="hl kwa">in</span> items<span class="hl opt">)</span>
            Console<span class="hl opt">.</span><span class="hl kwd">WriteLine</span><span class="hl opt">(</span><span class="hl str">&quot;{0} {1:f3}&quot;</span><span class="hl opt">,</span>
                        item<span class="hl opt">.</span>Key<span class="hl opt">.</span><span class="hl kwd">ToString</span><span class="hl opt">(),</span> item<span class="hl opt">.</span>Value<span class="hl opt">.</span>V <span class="hl opt">*</span> percent<span class="hl opt">);</span>
        Console<span class="hl opt">.</span><span class="hl kwd">WriteLine</span><span class="hl opt">();</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">public</span> <span class="hl kwb">int</span> <span class="hl kwd">GetCount</span><span class="hl opt">(</span><span class="hl kwb">string</span> fragment<span class="hl opt">) {</span>
        Count count<span class="hl opt">;</span>
        <span class="hl kwa">if</span> <span class="hl opt">(!</span>frequencies<span class="hl opt">.</span><span class="hl kwd">TryGetValue</span><span class="hl opt">(</span><span class="hl kwa">new</span> <span class="hl kwd">ByteString</span><span class="hl opt">(</span>fragment<span class="hl opt">),</span> out count<span class="hl opt">))</span>
            count <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Count</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">);</span>
        <span class="hl kwa">return</span> count<span class="hl opt">.</span>V<span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">public</span> <span class="hl kwb">void</span> <span class="hl kwd">KFrequency</span><span class="hl opt">() {</span>
        <span class="hl kwb">int</span> n <span class="hl opt">=</span> sequence<span class="hl opt">.</span>Length <span class="hl opt">-</span> length <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span>
        <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> frame<span class="hl opt">;</span> i <span class="hl opt">&lt;</span> n<span class="hl opt">;</span> i <span class="hl opt">+=</span> length<span class="hl opt">) {</span>
            var key <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">ByteString</span><span class="hl opt">(</span>sequence<span class="hl opt">,</span> i<span class="hl opt">,</span> length<span class="hl opt">);</span>
            Count count<span class="hl opt">;</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>frequencies<span class="hl opt">.</span><span class="hl kwd">TryGetValue</span><span class="hl opt">(</span>key<span class="hl opt">,</span> out count<span class="hl opt">))</span>
                count<span class="hl opt">.</span>V<span class="hl opt">++;</span>
            <span class="hl kwa">else</span>
                frequencies<span class="hl opt">[</span>key<span class="hl opt">] =</span> <span class="hl kwa">new</span> <span class="hl kwd">Count</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">);</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span>

    <span class="hl kwb">int</span> <span class="hl kwd">SortByFrequencyAndCode</span><span class="hl opt">(</span>
            KeyValuePair<span class="hl opt">&lt;</span>ByteString<span class="hl opt">,</span> Count<span class="hl opt">&gt;</span> i0<span class="hl opt">,</span>
            KeyValuePair<span class="hl opt">&lt;</span>ByteString<span class="hl opt">,</span> Count<span class="hl opt">&gt;</span> i1<span class="hl opt">) {</span>
        <span class="hl kwb">int</span> order <span class="hl opt">=</span> i1<span class="hl opt">.</span>Value<span class="hl opt">.</span>V<span class="hl opt">.</span><span class="hl kwd">CompareTo</span><span class="hl opt">(</span>i0<span class="hl opt">.</span>Value<span class="hl opt">.</span>V<span class="hl opt">);</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>order <span class="hl opt">!=</span> <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">return</span> order<span class="hl opt">;</span>
        <span class="hl kwa">return</span> i0<span class="hl opt">.</span>Key<span class="hl opt">.</span><span class="hl kwd">ToString</span><span class="hl opt">().</span><span class="hl kwd">CompareTo</span><span class="hl opt">(</span>i1<span class="hl opt">.</span>Key<span class="hl opt">.</span><span class="hl kwd">ToString</span><span class="hl opt">());</span>
    <span class="hl opt">}</span>
<span class="hl opt">}</span>
