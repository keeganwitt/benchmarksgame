<span class="hl opt">#</span>lang racket<span class="hl opt">/</span>base

<span class="hl slc">;;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;;; http://benchmarksgame.alioth.debian.org/</span>

<span class="hl slc">;;; contributed by Matthew Flatt</span>

<span class="hl slc">;; Uses Racket threads</span>

<span class="hl opt">(</span><span class="hl kwa">require</span> racket<span class="hl opt">/</span>cmdline<span class="hl opt">)</span>

<span class="hl slc">;; Each thread runs this loop:</span>
<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">run</span> id next<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">([</span>v <span class="hl opt">(</span><span class="hl kwa">thread-receive</span><span class="hl opt">)])</span>
    <span class="hl opt">(</span><span class="hl kwa">cond</span>
     <span class="hl opt">[(</span><span class="hl kwa">zero</span>? v<span class="hl opt">)</span> <span class="hl slc">;; Done</span>
      <span class="hl opt">(</span><span class="hl kwa">printf</span> <span class="hl str">&quot;~a</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> id<span class="hl opt">)</span>
      <span class="hl opt">(</span><span class="hl kwa">exit</span><span class="hl opt">)]</span>
     <span class="hl opt">[</span>else <span class="hl slc">;; Keep going</span>
      <span class="hl opt">(</span><span class="hl kwa">thread-send</span> next <span class="hl opt">(</span><span class="hl kwa">sub1</span> v<span class="hl opt">))</span>
      <span class="hl opt">(</span><span class="hl kwa">run</span> id next<span class="hl opt">)])))</span>
                       

<span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">([</span>n <span class="hl opt">(</span><span class="hl kwa">command-line</span> <span class="hl opt">#:</span>args <span class="hl opt">(</span><span class="hl kwa">n</span><span class="hl opt">) (</span><span class="hl kwa">string-</span><span class="hl opt">&gt;</span>number n<span class="hl opt">))])</span>
  <span class="hl slc">;; The original thread is #503. Create the rest:</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">([</span>t1 <span class="hl opt">(</span><span class="hl kwa">for</span><span class="hl opt">/</span>fold <span class="hl opt">([</span>next <span class="hl opt">(</span><span class="hl kwa">current-thread</span><span class="hl opt">)])</span>
                      <span class="hl opt">([</span>id <span class="hl opt">(</span><span class="hl kwa">in-range</span> <span class="hl num">502 0</span> -<span class="hl num">1</span><span class="hl opt">)])</span>
              <span class="hl opt">(</span><span class="hl kwa">thread</span> <span class="hl opt">(</span><span class="hl kwa">lambda</span> <span class="hl opt">() (</span><span class="hl kwa">run</span> id next<span class="hl opt">))))])</span>
    <span class="hl slc">;; Start:</span>
    <span class="hl opt">(</span><span class="hl kwa">thread-send</span> t1 n<span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl kwa">run</span> <span class="hl num">503</span> t1<span class="hl opt">)))</span>
