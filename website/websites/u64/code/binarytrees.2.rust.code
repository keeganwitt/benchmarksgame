<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * contributed by Brian Anderson</span>
<span class="hl com"> */</span>

use std<span class="hl opt">;</span>
import std<span class="hl opt">::</span>arena<span class="hl opt">;</span>
import methods <span class="hl opt">=</span> std<span class="hl opt">::</span>arena<span class="hl opt">::</span>arena<span class="hl opt">;</span>

<span class="hl kwb">enum</span> tree<span class="hl opt">/&amp; {</span> nil<span class="hl opt">,</span> <span class="hl kwd">node</span><span class="hl opt">(&amp;</span>tree<span class="hl opt">, &amp;</span>tree<span class="hl opt">,</span> <span class="hl kwb">int</span><span class="hl opt">), }</span>

fn <span class="hl kwd">item_check</span><span class="hl opt">(</span>t<span class="hl opt">: &amp;</span>tree<span class="hl opt">) -&gt;</span> <span class="hl kwb">int</span> <span class="hl opt">{</span>
   alt <span class="hl opt">*</span>t <span class="hl opt">{</span>
     nil <span class="hl opt">{</span> ret <span class="hl num">0</span><span class="hl opt">; }</span>
     <span class="hl kwd">node</span><span class="hl opt">(</span>left<span class="hl opt">,</span> right<span class="hl opt">,</span> item<span class="hl opt">) {</span>
      ret item <span class="hl opt">+</span> <span class="hl kwd">item_check</span><span class="hl opt">(</span>left<span class="hl opt">) -</span> <span class="hl kwd">item_check</span><span class="hl opt">(</span>right<span class="hl opt">);</span>
     <span class="hl opt">}</span>
   <span class="hl opt">}</span>
<span class="hl opt">}</span>

fn <span class="hl kwd">bottom_up_tree</span><span class="hl opt">(</span>arena<span class="hl opt">: &amp;</span>a<span class="hl opt">.</span>arena<span class="hl opt">::</span>arena<span class="hl opt">,</span> item<span class="hl opt">:</span> <span class="hl kwb">int</span><span class="hl opt">,</span> depth<span class="hl opt">:</span> <span class="hl kwb">int</span><span class="hl opt">) -&gt; &amp;</span>a<span class="hl opt">.</span>tree <span class="hl opt">{</span>
   <span class="hl kwa">if</span> depth <span class="hl opt">&gt;</span> <span class="hl num">0</span> <span class="hl opt">{</span>
      ret <span class="hl kwa">new</span><span class="hl opt">(*</span>arena<span class="hl opt">)</span> <span class="hl kwd">node</span><span class="hl opt">(</span><span class="hl kwd">bottom_up_tree</span><span class="hl opt">(</span>arena<span class="hl opt">,</span> <span class="hl num">2</span> <span class="hl opt">*</span> item <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">,</span> depth <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">),</span>
                      <span class="hl kwd">bottom_up_tree</span><span class="hl opt">(</span>arena<span class="hl opt">,</span> <span class="hl num">2</span> <span class="hl opt">*</span> item<span class="hl opt">,</span> depth <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">),</span>
                      item<span class="hl opt">);</span>
   <span class="hl opt">}</span>
   ret <span class="hl kwa">new</span><span class="hl opt">(*</span>arena<span class="hl opt">)</span> nil<span class="hl opt">;</span>
<span class="hl opt">}</span>

fn <span class="hl kwd">main</span><span class="hl opt">(</span>args<span class="hl opt">: ~[</span>str<span class="hl opt">]) {</span>
   let n <span class="hl opt">=</span> <span class="hl kwb">int</span><span class="hl opt">::</span><span class="hl kwd">from_str</span><span class="hl opt">(</span>args<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">]).</span><span class="hl kwd">get</span><span class="hl opt">();</span>
   let min_depth <span class="hl opt">=</span> <span class="hl num">4</span><span class="hl opt">;</span>
   let mut max_depth<span class="hl opt">;</span>
   <span class="hl kwa">if</span> min_depth <span class="hl opt">+</span> <span class="hl num">2</span> <span class="hl opt">&gt;</span> n <span class="hl opt">{</span>
      max_depth <span class="hl opt">=</span> min_depth <span class="hl opt">+</span> <span class="hl num">2</span><span class="hl opt">;</span>
   <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
      max_depth <span class="hl opt">=</span> n<span class="hl opt">;</span>
   <span class="hl opt">}</span>

   let stretch_arena <span class="hl opt">=</span> arena<span class="hl opt">::</span><span class="hl kwd">arena</span><span class="hl opt">();</span>
   let stretch_depth <span class="hl opt">=</span> max_depth <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span>
   let stretch_tree <span class="hl opt">=</span> <span class="hl kwd">bottom_up_tree</span><span class="hl opt">(&amp;</span>stretch_arena<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> stretch_depth<span class="hl opt">);</span>

   io<span class="hl opt">::</span><span class="hl kwd">println</span><span class="hl opt">(</span><span class="hl ppc">#fmt(</span><span class="hl pps">&quot;stretch tree of depth %d</span><span class="hl esc">\t</span> <span class="hl pps">check: %d&quot;</span><span class="hl ppc">,</span>
                    stretch_depth<span class="hl opt">,</span>
                    <span class="hl kwd">item_check</span><span class="hl opt">(</span>stretch_tree<span class="hl opt">)));</span>

   let long_lived_arena <span class="hl opt">=</span> arena<span class="hl opt">::</span><span class="hl kwd">arena</span><span class="hl opt">();</span>
   let long_lived_tree <span class="hl opt">=</span> <span class="hl kwd">bottom_up_tree</span><span class="hl opt">(&amp;</span>long_lived_arena<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> max_depth<span class="hl opt">);</span>
   let mut depth <span class="hl opt">=</span> min_depth<span class="hl opt">;</span>
   <span class="hl kwa">while</span> depth <span class="hl opt">&lt;=</span> max_depth <span class="hl opt">{</span>
      let iterations <span class="hl opt">=</span> <span class="hl kwb">int</span><span class="hl opt">::</span><span class="hl kwd">pow</span><span class="hl opt">(</span><span class="hl num">2</span><span class="hl opt">, (</span>max_depth <span class="hl opt">-</span> depth <span class="hl opt">+</span> min_depth<span class="hl opt">)</span> as uint<span class="hl opt">);</span>
      let mut chk <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
      let mut i <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span>
      <span class="hl kwa">while</span> i <span class="hl opt">&lt;=</span> iterations <span class="hl opt">{</span>
         let mut temp_tree <span class="hl opt">=</span> <span class="hl kwd">bottom_up_tree</span><span class="hl opt">(&amp;</span>long_lived_arena<span class="hl opt">,</span> i<span class="hl opt">,</span> depth<span class="hl opt">);</span>
         chk <span class="hl opt">+=</span> <span class="hl kwd">item_check</span><span class="hl opt">(</span>temp_tree<span class="hl opt">);</span>
         temp_tree <span class="hl opt">=</span> <span class="hl kwd">bottom_up_tree</span><span class="hl opt">(&amp;</span>long_lived_arena<span class="hl opt">, -</span>i<span class="hl opt">,</span> depth<span class="hl opt">);</span>
         chk <span class="hl opt">+=</span> <span class="hl kwd">item_check</span><span class="hl opt">(</span>temp_tree<span class="hl opt">);</span>
         i <span class="hl opt">+=</span> <span class="hl num">1</span><span class="hl opt">;</span>
      <span class="hl opt">}</span>
      io<span class="hl opt">::</span><span class="hl kwd">println</span><span class="hl opt">(</span><span class="hl ppc">#fmt(</span><span class="hl pps">&quot;%d</span><span class="hl esc">\t</span> <span class="hl pps">trees of depth %d</span><span class="hl esc">\t</span> <span class="hl pps">check: %d&quot;</span><span class="hl ppc">,</span>
                   iterations <span class="hl opt">*</span> <span class="hl num">2</span><span class="hl opt">,</span> depth<span class="hl opt">,</span>
                   chk<span class="hl opt">));</span>
      depth <span class="hl opt">+=</span> <span class="hl num">2</span><span class="hl opt">;</span>
   <span class="hl opt">}</span>
   io<span class="hl opt">::</span><span class="hl kwd">println</span><span class="hl opt">(</span><span class="hl ppc">#fmt(</span><span class="hl pps">&quot;long lived tree of depth %d</span><span class="hl esc">\t</span> <span class="hl pps">check: %d&quot;</span><span class="hl ppc">,</span>
                max_depth<span class="hl opt">,</span>
                    <span class="hl kwd">item_check</span><span class="hl opt">(</span>long_lived_tree<span class="hl opt">)));</span>
<span class="hl opt">}</span>
