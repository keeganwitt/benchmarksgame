<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> * </span>
<span class="hl com"> * contributed by Stefan Krause</span>
<span class="hl com"> * slightly modified by Chad Whipkey</span>
<span class="hl com"> * parallelized by Colin D Bennett 2008-10-04</span>
<span class="hl com"> * reduce synchronization cost by The Anh Tran</span>
<span class="hl com"> * optimizations and refactoring by Enotus 2010-11-11</span>
<span class="hl com"> */</span>
 

<span class="hl kwa">import</span> java<span class="hl sym">.</span>io<span class="hl sym">.*;</span>
<span class="hl kwa">import</span> java<span class="hl sym">.</span>util<span class="hl sym">.</span>concurrent<span class="hl sym">.</span>atomic<span class="hl sym">.</span><span class="hl kwc">AtomicInteger</span><span class="hl sym">;</span>

<span class="hl kwa">public final class</span> mandelbrot <span class="hl sym">{</span>
    <span class="hl kwa">static</span> <span class="hl kwb">byte</span><span class="hl sym">[][]</span> out<span class="hl sym">;</span>
    <span class="hl kwa">static</span> <span class="hl kwc">AtomicInteger</span> yCt<span class="hl sym">;</span>
    <span class="hl kwa">static</span> <span class="hl kwb">double</span><span class="hl sym">[]</span> Crb<span class="hl sym">;</span>
    <span class="hl kwa">static</span> <span class="hl kwb">double</span><span class="hl sym">[]</span> Cib<span class="hl sym">;</span>

    <span class="hl kwa">static</span> <span class="hl kwb">int</span> <span class="hl kwd">getByte</span><span class="hl sym">(</span><span class="hl kwb">int</span> x<span class="hl sym">,</span> <span class="hl kwb">int</span> y<span class="hl sym">){</span>
        <span class="hl kwb">double</span> Ci<span class="hl sym">=</span>Cib<span class="hl sym">[</span>y<span class="hl sym">];</span>
        <span class="hl kwb">int</span> res<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span>
        <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span>i<span class="hl sym">&lt;</span><span class="hl num">8</span><span class="hl sym">;</span>i<span class="hl sym">+=</span><span class="hl num">2</span><span class="hl sym">){</span>
            <span class="hl kwb">double</span> Zr1<span class="hl sym">=</span>Crb<span class="hl sym">[</span>x<span class="hl sym">+</span>i<span class="hl sym">];</span>
            <span class="hl kwb">double</span> Zi1<span class="hl sym">=</span>Cib<span class="hl sym">[</span>y<span class="hl sym">];</span>

            <span class="hl kwb">double</span> Zr2<span class="hl sym">=</span>Crb<span class="hl sym">[</span>x<span class="hl sym">+</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">];</span>
            <span class="hl kwb">double</span> Zi2<span class="hl sym">=</span>Cib<span class="hl sym">[</span>y<span class="hl sym">];</span>

            <span class="hl kwb">int</span> b<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span>
            <span class="hl kwb">int</span> j<span class="hl sym">=</span><span class="hl num">49</span><span class="hl sym">;</span><span class="hl kwa">do</span><span class="hl sym">{</span>
                <span class="hl kwb">double</span> nZr1<span class="hl sym">=</span>Zr1<span class="hl sym">*</span>Zr1<span class="hl sym">-</span>Zi1<span class="hl sym">*</span>Zi1<span class="hl sym">+</span>Crb<span class="hl sym">[</span>x<span class="hl sym">+</span>i<span class="hl sym">];</span>
                <span class="hl kwb">double</span> nZi1<span class="hl sym">=</span>Zr1<span class="hl sym">*</span>Zi1<span class="hl sym">+</span>Zr1<span class="hl sym">*</span>Zi1<span class="hl sym">+</span>Cib<span class="hl sym">[</span>y<span class="hl sym">];</span>
                Zr1<span class="hl sym">=</span>nZr1<span class="hl sym">;</span>Zi1<span class="hl sym">=</span>nZi1<span class="hl sym">;</span>

                <span class="hl kwb">double</span> nZr2<span class="hl sym">=</span>Zr2<span class="hl sym">*</span>Zr2<span class="hl sym">-</span>Zi2<span class="hl sym">*</span>Zi2<span class="hl sym">+</span>Crb<span class="hl sym">[</span>x<span class="hl sym">+</span>i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">];</span>
                <span class="hl kwb">double</span> nZi2<span class="hl sym">=</span>Zr2<span class="hl sym">*</span>Zi2<span class="hl sym">+</span>Zr2<span class="hl sym">*</span>Zi2<span class="hl sym">+</span>Cib<span class="hl sym">[</span>y<span class="hl sym">];</span>
                Zr2<span class="hl sym">=</span>nZr2<span class="hl sym">;</span>Zi2<span class="hl sym">=</span>nZi2<span class="hl sym">;</span>

                <span class="hl kwa">if</span><span class="hl sym">(</span>Zr1<span class="hl sym">*</span>Zr1<span class="hl sym">+</span>Zi1<span class="hl sym">*</span>Zi1<span class="hl sym">&gt;</span><span class="hl num">4</span><span class="hl sym">)</span> b<span class="hl sym">|=</span><span class="hl num">2</span><span class="hl sym">;</span>
                <span class="hl kwa">if</span><span class="hl sym">(</span>Zr2<span class="hl sym">*</span>Zr2<span class="hl sym">+</span>Zi2<span class="hl sym">*</span>Zi2<span class="hl sym">&gt;</span><span class="hl num">4</span><span class="hl sym">)</span> b<span class="hl sym">|=</span><span class="hl num">1</span><span class="hl sym">;</span>
                <span class="hl kwa">if</span><span class="hl sym">(</span>b<span class="hl sym">==</span><span class="hl num">3</span><span class="hl sym">)</span> <span class="hl kwa">break</span><span class="hl sym">;</span>
            <span class="hl sym">}</span><span class="hl kwa">while</span><span class="hl sym">(--</span>j<span class="hl sym">&gt;</span><span class="hl num">0</span><span class="hl sym">);</span>
            res<span class="hl sym">=(</span>res<span class="hl sym">&lt;&lt;</span><span class="hl num">2</span><span class="hl sym">)+</span>b<span class="hl sym">;</span>
        <span class="hl sym">}</span>
        <span class="hl kwa">return</span> res^<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">;</span>
    <span class="hl sym">}</span>
    
    <span class="hl kwa">static</span> <span class="hl kwb">void</span> <span class="hl kwd">putLine</span><span class="hl sym">(</span><span class="hl kwb">int</span> y<span class="hl sym">,</span> <span class="hl kwb">byte</span><span class="hl sym">[]</span> line<span class="hl sym">){</span>
        <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> xb<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> xb<span class="hl sym">&lt;</span>line<span class="hl sym">.</span>length<span class="hl sym">;</span> xb<span class="hl sym">++)</span>
            line<span class="hl sym">[</span>xb<span class="hl sym">]=(</span><span class="hl kwb">byte</span><span class="hl sym">)</span><span class="hl kwd">getByte</span><span class="hl sym">(</span>xb<span class="hl sym">*</span><span class="hl num">8</span><span class="hl sym">,</span>y<span class="hl sym">);</span>
    <span class="hl sym">}</span>
 
    <span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwc">String</span><span class="hl sym">[]</span> args<span class="hl sym">)</span> <span class="hl kwa">throws</span> <span class="hl kwc">Exception</span> <span class="hl sym">{</span>
        <span class="hl kwb">int</span> N<span class="hl sym">=</span><span class="hl num">6000</span><span class="hl sym">;</span>
        <span class="hl kwa">if</span> <span class="hl sym">(</span>args<span class="hl sym">.</span>length<span class="hl sym">&gt;=</span><span class="hl num">1</span><span class="hl sym">)</span> N<span class="hl sym">=</span><span class="hl kwc">Integer</span><span class="hl sym">.</span><span class="hl kwd">parseInt</span><span class="hl sym">(</span>args<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]);</span>

        Crb<span class="hl sym">=</span><span class="hl kwa">new</span> <span class="hl kwb">double</span><span class="hl sym">[</span>N<span class="hl sym">+</span><span class="hl num">7</span><span class="hl sym">];</span> Cib<span class="hl sym">=</span><span class="hl kwa">new</span> <span class="hl kwb">double</span><span class="hl sym">[</span>N<span class="hl sym">+</span><span class="hl num">7</span><span class="hl sym">];</span>
        <span class="hl kwb">double</span> invN<span class="hl sym">=</span><span class="hl num">2.0</span><span class="hl sym">/</span>N<span class="hl sym">;</span> <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span>i<span class="hl sym">&lt;</span>N<span class="hl sym">;</span>i<span class="hl sym">++){</span> Cib<span class="hl sym">[</span>i<span class="hl sym">]=</span>i<span class="hl sym">*</span>invN<span class="hl sym">-</span><span class="hl num">1.0</span><span class="hl sym">;</span> Crb<span class="hl sym">[</span>i<span class="hl sym">]=</span>i<span class="hl sym">*</span>invN<span class="hl sym">-</span><span class="hl num">1.5</span><span class="hl sym">; }</span>
        yCt<span class="hl sym">=</span><span class="hl kwa">new</span> <span class="hl kwc">AtomicInteger</span><span class="hl sym">();</span>
        out<span class="hl sym">=</span><span class="hl kwa">new</span> <span class="hl kwb">byte</span><span class="hl sym">[</span>N<span class="hl sym">][(</span>N<span class="hl sym">+</span><span class="hl num">7</span><span class="hl sym">)/</span><span class="hl num">8</span><span class="hl sym">];</span>

        <span class="hl kwc">Thread</span><span class="hl sym">[]</span> pool<span class="hl sym">=</span><span class="hl kwa">new</span> <span class="hl kwc">Thread</span><span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">*</span><span class="hl kwc">Runtime</span><span class="hl sym">.</span><span class="hl kwd">getRuntime</span><span class="hl sym">().</span><span class="hl kwd">availableProcessors</span><span class="hl sym">()];</span>
        <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span>i<span class="hl sym">&lt;</span>pool<span class="hl sym">.</span>length<span class="hl sym">;</span>i<span class="hl sym">++)</span>
            pool<span class="hl sym">[</span>i<span class="hl sym">]=</span><span class="hl kwa">new</span> <span class="hl kwc">Thread</span><span class="hl sym">(){</span>
                <span class="hl kwa">public</span> <span class="hl kwb">void</span> <span class="hl kwd">run</span><span class="hl sym">() {</span>
                     <span class="hl kwb">int</span> y<span class="hl sym">;</span> <span class="hl kwa">while</span><span class="hl sym">((</span>y<span class="hl sym">=</span>yCt<span class="hl sym">.</span><span class="hl kwd">getAndIncrement</span><span class="hl sym">())&lt;</span>out<span class="hl sym">.</span>length<span class="hl sym">)</span> <span class="hl kwd">putLine</span><span class="hl sym">(</span>y<span class="hl sym">,</span>out<span class="hl sym">[</span>y<span class="hl sym">]);</span>
                <span class="hl sym">}</span>
            <span class="hl sym">};</span>
        <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwc">Thread</span> t<span class="hl sym">:</span>pool<span class="hl sym">)</span> t<span class="hl sym">.</span><span class="hl kwd">start</span><span class="hl sym">();</span>
        <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwc">Thread</span> t<span class="hl sym">:</span>pool<span class="hl sym">)</span> t<span class="hl sym">.</span><span class="hl kwd">join</span><span class="hl sym">();</span>

        <span class="hl kwc">OutputStream</span> stream <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">BufferedOutputStream</span><span class="hl sym">(</span><span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">);</span>
        stream<span class="hl sym">.</span><span class="hl kwd">write</span><span class="hl sym">((</span><span class="hl str">&quot;P4</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">+</span>N<span class="hl sym">+</span><span class="hl str">&quot; &quot;</span><span class="hl sym">+</span>N<span class="hl sym">+</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">).</span><span class="hl kwd">getBytes</span><span class="hl sym">());</span>
        <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span>i<span class="hl sym">&lt;</span>N<span class="hl sym">;</span>i<span class="hl sym">++)</span> stream<span class="hl sym">.</span><span class="hl kwd">write</span><span class="hl sym">(</span>out<span class="hl sym">[</span>i<span class="hl sym">]);</span>
        stream<span class="hl sym">.</span><span class="hl kwd">close</span><span class="hl sym">();</span>
    <span class="hl sym">}</span>
<span class="hl sym">}</span>

