<span class="hl slc">; The Computer Language Benchmarks Game</span>
<span class="hl slc">; http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">;</span>
<span class="hl slc">; contributed by Kenneth Jonsson</span>
<span class="hl slc">;</span>
<span class="hl slc">; Each chameneos is its own agent and the agent state contains number</span>
<span class="hl slc">; of meetings, number of meetings with self and current color.</span>
<span class="hl slc">; The meeting point is implemented as a agent, where the state</span>
<span class="hl slc">; contains, among other things, number of meetings left to do.</span>
<span class="hl slc">;</span>
<span class="hl slc">; Build with</span>
<span class="hl slc">; $ java -Dclojure.compile.path=. -cp ${CLASSPATH} clojure.lang.Compile chameneosredux</span>
<span class="hl slc">;</span>
<span class="hl slc">; run with</span>
<span class="hl slc">; $ java -server -XX:+TieredCompilation -XX:+AggressiveOpts -cp ${CLASSPATH} chameneosredux 6000000</span>
<span class="hl slc">;</span>
<span class="hl slc">; where ${CLASSPATH} includes the current directory and the jar files</span>
<span class="hl slc">; for clojure core and clojure contrib</span>
<span class="hl slc">;</span>

<span class="hl opt">(</span><span class="hl kwa">ns</span> chameneosredux <span class="hl opt">(:</span>gen-class<span class="hl opt">))</span>

<span class="hl opt">(</span><span class="hl kwa">defn</span> num-<span class="hl opt">&gt;</span>spell-out-str <span class="hl opt">[</span>n<span class="hl opt">]</span>
  <span class="hl str">&quot;Converts a number to a string, ex 123 -&gt;</span> <span class="hl esc">\&quot;</span> <span class="hl str">one two three</span><span class="hl esc">\&quot;</span><span class="hl str">&quot;</span>
  <span class="hl opt">(</span><span class="hl kwa">reduce</span> <span class="hl opt">(</span><span class="hl kwa">fn</span> <span class="hl opt">[</span>s i<span class="hl opt">] (</span><span class="hl kwa">str</span> s <span class="hl str">&quot; &quot;</span> <span class="hl opt">(</span><span class="hl kwa">condp</span> <span class="hl opt">=</span> i
                                        \<span class="hl num">0</span> <span class="hl str">&quot;zero&quot;</span>
                                        \<span class="hl num">1</span> <span class="hl str">&quot;one&quot;</span>
                                        \<span class="hl num">2</span> <span class="hl str">&quot;two&quot;</span>
                                        \<span class="hl num">3</span> <span class="hl str">&quot;three&quot;</span>
                                        \<span class="hl num">4</span> <span class="hl str">&quot;four&quot;</span>
                                        \<span class="hl num">5</span> <span class="hl str">&quot;five&quot;</span>
                                        \<span class="hl num">6</span> <span class="hl str">&quot;six&quot;</span>
                                        \<span class="hl num">7</span> <span class="hl str">&quot;seven&quot;</span>
                                        \<span class="hl num">8</span> <span class="hl str">&quot;eight&quot;</span>
                                        \<span class="hl num">9</span> <span class="hl str">&quot;nine&quot;</span><span class="hl opt">)))</span>
          <span class="hl str">&quot;&quot;</span>
          <span class="hl opt">(</span><span class="hl kwa">pr-str</span> n<span class="hl opt">)))</span>

<span class="hl slc">; Colors are defined as a map containing a string representation of</span>
<span class="hl slc">; the color and a function that knows how to complement itself with</span>
<span class="hl slc">; another color.</span>
<span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">*</span>blue<span class="hl opt">* *</span>red<span class="hl opt">* *</span>yellow<span class="hl opt">*)</span>
<span class="hl opt">(</span><span class="hl kwa">def</span> <span class="hl opt">*</span>blue<span class="hl opt">*   {:</span>complement <span class="hl opt">#(</span><span class="hl kwa">condp</span> <span class="hl opt">=</span> %
                             <span class="hl opt">*</span>red<span class="hl opt">*    *</span>yellow<span class="hl opt">*</span>
                             <span class="hl opt">*</span>yellow<span class="hl opt">* *</span>red<span class="hl opt">*</span>
                             <span class="hl opt">*</span>blue<span class="hl opt">*   *</span>blue<span class="hl opt">*)</span>
               <span class="hl opt">:</span>str <span class="hl str">&quot;blue&quot;</span><span class="hl opt">})</span>
<span class="hl opt">(</span><span class="hl kwa">def</span> <span class="hl opt">*</span>red<span class="hl opt">*    {:</span>complement <span class="hl opt">#(</span><span class="hl kwa">condp</span> <span class="hl opt">=</span> %
                             <span class="hl opt">*</span>blue<span class="hl opt">*   *</span>yellow<span class="hl opt">*</span>
                             <span class="hl opt">*</span>yellow<span class="hl opt">* *</span>blue<span class="hl opt">*</span>
                             <span class="hl opt">*</span>red<span class="hl opt">*    *</span>red<span class="hl opt">*)</span>
               <span class="hl opt">:</span>str <span class="hl str">&quot;red&quot;</span><span class="hl opt">})</span>
<span class="hl opt">(</span><span class="hl kwa">def</span> <span class="hl opt">*</span>yellow<span class="hl opt">* {:</span>complement <span class="hl opt">#(</span><span class="hl kwa">condp</span> <span class="hl opt">=</span> %
                             <span class="hl opt">*</span>red<span class="hl opt">*    *</span>blue<span class="hl opt">*</span>
                             <span class="hl opt">*</span>blue<span class="hl opt">*   *</span>red<span class="hl opt">*</span>
                             <span class="hl opt">*</span>yellow<span class="hl opt">* *</span>yellow<span class="hl opt">*)</span>
               <span class="hl opt">:</span>str <span class="hl str">&quot;yellow&quot;</span><span class="hl opt">})</span>

<span class="hl opt">(</span><span class="hl kwa">defn</span> print-color-table <span class="hl opt">[]</span>
  <span class="hl str">&quot;Prints all possible color conversions to stdout&quot;</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">[</span>colors <span class="hl opt">[*</span>blue<span class="hl opt">* *</span>red<span class="hl opt">* *</span>yellow<span class="hl opt">*] ]</span>
    <span class="hl opt">(</span><span class="hl kwa">doseq</span> <span class="hl opt">[</span>colPair <span class="hl opt">(</span><span class="hl kwa">for</span> <span class="hl opt">[</span>x colors y colors<span class="hl opt">] [</span>x y<span class="hl opt">])]</span>
      <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">[[</span>col1 col2<span class="hl opt">]</span> colPair
	    new-col <span class="hl opt">((:</span>complement col1<span class="hl opt">)</span> col2<span class="hl opt">)]</span>
        <span class="hl opt">(</span><span class="hl kwa">println</span> <span class="hl opt">(:</span>str col1<span class="hl opt">)</span> <span class="hl str">&quot;+&quot;</span> <span class="hl opt">(:</span>str col2<span class="hl opt">)</span> <span class="hl str">&quot;-&gt;&quot;</span> <span class="hl opt">(:</span>str new-col<span class="hl opt">)))))</span>
  <span class="hl opt">(</span><span class="hl kwa">println</span><span class="hl opt">))</span>


<span class="hl slc">; Agent that prints the result, used to restore order between games</span>
<span class="hl slc">; running simultanious. Results will be printed in the order they</span>
<span class="hl slc">; where started with \&quot;run-game\&quot;.</span>
<span class="hl opt">(</span><span class="hl kwa">def</span> <span class="hl opt">*</span>in-order<span class="hl opt">* (</span><span class="hl kwa">agent</span> <span class="hl opt">{:</span>id <span class="hl num">1</span><span class="hl opt">}))</span>

<span class="hl opt">(</span><span class="hl kwa">defn</span> print-result <span class="hl opt">[</span>s result<span class="hl opt">]</span>
  <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">nil</span>? result<span class="hl opt">)</span>
    s
    <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">[[</span>id colors creatures<span class="hl opt">]</span> result<span class="hl opt">]</span>
      <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(&lt; (:</span>id s<span class="hl opt">)</span> id<span class="hl opt">)</span>
        <span class="hl opt">(</span><span class="hl kwa">assoc</span> s <span class="hl opt">:</span>results <span class="hl opt">(</span><span class="hl kwa">sort</span> <span class="hl opt">(</span><span class="hl kwa">conj</span> <span class="hl opt">(:</span>results s<span class="hl opt">)</span> result<span class="hl opt">)))</span>
        <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">nil</span>? creatures<span class="hl opt">)</span>
          <span class="hl slc">; No more games are running, shutdown</span>
          <span class="hl opt">(</span><span class="hl kwa">shutdown-agents</span><span class="hl opt">)</span>
          <span class="hl opt">(</span><span class="hl kwa">do</span>
            <span class="hl slc">; Print starting colors</span>
            <span class="hl opt">(</span><span class="hl kwa">doseq</span> <span class="hl opt">[</span>col colors<span class="hl opt">]</span>
              <span class="hl opt">(</span><span class="hl kwa">print</span> <span class="hl str">&quot;&quot;</span> <span class="hl opt">(:</span>str col<span class="hl opt">)))</span>
            <span class="hl opt">(</span><span class="hl kwa">println</span><span class="hl opt">)</span>
            <span class="hl slc">; Print number of meetings done by each creature</span>
            <span class="hl opt">(</span><span class="hl kwa">doseq</span> <span class="hl opt">[</span>c creatures<span class="hl opt">]</span>
              <span class="hl opt">(</span><span class="hl kwa">println</span> <span class="hl opt">(</span><span class="hl kwa">str</span> <span class="hl opt">(:</span>meetings <span class="hl opt">&#64;</span>c<span class="hl opt">)</span>
                            <span class="hl opt">(</span><span class="hl kwa">num-</span><span class="hl opt">&gt;</span>spell-out-str <span class="hl opt">(:</span>met-self <span class="hl opt">&#64;</span>c<span class="hl opt">)))))</span>
            <span class="hl slc">; Spell out the total number of meetings.</span>
            <span class="hl opt">(</span><span class="hl kwa">println</span> <span class="hl opt">(</span><span class="hl kwa">num-</span><span class="hl opt">&gt;</span>spell-out-str <span class="hl opt">(</span><span class="hl kwa">reduce</span> <span class="hl opt">(</span><span class="hl kwa">fn</span> <span class="hl opt">[</span>sum c<span class="hl opt">]</span>
                                                   <span class="hl opt">(+</span> sum <span class="hl opt">(:</span>meetings <span class="hl opt">&#64;</span>c<span class="hl opt">)))</span>
                                                 <span class="hl num">0</span>
                                                 creatures<span class="hl opt">)))</span>
            <span class="hl opt">(</span><span class="hl kwa">println</span><span class="hl opt">)</span>
            <span class="hl slc">; Check if there are more results to print</span>
            <span class="hl opt">(</span><span class="hl kwa">recur</span> <span class="hl opt">(</span><span class="hl kwa">assoc</span> s
                     <span class="hl opt">:</span>id <span class="hl opt">(</span><span class="hl kwa">inc</span> <span class="hl opt">(:</span>id s<span class="hl opt">))</span>
                     <span class="hl opt">:</span>results <span class="hl opt">(</span><span class="hl kwa">rest</span> <span class="hl opt">(:</span>results s<span class="hl opt">)))</span>
                   <span class="hl opt">(</span><span class="hl kwa">first</span> <span class="hl opt">(:</span>results s<span class="hl opt">)))))))))</span>


<span class="hl slc">; Functions run in the context of the agent assigned to the meeting</span>
<span class="hl slc">; place, ; i.e. *agent* is the agent for the meeting place.</span>
<span class="hl opt">(</span><span class="hl kwa">declare</span> met-with<span class="hl opt">)</span>

<span class="hl opt">(</span><span class="hl kwa">defn</span> meet <span class="hl opt">[</span>m creature<span class="hl opt">]</span>
  <span class="hl str">&quot;Meeting place is either empty and the creature must wait or a</span>
<span class="hl str">   meeting takes place and the creatures leave&quot;</span>
  <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">zero</span>? <span class="hl opt">(:</span>meetings-left m<span class="hl opt">))</span>
    <span class="hl slc">; No more meetings left</span>
    m
    <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">nil</span>? <span class="hl opt">(:</span>waiting m<span class="hl opt">))</span>
      <span class="hl slc">; No other creature here, need to wait</span>
      <span class="hl opt">(</span><span class="hl kwa">assoc</span> m <span class="hl opt">:</span>waiting creature<span class="hl opt">)</span>
       <span class="hl slc">; Creature is here, lets meet. Each creature will update its</span>
       <span class="hl slc">; own state in the context of its agent</span>
      <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">[</span>new-ml <span class="hl opt">(</span><span class="hl kwa">dec</span> <span class="hl opt">(:</span>meetings-left m<span class="hl opt">))</span>
            waiting-creature <span class="hl opt">(:</span>waiting m<span class="hl opt">)]</span>
        <span class="hl opt">(</span><span class="hl kwa">send</span> creature
              met-with
              <span class="hl opt">(:</span>color <span class="hl opt">&#64;</span>waiting-creature<span class="hl opt">)</span>
              <span class="hl opt">(=</span> creature waiting-creature<span class="hl opt">)</span>
              <span class="hl opt">*</span>agent<span class="hl opt">*)</span>
        <span class="hl opt">(</span><span class="hl kwa">send</span> waiting-creature
              met-with
              <span class="hl opt">(:</span>color <span class="hl opt">&#64;</span>creature<span class="hl opt">)</span>
              <span class="hl opt">(=</span> creature waiting-creature<span class="hl opt">)</span>
              <span class="hl opt">*</span>agent<span class="hl opt">*)</span>
        <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">zero</span>? new-ml<span class="hl opt">)</span>
          <span class="hl slc">; We are done, schedule a print of the results</span>
          <span class="hl opt">(</span><span class="hl kwa">send</span> <span class="hl opt">*</span>in-order<span class="hl opt">*</span> print-result <span class="hl opt">[(:</span>id m<span class="hl opt">) (:</span>start-colors m<span class="hl opt">) (:</span>creatures m<span class="hl opt">)]))</span>
        <span class="hl opt">(</span><span class="hl kwa">assoc</span> m <span class="hl opt">:</span>meetings-left new-ml <span class="hl opt">:</span>waiting nil<span class="hl opt">)))))</span>


<span class="hl slc">; Functions run in the context of the agent assigned to each creature</span>
<span class="hl slc">; i.e. *agent* is the agent for a chameneos.</span>
<span class="hl opt">(</span><span class="hl kwa">defn</span> met-with <span class="hl opt">[</span>creature other-col met-self meeting-place<span class="hl opt">]</span>
  <span class="hl str">&quot;Switch color based on the color of the creature met&quot;</span>
  <span class="hl opt">(</span><span class="hl kwa">send</span> meeting-place meet <span class="hl opt">*</span>agent<span class="hl opt">*)</span>
  <span class="hl opt">{:</span>meetings <span class="hl opt">(</span><span class="hl kwa">inc</span> <span class="hl opt">(:</span>meetings creature<span class="hl opt">))</span>
   <span class="hl opt">:</span>color <span class="hl opt">((:</span>complement <span class="hl opt">(:</span>color creature<span class="hl opt">))</span> other-col<span class="hl opt">)</span>
   <span class="hl opt">:</span>met-self <span class="hl opt">(+ (:</span>met-self creature<span class="hl opt">) (</span><span class="hl kwa">if</span> met-self <span class="hl num">1 0</span><span class="hl opt">))})</span>


<span class="hl slc">; Functions run in the main thread</span>
<span class="hl opt">(</span><span class="hl kwa">def</span> <span class="hl opt">*</span>game-id<span class="hl opt">* (</span><span class="hl kwa">atom</span> <span class="hl num">0</span><span class="hl opt">))</span>

<span class="hl opt">(</span><span class="hl kwa">defn</span> run-game <span class="hl opt">[</span>n <span class="hl opt">&amp;</span> colors<span class="hl opt">]</span>
  <span class="hl str">&quot;Runs a single meeting game, each game has its own set of agents for</span>
<span class="hl str">   chameneos and the meeting place&quot;</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">[</span>creatures <span class="hl opt">(</span><span class="hl kwa">for</span> <span class="hl opt">[</span>col colors<span class="hl opt">] (</span><span class="hl kwa">agent</span> <span class="hl opt">{:</span>color col
                                            <span class="hl opt">:</span>meetings <span class="hl num">0</span>
                                            <span class="hl opt">:</span>met-self <span class="hl num">0</span><span class="hl opt">}))</span>
        meeting-place <span class="hl opt">(</span><span class="hl kwa">agent</span> <span class="hl opt">{:</span>id <span class="hl opt">(</span><span class="hl kwa">swap</span><span class="hl opt">! *</span>game-id<span class="hl opt">*</span> inc<span class="hl opt">)</span>
                              <span class="hl opt">:</span>start-colors colors
                              <span class="hl opt">:</span>creatures creatures
                              <span class="hl opt">:</span>meetings-left n<span class="hl opt">})]</span>
    <span class="hl opt">(</span><span class="hl kwa">doseq</span> <span class="hl opt">[</span>creature creatures<span class="hl opt">]</span>
      <span class="hl opt">(</span><span class="hl kwa">send</span> meeting-place meet creature<span class="hl opt">))))</span>

<span class="hl opt">(</span><span class="hl kwa">defn</span> no-more-games <span class="hl opt">[]</span>
  <span class="hl str">&quot;No more games will be run, this process will be terminated when all</span>
<span class="hl str">  games started with</span> <span class="hl esc">\&quot;</span><span class="hl str">run-game</span><span class="hl esc">\&quot;</span> <span class="hl str">has finished&quot;</span>
  <span class="hl opt">(</span><span class="hl kwa">send</span> <span class="hl opt">*</span>in-order<span class="hl opt">*</span> print-result <span class="hl opt">[(</span><span class="hl kwa">swap</span><span class="hl opt">! *</span>game-id<span class="hl opt">*</span> inc<span class="hl opt">)</span> nil nil<span class="hl opt">]))</span>

<span class="hl opt">(</span><span class="hl kwa">defn</span> -main <span class="hl opt">[&amp;</span> args<span class="hl opt">]</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">[</span>num-meetings <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">empty</span>? args<span class="hl opt">)</span>
                       <span class="hl num">0</span>
                       <span class="hl opt">(</span><span class="hl kwa">Integer</span><span class="hl opt">/</span>parseInt <span class="hl opt">(</span><span class="hl kwa">first</span> args<span class="hl opt">)))]</span>
    <span class="hl opt">(</span><span class="hl kwa">print-color-table</span><span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl kwa">run-game</span> num-meetings
	      <span class="hl opt">*</span>blue<span class="hl opt">* *</span>red<span class="hl opt">* *</span>yellow<span class="hl opt">*)</span>
    <span class="hl opt">(</span><span class="hl kwa">run-game</span> num-meetings
	      <span class="hl opt">*</span>blue<span class="hl opt">* *</span>red<span class="hl opt">* *</span>yellow<span class="hl opt">* *</span>red<span class="hl opt">* *</span>yellow<span class="hl opt">* *</span>blue<span class="hl opt">* *</span>red<span class="hl opt">*</span>
	      <span class="hl opt">*</span>yellow<span class="hl opt">* *</span>red<span class="hl opt">* *</span>blue<span class="hl opt">*)</span>
    <span class="hl opt">(</span><span class="hl kwa">no-more-games</span><span class="hl opt">)))</span>
