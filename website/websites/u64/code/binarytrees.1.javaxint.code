<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"> </span>
<span class="hl com">   contributed by Leonhard Holz</span>
<span class="hl com">   based on contribution by Jarkko Miettinen</span>
<span class="hl com">*/</span>

<span class="hl kwa">public class</span> binarytrees <span class="hl sym">{</span>

   <span class="hl kwa">private final static</span> <span class="hl kwb">int</span> minDepth <span class="hl sym">=</span> <span class="hl num">4</span><span class="hl sym">;</span>
   <span class="hl kwa">private final static</span> <span class="hl kwb">int</span> threadCount <span class="hl sym">=</span> <span class="hl kwc">Runtime</span><span class="hl sym">.</span><span class="hl kwd">getRuntime</span><span class="hl sym">().</span><span class="hl kwd">availableProcessors</span><span class="hl sym">() &gt;</span> <span class="hl num">1</span> ? <span class="hl num">2</span> <span class="hl sym">:</span> <span class="hl num">1</span><span class="hl sym">;</span>
   <span class="hl kwa">private final static</span> TreeGenerator<span class="hl sym">[]</span> threads <span class="hl sym">=</span> <span class="hl kwa">new</span> TreeGenerator<span class="hl sym">[</span>threadCount <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">];</span>
   
   <span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwc">String</span><span class="hl sym">[]</span> args<span class="hl sym">)</span>
   <span class="hl sym">{</span>
      <span class="hl kwb">int</span> n <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>args<span class="hl sym">.</span>length <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">)</span> n <span class="hl sym">=</span> <span class="hl kwc">Integer</span><span class="hl sym">.</span><span class="hl kwd">parseInt</span><span class="hl sym">(</span>args<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]);</span>
      <span class="hl kwb">int</span> maxDepth <span class="hl sym">= (</span>minDepth <span class="hl sym">+</span> <span class="hl num">2</span> <span class="hl sym">&gt;</span> n<span class="hl sym">)</span> ? minDepth <span class="hl sym">+</span> <span class="hl num">2</span> <span class="hl sym">:</span> n<span class="hl sym">;</span>

      <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> threadCount <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span> i<span class="hl sym">++) {</span>
         threads<span class="hl sym">[</span>i<span class="hl sym">] =</span> <span class="hl kwa">new</span> <span class="hl kwd">TreeGenerator</span><span class="hl sym">();</span>
         threads<span class="hl sym">[</span>i<span class="hl sym">].</span><span class="hl kwd">start</span><span class="hl sym">();</span>
      <span class="hl sym">}</span>
      
      TreeGenerator lastThread <span class="hl sym">=</span> threads<span class="hl sym">[</span>threadCount<span class="hl sym">];</span>
      lastThread<span class="hl sym">.</span>depth <span class="hl sym">=</span> maxDepth <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
      lastThread<span class="hl sym">.</span>run <span class="hl sym">=</span> true<span class="hl sym">;</span>
      <span class="hl kwa">try</span> <span class="hl sym">{</span>
         <span class="hl kwa">synchronized</span><span class="hl sym">(</span>lastThread<span class="hl sym">) {</span>
            lastThread<span class="hl sym">.</span><span class="hl kwd">notify</span><span class="hl sym">();</span>
            lastThread<span class="hl sym">.</span><span class="hl kwd">wait</span><span class="hl sym">();</span>
         <span class="hl sym">}</span>
      <span class="hl sym">}</span> <span class="hl kwa">catch</span> <span class="hl sym">(</span><span class="hl kwc">InterruptedException</span> e<span class="hl sym">) {}</span>

      <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">(</span><span class="hl str">&quot;stretch tree of depth &quot;</span> <span class="hl sym">+</span> lastThread<span class="hl sym">.</span>depth <span class="hl sym">+</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span> <span class="hl str">check: &quot;</span> <span class="hl sym">+</span> lastThread<span class="hl sym">.</span>result<span class="hl sym">);</span>

      lastThread<span class="hl sym">.</span>depth <span class="hl sym">=</span> maxDepth<span class="hl sym">;</span>
      lastThread<span class="hl sym">.</span>run <span class="hl sym">=</span> true<span class="hl sym">;</span>
      <span class="hl kwa">try</span> <span class="hl sym">{</span>
         <span class="hl kwa">synchronized</span><span class="hl sym">(</span>lastThread<span class="hl sym">) {</span>
            lastThread<span class="hl sym">.</span><span class="hl kwd">notify</span><span class="hl sym">();</span>
            lastThread<span class="hl sym">.</span><span class="hl kwd">wait</span><span class="hl sym">();</span>
         <span class="hl sym">}</span>
      <span class="hl sym">}</span> <span class="hl kwa">catch</span> <span class="hl sym">(</span><span class="hl kwc">InterruptedException</span> e<span class="hl sym">) {}</span>

      <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> depth <span class="hl sym">=</span> minDepth<span class="hl sym">;</span> depth <span class="hl sym">&lt;=</span> maxDepth<span class="hl sym">;</span> depth<span class="hl sym">+=</span><span class="hl num">2</span> <span class="hl sym">) {</span>

         <span class="hl kwb">int</span> check <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
         <span class="hl kwb">int</span> iterations <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl sym">&lt;&lt; (</span>maxDepth <span class="hl sym">-</span> depth <span class="hl sym">+</span> minDepth<span class="hl sym">);</span>
         <span class="hl kwb">int</span> length <span class="hl sym">=</span> iterations <span class="hl sym">/</span> threadCount<span class="hl sym">;</span>

         <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> threadCount<span class="hl sym">;</span> i<span class="hl sym">++)</span> <span class="hl kwa">synchronized</span><span class="hl sym">(</span>threads<span class="hl sym">[</span>i<span class="hl sym">]) {</span>
            threads<span class="hl sym">[</span>i<span class="hl sym">].</span>depth <span class="hl sym">=</span> depth<span class="hl sym">;</span>
            threads<span class="hl sym">[</span>i<span class="hl sym">].</span>start <span class="hl sym">=</span> i <span class="hl sym">*</span> length<span class="hl sym">;</span>
            threads<span class="hl sym">[</span>i<span class="hl sym">].</span>end <span class="hl sym">= (</span>i <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">) *</span> length<span class="hl sym">;</span>
            threads<span class="hl sym">[</span>i<span class="hl sym">].</span>run <span class="hl sym">=</span> true<span class="hl sym">;</span>
            threads<span class="hl sym">[</span>i<span class="hl sym">].</span><span class="hl kwd">notify</span><span class="hl sym">();</span>
         <span class="hl sym">}</span>
         <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> threadCount<span class="hl sym">;</span> i<span class="hl sym">++)</span> <span class="hl kwa">try</span> <span class="hl sym">{</span>
            <span class="hl kwa">synchronized</span><span class="hl sym">(</span>threads<span class="hl sym">[</span>i<span class="hl sym">]) {</span>
               <span class="hl kwa">if</span> <span class="hl sym">(</span>threads<span class="hl sym">[</span>i<span class="hl sym">].</span>run<span class="hl sym">)</span> threads<span class="hl sym">[</span>i<span class="hl sym">].</span><span class="hl kwd">wait</span><span class="hl sym">();</span>
            <span class="hl sym">}</span>
            check <span class="hl sym">+=</span> threads<span class="hl sym">[</span>i<span class="hl sym">].</span>result<span class="hl sym">;</span>
         <span class="hl sym">}</span> <span class="hl kwa">catch</span> <span class="hl sym">(</span><span class="hl kwc">InterruptedException</span> e<span class="hl sym">) {}</span>

         <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">((</span>iterations <span class="hl sym">*</span> <span class="hl num">2</span><span class="hl sym">) +</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span> <span class="hl str">trees of depth &quot;</span> <span class="hl sym">+</span> depth <span class="hl sym">+</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span> <span class="hl str">check: &quot;</span> <span class="hl sym">+</span> check<span class="hl sym">);</span>
      <span class="hl sym">}</span>

      <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">(</span><span class="hl str">&quot;long lived tree of depth &quot;</span> <span class="hl sym">+</span> maxDepth <span class="hl sym">+</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span> <span class="hl str">check: &quot;</span><span class="hl sym">+</span> lastThread<span class="hl sym">.</span>result<span class="hl sym">);</span>

      <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> threadCount <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span> i<span class="hl sym">++) {</span>
         threads<span class="hl sym">[</span>i<span class="hl sym">].</span>terminate <span class="hl sym">=</span> true<span class="hl sym">;</span>
         <span class="hl kwa">synchronized</span><span class="hl sym">(</span>threads<span class="hl sym">[</span>i<span class="hl sym">]) {</span>
            threads<span class="hl sym">[</span>i<span class="hl sym">].</span><span class="hl kwd">notify</span><span class="hl sym">();</span>
         <span class="hl sym">}</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">private static class</span> TreeGenerator <span class="hl kwa">extends</span> <span class="hl kwc">Thread</span>
   <span class="hl sym">{</span>
      <span class="hl kwa">private</span> <span class="hl kwb">boolean</span> run <span class="hl sym">=</span> false<span class="hl sym">;</span>
      <span class="hl kwa">private</span> <span class="hl kwb">boolean</span> terminate <span class="hl sym">=</span> false<span class="hl sym">;</span>

      <span class="hl kwa">private</span> <span class="hl kwb">int</span> start <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
      <span class="hl kwa">private</span> <span class="hl kwb">int</span> end <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
      <span class="hl kwa">private</span> <span class="hl kwb">int</span> result <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
      <span class="hl kwa">private</span> <span class="hl kwb">int</span> depth<span class="hl sym">;</span>
      
      <span class="hl kwa">private static</span> <span class="hl kwc">TreeNode</span> <span class="hl kwd">bottomUpTree</span><span class="hl sym">(</span><span class="hl kwb">int</span> item<span class="hl sym">,</span> <span class="hl kwb">int</span> depth<span class="hl sym">)</span>
      <span class="hl sym">{</span>
         <span class="hl kwc">TreeNode</span> node <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">TreeNode</span><span class="hl sym">();</span>
         node<span class="hl sym">.</span>item <span class="hl sym">=</span> item<span class="hl sym">;</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span>depth <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">) {</span>
            node<span class="hl sym">.</span>left <span class="hl sym">=</span> <span class="hl kwd">bottomUpTree</span><span class="hl sym">(</span><span class="hl num">2</span> <span class="hl sym">*</span> item <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">,</span> depth <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">);</span>
            node<span class="hl sym">.</span>right <span class="hl sym">=</span> <span class="hl kwd">bottomUpTree</span><span class="hl sym">(</span><span class="hl num">2</span> <span class="hl sym">*</span> item<span class="hl sym">,</span> depth <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">);</span>
         <span class="hl sym">}</span> <span class="hl kwa">else</span> <span class="hl sym">{</span>
            node<span class="hl sym">.</span>left <span class="hl sym">=</span> null<span class="hl sym">;</span>
         <span class="hl sym">}</span>
         <span class="hl kwa">return</span> node<span class="hl sym">;</span>
      <span class="hl sym">}</span>

      <span class="hl kwa">private static</span> <span class="hl kwb">int</span> <span class="hl kwd">checkItems</span><span class="hl sym">(</span><span class="hl kwc">TreeNode</span> node<span class="hl sym">)</span>
      <span class="hl sym">{</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span>node<span class="hl sym">.</span>left <span class="hl sym">==</span> null<span class="hl sym">) {</span>
            <span class="hl kwa">return</span> node<span class="hl sym">.</span>item<span class="hl sym">;</span>
         <span class="hl sym">}</span> <span class="hl kwa">else</span> <span class="hl sym">{</span>
            <span class="hl kwa">return</span> node<span class="hl sym">.</span>item <span class="hl sym">+</span> <span class="hl kwd">checkItems</span><span class="hl sym">(</span>node<span class="hl sym">.</span>left<span class="hl sym">) -</span> <span class="hl kwd">checkItems</span><span class="hl sym">(</span>node<span class="hl sym">.</span>right<span class="hl sym">);</span>
         <span class="hl sym">}</span>
      <span class="hl sym">}</span>
      
      
      <span class="hl kwa">public synchronized</span> <span class="hl kwb">void</span> <span class="hl kwd">run</span><span class="hl sym">()</span>
      <span class="hl sym">{</span>
         <span class="hl kwa">while</span> <span class="hl sym">(!</span>terminate<span class="hl sym">) {</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>run<span class="hl sym">) {</span>
               result <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
               <span class="hl kwa">if</span> <span class="hl sym">(</span>start <span class="hl sym">==</span> end<span class="hl sym">) {</span>
                  result <span class="hl sym">+=</span> <span class="hl kwd">checkItems</span><span class="hl sym">(</span><span class="hl kwd">bottomUpTree</span><span class="hl sym">(</span>start<span class="hl sym">,</span> depth<span class="hl sym">));</span>
               <span class="hl sym">}</span> <span class="hl kwa">else for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> start<span class="hl sym">;</span> i <span class="hl sym">&lt;</span> end<span class="hl sym">;</span> i<span class="hl sym">++) {</span>
                  result <span class="hl sym">+=</span> <span class="hl kwd">checkItems</span><span class="hl sym">(</span><span class="hl kwd">bottomUpTree</span><span class="hl sym">(</span>i<span class="hl sym">,</span> depth<span class="hl sym">)) +</span> <span class="hl kwd">checkItems</span><span class="hl sym">(</span><span class="hl kwd">bottomUpTree</span><span class="hl sym">(-</span>i<span class="hl sym">,</span> depth<span class="hl sym">));</span>
               <span class="hl sym">}</span>
               run <span class="hl sym">=</span> false<span class="hl sym">;</span>
               <span class="hl kwd">notify</span><span class="hl sym">();</span>
            <span class="hl sym">}</span>
            <span class="hl kwa">try</span> <span class="hl sym">{</span>
               <span class="hl kwd">wait</span><span class="hl sym">();</span>
            <span class="hl sym">}</span> <span class="hl kwa">catch</span> <span class="hl sym">(</span><span class="hl kwc">InterruptedException</span> e<span class="hl sym">) {}</span>
         <span class="hl sym">}</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>
   
   <span class="hl kwa">private static class</span> <span class="hl kwc">TreeNode</span>
   <span class="hl sym">{</span>
      <span class="hl kwa">private</span> <span class="hl kwb">int</span> item<span class="hl sym">;</span>
      <span class="hl kwa">private</span> <span class="hl kwc">TreeNode</span> left<span class="hl sym">,</span> right<span class="hl sym">;</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>
