<span class="hl slc">;;   The Computer Language Benchmarks Game</span>
<span class="hl slc">;;   http://shootout.alioth.debian.org/</span>

<span class="hl slc">;; contributed by Andy Fingerhut</span>

<span class="hl sym">(</span>ns revcomp
  <span class="hl sym">(:</span>gen<span class="hl sym">-</span>class<span class="hl sym">))</span>

<span class="hl sym">(</span>set<span class="hl sym">! *</span>warn<span class="hl sym">-</span>on<span class="hl sym">-</span>reflection<span class="hl sym">*</span> true<span class="hl sym">)</span>


<span class="hl sym">(</span>def complement<span class="hl sym">-</span>dna<span class="hl sym">-</span>char<span class="hl sym">-</span>map
     <span class="hl sym">{</span>\w \W<span class="hl sym">,</span> \W \W<span class="hl sym">,</span>
      \s \S<span class="hl sym">,</span> \S \S<span class="hl sym">,</span>
      \a \T<span class="hl sym">,</span> \A \T<span class="hl sym">,</span>
      \t \A<span class="hl sym">,</span> \T \A<span class="hl sym">,</span>
      \u \A<span class="hl sym">,</span> \U \A<span class="hl sym">,</span>
      \g \C<span class="hl sym">,</span> \G \C<span class="hl sym">,</span>
      \c \G<span class="hl sym">,</span> \C \G<span class="hl sym">,</span>
      \y \R<span class="hl sym">,</span> \Y \R<span class="hl sym">,</span>
      \r \Y<span class="hl sym">,</span> \R \Y<span class="hl sym">,</span>
      \k \M<span class="hl sym">,</span> \K \M<span class="hl sym">,</span>
      \m \K<span class="hl sym">,</span> \M \K<span class="hl sym">,</span>
      \b \V<span class="hl sym">,</span> \B \V<span class="hl sym">,</span>
      \d \H<span class="hl sym">,</span> \D \H<span class="hl sym">,</span>
      \h \D<span class="hl sym">,</span> \H \D<span class="hl sym">,</span>
      \v \B<span class="hl sym">,</span> \V \B<span class="hl sym">,</span>
      \n \N<span class="hl sym">,</span> \N \N <span class="hl sym">})</span>


<span class="hl sym">(</span>defn make<span class="hl sym">-</span>array<span class="hl sym">-</span>char<span class="hl sym">-</span>mapper <span class="hl sym">[</span>cmap<span class="hl sym">]</span>
  <span class="hl sym">(</span>let <span class="hl sym">[</span>a <span class="hl sym">(</span>make<span class="hl sym">-</span>array Integer<span class="hl sym">/</span>TYPE <span class="hl num">256</span><span class="hl sym">)]</span>
    <span class="hl sym">(</span>dotimes <span class="hl sym">[</span>i <span class="hl num">256</span><span class="hl sym">]</span>
      <span class="hl sym">(</span>aset<span class="hl sym">-</span>int a i <span class="hl sym">(</span>if <span class="hl sym">(</span>contains? cmap <span class="hl sym">(</span>char i<span class="hl sym">))</span>
		      <span class="hl sym">(</span>int <span class="hl sym">(</span>cmap <span class="hl sym">(</span>char i<span class="hl sym">)))</span>
		      i<span class="hl sym">)))</span>
    a<span class="hl sym">))</span>


<span class="hl sym">(</span>defn revcomp<span class="hl sym">-</span>buf<span class="hl sym">-</span>and<span class="hl sym">-</span>write <span class="hl sym">[</span>#^java.lang.StringBuilder buf
			     #^java.io.BufferedWriter wrtr
			     #^ints comp<span class="hl sym">]</span>
  <span class="hl sym">(</span>let <span class="hl sym">[</span>len <span class="hl sym">(</span>.length buf<span class="hl sym">)]</span>
    <span class="hl sym">(</span>when <span class="hl sym">(&gt;</span> len <span class="hl num">0</span><span class="hl sym">)</span>
      <span class="hl sym">(</span>loop <span class="hl sym">[</span>begin <span class="hl sym">(</span>int <span class="hl num">0</span><span class="hl sym">)</span>
	     end <span class="hl sym">(</span>int <span class="hl sym">(</span>dec len<span class="hl sym">))]</span>
	<span class="hl sym">(</span>when <span class="hl sym">(&lt;=</span> begin end<span class="hl sym">)</span>
	  <span class="hl slc">;; then reverse and complement two more characters, working</span>
	  <span class="hl slc">;; from beginning and end towards the middle</span>
	  <span class="hl sym">(</span>let <span class="hl sym">[</span>b <span class="hl sym">(</span>if <span class="hl sym">(= (</span>.charAt buf begin<span class="hl sym">)</span> \newline<span class="hl sym">)</span>
		    <span class="hl sym">(</span>inc begin<span class="hl sym">)</span>
		    begin<span class="hl sym">)</span>
		e <span class="hl sym">(</span>if <span class="hl sym">(= (</span>.charAt buf end<span class="hl sym">)</span> \newline<span class="hl sym">)</span>
		    <span class="hl sym">(</span>dec end<span class="hl sym">)</span>
		    end<span class="hl sym">)]</span>
	    <span class="hl sym">(</span>when <span class="hl sym">(&lt;=</span> b e<span class="hl sym">)</span>
	      <span class="hl sym">(</span>let <span class="hl sym">[</span>cb <span class="hl sym">(</span>char <span class="hl sym">(</span>aget comp <span class="hl sym">(</span>int <span class="hl sym">(</span>.charAt buf b<span class="hl sym">))))</span>
		    ce <span class="hl sym">(</span>char <span class="hl sym">(</span>aget comp <span class="hl sym">(</span>int <span class="hl sym">(</span>.charAt buf e<span class="hl sym">))))]</span>
		<span class="hl sym">(</span>.setCharAt buf b ce<span class="hl sym">)</span>
		<span class="hl sym">(</span>.setCharAt buf e cb<span class="hl sym">)</span>
		<span class="hl sym">(</span>recur <span class="hl sym">(</span>inc b<span class="hl sym">) (</span>dec e<span class="hl sym">)))))))</span>
      <span class="hl sym">(</span>.write wrtr <span class="hl sym">(</span>.toString buf<span class="hl sym">)</span> <span class="hl num">0</span> len<span class="hl sym">))))</span>


<span class="hl sym">(</span>defn <span class="hl sym">-</span>main <span class="hl sym">[&amp;</span> args<span class="hl sym">]</span>
  <span class="hl sym">(</span>let <span class="hl sym">[</span>rdr <span class="hl sym">(</span>java.io.BufferedReader. <span class="hl sym">*</span>in<span class="hl sym">*)</span>
	wrtr <span class="hl sym">(</span>java.io.BufferedWriter. <span class="hl sym">*</span>out<span class="hl sym">*)</span>
        complement<span class="hl sym">-</span>dna<span class="hl sym">-</span>char<span class="hl sym">-</span>array <span class="hl sym">(</span>make<span class="hl sym">-</span>array<span class="hl sym">-</span>char<span class="hl sym">-</span>mapper
				   complement<span class="hl sym">-</span>dna<span class="hl sym">-</span>char<span class="hl sym">-</span>map<span class="hl sym">)]</span>
    <span class="hl sym">(</span>loop <span class="hl sym">[</span>line <span class="hl sym">(</span>.readLine rdr<span class="hl sym">)</span>
	   buf <span class="hl sym">(</span>new java.lang.StringBuilder<span class="hl sym">)]</span>
      <span class="hl sym">(</span>if line
	<span class="hl sym">(</span>if <span class="hl sym">(= (</span>get line <span class="hl num">0</span><span class="hl sym">)</span> \<span class="hl sym">&gt;)</span>
	  <span class="hl slc">;; then print out revcomp of any string in buf, and after</span>
	  <span class="hl slc">;; that, the line just read</span>
	  <span class="hl sym">(</span>do
	    <span class="hl sym">(</span>revcomp<span class="hl sym">-</span>buf<span class="hl sym">-</span>and<span class="hl sym">-</span>write buf wrtr complement<span class="hl sym">-</span>dna<span class="hl sym">-</span>char<span class="hl sym">-</span>array<span class="hl sym">)</span>
	    <span class="hl sym">(</span>.write wrtr line <span class="hl num">0</span> <span class="hl sym">(</span>count line<span class="hl sym">))</span>
	    <span class="hl sym">(</span>.newLine wrtr<span class="hl sym">)</span>
	    <span class="hl sym">(</span>recur <span class="hl sym">(</span>.readLine rdr<span class="hl sym">) (</span>new java.lang.StringBuilder<span class="hl sym">)))</span>
	  <span class="hl slc">;; else add the line to buf</span>
	  <span class="hl sym">(</span>do
	    <span class="hl sym">(</span>.append buf line<span class="hl sym">)</span>
	    <span class="hl sym">(</span>.append buf \newline<span class="hl sym">)</span>
	    <span class="hl sym">(</span>recur <span class="hl sym">(</span>.readLine rdr<span class="hl sym">)</span> buf<span class="hl sym">)))</span>
	<span class="hl slc">;; else print out revcomp of any string in buf</span>
	<span class="hl sym">(</span>revcomp<span class="hl sym">-</span>buf<span class="hl sym">-</span>and<span class="hl sym">-</span>write buf wrtr complement<span class="hl sym">-</span>dna<span class="hl sym">-</span>char<span class="hl sym">-</span>array<span class="hl sym">)))</span>
    <span class="hl sym">(</span>.flush wrtr<span class="hl sym">))</span>
  <span class="hl sym">(</span>. System <span class="hl sym">(</span>exit <span class="hl num">0</span><span class="hl sym">)))</span>
