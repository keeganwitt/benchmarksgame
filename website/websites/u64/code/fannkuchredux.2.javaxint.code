<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by Isaac Gouy</span>
<span class="hl com">   converted to Java by Oleg Mazurov</span>
<span class="hl com">*/</span>

<span class="hl kwa">public class</span> fannkuchredux
<span class="hl sym">{</span>
   <span class="hl kwa">public static</span> <span class="hl kwb">int</span> <span class="hl kwd">fannkuch</span><span class="hl sym">(</span><span class="hl kwb">int</span> n<span class="hl sym">) {</span>
      <span class="hl kwb">int</span><span class="hl sym">[]</span> perm <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwb">int</span><span class="hl sym">[</span>n<span class="hl sym">];</span>
      <span class="hl kwb">int</span><span class="hl sym">[]</span> perm1 <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwb">int</span><span class="hl sym">[</span>n<span class="hl sym">];</span>
      <span class="hl kwb">int</span><span class="hl sym">[]</span> count <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwb">int</span><span class="hl sym">[</span>n<span class="hl sym">];</span>
      <span class="hl kwb">int</span> maxFlipsCount <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
      <span class="hl kwb">int</span> permCount <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
      <span class="hl kwb">int</span> checksum <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>

      <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> i<span class="hl sym">&lt;</span>n<span class="hl sym">;</span> i<span class="hl sym">++)</span> perm1<span class="hl sym">[</span>i<span class="hl sym">] =</span> i<span class="hl sym">;</span>
      <span class="hl kwb">int</span> r <span class="hl sym">=</span> n<span class="hl sym">;</span>

      <span class="hl kwa">while</span> <span class="hl sym">(</span>true<span class="hl sym">) {</span>

         <span class="hl kwa">while</span> <span class="hl sym">(</span>r <span class="hl sym">!=</span> <span class="hl num">1</span><span class="hl sym">){</span> count<span class="hl sym">[</span>r<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">] =</span> r<span class="hl sym">;</span> r<span class="hl sym">--; }</span>

         <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> i<span class="hl sym">&lt;</span>n<span class="hl sym">;</span> i<span class="hl sym">++)</span> perm<span class="hl sym">[</span>i<span class="hl sym">] =</span> perm1<span class="hl sym">[</span>i<span class="hl sym">];</span>
         <span class="hl kwb">int</span> flipsCount <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
         <span class="hl kwb">int</span> k<span class="hl sym">;</span>

         <span class="hl kwa">while</span> <span class="hl sym">( !((</span>k<span class="hl sym">=</span>perm<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]) ==</span> <span class="hl num">0</span><span class="hl sym">) ) {</span>
            <span class="hl kwb">int</span> k2 <span class="hl sym">= (</span>k<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">) &gt;&gt;</span> <span class="hl num">1</span><span class="hl sym">;</span>
            <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> i<span class="hl sym">&lt;</span>k2<span class="hl sym">;</span> i<span class="hl sym">++) {</span>
               <span class="hl kwb">int</span> temp <span class="hl sym">=</span> perm<span class="hl sym">[</span>i<span class="hl sym">];</span> perm<span class="hl sym">[</span>i<span class="hl sym">] =</span> perm<span class="hl sym">[</span>k<span class="hl sym">-</span>i<span class="hl sym">];</span> perm<span class="hl sym">[</span>k<span class="hl sym">-</span>i<span class="hl sym">] =</span> temp<span class="hl sym">;</span>
            <span class="hl sym">}</span>
            flipsCount<span class="hl sym">++;</span>
         <span class="hl sym">}</span>

         maxFlipsCount <span class="hl sym">=</span> <span class="hl kwc">Math</span><span class="hl sym">.</span><span class="hl kwd">max</span><span class="hl sym">(</span>maxFlipsCount<span class="hl sym">,</span> flipsCount<span class="hl sym">);</span>
         checksum <span class="hl sym">+=</span> permCount<span class="hl sym">%</span><span class="hl num">2</span> <span class="hl sym">==</span> <span class="hl num">0</span> ? flipsCount <span class="hl sym">: -</span>flipsCount<span class="hl sym">;</span>

         <span class="hl slc">// Use incremental change to generate another permutation</span>
         <span class="hl kwa">while</span> <span class="hl sym">(</span>true<span class="hl sym">) {</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>r <span class="hl sym">==</span> n<span class="hl sym">) {</span>
	       <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">(</span> checksum <span class="hl sym">);</span>
	       <span class="hl kwa">return</span> maxFlipsCount<span class="hl sym">;</span>
	    <span class="hl sym">}</span>
            <span class="hl kwb">int</span> perm0 <span class="hl sym">=</span> perm1<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">];</span>
            <span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
            <span class="hl kwa">while</span> <span class="hl sym">(</span>i <span class="hl sym">&lt;</span> r<span class="hl sym">) {</span>
               <span class="hl kwb">int</span> j <span class="hl sym">=</span> i <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
               perm1<span class="hl sym">[</span>i<span class="hl sym">] =</span> perm1<span class="hl sym">[</span>j<span class="hl sym">];</span>
               i <span class="hl sym">=</span> j<span class="hl sym">;</span>
            <span class="hl sym">}</span>
            perm1<span class="hl sym">[</span>r<span class="hl sym">] =</span> perm0<span class="hl sym">;</span>

            count<span class="hl sym">[</span>r<span class="hl sym">] =</span> count<span class="hl sym">[</span>r<span class="hl sym">] -</span> <span class="hl num">1</span><span class="hl sym">;</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>count<span class="hl sym">[</span>r<span class="hl sym">] &gt;</span> <span class="hl num">0</span><span class="hl sym">)</span> <span class="hl kwa">break</span><span class="hl sym">;</span>
            r<span class="hl sym">++;</span>
         <span class="hl sym">}</span>

         permCount<span class="hl sym">++;</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwc">String</span><span class="hl sym">[]</span> args<span class="hl sym">){</span>
      <span class="hl kwb">int</span> n <span class="hl sym">=</span> <span class="hl num">7</span><span class="hl sym">;</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>args<span class="hl sym">.</span>length <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">)</span> n <span class="hl sym">=</span> <span class="hl kwc">Integer</span><span class="hl sym">.</span><span class="hl kwd">parseInt</span><span class="hl sym">(</span>args<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]);</span>
      <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">(</span><span class="hl str">&quot;Pfannkuchen(&quot;</span><span class="hl sym">+</span>n<span class="hl sym">+</span><span class="hl str">&quot;) = &quot;</span><span class="hl sym">+</span><span class="hl kwd">fannkuch</span><span class="hl sym">(</span>n<span class="hl sym">));</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>
