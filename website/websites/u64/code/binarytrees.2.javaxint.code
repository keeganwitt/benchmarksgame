<span class="hl com">/* The Great Computer Language Shootout</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com"> </span>
<span class="hl com">   contributed by Jarkko Miettinen</span>
<span class="hl com">*/</span>

<span class="hl kwa">public class</span> binarytrees <span class="hl sym">{</span>

	<span class="hl kwa">private final static</span> <span class="hl kwb">int</span> minDepth <span class="hl sym">=</span> <span class="hl num">4</span><span class="hl sym">;</span>
	
	<span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwc">String</span><span class="hl sym">[]</span> args<span class="hl sym">){</span>
		<span class="hl kwb">int</span> n <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
		<span class="hl kwa">if</span> <span class="hl sym">(</span>args<span class="hl sym">.</span>length <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">)</span> n <span class="hl sym">=</span> <span class="hl kwc">Integer</span><span class="hl sym">.</span><span class="hl kwd">parseInt</span><span class="hl sym">(</span>args<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]);</span>
		
		<span class="hl kwb">int</span> maxDepth <span class="hl sym">= (</span>minDepth <span class="hl sym">+</span> <span class="hl num">2</span> <span class="hl sym">&gt;</span> n<span class="hl sym">)</span> ? minDepth <span class="hl sym">+</span> <span class="hl num">2</span> <span class="hl sym">:</span> n<span class="hl sym">;</span>
		<span class="hl kwb">int</span> stretchDepth <span class="hl sym">=</span> maxDepth <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">;</span>
		
		<span class="hl kwb">int</span> check <span class="hl sym">= (</span><span class="hl kwc">TreeNode</span><span class="hl sym">.</span><span class="hl kwd">bottomUpTree</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span>stretchDepth<span class="hl sym">)).</span><span class="hl kwd">itemCheck</span><span class="hl sym">();</span>
		<span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">(</span><span class="hl str">&quot;stretch tree of depth &quot;</span><span class="hl sym">+</span>stretchDepth<span class="hl sym">+</span><span class="hl str">&quot;</span><span class="hl esc">\t</span> <span class="hl str">check: &quot;</span> <span class="hl sym">+</span> check<span class="hl sym">);</span>
		
		<span class="hl kwc">TreeNode</span> longLivedTree <span class="hl sym">=</span> <span class="hl kwc">TreeNode</span><span class="hl sym">.</span><span class="hl kwd">bottomUpTree</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span>maxDepth<span class="hl sym">);</span>
		
		<span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> depth<span class="hl sym">=</span>minDepth<span class="hl sym">;</span> depth<span class="hl sym">&lt;=</span>maxDepth<span class="hl sym">;</span> depth<span class="hl sym">+=</span><span class="hl num">2</span><span class="hl sym">){</span>
			<span class="hl kwb">int</span> iterations <span class="hl sym">=</span> <span class="hl num">1</span> <span class="hl sym">&lt;&lt; (</span>maxDepth <span class="hl sym">-</span> depth <span class="hl sym">+</span> minDepth<span class="hl sym">);</span>
			check <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
			
			<span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i<span class="hl sym">=</span><span class="hl num">1</span><span class="hl sym">;</span> i<span class="hl sym">&lt;=</span>iterations<span class="hl sym">;</span> i<span class="hl sym">++){</span>
				check <span class="hl sym">+= (</span><span class="hl kwc">TreeNode</span><span class="hl sym">.</span><span class="hl kwd">bottomUpTree</span><span class="hl sym">(</span>i<span class="hl sym">,</span>depth<span class="hl sym">)).</span><span class="hl kwd">itemCheck</span><span class="hl sym">();</span>
				check <span class="hl sym">+= (</span><span class="hl kwc">TreeNode</span><span class="hl sym">.</span><span class="hl kwd">bottomUpTree</span><span class="hl sym">(-</span>i<span class="hl sym">,</span>depth<span class="hl sym">)).</span><span class="hl kwd">itemCheck</span><span class="hl sym">();</span>
			<span class="hl sym">}</span>
			<span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">((</span>iterations<span class="hl sym">*</span><span class="hl num">2</span><span class="hl sym">) +</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span> <span class="hl str">trees of depth &quot;</span> <span class="hl sym">+</span> depth <span class="hl sym">+</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span> <span class="hl str">check: &quot;</span> <span class="hl sym">+</span> check<span class="hl sym">);</span>
		<span class="hl sym">}</span>	
		<span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">(</span><span class="hl str">&quot;long lived tree of depth &quot;</span> <span class="hl sym">+</span> maxDepth <span class="hl sym">+</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span> <span class="hl str">check: &quot;</span><span class="hl sym">+</span> longLivedTree<span class="hl sym">.</span><span class="hl kwd">itemCheck</span><span class="hl sym">());</span>
	<span class="hl sym">}</span>
	
	
	<span class="hl kwa">private static class</span> <span class="hl kwc">TreeNode</span>
	<span class="hl sym">{</span>
		<span class="hl kwa">private</span> <span class="hl kwc">TreeNode</span> left<span class="hl sym">,</span> right<span class="hl sym">;</span>
		<span class="hl kwa">private</span> <span class="hl kwb">int</span> item<span class="hl sym">;</span>
		
		<span class="hl kwc">TreeNode</span><span class="hl sym">(</span><span class="hl kwb">int</span> item<span class="hl sym">){</span>
			<span class="hl kwa">this</span><span class="hl sym">.</span>item <span class="hl sym">=</span> item<span class="hl sym">;</span>
		<span class="hl sym">}</span>
		
		<span class="hl kwa">private static</span> <span class="hl kwc">TreeNode</span> <span class="hl kwd">bottomUpTree</span><span class="hl sym">(</span><span class="hl kwb">int</span> item<span class="hl sym">,</span> <span class="hl kwb">int</span> depth<span class="hl sym">){</span>
			<span class="hl kwa">if</span> <span class="hl sym">(</span>depth<span class="hl sym">&gt;</span><span class="hl num">0</span><span class="hl sym">){</span>
				<span class="hl kwa">return new</span> <span class="hl kwc">TreeNode</span><span class="hl sym">(</span>
						<span class="hl kwd">bottomUpTree</span><span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">*</span>item<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span> depth<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span>
						<span class="hl sym">,</span> <span class="hl kwd">bottomUpTree</span><span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">*</span>item<span class="hl sym">,</span> depth<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">)</span>
						<span class="hl sym">,</span> item
				<span class="hl sym">);</span>
			<span class="hl sym">}</span>
			<span class="hl kwa">else</span> <span class="hl sym">{</span>
				<span class="hl kwa">return new</span> <span class="hl kwc">TreeNode</span><span class="hl sym">(</span>item<span class="hl sym">);</span>
			<span class="hl sym">}</span>
		<span class="hl sym">}</span>
		
		<span class="hl kwc">TreeNode</span><span class="hl sym">(</span><span class="hl kwc">TreeNode</span> left<span class="hl sym">,</span> <span class="hl kwc">TreeNode</span> right<span class="hl sym">,</span> <span class="hl kwb">int</span> item<span class="hl sym">){</span>
			<span class="hl kwa">this</span><span class="hl sym">.</span>left <span class="hl sym">=</span> left<span class="hl sym">;</span>
			<span class="hl kwa">this</span><span class="hl sym">.</span>right <span class="hl sym">=</span> right<span class="hl sym">;</span>
			<span class="hl kwa">this</span><span class="hl sym">.</span>item <span class="hl sym">=</span> item<span class="hl sym">;</span>
		<span class="hl sym">}</span>
		
		<span class="hl kwa">private</span> <span class="hl kwb">int</span> <span class="hl kwd">itemCheck</span><span class="hl sym">(){</span>
			<span class="hl slc">// if necessary deallocate here</span>
			<span class="hl kwa">if</span> <span class="hl sym">(</span>left<span class="hl sym">==</span>null<span class="hl sym">)</span> <span class="hl kwa">return</span> item<span class="hl sym">;</span>
			<span class="hl kwa">else return</span> item <span class="hl sym">+</span> left<span class="hl sym">.</span><span class="hl kwd">itemCheck</span><span class="hl sym">() -</span> right<span class="hl sym">.</span><span class="hl kwd">itemCheck</span><span class="hl sym">();</span>
		<span class="hl sym">}</span>
	<span class="hl sym">}</span>
<span class="hl sym">}</span>
