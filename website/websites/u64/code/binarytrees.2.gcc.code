<span class="hl com">/* </span>
<span class="hl com"> * The Computer Language Benchmarks Game </span>
<span class="hl com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * Contributed by Mr Ledrug</span>
<span class="hl com">*/</span>

<span class="hl ppc">#include &lt;stdio.h&gt;</span>
<span class="hl ppc">#include &lt;stdlib.h&gt;</span>

<span class="hl kwc">typedef</span> <span class="hl kwb">struct</span> node_s <span class="hl opt">{</span>
   <span class="hl kwb">int</span> item<span class="hl opt">;</span>
   <span class="hl kwb">struct</span> node_s <span class="hl opt">*</span>left<span class="hl opt">, *</span>right<span class="hl opt">;</span>
<span class="hl opt">}</span> node<span class="hl opt">;</span>

node <span class="hl opt">*</span> <span class="hl kwd">make_tree</span><span class="hl opt">(</span><span class="hl kwb">int</span> depth<span class="hl opt">,</span> <span class="hl kwb">int</span> root_item<span class="hl opt">) {</span>
   <span class="hl kwb">const int</span> len <span class="hl opt">=</span> <span class="hl num">1</span> <span class="hl opt">&lt;&lt;</span> depth<span class="hl opt">;</span>

   <span class="hl slc">// allocate the whole tree in one go, more of a bin heap really</span>
   node <span class="hl opt">*</span> <span class="hl kwb">const</span> root <span class="hl opt">= (</span>node<span class="hl opt">*)</span><span class="hl kwd">calloc</span><span class="hl opt">(</span>len<span class="hl opt">,</span> <span class="hl kwa">sizeof</span><span class="hl opt">(</span>node<span class="hl opt">));</span>

   root<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">].</span>item <span class="hl opt">=</span> root_item<span class="hl opt">;</span>
   root<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">].</span>left <span class="hl opt">=</span> root <span class="hl opt">+</span> <span class="hl num">2</span><span class="hl opt">;</span>
   root<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">].</span>right <span class="hl opt">=</span> root <span class="hl opt">+</span> <span class="hl num">3</span><span class="hl opt">;</span>

   <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">2</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> len<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
      root<span class="hl opt">[</span>i<span class="hl opt">].</span>item <span class="hl opt">=</span> <span class="hl num">2</span> <span class="hl opt">*</span> root<span class="hl opt">[</span>i<span class="hl opt">/</span><span class="hl num">2</span><span class="hl opt">].</span>item <span class="hl opt">-</span> <span class="hl num">1</span> <span class="hl opt">+ (</span>i<span class="hl opt">&amp;</span><span class="hl num">1</span><span class="hl opt">);</span>

      <span class="hl kwa">if</span> <span class="hl opt">(</span>i <span class="hl opt">*</span> <span class="hl num">2</span> <span class="hl opt">&gt;=</span> len<span class="hl opt">)</span> <span class="hl kwa">continue</span><span class="hl opt">;</span>

      root<span class="hl opt">[</span>i<span class="hl opt">].</span>left <span class="hl opt">=</span> root <span class="hl opt">+</span> i <span class="hl opt">*</span> <span class="hl num">2</span><span class="hl opt">;</span>
      root<span class="hl opt">[</span>i<span class="hl opt">].</span>right <span class="hl opt">=</span> root <span class="hl opt">+</span> i <span class="hl opt">*</span> <span class="hl num">2</span> <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span>
   <span class="hl opt">}</span>

   <span class="hl kwa">return</span> root <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwb">void</span> <span class="hl kwd">del_tree</span><span class="hl opt">(</span>node <span class="hl opt">*</span>s<span class="hl opt">) {</span> <span class="hl kwd">free</span><span class="hl opt">(</span>s <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">); }</span>

<span class="hl slc">// It's actually faster to do the check sequentially because the whole</span>
<span class="hl slc">// tree is in one array.  Here traversing the tree by pointer is just</span>
<span class="hl slc">// to show the bin heap functions as a linked tree</span>
<span class="hl kwb">int</span> <span class="hl kwd">check_tree</span><span class="hl opt">(</span><span class="hl kwb">const</span> node<span class="hl opt">*</span> <span class="hl kwb">const</span> s<span class="hl opt">) {</span>
   <span class="hl kwa">if</span> <span class="hl opt">(!</span>s<span class="hl opt">-&gt;</span>left<span class="hl opt">)</span>
      <span class="hl kwa">return</span> s<span class="hl opt">-&gt;</span>item<span class="hl opt">;</span>

   <span class="hl kwa">return</span> s<span class="hl opt">-&gt;</span>item <span class="hl opt">+</span> <span class="hl kwd">check_tree</span><span class="hl opt">(</span>s<span class="hl opt">-&gt;</span>left<span class="hl opt">) -</span> <span class="hl kwd">check_tree</span><span class="hl opt">(</span>s<span class="hl opt">-&gt;</span>right<span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span> <span class="hl opt">**</span>argv<span class="hl opt">) {</span>
   <span class="hl kwb">int</span> min <span class="hl opt">=</span> <span class="hl num">4</span><span class="hl opt">;</span>
   <span class="hl kwb">int</span> max <span class="hl opt">=</span> <span class="hl kwd">atoi</span><span class="hl opt">(</span>argv<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">]);</span>

   <span class="hl kwa">if</span> <span class="hl opt">(</span>max <span class="hl opt">&lt;</span> <span class="hl num">6</span><span class="hl opt">)</span> max <span class="hl opt">=</span> <span class="hl num">6</span><span class="hl opt">;</span>

   node <span class="hl opt">*</span>stretch <span class="hl opt">=</span> <span class="hl kwd">make_tree</span><span class="hl opt">(</span>max <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">);</span>
   <span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;stretch tree of depth %d</span><span class="hl esc">\t</span> <span class="hl str">check: %d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span>
      max <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">,</span> <span class="hl kwd">check_tree</span><span class="hl opt">(</span>stretch<span class="hl opt">));</span>
   <span class="hl kwd">del_tree</span><span class="hl opt">(</span>stretch<span class="hl opt">);</span>

   node <span class="hl opt">*</span>longlived <span class="hl opt">=</span> <span class="hl kwd">make_tree</span><span class="hl opt">(</span>max<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">);</span>

   <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> d <span class="hl opt">=</span> min<span class="hl opt">;</span> d <span class="hl opt">&lt;=</span> max<span class="hl opt">;</span> d<span class="hl opt">+=</span> <span class="hl num">2</span><span class="hl opt">) {</span>
      <span class="hl kwb">int</span> iter <span class="hl opt">=</span> <span class="hl num">1</span> <span class="hl opt">&lt;&lt; (</span>max <span class="hl opt">+</span> min <span class="hl opt">-</span> d<span class="hl opt">);</span>
      <span class="hl kwb">int</span> check <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>

      <span class="hl com">/* this can be easily parallel, unfortunately malloc's locking</span>
<span class="hl com">         slows down the thing by a lot with either -pthread</span>
<span class="hl com">         or -fopenmp, so much so that it's not worth the hassle */</span>
      <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span> i <span class="hl opt">&lt;=</span> iter<span class="hl opt">;</span> i<span class="hl opt">++){</span>
         node <span class="hl opt">*</span>s <span class="hl opt">=</span> <span class="hl kwd">make_tree</span><span class="hl opt">(</span>d<span class="hl opt">,</span> i<span class="hl opt">);</span>
         check <span class="hl opt">+=</span> <span class="hl kwd">check_tree</span><span class="hl opt">(</span>s<span class="hl opt">);</span>
         <span class="hl kwd">del_tree</span><span class="hl opt">(</span>s<span class="hl opt">);</span>

         s <span class="hl opt">=</span> <span class="hl kwd">make_tree</span><span class="hl opt">(</span>d<span class="hl opt">, -</span>i<span class="hl opt">);</span>
         check <span class="hl opt">+=</span> <span class="hl kwd">check_tree</span><span class="hl opt">(</span>s<span class="hl opt">);</span>
         <span class="hl kwd">del_tree</span><span class="hl opt">(</span>s<span class="hl opt">);</span>
      <span class="hl opt">}</span>

      <span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;%d</span><span class="hl esc">\t</span> <span class="hl str">trees of depth %d</span><span class="hl esc">\t</span> <span class="hl str">check: %d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span>
         iter <span class="hl opt">*</span> <span class="hl num">2</span><span class="hl opt">,</span> d<span class="hl opt">,</span> check<span class="hl opt">);</span>
   <span class="hl opt">}</span>

   <span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;long lived tree of depth %d</span><span class="hl esc">\t</span> <span class="hl str">check: %d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span>
      max<span class="hl opt">,</span> <span class="hl kwd">check_tree</span><span class="hl opt">(</span>longlived<span class="hl opt">));</span>
   <span class="hl kwd">del_tree</span><span class="hl opt">(</span>longlived<span class="hl opt">);</span>

   <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
