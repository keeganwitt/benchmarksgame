<span class="hl com">(* </span>
<span class="hl com"> * The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * contributed by Troestler Christophe</span>
<span class="hl com"> * modified by Mauricio Fernandez</span>
<span class="hl com"> *)</span>

<span class="hl kwa">module</span> <span class="hl kwd">S</span> <span class="hl opt">=</span> <span class="hl kwa">struct</span>
  <span class="hl kwa">type</span> t <span class="hl opt">=</span> <span class="hl kwb">string</span>

  <span class="hl kwa">let</span> size <span class="hl opt">=</span> <span class="hl num">0x40000</span>

  <span class="hl kwa">let</span> equal <span class="hl opt">(</span>s1<span class="hl opt">:</span><span class="hl kwb">string</span><span class="hl opt">)</span> s2 <span class="hl opt">= (</span>s1 <span class="hl opt">=</span> s2<span class="hl opt">)</span>

  <span class="hl kwa">let</span> hash s <span class="hl opt">=</span>
    <span class="hl kwa">let</span> h <span class="hl opt">=</span> <span class="hl kwb">ref</span> <span class="hl num">0</span> <span class="hl kwa">in</span>
    <span class="hl kwa">for</span> i <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> <span class="hl kwc">String</span><span class="hl opt">.</span>length s <span class="hl opt">-</span> <span class="hl num">1</span> <span class="hl kwa">do</span> h <span class="hl opt">:= !</span>h <span class="hl opt">*</span> <span class="hl num">5</span> <span class="hl opt">+</span> <span class="hl kwc">Char</span><span class="hl opt">.</span>code s<span class="hl opt">.[</span>i<span class="hl opt">]</span> <span class="hl kwa">done</span><span class="hl opt">;</span>
    <span class="hl opt">!</span>h
<span class="hl kwa">end</span>

<span class="hl kwa">module</span> <span class="hl kwd">H</span> <span class="hl opt">=</span> <span class="hl kwc">Hashtbl</span><span class="hl opt">.</span><span class="hl kwd">Make</span><span class="hl opt">(</span><span class="hl kwd">S</span><span class="hl opt">)</span>

<span class="hl com">(* [counts k dna] fills and return the hashtable [count] of</span>
<span class="hl com">   k-nucleotide keys and count values for a particular reading-frame</span>
<span class="hl com">   of length [k] of the string [dna].  Keys point to mutable values</span>
<span class="hl com">   for speed (to avoid looking twice the same key to reinsert the</span>
<span class="hl com">   value). *)</span>
<span class="hl kwa">let</span> count <span class="hl opt">=</span> <span class="hl kwc">H</span><span class="hl opt">.</span>create <span class="hl kwc">S</span><span class="hl opt">.</span>size
<span class="hl kwa">let</span> counts k dna <span class="hl opt">=</span>
  <span class="hl kwc">H</span><span class="hl opt">.</span>clear count<span class="hl opt">;</span>
  <span class="hl kwa">let</span> key <span class="hl opt">=</span> <span class="hl kwc">String</span><span class="hl opt">.</span>create k <span class="hl kwa">in</span>
    <span class="hl kwa">for</span> i <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> <span class="hl kwc">String</span><span class="hl opt">.</span>length dna <span class="hl opt">-</span> k <span class="hl kwa">do</span>
      <span class="hl kwc">String</span><span class="hl opt">.</span>unsafe_blit dna i key <span class="hl num">0</span> k<span class="hl opt">;</span>
      <span class="hl kwa">try</span> incr<span class="hl opt">(</span><span class="hl kwc">H</span><span class="hl opt">.</span>find count key<span class="hl opt">)</span> <span class="hl kwa">with</span> <span class="hl kwd">Not_found</span> <span class="hl opt">-&gt;</span> <span class="hl kwc">H</span><span class="hl opt">.</span>add count <span class="hl opt">(</span><span class="hl kwc">String</span><span class="hl opt">.</span>copy key<span class="hl opt">) (</span><span class="hl kwb">ref</span> <span class="hl num">1</span><span class="hl opt">)</span>
    <span class="hl kwa">done</span><span class="hl opt">;</span>
    count

<span class="hl com">(* [write_frequencies k dna] writes the frequencies for a</span>
<span class="hl com">   reading-frame of length [k] sorted by descending frequency and then</span>
<span class="hl com">   ascending k-nucleotide key. *)</span>
<span class="hl kwa">let</span> compare_freq <span class="hl opt">((</span>k1<span class="hl opt">:</span><span class="hl kwb">string</span><span class="hl opt">),(</span>f1<span class="hl opt">:</span><span class="hl kwb">float</span><span class="hl opt">)) (</span>k2<span class="hl opt">,</span> f2<span class="hl opt">) =</span>
  <span class="hl kwa">if</span> f1 <span class="hl opt">&gt;</span> f2 <span class="hl kwa">then</span> <span class="hl opt">-</span><span class="hl num">1</span> <span class="hl kwa">else if</span> f1 <span class="hl opt">&lt;</span> f2 <span class="hl kwa">then</span> <span class="hl num">1</span> <span class="hl kwa">else</span> compare k1 k2

<span class="hl kwa">let</span> write_frequencies k dna <span class="hl opt">=</span>
  <span class="hl kwa">let</span> cnt <span class="hl opt">=</span> counts k dna <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> tot <span class="hl opt">=</span> <span class="hl kwb">float</span><span class="hl opt">(</span><span class="hl kwc">H</span><span class="hl opt">.</span>fold <span class="hl opt">(</span><span class="hl kwa">fun</span> _ n t <span class="hl opt">-&gt; !</span>n <span class="hl opt">+</span> t<span class="hl opt">)</span> cnt <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> frq <span class="hl opt">=</span> <span class="hl kwc">H</span><span class="hl opt">.</span>fold <span class="hl opt">(</span><span class="hl kwa">fun</span> k n l <span class="hl opt">-&gt; (</span>k<span class="hl opt">,</span> <span class="hl num">100</span><span class="hl opt">. *.</span> <span class="hl kwb">float</span> <span class="hl opt">!</span>n <span class="hl opt">/.</span> tot<span class="hl opt">) ::</span> l<span class="hl opt">)</span> cnt <span class="hl opt">[]</span> <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> frq <span class="hl opt">=</span> <span class="hl kwc">List</span><span class="hl opt">.</span>sort compare_freq frq <span class="hl kwa">in</span>
  <span class="hl kwc">List</span><span class="hl opt">.</span>iter <span class="hl opt">(</span><span class="hl kwa">fun</span> <span class="hl opt">(</span>k<span class="hl opt">,</span>f<span class="hl opt">) -&gt;</span> <span class="hl kwc">Printf</span><span class="hl opt">.</span>printf <span class="hl str">&quot;%s %.3f</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> k f<span class="hl opt">)</span> frq<span class="hl opt">;</span>
  print_string <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span>

<span class="hl kwa">let</span> write_count seq dna <span class="hl opt">=</span>
  <span class="hl kwa">let</span> cnt <span class="hl opt">=</span> counts <span class="hl opt">(</span><span class="hl kwc">String</span><span class="hl opt">.</span>length seq<span class="hl opt">)</span> dna <span class="hl kwa">in</span>
  <span class="hl kwc">Printf</span><span class="hl opt">.</span>printf <span class="hl str">&quot;%d</span><span class="hl esc">\t</span><span class="hl str">%s</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> <span class="hl opt">(</span><span class="hl kwa">try</span> <span class="hl opt">!(</span><span class="hl kwc">H</span><span class="hl opt">.</span>find cnt seq<span class="hl opt">)</span> <span class="hl kwa">with</span> <span class="hl kwd">Not_found</span> <span class="hl opt">-&gt;</span> <span class="hl num">0</span><span class="hl opt">)</span> seq

<span class="hl com">(* Extract DNA sequence &quot;THREE&quot; from stdin *)</span>
<span class="hl kwa">let</span> dna_three <span class="hl opt">=</span>
  <span class="hl kwa">let</span> is_not_three s <span class="hl opt">=</span> <span class="hl kwa">try</span> <span class="hl kwc">String</span><span class="hl opt">.</span>sub s <span class="hl num">0 6</span> <span class="hl opt">&lt;&gt;</span> <span class="hl str">&quot;&gt;THREE&quot;</span> <span class="hl kwa">with</span> _ <span class="hl opt">-&gt;</span> <span class="hl kwa">true in</span>
  <span class="hl kwa">while</span> is_not_three<span class="hl opt">(</span>input_line stdin<span class="hl opt">)</span> <span class="hl kwa">do</span> <span class="hl opt">()</span> <span class="hl kwa">done</span><span class="hl opt">;</span>
  <span class="hl kwa">let</span> buf <span class="hl opt">=</span> <span class="hl kwc">Buffer</span><span class="hl opt">.</span>create <span class="hl num">1000</span> <span class="hl kwa">in</span>
  <span class="hl com">(* Skip possible comment *)</span>
  <span class="hl opt">(</span><span class="hl kwa">try while true do</span>
     <span class="hl kwa">let</span> line <span class="hl opt">=</span> input_line stdin <span class="hl kwa">in</span>
     <span class="hl kwa">if</span> line<span class="hl opt">.[</span><span class="hl num">0</span><span class="hl opt">] &lt;&gt;</span> <span class="hl str">';'</span> <span class="hl kwa">then</span>
       <span class="hl opt">(</span><span class="hl kwc">Buffer</span><span class="hl opt">.</span>add_string buf <span class="hl opt">(</span><span class="hl kwc">String</span><span class="hl opt">.</span>uppercase line<span class="hl opt">);</span> raise <span class="hl kwd">Exit</span><span class="hl opt">)</span>
   <span class="hl kwa">done with</span> _ <span class="hl opt">-&gt; ());</span>
  <span class="hl com">(* Read the DNA sequence *)</span>
  <span class="hl opt">(</span><span class="hl kwa">try while true do</span>
       <span class="hl kwa">let</span> line <span class="hl opt">=</span> input_line stdin <span class="hl kwa">in</span>
       <span class="hl kwa">if</span> line<span class="hl opt">.[</span><span class="hl num">0</span><span class="hl opt">] =</span> <span class="hl str">'&gt;'</span> <span class="hl kwa">then</span> raise <span class="hl kwd">End_of_file</span><span class="hl opt">;</span>
       <span class="hl kwc">Buffer</span><span class="hl opt">.</span>add_string buf <span class="hl opt">(</span><span class="hl kwc">String</span><span class="hl opt">.</span>uppercase line<span class="hl opt">)</span>
   <span class="hl kwa">done with</span> <span class="hl kwd">End_of_file</span> <span class="hl opt">-&gt; ());</span>
  <span class="hl kwc">Buffer</span><span class="hl opt">.</span>contents buf

<span class="hl kwa">let</span> <span class="hl opt">() =</span> <span class="hl kwc">Gc</span><span class="hl opt">.</span>set <span class="hl opt">{ (</span><span class="hl kwc">Gc</span><span class="hl opt">.</span>get<span class="hl opt">())</span> <span class="hl kwa">with</span> <span class="hl kwc">Gc</span><span class="hl opt">.</span>minor_heap_size <span class="hl opt">=</span> <span class="hl num">1024</span> <span class="hl opt">*</span> <span class="hl num">2048</span> <span class="hl opt">}</span>

<span class="hl kwa">let</span> <span class="hl opt">() =</span>
  <span class="hl kwc">List</span><span class="hl opt">.</span>iter <span class="hl opt">(</span><span class="hl kwa">fun</span> i <span class="hl opt">-&gt;</span> write_frequencies i dna_three<span class="hl opt">) [</span><span class="hl num">1</span><span class="hl opt">;</span> <span class="hl num">2</span><span class="hl opt">];</span>
  <span class="hl kwc">List</span><span class="hl opt">.</span>iter <span class="hl opt">(</span><span class="hl kwa">fun</span> k <span class="hl opt">-&gt;</span> write_count k dna_three<span class="hl opt">)</span>
    <span class="hl opt">[</span><span class="hl str">&quot;GGT&quot;</span><span class="hl opt">;</span> <span class="hl str">&quot;GGTA&quot;</span><span class="hl opt">;</span> <span class="hl str">&quot;GGTATT&quot;</span><span class="hl opt">;</span> <span class="hl str">&quot;GGTATTTTAATT&quot;</span><span class="hl opt">;</span> <span class="hl str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="hl opt">]</span>
