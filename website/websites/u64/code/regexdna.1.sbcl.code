<span class="hl slc">;;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;;; http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">;;;</span>
<span class="hl slc">;;; contributed by Shyamal Prasad</span>


<span class="hl opt">(</span><span class="hl kwa">eval-when</span> <span class="hl opt">(:</span>compile-toplevel <span class="hl opt">:</span>load-toplevel <span class="hl opt">:</span>execute<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">require</span> <span class="hl opt">:</span>asdf<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">require</span> <span class="hl opt">:</span>cl-ppcre<span class="hl opt">))</span>

<span class="hl opt">(</span><span class="hl kwa">defparameter</span> <span class="hl opt">*</span>regex-list<span class="hl opt">*</span>
  <span class="hl opt">(</span><span class="hl kwa">list</span>
   <span class="hl str">&quot;agggtaaa|tttaccct&quot;</span>
   <span class="hl str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span>
   <span class="hl str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span>
   <span class="hl str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span>
   <span class="hl str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span>
   <span class="hl str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span>
   <span class="hl str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span>
   <span class="hl str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span>
   <span class="hl str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span><span class="hl opt">))</span>

<span class="hl opt">(</span><span class="hl kwa">defparameter</span> <span class="hl opt">*</span>alternatives<span class="hl opt">*</span>
  <span class="hl opt">'((</span><span class="hl str">&quot;B&quot;</span> <span class="hl str">&quot;(c|g|t)&quot;</span><span class="hl opt">)  (</span><span class="hl str">&quot;D&quot;</span> <span class="hl str">&quot;(a|g|t)&quot;</span><span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl str">&quot;H&quot;</span> <span class="hl str">&quot;(a|c|t)&quot;</span><span class="hl opt">)  (</span><span class="hl str">&quot;K&quot;</span> <span class="hl str">&quot;(g|t)&quot;</span><span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl str">&quot;M&quot;</span> <span class="hl str">&quot;(a|c)&quot;</span><span class="hl opt">)    (</span><span class="hl str">&quot;N&quot;</span> <span class="hl str">&quot;(a|c|g|t)&quot;</span><span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl str">&quot;R&quot;</span> <span class="hl str">&quot;(a|g)&quot;</span><span class="hl opt">)    (</span><span class="hl str">&quot;S&quot;</span> <span class="hl str">&quot;(c|t)&quot;</span><span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl str">&quot;V&quot;</span> <span class="hl str">&quot;(a|c|g)&quot;</span><span class="hl opt">)  (</span><span class="hl str">&quot;W&quot;</span> <span class="hl str">&quot;(a|t)&quot;</span><span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl str">&quot;Y&quot;</span> <span class="hl str">&quot;(c|t)&quot;</span><span class="hl opt">)))</span>


<span class="hl slc">;; Read in the entire file as the benchmark specifieds</span>
<span class="hl opt">(</span><span class="hl kwa">defun</span> get-input-chars <span class="hl opt">(</span><span class="hl kwa">stream</span><span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">with-output-to-string</span>
    <span class="hl opt">(</span><span class="hl kwa">output</span><span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl kwa">loop</span> while <span class="hl opt">(</span><span class="hl kwa">multiple-value-bind</span>
		    <span class="hl opt">(</span><span class="hl kwa">line</span> missing<span class="hl opt">) (</span><span class="hl kwa">read-line</span> stream nil<span class="hl opt">)</span>
		  <span class="hl opt">(</span><span class="hl kwa">when</span> line <span class="hl opt">(</span><span class="hl kwa">write-string</span> line output<span class="hl opt">))</span>
		  <span class="hl opt">(</span><span class="hl kwa">unless</span> missing <span class="hl opt">(</span><span class="hl kwa">write-char</span> <span class="hl opt">#</span>\Newline output<span class="hl opt">))</span>
		  line<span class="hl opt">))))</span>
			 


<span class="hl opt">(</span><span class="hl kwa">defun</span> main <span class="hl opt">(&amp;</span>optional <span class="hl opt">(</span><span class="hl kwa">stream</span> <span class="hl opt">*</span>standard-input<span class="hl opt">*))</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span><span class="hl opt">*</span>
      <span class="hl slc">;; Benchmark definition requires using a regex to</span>
      <span class="hl slc">;; remove headers/newlines from the file</span>
      <span class="hl opt">((</span><span class="hl kwa">text</span> <span class="hl opt">(</span><span class="hl kwa">get-input-chars</span> stream<span class="hl opt">))</span>
       <span class="hl opt">(</span><span class="hl kwa">sequence</span>
	<span class="hl opt">(</span><span class="hl kwa">cl-ppcre</span><span class="hl opt">:</span>regex-replace-all <span class="hl str">&quot;&gt;[^</span><span class="hl esc">\\</span><span class="hl str">n]*</span><span class="hl esc">\\</span><span class="hl str">n|</span><span class="hl esc">\\</span><span class="hl str">n&quot;</span> text <span class="hl str">&quot;&quot;</span><span class="hl opt">)))</span>

    <span class="hl slc">;; Count and print the number of subsequences</span>
    <span class="hl opt">(</span><span class="hl kwa">loop</span> for regex in <span class="hl opt">*</span>regex-list<span class="hl opt">*</span> do
	  <span class="hl opt">(</span><span class="hl kwa">format</span> t <span class="hl str">&quot;~a ~a~%&quot;</span> regex
		  <span class="hl opt">(/ (</span><span class="hl kwa">length</span> <span class="hl opt">(</span><span class="hl kwa">cl-ppcre</span><span class="hl opt">:</span>all-matches regex sequence<span class="hl opt">))</span> <span class="hl num">2</span><span class="hl opt">)))</span>
    
    <span class="hl slc">;; Print lengths</span>
    <span class="hl opt">(</span><span class="hl kwa">format</span> t <span class="hl str">&quot;~%~a~%&quot;</span> <span class="hl opt">(</span><span class="hl kwa">length</span> text<span class="hl opt">))</span>
    <span class="hl opt">(</span><span class="hl kwa">format</span> t <span class="hl str">&quot;~a~%&quot;</span> <span class="hl opt">(</span><span class="hl kwa">length</span> sequence<span class="hl opt">))</span>

    <span class="hl slc">;; do the alternative substitution and create the new text string</span>
    <span class="hl slc">;; that the benchmark definition requires</span>
    <span class="hl opt">(</span><span class="hl kwa">loop</span> for pair in <span class="hl opt">*</span>alternatives<span class="hl opt">*</span> do
	  <span class="hl opt">(</span><span class="hl kwa">setf</span> sequence
		<span class="hl opt">(</span><span class="hl kwa">cl-ppcre</span><span class="hl opt">:</span>regex-replace-all <span class="hl opt">(</span><span class="hl kwa">car</span> pair<span class="hl opt">)</span> sequence <span class="hl opt">(</span><span class="hl kwa">cadr</span> pair<span class="hl opt">))))</span>
    <span class="hl opt">(</span><span class="hl kwa">format</span> t <span class="hl str">&quot;~a~%&quot;</span> <span class="hl opt">(</span><span class="hl kwa">length</span> sequence<span class="hl opt">))))</span>
