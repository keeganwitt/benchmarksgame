<span class="hl opt">#</span>lang racket<span class="hl opt">/</span>base

<span class="hl slc">;;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;;; http://benchmarksgame.alioth.debian.org/</span>

<span class="hl slc">;;; Derived from the Chicken Scheme variant by Anthony Borla</span>
<span class="hl slc">;;; contributed by Matthew Flatt</span>


<span class="hl opt">(</span><span class="hl kwa">require</span> racket<span class="hl opt">/</span>cmdline<span class="hl opt">)</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">+</span>alu<span class="hl opt">+</span>
  <span class="hl opt">(</span><span class="hl kwa">bytes-append</span>
   <span class="hl opt">#</span><span class="hl str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span>
   <span class="hl opt">#</span><span class="hl str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span>
   <span class="hl opt">#</span><span class="hl str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span>
   <span class="hl opt">#</span><span class="hl str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span>
   <span class="hl opt">#</span><span class="hl str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span>
   <span class="hl opt">#</span><span class="hl str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span>
   <span class="hl opt">#</span><span class="hl str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span><span class="hl opt">))</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">+</span>iub<span class="hl opt">+</span>
  <span class="hl opt">(</span><span class="hl kwa">list</span>
   <span class="hl opt">'(#</span><span class="hl esc">\a</span> . <span class="hl num">0.27</span><span class="hl opt">) '(#</span>\c . <span class="hl num">0.12</span><span class="hl opt">) '(#</span>\g . <span class="hl num">0.12</span><span class="hl opt">) '(#</span><span class="hl esc">\t</span> . <span class="hl num">0.27</span><span class="hl opt">) '(#</span>\B . <span class="hl num">0.02</span><span class="hl opt">)</span>
   <span class="hl opt">'(#</span>\D . <span class="hl num">0.02</span><span class="hl opt">) '(#</span>\H . <span class="hl num">0.02</span><span class="hl opt">) '(#</span>\K . <span class="hl num">0.02</span><span class="hl opt">) '(#</span>\M . <span class="hl num">0.02</span><span class="hl opt">) '(#</span>\N . <span class="hl num">0.02</span><span class="hl opt">)</span>
   <span class="hl opt">'(#</span>\R . <span class="hl num">0.02</span><span class="hl opt">) '(#</span>\S . <span class="hl num">0.02</span><span class="hl opt">) '(#</span>\V . <span class="hl num">0.02</span><span class="hl opt">) '(#</span>\W . <span class="hl num">0.02</span><span class="hl opt">) '(#</span>\Y . <span class="hl num">0.02</span><span class="hl opt">)))</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">+</span>homosapien<span class="hl opt">+</span>
  <span class="hl opt">(</span><span class="hl kwa">list</span>
   <span class="hl opt">'(#</span><span class="hl esc">\a</span> . <span class="hl num">0.3029549426680</span><span class="hl opt">) '(#</span>\c . <span class="hl num">0.1979883004921</span><span class="hl opt">)</span>
   <span class="hl opt">'(#</span>\g . <span class="hl num">0.1975473066391</span><span class="hl opt">) '(#</span><span class="hl esc">\t</span> . <span class="hl num">0.3015094502008</span><span class="hl opt">)))</span>

<span class="hl slc">;; -------------</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">+</span>line-size<span class="hl opt">+</span> <span class="hl num">60</span><span class="hl opt">)</span>

<span class="hl slc">;; -------------------------------</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">make-random</span> seed<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span><span class="hl opt">* ((</span><span class="hl kwa">ia</span> <span class="hl num">3877</span><span class="hl opt">) (</span><span class="hl kwa">ic</span> <span class="hl num">29573</span><span class="hl opt">) (</span><span class="hl kwa">im</span> <span class="hl num">139968</span><span class="hl opt">) (</span><span class="hl kwa">last</span> seed<span class="hl opt">))</span>
    <span class="hl opt">(</span><span class="hl kwa">lambda</span> <span class="hl opt">(</span><span class="hl kwa">max</span><span class="hl opt">)</span>
      <span class="hl opt">(</span><span class="hl kwa">set</span><span class="hl opt">!</span> last <span class="hl opt">(</span><span class="hl kwa">modulo</span> <span class="hl opt">(+</span> ic <span class="hl opt">(*</span> last ia<span class="hl opt">))</span> im<span class="hl opt">))</span>
      <span class="hl opt">(/ (*</span> max last<span class="hl opt">)</span> im<span class="hl opt">))))</span>

<span class="hl slc">;; -------------------------------</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">make-cumulative-table</span> frequency-table<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">([</span>cumulative <span class="hl num">0.0</span><span class="hl opt">])</span>
    <span class="hl opt">(</span><span class="hl kwa">for</span><span class="hl opt">/</span>list <span class="hl opt">([</span>x frequency-table<span class="hl opt">])</span>
      <span class="hl opt">(</span><span class="hl kwa">set</span><span class="hl opt">!</span> cumulative <span class="hl opt">(+</span> cumulative <span class="hl opt">(</span><span class="hl kwa">cdr</span> x<span class="hl opt">)))</span> 
      <span class="hl opt">(</span><span class="hl kwa">cons</span> <span class="hl opt">(</span><span class="hl kwa">char-</span><span class="hl opt">&gt;</span>integer <span class="hl opt">(</span><span class="hl kwa">car</span> x<span class="hl opt">))</span> cumulative<span class="hl opt">))))</span>

<span class="hl slc">;; -------------</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> random-next <span class="hl opt">(</span><span class="hl kwa">make-random</span> <span class="hl num">42</span><span class="hl opt">))</span>
<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">+</span>segmarker<span class="hl opt">+</span> <span class="hl str">&quot;&gt;&quot;</span><span class="hl opt">)</span>

<span class="hl slc">;; -------------</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">select-random</span> cumulative-table<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">((</span><span class="hl kwa">rvalue</span> <span class="hl opt">(</span><span class="hl kwa">random-next</span> <span class="hl num">1.0</span><span class="hl opt">)))</span>
    <span class="hl opt">(</span><span class="hl kwa">let</span> select-over-threshold <span class="hl opt">([</span>table cumulative-table<span class="hl opt">])</span>
      <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(&lt;=</span> rvalue <span class="hl opt">(</span><span class="hl kwa">cdar</span> table<span class="hl opt">))</span>
          <span class="hl opt">(</span><span class="hl kwa">caar</span> table<span class="hl opt">)</span>
          <span class="hl opt">(</span><span class="hl kwa">select-over-threshold</span> <span class="hl opt">(</span><span class="hl kwa">cdr</span> table<span class="hl opt">))))))</span>

<span class="hl slc">;; -------------</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">repeat-fasta</span> id desc n_ sequence line-length<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">((</span><span class="hl kwa">seqlen</span> <span class="hl opt">(</span><span class="hl kwa">bytes-length</span> sequence<span class="hl opt">))</span>
        <span class="hl opt">(</span><span class="hl kwa">out</span> <span class="hl opt">(</span><span class="hl kwa">current-output-port</span><span class="hl opt">)))</span>
    <span class="hl opt">(</span><span class="hl kwa">display</span> <span class="hl opt">(</span><span class="hl kwa">string-append</span> <span class="hl opt">+</span>segmarker<span class="hl opt">+</span> id <span class="hl str">&quot; &quot;</span> desc <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">)</span> out<span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl kwa">let</span> loop-o <span class="hl opt">((</span><span class="hl kwa">n</span> n_<span class="hl opt">) (</span><span class="hl kwa">k</span> <span class="hl num">0</span><span class="hl opt">))</span>
      <span class="hl opt">(</span><span class="hl kwa">unless</span> <span class="hl opt">(&lt;=</span> n <span class="hl num">0</span><span class="hl opt">)</span> 
        <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">((</span><span class="hl kwa">m</span> <span class="hl opt">(</span><span class="hl kwa">min</span> n line-length<span class="hl opt">)))</span>
          <span class="hl opt">(</span><span class="hl kwa">let</span> loop-i <span class="hl opt">((</span><span class="hl kwa">i</span> <span class="hl num">0</span><span class="hl opt">) (</span><span class="hl kwa">k</span> k<span class="hl opt">))</span>
            <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(&gt;=</span> i m<span class="hl opt">)</span> 
                <span class="hl opt">(</span><span class="hl kwa">begin</span>
                  <span class="hl opt">(</span><span class="hl kwa">newline</span> out<span class="hl opt">)</span>
                  <span class="hl opt">(</span><span class="hl kwa">loop-o</span> <span class="hl opt">(</span><span class="hl kwa">-</span> n line-length<span class="hl opt">)</span> k<span class="hl opt">))</span>
                <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">([</span>k <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(=</span> k seqlen<span class="hl opt">)</span> <span class="hl num">0</span> k<span class="hl opt">)])</span>
                  <span class="hl opt">(</span><span class="hl kwa">write-byte</span> <span class="hl opt">(</span><span class="hl kwa">bytes-ref</span> sequence k<span class="hl opt">)</span> out<span class="hl opt">)</span>
                  <span class="hl opt">(</span><span class="hl kwa">loop-i</span> <span class="hl opt">(</span><span class="hl kwa">add1</span> i<span class="hl opt">) (</span><span class="hl kwa">add1</span> k<span class="hl opt">))))))))))</span>

<span class="hl slc">;; -------------</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">random-fasta</span> id desc n_ cumulative-table line-length<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">((</span><span class="hl kwa">out</span> <span class="hl opt">(</span><span class="hl kwa">current-output-port</span><span class="hl opt">)))</span>
    <span class="hl opt">(</span><span class="hl kwa">display</span> <span class="hl opt">(</span><span class="hl kwa">string-append</span> <span class="hl opt">+</span>segmarker<span class="hl opt">+</span> id <span class="hl str">&quot; &quot;</span> desc <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">)</span> out<span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl kwa">let</span> loop-o <span class="hl opt">((</span><span class="hl kwa">n</span> n_<span class="hl opt">))</span>
      <span class="hl opt">(</span><span class="hl kwa">unless</span> <span class="hl opt">(&lt;=</span> n <span class="hl num">0</span><span class="hl opt">)</span>
        <span class="hl opt">(</span><span class="hl kwa">for</span> <span class="hl opt">([</span>i <span class="hl opt">(</span><span class="hl kwa">in-range</span> <span class="hl opt">(</span><span class="hl kwa">min</span> n line-length<span class="hl opt">))])</span>
          <span class="hl opt">(</span><span class="hl kwa">write-byte</span> <span class="hl opt">(</span><span class="hl kwa">select-random</span> cumulative-table<span class="hl opt">)</span> out<span class="hl opt">))</span>
        <span class="hl opt">(</span><span class="hl kwa">newline</span> out<span class="hl opt">)</span>
        <span class="hl opt">(</span><span class="hl kwa">loop-o</span> <span class="hl opt">(</span><span class="hl kwa">-</span> n line-length<span class="hl opt">))))))</span>

<span class="hl slc">;; -------------------------------</span>
  
<span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">((</span><span class="hl kwa">n</span> <span class="hl opt">(</span><span class="hl kwa">command-line</span> <span class="hl opt">#:</span>args <span class="hl opt">(</span><span class="hl kwa">n</span><span class="hl opt">) (</span><span class="hl kwa">string-</span><span class="hl opt">&gt;</span>number n<span class="hl opt">))))</span>
    
  <span class="hl opt">(</span><span class="hl kwa">repeat-fasta</span> <span class="hl str">&quot;ONE&quot;</span> <span class="hl str">&quot;Homo sapiens alu&quot;</span> <span class="hl opt">(*</span> n <span class="hl num">2</span><span class="hl opt">) +</span>alu<span class="hl opt">+ +</span>line-size<span class="hl opt">+)</span>
  
  <span class="hl opt">(</span><span class="hl kwa">random-fasta</span> <span class="hl str">&quot;TWO&quot;</span> <span class="hl str">&quot;IUB ambiguity codes&quot;</span> <span class="hl opt">(*</span> n <span class="hl num">3</span><span class="hl opt">)</span>
                <span class="hl opt">(</span><span class="hl kwa">make-cumulative-table</span> <span class="hl opt">+</span>iub<span class="hl opt">+) +</span>line-size<span class="hl opt">+)</span>
  
  <span class="hl opt">(</span><span class="hl kwa">random-fasta</span> <span class="hl str">&quot;THREE&quot;</span> <span class="hl str">&quot;Homo sapiens frequency&quot;</span> <span class="hl opt">(*</span> n <span class="hl num">5</span><span class="hl opt">)</span>
                <span class="hl opt">(</span><span class="hl kwa">make-cumulative-table</span> <span class="hl opt">+</span>homosapien<span class="hl opt">+) +</span>line-size<span class="hl opt">+))</span>
