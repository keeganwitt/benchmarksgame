<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by Stefan Westen</span>
<span class="hl com"></span>
<span class="hl com">   loosely based on Ben St. John's and Kevin Barnes' implementation</span>
<span class="hl com"></span>
<span class="hl com">   Main improvements:</span>
<span class="hl com">      - Check for isolated cells instead of bad islands</span>
<span class="hl com">      - Pre-calculate lists based on availability of 3 neighbouring cells</span>
<span class="hl com">      - OpenMP tasks</span>
<span class="hl com">*/</span>

<span class="hl ppc">#include &lt;stdio.h&gt;</span>
<span class="hl ppc">#include &lt;omp.h&gt;</span>

<span class="hl kwb">const int</span> nPieceCount <span class="hl opt">=</span> <span class="hl num">10</span><span class="hl opt">;</span>
<span class="hl kwb">const int</span> pieces<span class="hl opt">[</span><span class="hl num">10</span><span class="hl opt">][</span><span class="hl num">5</span><span class="hl opt">][</span><span class="hl num">2</span><span class="hl opt">]  = {</span>
   <span class="hl opt">{{</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">}, {</span><span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">}, {</span><span class="hl num">2</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">}, {</span><span class="hl num">3</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">}, {</span><span class="hl num">3</span><span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">}},</span>
   <span class="hl opt">{{</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">}, {</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">}, {-</span><span class="hl num">2</span><span class="hl opt">,</span> <span class="hl num">2</span><span class="hl opt">}, {-</span><span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">2</span><span class="hl opt">}, {-</span><span class="hl num">3</span><span class="hl opt">,</span> <span class="hl num">3</span><span class="hl opt">}},</span>
   <span class="hl opt">{{</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">}, {</span><span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">}, {</span><span class="hl num">2</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">}, {-</span><span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">}, {-</span><span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">2</span><span class="hl opt">}},</span>
   <span class="hl opt">{{</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">}, {</span><span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">}, {</span><span class="hl num">2</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">}, {</span><span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">}, {</span><span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">2</span><span class="hl opt">}},</span>
   <span class="hl opt">{{</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">}, {</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">}, {</span><span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">}, {-</span><span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">2</span><span class="hl opt">}, {</span><span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">2</span><span class="hl opt">}},</span>
   <span class="hl opt">{{</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">}, {</span><span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">}, {-</span><span class="hl num">2</span><span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">}, {-</span><span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">}, {</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">}},</span>
   <span class="hl opt">{{</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">}, {</span><span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">}, {</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">}, {-</span><span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">2</span><span class="hl opt">}, {-</span><span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">3</span><span class="hl opt">}},</span>
   <span class="hl opt">{{</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">}, {</span><span class="hl num">2</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">}, {-</span><span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">}, {</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">}, {</span><span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">}},</span>
   <span class="hl opt">{{</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">}, {</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">}, {</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">2</span><span class="hl opt">}, {</span><span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">2</span><span class="hl opt">}, {</span><span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">3</span><span class="hl opt">}},</span>
   <span class="hl opt">{{</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">}, {</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">}, {</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">2</span><span class="hl opt">}, {-</span><span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">3</span><span class="hl opt">}, {</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">3</span><span class="hl opt">}}</span>
   <span class="hl opt">};</span>

<span class="hl kwb">unsigned int</span> g_AllMasks<span class="hl opt">[</span><span class="hl num">8192</span><span class="hl opt">];</span>
<span class="hl kwb">unsigned int</span> <span class="hl opt">*</span>g_MaskStart<span class="hl opt">[</span><span class="hl num">50</span><span class="hl opt">][</span><span class="hl num">8</span><span class="hl opt">];</span>

<span class="hl kwb">unsigned char</span> g_min_solution<span class="hl opt">[</span><span class="hl num">50</span><span class="hl opt">],</span> g_max_solution<span class="hl opt">[</span><span class="hl num">50</span><span class="hl opt">];</span>
<span class="hl kwb">unsigned int</span> g_solutions<span class="hl opt">;</span>

<span class="hl kwb">unsigned int</span> EvenRowsLookup<span class="hl opt">[</span><span class="hl num">50</span><span class="hl opt">];</span>
<span class="hl kwb">unsigned int</span> LeftBorderLookup<span class="hl opt">[</span><span class="hl num">50</span><span class="hl opt">];</span>
   
<span class="hl kwb">bool</span> <span class="hl kwd">GoodPiece</span><span class="hl opt">(</span><span class="hl kwb">unsigned int</span> mask<span class="hl opt">,</span> <span class="hl kwb">unsigned int</span> pos<span class="hl opt">)</span>
<span class="hl opt">{</span>
   <span class="hl kwb">bool</span> <span class="hl kwd">bOK</span><span class="hl opt">(</span><span class="hl kwa">true</span><span class="hl opt">);</span>
   <span class="hl kwb">const unsigned long long</span> even_rows <span class="hl opt">=</span> <span class="hl num">0xf07c1f07c1f07c1f</span><span class="hl opt">;</span>
   <span class="hl kwb">const unsigned long long</span> odd_rows <span class="hl opt">= ~</span>even_rows<span class="hl opt">;</span>   
   <span class="hl kwb">const unsigned long long</span> left_border <span class="hl opt">=</span> <span class="hl num">0x1084210842108421</span><span class="hl opt">;</span>
   <span class="hl kwb">const unsigned long long</span> right_border <span class="hl opt">=</span> left_border <span class="hl opt">&gt;&gt;</span> <span class="hl num">1</span><span class="hl opt">;</span>
   <span class="hl kwb">unsigned long long</span> a<span class="hl opt">,</span>b<span class="hl opt">,</span>a_old<span class="hl opt">,</span>s1<span class="hl opt">,</span>s2<span class="hl opt">,</span>s3<span class="hl opt">,</span>s4<span class="hl opt">,</span>s5<span class="hl opt">,</span>s6<span class="hl opt">,</span>s7<span class="hl opt">,</span>s8<span class="hl opt">;</span>
   
   b <span class="hl opt">= (((</span><span class="hl kwb">unsigned long long</span><span class="hl opt">)</span>mask<span class="hl opt">) &lt;&lt;</span> pos<span class="hl opt">) |</span> <span class="hl num">0xFFFC000000000000</span>ULL<span class="hl opt">;</span>
   
   b <span class="hl opt">= ~</span>b<span class="hl opt">;</span>

   <span class="hl kwa">while</span> <span class="hl opt">(</span>b<span class="hl opt">)</span>
   <span class="hl opt">{</span>
      a <span class="hl opt">=</span> b<span class="hl opt">&amp;-</span>b<span class="hl opt">;</span>

      <span class="hl kwa">do</span> 
      <span class="hl opt">{</span>
         s1 <span class="hl opt">=</span> a <span class="hl opt">&lt;&lt;</span> <span class="hl num">5</span><span class="hl opt">;</span>
         s2 <span class="hl opt">=</span> a <span class="hl opt">&gt;&gt;</span> <span class="hl num">5</span><span class="hl opt">;</span>
         s3 <span class="hl opt">= (</span>a <span class="hl opt">&lt;&lt;</span> <span class="hl num">1</span><span class="hl opt">)&amp;(~</span>left_border<span class="hl opt">);</span>
         s4 <span class="hl opt">= (</span>a <span class="hl opt">&gt;&gt;</span> <span class="hl num">1</span><span class="hl opt">)&amp;(~</span>right_border<span class="hl opt">);</span>
         s5 <span class="hl opt">= ((</span>a <span class="hl opt">&amp;</span> even_rows<span class="hl opt">) &gt;&gt;</span> <span class="hl num">6</span><span class="hl opt">) &amp;(~</span>right_border<span class="hl opt">);</span>
         s6 <span class="hl opt">= ((</span>a <span class="hl opt">&amp;</span> even_rows<span class="hl opt">) &lt;&lt;</span> <span class="hl num">4</span><span class="hl opt">) &amp;(~</span>right_border<span class="hl opt">);</span>
         s7 <span class="hl opt">= ((</span>a <span class="hl opt">&amp;</span> odd_rows<span class="hl opt">) &gt;&gt;</span> <span class="hl num">4</span><span class="hl opt">) &amp; (~</span>left_border<span class="hl opt">);</span>
         s8 <span class="hl opt">= ((</span>a <span class="hl opt">&amp;</span> odd_rows<span class="hl opt">) &lt;&lt;</span> <span class="hl num">6</span><span class="hl opt">) &amp;(~</span>left_border<span class="hl opt">);</span>
         a_old <span class="hl opt">=</span> a<span class="hl opt">;</span>
         a <span class="hl opt">= (</span>a<span class="hl opt">|</span>s1<span class="hl opt">|</span>s2<span class="hl opt">|</span>s3<span class="hl opt">|</span>s4<span class="hl opt">|</span>s5<span class="hl opt">|</span>s6<span class="hl opt">|</span>s7<span class="hl opt">|</span>s8<span class="hl opt">)&amp;</span>b<span class="hl opt">;</span>
      <span class="hl opt">}</span> <span class="hl kwa">while</span> <span class="hl opt">(</span>a_old<span class="hl opt">!=</span>a<span class="hl opt">);</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">__builtin_popcountll</span><span class="hl opt">(</span>a<span class="hl opt">)%</span><span class="hl num">5</span><span class="hl opt">!=</span><span class="hl num">0</span><span class="hl opt">)</span>
      <span class="hl opt">{</span>
         bOK <span class="hl opt">=</span> <span class="hl kwa">false</span><span class="hl opt">;</span>
         <span class="hl kwa">break</span><span class="hl opt">;</span>
      <span class="hl opt">}</span>
      b <span class="hl opt">=</span> b <span class="hl opt">^</span> a<span class="hl opt">;</span>
   <span class="hl opt">}</span>
   <span class="hl kwa">return</span> bOK<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwb">void</span> <span class="hl kwd">Initialise</span><span class="hl opt">()</span>
<span class="hl opt">{</span>   
   <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span>i<span class="hl opt">&lt;</span><span class="hl num">50</span><span class="hl opt">;</span>i<span class="hl opt">++)</span>
   <span class="hl opt">{</span>
      EvenRowsLookup<span class="hl opt">[</span>i<span class="hl opt">] =</span> <span class="hl num">0xF07C1F07C1F07C1F</span>ULL <span class="hl opt">&gt;&gt;</span> i<span class="hl opt">;</span>
      LeftBorderLookup<span class="hl opt">[</span>i<span class="hl opt">] =</span> <span class="hl num">0x1084210842108421</span>ULL <span class="hl opt">&gt;&gt;</span> i<span class="hl opt">;</span>
   <span class="hl opt">}</span>
   
   <span class="hl kwb">int</span> <span class="hl kwd">nTotalCount</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">);</span>
   <span class="hl kwb">int</span> x<span class="hl opt">[</span><span class="hl num">5</span><span class="hl opt">],</span> y<span class="hl opt">[</span><span class="hl num">5</span><span class="hl opt">];</span>
   <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> nYBase<span class="hl opt">=</span><span class="hl num">2</span><span class="hl opt">;</span>nYBase<span class="hl opt">&lt;</span><span class="hl num">4</span><span class="hl opt">;</span>nYBase<span class="hl opt">++)</span>
   <span class="hl opt">{</span>
      <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> nXBase<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span>nXBase<span class="hl opt">&lt;</span><span class="hl num">5</span><span class="hl opt">;</span>nXBase<span class="hl opt">++)</span>
      <span class="hl opt">{</span>
         <span class="hl kwb">int</span> nPos <span class="hl opt">=</span> nXBase<span class="hl opt">+</span><span class="hl num">5</span><span class="hl opt">*</span>nYBase<span class="hl opt">;</span>
         g_MaskStart<span class="hl opt">[</span>nPos<span class="hl opt">][</span><span class="hl num">0</span><span class="hl opt">] = &amp;</span>g_AllMasks<span class="hl opt">[</span>nTotalCount<span class="hl opt">];</span>
         <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> nPiece<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span>nPiece<span class="hl opt">&lt;</span>nPieceCount<span class="hl opt">;</span>nPiece<span class="hl opt">++)</span>
         <span class="hl opt">{</span>
            <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> j<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span>j<span class="hl opt">&lt;</span><span class="hl num">5</span><span class="hl opt">;</span>j<span class="hl opt">++)</span>
            <span class="hl opt">{</span>
               x<span class="hl opt">[</span>j<span class="hl opt">] =</span> pieces<span class="hl opt">[</span>nPiece<span class="hl opt">][</span>j<span class="hl opt">][</span><span class="hl num">0</span><span class="hl opt">];</span>
               y<span class="hl opt">[</span>j<span class="hl opt">] =</span> pieces<span class="hl opt">[</span>nPiece<span class="hl opt">][</span>j<span class="hl opt">][</span><span class="hl num">1</span><span class="hl opt">];</span>
            <span class="hl opt">}</span>
         
            <span class="hl kwb">int</span> nCurrentRotation<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span>
            <span class="hl kwa">for</span> <span class="hl opt">(</span>nCurrentRotation<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span>nCurrentRotation<span class="hl opt">&lt;</span><span class="hl num">12</span><span class="hl opt">;</span>nCurrentRotation<span class="hl opt">++)</span>
            <span class="hl opt">{</span>
               <span class="hl kwa">if</span> <span class="hl opt">(</span>nPiece<span class="hl opt">!=</span><span class="hl num">3</span><span class="hl opt">||(</span>nCurrentRotation<span class="hl opt">/</span><span class="hl num">3</span><span class="hl opt">)%</span><span class="hl num">2</span><span class="hl opt">==</span><span class="hl num">0</span><span class="hl opt">)</span>
               <span class="hl opt">{</span>
                  <span class="hl kwb">int</span> nMinX <span class="hl opt">=</span> x<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">];</span>
                  <span class="hl kwb">int</span> nMinY <span class="hl opt">=</span> y<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">];</span>
                  <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i<span class="hl opt">=</span><span class="hl num">1</span><span class="hl opt">;</span>i<span class="hl opt">&lt;</span><span class="hl num">5</span><span class="hl opt">;</span>i<span class="hl opt">++)</span>
                  <span class="hl opt">{</span>
                     <span class="hl kwa">if</span> <span class="hl opt">(</span>y<span class="hl opt">[</span>i<span class="hl opt">]&lt;</span>nMinY<span class="hl opt">||(</span>y<span class="hl opt">[</span>i<span class="hl opt">]==</span>nMinY<span class="hl opt">&amp;&amp;</span>x<span class="hl opt">[</span>i<span class="hl opt">]&lt;</span>nMinX<span class="hl opt">))</span>
                     <span class="hl opt">{</span>
                        nMinX<span class="hl opt">=</span>x<span class="hl opt">[</span>i<span class="hl opt">];</span>
                        nMinY<span class="hl opt">=</span>y<span class="hl opt">[</span>i<span class="hl opt">];</span>
                     <span class="hl opt">}</span>
                  <span class="hl opt">}</span>
            
                  <span class="hl kwb">unsigned int</span> mask <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
                  <span class="hl kwb">bool</span> <span class="hl kwd">bFit</span><span class="hl opt">(</span><span class="hl kwa">true</span><span class="hl opt">);</span>
            
                  <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span>i<span class="hl opt">&lt;</span><span class="hl num">5</span><span class="hl opt">;</span>i<span class="hl opt">++)</span>
                  <span class="hl opt">{</span>
                     <span class="hl kwb">int</span> nX <span class="hl opt">= (</span>x<span class="hl opt">[</span>i<span class="hl opt">]-</span>nMinX<span class="hl opt">+(</span>nXBase<span class="hl opt">-</span>nYBase<span class="hl opt">/</span><span class="hl num">2</span><span class="hl opt">))</span>
                              <span class="hl opt">+(</span>y<span class="hl opt">[</span>i<span class="hl opt">]-</span>nMinY<span class="hl opt">+</span>nYBase<span class="hl opt">)/</span><span class="hl num">2</span><span class="hl opt">;</span>
                     <span class="hl kwb">int</span> nY <span class="hl opt">=</span> y<span class="hl opt">[</span>i<span class="hl opt">]-</span>nMinY<span class="hl opt">+</span>nYBase<span class="hl opt">;</span>
                     <span class="hl kwa">if</span> <span class="hl opt">(</span>nX<span class="hl opt">&gt;=</span><span class="hl num">0</span><span class="hl opt">&amp;&amp;</span>nX<span class="hl opt">&lt;</span><span class="hl num">5</span><span class="hl opt">)</span>
                     <span class="hl opt">{</span>
                        <span class="hl kwb">int</span> nBit <span class="hl opt">=</span> nX<span class="hl opt">-</span>nXBase<span class="hl opt">+</span><span class="hl num">5</span><span class="hl opt">*(</span>nY<span class="hl opt">-</span>nYBase<span class="hl opt">);</span>
                        mask <span class="hl opt">|= (</span><span class="hl num">1</span><span class="hl opt">&lt;&lt;</span>nBit<span class="hl opt">);</span>
                     <span class="hl opt">}</span>
                     <span class="hl kwa">else</span>
                     <span class="hl opt">{</span>
                        bFit <span class="hl opt">=</span> <span class="hl kwa">false</span><span class="hl opt">;</span>
                     <span class="hl opt">}</span>
                  <span class="hl opt">}</span>
                  <span class="hl kwa">if</span> <span class="hl opt">(</span>bFit<span class="hl opt">)</span>
                  <span class="hl opt">{</span>
                     <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">GoodPiece</span><span class="hl opt">(</span>mask<span class="hl opt">,</span>nPos<span class="hl opt">))</span>
                     <span class="hl opt">{</span>
                        g_AllMasks<span class="hl opt">[</span>nTotalCount<span class="hl opt">++] =</span> 
                           mask<span class="hl opt">|(</span><span class="hl num">1</span><span class="hl opt">&lt;&lt;(</span>nPiece<span class="hl opt">+</span><span class="hl num">22</span><span class="hl opt">));</span>
                     <span class="hl opt">}</span>
                  <span class="hl opt">}</span>
               <span class="hl opt">}</span>
               <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span>i<span class="hl opt">&lt;</span><span class="hl num">5</span><span class="hl opt">;</span>i<span class="hl opt">++)</span>
               <span class="hl opt">{</span>
                  <span class="hl kwb">int</span> xnew <span class="hl opt">=</span> x<span class="hl opt">[</span>i<span class="hl opt">]+</span>y<span class="hl opt">[</span>i<span class="hl opt">];</span>
                  <span class="hl kwb">int</span> ynew <span class="hl opt">= -</span>x<span class="hl opt">[</span>i<span class="hl opt">];</span>
                  x<span class="hl opt">[</span>i<span class="hl opt">] =</span> xnew<span class="hl opt">;</span>
                  y<span class="hl opt">[</span>i<span class="hl opt">] =</span> ynew<span class="hl opt">;</span>
                  <span class="hl kwa">if</span> <span class="hl opt">(</span>nCurrentRotation<span class="hl opt">==</span><span class="hl num">5</span><span class="hl opt">)</span>
                  <span class="hl opt">{</span>
                     <span class="hl kwb">int</span> xnew <span class="hl opt">=</span> x<span class="hl opt">[</span>i<span class="hl opt">]+</span>y<span class="hl opt">[</span>i<span class="hl opt">];</span>
                     <span class="hl kwb">int</span> ynew <span class="hl opt">= -</span>y<span class="hl opt">[</span>i<span class="hl opt">];</span>
                     x<span class="hl opt">[</span>i<span class="hl opt">] =</span> xnew<span class="hl opt">;</span>
                     y<span class="hl opt">[</span>i<span class="hl opt">] =</span> ynew<span class="hl opt">;</span>
                  <span class="hl opt">}</span>      
               <span class="hl opt">}</span>
            <span class="hl opt">}</span>
         <span class="hl opt">}</span>
         g_AllMasks<span class="hl opt">[</span>nTotalCount<span class="hl opt">++] =</span> <span class="hl num">0</span><span class="hl opt">;</span>
      <span class="hl opt">}</span>
   <span class="hl opt">}</span>
   
   <span class="hl slc">// copy rows 2 and 3 to other rows</span>
   
   <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> nYBase<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span>nYBase<span class="hl opt">&lt;</span><span class="hl num">10</span><span class="hl opt">;</span>nYBase<span class="hl opt">++)</span>
   <span class="hl opt">{</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>nYBase<span class="hl opt">!=</span><span class="hl num">2</span><span class="hl opt">&amp;&amp;</span>nYBase<span class="hl opt">!=</span><span class="hl num">3</span><span class="hl opt">)</span>
      <span class="hl opt">{</span>
         <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> nXBase<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span>nXBase<span class="hl opt">&lt;</span><span class="hl num">5</span><span class="hl opt">;</span>nXBase<span class="hl opt">++)</span>
         <span class="hl opt">{</span>
            <span class="hl kwb">int</span> nPos <span class="hl opt">=</span> nXBase<span class="hl opt">+</span><span class="hl num">5</span><span class="hl opt">*</span>nYBase<span class="hl opt">;</span>
            <span class="hl kwb">int</span> nOrigPos <span class="hl opt">=</span> nXBase<span class="hl opt">+</span><span class="hl num">5</span><span class="hl opt">*(</span>nYBase<span class="hl opt">%</span><span class="hl num">2</span><span class="hl opt">+</span><span class="hl num">2</span><span class="hl opt">);</span>
            g_MaskStart<span class="hl opt">[</span>nPos<span class="hl opt">][</span><span class="hl num">0</span><span class="hl opt">] = &amp;</span>g_AllMasks<span class="hl opt">[</span>nTotalCount<span class="hl opt">];</span>
            <span class="hl kwb">unsigned int</span> <span class="hl opt">*</span>pMask <span class="hl opt">=</span> g_MaskStart<span class="hl opt">[</span>nOrigPos<span class="hl opt">][</span><span class="hl num">0</span><span class="hl opt">];</span>
            <span class="hl kwb">unsigned int</span> bottom <span class="hl opt">= (</span><span class="hl num">0xFFFC000000000000</span>ULL<span class="hl opt">&gt;&gt;</span>nPos<span class="hl opt">)</span>
                                 <span class="hl opt">&amp;</span><span class="hl num">0x003FFFFF</span><span class="hl opt">;</span>
            <span class="hl kwb">unsigned int</span> last_row <span class="hl opt">= (</span><span class="hl num">0xFFFC000000000000</span>ULL<span class="hl opt">&gt;&gt;(</span>nPos<span class="hl opt">+</span><span class="hl num">5</span><span class="hl opt">))</span>
                                 <span class="hl opt">&amp;</span><span class="hl num">0x003FFFFF</span><span class="hl opt">;</span>
            <span class="hl kwa">while</span> <span class="hl opt">(*</span>pMask<span class="hl opt">)</span>
            <span class="hl opt">{</span>
               <span class="hl kwb">unsigned int</span> mask<span class="hl opt">=*</span>pMask<span class="hl opt">;</span>
               pMask<span class="hl opt">++;</span>
               <span class="hl kwa">if</span> <span class="hl opt">((</span>mask<span class="hl opt">&amp;</span>bottom<span class="hl opt">)==</span><span class="hl num">0</span><span class="hl opt">)</span>
               <span class="hl opt">{</span>
                  <span class="hl kwa">if</span> <span class="hl opt">(</span>nYBase<span class="hl opt">==</span><span class="hl num">0</span><span class="hl opt">||(</span>mask<span class="hl opt">&amp;</span>last_row<span class="hl opt">))</span>
                  <span class="hl opt">{</span>
                     <span class="hl kwa">if</span> <span class="hl opt">(!</span><span class="hl kwd">GoodPiece</span><span class="hl opt">(</span>mask<span class="hl opt">&amp;</span><span class="hl num">0x003FFFFF</span><span class="hl opt">,</span>nPos<span class="hl opt">))</span>
                     <span class="hl opt">{</span>
                        <span class="hl kwa">continue</span><span class="hl opt">;</span>
                     <span class="hl opt">}</span>
                  <span class="hl opt">}</span>
                  g_AllMasks<span class="hl opt">[</span>nTotalCount<span class="hl opt">++] =</span> mask<span class="hl opt">;</span>
               <span class="hl opt">}</span>
            <span class="hl opt">}</span>
            g_AllMasks<span class="hl opt">[</span>nTotalCount<span class="hl opt">++] =</span> <span class="hl num">0</span><span class="hl opt">;</span>
         <span class="hl opt">}</span>
      <span class="hl opt">}</span>
   <span class="hl opt">}</span>
   
   <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> nFilter<span class="hl opt">=</span><span class="hl num">1</span><span class="hl opt">;</span>nFilter<span class="hl opt">&lt;</span><span class="hl num">8</span><span class="hl opt">;</span>nFilter<span class="hl opt">++)</span>
   <span class="hl opt">{</span>
      <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> nPos<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span>nPos<span class="hl opt">&lt;</span><span class="hl num">50</span><span class="hl opt">;</span>nPos<span class="hl opt">++)</span>
      <span class="hl opt">{</span>
         g_MaskStart<span class="hl opt">[</span>nPos<span class="hl opt">][</span>nFilter<span class="hl opt">] = &amp;</span>g_AllMasks<span class="hl opt">[</span>nTotalCount<span class="hl opt">];</span>
         <span class="hl kwb">unsigned int</span> filter_mask<span class="hl opt">;</span>
         filter_mask <span class="hl opt">= ((</span>nFilter<span class="hl opt">&amp;</span><span class="hl num">1</span><span class="hl opt">)&lt;&lt;</span><span class="hl num">1</span><span class="hl opt">)|((</span>nFilter<span class="hl opt">&amp;</span><span class="hl num">6</span><span class="hl opt">)&lt;&lt;</span>
                     <span class="hl opt">(</span><span class="hl num">4</span><span class="hl opt">-(</span>EvenRowsLookup<span class="hl opt">[</span>nPos<span class="hl opt">]&amp;</span><span class="hl num">1</span><span class="hl opt">)));</span>
         <span class="hl kwb">unsigned int</span> <span class="hl opt">*</span>pMask <span class="hl opt">=</span> g_MaskStart<span class="hl opt">[</span>nPos<span class="hl opt">][</span><span class="hl num">0</span><span class="hl opt">];</span>
         <span class="hl kwa">while</span> <span class="hl opt">(*</span>pMask<span class="hl opt">)</span>
         <span class="hl opt">{</span>
            <span class="hl kwb">unsigned int</span> mask<span class="hl opt">=*</span>pMask<span class="hl opt">;</span>
            <span class="hl kwa">if</span> <span class="hl opt">((</span>mask<span class="hl opt">&amp;</span>filter_mask<span class="hl opt">)==</span><span class="hl num">0</span><span class="hl opt">)</span>
            <span class="hl opt">{</span>
               g_AllMasks<span class="hl opt">[</span>nTotalCount<span class="hl opt">++] =</span> mask<span class="hl opt">;</span>
            <span class="hl opt">}</span>
            pMask<span class="hl opt">++;</span>
         <span class="hl opt">}</span>
         g_AllMasks<span class="hl opt">[</span>nTotalCount<span class="hl opt">++] =</span> <span class="hl num">0</span><span class="hl opt">;</span>
      <span class="hl opt">}</span>
   <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl kwb">void</span> <span class="hl kwd">CompareSolution</span><span class="hl opt">(</span><span class="hl kwb">unsigned char</span><span class="hl opt">*</span> board<span class="hl opt">,</span> <span class="hl kwb">unsigned char</span><span class="hl opt">*</span> min_solution<span class="hl opt">,</span>
               <span class="hl kwb">unsigned char</span><span class="hl opt">*</span> max_solution<span class="hl opt">)</span>
<span class="hl opt">{</span>
   <span class="hl kwb">int</span> i<span class="hl opt">,</span>j<span class="hl opt">;</span>
   
   <span class="hl kwa">for</span> <span class="hl opt">(</span>i<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span>i<span class="hl opt">&lt;</span><span class="hl num">50</span><span class="hl opt">;</span>i<span class="hl opt">++)</span>
   <span class="hl opt">{</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>board<span class="hl opt">[</span>i<span class="hl opt">]&lt;</span>min_solution<span class="hl opt">[</span>i<span class="hl opt">])</span>
      <span class="hl opt">{</span>
         <span class="hl kwa">for</span> <span class="hl opt">(</span>j<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span>j<span class="hl opt">&lt;</span><span class="hl num">50</span><span class="hl opt">;</span>j<span class="hl opt">++)</span>
         <span class="hl opt">{</span>
            min_solution<span class="hl opt">[</span>j<span class="hl opt">] =</span> board<span class="hl opt">[</span>j<span class="hl opt">];</span>
         <span class="hl opt">}</span>
         <span class="hl kwa">break</span><span class="hl opt">;</span>
      <span class="hl opt">}</span>
      <span class="hl kwa">else if</span> <span class="hl opt">(</span>board<span class="hl opt">[</span>i<span class="hl opt">]&gt;</span>min_solution<span class="hl opt">[</span>i<span class="hl opt">])</span>
      <span class="hl opt">{</span>
         <span class="hl kwa">break</span><span class="hl opt">;</span>
      <span class="hl opt">}</span>
   <span class="hl opt">}</span>
   <span class="hl kwa">for</span> <span class="hl opt">(</span>i<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span>i<span class="hl opt">&lt;</span><span class="hl num">50</span><span class="hl opt">;</span>i<span class="hl opt">++)</span>
   <span class="hl opt">{</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>board<span class="hl opt">[</span>i<span class="hl opt">]&gt;</span>max_solution<span class="hl opt">[</span>i<span class="hl opt">])</span>
      <span class="hl opt">{</span>
         <span class="hl kwa">for</span> <span class="hl opt">(</span>j<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span>j<span class="hl opt">&lt;</span><span class="hl num">50</span><span class="hl opt">;</span>j<span class="hl opt">++)</span>
         <span class="hl opt">{</span>
            max_solution<span class="hl opt">[</span>j<span class="hl opt">] =</span> board<span class="hl opt">[</span>j<span class="hl opt">];</span>
         <span class="hl opt">}</span>
         <span class="hl kwa">break</span><span class="hl opt">;</span>
      <span class="hl opt">}</span>
      <span class="hl kwa">else if</span> <span class="hl opt">(</span>board<span class="hl opt">[</span>i<span class="hl opt">]&lt;</span>max_solution<span class="hl opt">[</span>i<span class="hl opt">])</span>
      <span class="hl opt">{</span>
         <span class="hl kwa">break</span><span class="hl opt">;</span>
      <span class="hl opt">}</span>
   <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl kwb">void</span> <span class="hl kwd">PrintBoard</span><span class="hl opt">(</span><span class="hl kwb">unsigned char</span> <span class="hl opt">*</span>board<span class="hl opt">)</span>
<span class="hl opt">{</span>
   <span class="hl kwb">int</span> i<span class="hl opt">;</span>
   
   <span class="hl kwa">for</span> <span class="hl opt">(</span>i<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span>i<span class="hl opt">&lt;</span><span class="hl num">50</span><span class="hl opt">;</span>i<span class="hl opt">++)</span>
   <span class="hl opt">{</span>
      <span class="hl kwd">printf</span> <span class="hl opt">(</span><span class="hl str">&quot;%d &quot;</span><span class="hl opt">,</span> board<span class="hl opt">[</span>i<span class="hl opt">]);</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>i<span class="hl opt">%</span><span class="hl num">5</span><span class="hl opt">==</span><span class="hl num">4</span><span class="hl opt">)</span>
      <span class="hl opt">{</span>
         <span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">);</span>
         <span class="hl kwa">if</span> <span class="hl opt">((</span>i<span class="hl opt">&amp;</span><span class="hl num">1</span><span class="hl opt">)==</span><span class="hl num">0</span><span class="hl opt">)</span>
         <span class="hl opt">{</span>
            <span class="hl kwd">printf</span> <span class="hl opt">(</span><span class="hl str">&quot; &quot;</span><span class="hl opt">);</span>
         <span class="hl opt">}</span>
      <span class="hl opt">}</span>
   <span class="hl opt">}</span>
   <span class="hl kwd">printf</span> <span class="hl opt">(</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">);</span>
   
<span class="hl opt">}</span>

<span class="hl kwb">void</span> <span class="hl kwd">RecordSolution</span><span class="hl opt">(</span><span class="hl kwb">unsigned int</span> current_solution<span class="hl opt">[])</span>
<span class="hl opt">{</span>
   <span class="hl kwb">unsigned char</span> board<span class="hl opt">[</span><span class="hl num">50</span><span class="hl opt">],</span> flip_board<span class="hl opt">[</span><span class="hl num">50</span><span class="hl opt">];</span>
   <span class="hl kwb">int</span> i<span class="hl opt">;</span>
   <span class="hl kwb">unsigned long</span> piece<span class="hl opt">;</span>
   <span class="hl kwb">unsigned int</span> mask<span class="hl opt">,</span> pos<span class="hl opt">,</span> current_bit<span class="hl opt">,</span> b1<span class="hl opt">;</span>
   <span class="hl kwb">unsigned long</span> count<span class="hl opt">;</span>
   b1 <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
   pos <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
   <span class="hl kwa">for</span> <span class="hl opt">(</span>i<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span>i<span class="hl opt">&lt;</span><span class="hl num">10</span><span class="hl opt">;</span>i<span class="hl opt">++)</span>
   <span class="hl opt">{</span>
      mask <span class="hl opt">=</span> current_solution<span class="hl opt">[</span>i<span class="hl opt">];</span>
      piece <span class="hl opt">=</span> <span class="hl kwd">__builtin_ctz</span><span class="hl opt">(</span>mask<span class="hl opt">&gt;&gt;</span><span class="hl num">22</span><span class="hl opt">);</span>
      mask <span class="hl opt">&amp;=</span> <span class="hl num">0x003FFFFF</span><span class="hl opt">;</span>
      b1 <span class="hl opt">|=</span> mask<span class="hl opt">;</span>
      <span class="hl kwa">while</span> <span class="hl opt">(</span>mask<span class="hl opt">)</span>
      <span class="hl opt">{</span>
         current_bit <span class="hl opt">=</span> mask<span class="hl opt">&amp;-</span>mask<span class="hl opt">;</span>
         count <span class="hl opt">=</span> <span class="hl kwd">__builtin_ctz</span><span class="hl opt">(</span>current_bit<span class="hl opt">);</span>
         board<span class="hl opt">[</span>count<span class="hl opt">+</span>pos<span class="hl opt">] =</span> piece<span class="hl opt">;</span>
         flip_board<span class="hl opt">[</span><span class="hl num">49</span><span class="hl opt">-</span>count<span class="hl opt">-</span>pos<span class="hl opt">] =</span> piece<span class="hl opt">;</span>
         mask <span class="hl opt">^=</span> current_bit<span class="hl opt">;</span>
      <span class="hl opt">}</span>
      count <span class="hl opt">=</span> <span class="hl kwd">__builtin_ctz</span><span class="hl opt">(~</span>b1<span class="hl opt">);</span>
      pos<span class="hl opt">+=</span>count<span class="hl opt">;</span>
      b1 <span class="hl opt">&gt;&gt;=</span> count<span class="hl opt">;</span>
   <span class="hl opt">}</span>
   <span class="hl kwa">if</span> <span class="hl opt">(</span>g_solutions<span class="hl opt">==</span><span class="hl num">0</span><span class="hl opt">)</span>
   <span class="hl opt">{</span>
      <span class="hl kwa">for</span> <span class="hl opt">(</span>i<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span>i<span class="hl opt">&lt;</span><span class="hl num">50</span><span class="hl opt">;</span>i<span class="hl opt">++)</span>
      <span class="hl opt">{</span>
         g_min_solution<span class="hl opt">[</span>i<span class="hl opt">] =</span> g_max_solution<span class="hl opt">[</span>i<span class="hl opt">] =</span> board<span class="hl opt">[</span>i<span class="hl opt">];</span>
      <span class="hl opt">}</span>
   <span class="hl opt">}</span>
   <span class="hl kwa">else</span>
   <span class="hl opt">{</span>
      <span class="hl kwd">CompareSolution</span><span class="hl opt">(</span>board<span class="hl opt">,</span> g_min_solution<span class="hl opt">,</span> g_max_solution<span class="hl opt">);</span>
      <span class="hl kwd">CompareSolution</span><span class="hl opt">(</span>flip_board<span class="hl opt">,</span> g_min_solution<span class="hl opt">,</span> g_max_solution<span class="hl opt">);</span>
   <span class="hl opt">}</span>
   
   g_solutions<span class="hl opt">+=</span><span class="hl num">2</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
     
<span class="hl kwb">void</span> <span class="hl kwd">searchLinear</span><span class="hl opt">(</span><span class="hl kwb">unsigned int</span> board<span class="hl opt">,</span> <span class="hl kwb">unsigned int</span> pos<span class="hl opt">,</span> <span class="hl kwb">unsigned int</span> used<span class="hl opt">,</span> 
         <span class="hl kwb">unsigned int</span> placed<span class="hl opt">,</span> <span class="hl kwb">unsigned int</span> current_solution<span class="hl opt">[])</span>
<span class="hl opt">{</span>
   <span class="hl kwb">unsigned long</span> count<span class="hl opt">;</span>
   <span class="hl kwb">unsigned int</span> even_rows<span class="hl opt">,</span> odd_rows<span class="hl opt">,</span> left_border<span class="hl opt">,</span> right_border<span class="hl opt">,</span> s1<span class="hl opt">,</span> s2<span class="hl opt">,</span> s3<span class="hl opt">,</span>
                  s4<span class="hl opt">,</span> s5<span class="hl opt">,</span> s6<span class="hl opt">,</span> s7<span class="hl opt">,</span> s8<span class="hl opt">;</span>
   <span class="hl kwa">if</span> <span class="hl opt">(</span>placed<span class="hl opt">==</span><span class="hl num">10</span><span class="hl opt">)</span>
   <span class="hl opt">{</span>
      <span class="hl ppc">#pragma omp critical</span>
      <span class="hl kwd">RecordSolution</span><span class="hl opt">(</span>current_solution<span class="hl opt">);</span>
   <span class="hl opt">}</span>
   <span class="hl kwa">else</span>
   <span class="hl opt">{</span>
      even_rows <span class="hl opt">=</span> EvenRowsLookup<span class="hl opt">[</span>pos<span class="hl opt">];</span>

      odd_rows <span class="hl opt">= ~</span>even_rows<span class="hl opt">;</span>
      
      left_border <span class="hl opt">=</span> LeftBorderLookup<span class="hl opt">[</span>pos<span class="hl opt">];</span>
      right_border <span class="hl opt">=</span> left_border<span class="hl opt">&gt;&gt;</span><span class="hl num">1</span><span class="hl opt">;</span>

      s1 <span class="hl opt">= (</span>board <span class="hl opt">&lt;&lt;</span> <span class="hl num">1</span><span class="hl opt">) |</span> left_border<span class="hl opt">;</span>
      s2 <span class="hl opt">= (</span>board <span class="hl opt">&gt;&gt;</span> <span class="hl num">1</span><span class="hl opt">) |</span> right_border<span class="hl opt">;</span>
      s3 <span class="hl opt">= (</span>board <span class="hl opt">&lt;&lt;</span> <span class="hl num">4</span><span class="hl opt">) | ((</span><span class="hl num">1</span><span class="hl opt">&lt;&lt;</span><span class="hl num">4</span><span class="hl opt">)-</span><span class="hl num">1</span><span class="hl opt">) |</span> right_border<span class="hl opt">;</span>
      s4 <span class="hl opt">= (</span>board <span class="hl opt">&gt;&gt;</span> <span class="hl num">4</span><span class="hl opt">) |</span> left_border<span class="hl opt">;</span>
      s5 <span class="hl opt">= (</span>board <span class="hl opt">&lt;&lt;</span> <span class="hl num">5</span><span class="hl opt">) | ((</span><span class="hl num">1</span><span class="hl opt">&lt;&lt;</span><span class="hl num">5</span><span class="hl opt">)-</span><span class="hl num">1</span><span class="hl opt">);</span>
      s6 <span class="hl opt">= (</span>board <span class="hl opt">&gt;&gt;</span> <span class="hl num">5</span><span class="hl opt">);</span>
      s7 <span class="hl opt">= (</span>board <span class="hl opt">&lt;&lt;</span> <span class="hl num">6</span><span class="hl opt">) | ((</span><span class="hl num">1</span><span class="hl opt">&lt;&lt;</span><span class="hl num">6</span><span class="hl opt">)-</span><span class="hl num">1</span><span class="hl opt">) |</span> left_border<span class="hl opt">;</span>
      s8 <span class="hl opt">= (</span>board <span class="hl opt">&gt;&gt;</span> <span class="hl num">6</span><span class="hl opt">) |</span> right_border<span class="hl opt">;</span>

      <span class="hl kwa">if</span> <span class="hl opt">(~</span>board<span class="hl opt">&amp;</span>s1<span class="hl opt">&amp;</span>s2<span class="hl opt">&amp;</span>s5<span class="hl opt">&amp;</span>s6<span class="hl opt">&amp;((</span>even_rows<span class="hl opt">&amp;</span>s4<span class="hl opt">&amp;</span>s7<span class="hl opt">)|(</span>odd_rows<span class="hl opt">&amp;</span>s3<span class="hl opt">&amp;</span>s8<span class="hl opt">)))</span>
      <span class="hl opt">{</span>
         <span class="hl kwa">return</span><span class="hl opt">;</span>
      <span class="hl opt">}</span>
      
      count <span class="hl opt">=</span> <span class="hl kwd">__builtin_ctz</span><span class="hl opt">(~</span>board<span class="hl opt">);</span>
      pos<span class="hl opt">+=</span>count<span class="hl opt">;</span>
      board <span class="hl opt">&gt;&gt;=</span> count<span class="hl opt">;</span>
      
      <span class="hl kwb">unsigned int</span> f<span class="hl opt">;</span>
      f <span class="hl opt">= ((</span>board<span class="hl opt">&gt;&gt;</span><span class="hl num">1</span><span class="hl opt">)&amp;</span><span class="hl num">1</span><span class="hl opt">)|((</span>board<span class="hl opt">&gt;&gt;(</span><span class="hl num">4</span><span class="hl opt">-(</span>EvenRowsLookup<span class="hl opt">[</span>pos<span class="hl opt">]&amp;</span><span class="hl num">1</span><span class="hl opt">)))&amp;</span><span class="hl num">6</span><span class="hl opt">);</span>   
      <span class="hl kwb">unsigned int</span> board_and_used <span class="hl opt">=</span> board<span class="hl opt">|</span>used<span class="hl opt">;</span>
      
      <span class="hl kwb">unsigned int</span> <span class="hl opt">*</span>masks <span class="hl opt">=</span> g_MaskStart<span class="hl opt">[</span>pos<span class="hl opt">][</span>f<span class="hl opt">];</span>
      <span class="hl kwb">unsigned int</span> mask<span class="hl opt">;</span>
      
      <span class="hl kwa">while</span> <span class="hl opt">(*</span>masks<span class="hl opt">)</span>
      <span class="hl opt">{</span>
         <span class="hl kwa">while</span> <span class="hl opt">((*</span>masks<span class="hl opt">)&amp;</span>board_and_used<span class="hl opt">)</span>
         <span class="hl opt">{</span>
            masks<span class="hl opt">++;</span>
         <span class="hl opt">}</span>
         <span class="hl kwa">if</span> <span class="hl opt">(*</span>masks<span class="hl opt">)</span>
         <span class="hl opt">{</span>
            mask <span class="hl opt">= *</span>masks<span class="hl opt">;</span>
            current_solution<span class="hl opt">[</span>placed<span class="hl opt">] =</span> mask<span class="hl opt">;</span>
            <span class="hl kwd">searchLinear</span><span class="hl opt">(</span>board<span class="hl opt">|((</span>mask<span class="hl opt">&amp;</span><span class="hl num">0x003FFFFF</span><span class="hl opt">)),</span> pos<span class="hl opt">,</span> used<span class="hl opt">|(</span>mask<span class="hl opt">&amp;</span><span class="hl num">0xFFC00000</span><span class="hl opt">),</span>
                  placed<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">,</span> current_solution<span class="hl opt">);</span>
            masks<span class="hl opt">++;</span>
         <span class="hl opt">}</span>
      <span class="hl opt">}</span>
   <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl kwb">void</span> <span class="hl kwd">searchParallel</span><span class="hl opt">(</span><span class="hl kwb">unsigned int</span> board<span class="hl opt">,</span> <span class="hl kwb">unsigned int</span> pos<span class="hl opt">,</span> <span class="hl kwb">unsigned int</span> used<span class="hl opt">,</span> 
         <span class="hl kwb">unsigned int</span> placed<span class="hl opt">,</span> <span class="hl kwb">unsigned int</span> first_piece<span class="hl opt">)</span>
<span class="hl opt">{</span>
   <span class="hl kwb">unsigned long</span> count<span class="hl opt">;</span>
                     
   count <span class="hl opt">=</span> <span class="hl kwd">__builtin_ctz</span><span class="hl opt">(~</span>board<span class="hl opt">);</span>
   pos<span class="hl opt">+=</span>count<span class="hl opt">;</span>
   board <span class="hl opt">&gt;&gt;=</span> count<span class="hl opt">;</span>
   
   <span class="hl kwb">unsigned int</span> board_and_used <span class="hl opt">=</span> board<span class="hl opt">|</span>used<span class="hl opt">;</span>
   
   <span class="hl kwb">unsigned int</span> <span class="hl opt">*</span>masks <span class="hl opt">=</span> g_MaskStart<span class="hl opt">[</span>pos<span class="hl opt">][</span><span class="hl num">0</span><span class="hl opt">];</span>
   <span class="hl kwb">unsigned int</span> mask<span class="hl opt">;</span>
   
   <span class="hl kwa">if</span> <span class="hl opt">(</span>placed<span class="hl opt">==</span><span class="hl num">0</span><span class="hl opt">)</span>
   <span class="hl opt">{</span>
      <span class="hl kwa">while</span> <span class="hl opt">(*</span>masks<span class="hl opt">)</span>
      <span class="hl opt">{</span>
         <span class="hl kwa">while</span> <span class="hl opt">((*</span>masks<span class="hl opt">)&amp;</span>board_and_used<span class="hl opt">)</span>
         <span class="hl opt">{</span>
            masks<span class="hl opt">++;</span>
         <span class="hl opt">}</span>
         <span class="hl kwa">if</span> <span class="hl opt">(*</span>masks<span class="hl opt">)</span>
         <span class="hl opt">{</span>
            mask <span class="hl opt">= *</span>masks<span class="hl opt">++;</span>
            <span class="hl opt">{</span>
               <span class="hl kwd">searchParallel</span><span class="hl opt">(</span>board<span class="hl opt">|((</span>mask<span class="hl opt">&amp;</span><span class="hl num">0x003FFFFF</span><span class="hl opt">)),</span> pos<span class="hl opt">,</span> used<span class="hl opt">|(</span>mask<span class="hl opt">&amp;</span><span class="hl num">0xFFC00000</span><span class="hl opt">),</span>
                  placed<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">,</span> mask<span class="hl opt">);</span>
            <span class="hl opt">}</span>
         <span class="hl opt">}</span>
      <span class="hl opt">}</span>
   <span class="hl opt">}</span>
   <span class="hl kwa">else</span>
   <span class="hl opt">{</span>   <span class="hl slc">// placed==1</span>
      <span class="hl kwa">while</span> <span class="hl opt">(*</span>masks<span class="hl opt">)</span>
      <span class="hl opt">{</span>
         <span class="hl kwa">while</span> <span class="hl opt">((*</span>masks<span class="hl opt">)&amp;</span>board_and_used<span class="hl opt">)</span>
         <span class="hl opt">{</span>
            masks<span class="hl opt">++;</span>
         <span class="hl opt">}</span>
         <span class="hl kwa">if</span> <span class="hl opt">(*</span>masks<span class="hl opt">)</span>
         <span class="hl opt">{</span>
            mask <span class="hl opt">= *</span>masks<span class="hl opt">++;</span>
            <span class="hl ppc">#pragma omp task default(none) firstprivate(board, mask, pos, used, placed, first_piece)</span>
            <span class="hl opt">{</span>
               <span class="hl kwb">unsigned int</span> current_solution<span class="hl opt">[</span><span class="hl num">10</span><span class="hl opt">];</span>
               current_solution<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] =</span> first_piece<span class="hl opt">;</span>
               current_solution<span class="hl opt">[</span>placed<span class="hl opt">] =</span> mask<span class="hl opt">;</span>
               <span class="hl kwd">searchLinear</span><span class="hl opt">(</span>board<span class="hl opt">|((</span>mask<span class="hl opt">&amp;</span><span class="hl num">0x003FFFFF</span><span class="hl opt">)),</span> pos<span class="hl opt">,</span> used<span class="hl opt">|(</span>mask<span class="hl opt">&amp;</span><span class="hl num">0xFFC00000</span><span class="hl opt">),</span>
                  placed<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">,</span> current_solution<span class="hl opt">);</span>
            <span class="hl opt">}</span>
         <span class="hl opt">}</span>
      <span class="hl opt">}</span>
   <span class="hl opt">}</span>
<span class="hl opt">}</span>


<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span><span class="hl opt">*</span> argv<span class="hl opt">[])</span>
<span class="hl opt">{</span>
   <span class="hl kwa">if</span> <span class="hl opt">(</span>argc <span class="hl opt">&gt;</span> <span class="hl num">2</span><span class="hl opt">)</span>
     <span class="hl kwa">return</span> <span class="hl num">1</span><span class="hl opt">;</span>

   <span class="hl kwd">Initialise</span><span class="hl opt">();</span>

   g_solutions <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>

   <span class="hl ppc">#pragma omp parallel</span>
   <span class="hl opt">{</span>
      <span class="hl ppc">#pragma omp single</span>
      <span class="hl opt">{</span>
         <span class="hl kwd">searchParallel</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">0</span><span class="hl opt">);</span>
      <span class="hl opt">}</span>
   <span class="hl opt">}</span>
   
   <span class="hl kwd">printf</span> <span class="hl opt">(</span><span class="hl str">&quot;%d solutions found</span><span class="hl esc">\n\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span>g_solutions<span class="hl opt">);</span>
   <span class="hl kwd">PrintBoard</span><span class="hl opt">(</span>g_min_solution<span class="hl opt">);</span>
   <span class="hl kwd">PrintBoard</span><span class="hl opt">(</span>g_max_solution<span class="hl opt">);</span>
                        
   <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
