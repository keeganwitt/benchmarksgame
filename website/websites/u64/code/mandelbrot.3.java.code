<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"> </span>
<span class="hl com">   contributed by Stefan Krause</span>
<span class="hl com">   slightly modified by Chad Whipkey</span>
<span class="hl com">   parallelized by Colin D Bennett 2008-10-04</span>
<span class="hl com">   reduce synchronization cost by The Anh Tran</span>
<span class="hl com">  */</span>

<span class="hl slc">//package mandelbrot;</span>

<span class="hl kwa">import</span> java<span class="hl opt">.</span>io<span class="hl opt">.*;</span>
<span class="hl kwa">import</span> java<span class="hl opt">.</span>io<span class="hl opt">.</span>IOException<span class="hl opt">;</span>
<span class="hl kwa">import</span> java<span class="hl opt">.</span>util<span class="hl opt">.</span>concurrent<span class="hl opt">.</span>atomic<span class="hl opt">.</span>AtomicInteger<span class="hl opt">;</span>

<span class="hl kwa">public final class</span> mandelbrot
<span class="hl opt">{</span>
    <span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">main</span><span class="hl opt">(</span>String<span class="hl opt">[]</span> args<span class="hl opt">)</span> <span class="hl kwa">throws</span> Exception
    <span class="hl opt">{</span>
        <span class="hl kwb">int</span> size <span class="hl opt">=</span> <span class="hl num">200</span><span class="hl opt">;</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>args<span class="hl opt">.</span>length <span class="hl opt">&gt;=</span> <span class="hl num">1</span><span class="hl opt">)</span>
            size <span class="hl opt">=</span> Integer<span class="hl opt">.</span><span class="hl kwd">parseInt</span><span class="hl opt">(</span>args<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">]);</span>
        
        System<span class="hl opt">.</span>out<span class="hl opt">.</span><span class="hl kwd">format</span><span class="hl opt">(</span><span class="hl str">&quot;P4</span><span class="hl esc">\n</span><span class="hl str">%d %d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> size<span class="hl opt">,</span> size<span class="hl opt">);</span>
        
        <span class="hl kwb">int</span> width_bytes <span class="hl opt">=</span> size <span class="hl opt">/</span><span class="hl num">8</span> <span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">;</span>
        <span class="hl kwb">byte</span><span class="hl opt">[][]</span> output_data <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwb">byte</span><span class="hl opt">[</span>size<span class="hl opt">][</span>width_bytes<span class="hl opt">];</span>
        <span class="hl kwb">int</span><span class="hl opt">[]</span> bytes_per_line <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwb">int</span><span class="hl opt">[</span>size<span class="hl opt">];</span>
        
        <span class="hl kwd">Compute</span><span class="hl opt">(</span>size<span class="hl opt">,</span> output_data<span class="hl opt">,</span> bytes_per_line<span class="hl opt">);</span>
        
        BufferedOutputStream ostream <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">BufferedOutputStream</span><span class="hl opt">(</span>System<span class="hl opt">.</span>out<span class="hl opt">);</span>
        <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> size<span class="hl opt">;</span> i<span class="hl opt">++)</span>
            ostream<span class="hl opt">.</span><span class="hl kwd">write</span><span class="hl opt">(</span>output_data<span class="hl opt">[</span>i<span class="hl opt">],</span> <span class="hl num">0</span><span class="hl opt">,</span> bytes_per_line<span class="hl opt">[</span>i<span class="hl opt">]);</span>
        ostream<span class="hl opt">.</span><span class="hl kwd">close</span><span class="hl opt">();</span>
    <span class="hl opt">}</span>
    
    <span class="hl kwa">private static final</span> <span class="hl kwb">void</span> <span class="hl kwd">Compute</span><span class="hl opt">(</span><span class="hl kwa">final</span> <span class="hl kwb">int</span> N<span class="hl opt">,</span> <span class="hl kwa">final</span> <span class="hl kwb">byte</span><span class="hl opt">[][]</span> output<span class="hl opt">,</span> <span class="hl kwa">final</span> <span class="hl kwb">int</span><span class="hl opt">[]</span> bytes_per_line<span class="hl opt">)</span>
    <span class="hl opt">{</span>
        <span class="hl kwa">final</span> <span class="hl kwb">double</span> inverse_N <span class="hl opt">=</span> <span class="hl num">2.0</span> <span class="hl opt">/</span> N<span class="hl opt">;</span>
        <span class="hl kwa">final</span> AtomicInteger current_line <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">AtomicInteger</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">);</span>
        
        <span class="hl kwa">final</span> Thread<span class="hl opt">[]</span> pool <span class="hl opt">=</span> <span class="hl kwa">new</span> Thread<span class="hl opt">[</span>Runtime<span class="hl opt">.</span><span class="hl kwd">getRuntime</span><span class="hl opt">().</span><span class="hl kwd">availableProcessors</span><span class="hl opt">()];</span>
        <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> pool<span class="hl opt">.</span>length<span class="hl opt">;</span> i<span class="hl opt">++)</span>
        <span class="hl opt">{</span>
            pool<span class="hl opt">[</span>i<span class="hl opt">] =</span> <span class="hl kwa">new</span> <span class="hl kwd">Thread</span><span class="hl opt">()</span>
            <span class="hl opt">{</span>
                <span class="hl kwa">public</span> <span class="hl kwb">void</span> <span class="hl kwd">run</span><span class="hl opt">()</span>
                <span class="hl opt">{</span>
                    <span class="hl kwb">int</span> y<span class="hl opt">;</span>
                    <span class="hl kwa">while</span> <span class="hl opt">((</span>y <span class="hl opt">=</span> current_line<span class="hl opt">.</span><span class="hl kwd">getAndIncrement</span><span class="hl opt">()) &lt;</span> N<span class="hl opt">)</span>
                    <span class="hl opt">{</span>
                        <span class="hl kwb">byte</span><span class="hl opt">[]</span> pdata <span class="hl opt">=</span> output<span class="hl opt">[</span>y<span class="hl opt">];</span>
                        
                        <span class="hl kwb">int</span> bit_num <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
                        <span class="hl kwb">int</span> byte_count <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
                        <span class="hl kwb">int</span> byte_accumulate <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
                        
                        <span class="hl kwb">double</span> Civ <span class="hl opt">= (</span><span class="hl kwb">double</span><span class="hl opt">)</span>y <span class="hl opt">*</span> inverse_N <span class="hl opt">-</span> <span class="hl num">1.0</span><span class="hl opt">;</span>
                        <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> x <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> x <span class="hl opt">&lt;</span> N<span class="hl opt">;</span> x<span class="hl opt">++)</span>
                        <span class="hl opt">{</span>
                            <span class="hl kwb">double</span> Crv <span class="hl opt">= (</span><span class="hl kwb">double</span><span class="hl opt">)</span>x <span class="hl opt">*</span> inverse_N <span class="hl opt">-</span> <span class="hl num">1.5</span><span class="hl opt">;</span>
                            
                            <span class="hl kwb">double</span> Zrv <span class="hl opt">=</span> Crv<span class="hl opt">;</span>
                            <span class="hl kwb">double</span> Ziv <span class="hl opt">=</span> Civ<span class="hl opt">;</span>
                            
                            <span class="hl kwb">double</span> Trv <span class="hl opt">=</span> Crv <span class="hl opt">*</span> Crv<span class="hl opt">;</span>
                            <span class="hl kwb">double</span> Tiv <span class="hl opt">=</span> Civ <span class="hl opt">*</span> Civ<span class="hl opt">;</span>
                            
                            <span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">49</span><span class="hl opt">;</span>
                            <span class="hl kwa">do</span>
                            <span class="hl opt">{</span>
                                Ziv <span class="hl opt">= (</span>Zrv <span class="hl opt">*</span> Ziv<span class="hl opt">) + (</span>Zrv <span class="hl opt">*</span> Ziv<span class="hl opt">) +</span> Civ<span class="hl opt">;</span>
                                Zrv <span class="hl opt">=</span> Trv <span class="hl opt">-</span> Tiv <span class="hl opt">+</span> Crv<span class="hl opt">;</span>
                                
                                Trv <span class="hl opt">=</span> Zrv <span class="hl opt">*</span> Zrv<span class="hl opt">;</span>
                                Tiv <span class="hl opt">=</span> Ziv <span class="hl opt">*</span> Ziv<span class="hl opt">;</span>
                            <span class="hl opt">}</span> <span class="hl kwa">while</span> <span class="hl opt">( ((</span>Trv <span class="hl opt">+</span> Tiv<span class="hl opt">) &lt;=</span> <span class="hl num">4.0</span><span class="hl opt">) &amp;&amp; (--</span>i <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">));</span>

                            byte_accumulate <span class="hl opt">&lt;&lt;=</span> <span class="hl num">1</span><span class="hl opt">;</span>
                            <span class="hl kwa">if</span> <span class="hl opt">(</span>i <span class="hl opt">==</span> <span class="hl num">0</span><span class="hl opt">)</span>
                                byte_accumulate<span class="hl opt">++;</span>
                            
                            <span class="hl kwa">if</span> <span class="hl opt">(++</span>bit_num <span class="hl opt">==</span> <span class="hl num">8</span><span class="hl opt">)</span>
                            <span class="hl opt">{</span>
                                pdata<span class="hl opt">[</span> byte_count<span class="hl opt">++ ] = (</span><span class="hl kwb">byte</span><span class="hl opt">)</span>byte_accumulate<span class="hl opt">;</span>
                                bit_num <span class="hl opt">=</span> byte_accumulate <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
                            <span class="hl opt">}</span>
                        <span class="hl opt">}</span> <span class="hl slc">// end foreach column</span>
                        
                        <span class="hl kwa">if</span> <span class="hl opt">(</span>bit_num <span class="hl opt">!=</span> <span class="hl num">0</span><span class="hl opt">)</span>
                        <span class="hl opt">{</span>
                            byte_accumulate <span class="hl opt">&lt;&lt;= (</span><span class="hl num">8</span> <span class="hl opt">- (</span>N <span class="hl opt">&amp;</span> <span class="hl num">7</span><span class="hl opt">));</span>
                            pdata<span class="hl opt">[</span> byte_count<span class="hl opt">++ ] = (</span><span class="hl kwb">byte</span><span class="hl opt">)</span>byte_accumulate<span class="hl opt">;</span>
                        <span class="hl opt">}</span>
                        
                        bytes_per_line<span class="hl opt">[</span>y<span class="hl opt">] =</span> byte_count<span class="hl opt">;</span>
                    <span class="hl opt">}</span> <span class="hl slc">// end while (y &lt; N)</span>
                <span class="hl opt">}</span> <span class="hl slc">// end void run()</span>
            <span class="hl opt">};</span> <span class="hl slc">// end inner class definition</span>
            
            pool<span class="hl opt">[</span>i<span class="hl opt">].</span><span class="hl kwd">start</span><span class="hl opt">();</span>
        <span class="hl opt">}</span>
        
        <span class="hl kwa">for</span> <span class="hl opt">(</span>Thread t <span class="hl opt">:</span> pool<span class="hl opt">)</span>
        <span class="hl opt">{</span>
            <span class="hl kwa">try</span>
            <span class="hl opt">{</span>
                t<span class="hl opt">.</span><span class="hl kwd">join</span><span class="hl opt">();</span>
            <span class="hl opt">}</span>
            <span class="hl kwa">catch</span> <span class="hl opt">(</span>InterruptedException e<span class="hl opt">)</span>
            <span class="hl opt">{</span>
                e<span class="hl opt">.</span><span class="hl kwd">printStackTrace</span><span class="hl opt">();</span>
            <span class="hl opt">}</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span>
<span class="hl opt">}</span>
