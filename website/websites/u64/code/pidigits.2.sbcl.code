<span class="hl slc">;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;; http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">;;</span>
<span class="hl slc">;; adapted from the Java and Python versions by Robert Brown 2006-10-06</span>

<span class="hl opt">(</span><span class="hl kwa">defconstant</span> <span class="hl opt">+</span>digits-per-line<span class="hl opt">+</span> <span class="hl num">10</span><span class="hl opt">)</span>
<span class="hl opt">(</span><span class="hl kwa">defconstant</span> <span class="hl opt">+</span>default-stop-digits<span class="hl opt">+</span> <span class="hl str">&quot;1000&quot;</span><span class="hl opt">)</span>

<span class="hl opt">(</span><span class="hl kwa">defun</span> make-digit-generator <span class="hl opt">()</span>
  <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">optimize</span> <span class="hl opt">(</span><span class="hl kwa">speed</span> <span class="hl num">3</span><span class="hl opt">) (</span><span class="hl kwa">debug</span> <span class="hl num">0</span><span class="hl opt">) (</span><span class="hl kwa">space</span> <span class="hl num">0</span><span class="hl opt">) (</span><span class="hl kwa">safety</span> <span class="hl num">0</span><span class="hl opt">)))</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">((</span><span class="hl kwa">zq</span> <span class="hl num">1</span><span class="hl opt">)</span>
        <span class="hl opt">(</span><span class="hl kwa">zr</span> <span class="hl num">0</span><span class="hl opt">)</span>
        <span class="hl opt">(</span><span class="hl kwa">zt</span> <span class="hl num">1</span><span class="hl opt">)</span>
        <span class="hl opt">(</span><span class="hl kwa">k</span> <span class="hl num">0</span><span class="hl opt">)</span>
        <span class="hl opt">(</span><span class="hl kwa">4k</span><span class="hl opt">+</span><span class="hl num">2 2</span><span class="hl opt">)</span>
        <span class="hl opt">(</span><span class="hl kwa">2k</span><span class="hl opt">+</span><span class="hl num">1 1</span><span class="hl opt">))</span>
    <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> integer zq zr zt<span class="hl opt">)</span>
             <span class="hl opt">(</span><span class="hl kwa">type</span> fixnum k <span class="hl num">4</span>k<span class="hl opt">+</span><span class="hl num">2 2</span>k<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">))</span>
    <span class="hl opt">(</span><span class="hl kwa">labels</span> <span class="hl opt">((</span><span class="hl kwa">extract</span> <span class="hl opt">(</span><span class="hl kwa">j</span><span class="hl opt">)</span>
               <span class="hl opt">(</span><span class="hl kwa">the</span> <span class="hl opt">(</span><span class="hl kwa">integer</span> <span class="hl num">0 9</span><span class="hl opt">) (</span><span class="hl kwa">floor</span> <span class="hl opt">(+ (*</span> zq j<span class="hl opt">)</span> zr<span class="hl opt">)</span> zt<span class="hl opt">)))</span>
             <span class="hl opt">(</span><span class="hl kwa">compose</span> <span class="hl opt">(</span><span class="hl kwa">aq</span> ar at bq br bt<span class="hl opt">)</span>
               <span class="hl opt">(</span><span class="hl kwa">setq</span> zq <span class="hl opt">(*</span> aq bq<span class="hl opt">)</span>
                     zr <span class="hl opt">(+ (*</span> aq br<span class="hl opt">) (*</span> ar bt<span class="hl opt">))</span>
                     zt <span class="hl opt">(*</span> at bt<span class="hl opt">))))</span>
      <span class="hl opt">#'(</span><span class="hl kwa">lambda</span> <span class="hl opt">()</span>
          <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">((</span><span class="hl kwa">y</span> <span class="hl opt">(</span><span class="hl kwa">extract</span> <span class="hl num">3</span><span class="hl opt">)))</span>
            <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> <span class="hl opt">(</span><span class="hl kwa">integer</span> <span class="hl num">0 9</span><span class="hl opt">)</span> y<span class="hl opt">))</span>
            <span class="hl opt">(</span><span class="hl kwa">loop</span> while <span class="hl opt">(</span><span class="hl kwa">not</span> <span class="hl opt">(=</span> y <span class="hl opt">(</span><span class="hl kwa">extract</span> <span class="hl num">4</span><span class="hl opt">)))</span>
                  do <span class="hl opt">(</span><span class="hl kwa">compose</span> zq zr zt <span class="hl opt">(</span><span class="hl kwa">incf</span> k<span class="hl opt">) (</span><span class="hl kwa">incf</span> <span class="hl num">4</span>k<span class="hl opt">+</span><span class="hl num">2 4</span><span class="hl opt">) (</span><span class="hl kwa">incf</span> <span class="hl num">2</span>k<span class="hl opt">+</span><span class="hl num">1 2</span><span class="hl opt">))</span>
                     <span class="hl opt">(</span><span class="hl kwa">setf</span> y <span class="hl opt">(</span><span class="hl kwa">extract</span> <span class="hl num">3</span><span class="hl opt">)))</span>
            <span class="hl opt">(</span><span class="hl kwa">compose</span> <span class="hl num">10</span> <span class="hl opt">(*</span> -<span class="hl num">10</span> y<span class="hl opt">)</span> <span class="hl num">1</span> zq zr zt<span class="hl opt">)</span>
            y<span class="hl opt">)))))</span>

<span class="hl opt">(</span><span class="hl kwa">defun</span> spigot <span class="hl opt">(</span><span class="hl kwa">digits</span><span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> fixnum digits<span class="hl opt">))</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">((</span><span class="hl kwa">digits-printed</span> <span class="hl num">0</span><span class="hl opt">)</span>
        <span class="hl opt">(</span><span class="hl kwa">next-digit</span> <span class="hl opt">(</span><span class="hl kwa">make-digit-generator</span><span class="hl opt">)))</span>
    <span class="hl opt">(</span><span class="hl kwa">loop</span> while <span class="hl opt">(</span><span class="hl kwa">plusp</span> digits<span class="hl opt">)</span>
          do <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(&gt;=</span> digits <span class="hl opt">+</span>digits-per-line<span class="hl opt">+)</span>
                 <span class="hl opt">(</span><span class="hl kwa">progn</span> <span class="hl opt">(</span><span class="hl kwa">loop</span> repeat <span class="hl opt">+</span>digits-per-line<span class="hl opt">+</span>
                              do <span class="hl opt">(</span><span class="hl kwa">format</span> t <span class="hl str">&quot;~d&quot;</span> <span class="hl opt">(</span><span class="hl kwa">funcall</span> next-digit<span class="hl opt">)))</span>
                        <span class="hl opt">(</span><span class="hl kwa">incf</span> digits-printed <span class="hl opt">+</span>digits-per-line<span class="hl opt">+))</span>
                 <span class="hl opt">(</span><span class="hl kwa">progn</span> <span class="hl opt">(</span><span class="hl kwa">loop</span> repeat digits
                              do <span class="hl opt">(</span><span class="hl kwa">format</span> t <span class="hl str">&quot;~d&quot;</span> <span class="hl opt">(</span><span class="hl kwa">funcall</span> next-digit<span class="hl opt">)))</span>
                        <span class="hl opt">(</span><span class="hl kwa">loop</span> repeat <span class="hl opt">(</span><span class="hl kwa">-</span> <span class="hl opt">+</span>digits-per-line<span class="hl opt">+</span> digits<span class="hl opt">)</span>
                              do <span class="hl opt">(</span><span class="hl kwa">format</span> t <span class="hl str">&quot; &quot;</span><span class="hl opt">))</span>
                        <span class="hl opt">(</span><span class="hl kwa">incf</span> digits-printed digits<span class="hl opt">)))</span>
             <span class="hl opt">(</span><span class="hl kwa">format</span> t <span class="hl str">&quot;~a:~d~%&quot;</span> <span class="hl opt">#</span>\Tab digits-printed<span class="hl opt">)</span>
             <span class="hl opt">(</span><span class="hl kwa">decf</span> digits <span class="hl opt">+</span>digits-per-line<span class="hl opt">+))))</span>


<span class="hl opt">(</span><span class="hl kwa">defun</span> main <span class="hl opt">(&amp;</span>optional
	     <span class="hl opt">(</span><span class="hl kwa">n</span> <span class="hl opt">(</span><span class="hl kwa">parse-integer</span>
                 <span class="hl opt">(</span><span class="hl kwa">or</span> <span class="hl opt">(</span><span class="hl kwa">car</span> <span class="hl opt">(</span><span class="hl kwa">last</span> <span class="hl opt">#+</span>sbcl sb-ext<span class="hl opt">:*</span>posix-argv<span class="hl opt">*</span>
                                <span class="hl opt">#+</span>cmu extensions<span class="hl opt">:*</span>command-line-strings<span class="hl opt">*</span>
                                <span class="hl opt">#+</span>gcl si<span class="hl opt">::*</span>command-args<span class="hl opt">*))</span>
                     <span class="hl opt">+</span>default-stop-digits<span class="hl opt">+))))</span>
    <span class="hl opt">(</span><span class="hl kwa">spigot</span> n<span class="hl opt">))</span>
