<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">http://shootout.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">contributed by Sassa</span>
<span class="hl com">complete rework of a contribution by Matthieu Bentot - reduce memory footprint, use atomics, reduce number of threads</span>
<span class="hl com">*/</span>

<span class="hl kwa">import</span> java<span class="hl sym">.</span>util<span class="hl sym">.</span>concurrent<span class="hl sym">.</span>atomic<span class="hl sym">.*;</span>

<span class="hl com">/**</span>
<span class="hl com">* This implementation uses standard Java threading (native threads).</span>
<span class="hl com">*</span>
<span class="hl com">* This implementation changes the one contributed by Michael Barker (itself based on the original</span>
<span class="hl com">* implementation by Luzius Meisser from old chameneos) to</span>
<span class="hl com">* - operate in constant memory: everything is allocated during initialisation;</span>
<span class="hl com">* - change the Thread.yield() into a plain spinlock.</span>
<span class="hl com">*/</span>

<span class="hl kwa">public class</span> chameneosredux <span class="hl sym">{</span>

   enum Colour <span class="hl sym">{</span>
      blue<span class="hl sym">,</span>
      red<span class="hl sym">,</span>
      yellow
   <span class="hl sym">}</span>

   <span class="hl kwa">static</span> Colour <span class="hl kwd">complement</span><span class="hl sym">(</span>Colour c1<span class="hl sym">,</span> Colour c2<span class="hl sym">) {</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>c1<span class="hl sym">==</span>c2<span class="hl sym">)</span> <span class="hl kwa">return</span> c1<span class="hl sym">;</span>

      <span class="hl kwa">if</span> <span class="hl sym">(</span>c1<span class="hl sym">==</span>Colour<span class="hl sym">.</span>blue<span class="hl sym">)</span> <span class="hl kwa">return</span> c2<span class="hl sym">==</span>Colour<span class="hl sym">.</span>red ? Colour<span class="hl sym">.</span>yellow <span class="hl sym">:</span> Colour<span class="hl sym">.</span>red<span class="hl sym">;</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>c1<span class="hl sym">==</span>Colour<span class="hl sym">.</span>red<span class="hl sym">)</span>  <span class="hl kwa">return</span> c2<span class="hl sym">==</span>Colour<span class="hl sym">.</span>blue ? Colour<span class="hl sym">.</span>yellow<span class="hl sym">:</span> Colour<span class="hl sym">.</span>blue<span class="hl sym">;</span>
      <span class="hl slc">//if (c1==yellow)</span>
      <span class="hl kwa">return</span> c2<span class="hl sym">==</span>Colour<span class="hl sym">.</span>blue ? Colour<span class="hl sym">.</span>red <span class="hl sym">:</span> Colour<span class="hl sym">.</span>blue<span class="hl sym">;</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">private final static</span> <span class="hl kwc">AtomicInteger</span> meetingsLeft <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">AtomicInteger</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">);</span>

   <span class="hl kwa">private final static</span> <span class="hl kwc">AtomicReference</span><span class="hl sym">&lt;</span>Creature<span class="hl sym">&gt;[]</span> firstValue<span class="hl sym">=(</span><span class="hl kwc">AtomicReference</span><span class="hl sym">&lt;</span>Creature<span class="hl sym">&gt;[])</span><span class="hl kwa">new</span> <span class="hl kwc">AtomicReference</span><span class="hl sym">[]{</span> <span class="hl kwa">new</span> <span class="hl kwc">AtomicReference</span><span class="hl sym">&lt;</span>Creature<span class="hl sym">&gt;(),</span> <span class="hl kwa">new</span> <span class="hl kwc">AtomicReference</span><span class="hl sym">&lt;</span>Creature<span class="hl sym">&gt;() };</span>

   <span class="hl kwa">public static</span> <span class="hl kwb">boolean</span> <span class="hl kwd">meet</span><span class="hl sym">(</span>Creature creature<span class="hl sym">)</span> <span class="hl kwa">throws</span> <span class="hl kwc">Exception</span> <span class="hl sym">{</span>
     <span class="hl kwb">int</span> m<span class="hl sym">;</span>
     <span class="hl kwa">while</span><span class="hl sym">( (</span>m <span class="hl sym">=</span> meetingsLeft<span class="hl sym">.</span><span class="hl kwd">get</span><span class="hl sym">()) !=</span> <span class="hl num">0</span> <span class="hl sym">&amp;&amp; !</span>meetingsLeft<span class="hl sym">.</span><span class="hl kwd">compareAndSet</span><span class="hl sym">(</span> m<span class="hl sym">,</span> m<span class="hl sym">-</span><span class="hl num">1</span> <span class="hl sym">) );</span>
     <span class="hl kwa">if</span> <span class="hl sym">(</span> m <span class="hl sym">==</span> <span class="hl num">0</span> <span class="hl sym">)</span> <span class="hl kwa">return</span> false<span class="hl sym">;</span>
     <span class="hl kwc">AtomicReference</span><span class="hl sym">&lt;</span>Creature<span class="hl sym">&gt;</span> fv <span class="hl sym">=</span> firstValue<span class="hl sym">[</span>m<span class="hl sym">&amp;</span><span class="hl num">1</span><span class="hl sym">];</span>

     Creature c<span class="hl sym">;</span>
     Colour c_colour<span class="hl sym">;</span>

     creature<span class="hl sym">.</span>met<span class="hl sym">=</span>null<span class="hl sym">;</span>
     <span class="hl kwa">for</span><span class="hl sym">(;;)</span>
     <span class="hl sym">{</span>
       c<span class="hl sym">=</span>fv<span class="hl sym">.</span><span class="hl kwd">get</span><span class="hl sym">();</span>
       <span class="hl kwa">if</span><span class="hl sym">(</span> c<span class="hl sym">==</span>null <span class="hl sym">)</span>
       <span class="hl sym">{</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span>fv<span class="hl sym">.</span><span class="hl kwd">compareAndSet</span><span class="hl sym">(</span>c<span class="hl sym">,</span>creature<span class="hl sym">))</span> <span class="hl kwa">break</span><span class="hl sym">;</span>
       <span class="hl sym">}</span>
       <span class="hl kwa">else</span>
       <span class="hl sym">{</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span>fv<span class="hl sym">.</span><span class="hl kwd">compareAndSet</span><span class="hl sym">(</span>c<span class="hl sym">,</span>null<span class="hl sym">))</span> <span class="hl kwa">break</span><span class="hl sym">;</span>
       <span class="hl sym">}</span>
     <span class="hl sym">}</span>

     <span class="hl kwa">if</span> <span class="hl sym">(</span> c<span class="hl sym">==</span>null <span class="hl sym">)</span> <span class="hl slc">// if so, then we were first to get there, wait until someone meets</span>
     <span class="hl sym">{</span>
       <span class="hl kwa">while</span><span class="hl sym">(</span>creature<span class="hl sym">.</span>met<span class="hl sym">==</span>null<span class="hl sym">);</span>
       c_colour<span class="hl sym">=</span>creature<span class="hl sym">.</span>met<span class="hl sym">;</span>
     <span class="hl sym">}</span>
     <span class="hl kwa">else</span>
     <span class="hl sym">{</span>
       c_colour <span class="hl sym">=</span> c<span class="hl sym">.</span>value<span class="hl sym">;</span>
       c<span class="hl sym">.</span>met<span class="hl sym">=</span>creature<span class="hl sym">.</span>value<span class="hl sym">;</span>
     <span class="hl sym">}</span>

     <span class="hl slc">// Update creature</span>
     creature<span class="hl sym">.</span>value<span class="hl sym">=</span><span class="hl kwd">complement</span><span class="hl sym">(</span>creature<span class="hl sym">.</span>value<span class="hl sym">,</span> c_colour<span class="hl sym">);</span>
     creature<span class="hl sym">.</span>count<span class="hl sym">++;</span>
     <span class="hl kwa">if</span> <span class="hl sym">(</span>creature<span class="hl sym">==</span>c<span class="hl sym">)</span> creature<span class="hl sym">.</span>sameCount<span class="hl sym">++;</span>
     <span class="hl kwa">return</span> true<span class="hl sym">;</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">static final class</span> Creature <span class="hl kwa">extends</span> <span class="hl kwc">Thread</span> <span class="hl sym">{</span>
      <span class="hl kwa">volatile</span> Colour value<span class="hl sym">;</span>
      <span class="hl kwa">volatile</span> Colour met<span class="hl sym">;</span>
      <span class="hl kwa">volatile</span> <span class="hl kwb">boolean</span> parked<span class="hl sym">;</span>

      <span class="hl kwa">private</span> <span class="hl kwb">int</span> count<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">,</span> sameCount<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span>

      <span class="hl kwa">public</span> <span class="hl kwd">Creature</span><span class="hl sym">(</span>Colour colour<span class="hl sym">) {</span>
         <span class="hl kwa">this</span><span class="hl sym">.</span>value <span class="hl sym">=</span> colour<span class="hl sym">;</span>
      <span class="hl sym">}</span>

      <span class="hl kwa">public</span> <span class="hl kwb">void</span> <span class="hl kwd">run</span><span class="hl sym">() {</span>
         <span class="hl kwa">try</span> <span class="hl sym">{</span>
            <span class="hl kwa">while</span><span class="hl sym">(</span><span class="hl kwd">meet</span><span class="hl sym">(</span><span class="hl kwa">this</span><span class="hl sym">));</span>
         <span class="hl sym">}</span> <span class="hl kwa">catch</span> <span class="hl sym">(</span><span class="hl kwc">Exception</span> e<span class="hl sym">) {</span>
         <span class="hl sym">}</span>
      <span class="hl sym">}</span>

      <span class="hl kwa">public</span> <span class="hl kwb">int</span> <span class="hl kwd">getCount</span><span class="hl sym">() {</span>
         <span class="hl kwa">return</span> count<span class="hl sym">;</span>
      <span class="hl sym">}</span>

      <span class="hl kwa">public</span> <span class="hl kwc">String</span> <span class="hl kwd">toString</span><span class="hl sym">() {</span>
         <span class="hl kwa">return</span> <span class="hl kwc">String</span><span class="hl sym">.</span><span class="hl kwd">valueOf</span><span class="hl sym">(</span>count<span class="hl sym">) +</span> <span class="hl kwd">getNumber</span><span class="hl sym">(</span>sameCount<span class="hl sym">);</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">private static</span> <span class="hl kwb">void</span> <span class="hl kwd">run</span><span class="hl sym">(</span><span class="hl kwb">int</span> n<span class="hl sym">,</span> Colour<span class="hl sym">...</span>colours<span class="hl sym">) {</span>
      <span class="hl slc">// Initialise</span>
      meetingsLeft<span class="hl sym">.</span><span class="hl kwd">set</span><span class="hl sym">(</span> <span class="hl num">2</span><span class="hl sym">*</span>n <span class="hl sym">);</span>

      Creature creatures<span class="hl sym">[] =</span> <span class="hl kwa">new</span> Creature<span class="hl sym">[</span>colours<span class="hl sym">.</span>length<span class="hl sym">];</span>
      <span class="hl kwc">StringBuilder</span> sb <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">StringBuilder</span><span class="hl sym">(</span><span class="hl num">80</span><span class="hl sym">);</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> creatures<span class="hl sym">.</span>length<span class="hl sym">;</span> i<span class="hl sym">++) {</span>
         sb<span class="hl sym">.</span><span class="hl kwd">append</span><span class="hl sym">(</span><span class="hl str">&quot; &quot;</span><span class="hl sym">).</span><span class="hl kwd">append</span><span class="hl sym">(</span>colours<span class="hl sym">[</span>i<span class="hl sym">]);</span>
         creatures<span class="hl sym">[</span>i<span class="hl sym">] =</span> <span class="hl kwa">new</span> <span class="hl kwd">Creature</span><span class="hl sym">(</span>colours<span class="hl sym">[</span>i<span class="hl sym">]);</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span>i<span class="hl sym">&gt;</span><span class="hl num">0</span><span class="hl sym">)</span> creatures<span class="hl sym">[</span>i<span class="hl sym">].</span><span class="hl kwd">start</span><span class="hl sym">();</span>
      <span class="hl sym">}</span>

      <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">(</span>sb<span class="hl sym">);</span>

      creatures<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">].</span><span class="hl kwd">run</span><span class="hl sym">();</span>

      <span class="hl slc">// Wait...</span>
      <span class="hl kwb">int</span> total <span class="hl sym">=</span> creatures<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">].</span><span class="hl kwd">getCount</span><span class="hl sym">();</span>
      <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">(</span>creatures<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]);</span>

      <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> creatures<span class="hl sym">.</span>length<span class="hl sym">;</span> i<span class="hl sym">++) {</span>
         Creature creature<span class="hl sym">=</span>creatures<span class="hl sym">[</span>i<span class="hl sym">];</span>
         <span class="hl kwa">try</span> <span class="hl sym">{</span>
            creature<span class="hl sym">.</span><span class="hl kwd">join</span><span class="hl sym">();</span>
         <span class="hl sym">}</span> <span class="hl kwa">catch</span> <span class="hl sym">(</span><span class="hl kwc">InterruptedException</span> e<span class="hl sym">) {</span>
         <span class="hl sym">}</span>
         <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">(</span>creature<span class="hl sym">);</span>
         total <span class="hl sym">+=</span> creature<span class="hl sym">.</span><span class="hl kwd">getCount</span><span class="hl sym">();</span>
      <span class="hl sym">}</span>

      <span class="hl slc">// Print result</span>
      <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">(</span><span class="hl kwd">getNumber</span><span class="hl sym">(</span>total<span class="hl sym">));</span>
      <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">();</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwc">String</span><span class="hl sym">[]</span> args<span class="hl sym">) {</span>
      <span class="hl kwb">int</span> n <span class="hl sym">=</span> <span class="hl num">600</span><span class="hl sym">;</span>
      <span class="hl kwa">if</span><span class="hl sym">(</span> args<span class="hl sym">.</span>length <span class="hl sym">==</span> <span class="hl num">1</span><span class="hl sym">)</span>
      <span class="hl sym">{</span>
        <span class="hl kwa">try</span> <span class="hl sym">{</span>
         n <span class="hl sym">=</span> <span class="hl kwc">Integer</span><span class="hl sym">.</span><span class="hl kwd">parseInt</span><span class="hl sym">(</span>args<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]);</span>
        <span class="hl sym">}</span> <span class="hl kwa">catch</span> <span class="hl sym">(</span><span class="hl kwc">Exception</span> e<span class="hl sym">) {}</span>
      <span class="hl sym">}</span>
      n<span class="hl sym">&amp;=</span>~<span class="hl num">1</span><span class="hl sym">;</span>

      <span class="hl kwd">printColours</span><span class="hl sym">();</span>

      <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">();</span>

      <span class="hl kwd">run</span><span class="hl sym">(</span>n<span class="hl sym">,</span> Colour<span class="hl sym">.</span>blue<span class="hl sym">,</span> Colour<span class="hl sym">.</span>red<span class="hl sym">,</span> Colour<span class="hl sym">.</span>yellow<span class="hl sym">);</span>
      <span class="hl kwd">run</span><span class="hl sym">(</span>n<span class="hl sym">,</span> Colour<span class="hl sym">.</span>blue<span class="hl sym">,</span> Colour<span class="hl sym">.</span>red<span class="hl sym">,</span> Colour<span class="hl sym">.</span>yellow<span class="hl sym">,</span> Colour<span class="hl sym">.</span>red<span class="hl sym">,</span> Colour<span class="hl sym">.</span>yellow<span class="hl sym">,</span> Colour<span class="hl sym">.</span>blue<span class="hl sym">,</span> Colour<span class="hl sym">.</span>red<span class="hl sym">,</span> Colour<span class="hl sym">.</span>yellow<span class="hl sym">,</span> Colour<span class="hl sym">.</span>red<span class="hl sym">,</span> Colour<span class="hl sym">.</span>blue<span class="hl sym">);</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">private static final</span> <span class="hl kwc">String</span> NUMBERS<span class="hl sym">[] = {</span> <span class="hl str">&quot;zero&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;one&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;two&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;three&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;four&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;five&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;six&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;seven&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;eight&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;nine&quot;</span> <span class="hl sym">};</span>

   <span class="hl kwa">private static</span> <span class="hl kwc">String</span> <span class="hl kwd">getNumber</span><span class="hl sym">(</span><span class="hl kwb">int</span> n<span class="hl sym">) {</span>
      <span class="hl kwc">StringBuilder</span> sb <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">StringBuilder</span><span class="hl sym">(</span><span class="hl num">80</span><span class="hl sym">);</span>
      <span class="hl kwc">String</span> nStr <span class="hl sym">=</span> <span class="hl kwc">String</span><span class="hl sym">.</span><span class="hl kwd">valueOf</span><span class="hl sym">(</span>n<span class="hl sym">);</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> nStr<span class="hl sym">.</span><span class="hl kwd">length</span><span class="hl sym">();</span> i<span class="hl sym">++) {</span>
         sb<span class="hl sym">.</span><span class="hl kwd">append</span><span class="hl sym">(</span><span class="hl str">' '</span><span class="hl sym">).</span><span class="hl kwd">append</span><span class="hl sym">(</span>NUMBERS<span class="hl sym">[</span><span class="hl kwc">Character</span><span class="hl sym">.</span><span class="hl kwd">getNumericValue</span><span class="hl sym">(</span>nStr<span class="hl sym">.</span><span class="hl kwd">charAt</span><span class="hl sym">(</span>i<span class="hl sym">))]);</span>
      <span class="hl sym">}</span>

      <span class="hl kwa">return</span> sb<span class="hl sym">.</span><span class="hl kwd">toString</span><span class="hl sym">();</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">private static</span> <span class="hl kwb">void</span> <span class="hl kwd">printColours</span><span class="hl sym">() {</span>
      <span class="hl kwd">printColours</span><span class="hl sym">(</span>Colour<span class="hl sym">.</span>blue<span class="hl sym">,</span> Colour<span class="hl sym">.</span>blue<span class="hl sym">);</span>
      <span class="hl kwd">printColours</span><span class="hl sym">(</span>Colour<span class="hl sym">.</span>blue<span class="hl sym">,</span> Colour<span class="hl sym">.</span>red<span class="hl sym">);</span>
      <span class="hl kwd">printColours</span><span class="hl sym">(</span>Colour<span class="hl sym">.</span>blue<span class="hl sym">,</span> Colour<span class="hl sym">.</span>yellow<span class="hl sym">);</span>
      <span class="hl kwd">printColours</span><span class="hl sym">(</span>Colour<span class="hl sym">.</span>red<span class="hl sym">,</span> Colour<span class="hl sym">.</span>blue<span class="hl sym">);</span>
      <span class="hl kwd">printColours</span><span class="hl sym">(</span>Colour<span class="hl sym">.</span>red<span class="hl sym">,</span> Colour<span class="hl sym">.</span>red<span class="hl sym">);</span>
      <span class="hl kwd">printColours</span><span class="hl sym">(</span>Colour<span class="hl sym">.</span>red<span class="hl sym">,</span> Colour<span class="hl sym">.</span>yellow<span class="hl sym">);</span>
      <span class="hl kwd">printColours</span><span class="hl sym">(</span>Colour<span class="hl sym">.</span>yellow<span class="hl sym">,</span> Colour<span class="hl sym">.</span>blue<span class="hl sym">);</span>
      <span class="hl kwd">printColours</span><span class="hl sym">(</span>Colour<span class="hl sym">.</span>yellow<span class="hl sym">,</span> Colour<span class="hl sym">.</span>red<span class="hl sym">);</span>
      <span class="hl kwd">printColours</span><span class="hl sym">(</span>Colour<span class="hl sym">.</span>yellow<span class="hl sym">,</span> Colour<span class="hl sym">.</span>yellow<span class="hl sym">);</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">private static</span> <span class="hl kwb">void</span> <span class="hl kwd">printColours</span><span class="hl sym">(</span>Colour c1<span class="hl sym">,</span> Colour c2<span class="hl sym">) {</span>
      <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">(</span>c1 <span class="hl sym">+</span> <span class="hl str">&quot; + &quot;</span> <span class="hl sym">+</span> c2 <span class="hl sym">+</span> <span class="hl str">&quot; -&gt; &quot;</span> <span class="hl sym">+</span> <span class="hl kwd">complement</span><span class="hl sym">(</span>c1<span class="hl sym">,</span> c2<span class="hl sym">));</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>
