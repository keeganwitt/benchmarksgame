<span class="hl slc">;;   The Computer Language Benchmarks Game</span>
<span class="hl slc">;;   http://shootout.alioth.debian.org/</span>

<span class="hl slc">;; contributed by Andy Fingerhut</span>

<span class="hl sym">(</span>ns regexdna
  <span class="hl sym">(:</span>gen<span class="hl sym">-</span>class<span class="hl sym">)</span>
  <span class="hl sym">(:</span>use <span class="hl sym">[</span>clojure.contrib.str<span class="hl sym">-</span>utils <span class="hl sym">:</span>only <span class="hl sym">(</span>re<span class="hl sym">-</span>gsub<span class="hl sym">)])</span>
  <span class="hl sym">(:</span>import <span class="hl sym">(</span>java.util.regex Pattern<span class="hl sym">)))</span>


<span class="hl slc">;; Slightly modified from standard library slurp so that it can read</span>
<span class="hl slc">;; from standard input.</span>

<span class="hl sym">(</span>defn slurp<span class="hl sym">-</span>std<span class="hl sym">-</span>input
<span class="hl slc">;   &quot;Reads the standard input using the encoding enc into a string</span>
<span class="hl slc">;   and returns it.&quot;</span>
  <span class="hl sym">([] (</span>slurp<span class="hl sym">-</span>std<span class="hl sym">-</span>input <span class="hl sym">(</span>.name <span class="hl sym">(</span>java.nio.charset.Charset<span class="hl sym">/</span>defaultCharset<span class="hl sym">))))</span>
  <span class="hl sym">([</span>#^String enc<span class="hl sym">]</span>
     <span class="hl sym">(</span>with<span class="hl sym">-</span>open <span class="hl sym">[</span>r <span class="hl sym">(</span>new java.io.BufferedReader <span class="hl sym">*</span>in<span class="hl sym">*)]</span>
       <span class="hl sym">(</span>let <span class="hl sym">[</span>sb <span class="hl sym">(</span>new StringBuilder<span class="hl sym">)]</span>
	 <span class="hl sym">(</span>loop <span class="hl sym">[</span>c <span class="hl sym">(</span>.read r<span class="hl sym">)]</span>
	   <span class="hl sym">(</span>if <span class="hl sym">(</span>neg? c<span class="hl sym">)</span>
	     <span class="hl sym">(</span>str sb<span class="hl sym">)</span>
	     <span class="hl sym">(</span>do
	       <span class="hl sym">(</span>.append sb <span class="hl sym">(</span>char c<span class="hl sym">))</span>
	       <span class="hl sym">(</span>recur <span class="hl sym">(</span>.read r<span class="hl sym">)))))))))</span>


<span class="hl sym">(</span>def dna<span class="hl sym">-</span>seq<span class="hl sym">-</span>regexes <span class="hl sym">'(</span>    <span class="hl str">&quot;agggtaaa|tttaccct&quot;</span>
		       <span class="hl str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span>
		       <span class="hl str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span>
		       <span class="hl str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span>
		       <span class="hl str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span>
		       <span class="hl str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span>
		       <span class="hl str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span>
		       <span class="hl str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span>
		       <span class="hl str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span> <span class="hl sym">))</span>


<span class="hl sym">(</span>def iub<span class="hl sym">-</span>codes <span class="hl sym">'( [</span> <span class="hl str">&quot;B&quot;</span>  <span class="hl str">&quot;(c|g|t)&quot;</span>   <span class="hl sym">]</span>
		  <span class="hl sym">[</span> <span class="hl str">&quot;D&quot;</span>  <span class="hl str">&quot;(a|g|t)&quot;</span>   <span class="hl sym">]</span>
		  <span class="hl sym">[</span> <span class="hl str">&quot;H&quot;</span>  <span class="hl str">&quot;(a|c|t)&quot;</span>   <span class="hl sym">]</span>
		  <span class="hl sym">[</span> <span class="hl str">&quot;K&quot;</span>  <span class="hl str">&quot;(g|t)&quot;</span>     <span class="hl sym">]</span>
		  <span class="hl sym">[</span> <span class="hl str">&quot;M&quot;</span>  <span class="hl str">&quot;(a|c)&quot;</span>     <span class="hl sym">]</span>
		  <span class="hl sym">[</span> <span class="hl str">&quot;N&quot;</span>  <span class="hl str">&quot;(a|c|g|t)&quot;</span> <span class="hl sym">]</span>
		  <span class="hl sym">[</span> <span class="hl str">&quot;R&quot;</span>  <span class="hl str">&quot;(a|g)&quot;</span>     <span class="hl sym">]</span>
		  <span class="hl sym">[</span> <span class="hl str">&quot;S&quot;</span>  <span class="hl str">&quot;(c|g)&quot;</span>     <span class="hl sym">]</span>
		  <span class="hl sym">[</span> <span class="hl str">&quot;V&quot;</span>  <span class="hl str">&quot;(a|c|g)&quot;</span>   <span class="hl sym">]</span>
		  <span class="hl sym">[</span> <span class="hl str">&quot;W&quot;</span>  <span class="hl str">&quot;(a|t)&quot;</span>     <span class="hl sym">]</span>
		  <span class="hl sym">[</span> <span class="hl str">&quot;Y&quot;</span>  <span class="hl str">&quot;(c|t)&quot;</span>     <span class="hl sym">] ))</span>


<span class="hl sym">(</span>defn one<span class="hl sym">-</span>replacement <span class="hl sym">[</span>str <span class="hl sym">[</span>iub<span class="hl sym">-</span>str iub<span class="hl sym">-</span>replacement<span class="hl sym">]]</span>
  <span class="hl sym">(</span>re<span class="hl sym">-</span>gsub <span class="hl sym">(</span>. Pattern <span class="hl sym">(</span>compile iub<span class="hl sym">-</span>str<span class="hl sym">))</span> iub<span class="hl sym">-</span>replacement str<span class="hl sym">))</span>


<span class="hl sym">(</span>defn <span class="hl sym">-</span>main
  <span class="hl sym">[&amp;</span> args<span class="hl sym">]</span>
  <span class="hl sym">(</span>let <span class="hl sym">[</span>content <span class="hl sym">(</span>slurp<span class="hl sym">-</span>std<span class="hl sym">-</span>input<span class="hl sym">)</span>
        original<span class="hl sym">-</span>len <span class="hl sym">(</span>count content<span class="hl sym">)</span>
        <span class="hl slc">;; I'd prefer if I could use the regexp #&quot;(^&gt;.*)?\n&quot; like the</span>
        <span class="hl slc">;; Perl benchmark does, but that only matches ^ at the beginning</span>
        <span class="hl slc">;; of the string, not at the beginning of a line in the middle</span>
        <span class="hl slc">;; of the string.</span>
        content <span class="hl sym">(</span>re<span class="hl sym">-</span>gsub #<span class="hl str">&quot;(^&gt;.*|</span><span class="hl esc">\</span><span class="hl str">n&gt;.*)?</span><span class="hl esc">\</span><span class="hl str">n&quot;</span> <span class="hl str">&quot;&quot;</span> content<span class="hl sym">)</span>
        dna<span class="hl sym">-</span>seq<span class="hl sym">-</span>only<span class="hl sym">-</span>len <span class="hl sym">(</span>count content<span class="hl sym">)]</span>
    
    <span class="hl sym">(</span>doseq <span class="hl sym">[</span>re dna<span class="hl sym">-</span>seq<span class="hl sym">-</span>regexes<span class="hl sym">]</span>
      <span class="hl sym">(</span>println <span class="hl sym">(</span>format <span class="hl str">&quot;%s %d&quot;</span> re
                       <span class="hl slc">;; Prepending (?i) to the regexp in Java makes it</span>
                       <span class="hl slc">;; case-insensitive.</span>
                       <span class="hl sym">(</span>count <span class="hl sym">(</span>re<span class="hl sym">-</span>seq <span class="hl sym">(</span>. Pattern <span class="hl sym">(</span>compile <span class="hl sym">(</span>str <span class="hl str">&quot;(?i)&quot;</span> re<span class="hl sym">)))</span>
                                      content<span class="hl sym">)))))</span>
    
    <span class="hl sym">(</span>let <span class="hl sym">[</span>content <span class="hl sym">(</span>reduce one<span class="hl sym">-</span>replacement content iub<span class="hl sym">-</span>codes<span class="hl sym">)]</span>
      <span class="hl sym">(</span>println <span class="hl sym">(</span>format <span class="hl str">&quot;</span><span class="hl esc">\</span><span class="hl str">n%d</span><span class="hl esc">\</span><span class="hl str">n%d</span><span class="hl esc">\</span><span class="hl str">n%d&quot;</span> original<span class="hl sym">-</span>len dna<span class="hl sym">-</span>seq<span class="hl sym">-</span>only<span class="hl sym">-</span>len
                       <span class="hl sym">(</span>count content<span class="hl sym">))))))</span>
