<span class="hl slc">! The Computer Language Benchmarks Game</span>
<span class="hl slc">! http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">!</span>
<span class="hl slc">! original C program by Francesco Abbate</span>
<span class="hl slc">! Fortran version by Vladimir Fuka</span>


<span class="hl kwa">module</span> apr
  <span class="hl kwa">use</span> iso_c_binding
  <span class="hl kwa">implicit none</span>

  <span class="hl kwa">interface</span>

    <span class="hl kwa">integer</span><span class="hl opt">(</span>c_int<span class="hl opt">)</span> <span class="hl kwa">function</span> <span class="hl kwd">apr_initialize</span><span class="hl opt">()</span> <span class="hl kwd">bind</span><span class="hl opt">(</span>C<span class="hl opt">)</span>
      import
    <span class="hl kwa">end function</span>

    <span class="hl kwa">type</span><span class="hl opt">(</span>c_ptr<span class="hl opt">)</span> <span class="hl kwa">function</span> <span class="hl kwd">apr_palloc</span><span class="hl opt">(</span>p<span class="hl opt">,</span>size<span class="hl opt">)</span> <span class="hl kwd">bind</span><span class="hl opt">(</span>C<span class="hl opt">)</span>
      import
      <span class="hl kwa">type</span><span class="hl opt">(</span>c_ptr<span class="hl opt">),</span> value <span class="hl opt">::</span> p
      <span class="hl kwa">integer</span><span class="hl opt">(</span>c_size_t<span class="hl opt">),</span> value <span class="hl opt">::</span> size
    <span class="hl kwa">end function</span>

    <span class="hl kwa">integer</span><span class="hl opt">(</span>c_int<span class="hl opt">)</span> <span class="hl kwa">function</span> <span class="hl kwd">apr_pool_create_unmanaged_ex</span><span class="hl opt">(</span>newpool<span class="hl opt">,</span> abort_fn<span class="hl opt">,</span> allocator<span class="hl opt">)</span> <span class="hl kwd">bind</span><span class="hl opt">(</span>C<span class="hl opt">)</span>
      import
      <span class="hl kwa">type</span><span class="hl opt">(</span>c_ptr<span class="hl opt">),</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>out<span class="hl opt">) ::</span> newpool
      <span class="hl kwa">type</span><span class="hl opt">(</span>c_funptr<span class="hl opt">),</span> value <span class="hl opt">::</span> abort_fn
      <span class="hl kwa">type</span><span class="hl opt">(</span>c_funptr<span class="hl opt">),</span> value <span class="hl opt">::</span> allocator
    <span class="hl kwa">end function</span>

    <span class="hl kwa">subroutine</span> <span class="hl kwd">apr_pool_clear</span><span class="hl opt">(</span>p<span class="hl opt">)</span> <span class="hl kwd">bind</span><span class="hl opt">(</span>C<span class="hl opt">)</span>
      import
      <span class="hl kwa">type</span><span class="hl opt">(</span>c_ptr<span class="hl opt">),</span>value <span class="hl opt">::</span> p
    <span class="hl kwa">end subroutine</span>

    <span class="hl kwa">subroutine</span> <span class="hl kwd">apr_pool_destroy</span><span class="hl opt">(</span>p<span class="hl opt">)</span> <span class="hl kwd">bind</span><span class="hl opt">(</span>C<span class="hl opt">)</span>
      import
      <span class="hl kwa">type</span><span class="hl opt">(</span>c_ptr<span class="hl opt">),</span>value <span class="hl opt">::</span> p
    <span class="hl kwa">end subroutine</span>

  <span class="hl kwa">end interface</span>

  <span class="hl kwa">contains</span>

    <span class="hl kwa">integer</span><span class="hl opt">(</span>c_int<span class="hl opt">)</span> <span class="hl kwa">function</span> <span class="hl kwd">abrt</span><span class="hl opt">(</span>i<span class="hl opt">)</span> <span class="hl kwd">bind</span><span class="hl opt">(</span>C<span class="hl opt">)</span>
      <span class="hl kwa">integer</span><span class="hl opt">(</span>c_int<span class="hl opt">),</span> value <span class="hl opt">,</span><span class="hl kwd">intent</span><span class="hl opt">(</span>in<span class="hl opt">) ::</span> i
      abrt <span class="hl opt">=</span> i
      error <span class="hl kwa">stop</span>
    <span class="hl kwa">end function</span>

<span class="hl kwa">end module</span> apr

<span class="hl kwa">module</span> trees
  <span class="hl kwa">use</span> iso_c_binding
  <span class="hl kwa">use</span> apr

  <span class="hl kwa">implicit none</span>

  <span class="hl kwa">type</span> node
    <span class="hl kwa">integer</span> i
    <span class="hl kwa">type</span><span class="hl opt">(</span>node<span class="hl opt">),</span> <span class="hl kwa">pointer</span> <span class="hl opt">::</span> left
    <span class="hl kwa">type</span><span class="hl opt">(</span>node<span class="hl opt">),</span> <span class="hl kwa">pointer</span> <span class="hl opt">::</span> right
  <span class="hl kwa">end type</span>

  <span class="hl kwa">contains</span>

    <span class="hl kwa">recursive integer function</span> <span class="hl kwd">node_check</span><span class="hl opt">(</span>n<span class="hl opt">)</span> <span class="hl kwd">result</span><span class="hl opt">(</span>res<span class="hl opt">)</span>
      <span class="hl kwa">type</span><span class="hl opt">(</span>node<span class="hl opt">),</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>in<span class="hl opt">) ::</span> n
      <span class="hl kwa">integer</span> lc<span class="hl opt">,</span>rc

      <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">associated</span><span class="hl opt">(</span>n<span class="hl opt">%</span>left<span class="hl opt">))</span> <span class="hl kwa">then</span>
          lc <span class="hl opt">=</span> <span class="hl kwd">node_check</span><span class="hl opt">(</span>n<span class="hl opt">%</span>left<span class="hl opt">)</span>
          rc <span class="hl opt">=</span> <span class="hl kwd">node_check</span><span class="hl opt">(</span>n<span class="hl opt">%</span>right<span class="hl opt">)</span>
          res <span class="hl opt">=</span> lc <span class="hl opt">+</span> n<span class="hl opt">%</span>i <span class="hl opt">-</span> rc
      <span class="hl kwa">else</span>
        res <span class="hl opt">=</span>  n<span class="hl opt">%</span>i
      <span class="hl kwa">endif</span>
    <span class="hl kwa">end function</span>


    <span class="hl kwa">recursive function</span> <span class="hl kwd">make</span><span class="hl opt">(</span>i<span class="hl opt">,</span>depth<span class="hl opt">,</span> pool<span class="hl opt">)</span> <span class="hl kwd">result</span><span class="hl opt">(</span>res<span class="hl opt">)</span>
      <span class="hl kwa">type</span><span class="hl opt">(</span>node<span class="hl opt">),</span><span class="hl kwa">pointer</span> <span class="hl opt">::</span> res
      <span class="hl kwa">type</span><span class="hl opt">(</span>c_ptr<span class="hl opt">),</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>in<span class="hl opt">) ::</span> pool
      <span class="hl kwa">integer</span><span class="hl opt">,</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>in<span class="hl opt">) ::</span> i
      <span class="hl kwa">integer</span><span class="hl opt">,</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>in<span class="hl opt">) ::</span> depth

      <span class="hl kwa">call</span> <span class="hl kwd">c_f_pointer</span><span class="hl opt">(</span> <span class="hl kwd">apr_palloc</span><span class="hl opt">(</span>pool<span class="hl opt">,</span> <span class="hl kwd">sizeof</span><span class="hl opt">(</span>res<span class="hl opt">)),</span> res<span class="hl opt">)</span>

      res<span class="hl opt">%</span>i <span class="hl opt">=</span> i

      <span class="hl kwa">if</span> <span class="hl opt">(</span>depth <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">then</span>
          res<span class="hl opt">%</span>left  <span class="hl opt">=&gt;</span> <span class="hl kwd">make</span><span class="hl opt">(</span><span class="hl num">2</span><span class="hl opt">*</span>i<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">,</span> depth <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">,</span> pool<span class="hl opt">)</span>
          res<span class="hl opt">%</span>right <span class="hl opt">=&gt;</span> <span class="hl kwd">make</span><span class="hl opt">(</span><span class="hl num">2</span><span class="hl opt">*</span>i  <span class="hl opt">,</span> depth <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">,</span> pool<span class="hl opt">)</span>
      <span class="hl kwa">else</span>
          res<span class="hl opt">%</span>left  <span class="hl opt">=&gt;</span> <span class="hl kwd">null</span><span class="hl opt">()</span>
          res<span class="hl opt">%</span>right <span class="hl opt">=&gt;</span> <span class="hl kwd">null</span><span class="hl opt">()</span>
      <span class="hl kwa">end if</span>
    <span class="hl kwa">end function</span>

<span class="hl kwa">end module</span> trees



<span class="hl kwa">program</span> main
  <span class="hl kwa">use</span> iso_c_binding
  <span class="hl kwa">use</span> apr
  <span class="hl kwa">use</span> trees

  <span class="hl kwa">implicit none</span>

  <span class="hl kwa">integer</span><span class="hl opt">,</span> <span class="hl kwa">parameter</span> <span class="hl opt">::</span> line_size <span class="hl opt">=</span> <span class="hl num">64</span>

  <span class="hl kwa">type</span><span class="hl opt">(</span>c_ptr<span class="hl opt">) ::</span> long_lived_pool
  <span class="hl kwa">integer</span><span class="hl opt">,</span><span class="hl kwa">parameter</span> <span class="hl opt">::</span> min_depth <span class="hl opt">=</span> <span class="hl num">4</span>
  <span class="hl kwa">integer</span> <span class="hl opt">::</span> req_depth<span class="hl opt">,</span> max_depth<span class="hl opt">,</span> stretch_depth
  <span class="hl kwa">integer</span><span class="hl opt">(</span>c_int<span class="hl opt">) ::</span> tmp
  <span class="hl kwa">character</span><span class="hl opt">(</span><span class="hl num">32</span><span class="hl opt">) ::</span> str

  <span class="hl kwa">type</span><span class="hl opt">(</span>node<span class="hl opt">),</span><span class="hl kwa">pointer</span> <span class="hl opt">::</span> long_lived_tree

  <span class="hl kwa">integer</span> d<span class="hl opt">,</span>iterations<span class="hl opt">,</span>c<span class="hl opt">,</span>i
  <span class="hl kwa">type</span><span class="hl opt">(</span>c_ptr<span class="hl opt">) ::</span> store
  <span class="hl kwa">type</span><span class="hl opt">(</span>node<span class="hl opt">),</span><span class="hl kwa">pointer</span> <span class="hl opt">::</span> a<span class="hl opt">,</span> b<span class="hl opt">,</span> curr
  <span class="hl kwa">character</span><span class="hl opt">(</span>line_size<span class="hl opt">),</span><span class="hl kwa">dimension</span><span class="hl opt">(:),</span>allocatable <span class="hl opt">::</span> outputstr
  <span class="hl kwa">character</span><span class="hl opt">,</span> <span class="hl kwa">parameter</span> <span class="hl opt">::</span> t <span class="hl opt">=</span> <span class="hl kwd">achar</span><span class="hl opt">(</span><span class="hl num">9</span><span class="hl opt">)</span>
  <span class="hl kwa">type</span><span class="hl opt">(</span>c_funptr<span class="hl opt">)::</span> abrtptr

  abrtptr <span class="hl opt">=</span> <span class="hl kwd">c_funloc</span><span class="hl opt">(</span>abrt<span class="hl opt">)</span>

  <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">command_argument_count</span><span class="hl opt">()==</span><span class="hl num">1</span><span class="hl opt">)</span> <span class="hl kwa">then</span>
    <span class="hl kwa">call</span> <span class="hl kwd">get_command_argument</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">,</span>str<span class="hl opt">)</span>
    <span class="hl kwa">read</span><span class="hl opt">(</span>str<span class="hl opt">,*)</span> req_depth
  <span class="hl kwa">else</span>
    req_depth <span class="hl opt">=</span> <span class="hl num">10</span>
  <span class="hl kwa">end if</span>

  <span class="hl kwa">if</span> <span class="hl opt">(</span>req_depth <span class="hl opt">&gt;</span> min_depth<span class="hl opt">+</span><span class="hl num">2</span><span class="hl opt">)</span> <span class="hl kwa">then</span>
    max_depth <span class="hl opt">=</span> req_depth
  <span class="hl kwa">else</span>
    max_depth <span class="hl opt">=</span> min_depth <span class="hl opt">+</span> <span class="hl num">2</span>
  <span class="hl kwa">end if</span>

  <span class="hl kwd">allocate</span><span class="hl opt">(</span><span class="hl kwd">outputstr</span><span class="hl opt">(</span>min_depth<span class="hl opt">:</span>max_depth<span class="hl opt">))</span>

  stretch_depth <span class="hl opt">=</span> max_depth<span class="hl opt">+</span><span class="hl num">1</span>

  tmp <span class="hl opt">=</span> <span class="hl kwd">apr_initialize</span><span class="hl opt">()</span>

  <span class="hl slc">! Alloc then dealloc stretchdepth tree</span>

  tmp <span class="hl opt">=</span> <span class="hl kwd">apr_pool_create_unmanaged_ex</span><span class="hl opt">(</span>store<span class="hl opt">,</span> abrtptr<span class="hl opt">,</span> c_null_funptr<span class="hl opt">)</span>

  curr <span class="hl opt">=&gt;</span> <span class="hl kwd">make</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> stretch_depth<span class="hl opt">,</span> store<span class="hl opt">)</span>

  <span class="hl kwa">write</span><span class="hl opt">(*,</span><span class="hl str">&quot;(2(a,i0))&quot;</span><span class="hl opt">)</span> <span class="hl str">&quot;stretch tree of depth &quot;</span><span class="hl opt">,</span>stretch_depth<span class="hl opt">,</span> t<span class="hl opt">//</span><span class="hl str">&quot; check: &quot;</span><span class="hl opt">,</span>  <span class="hl kwd">node_check</span><span class="hl opt">(</span>curr<span class="hl opt">)</span>

  <span class="hl kwa">call</span> <span class="hl kwd">apr_pool_destroy</span><span class="hl opt">(</span>store<span class="hl opt">)</span>

  tmp <span class="hl opt">=</span> <span class="hl kwd">apr_pool_create_unmanaged_ex</span><span class="hl opt">(</span>long_lived_pool<span class="hl opt">,</span> abrtptr<span class="hl opt">,</span> c_null_funptr<span class="hl opt">)</span>

  long_lived_tree <span class="hl opt">=&gt;</span> <span class="hl kwd">make</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> max_depth<span class="hl opt">,</span> long_lived_pool<span class="hl opt">)</span>

  <span class="hl slc">!$omp parallel do private(store, a, b, c, i, iterations, tmp) schedule(dynamic,1)</span>
  <span class="hl kwa">do</span>  d <span class="hl opt">=</span> min_depth<span class="hl opt">,</span> max_depth<span class="hl opt">,</span> <span class="hl num">2</span>
      iterations <span class="hl opt">=</span> <span class="hl kwd">ishft</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">,</span> max_depth <span class="hl opt">-</span> d <span class="hl opt">+</span> min_depth<span class="hl opt">)</span>
      c <span class="hl opt">=</span> <span class="hl num">0</span>

      tmp <span class="hl opt">=</span> <span class="hl kwd">apr_pool_create_unmanaged_ex</span><span class="hl opt">(</span>store<span class="hl opt">,</span> abrtptr<span class="hl opt">,</span> c_null_funptr<span class="hl opt">)</span>

      <span class="hl kwa">do</span> i <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">,</span>iterations
          a <span class="hl opt">=&gt;</span> <span class="hl kwd">make</span><span class="hl opt">(</span> i<span class="hl opt">,</span> d<span class="hl opt">,</span> store<span class="hl opt">)</span>
          b <span class="hl opt">=&gt;</span> <span class="hl kwd">make</span><span class="hl opt">(-</span>i<span class="hl opt">,</span> d<span class="hl opt">,</span> store<span class="hl opt">)</span>
          c <span class="hl opt">=</span> c<span class="hl opt">+</span> <span class="hl kwd">node_check</span><span class="hl opt">(</span>a<span class="hl opt">) +</span> <span class="hl kwd">node_check</span><span class="hl opt">(</span>b<span class="hl opt">)</span>
          <span class="hl kwa">call</span> <span class="hl kwd">apr_pool_clear</span><span class="hl opt">(</span>store<span class="hl opt">)</span>
      <span class="hl kwa">end do</span>

      <span class="hl kwa">call</span> <span class="hl kwd">apr_pool_destroy</span><span class="hl opt">(</span>store<span class="hl opt">)</span>

      <span class="hl kwa">write</span><span class="hl opt">(</span><span class="hl kwd">outputstr</span><span class="hl opt">(</span>d<span class="hl opt">),</span><span class="hl str">&quot;(2(i0,a),i0)&quot;</span><span class="hl opt">)</span> <span class="hl num">2</span><span class="hl opt">*</span>iterations<span class="hl opt">,</span>t<span class="hl opt">//</span><span class="hl str">&quot; trees of depth &quot;</span><span class="hl opt">,</span> d <span class="hl opt">,</span>t<span class="hl opt">//</span><span class="hl str">&quot; check: &quot;</span><span class="hl opt">,</span> c
  <span class="hl kwa">end do</span>
  <span class="hl slc">!$omp end parallel do</span>

  <span class="hl kwa">do</span> d <span class="hl opt">=</span> min_depth<span class="hl opt">,</span> max_depth<span class="hl opt">,</span> <span class="hl num">2</span>
    <span class="hl kwa">write</span><span class="hl opt">(*,</span><span class="hl str">&quot;(a)&quot;</span><span class="hl opt">)</span> <span class="hl kwd">trim</span><span class="hl opt">(</span><span class="hl kwd">outputstr</span><span class="hl opt">(</span>d<span class="hl opt">))</span>
  <span class="hl kwa">end do</span>

  <span class="hl kwa">write</span><span class="hl opt">(*,</span><span class="hl str">&quot;(2(a,i0))&quot;</span><span class="hl opt">)</span> <span class="hl str">&quot;long lived tree of depth &quot;</span><span class="hl opt">,</span> max_depth <span class="hl opt">,</span>t<span class="hl opt">//</span><span class="hl str">&quot; check: &quot;</span><span class="hl opt">,</span> <span class="hl kwd">node_check</span><span class="hl opt">(</span>long_lived_tree<span class="hl opt">)</span>
<span class="hl kwa">end program</span>

