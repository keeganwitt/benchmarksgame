<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * Scala version contributed by Rex Kerr</span>
<span class="hl com"> * translated from Java version by Oleg Mazurov, June 2010</span>
<span class="hl com"> * </span>
<span class="hl com"> */</span>

<span class="hl kwa">object</span> fannkuchredux <span class="hl opt">{</span>
  <span class="hl kwa">def</span> <span class="hl kwd">fac</span><span class="hl opt">(</span>x<span class="hl opt">:</span> Int<span class="hl opt">):</span> Long <span class="hl opt">=</span> <span class="hl kwa">if</span> <span class="hl opt">(</span>x <span class="hl opt">&lt;</span> <span class="hl num">2</span><span class="hl opt">)</span> <span class="hl num">1L</span> <span class="hl kwa">else</span> x<span class="hl opt">*</span><span class="hl kwd">fac</span><span class="hl opt">(</span>x<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">)</span>
  <span class="hl kwa">val</span> F <span class="hl opt">= (</span><span class="hl num">0</span> to <span class="hl num">20</span><span class="hl opt">).</span><span class="hl kwd">map</span><span class="hl opt">(</span>fac<span class="hl opt">).</span>toArray
  <span class="hl kwa">var</span> chunk <span class="hl opt">=</span> <span class="hl num">0L</span>
  <span class="hl kwa">var</span> ntasks <span class="hl opt">=</span> <span class="hl num">0</span>
  <span class="hl kwa">val</span> taskId <span class="hl opt">=</span> <span class="hl kwa">new</span> java<span class="hl opt">.</span>util<span class="hl opt">.</span>concurrent<span class="hl opt">.</span>atomic<span class="hl opt">.</span><span class="hl kwd">AtomicInteger</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">)</span>
    
  <span class="hl kwa">class</span> <span class="hl kwd">Fannkuch</span><span class="hl opt">(</span>n<span class="hl opt">:</span> Int<span class="hl opt">)</span> <span class="hl kwa">extends</span> Thread <span class="hl opt">{</span>
    <span class="hl kwa">val</span> p<span class="hl opt">,</span> pp<span class="hl opt">,</span> count <span class="hl opt">=</span> <span class="hl kwa">new</span> Array<span class="hl opt">[</span>Int<span class="hl opt">](</span>n<span class="hl opt">)</span>
    <span class="hl kwa">var</span> flips<span class="hl opt">,</span> cksum <span class="hl opt">=</span> <span class="hl num">0</span>

    <span class="hl kwa">def</span> <span class="hl kwd">direct</span><span class="hl opt">(</span>idx<span class="hl opt">:</span> Long<span class="hl opt">,</span> i<span class="hl opt">:</span> Int<span class="hl opt">) {</span>
       <span class="hl kwa">if</span> <span class="hl opt">(</span>i <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">) {</span>
        <span class="hl kwa">val</span> d <span class="hl opt">= (</span>idx <span class="hl opt">/</span> <span class="hl kwd">F</span><span class="hl opt">(</span>i<span class="hl opt">)).</span>toInt
        <span class="hl kwd">count</span><span class="hl opt">(</span>i<span class="hl opt">) =</span> d
        <span class="hl kwa">var</span> j <span class="hl opt">=</span> <span class="hl num">0</span>
        <span class="hl kwa">while</span> <span class="hl opt">(</span>j <span class="hl opt">&lt;</span> d<span class="hl opt">) {</span> <span class="hl kwd">pp</span><span class="hl opt">(</span>j<span class="hl opt">) =</span> <span class="hl kwd">p</span><span class="hl opt">(</span>j<span class="hl opt">);</span> j <span class="hl opt">+=</span> <span class="hl num">1</span> <span class="hl opt">}</span>
        j <span class="hl opt">=</span> <span class="hl num">0</span>
        <span class="hl kwa">while</span> <span class="hl opt">(</span>j<span class="hl opt">+</span>d <span class="hl opt">&lt;=</span> i<span class="hl opt">) {</span> <span class="hl kwd">p</span><span class="hl opt">(</span>j<span class="hl opt">) =</span> <span class="hl kwd">p</span><span class="hl opt">(</span>j<span class="hl opt">+</span>d<span class="hl opt">);</span> j <span class="hl opt">+=</span> <span class="hl num">1</span> <span class="hl opt">}</span>
        <span class="hl kwa">while</span> <span class="hl opt">(</span>j <span class="hl opt">&lt;=</span> i<span class="hl opt">) {</span> <span class="hl kwd">p</span><span class="hl opt">(</span>j<span class="hl opt">) =</span> <span class="hl kwd">pp</span><span class="hl opt">(</span>j<span class="hl opt">+</span>d<span class="hl opt">-</span>i<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">);</span> j <span class="hl opt">+=</span> <span class="hl num">1</span> <span class="hl opt">}</span>
        <span class="hl kwd">direct</span><span class="hl opt">(</span>idx<span class="hl opt">%</span><span class="hl kwd">F</span><span class="hl opt">(</span>i<span class="hl opt">),</span> i<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">)</span>
      <span class="hl opt">}</span>
    <span class="hl opt">}</span>
      
    <span class="hl kwa">def</span> <span class="hl kwd">permute</span><span class="hl opt">() {</span>
      <span class="hl kwa">var</span> first <span class="hl opt">=</span> <span class="hl kwd">p</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">)</span>
      <span class="hl kwd">p</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">) =</span> <span class="hl kwd">p</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">)</span>
      <span class="hl kwd">p</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">) =</span> first
      <span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">1</span>
      <span class="hl kwd">count</span><span class="hl opt">(</span>i<span class="hl opt">) +=</span> <span class="hl num">1</span>
      <span class="hl kwa">while</span> <span class="hl opt">(</span><span class="hl kwd">count</span><span class="hl opt">(</span>i<span class="hl opt">) &gt;</span> i <span class="hl opt">) {</span>
        <span class="hl kwd">count</span><span class="hl opt">(</span>i<span class="hl opt">) =</span> <span class="hl num">0</span>
        i <span class="hl opt">+=</span> <span class="hl num">1</span>
        <span class="hl kwd">p</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">) =</span> <span class="hl kwd">p</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">)</span>
        <span class="hl kwa">val</span> next <span class="hl opt">=</span> <span class="hl kwd">p</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">)</span>
        <span class="hl kwa">var</span> j <span class="hl opt">=</span> <span class="hl num">1</span>
        <span class="hl kwa">while</span> <span class="hl opt">(</span>j <span class="hl opt">&lt;</span> i<span class="hl opt">) {</span> <span class="hl kwd">p</span><span class="hl opt">(</span>j<span class="hl opt">) =</span> <span class="hl kwd">p</span><span class="hl opt">(</span>j<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">);</span> j <span class="hl opt">+=</span> <span class="hl num">1</span> <span class="hl opt">}</span>
        <span class="hl kwd">p</span><span class="hl opt">(</span>i<span class="hl opt">) =</span> first
        first <span class="hl opt">=</span> next
        <span class="hl kwd">count</span><span class="hl opt">(</span>i<span class="hl opt">) +=</span> <span class="hl num">1</span>
      <span class="hl opt">}</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">def</span> <span class="hl kwd">fcount</span><span class="hl opt">() = {</span>
      <span class="hl kwa">var</span> flips <span class="hl opt">=</span> <span class="hl num">1</span>
      <span class="hl kwa">var</span> first <span class="hl opt">=</span> <span class="hl kwd">p</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">)</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">p</span><span class="hl opt">(</span>first<span class="hl opt">) !=</span> <span class="hl num">0</span><span class="hl opt">) {</span>
        <span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span>
        <span class="hl kwa">while</span> <span class="hl opt">(</span>i <span class="hl opt">&lt;</span> n<span class="hl opt">) {</span> <span class="hl kwd">pp</span><span class="hl opt">(</span>i<span class="hl opt">) =</span> <span class="hl kwd">p</span><span class="hl opt">(</span>i<span class="hl opt">);</span> i <span class="hl opt">+=</span> <span class="hl num">1</span> <span class="hl opt">}</span>
        <span class="hl kwa">do</span> <span class="hl opt">{</span>
          flips <span class="hl opt">+=</span> <span class="hl num">1</span>
          <span class="hl kwa">var</span> lo <span class="hl opt">=</span> <span class="hl num">1</span>
          <span class="hl kwa">var</span> hi <span class="hl opt">=</span> first <span class="hl opt">-</span><span class="hl num">1</span>
          <span class="hl kwa">while</span> <span class="hl opt">(</span>lo <span class="hl opt">&lt;</span> hi<span class="hl opt">) {</span>
            <span class="hl kwa">val</span> t <span class="hl opt">=</span> <span class="hl kwd">pp</span><span class="hl opt">(</span>lo<span class="hl opt">)</span>
            <span class="hl kwd">pp</span><span class="hl opt">(</span>lo<span class="hl opt">) =</span> <span class="hl kwd">pp</span><span class="hl opt">(</span>hi<span class="hl opt">)</span>
            <span class="hl kwd">pp</span><span class="hl opt">(</span>hi<span class="hl opt">) =</span> t
            lo <span class="hl opt">+=</span> <span class="hl num">1</span>
            hi <span class="hl opt">-=</span> <span class="hl num">1</span>
          <span class="hl opt">}</span>
          <span class="hl kwa">val</span> t <span class="hl opt">=</span> <span class="hl kwd">pp</span><span class="hl opt">(</span>first<span class="hl opt">)</span>
          <span class="hl kwd">pp</span><span class="hl opt">(</span>first<span class="hl opt">) =</span> first
          first <span class="hl opt">=</span> t
        <span class="hl opt">}</span> <span class="hl kwa">while</span> <span class="hl opt">(</span><span class="hl kwd">pp</span><span class="hl opt">(</span>first<span class="hl opt">) !=</span> <span class="hl num">0</span><span class="hl opt">);</span>
      <span class="hl opt">}</span>
      flips
    <span class="hl opt">}</span>
    
    <span class="hl kwa">def</span> <span class="hl kwd">runTask</span><span class="hl opt">(</span>task<span class="hl opt">:</span> Int<span class="hl opt">) {</span>
      <span class="hl kwa">val</span> lo <span class="hl opt">=</span> task<span class="hl opt">*</span>chunk
      <span class="hl kwa">val</span> hi <span class="hl opt">=</span> <span class="hl kwd">F</span><span class="hl opt">(</span>n<span class="hl opt">)</span> <span class="hl kwd">min</span> <span class="hl opt">(</span>lo<span class="hl opt">+</span>chunk<span class="hl opt">)</span>
      <span class="hl kwa">var</span> j <span class="hl opt">=</span> <span class="hl num">0</span>
      <span class="hl kwa">while</span> <span class="hl opt">(</span>j <span class="hl opt">&lt;</span> p<span class="hl opt">.</span>length<span class="hl opt">) {</span> <span class="hl kwd">p</span><span class="hl opt">(</span>j<span class="hl opt">) =</span> j<span class="hl opt">;</span> j <span class="hl opt">+=</span> <span class="hl num">1</span> <span class="hl opt">}</span>
      <span class="hl kwd">direct</span><span class="hl opt">(</span>lo<span class="hl opt">,</span>p<span class="hl opt">.</span>length<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">)</span>
      <span class="hl kwa">var</span> i <span class="hl opt">=</span> lo
      <span class="hl kwa">while</span> <span class="hl opt">(</span>true<span class="hl opt">) {</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">p</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">) !=</span> <span class="hl num">0</span><span class="hl opt">) {</span>
          <span class="hl kwa">val</span> f <span class="hl opt">=</span> fcount
          flips <span class="hl opt">=</span> Math<span class="hl opt">.</span><span class="hl kwd">max</span><span class="hl opt">(</span>flips<span class="hl opt">,</span>f<span class="hl opt">)</span>
          cksum <span class="hl opt">+= (</span><span class="hl kwa">if</span> <span class="hl opt">((</span>i<span class="hl opt">%</span><span class="hl num">2</span><span class="hl opt">)==</span><span class="hl num">0</span><span class="hl opt">)</span> f <span class="hl kwa">else</span> <span class="hl opt">-</span>f<span class="hl opt">)</span>
        <span class="hl opt">}</span>
        i <span class="hl opt">+=</span> <span class="hl num">1</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>i <span class="hl opt">==</span> hi<span class="hl opt">)</span> <span class="hl kwa">return</span>
        permute
      <span class="hl opt">}</span>
    <span class="hl opt">}</span>
    
    <span class="hl kwa">override def</span> <span class="hl kwd">run</span><span class="hl opt">() {</span> <span class="hl kwa">while</span> <span class="hl opt">(</span>true<span class="hl opt">) {</span>
      <span class="hl kwa">val</span> task <span class="hl opt">=</span> taskId<span class="hl opt">.</span><span class="hl kwd">getAndIncrement</span><span class="hl opt">()</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>task <span class="hl opt">&gt;=</span> ntasks<span class="hl opt">)</span> <span class="hl kwa">return</span>
      <span class="hl kwd">runTask</span><span class="hl opt">(</span>task<span class="hl opt">)</span>
    <span class="hl opt">}}</span>
  <span class="hl opt">}</span>
    
  <span class="hl kwa">def</span> <span class="hl kwd">announce</span><span class="hl opt">(</span>n<span class="hl opt">:</span> Int<span class="hl opt">,</span> f<span class="hl opt">:</span> Int<span class="hl opt">,</span> ck<span class="hl opt">:</span> Int<span class="hl opt">) {</span>
    <span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;%d</span><span class="hl esc">\n</span><span class="hl str">Pfannkuchen(%d) = %d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span>ck<span class="hl opt">,</span>n<span class="hl opt">,</span>f<span class="hl opt">)</span>
  <span class="hl opt">}</span>
  
  <span class="hl kwa">def</span> <span class="hl kwd">main</span><span class="hl opt">(</span>args<span class="hl opt">:</span> Array<span class="hl opt">[</span>String<span class="hl opt">]) {</span>
    <span class="hl kwa">val</span> n <span class="hl opt">= (</span><span class="hl kwa">if</span> <span class="hl opt">(</span>args<span class="hl opt">.</span>length <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwd">args</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">).</span>toInt <span class="hl kwa">else</span> <span class="hl num">7</span><span class="hl opt">)</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>n <span class="hl opt">&lt;</span> <span class="hl num">0</span> <span class="hl opt">||</span> n <span class="hl opt">&gt;</span> <span class="hl num">20</span><span class="hl opt">)</span> <span class="hl kwd">announce</span><span class="hl opt">(</span>n<span class="hl opt">,-</span><span class="hl num">1</span><span class="hl opt">,-</span><span class="hl num">1</span><span class="hl opt">)</span>
    <span class="hl kwa">else if</span> <span class="hl opt">(</span>n <span class="hl opt">&lt;=</span> <span class="hl num">1</span><span class="hl opt">)</span> <span class="hl kwd">announce</span><span class="hl opt">(</span>n<span class="hl opt">,</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">0</span><span class="hl opt">)</span>
    <span class="hl kwa">else</span> <span class="hl opt">{</span>
      <span class="hl kwa">val</span> nthreads <span class="hl opt">=</span> Runtime<span class="hl opt">.</span>getRuntime<span class="hl opt">.</span>availableProcessors
      <span class="hl kwa">def</span> <span class="hl kwd">split</span><span class="hl opt">(</span>i<span class="hl opt">:</span> Long<span class="hl opt">) = (</span><span class="hl kwd">F</span><span class="hl opt">(</span>n<span class="hl opt">)+</span>i<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">)/</span>i
      chunk <span class="hl opt">=</span> <span class="hl kwd">split</span><span class="hl opt">(</span>nthreads<span class="hl opt">*</span><span class="hl num">50</span><span class="hl opt">)</span>
      ntasks <span class="hl opt">=</span> <span class="hl kwd">split</span><span class="hl opt">(</span>chunk<span class="hl opt">).</span>toInt
      <span class="hl kwa">val</span> threads <span class="hl opt">=</span> Array<span class="hl opt">.</span><span class="hl kwd">range</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span>nthreads<span class="hl opt">).</span><span class="hl kwd">map</span><span class="hl opt">(</span>_ <span class="hl opt">=&gt;</span> <span class="hl kwa">new</span> <span class="hl kwd">Fannkuch</span><span class="hl opt">(</span>n<span class="hl opt">))</span>
      threads<span class="hl opt">.</span><span class="hl kwd">foreach</span><span class="hl opt">(</span>_<span class="hl opt">.</span>start<span class="hl opt">)</span>
      threads<span class="hl opt">.</span><span class="hl kwd">foreach</span><span class="hl opt">(</span>_<span class="hl opt">.</span>join<span class="hl opt">)</span>
      <span class="hl kwd">announce</span><span class="hl opt">(</span>n<span class="hl opt">, (</span><span class="hl num">0</span><span class="hl opt">/:</span>threads<span class="hl opt">)(</span>_ max _<span class="hl opt">.</span>flips<span class="hl opt">), (</span><span class="hl num">0</span><span class="hl opt">/:</span>threads<span class="hl opt">)(</span>_ <span class="hl opt">+</span> _<span class="hl opt">.</span>cksum<span class="hl opt">))</span>
    <span class="hl opt">}</span>
  <span class="hl opt">}</span>
<span class="hl opt">}</span>

