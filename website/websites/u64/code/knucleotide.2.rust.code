<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * contributed by </span>
<span class="hl com"> */</span>

<span class="hl slc">// xfail-pretty</span>

<span class="hl slc">// multi tasking k-nucleotide</span>

import io<span class="hl opt">::</span>reader_util<span class="hl opt">;</span>

use std<span class="hl opt">;</span>
import std<span class="hl opt">::</span>map<span class="hl opt">;</span>
import std<span class="hl opt">::</span>map<span class="hl opt">::</span>hashmap<span class="hl opt">;</span>
import std<span class="hl opt">::</span>sort<span class="hl opt">;</span>

import stream<span class="hl opt">::{</span>stream<span class="hl opt">,</span> chan<span class="hl opt">,</span> port<span class="hl opt">};</span>

<span class="hl slc">// After a snapshot, this should move into core, or std.</span>
mod stream <span class="hl opt">{</span>
   import option<span class="hl opt">::</span>unwrap<span class="hl opt">;</span>

   proto<span class="hl opt">!</span> streamp <span class="hl opt">{</span>
      open<span class="hl opt">:</span>send<span class="hl opt">&lt;</span>T<span class="hl opt">:</span> send<span class="hl opt">&gt; {</span>
         <span class="hl kwd">data</span><span class="hl opt">(</span>T<span class="hl opt">) -&gt;</span> open<span class="hl opt">&lt;</span>T<span class="hl opt">&gt;</span>
      <span class="hl opt">}</span>
   <span class="hl opt">}</span>

   type chan<span class="hl opt">&lt;</span>T<span class="hl opt">:</span>send<span class="hl opt">&gt; = {</span> mut endp<span class="hl opt">:</span> option<span class="hl opt">&lt;</span>streamp<span class="hl opt">::</span>client<span class="hl opt">::</span>open<span class="hl opt">&lt;</span>T<span class="hl opt">&gt;&gt; };</span>
   type port<span class="hl opt">&lt;</span>T<span class="hl opt">:</span>send<span class="hl opt">&gt; = {</span> mut endp<span class="hl opt">:</span> option<span class="hl opt">&lt;</span>streamp<span class="hl opt">::</span>server<span class="hl opt">::</span>open<span class="hl opt">&lt;</span>T<span class="hl opt">&gt;&gt; };</span>

   fn stream<span class="hl opt">&lt;</span>T<span class="hl opt">:</span>send<span class="hl opt">&gt;() -&gt; (</span>chan<span class="hl opt">&lt;</span>T<span class="hl opt">&gt;,</span> port<span class="hl opt">&lt;</span>T<span class="hl opt">&gt;) {</span>
      <span class="hl kwd">let</span> <span class="hl opt">(</span>c<span class="hl opt">,</span> s<span class="hl opt">) =</span> streamp<span class="hl opt">::</span><span class="hl kwd">init</span><span class="hl opt">();</span>
      <span class="hl opt">({</span> mut endp<span class="hl opt">:</span> <span class="hl kwd">some</span><span class="hl opt">(</span>c<span class="hl opt">) }, {</span> mut endp<span class="hl opt">:</span> <span class="hl kwd">some</span><span class="hl opt">(</span>s<span class="hl opt">) })</span>
   <span class="hl opt">}</span>

   impl chan<span class="hl opt">&lt;</span>T<span class="hl opt">:</span> send<span class="hl opt">&gt;</span> <span class="hl kwa">for</span> chan<span class="hl opt">&lt;</span>T<span class="hl opt">&gt; {</span>
      fn <span class="hl kwd">send</span><span class="hl opt">(+</span>x<span class="hl opt">:</span> T<span class="hl opt">) {</span>
         let mut endp <span class="hl opt">=</span> none<span class="hl opt">;</span>
         endp <span class="hl opt">&lt;-&gt;</span> self<span class="hl opt">.</span>endp<span class="hl opt">;</span>
         self<span class="hl opt">.</span>endp <span class="hl opt">=</span> <span class="hl kwd">some</span><span class="hl opt">(</span>
            streamp<span class="hl opt">::</span>client<span class="hl opt">::</span><span class="hl kwd">data</span><span class="hl opt">(</span><span class="hl kwd">unwrap</span><span class="hl opt">(</span>endp<span class="hl opt">),</span> x<span class="hl opt">))</span>
      <span class="hl opt">}</span>
   <span class="hl opt">}</span>

   impl port<span class="hl opt">&lt;</span>T<span class="hl opt">:</span> send<span class="hl opt">&gt;</span> <span class="hl kwa">for</span> port<span class="hl opt">&lt;</span>T<span class="hl opt">&gt; {</span>
      fn <span class="hl kwd">recv</span><span class="hl opt">() -&gt;</span> T <span class="hl opt">{</span>
         let mut endp <span class="hl opt">=</span> none<span class="hl opt">;</span>
         endp <span class="hl opt">&lt;-&gt;</span> self<span class="hl opt">.</span>endp<span class="hl opt">;</span>
         let streamp<span class="hl opt">::</span><span class="hl kwd">data</span><span class="hl opt">(</span>x<span class="hl opt">,</span> endp<span class="hl opt">) =</span> <span class="hl kwd">unwrap</span><span class="hl opt">(</span>
            pipes<span class="hl opt">::</span><span class="hl kwd">recv</span><span class="hl opt">(</span><span class="hl kwd">unwrap</span><span class="hl opt">(</span>endp<span class="hl opt">)));</span>
         self<span class="hl opt">.</span>endp <span class="hl opt">=</span> <span class="hl kwd">some</span><span class="hl opt">(</span>endp<span class="hl opt">);</span>
         x
      <span class="hl opt">}</span>
   <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl slc">// given a map, print a sorted version of it</span>
fn <span class="hl kwd">sort_and_fmt</span><span class="hl opt">(</span>mm<span class="hl opt">:</span> hashmap<span class="hl opt">&lt;~[</span>u8<span class="hl opt">],</span> uint<span class="hl opt">&gt;,</span> total<span class="hl opt">:</span> uint<span class="hl opt">) -&gt;</span> str <span class="hl opt">{</span>
   fn <span class="hl kwd">pct</span><span class="hl opt">(</span>xx<span class="hl opt">:</span> uint<span class="hl opt">,</span> yy<span class="hl opt">:</span> uint<span class="hl opt">) -&gt;</span> <span class="hl kwb">float</span> <span class="hl opt">{</span>
     <span class="hl kwd">ret</span> <span class="hl opt">(</span>xx as <span class="hl kwb">float</span><span class="hl opt">) *</span> <span class="hl num">100</span>f <span class="hl opt">/ (</span>yy as <span class="hl kwb">float</span><span class="hl opt">);</span>
   <span class="hl opt">}</span>

   fn le_by_val<span class="hl opt">&lt;</span>TT<span class="hl opt">:</span> copy<span class="hl opt">,</span> UU<span class="hl opt">:</span> copy<span class="hl opt">&gt;(</span>kv0<span class="hl opt">: (</span>TT<span class="hl opt">,</span>UU<span class="hl opt">),</span> kv1<span class="hl opt">: (</span>TT<span class="hl opt">,</span>UU<span class="hl opt">)) -&gt;</span> <span class="hl kwb">bool</span> <span class="hl opt">{</span>
     <span class="hl kwd">let</span> <span class="hl opt">(</span>_<span class="hl opt">,</span> v0<span class="hl opt">) =</span> kv0<span class="hl opt">;</span>
     <span class="hl kwd">let</span> <span class="hl opt">(</span>_<span class="hl opt">,</span> v1<span class="hl opt">) =</span> kv1<span class="hl opt">;</span>
     ret v0 <span class="hl opt">&gt;=</span> v1<span class="hl opt">;</span>
   <span class="hl opt">}</span>

   fn le_by_key<span class="hl opt">&lt;</span>TT<span class="hl opt">:</span> copy<span class="hl opt">,</span> UU<span class="hl opt">:</span> copy<span class="hl opt">&gt;(</span>kv0<span class="hl opt">: (</span>TT<span class="hl opt">,</span>UU<span class="hl opt">),</span> kv1<span class="hl opt">: (</span>TT<span class="hl opt">,</span>UU<span class="hl opt">)) -&gt;</span> <span class="hl kwb">bool</span> <span class="hl opt">{</span>
     <span class="hl kwd">let</span> <span class="hl opt">(</span>k0<span class="hl opt">,</span> _<span class="hl opt">) =</span> kv0<span class="hl opt">;</span>
     <span class="hl kwd">let</span> <span class="hl opt">(</span>k1<span class="hl opt">,</span> _<span class="hl opt">) =</span> kv1<span class="hl opt">;</span>
     ret k0 <span class="hl opt">&lt;=</span> k1<span class="hl opt">;</span>
   <span class="hl opt">}</span>

   <span class="hl slc">// sort by key, then by value</span>
   fn sortKV<span class="hl opt">&lt;</span>TT<span class="hl opt">:</span> copy<span class="hl opt">,</span> UU<span class="hl opt">:</span> copy<span class="hl opt">&gt;(</span>orig<span class="hl opt">: ~[(</span>TT<span class="hl opt">,</span>UU<span class="hl opt">)]) -&gt; ~[(</span>TT<span class="hl opt">,</span>UU<span class="hl opt">)] {</span>
     ret sort<span class="hl opt">::</span><span class="hl kwd">merge_sort</span><span class="hl opt">(</span>le_by_val<span class="hl opt">,</span> sort<span class="hl opt">::</span><span class="hl kwd">merge_sort</span><span class="hl opt">(</span>le_by_key<span class="hl opt">,</span> orig<span class="hl opt">));</span>
   <span class="hl opt">}</span>

   let mut pairs <span class="hl opt">= ~[];</span>

   <span class="hl slc">// map -&gt; [(k,%)]</span>
   mm<span class="hl opt">.</span><span class="hl kwd">each</span><span class="hl opt">(</span>fn<span class="hl opt">&amp;(</span>key<span class="hl opt">: ~[</span>u8<span class="hl opt">],</span> val<span class="hl opt">:</span> uint<span class="hl opt">) -&gt;</span> <span class="hl kwb">bool</span> <span class="hl opt">{</span>
     vec<span class="hl opt">::</span><span class="hl kwd">push</span><span class="hl opt">(</span>pairs<span class="hl opt">, (</span>key<span class="hl opt">,</span> <span class="hl kwd">pct</span><span class="hl opt">(</span>val<span class="hl opt">,</span> total<span class="hl opt">)));</span>
     ret <span class="hl kwa">true</span><span class="hl opt">;</span>
   <span class="hl opt">});</span>

   let pairs_sorted <span class="hl opt">=</span> <span class="hl kwd">sortKV</span><span class="hl opt">(</span>pairs<span class="hl opt">);</span>
   
   let mut buffer <span class="hl opt">=</span> <span class="hl str">&quot;&quot;</span><span class="hl opt">;</span>

   pairs_sorted<span class="hl opt">.</span><span class="hl kwd">each</span><span class="hl opt">(</span>fn<span class="hl opt">&amp;(</span>kv<span class="hl opt">: (~[</span>u8<span class="hl opt">],</span> <span class="hl kwb">float</span><span class="hl opt">)) -&gt;</span> <span class="hl kwb">bool</span> unsafe <span class="hl opt">{</span>
     <span class="hl kwd">let</span> <span class="hl opt">(</span>k<span class="hl opt">,</span>v<span class="hl opt">) =</span> kv<span class="hl opt">;</span>
     buffer <span class="hl opt">+= (</span><span class="hl ppc">#fmt[</span><span class="hl pps">&quot;%s %0.3f</span><span class="hl esc">\n</span><span class="hl pps">&quot;</span><span class="hl ppc">, str::to_upper(str::unsafe::from_bytes(k)), v]);</span>
     ret <span class="hl kwa">true</span><span class="hl opt">;</span>
   <span class="hl opt">});</span>

   ret buffer<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl slc">// given a map, search for the frequency of a pattern</span>
fn <span class="hl kwd">find</span><span class="hl opt">(</span>mm<span class="hl opt">:</span> hashmap<span class="hl opt">&lt;~[</span>u8<span class="hl opt">],</span> uint<span class="hl opt">&gt;,</span> key<span class="hl opt">:</span> str<span class="hl opt">) -&gt;</span> uint <span class="hl opt">{</span>
   alt mm<span class="hl opt">.</span><span class="hl kwd">find</span><span class="hl opt">(</span>str<span class="hl opt">::</span><span class="hl kwd">bytes</span><span class="hl opt">(</span>str<span class="hl opt">::</span><span class="hl kwd">to_lower</span><span class="hl opt">(</span>key<span class="hl opt">))) {</span>
     option<span class="hl opt">::</span>none <span class="hl opt">{</span> ret <span class="hl num">0u</span><span class="hl opt">; }</span>
     option<span class="hl opt">::</span><span class="hl kwd">some</span><span class="hl opt">(</span>num<span class="hl opt">) {</span> ret num<span class="hl opt">; }</span>
   <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl slc">// given a map, increment the counter for a key</span>
fn <span class="hl kwd">update_freq</span><span class="hl opt">(</span>mm<span class="hl opt">:</span> hashmap<span class="hl opt">&lt;~[</span>u8<span class="hl opt">],</span> uint<span class="hl opt">&gt;,</span> key<span class="hl opt">: &amp;[</span>u8<span class="hl opt">]) {</span>
   let key <span class="hl opt">=</span> vec<span class="hl opt">::</span><span class="hl kwd">slice</span><span class="hl opt">(</span>key<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> key<span class="hl opt">.</span><span class="hl kwd">len</span><span class="hl opt">());</span>
   alt mm<span class="hl opt">.</span><span class="hl kwd">find</span><span class="hl opt">(</span>key<span class="hl opt">) {</span>
     option<span class="hl opt">::</span>none <span class="hl opt">{</span> mm<span class="hl opt">.</span><span class="hl kwd">insert</span><span class="hl opt">(</span>key<span class="hl opt">,</span> <span class="hl num">1u</span> <span class="hl opt">); }</span>
     option<span class="hl opt">::</span><span class="hl kwd">some</span><span class="hl opt">(</span>val<span class="hl opt">) {</span> mm<span class="hl opt">.</span><span class="hl kwd">insert</span><span class="hl opt">(</span>key<span class="hl opt">,</span> <span class="hl num">1u</span> <span class="hl opt">+</span> val<span class="hl opt">); }</span>
   <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl slc">// given a ~[u8], for each window call a function</span>
<span class="hl slc">// i.e., for &quot;hello&quot; and windows of size four,</span>
<span class="hl slc">// run it(&quot;hell&quot;) and it(&quot;ello&quot;), then return &quot;llo&quot;</span>
fn <span class="hl kwd">windows_with_carry</span><span class="hl opt">(</span>bb<span class="hl opt">: ~[</span><span class="hl kwb">const</span> u8<span class="hl opt">],</span> nn<span class="hl opt">:</span> uint<span class="hl opt">,</span>
                 it<span class="hl opt">:</span> <span class="hl kwd">fn</span><span class="hl opt">(</span>window<span class="hl opt">: &amp;[</span>u8<span class="hl opt">])) -&gt; ~[</span>u8<span class="hl opt">] {</span>
   let mut ii <span class="hl opt">=</span> <span class="hl num">0u</span><span class="hl opt">;</span>

   let len <span class="hl opt">=</span> vec<span class="hl opt">::</span><span class="hl kwd">len</span><span class="hl opt">(</span>bb<span class="hl opt">);</span>
   <span class="hl kwa">while</span> ii <span class="hl opt">&lt;</span> len <span class="hl opt">- (</span>nn <span class="hl opt">-</span> <span class="hl num">1u</span><span class="hl opt">) {</span>
     <span class="hl kwd">it</span><span class="hl opt">(</span>vec<span class="hl opt">::</span><span class="hl kwd">view</span><span class="hl opt">(</span>bb<span class="hl opt">,</span> ii<span class="hl opt">,</span> ii<span class="hl opt">+</span>nn<span class="hl opt">));</span>
     ii <span class="hl opt">+=</span> <span class="hl num">1u</span><span class="hl opt">;</span>
   <span class="hl opt">}</span>

   ret vec<span class="hl opt">::</span><span class="hl kwd">slice</span><span class="hl opt">(</span>bb<span class="hl opt">,</span> len <span class="hl opt">- (</span>nn <span class="hl opt">-</span> <span class="hl num">1u</span><span class="hl opt">),</span> len<span class="hl opt">);</span>
<span class="hl opt">}</span>

fn <span class="hl kwd">make_sequence_processor</span><span class="hl opt">(</span>sz<span class="hl opt">:</span> uint<span class="hl opt">,</span> from_parent<span class="hl opt">:</span> stream<span class="hl opt">::</span>port<span class="hl opt">&lt;~[</span>u8<span class="hl opt">]&gt;,</span>
                     to_parent<span class="hl opt">:</span> stream<span class="hl opt">::</span>chan<span class="hl opt">&lt;</span>str<span class="hl opt">&gt;) {</span>
   
   let freqs<span class="hl opt">:</span> hashmap<span class="hl opt">&lt;~[</span>u8<span class="hl opt">],</span> uint<span class="hl opt">&gt; =</span> map<span class="hl opt">::</span><span class="hl kwd">bytes_hash</span><span class="hl opt">();</span>
   let mut carry<span class="hl opt">: ~[</span>u8<span class="hl opt">] = ~[];</span>
   let mut total<span class="hl opt">:</span> uint <span class="hl opt">=</span> <span class="hl num">0u</span><span class="hl opt">;</span>

   let mut line<span class="hl opt">: ~[</span>u8<span class="hl opt">];</span>

   loop <span class="hl opt">{</span>

     line <span class="hl opt">=</span> from_parent<span class="hl opt">.</span><span class="hl kwd">recv</span><span class="hl opt">();</span>
     <span class="hl kwa">if</span> line <span class="hl opt">== ~[] {</span> <span class="hl kwa">break</span><span class="hl opt">; }</span>

      carry <span class="hl opt">=</span> <span class="hl kwd">windows_with_carry</span><span class="hl opt">(</span>carry <span class="hl opt">+</span> line<span class="hl opt">,</span> sz<span class="hl opt">, |</span>window<span class="hl opt">| {</span>
       <span class="hl kwd">update_freq</span><span class="hl opt">(</span>freqs<span class="hl opt">,</span> window<span class="hl opt">);</span>
       total <span class="hl opt">+=</span> <span class="hl num">1u</span><span class="hl opt">;</span>
     <span class="hl opt">});</span>
   <span class="hl opt">}</span>

   let buffer <span class="hl opt">=</span> alt sz <span class="hl opt">{</span>
      <span class="hl num">1u</span> <span class="hl opt">{</span> <span class="hl kwd">sort_and_fmt</span><span class="hl opt">(</span>freqs<span class="hl opt">,</span> total<span class="hl opt">) }</span>
      <span class="hl num">2u</span> <span class="hl opt">{</span> <span class="hl kwd">sort_and_fmt</span><span class="hl opt">(</span>freqs<span class="hl opt">,</span> total<span class="hl opt">) }</span>
      <span class="hl num">3u</span> <span class="hl opt">{</span> <span class="hl ppc">#fmt[</span><span class="hl pps">&quot;%u</span><span class="hl esc">\t</span><span class="hl pps">%s&quot;</span><span class="hl ppc">, find(freqs,</span> <span class="hl pps">&quot;GGT&quot;</span><span class="hl ppc">),</span> <span class="hl pps">&quot;GGT&quot;</span><span class="hl ppc">] }</span>
      <span class="hl num">4u</span> <span class="hl opt">{</span> <span class="hl ppc">#fmt[</span><span class="hl pps">&quot;%u</span><span class="hl esc">\t</span><span class="hl pps">%s&quot;</span><span class="hl ppc">, find(freqs,</span> <span class="hl pps">&quot;GGTA&quot;</span><span class="hl ppc">),</span> <span class="hl pps">&quot;GGTA&quot;</span><span class="hl ppc">] }</span>
      <span class="hl num">6u</span> <span class="hl opt">{</span> <span class="hl ppc">#fmt[</span><span class="hl pps">&quot;%u</span><span class="hl esc">\t</span><span class="hl pps">%s&quot;</span><span class="hl ppc">, find(freqs,</span> <span class="hl pps">&quot;GGTATT&quot;</span><span class="hl ppc">),</span> <span class="hl pps">&quot;GGTATT&quot;</span><span class="hl ppc">] }</span>
     <span class="hl num">12u</span> <span class="hl opt">{</span> <span class="hl ppc">#fmt[</span><span class="hl pps">&quot;%u</span><span class="hl esc">\t</span><span class="hl pps">%s&quot;</span><span class="hl ppc">, find(freqs,</span> <span class="hl pps">&quot;GGTATTTTAATT&quot;</span><span class="hl ppc">),</span> <span class="hl pps">&quot;GGTATTTTAATT&quot;</span><span class="hl ppc">] }</span>
     <span class="hl num">18u</span> <span class="hl opt">{</span> <span class="hl ppc">#fmt[</span><span class="hl pps">&quot;%u</span><span class="hl esc">\t</span><span class="hl pps">%s&quot;</span><span class="hl ppc">, find(freqs,</span> <span class="hl pps">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="hl ppc">),</span> <span class="hl pps">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="hl ppc">] }</span>
      _ <span class="hl opt">{</span> <span class="hl str">&quot;&quot;</span> <span class="hl opt">}</span>
   <span class="hl opt">};</span>

   <span class="hl slc">//comm::send(to_parent, #fmt[&quot;yay{%u}&quot;, sz]);</span>
   to_parent<span class="hl opt">.</span><span class="hl kwd">send</span><span class="hl opt">(</span>buffer<span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl slc">// given a FASTA file on stdin, process sequence THREE</span>
fn <span class="hl kwd">main</span><span class="hl opt">(</span>args<span class="hl opt">: ~[</span>str<span class="hl opt">]) {</span>
   let rdr <span class="hl opt">=</span> io<span class="hl opt">::</span><span class="hl kwd">stdin</span><span class="hl opt">();</span>

   <span class="hl slc">// initialize each sequence sorter</span>
   let sizes <span class="hl opt">= ~[</span><span class="hl num">1u</span><span class="hl opt">,</span><span class="hl num">2u</span><span class="hl opt">,</span><span class="hl num">3u</span><span class="hl opt">,</span><span class="hl num">4u</span><span class="hl opt">,</span><span class="hl num">6u</span><span class="hl opt">,</span><span class="hl num">12u</span><span class="hl opt">,</span><span class="hl num">18u</span><span class="hl opt">];</span>
   let streams <span class="hl opt">=</span> vec<span class="hl opt">::</span><span class="hl kwd">map</span><span class="hl opt">(</span>sizes<span class="hl opt">, |</span>_sz<span class="hl opt">|</span> <span class="hl kwd">some</span><span class="hl opt">(</span><span class="hl kwd">stream</span><span class="hl opt">()));</span>
   let streams <span class="hl opt">=</span> vec<span class="hl opt">::</span><span class="hl kwd">to_mut</span><span class="hl opt">(</span>streams<span class="hl opt">);</span>
   let mut from_child <span class="hl opt">= ~[];</span>
   let to_child <span class="hl opt">=</span> vec<span class="hl opt">::</span><span class="hl kwd">mapi</span><span class="hl opt">(</span>sizes<span class="hl opt">, |</span>ii<span class="hl opt">,</span> sz<span class="hl opt">| {</span>
      let mut stream <span class="hl opt">=</span> none<span class="hl opt">;</span>
      stream <span class="hl opt">&lt;-&gt;</span> streams<span class="hl opt">[</span>ii<span class="hl opt">];</span>
      <span class="hl kwd">let</span> <span class="hl opt">(</span>to_parent_<span class="hl opt">,</span> from_child_<span class="hl opt">) =</span> option<span class="hl opt">::</span><span class="hl kwd">unwrap</span><span class="hl opt">(</span>stream<span class="hl opt">);</span>

      vec<span class="hl opt">::</span><span class="hl kwd">push</span><span class="hl opt">(</span>from_child<span class="hl opt">,</span> from_child_<span class="hl opt">);</span>

      <span class="hl kwd">let</span> <span class="hl opt">(</span>to_child<span class="hl opt">,</span> from_parent<span class="hl opt">) =</span> stream<span class="hl opt">::</span><span class="hl kwd">stream</span><span class="hl opt">();</span>

      <span class="hl kwa">do</span> task<span class="hl opt">::</span><span class="hl kwd">spawn_with</span><span class="hl opt">(</span>from_parent<span class="hl opt">) |</span>from_parent<span class="hl opt">| {</span>
         <span class="hl kwd">make_sequence_processor</span><span class="hl opt">(</span>sz<span class="hl opt">,</span> from_parent<span class="hl opt">,</span> to_parent_<span class="hl opt">);</span>
      <span class="hl opt">};</span>
      
      to_child
   <span class="hl opt">});</span>
       
   
   <span class="hl slc">// latch stores true after we've started</span>
   <span class="hl slc">// reading the sequence of interest</span>
   let mut proc_mode <span class="hl opt">=</span> <span class="hl kwa">false</span><span class="hl opt">;</span>

   <span class="hl kwa">while</span> <span class="hl opt">!</span>rdr<span class="hl opt">.</span><span class="hl kwd">eof</span><span class="hl opt">() {</span>
     let line<span class="hl opt">:</span> str <span class="hl opt">=</span> rdr<span class="hl opt">.</span><span class="hl kwd">read_line</span><span class="hl opt">();</span>

     <span class="hl kwa">if</span> str<span class="hl opt">::</span><span class="hl kwd">len</span><span class="hl opt">(</span>line<span class="hl opt">) ==</span> <span class="hl num">0u</span> <span class="hl opt">{</span> again<span class="hl opt">; }</span>

     <span class="hl kwd">alt</span> <span class="hl opt">(</span>line<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">],</span> proc_mode<span class="hl opt">) {</span>

       <span class="hl slc">// start processing if this is the one</span>
       <span class="hl opt">(</span><span class="hl str">'&gt;'</span> as u8<span class="hl opt">,</span> <span class="hl kwa">false</span><span class="hl opt">) {</span>
         alt str<span class="hl opt">::</span><span class="hl kwd">find_str_from</span><span class="hl opt">(</span>line<span class="hl opt">,</span> <span class="hl str">&quot;THREE&quot;</span><span class="hl opt">,</span> <span class="hl num">1u</span><span class="hl opt">) {</span>
            option<span class="hl opt">::</span><span class="hl kwd">some</span><span class="hl opt">(</span>_<span class="hl opt">) {</span> proc_mode <span class="hl opt">=</span> <span class="hl kwa">true</span><span class="hl opt">; }</span>
            option<span class="hl opt">::</span>none <span class="hl opt">{ }</span>
         <span class="hl opt">}</span>
       <span class="hl opt">}</span>

       <span class="hl slc">// break our processing</span>
       <span class="hl opt">(</span><span class="hl str">'&gt;'</span> as u8<span class="hl opt">,</span> <span class="hl kwa">true</span><span class="hl opt">) {</span> <span class="hl kwa">break</span><span class="hl opt">; }</span>

       <span class="hl slc">// process the sequence for k-mers</span>
       <span class="hl opt">(</span>_<span class="hl opt">,</span> <span class="hl kwa">true</span><span class="hl opt">) {</span>
         let line_bytes <span class="hl opt">=</span> str<span class="hl opt">::</span><span class="hl kwd">bytes</span><span class="hl opt">(</span>line<span class="hl opt">);</span>

         <span class="hl kwa">for</span> sizes<span class="hl opt">.</span>eachi <span class="hl opt">|</span>ii<span class="hl opt">,</span> _sz<span class="hl opt">| {</span>
            let mut lb <span class="hl opt">=</span> line_bytes<span class="hl opt">;</span>
            to_child<span class="hl opt">[</span>ii<span class="hl opt">].</span><span class="hl kwd">send</span><span class="hl opt">(</span>lb<span class="hl opt">);</span>
         <span class="hl opt">}</span>
       <span class="hl opt">}</span>

       <span class="hl slc">// whatever</span>
       _ <span class="hl opt">{ }</span>
     <span class="hl opt">}</span>
   <span class="hl opt">}</span>

   <span class="hl slc">// finish...</span>
   <span class="hl kwa">for</span> sizes<span class="hl opt">.</span>eachi <span class="hl opt">|</span>ii<span class="hl opt">,</span> _sz<span class="hl opt">| {</span>
     to_child<span class="hl opt">[</span>ii<span class="hl opt">].</span><span class="hl kwd">send</span><span class="hl opt">(~[]);</span>
   <span class="hl opt">}</span>

   <span class="hl slc">// now fetch and print result messages</span>
   <span class="hl kwa">for</span> sizes<span class="hl opt">.</span>eachi <span class="hl opt">|</span>ii<span class="hl opt">,</span> _sz<span class="hl opt">| {</span>
     io<span class="hl opt">::</span><span class="hl kwd">println</span><span class="hl opt">(</span>from_child<span class="hl opt">[</span>ii<span class="hl opt">].</span><span class="hl kwd">recv</span><span class="hl opt">());</span>
   <span class="hl opt">}</span>
<span class="hl opt">}</span>
