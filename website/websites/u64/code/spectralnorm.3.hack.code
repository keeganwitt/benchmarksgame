<span class="hl opt">&lt;</span>?hh 
<span class="hl com">/* </span>
<span class="hl com">   The Computer Language Benchmarks Game</span>
<span class="hl com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by Isaac Gouy</span>
<span class="hl com">   multicore by anon</span>
<span class="hl com">   PHP as HHVM/Hack by Isaac Gouy</span>
<span class="hl com"> */</span>


<span class="hl kwa">function</span> <span class="hl kwd">A</span><span class="hl opt">(&amp;</span><span class="hl kwc">$i</span><span class="hl opt">, &amp;</span><span class="hl kwc">$j</span><span class="hl opt">){</span>
   <span class="hl kwa">return</span> <span class="hl num">1.0</span> <span class="hl opt">/ ( ( ( (</span><span class="hl kwc">$i</span>+<span class="hl kwc">$j</span><span class="hl opt">) * (</span><span class="hl kwc">$i</span>+<span class="hl kwc">$j</span>+<span class="hl num">1</span><span class="hl opt">) ) &gt;&gt;</span> <span class="hl num">1</span> <span class="hl opt">)</span> + <span class="hl kwc">$i</span> + <span class="hl num">1</span> <span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwa">function</span> <span class="hl kwd">Av</span><span class="hl opt">(&amp;</span><span class="hl kwc">$n</span><span class="hl opt">,&amp;</span><span class="hl kwc">$v</span><span class="hl opt">,&amp;</span><span class="hl kwc">$start</span><span class="hl opt">,&amp;</span><span class="hl kwc">$end</span><span class="hl opt">){</span>
   <span class="hl kwa">global</span> <span class="hl kwc">$_tpl</span><span class="hl opt">;</span>
   <span class="hl kwc">$Av</span> <span class="hl opt">=</span> <span class="hl kwc">$_tpl</span><span class="hl opt">;</span>
   <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwc">$i</span> <span class="hl opt">=</span> <span class="hl kwc">$start</span><span class="hl opt">;</span> <span class="hl kwc">$i</span> <span class="hl opt">&lt;</span> <span class="hl kwc">$end</span><span class="hl opt">;</span> ++<span class="hl kwc">$i</span><span class="hl opt">) {</span>
      <span class="hl kwc">$sum</span> <span class="hl opt">=</span> <span class="hl num">0.0</span><span class="hl opt">;</span>
      <span class="hl kwa">foreach</span><span class="hl opt">(</span><span class="hl kwc">$v</span> <span class="hl kwa">as</span> <span class="hl kwc">$j</span><span class="hl opt">=&gt;</span><span class="hl kwc">$v_j</span><span class="hl opt">) {</span>
         <span class="hl kwc">$sum</span> +<span class="hl opt">=</span> <span class="hl kwd">A</span><span class="hl opt">(</span><span class="hl kwc">$i</span><span class="hl opt">,</span><span class="hl kwc">$j</span><span class="hl opt">) *</span> <span class="hl kwc">$v_j</span><span class="hl opt">;</span>
      <span class="hl opt">}</span>
      <span class="hl kwc">$Av</span><span class="hl opt">[</span><span class="hl kwc">$i</span><span class="hl opt">] =</span> <span class="hl kwc">$sum</span><span class="hl opt">;</span>
   <span class="hl opt">}</span>
   <span class="hl kwa">return</span> <span class="hl kwc">$Av</span><span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwa">function</span> <span class="hl kwd">Atv</span><span class="hl opt">(&amp;</span><span class="hl kwc">$n</span><span class="hl opt">,&amp;</span><span class="hl kwc">$v</span><span class="hl opt">,&amp;</span><span class="hl kwc">$start</span><span class="hl opt">,&amp;</span><span class="hl kwc">$end</span><span class="hl opt">){</span>
   <span class="hl kwa">global</span> <span class="hl kwc">$_tpl</span><span class="hl opt">;</span>
   <span class="hl kwc">$Atv</span> <span class="hl opt">=</span> <span class="hl kwc">$_tpl</span><span class="hl opt">;</span>
   <span class="hl kwa">for</span><span class="hl opt">(</span><span class="hl kwc">$i</span> <span class="hl opt">=</span> <span class="hl kwc">$start</span><span class="hl opt">;</span> <span class="hl kwc">$i</span> <span class="hl opt">&lt;</span> <span class="hl kwc">$end</span><span class="hl opt">;</span> ++<span class="hl kwc">$i</span><span class="hl opt">) {</span>
      <span class="hl kwc">$sum</span> <span class="hl opt">=</span> <span class="hl num">0.0</span><span class="hl opt">;</span>
      <span class="hl kwa">foreach</span><span class="hl opt">(</span><span class="hl kwc">$v</span> <span class="hl kwa">as</span> <span class="hl kwc">$j</span><span class="hl opt">=&gt;</span><span class="hl kwc">$v_j</span><span class="hl opt">) {</span>
         <span class="hl kwc">$sum</span> +<span class="hl opt">=</span> <span class="hl kwd">A</span><span class="hl opt">(</span><span class="hl kwc">$j</span><span class="hl opt">,</span><span class="hl kwc">$i</span><span class="hl opt">) *</span> <span class="hl kwc">$v_j</span><span class="hl opt">;</span>
      <span class="hl opt">}</span>
      <span class="hl kwc">$Atv</span><span class="hl opt">[</span><span class="hl kwc">$i</span><span class="hl opt">] =</span> <span class="hl kwc">$sum</span><span class="hl opt">;</span>
   <span class="hl opt">}</span>
   <span class="hl kwa">return</span> <span class="hl kwc">$Atv</span><span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwa">function</span> <span class="hl kwd">AtAv</span><span class="hl opt">(&amp;</span><span class="hl kwc">$n</span><span class="hl opt">,&amp;</span><span class="hl kwc">$v</span><span class="hl opt">,&amp;</span><span class="hl kwc">$start</span><span class="hl opt">,&amp;</span><span class="hl kwc">$end</span><span class="hl opt">,&amp;</span><span class="hl kwc">$sync</span><span class="hl opt">){</span>

   <span class="hl kwc">$tmp</span> <span class="hl opt">=</span> <span class="hl kwd">Av</span><span class="hl opt">(</span><span class="hl kwc">$n</span><span class="hl opt">,</span> <span class="hl kwc">$v</span><span class="hl opt">,</span> <span class="hl kwc">$start</span><span class="hl opt">,</span> <span class="hl kwc">$end</span><span class="hl opt">);</span>
   <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwc">$sync</span><span class="hl opt">)</span> <span class="hl kwd">sync</span><span class="hl opt">(</span><span class="hl kwc">$tmp</span><span class="hl opt">);</span>

   <span class="hl kwc">$tmp</span> <span class="hl opt">=</span> <span class="hl kwd">Atv</span><span class="hl opt">(</span><span class="hl kwc">$n</span><span class="hl opt">,</span> <span class="hl kwc">$tmp</span><span class="hl opt">,</span> <span class="hl kwc">$start</span><span class="hl opt">,</span> <span class="hl kwc">$end</span><span class="hl opt">);</span>
   <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwc">$sync</span><span class="hl opt">)</span> <span class="hl kwd">sync</span><span class="hl opt">(</span><span class="hl kwc">$tmp</span><span class="hl opt">);</span>

   <span class="hl kwa">return</span> <span class="hl kwc">$tmp</span><span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwa">function</span> <span class="hl kwd">sync</span><span class="hl opt">(&amp;</span><span class="hl kwc">$tmp</span><span class="hl opt">) {</span>

   <span class="hl kwa">global</span> <span class="hl kwc">$parent</span><span class="hl opt">,</span><span class="hl kwc">$chunk_data_size</span><span class="hl opt">,</span><span class="hl kwc">$total_data_size</span><span class="hl opt">,</span><span class="hl kwc">$pipe</span><span class="hl opt">,</span><span class="hl kwc">$pipes</span><span class="hl opt">;</span>

   <span class="hl kwa">if</span> <span class="hl opt">(!</span><span class="hl kwc">$parent</span><span class="hl opt">) {</span>
      <span class="hl kwd">array_unshift</span><span class="hl opt">(</span><span class="hl kwc">$tmp</span><span class="hl opt">,</span> <span class="hl str">'d*'</span><span class="hl opt">);</span>
      <span class="hl kwc">$data</span> <span class="hl opt">=</span> <span class="hl kwd">call_user_func_array</span><span class="hl opt">(</span><span class="hl str">'pack'</span><span class="hl opt">,</span> <span class="hl kwc">$tmp</span><span class="hl opt">);</span>
      <span class="hl kwd">safe_write</span><span class="hl opt">(</span><span class="hl kwc">$pipe</span><span class="hl opt">,</span> <span class="hl kwc">$data</span><span class="hl opt">);</span>
      <span class="hl kwc">$tmp</span> <span class="hl opt">=</span> <span class="hl kwd">array_merge</span><span class="hl opt">(</span><span class="hl kwa">array</span><span class="hl opt">(),</span> <span class="hl kwd">unpack</span><span class="hl opt">(</span><span class="hl str">'d*'</span><span class="hl opt">,</span> <span class="hl kwd">safe_read</span><span class="hl opt">(</span><span class="hl kwc">$pipe</span><span class="hl opt">,</span> <span class="hl kwc">$total_data_size</span><span class="hl opt">)));</span>
   <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
      <span class="hl kwc">$tmps</span> <span class="hl opt">=</span> <span class="hl kwa">array</span><span class="hl opt">(</span><span class="hl kwa">array</span><span class="hl opt">(</span><span class="hl str">'d*'</span><span class="hl opt">));</span>
      <span class="hl kwa">foreach</span><span class="hl opt">(</span><span class="hl kwc">$pipes</span> <span class="hl kwa">as</span> <span class="hl kwc">$pipe</span><span class="hl opt">) {</span>
         <span class="hl kwc">$tmps</span><span class="hl opt">[] =</span> <span class="hl kwd">unpack</span><span class="hl opt">(</span><span class="hl str">'d*'</span><span class="hl opt">,</span> <span class="hl kwd">safe_read</span><span class="hl opt">(</span><span class="hl kwc">$pipe</span><span class="hl opt">,</span> <span class="hl kwc">$chunk_data_size</span><span class="hl opt">));</span>
      <span class="hl opt">}</span>
      <span class="hl kwc">$tmps</span><span class="hl opt">[] = &amp;</span><span class="hl kwc">$tmp</span><span class="hl opt">;</span>
      <span class="hl kwc">$tmp</span> <span class="hl opt">=</span> <span class="hl kwd">call_user_func_array</span><span class="hl opt">(</span><span class="hl str">'array_merge'</span><span class="hl opt">,</span> <span class="hl kwc">$tmps</span><span class="hl opt">);</span>

      <span class="hl kwc">$data</span> <span class="hl opt">=</span> <span class="hl kwd">call_user_func_array</span><span class="hl opt">(</span><span class="hl str">'pack'</span><span class="hl opt">,</span> <span class="hl kwc">$tmp</span><span class="hl opt">);</span>
      <span class="hl kwa">foreach</span><span class="hl opt">(</span><span class="hl kwc">$pipes</span> <span class="hl kwa">as</span> <span class="hl kwc">$pipe</span><span class="hl opt">) {</span>
         <span class="hl kwd">safe_write</span><span class="hl opt">(</span><span class="hl kwc">$pipe</span><span class="hl opt">,</span> <span class="hl kwc">$data</span><span class="hl opt">);</span>
      <span class="hl opt">}</span>
      <span class="hl kwd">array_shift</span><span class="hl opt">(</span><span class="hl kwc">$tmp</span><span class="hl opt">);</span>
   <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl kwa">function</span> <span class="hl kwd">safe_write</span><span class="hl opt">(</span><span class="hl kwc">$fd</span><span class="hl opt">,</span> <span class="hl kwc">$data</span><span class="hl opt">) {</span>
   <span class="hl kwc">$len</span> <span class="hl opt">=</span> <span class="hl kwd">strlen</span><span class="hl opt">(</span><span class="hl kwc">$data</span><span class="hl opt">);</span>
   <span class="hl kwa">do</span> <span class="hl opt">{</span>
      <span class="hl kwc">$w</span> <span class="hl opt">=</span> <span class="hl kwd">fwrite</span><span class="hl opt">(</span><span class="hl kwc">$fd</span><span class="hl opt">,</span> <span class="hl kwc">$data</span><span class="hl opt">);</span>
      <span class="hl kwc">$len</span> <span class="hl opt">-=</span> <span class="hl kwc">$w</span><span class="hl opt">;</span>
   <span class="hl opt">}</span> <span class="hl kwa">while</span><span class="hl opt">(</span><span class="hl kwc">$len</span> <span class="hl opt">&amp;&amp; (</span><span class="hl kwc">$data</span> <span class="hl opt">=</span> <span class="hl kwd">substr</span><span class="hl opt">(</span><span class="hl kwc">$data</span><span class="hl opt">,</span> <span class="hl kwc">$w</span><span class="hl opt">)) !==</span> FALSE<span class="hl opt">);</span>
<span class="hl opt">}</span>
<span class="hl kwa">function</span> <span class="hl kwd">safe_read</span><span class="hl opt">(</span><span class="hl kwc">$fd</span><span class="hl opt">,</span> <span class="hl kwc">$len</span><span class="hl opt">) {</span>
   <span class="hl kwc">$data</span> <span class="hl opt">=</span> <span class="hl str">''</span><span class="hl opt">;</span>
   <span class="hl kwa">while</span> <span class="hl opt">(</span><span class="hl kwc">$len</span> <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">) {</span>
      <span class="hl kwc">$d</span> <span class="hl opt">=</span> <span class="hl kwd">fread</span><span class="hl opt">(</span><span class="hl kwc">$fd</span><span class="hl opt">,</span> <span class="hl kwc">$len</span><span class="hl opt">);</span>
      <span class="hl kwc">$len</span> <span class="hl opt">-=</span> <span class="hl kwd">strlen</span><span class="hl opt">(</span><span class="hl kwc">$d</span><span class="hl opt">);</span>
      <span class="hl kwc">$data</span> <span class="hl opt">.=</span> <span class="hl kwc">$d</span><span class="hl opt">;</span>
   <span class="hl opt">}</span>
   <span class="hl kwa">return</span> <span class="hl kwc">$data</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
<span class="hl kwa">function</span> <span class="hl kwd">pipe</span><span class="hl opt">() {</span>
   <span class="hl kwa">return</span> <span class="hl kwd">stream_socket_pair</span><span class="hl opt">(</span>STREAM_PF_UNIX<span class="hl opt">,</span> STREAM_SOCK_STREAM<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">);</span>
<span class="hl opt">}</span>


<span class="hl kwc">$n</span> <span class="hl opt">= (</span><span class="hl kwb">int</span><span class="hl opt">) ((</span><span class="hl kwc">$argc</span> <span class="hl opt">==</span> <span class="hl num">2</span><span class="hl opt">)</span> ? <span class="hl kwc">$argv</span><span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">] :</span> <span class="hl num">1</span><span class="hl opt">);</span>

<span class="hl kwc">$procs</span> <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span>
<span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">file_exists</span><span class="hl opt">(</span><span class="hl str">'/proc/cpuinfo'</span><span class="hl opt">)) {</span>
   <span class="hl kwc">$procs</span> <span class="hl opt">=</span> <span class="hl kwd">preg_match_all</span><span class="hl opt">(</span><span class="hl str">'/^processor\s/m'</span><span class="hl opt">,</span> <span class="hl kwd">file_get_contents</span><span class="hl opt">(</span><span class="hl str">'/proc/cpuinfo'</span><span class="hl opt">),</span> <span class="hl kwc">$discard</span><span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwc">$n</span> <span class="hl opt">&lt;</span> <span class="hl kwc">$procs</span><span class="hl opt">) {</span>
   <span class="hl kwc">$procs</span> <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwc">$chunk_size</span> <span class="hl opt">= (</span><span class="hl kwb">int</span><span class="hl opt">) (</span><span class="hl kwc">$n</span> <span class="hl opt">/</span> <span class="hl kwc">$procs</span><span class="hl opt">);</span>
<span class="hl kwc">$double_size</span> <span class="hl opt">=</span> <span class="hl kwd">strlen</span><span class="hl opt">(</span><span class="hl kwd">pack</span><span class="hl opt">(</span><span class="hl str">'d'</span><span class="hl opt">,</span> <span class="hl num">0.0</span><span class="hl opt">));</span>
<span class="hl kwc">$chunk_data_size</span> <span class="hl opt">=</span> <span class="hl kwc">$double_size</span> <span class="hl opt">*</span> <span class="hl kwc">$chunk_size</span><span class="hl opt">;</span>
<span class="hl kwc">$total_data_size</span> <span class="hl opt">=</span> <span class="hl kwc">$double_size</span> <span class="hl opt">*</span> <span class="hl kwc">$n</span><span class="hl opt">;</span>

<span class="hl kwc">$pipes</span> <span class="hl opt">=</span> <span class="hl kwa">array</span><span class="hl opt">();</span>
<span class="hl kwc">$parent</span> <span class="hl opt">=</span> FALSE<span class="hl opt">;</span>
<span class="hl kwa">for</span><span class="hl opt">(</span><span class="hl kwc">$i</span> <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> <span class="hl kwc">$i</span> <span class="hl opt">&lt;</span> <span class="hl kwc">$procs</span><span class="hl opt">;</span> ++<span class="hl kwc">$i</span><span class="hl opt">) {</span>
   <span class="hl kwc">$range_begin</span> <span class="hl opt">=</span> <span class="hl kwc">$i</span> <span class="hl opt">*</span> <span class="hl kwc">$chunk_size</span><span class="hl opt">;</span>
   <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwc">$i</span> <span class="hl opt">&lt; (</span><span class="hl kwc">$procs</span> <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">)) {</span>
      <span class="hl kwc">$pipe</span> <span class="hl opt">=</span> <span class="hl kwd">pipe</span><span class="hl opt">();</span>
      <span class="hl kwc">$pipes</span><span class="hl opt">[] =</span> <span class="hl kwc">$pipe</span><span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">];</span>
      <span class="hl kwc">$pipe</span> <span class="hl opt">=</span> <span class="hl kwc">$pipe</span><span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">];</span>
      <span class="hl kwc">$range_end</span> <span class="hl opt">=</span> <span class="hl kwc">$range_begin</span> + <span class="hl kwc">$chunk_size</span><span class="hl opt">;</span>
      <span class="hl kwc">$pid</span> <span class="hl opt">=</span> <span class="hl kwd">pcntl_fork</span><span class="hl opt">();</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwc">$pid</span> <span class="hl opt">=== -</span><span class="hl num">1</span><span class="hl opt">) {</span>
         <span class="hl kwa">die</span><span class="hl opt">(</span><span class="hl str">'could not fork'</span><span class="hl opt">);</span>
      <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span><span class="hl kwc">$pid</span><span class="hl opt">) {</span>
         <span class="hl kwa">continue</span><span class="hl opt">;</span>
      <span class="hl opt">}</span>
      <span class="hl kwa">break</span><span class="hl opt">;</span>
   <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
      <span class="hl kwc">$range_end</span> <span class="hl opt">=</span> <span class="hl kwc">$n</span><span class="hl opt">;</span>
      <span class="hl kwc">$parent</span> <span class="hl opt">=</span> TRUE<span class="hl opt">;</span>
   <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl kwc">$u</span> <span class="hl opt">=</span> <span class="hl kwd">array_fill</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl kwc">$n</span><span class="hl opt">,</span> <span class="hl num">1.0</span><span class="hl opt">);</span>
<span class="hl kwc">$_tpl</span> <span class="hl opt">=</span> <span class="hl kwd">array_fill</span><span class="hl opt">(</span><span class="hl kwc">$range_begin</span><span class="hl opt">,</span> <span class="hl kwc">$range_end</span> <span class="hl opt">-</span> <span class="hl kwc">$range_begin</span><span class="hl opt">,</span> <span class="hl num">0.0</span><span class="hl opt">);</span>
<span class="hl kwc">$sync</span> <span class="hl opt">=</span> <span class="hl kwc">$procs</span> <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">;</span>

<span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwc">$i</span><span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span> <span class="hl kwc">$i</span><span class="hl opt">&lt;</span><span class="hl num">10</span><span class="hl opt">;</span> <span class="hl kwc">$i</span>++<span class="hl opt">){</span>
   <span class="hl kwc">$v</span> <span class="hl opt">=</span> <span class="hl kwd">AtAv</span><span class="hl opt">(</span><span class="hl kwc">$n</span><span class="hl opt">,</span><span class="hl kwc">$u</span><span class="hl opt">,</span><span class="hl kwc">$range_begin</span><span class="hl opt">,</span><span class="hl kwc">$range_end</span><span class="hl opt">,</span><span class="hl kwc">$sync</span><span class="hl opt">);</span>
   <span class="hl kwc">$u</span> <span class="hl opt">=</span> <span class="hl kwd">AtAv</span><span class="hl opt">(</span><span class="hl kwc">$n</span><span class="hl opt">,</span><span class="hl kwc">$v</span><span class="hl opt">,</span><span class="hl kwc">$range_begin</span><span class="hl opt">,</span><span class="hl kwc">$range_end</span><span class="hl opt">,</span><span class="hl kwc">$sync</span><span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwa">if</span> <span class="hl opt">(!</span><span class="hl kwc">$parent</span><span class="hl opt">) {</span>
   <span class="hl kwa">exit</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwc">$childs</span> <span class="hl opt">=</span> <span class="hl kwc">$procs</span> <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">;</span>
<span class="hl kwa">while</span> <span class="hl opt">(</span><span class="hl kwc">$childs</span><span class="hl opt">--) {</span>
   <span class="hl kwd">pcntl_wait</span><span class="hl opt">(</span><span class="hl kwc">$s</span><span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwc">$vBv</span> <span class="hl opt">=</span> <span class="hl num">0.0</span><span class="hl opt">;</span>
<span class="hl kwc">$vv</span> <span class="hl opt">=</span> <span class="hl num">0.0</span><span class="hl opt">;</span>
<span class="hl kwc">$i</span> <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl kwa">foreach</span><span class="hl opt">(</span><span class="hl kwc">$v</span> <span class="hl kwa">as</span> <span class="hl kwc">$val</span><span class="hl opt">) {</span>
   <span class="hl kwc">$vBv</span> +<span class="hl opt">=</span> <span class="hl kwc">$u</span><span class="hl opt">[</span><span class="hl kwc">$i</span><span class="hl opt">]*</span><span class="hl kwc">$val</span><span class="hl opt">;</span>
   <span class="hl kwc">$vv</span> +<span class="hl opt">=</span> <span class="hl kwc">$val</span><span class="hl opt">*</span><span class="hl kwc">$val</span><span class="hl opt">;</span>
   ++<span class="hl kwc">$i</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
<span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;%0.9f</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> <span class="hl kwd">sqrt</span><span class="hl opt">(</span><span class="hl kwc">$vBv</span><span class="hl opt">/</span><span class="hl kwc">$vv</span><span class="hl opt">));</span>

