<span class="hl slc">;;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;;; http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">;;;</span>
<span class="hl slc">;;; contributed by Witali Kusnezow 2008-12-19</span>
<span class="hl slc">;;;     using semaphore synchronization</span>

<span class="hl opt">(</span><span class="hl kwa">defconstant</span>  <span class="hl opt">+</span>threads<span class="hl opt">+</span> <span class="hl num">503</span><span class="hl opt">)</span>
<span class="hl opt">(</span><span class="hl kwa">defparameter</span> <span class="hl opt">*</span>counter<span class="hl opt">*</span> <span class="hl num">0</span><span class="hl opt">)</span>
<span class="hl opt">(</span><span class="hl kwa">defparameter</span> <span class="hl opt">*</span>current<span class="hl opt">*</span> <span class="hl num">0</span><span class="hl opt">)</span>
<span class="hl opt">(</span><span class="hl kwa">defparameter</span> <span class="hl opt">*</span>semaphore<span class="hl opt">* (</span><span class="hl kwa">sb-thread</span><span class="hl opt">:</span>make-semaphore<span class="hl opt">))</span>
<span class="hl opt">(</span><span class="hl kwa">defparameter</span> <span class="hl opt">*</span>semaphores<span class="hl opt">*</span>
  <span class="hl opt">(</span><span class="hl kwa">make-array</span> <span class="hl opt">+</span>threads<span class="hl opt">+</span>
              <span class="hl opt">:</span>initial-contents
              <span class="hl opt">(</span><span class="hl kwa">loop</span> for i of-type fixnum below <span class="hl opt">+</span>threads<span class="hl opt">+</span>
                 collect <span class="hl opt">(</span><span class="hl kwa">sb-thread</span><span class="hl opt">:</span>make-semaphore<span class="hl opt">))))</span>

<span class="hl opt">(</span><span class="hl kwa">declaim</span> <span class="hl opt">(</span><span class="hl kwa">type</span> fixnum <span class="hl opt">*</span>counter<span class="hl opt">* *</span>current<span class="hl opt">*))</span>

<span class="hl opt">(</span><span class="hl kwa">defmacro</span> wait   <span class="hl opt">(</span><span class="hl kwa">semaphore</span><span class="hl opt">)</span>
  <span class="hl opt">`(</span><span class="hl kwa">sb-thread</span><span class="hl opt">:</span>wait-on-semaphore <span class="hl opt">,</span>semaphore<span class="hl opt">))</span>
<span class="hl opt">(</span><span class="hl kwa">defmacro</span> wake <span class="hl opt">(</span><span class="hl kwa">semaphore</span><span class="hl opt">)</span>
  <span class="hl opt">`(</span><span class="hl kwa">sb-thread</span><span class="hl opt">:</span>signal-semaphore  <span class="hl opt">,</span>semaphore<span class="hl opt">))</span>
<span class="hl opt">(</span><span class="hl kwa">defmacro</span> kill   <span class="hl opt">(</span><span class="hl kwa">thread</span><span class="hl opt">)</span>
  <span class="hl opt">`(</span><span class="hl kwa">handler-case</span> <span class="hl opt">(</span><span class="hl kwa">sb-thread</span><span class="hl opt">:</span>terminate-thread <span class="hl opt">,</span>thread<span class="hl opt">)</span>
     <span class="hl opt">(</span><span class="hl kwa">sb-thread</span><span class="hl opt">:</span>interrupt-thread-error <span class="hl opt">()</span> nil<span class="hl opt">)))</span>

<span class="hl opt">(</span><span class="hl kwa">defun</span> thread-body <span class="hl opt">()</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span><span class="hl opt">* ((</span><span class="hl kwa">curr</span> <span class="hl opt">(</span><span class="hl kwa">svref</span> <span class="hl opt">*</span>semaphores<span class="hl opt">* *</span>current<span class="hl opt">*))</span>
         <span class="hl opt">(</span><span class="hl kwa">next</span> <span class="hl opt">(</span><span class="hl kwa">svref</span> <span class="hl opt">*</span>semaphores<span class="hl opt">* (</span><span class="hl kwa">if</span> <span class="hl opt">(= (</span><span class="hl kwa">incf</span> <span class="hl opt">*</span>current<span class="hl opt">*) +</span>threads<span class="hl opt">+)</span> <span class="hl num">0</span> <span class="hl opt">*</span>current<span class="hl opt">*)))</span>
         <span class="hl opt">(</span><span class="hl kwa">number</span> <span class="hl opt">*</span>current<span class="hl opt">*))</span>
    <span class="hl opt">(</span><span class="hl kwa">loop</span> do <span class="hl opt">(</span><span class="hl kwa">wait</span> curr<span class="hl opt">)</span>
       until <span class="hl opt">(</span><span class="hl kwa">zerop</span> <span class="hl opt">(</span><span class="hl kwa">decf</span> <span class="hl opt">*</span>counter<span class="hl opt">*))</span>
       do <span class="hl opt">(</span><span class="hl kwa">wake</span> next<span class="hl opt">)</span>
       finally <span class="hl opt">(</span><span class="hl kwa">format</span> t <span class="hl str">&quot;~d~%&quot;</span> number<span class="hl opt">) (</span><span class="hl kwa">wake</span> <span class="hl opt">*</span>semaphore<span class="hl opt">*))))</span>

<span class="hl opt">(</span><span class="hl kwa">defun</span> start <span class="hl opt">(</span><span class="hl kwa">n</span><span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> fixnum n<span class="hl opt">))</span>
  <span class="hl opt">(</span><span class="hl kwa">setq</span> <span class="hl opt">*</span>counter<span class="hl opt">* (</span><span class="hl kwa">1</span><span class="hl opt">+</span> n<span class="hl opt">) *</span>current<span class="hl opt">*</span> <span class="hl num">0</span><span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">loop</span> for i of-type fixnum below <span class="hl opt">+</span>threads<span class="hl opt">+</span>
     collect <span class="hl opt">(</span><span class="hl kwa">sb-thread</span><span class="hl opt">:</span>make-thread <span class="hl opt">#'</span>thread-body<span class="hl opt">)</span> into threads
     finally
       <span class="hl opt">(</span><span class="hl kwa">wake</span> <span class="hl opt">(</span><span class="hl kwa">svref</span> <span class="hl opt">*</span>semaphores<span class="hl opt">*</span> <span class="hl num">0</span><span class="hl opt">))</span>
       <span class="hl opt">(</span><span class="hl kwa">wait</span> <span class="hl opt">*</span>semaphore<span class="hl opt">*)</span>
       <span class="hl opt">(</span><span class="hl kwa">dolist</span> <span class="hl opt">(</span><span class="hl kwa">i</span> threads<span class="hl opt">) (</span><span class="hl kwa">kill</span> i<span class="hl opt">))))</span>

<span class="hl opt">(</span><span class="hl kwa">defun</span> main <span class="hl opt">()</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">((</span><span class="hl kwa">n</span> <span class="hl opt">(</span><span class="hl kwa">parse-integer</span> <span class="hl opt">(</span><span class="hl kwa">or</span> <span class="hl opt">(</span><span class="hl kwa">car</span> <span class="hl opt">(</span><span class="hl kwa">last</span> <span class="hl opt">#+</span>sbcl sb-ext<span class="hl opt">:*</span>posix-argv<span class="hl opt">*</span>
                                         <span class="hl opt">#+</span>cmu  extensions<span class="hl opt">:*</span>command-line-strings<span class="hl opt">*</span>
                                         <span class="hl opt">#+</span>gcl  si<span class="hl opt">::*</span>command-args<span class="hl opt">*))</span> <span class="hl str">&quot;1&quot;</span><span class="hl opt">))))</span>
    <span class="hl opt">(</span><span class="hl kwa">start</span> n<span class="hl opt">)))</span>
