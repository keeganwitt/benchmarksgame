<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by Alex Burlyga</span>
<span class="hl com">*/</span>

<span class="hl ppc">#define _GNU_SOURCE</span>
<span class="hl ppc">#include &lt;pthread.h&gt;</span>
<span class="hl ppc">#include &lt;sched.h&gt;</span>
<span class="hl ppc">#include &lt;stdio.h&gt;</span>
<span class="hl ppc">#include &lt;stdlib.h&gt;</span>
<span class="hl ppc">#include &lt;string.h&gt;</span>
<span class="hl ppc">#include &lt;unistd.h&gt;</span>
<span class="hl ppc">#include &lt;inttypes.h&gt;</span>

<span class="hl ppc">#define NUMBER_OF_THREADS 503</span>

pthread_mutex_t cv_mutex <span class="hl opt">=</span> PTHREAD_MUTEX_INITIALIZER<span class="hl opt">;</span>
pthread_cond_t cv_main <span class="hl opt">=</span> PTHREAD_COND_INITIALIZER<span class="hl opt">;</span>
pthread_cond_t <span class="hl opt">*</span>cvs <span class="hl opt">=</span> NULL<span class="hl opt">;</span>
<span class="hl kwb">uint32_t</span> token <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl kwb">uint32_t</span> token_count <span class="hl opt">=</span> <span class="hl num">1000</span><span class="hl opt">;</span>
<span class="hl kwb">uint32_t</span> threads_started <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl kwb">uint32_t</span> number_of_cpus <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>

<span class="hl kwb">void</span> <span class="hl opt">*</span><span class="hl kwd">thread_function</span><span class="hl opt">(</span><span class="hl kwb">void</span> <span class="hl opt">*</span>arg<span class="hl opt">) {</span>
    <span class="hl kwb">uint32_t</span> thread_num <span class="hl opt">= *(</span><span class="hl kwb">uint32_t</span> <span class="hl opt">*)</span>arg<span class="hl opt">;</span>
    <span class="hl kwb">uint32_t</span> next_thread_num <span class="hl opt">= (</span>thread_num <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">) %</span> NUMBER_OF_THREADS<span class="hl opt">;</span>
    cpu_set_t cpu_mask<span class="hl opt">;</span>

    <span class="hl kwd">CPU_ZERO</span><span class="hl opt">(&amp;</span>cpu_mask<span class="hl opt">);</span>
    <span class="hl kwd">CPU_SET</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">, &amp;</span>cpu_mask<span class="hl opt">);</span>
    <span class="hl kwd">pthread_setaffinity_np</span><span class="hl opt">(</span><span class="hl kwd">pthread_self</span><span class="hl opt">(),</span> <span class="hl kwa">sizeof</span><span class="hl opt">(</span>cpu_set_t<span class="hl opt">), &amp;</span>cpu_mask<span class="hl opt">);</span>

    <span class="hl kwd">pthread_mutex_lock</span><span class="hl opt">(&amp;</span>cv_mutex<span class="hl opt">);</span>
    <span class="hl kwa">while</span> <span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">) {</span>
        threads_started<span class="hl opt">++;</span>
        <span class="hl kwd">pthread_cond_signal</span><span class="hl opt">(&amp;</span>cv_main<span class="hl opt">);</span>
        <span class="hl kwd">pthread_cond_wait</span><span class="hl opt">(</span>cvs<span class="hl opt">+</span>thread_num<span class="hl opt">, &amp;</span>cv_mutex<span class="hl opt">);</span>
        token<span class="hl opt">++;</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>token <span class="hl opt">==</span> token_count <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">) {</span>
            <span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;%d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> thread_num <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">);</span>
            token<span class="hl opt">++;</span>
            <span class="hl kwd">pthread_cond_signal</span><span class="hl opt">(</span>cvs<span class="hl opt">+</span>next_thread_num<span class="hl opt">);</span>
            <span class="hl kwd">pthread_mutex_unlock</span><span class="hl opt">(&amp;</span>cv_mutex<span class="hl opt">);</span>
            <span class="hl kwa">break</span><span class="hl opt">;</span>
        <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span>token <span class="hl opt">&gt;</span> token_count <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">) {</span>
            <span class="hl kwd">pthread_cond_signal</span><span class="hl opt">(</span>cvs<span class="hl opt">+</span>next_thread_num<span class="hl opt">);</span>
            <span class="hl kwd">pthread_mutex_unlock</span><span class="hl opt">(&amp;</span>cv_mutex<span class="hl opt">);</span>
            <span class="hl kwa">break</span><span class="hl opt">;</span>
        <span class="hl opt">}</span>
        <span class="hl kwd">pthread_cond_signal</span><span class="hl opt">(</span>cvs<span class="hl opt">+</span>next_thread_num<span class="hl opt">);</span>
    <span class="hl opt">}</span>

    <span class="hl kwd">pthread_exit</span><span class="hl opt">(</span>NULL<span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwb">int</span>
<span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span> <span class="hl opt">**</span>argv<span class="hl opt">) {</span>
    <span class="hl kwb">int</span> errno <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    pthread_t <span class="hl opt">*</span>threads <span class="hl opt">=</span> NULL<span class="hl opt">;</span>
    <span class="hl kwb">uint32_t</span> <span class="hl opt">*</span>thread_args <span class="hl opt">=</span> NULL<span class="hl opt">;</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span>argc <span class="hl opt">&gt;</span> <span class="hl num">1</span><span class="hl opt">) {</span>
        token_count <span class="hl opt">=</span> <span class="hl kwd">strtol</span><span class="hl opt">(</span>argv<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">],</span> NULL<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>

    number_of_cpus <span class="hl opt">=</span> <span class="hl kwd">sysconf</span><span class="hl opt">(</span>_SC_NPROCESSORS_CONF<span class="hl opt">);</span>

    threads <span class="hl opt">= (</span>pthread_t <span class="hl opt">*)</span><span class="hl kwd">malloc</span><span class="hl opt">(</span><span class="hl kwa">sizeof</span><span class="hl opt">(</span>pthread_t<span class="hl opt">)*</span>NUMBER_OF_THREADS<span class="hl opt">);</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>threads <span class="hl opt">==</span> NULL<span class="hl opt">) {</span>
        <span class="hl kwd">perror</span><span class="hl opt">(</span><span class="hl str">&quot;pthread_t array malloc&quot;</span><span class="hl opt">);</span>
        <span class="hl kwd">exit</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>
    <span class="hl kwd">memset</span><span class="hl opt">(</span>threads<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl kwa">sizeof</span><span class="hl opt">(</span>pthread_t<span class="hl opt">)*</span>NUMBER_OF_THREADS<span class="hl opt">);</span>

    thread_args <span class="hl opt">= (</span><span class="hl kwb">uint32_t</span> <span class="hl opt">*)</span><span class="hl kwd">malloc</span><span class="hl opt">(</span><span class="hl kwa">sizeof</span><span class="hl opt">(</span><span class="hl kwb">uint32_t</span><span class="hl opt">)*</span>NUMBER_OF_THREADS<span class="hl opt">);</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>thread_args <span class="hl opt">==</span> NULL<span class="hl opt">) {</span>
        <span class="hl kwd">perror</span><span class="hl opt">(</span><span class="hl str">&quot;thread_args array malloc&quot;</span><span class="hl opt">);</span>
        <span class="hl kwd">exit</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>
    <span class="hl kwd">memset</span><span class="hl opt">(</span>thread_args<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl kwa">sizeof</span><span class="hl opt">(</span><span class="hl kwb">uint32_t</span><span class="hl opt">)*</span>NUMBER_OF_THREADS<span class="hl opt">);</span>

    cvs <span class="hl opt">= (</span>pthread_cond_t <span class="hl opt">*)</span><span class="hl kwd">malloc</span><span class="hl opt">(</span><span class="hl kwa">sizeof</span><span class="hl opt">(</span>pthread_cond_t<span class="hl opt">)*</span>NUMBER_OF_THREADS<span class="hl opt">);</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>cvs <span class="hl opt">==</span> NULL<span class="hl opt">) {</span>
        <span class="hl kwd">perror</span><span class="hl opt">(</span><span class="hl str">&quot;cvs array malloc&quot;</span><span class="hl opt">);</span>
        <span class="hl kwd">exit</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>

    <span class="hl kwd">pthread_mutex_lock</span><span class="hl opt">(&amp;</span>cv_mutex<span class="hl opt">);</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">uint32_t</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> NUMBER_OF_THREADS<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
        <span class="hl opt">*(</span>thread_args <span class="hl opt">+</span> i<span class="hl opt">) =</span> i<span class="hl opt">;</span>
        errno <span class="hl opt">=</span> <span class="hl kwd">pthread_cond_init</span><span class="hl opt">(</span>cvs<span class="hl opt">+</span>i<span class="hl opt">,</span> NULL<span class="hl opt">);</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>errno<span class="hl opt">) {</span>
            <span class="hl kwd">perror</span><span class="hl opt">(</span><span class="hl str">&quot;pthread_cond_init&quot;</span><span class="hl opt">);</span>
            <span class="hl kwd">exit</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">);</span>
        <span class="hl opt">}</span>

        errno <span class="hl opt">=</span> <span class="hl kwd">pthread_create</span><span class="hl opt">(</span>threads<span class="hl opt">+</span>i<span class="hl opt">,</span> NULL<span class="hl opt">,</span> thread_function<span class="hl opt">, (</span><span class="hl kwb">void</span> <span class="hl opt">*)(</span>thread_args <span class="hl opt">+</span> i<span class="hl opt">));</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>errno<span class="hl opt">) {</span>
            <span class="hl kwd">perror</span><span class="hl opt">(</span><span class="hl str">&quot;pthread_create&quot;</span><span class="hl opt">);</span>
            <span class="hl kwd">exit</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">);</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">while</span><span class="hl opt">(</span>threads_started <span class="hl opt">&lt;</span> NUMBER_OF_THREADS<span class="hl opt">) {</span>
        <span class="hl kwd">pthread_cond_wait</span><span class="hl opt">(&amp;</span>cv_main<span class="hl opt">, &amp;</span>cv_mutex<span class="hl opt">);</span>
    <span class="hl opt">}</span>
    <span class="hl kwd">pthread_cond_signal</span><span class="hl opt">(</span>cvs<span class="hl opt">);</span>
    <span class="hl kwd">pthread_mutex_unlock</span><span class="hl opt">(&amp;</span>cv_mutex<span class="hl opt">);</span>

    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> NUMBER_OF_THREADS<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
        <span class="hl kwd">pthread_join</span><span class="hl opt">(*(</span>threads <span class="hl opt">+</span> i<span class="hl opt">),</span> NULL<span class="hl opt">);</span>
    <span class="hl opt">}</span>

    <span class="hl kwd">free</span><span class="hl opt">(</span>cvs<span class="hl opt">);</span>
    <span class="hl kwd">free</span><span class="hl opt">(</span>thread_args<span class="hl opt">);</span>
    <span class="hl kwd">free</span><span class="hl opt">(</span>threads<span class="hl opt">);</span>
    <span class="hl kwd">pthread_exit</span><span class="hl opt">(</span>NULL<span class="hl opt">);</span>
<span class="hl opt">}</span>
