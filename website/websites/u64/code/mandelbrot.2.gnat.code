<span class="hl slc">-- The Computer Language Benchmarks Game</span>
<span class="hl slc">-- http://benchmarksgame.alioth.debian.org</span>
<span class="hl slc">--</span>
<span class="hl slc">-- Contributed by Jim Rogers</span>
<span class="hl slc">-- Fixed by Pascal Obry on 2005/03/21</span>
<span class="hl slc">-- Modified Experimental version suggested by Pascal Obry</span>

<span class="hl kwa">with</span> GNAT<span class="hl opt">.</span>IO<span class="hl opt">;</span>          <span class="hl kwa">use</span> GNAT<span class="hl opt">.</span>IO<span class="hl opt">;</span>
<span class="hl kwa">with</span> Ada<span class="hl opt">.</span>Command_Line<span class="hl opt">;</span> <span class="hl kwa">use</span> Ada<span class="hl opt">.</span>Command_Line<span class="hl opt">;</span>
<span class="hl kwa">with</span> Interfaces<span class="hl opt">;</span>       <span class="hl kwa">use</span> Interfaces<span class="hl opt">;</span>

<span class="hl kwa">procedure</span> Mandelbrot <span class="hl kwa">is</span>
   <span class="hl kwa">type</span> Real <span class="hl kwa">is digits</span> <span class="hl num">15</span><span class="hl opt">;</span>
   Iter                   <span class="hl opt">:</span> <span class="hl kwa">constant</span> <span class="hl opt">:=</span> <span class="hl num">50</span><span class="hl opt">;</span>
   Limit                  <span class="hl opt">:</span> <span class="hl kwa">constant</span> <span class="hl opt">:=</span> <span class="hl num">4.0</span><span class="hl opt">;</span>
   Width<span class="hl opt">,</span> Height          <span class="hl opt">:</span> <span class="hl kwb">Positive</span><span class="hl opt">;</span>
   Bit_Num                <span class="hl opt">:</span> <span class="hl kwb">Natural</span>    <span class="hl opt">:=</span> <span class="hl num">0</span><span class="hl opt">;</span>
   Byte_Acc               <span class="hl opt">:</span> Unsigned_8 <span class="hl opt">:=</span> <span class="hl num">0</span><span class="hl opt">;</span>
   Zr<span class="hl opt">,</span> Zi<span class="hl opt">,</span> Cr<span class="hl opt">,</span> Ci<span class="hl opt">,</span> Tr<span class="hl opt">,</span> Ti<span class="hl opt">,</span> Zr2<span class="hl opt">,</span> Zi2 <span class="hl opt">:</span> Real<span class="hl opt">;</span>
<span class="hl kwa">begin</span>
   Width <span class="hl opt">:=</span> <span class="hl kwb">Positive</span><span class="hl kwd">'Value</span> <span class="hl opt">(</span>Argument <span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">));</span>

   Height <span class="hl opt">:=</span> Width<span class="hl opt">;</span>

   Put_Line <span class="hl opt">(</span><span class="hl str">&quot;P4&quot;</span><span class="hl opt">);</span>
   Put_Line <span class="hl opt">(</span>Argument <span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">) &amp;</span> <span class="hl str">&quot; &quot;</span> <span class="hl opt">&amp;</span> Argument <span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">));</span>

   <span class="hl kwa">for</span> Y <span class="hl kwa">in</span> <span class="hl num">0</span> <span class="hl opt">..</span> Height <span class="hl opt">-</span> <span class="hl num">1</span> <span class="hl kwa">loop</span>
      <span class="hl kwa">for</span> X <span class="hl kwa">in</span> <span class="hl num">0</span> <span class="hl opt">..</span> Width <span class="hl opt">-</span> <span class="hl num">1</span> <span class="hl kwa">loop</span>
         Zr <span class="hl opt">:=</span> <span class="hl num">0.0</span><span class="hl opt">;</span>
         Zi <span class="hl opt">:=</span> <span class="hl num">0.0</span><span class="hl opt">;</span>
         Cr <span class="hl opt">:=</span> <span class="hl num">2.0</span> <span class="hl opt">*</span> Real <span class="hl opt">(</span>X<span class="hl opt">) /</span> Real <span class="hl opt">(</span>Width<span class="hl opt">) -</span> <span class="hl num">1.5</span><span class="hl opt">;</span>
         Ci <span class="hl opt">:=</span> <span class="hl num">2.0</span> <span class="hl opt">*</span> Real <span class="hl opt">(</span>Y<span class="hl opt">) /</span> Real <span class="hl opt">(</span>Height<span class="hl opt">) -</span> <span class="hl num">1.0</span><span class="hl opt">;</span>

         <span class="hl kwa">for</span> I <span class="hl kwa">in</span> <span class="hl num">1</span> <span class="hl opt">..</span> Iter <span class="hl opt">+</span> <span class="hl num">1</span> <span class="hl kwa">loop</span>
            Zr2 <span class="hl opt">:=</span> Zr <span class="hl opt">**</span> <span class="hl num">2</span><span class="hl opt">;</span>
            Zi2 <span class="hl opt">:=</span> Zi <span class="hl opt">**</span> <span class="hl num">2</span><span class="hl opt">;</span>
            Tr  <span class="hl opt">:=</span> Zr2 <span class="hl opt">-</span> Zi2 <span class="hl opt">+</span> Cr<span class="hl opt">;</span>
            Ti  <span class="hl opt">:=</span> <span class="hl num">2.0</span> <span class="hl opt">*</span> Zr <span class="hl opt">*</span> Zi <span class="hl opt">+</span> Ci<span class="hl opt">;</span>
            Zr  <span class="hl opt">:=</span> Tr<span class="hl opt">;</span>
            Zi  <span class="hl opt">:=</span> Ti<span class="hl opt">;</span>

            <span class="hl kwa">exit when</span> Zr2 <span class="hl opt">+</span> Zi2 <span class="hl opt">&gt;</span> Limit<span class="hl opt">;</span>
         <span class="hl kwa">end loop</span><span class="hl opt">;</span>
         
         <span class="hl kwa">if</span> Zr2 <span class="hl opt">+</span> Zi2 <span class="hl opt">&gt;</span> Limit <span class="hl kwa">then</span>
            Byte_Acc <span class="hl opt">:=</span> Shift_Left <span class="hl opt">(</span>Byte_Acc<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">)</span> <span class="hl kwa">or</span> <span class="hl num">16</span>#<span class="hl num">00</span>#<span class="hl opt">;</span>
         <span class="hl kwa">else</span>
            Byte_Acc <span class="hl opt">:=</span> Shift_Left <span class="hl opt">(</span>Byte_Acc<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">)</span> <span class="hl kwa">or</span> <span class="hl num">16</span>#<span class="hl num">01</span>#<span class="hl opt">;</span>
         <span class="hl kwa">end if</span><span class="hl opt">;</span>

         Bit_Num <span class="hl opt">:=</span> Bit_Num <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span>

         <span class="hl kwa">if</span> Bit_Num <span class="hl opt">=</span> <span class="hl num">8</span> <span class="hl kwa">then</span>
            Put <span class="hl opt">(</span><span class="hl kwb">Character</span><span class="hl kwd">'Val</span> <span class="hl opt">(</span>Byte_Acc<span class="hl opt">));</span>
            Byte_Acc <span class="hl opt">:=</span> <span class="hl num">0</span><span class="hl opt">;</span>
            Bit_Num  <span class="hl opt">:=</span> <span class="hl num">0</span><span class="hl opt">;</span>
         <span class="hl kwa">elsif</span> X <span class="hl opt">=</span> Width <span class="hl opt">-</span> <span class="hl num">1</span> <span class="hl kwa">then</span>
            Byte_Acc <span class="hl opt">:=</span> Shift_Left <span class="hl opt">(</span>Byte_Acc<span class="hl opt">,</span> <span class="hl num">8</span> <span class="hl opt">- (</span>Width <span class="hl kwa">mod</span> <span class="hl num">8</span><span class="hl opt">));</span>
            Put <span class="hl opt">(</span><span class="hl kwb">Character</span><span class="hl kwd">'Val</span> <span class="hl opt">(</span>Byte_Acc<span class="hl opt">));</span>
            Byte_Acc <span class="hl opt">:=</span> <span class="hl num">0</span><span class="hl opt">;</span>
            Bit_Num  <span class="hl opt">:=</span> <span class="hl num">0</span><span class="hl opt">;</span>
         <span class="hl kwa">end if</span><span class="hl opt">;</span>
      <span class="hl kwa">end loop</span><span class="hl opt">;</span>
   <span class="hl kwa">end loop</span><span class="hl opt">;</span>
<span class="hl kwa">end</span> Mandelbrot<span class="hl opt">;</span>

