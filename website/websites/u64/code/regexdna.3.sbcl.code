<span class="hl slc">;;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;;; http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">;;;</span>
<span class="hl slc">;;; Contributed by: Witali Kusnezow 2009-03-02</span>

<span class="hl opt">(</span><span class="hl kwa">eval-when</span> <span class="hl opt">(:</span>compile-toplevel <span class="hl opt">:</span>load-toplevel <span class="hl opt">:</span>execute<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">require</span> <span class="hl opt">:</span>asdf<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">require</span> <span class="hl opt">:</span>cl-ppcre<span class="hl opt">)</span>

<span class="hl opt">#+</span>sb-thread
<span class="hl opt">(</span><span class="hl kwa">progn</span>
  <span class="hl opt">(</span><span class="hl kwa">define-alien-routine</span> sysconf long <span class="hl opt">(</span><span class="hl kwa">name</span> int<span class="hl opt">))</span>
  <span class="hl opt">(</span><span class="hl kwa">use-package</span> <span class="hl opt">:</span>sb-thread<span class="hl opt">)))</span>

<span class="hl opt">(</span><span class="hl kwa">eval-when</span> <span class="hl opt">(:</span>compile-toplevel<span class="hl opt">)</span>
<span class="hl opt">(</span><span class="hl kwa">setf</span> cl-ppcre<span class="hl opt">:*</span>regex-char-code-limit<span class="hl opt">*</span> <span class="hl num">128</span><span class="hl opt">))</span>

<span class="hl opt">(</span><span class="hl kwa">defconstant</span>  <span class="hl opt">+</span>regex-list<span class="hl opt">+</span>
  <span class="hl opt">'(</span><span class="hl str">&quot;agggtaaa|tttaccct&quot;</span>
    <span class="hl str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span>
    <span class="hl str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span>
    <span class="hl str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span>
    <span class="hl str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span>
    <span class="hl str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span>
    <span class="hl str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span>
    <span class="hl str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span>
    <span class="hl str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span><span class="hl opt">))</span>

<span class="hl opt">(</span><span class="hl kwa">defconstant</span>  <span class="hl opt">+</span>alternatives<span class="hl opt">+</span>
  <span class="hl opt">'((</span><span class="hl str">&quot;B&quot;</span> <span class="hl str">&quot;(c|g|t)&quot;</span><span class="hl opt">)  (</span><span class="hl str">&quot;D&quot;</span> <span class="hl str">&quot;(a|g|t)&quot;</span><span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl str">&quot;H&quot;</span> <span class="hl str">&quot;(a|c|t)&quot;</span><span class="hl opt">)  (</span><span class="hl str">&quot;K&quot;</span> <span class="hl str">&quot;(g|t)&quot;</span><span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl str">&quot;M&quot;</span> <span class="hl str">&quot;(a|c)&quot;</span><span class="hl opt">)    (</span><span class="hl str">&quot;N&quot;</span> <span class="hl str">&quot;(a|c|g|t)&quot;</span><span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl str">&quot;R&quot;</span> <span class="hl str">&quot;(a|g)&quot;</span><span class="hl opt">)    (</span><span class="hl str">&quot;S&quot;</span> <span class="hl str">&quot;(c|t)&quot;</span><span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl str">&quot;V&quot;</span> <span class="hl str">&quot;(a|c|g)&quot;</span><span class="hl opt">)  (</span><span class="hl str">&quot;W&quot;</span> <span class="hl str">&quot;(a|t)&quot;</span><span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl str">&quot;Y&quot;</span> <span class="hl str">&quot;(c|t)&quot;</span><span class="hl opt">)))</span>

<span class="hl opt">#+</span>sb-thread
<span class="hl opt">(</span><span class="hl kwa">progn</span>
  <span class="hl opt">(</span><span class="hl kwa">defconstant</span>  <span class="hl opt">+</span>cpu-count<span class="hl opt">+ (</span><span class="hl kwa">sysconf</span> <span class="hl num">84</span><span class="hl opt">))</span>
  <span class="hl opt">(</span><span class="hl kwa">defvar</span> <span class="hl opt">*</span>mutex<span class="hl opt">* (</span><span class="hl kwa">make-mutex</span><span class="hl opt">))</span>
  <span class="hl opt">(</span><span class="hl kwa">defvar</span> <span class="hl opt">*</span>aux-mutex<span class="hl opt">* (</span><span class="hl kwa">make-mutex</span><span class="hl opt">))</span>

  <span class="hl opt">(</span><span class="hl kwa">defmacro</span> bg  <span class="hl opt">(&amp;</span>body body<span class="hl opt">) `(</span><span class="hl kwa">make-thread</span> <span class="hl opt">(</span><span class="hl kwa">lambda</span> <span class="hl opt">() ,&#64;</span>body<span class="hl opt">)))</span>
  <span class="hl opt">(</span><span class="hl kwa">defmacro</span> join-all <span class="hl opt">(&amp;</span>body body<span class="hl opt">)</span>
	<span class="hl opt">`(</span><span class="hl kwa">mapcar</span>
	  <span class="hl opt">#'</span>join-thread
	  <span class="hl opt">(</span><span class="hl kwa">loop</span> for item in <span class="hl opt">(</span><span class="hl kwa">list</span> <span class="hl opt">,&#64;</span>body<span class="hl opt">)</span>
		 append <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">consp</span> item<span class="hl opt">)</span> item <span class="hl opt">(</span><span class="hl kwa">list</span> item<span class="hl opt">))))))</span>

<span class="hl opt">(</span><span class="hl kwa">defun</span> read-all
    <span class="hl opt">(</span><span class="hl kwa">stream</span> <span class="hl opt">&amp;</span>aux <span class="hl opt">(</span><span class="hl kwa">buf-size</span> <span class="hl opt">(*</span> <span class="hl num">1024 1024</span><span class="hl opt">))</span>
     <span class="hl opt">(</span><span class="hl kwa">size</span> <span class="hl num">0</span><span class="hl opt">)</span>
     <span class="hl opt">(</span><span class="hl kwa">buf-list</span>
      <span class="hl opt">(</span><span class="hl kwa">loop</span>
         for buf <span class="hl opt">= (</span><span class="hl kwa">make-string</span> buf-size <span class="hl opt">:</span>element-type <span class="hl opt">'</span>base-char<span class="hl opt">)</span>
         for len <span class="hl opt">= (</span><span class="hl kwa">read-sequence</span> buf stream<span class="hl opt">)</span>
         do <span class="hl opt">(</span><span class="hl kwa">incf</span> size len<span class="hl opt">)</span>
         collect <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(&lt;</span> len buf-size<span class="hl opt">) (</span><span class="hl kwa">subseq</span> buf <span class="hl num">0</span> len<span class="hl opt">)</span> buf<span class="hl opt">)</span>
         while <span class="hl opt">(=</span> len buf-size<span class="hl opt">))))</span>
  <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> fixnum size<span class="hl opt">))</span>
  <span class="hl opt">(</span><span class="hl kwa">loop</span> with res-string <span class="hl opt">= (</span><span class="hl kwa">make-string</span> size <span class="hl opt">:</span>element-type <span class="hl opt">'</span>base-char<span class="hl opt">)</span>
     with i of-type fixnum <span class="hl opt">=</span> <span class="hl num">0</span>
     for str in buf-list
     do <span class="hl opt">(</span><span class="hl kwa">setf</span> <span class="hl opt">(</span><span class="hl kwa">subseq</span> res-string i<span class="hl opt">) (</span><span class="hl kwa">the</span> simple-base-string str<span class="hl opt">))</span>
     <span class="hl opt">(</span><span class="hl kwa">incf</span> i <span class="hl opt">(</span><span class="hl kwa">length</span> <span class="hl opt">(</span><span class="hl kwa">the</span> simple-base-string str<span class="hl opt">)))</span>
     finally <span class="hl opt">(</span><span class="hl kwa">return</span> res-string<span class="hl opt">)))</span>

<span class="hl opt">(</span><span class="hl kwa">defun</span> length-to-replace <span class="hl opt">(</span><span class="hl kwa">match</span><span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">loop</span> for x in match
     sum <span class="hl opt">(</span><span class="hl kwa">-</span> <span class="hl opt">(</span><span class="hl kwa">the</span> fixnum <span class="hl opt">(</span><span class="hl kwa">cdr</span> x<span class="hl opt">))</span>
            <span class="hl opt">(</span><span class="hl kwa">the</span> fixnum <span class="hl opt">(</span><span class="hl kwa">car</span> x<span class="hl opt">)))</span> of-type fixnum<span class="hl opt">))</span>

<span class="hl opt">(</span><span class="hl kwa">defun</span> replace-aux
    <span class="hl opt">(</span><span class="hl kwa">match</span> replacement target-string result-string
     <span class="hl opt">&amp;</span>key <span class="hl opt">(</span><span class="hl kwa">match-begin</span> <span class="hl num">0</span><span class="hl opt">) (</span><span class="hl kwa">match-end</span> -<span class="hl num">1</span><span class="hl opt">)</span>
     <span class="hl opt">(</span><span class="hl kwa">match-length</span> <span class="hl opt">(</span><span class="hl kwa">length</span> match<span class="hl opt">))</span>
     <span class="hl opt">&amp;</span>aux
     <span class="hl opt">(</span><span class="hl kwa">len</span> <span class="hl opt">(</span><span class="hl kwa">length</span> replacement<span class="hl opt">))</span>
     <span class="hl opt">(</span><span class="hl kwa">first-match</span> <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">zerop</span> match-begin<span class="hl opt">) '(</span><span class="hl kwa">0</span> . <span class="hl num">0</span><span class="hl opt">) (</span><span class="hl kwa">nth</span> <span class="hl opt">(</span><span class="hl kwa">1-</span> match-begin<span class="hl opt">)</span> match<span class="hl opt">)))</span>
     <span class="hl opt">(</span><span class="hl kwa">target-start</span> <span class="hl opt">(</span><span class="hl kwa">cdr</span> first-match<span class="hl opt">))</span>
     <span class="hl opt">(</span><span class="hl kwa">result-start</span> <span class="hl opt">(+ (</span><span class="hl kwa">the</span> fixnum <span class="hl opt">(*</span> len match-begin<span class="hl opt">))</span>
                    <span class="hl opt">(</span><span class="hl kwa">-</span> target-start
                       <span class="hl opt">(</span><span class="hl kwa">the</span> fixnum <span class="hl opt">(</span><span class="hl kwa">length-to-replace</span> <span class="hl opt">(</span><span class="hl kwa">subseq</span> match <span class="hl num">0</span> match-begin<span class="hl opt">)))))))</span>
  <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> fixnum match-begin match-end match-length target-start result-start len<span class="hl opt">)</span>
           <span class="hl opt">(</span><span class="hl kwa">type</span> list match<span class="hl opt">)</span>
           <span class="hl opt">(</span><span class="hl kwa">type</span> simple-base-string result-string target-string<span class="hl opt">)</span>
           <span class="hl opt">(</span><span class="hl kwa">type</span> vector replacement<span class="hl opt">))</span>
  <span class="hl opt">(</span><span class="hl kwa">loop</span> with <span class="hl opt">(</span><span class="hl kwa">i</span> j<span class="hl opt">)</span> of-type fixnum <span class="hl opt">= (</span><span class="hl kwa">list</span> result-start target-start<span class="hl opt">)</span>
     with mmatch <span class="hl opt">= (</span><span class="hl kwa">if</span> <span class="hl opt">(&gt;</span> match-begin match-end<span class="hl opt">)</span>
                       match <span class="hl opt">(</span><span class="hl kwa">subseq</span> match match-begin match-end<span class="hl opt">))</span>
     for pair in mmatch
     do <span class="hl opt">(</span><span class="hl kwa">setf</span> <span class="hl opt">(</span><span class="hl kwa">subseq</span> result-string i<span class="hl opt">) (</span><span class="hl kwa">subseq</span> target-string j <span class="hl opt">(</span><span class="hl kwa">car</span> pair<span class="hl opt">))</span>
              i <span class="hl opt">(+</span> i <span class="hl opt">(</span><span class="hl kwa">-</span> <span class="hl opt">(</span><span class="hl kwa">the</span> fixnum <span class="hl opt">(</span><span class="hl kwa">car</span> pair<span class="hl opt">))</span> j<span class="hl opt">))</span>
              <span class="hl opt">(</span><span class="hl kwa">subseq</span> result-string i<span class="hl opt">)</span> replacement
              j <span class="hl opt">(</span><span class="hl kwa">cdr</span> pair<span class="hl opt">)</span>
              i <span class="hl opt">(+</span> i len<span class="hl opt">))</span>
     finally <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">or</span> <span class="hl opt">(</span><span class="hl kwa">minusp</span> match-end<span class="hl opt">) (&lt;=</span> match-length match-end<span class="hl opt">))</span>
                 <span class="hl opt">(</span><span class="hl kwa">setf</span> <span class="hl opt">(</span><span class="hl kwa">subseq</span> result-string i <span class="hl opt">) (</span><span class="hl kwa">subseq</span> target-string j<span class="hl opt">))))</span>
  nil<span class="hl opt">)</span>

<span class="hl opt">#+</span>sb-thread
<span class="hl opt">(</span><span class="hl kwa">defun</span> parts
    <span class="hl opt">(</span><span class="hl kwa">parts-num</span> len
     <span class="hl opt">&amp;</span>aux
     <span class="hl opt">(</span><span class="hl kwa">ranges</span> <span class="hl opt">(</span><span class="hl kwa">loop</span> with <span class="hl opt">(</span><span class="hl kwa">step</span> rest<span class="hl opt">)</span> of-type fixnum <span class="hl opt">=  (</span><span class="hl kwa">multiple-value-list</span> <span class="hl opt">(</span><span class="hl kwa">floor</span> len parts-num<span class="hl opt">))</span>
                with i of-type fixnum <span class="hl opt">=</span> <span class="hl num">0</span> while <span class="hl opt">(&lt;</span> i len<span class="hl opt">)</span>
                collect i into res of-type fixnum
                do <span class="hl opt">(</span><span class="hl kwa">incf</span> i step<span class="hl opt">)(</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">plusp</span> rest<span class="hl opt">) (</span><span class="hl kwa">progn</span> <span class="hl opt">(</span><span class="hl kwa">incf</span> i<span class="hl opt">) (</span><span class="hl kwa">decf</span> rest<span class="hl opt">)) )</span>
                finally <span class="hl opt">(</span><span class="hl kwa">return</span> <span class="hl opt">(</span><span class="hl kwa">append</span> res <span class="hl opt">(</span><span class="hl kwa">list</span> len<span class="hl opt">))))</span>
             <span class="hl opt">))</span>
  <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> fixnum len parts-num<span class="hl opt">)</span>
           <span class="hl opt">(</span><span class="hl kwa">type</span> list ranges<span class="hl opt">))</span>
  <span class="hl opt">(</span><span class="hl kwa">mapcar</span> <span class="hl opt">#'</span>cons ranges <span class="hl opt">(</span><span class="hl kwa">subseq</span> ranges <span class="hl num">1</span><span class="hl opt">)))</span>

<span class="hl opt">(</span><span class="hl kwa">defun</span> replace-all
    <span class="hl opt">(</span><span class="hl kwa">regexp</span> replacement target-string
     <span class="hl opt">&amp;</span>aux <span class="hl opt">(</span><span class="hl kwa">rmatch</span> <span class="hl opt">'()) (</span><span class="hl kwa">match</span> <span class="hl opt">'())</span>
     <span class="hl opt">(</span><span class="hl kwa">result-string</span> <span class="hl opt">(</span><span class="hl kwa">make-string</span> <span class="hl num">0</span> <span class="hl opt">:</span>element-type <span class="hl opt">'</span>base-char<span class="hl opt">)))</span>
  <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> simple-base-string result-string target-string<span class="hl opt">)</span>
           <span class="hl opt">(</span><span class="hl kwa">type</span> vector replacement<span class="hl opt">))</span>
  <span class="hl opt">(</span><span class="hl kwa">cl-ppcre</span><span class="hl opt">:</span>do-scans
      <span class="hl opt">(</span><span class="hl kwa">match-start</span> match-end reg-starts reg-ends regexp target-string nil<span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl kwa">push</span> <span class="hl opt">(</span><span class="hl kwa">cons</span> match-start match-end<span class="hl opt">)</span> rmatch<span class="hl opt">))</span>
  <span class="hl opt">(</span><span class="hl kwa">if</span> rmatch
      <span class="hl opt">(</span><span class="hl kwa">progn</span>
        <span class="hl opt">(</span><span class="hl kwa">setf</span> match <span class="hl opt">(</span><span class="hl kwa">reverse</span> rmatch<span class="hl opt">)</span>
              result-string <span class="hl opt">(</span><span class="hl kwa">make-string</span>
                             <span class="hl opt">(+ (</span><span class="hl kwa">-</span> <span class="hl opt">(</span><span class="hl kwa">length</span> target-string<span class="hl opt">)</span>
                                   <span class="hl opt">(</span><span class="hl kwa">length-to-replace</span> match<span class="hl opt">))</span>
                                <span class="hl opt">(</span><span class="hl kwa">the</span> fixnum <span class="hl opt">(* (</span><span class="hl kwa">length</span> replacement<span class="hl opt">)</span>
                                               <span class="hl opt">(</span><span class="hl kwa">length</span> match<span class="hl opt">)))) :</span>element-type <span class="hl opt">'</span>base-char<span class="hl opt">))</span>
        <span class="hl opt">#</span>-sb-thread
        <span class="hl opt">(</span><span class="hl kwa">replace-aux</span> match replacement target-string result-string<span class="hl opt">)</span>
        <span class="hl opt">#+</span>sb-thread
        <span class="hl opt">(</span><span class="hl kwa">mapcar</span> <span class="hl opt">#'</span>join-thread
                <span class="hl opt">(</span><span class="hl kwa">loop</span> with len of-type fixnum <span class="hl opt">= (</span><span class="hl kwa">length</span> match<span class="hl opt">)</span>
				   with parts-list  <span class="hl opt">= (</span><span class="hl kwa">parts</span> <span class="hl opt">+</span>cpu-count<span class="hl opt">+</span> len<span class="hl opt">)</span>
                   with current of-type fixnum <span class="hl opt">=</span> <span class="hl num">0</span>
                   repeat <span class="hl opt">+</span>cpu-count<span class="hl opt">+</span>
                   collect
					 <span class="hl opt">(</span><span class="hl kwa">bg</span> <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">(</span><span class="hl kwa">range</span><span class="hl opt">)</span>
                           <span class="hl opt">(</span><span class="hl kwa">with-mutex</span> <span class="hl opt">(*</span>mutex<span class="hl opt">*)</span>
                             <span class="hl opt">(</span><span class="hl kwa">setf</span> range <span class="hl opt">(</span><span class="hl kwa">nth</span> current parts-list<span class="hl opt">))</span>
                             <span class="hl opt">(</span><span class="hl kwa">incf</span> current<span class="hl opt">))</span>
                           <span class="hl opt">(</span><span class="hl kwa">replace-aux</span> match replacement target-string result-string
                                        <span class="hl opt">:</span>match-begin <span class="hl opt">(</span><span class="hl kwa">car</span> range<span class="hl opt">) :</span>match-end <span class="hl opt">(</span><span class="hl kwa">cdr</span> range<span class="hl opt">)</span>
                                        <span class="hl opt">:</span>match-length len<span class="hl opt">)))))</span>
        result-string<span class="hl opt">)</span>
      target-string<span class="hl opt">))</span>

<span class="hl opt">(</span><span class="hl kwa">defun</span> main <span class="hl opt">(&amp;</span>optional <span class="hl opt">(</span><span class="hl kwa">stream</span> <span class="hl opt">*</span>standard-input<span class="hl opt">*)</span>
             <span class="hl opt">&amp;</span>aux <span class="hl opt">(</span><span class="hl kwa">sequence</span> <span class="hl opt">(</span><span class="hl kwa">read-all</span> stream<span class="hl opt">))</span>
             <span class="hl opt">(</span><span class="hl kwa">size</span> <span class="hl opt">(</span><span class="hl kwa">length</span> sequence<span class="hl opt">)))</span>
  <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> simple-base-string sequence<span class="hl opt">))</span>
  <span class="hl opt">(</span><span class="hl kwa">setf</span> sequence <span class="hl opt">(</span><span class="hl kwa">replace-all</span> <span class="hl str">&quot;&gt;[^</span><span class="hl esc">\\</span><span class="hl str">n]*</span><span class="hl esc">\\</span><span class="hl str">n|</span><span class="hl esc">\\</span><span class="hl str">n&quot;</span> <span class="hl str">&quot;&quot;</span> sequence<span class="hl opt">))</span>

  <span class="hl opt">#</span>-sb-thread
  <span class="hl opt">(</span><span class="hl kwa">progn</span>
    <span class="hl opt">(</span><span class="hl kwa">loop</span> for regex in <span class="hl opt">+</span>regex-list<span class="hl opt">+</span> do
         <span class="hl opt">(</span><span class="hl kwa">format</span> t <span class="hl str">&quot;~a ~a~%&quot;</span> regex
                 <span class="hl opt">(/ (</span><span class="hl kwa">length</span>
                     <span class="hl opt">(</span><span class="hl kwa">the</span> list
                       <span class="hl opt">(</span><span class="hl kwa">cl-ppcre</span><span class="hl opt">:</span>all-matches regex sequence<span class="hl opt">)))</span> <span class="hl num">2</span><span class="hl opt">)))</span>
    <span class="hl opt">(</span><span class="hl kwa">format</span> t <span class="hl str">&quot;~%~a~%~a~%&quot;</span> size <span class="hl opt">(</span><span class="hl kwa">length</span> sequence<span class="hl opt">))</span>
    <span class="hl opt">(</span><span class="hl kwa">loop</span> for pair in <span class="hl opt">+</span>alternatives<span class="hl opt">+</span> do
         <span class="hl opt">(</span><span class="hl kwa">setf</span> sequence <span class="hl opt">(</span><span class="hl kwa">replace-all</span>  <span class="hl opt">(</span><span class="hl kwa">car</span> pair<span class="hl opt">) (</span><span class="hl kwa">cadr</span> pair<span class="hl opt">)</span> sequence <span class="hl opt">)))</span>
    <span class="hl opt">(</span><span class="hl kwa">format</span> t <span class="hl str">&quot;~a~%&quot;</span> <span class="hl opt">(</span><span class="hl kwa">length</span> sequence<span class="hl opt">)))</span>
  <span class="hl opt">#+</span>sb-thread
  <span class="hl opt">(</span><span class="hl kwa">let</span><span class="hl opt">* ((</span><span class="hl kwa">len</span> <span class="hl opt">(</span><span class="hl kwa">length</span> <span class="hl opt">+</span>regex-list<span class="hl opt">+))</span>
         <span class="hl opt">(</span><span class="hl kwa">result</span> <span class="hl opt">(</span><span class="hl kwa">make-list</span> <span class="hl opt">(</span><span class="hl kwa">1</span><span class="hl opt">+</span> len<span class="hl opt">))))</span>
    <span class="hl opt">(</span><span class="hl kwa">join-all</span>
	 <span class="hl opt">(</span><span class="hl kwa">loop</span> with idx of-type fixnum <span class="hl opt">=</span> <span class="hl num">0</span>
		repeat len
		collect
          <span class="hl opt">(</span><span class="hl kwa">bg</span> <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">(</span><span class="hl kwa">reg</span> cur<span class="hl opt">)</span>
                <span class="hl opt">(</span><span class="hl kwa">with-mutex</span> <span class="hl opt">(*</span>aux-mutex<span class="hl opt">*)</span>
                  <span class="hl opt">(</span><span class="hl kwa">setf</span> cur idx reg <span class="hl opt">(</span><span class="hl kwa">nth</span> cur <span class="hl opt">+</span>regex-list<span class="hl opt">+))</span>
                  <span class="hl opt">(</span><span class="hl kwa">incf</span> idx<span class="hl opt">))</span>
              <span class="hl opt">(</span><span class="hl kwa">setf</span> <span class="hl opt">(</span><span class="hl kwa">nth</span> cur result<span class="hl opt">)</span>
                    <span class="hl opt">(</span><span class="hl kwa">format</span> nil <span class="hl str">&quot;~a ~a&quot;</span> reg
                            <span class="hl opt">(/ (</span><span class="hl kwa">length</span>
                                <span class="hl opt">(</span><span class="hl kwa">the</span> list
                                  <span class="hl opt">(</span><span class="hl kwa">cl-ppcre</span><span class="hl opt">:</span>all-matches reg sequence<span class="hl opt">)))</span> <span class="hl num">2</span><span class="hl opt">))))))</span>
	 <span class="hl opt">(</span><span class="hl kwa">bg</span> <span class="hl opt">(</span><span class="hl kwa">loop</span> with seq <span class="hl opt">= (</span><span class="hl kwa">copy-seq</span> sequence<span class="hl opt">)</span>
            for pair in <span class="hl opt">+</span>alternatives<span class="hl opt">+</span> do
              <span class="hl opt">(</span><span class="hl kwa">setf</span> seq <span class="hl opt">(</span><span class="hl kwa">replace-all</span>  <span class="hl opt">(</span><span class="hl kwa">car</span> pair<span class="hl opt">) (</span><span class="hl kwa">cadr</span> pair<span class="hl opt">)</span> seq <span class="hl opt">))</span>
            finally <span class="hl opt">(</span><span class="hl kwa">setf</span> <span class="hl opt">(</span><span class="hl kwa">nth</span> len result<span class="hl opt">)</span>
                          <span class="hl opt">(</span><span class="hl kwa">format</span> nil <span class="hl str">&quot;~%~a~%~a~%~a&quot;</span> size <span class="hl opt">(</span><span class="hl kwa">length</span> sequence<span class="hl opt">) (</span><span class="hl kwa">length</span> seq<span class="hl opt">))))))</span>
    <span class="hl opt">(</span><span class="hl kwa">format</span> t <span class="hl str">&quot;~{~a~%~}&quot;</span> result<span class="hl opt">))</span>
  <span class="hl opt">)</span>
