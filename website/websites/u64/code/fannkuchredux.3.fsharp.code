<span class="hl com">(* The Computer Language Benchmarks Game</span>
<span class="hl com"></span>
<span class="hl com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   from Scala version by Otto Bommer, 13 Dec 2011</span>
<span class="hl com"></span>
<span class="hl com">   Modified by Vassil Keremidchiev by simplifying and parallelizing in F#, January 24, 2012</span>
<span class="hl com">*)</span>

<span class="hl kwa">open</span> <span class="hl kwd">System</span><span class="hl opt">.</span><span class="hl kwd">Threading</span>

<span class="hl kwa">let rec</span> fac x <span class="hl opt">=</span> <span class="hl kwa">if</span> x<span class="hl opt">&lt;</span><span class="hl num">2</span> <span class="hl kwa">then</span> <span class="hl num">1L</span> <span class="hl kwa">else</span> <span class="hl opt">(</span>int64 x<span class="hl opt">) *</span> fac <span class="hl opt">(</span>x<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">)</span>
<span class="hl kwa">let</span> <span class="hl kwd">F</span> <span class="hl opt">= [</span><span class="hl num">0</span><span class="hl opt">.</span><span class="hl num">.20</span><span class="hl opt">]</span> |<span class="hl opt">&gt;</span> <span class="hl kwd">Seq</span><span class="hl opt">.</span>map fac |<span class="hl opt">&gt;</span> <span class="hl kwd">Seq</span><span class="hl opt">.</span>toArray

<span class="hl kwa">type</span> fannkuch<span class="hl opt">(</span> n <span class="hl opt">) =</span>
    <span class="hl kwa">let</span> p <span class="hl opt">=</span> <span class="hl kwd">Array</span><span class="hl opt">.</span>create n <span class="hl num">0</span>
    <span class="hl kwa">let</span> pp <span class="hl opt">=</span> <span class="hl kwd">Array</span><span class="hl opt">.</span>create n <span class="hl num">0</span>
    <span class="hl kwa">let</span> count <span class="hl opt">=</span> <span class="hl kwd">Array</span><span class="hl opt">.</span>create n <span class="hl num">0</span>
    <span class="hl kwa">let mutable</span> flips <span class="hl opt">=</span> <span class="hl num">0</span>
    <span class="hl kwa">let mutable</span> cksum <span class="hl opt">=</span> <span class="hl num">0</span>

    <span class="hl kwa">let rec</span> direct idx i <span class="hl opt">=</span>
        <span class="hl kwa">if</span> i <span class="hl opt">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
            <span class="hl kwa">let</span> d <span class="hl opt">=</span> <span class="hl kwb">int</span> <span class="hl opt">(</span>idx <span class="hl opt">/</span> <span class="hl kwd">F</span><span class="hl opt">.[</span>i<span class="hl opt">])</span>
            count<span class="hl opt">.[</span>i<span class="hl opt">] &lt;-</span> d
            <span class="hl kwa">for</span> j <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> d<span class="hl opt">-</span><span class="hl num">1</span> <span class="hl kwa">do</span> pp<span class="hl opt">.[</span>j<span class="hl opt">] &lt;-</span> p<span class="hl opt">.[</span>j<span class="hl opt">]</span>
            <span class="hl kwa">for</span> j <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> i<span class="hl opt">-</span>d <span class="hl kwa">do</span> p<span class="hl opt">.[</span>j<span class="hl opt">] &lt;-</span> p<span class="hl opt">.[</span>j<span class="hl opt">+</span>d<span class="hl opt">]</span>
            <span class="hl kwa">for</span> j <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> d<span class="hl opt">-</span><span class="hl num">1</span> <span class="hl kwa">do</span> p<span class="hl opt">.[</span>j<span class="hl opt">+</span>i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">-</span>d<span class="hl opt">] &lt;-</span> pp<span class="hl opt">.[</span>j<span class="hl opt">]</span>
            direct <span class="hl opt">(</span>idx <span class="hl opt">%</span> <span class="hl kwd">F</span><span class="hl opt">.[</span>i<span class="hl opt">]) (</span>i<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">)</span>

    <span class="hl kwa">let</span> permute<span class="hl opt">() =</span>
        <span class="hl kwa">let mutable</span> first <span class="hl opt">=</span> p<span class="hl opt">.[</span><span class="hl num">1</span><span class="hl opt">]</span>
        p<span class="hl opt">.[</span><span class="hl num">1</span><span class="hl opt">] &lt;-</span> p<span class="hl opt">.[</span><span class="hl num">0</span><span class="hl opt">]</span>
        p<span class="hl opt">.[</span><span class="hl num">0</span><span class="hl opt">] &lt;-</span> first

        <span class="hl kwa">let mutable</span> i <span class="hl opt">=</span> <span class="hl num">1</span>
        count<span class="hl opt">.[</span>i<span class="hl opt">] &lt;-</span> count<span class="hl opt">.[</span>i<span class="hl opt">] +</span> <span class="hl num">1</span>
        <span class="hl kwa">while</span> count<span class="hl opt">.[</span>i<span class="hl opt">] &gt;</span> i <span class="hl kwa">do</span>
            count<span class="hl opt">.[</span>i<span class="hl opt">] &lt;-</span> <span class="hl num">0</span>
            i <span class="hl opt">&lt;-</span> i <span class="hl opt">+</span> <span class="hl num">1</span>
            p<span class="hl opt">.[</span><span class="hl num">0</span><span class="hl opt">] &lt;-</span> p<span class="hl opt">.[</span><span class="hl num">1</span><span class="hl opt">]</span>
            <span class="hl kwa">let</span> next <span class="hl opt">=</span> p<span class="hl opt">.[</span><span class="hl num">1</span><span class="hl opt">]</span>
            <span class="hl kwa">for</span> j <span class="hl opt">=</span> <span class="hl num">1</span> <span class="hl kwa">to</span> i<span class="hl opt">-</span><span class="hl num">1</span> <span class="hl kwa">do</span> p<span class="hl opt">.[</span>j<span class="hl opt">] &lt;-</span> p<span class="hl opt">.[</span>j<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">]</span>
            p<span class="hl opt">.[</span>i<span class="hl opt">] &lt;-</span> first
            first <span class="hl opt">&lt;-</span> next
            count<span class="hl opt">.[</span>i<span class="hl opt">] &lt;-</span> count<span class="hl opt">.[</span>i<span class="hl opt">] +</span> <span class="hl num">1</span>

    <span class="hl kwa">let</span> fcount<span class="hl opt">() =</span>
        <span class="hl kwa">let mutable</span> flips <span class="hl opt">=</span> <span class="hl num">1</span>
        <span class="hl kwa">let mutable</span> first <span class="hl opt">=</span> p<span class="hl opt">.[</span><span class="hl num">0</span><span class="hl opt">]</span>

        <span class="hl kwa">if</span> p<span class="hl opt">.[</span>first<span class="hl opt">] &lt;&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
            <span class="hl kwa">for</span> i <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> n<span class="hl opt">-</span><span class="hl num">1</span> <span class="hl kwa">do</span> pp<span class="hl opt">.[</span>i<span class="hl opt">] &lt;-</span> p<span class="hl opt">.[</span>i<span class="hl opt">]</span>

            <span class="hl kwa">while</span> pp<span class="hl opt">.[</span>first<span class="hl opt">] &lt;&gt;</span> <span class="hl num">0</span> <span class="hl kwa">do</span>
                flips <span class="hl opt">&lt;-</span> flips <span class="hl opt">+</span> <span class="hl num">1</span>
                <span class="hl kwa">let mutable</span> lo <span class="hl opt">=</span> <span class="hl num">1</span>
                <span class="hl kwa">let mutable</span> hi <span class="hl opt">=</span> first <span class="hl opt">-</span> <span class="hl num">1</span>
                <span class="hl kwa">while</span> lo <span class="hl opt">&lt;</span> hi <span class="hl kwa">do</span>
                    <span class="hl kwa">let</span> t <span class="hl opt">=</span> pp<span class="hl opt">.[</span>lo<span class="hl opt">]</span>
                    pp<span class="hl opt">.[</span>lo<span class="hl opt">] &lt;-</span> pp<span class="hl opt">.[</span>hi<span class="hl opt">]</span>
                    pp<span class="hl opt">.[</span>hi<span class="hl opt">] &lt;-</span> t

                    lo <span class="hl opt">&lt;-</span> lo <span class="hl opt">+</span> <span class="hl num">1</span>
                    hi <span class="hl opt">&lt;-</span> hi <span class="hl opt">-</span> <span class="hl num">1</span>
                <span class="hl kwa">let</span> t <span class="hl opt">=</span> pp<span class="hl opt">.[</span>first<span class="hl opt">]</span>
                pp<span class="hl opt">.[</span>first<span class="hl opt">] &lt;-</span> first
                first <span class="hl opt">&lt;-</span> t
        flips

    <span class="hl kwa">member</span> x<span class="hl opt">.</span>runTask<span class="hl opt">(</span> task<span class="hl opt">,</span> chunk <span class="hl opt">) =</span> 
        <span class="hl kwa">let</span> lo <span class="hl opt">=</span> int64<span class="hl opt">(</span>task<span class="hl opt">) *</span> chunk
        <span class="hl kwa">let</span> hi <span class="hl opt">=</span> min <span class="hl kwd">F</span><span class="hl opt">.[</span>n<span class="hl opt">] (</span>lo<span class="hl opt">+</span>chunk<span class="hl opt">)</span>
        <span class="hl kwa">for</span> j <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> p<span class="hl opt">.</span><span class="hl kwd">Length</span> <span class="hl opt">-</span> <span class="hl num">1</span> <span class="hl kwa">do</span> p<span class="hl opt">.[</span>j<span class="hl opt">] &lt;-</span> j

        direct lo <span class="hl opt">(</span>p<span class="hl opt">.</span><span class="hl kwd">Length</span> <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">)</span>

        <span class="hl kwa">let</span> last <span class="hl opt">=</span> <span class="hl kwb">int</span><span class="hl opt">(</span>hi <span class="hl opt">-</span> lo <span class="hl opt">-</span> <span class="hl num">1L</span><span class="hl opt">)</span>
        <span class="hl kwa">for</span> j <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> last <span class="hl kwa">do</span>
            <span class="hl kwa">if</span> p<span class="hl opt">.[</span><span class="hl num">0</span><span class="hl opt">] &lt;&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
                <span class="hl kwa">let</span> f <span class="hl opt">=</span> fcount<span class="hl opt">()</span>
                flips <span class="hl opt">&lt;-</span> max flips f
                cksum <span class="hl opt">&lt;-</span> cksum <span class="hl opt">+</span> <span class="hl kwa">if</span> <span class="hl opt">(</span>int64<span class="hl opt">(</span>j<span class="hl opt">)+</span>lo<span class="hl opt">) %</span> <span class="hl num">2L</span> <span class="hl opt">=</span> <span class="hl num">0L</span> <span class="hl kwa">then</span> f <span class="hl kwa">else</span> <span class="hl opt">-</span>f
            <span class="hl kwa">if</span> j <span class="hl opt">&lt;</span> last <span class="hl kwa">then</span> permute<span class="hl opt">()</span>

        <span class="hl opt">(</span>cksum<span class="hl opt">,</span> flips<span class="hl opt">)</span>

<span class="hl kwa">let</span> _ <span class="hl opt">=</span> 
    <span class="hl kwa">let</span> nthreads <span class="hl opt">=</span> <span class="hl kwd">System</span><span class="hl opt">.</span><span class="hl kwd">Environment</span><span class="hl opt">.</span><span class="hl kwd">ProcessorCount</span>
    <span class="hl kwa">let</span> n <span class="hl opt">=</span> <span class="hl kwa">try</span> <span class="hl kwb">int</span><span class="hl opt">((</span><span class="hl kwd">System</span><span class="hl opt">.</span><span class="hl kwd">Environment</span><span class="hl opt">.</span><span class="hl kwd">GetCommandLineArgs</span><span class="hl opt">()).[</span><span class="hl num">1</span><span class="hl opt">])</span> <span class="hl kwa">with</span> _ <span class="hl opt">-&gt;</span> <span class="hl num">7</span>
    <span class="hl kwa">let</span> split <span class="hl opt">(</span>i<span class="hl opt">:</span>int64<span class="hl opt">) = (</span><span class="hl kwd">F</span><span class="hl opt">.[</span>n<span class="hl opt">] +</span> i <span class="hl opt">-</span> <span class="hl num">1L</span><span class="hl opt">) /</span> i
    <span class="hl kwa">let</span> chunk  <span class="hl opt">=</span> split <span class="hl opt">(</span>int64<span class="hl opt">(</span>nthreads <span class="hl opt">*</span> <span class="hl num">4</span><span class="hl opt">))</span>
    <span class="hl kwa">let</span> ntasks <span class="hl opt">=</span> <span class="hl kwb">int</span><span class="hl opt">(</span>split chunk<span class="hl opt">)</span>

    <span class="hl kwa">let</span> <span class="hl opt">(</span>c<span class="hl opt">,</span> fl<span class="hl opt">) =   [</span><span class="hl num">0</span><span class="hl opt">..</span>ntasks<span class="hl opt">]</span> |<span class="hl opt">&gt;</span> <span class="hl kwd">Seq</span><span class="hl opt">.</span>map <span class="hl opt">(</span><span class="hl kwa">fun</span> i <span class="hl opt">-&gt;</span> async <span class="hl opt">{</span>  <span class="hl kwa">let</span> thread <span class="hl opt">=</span> fannkuch<span class="hl opt">(</span>n<span class="hl opt">)</span>
                                                              return thread<span class="hl opt">.</span>runTask<span class="hl opt">(</span>i<span class="hl opt">,</span> chunk<span class="hl opt">) } )</span>
                                |<span class="hl opt">&gt;</span> <span class="hl kwd">Async</span><span class="hl opt">.</span><span class="hl kwd">Parallel</span> |<span class="hl opt">&gt;</span> <span class="hl kwd">Async</span><span class="hl opt">.</span><span class="hl kwd">RunSynchronously</span>
                                |<span class="hl opt">&gt;</span> <span class="hl kwd">Array</span><span class="hl opt">.</span>fold <span class="hl opt">(</span><span class="hl kwa">fun</span> <span class="hl opt">(</span>_cksum<span class="hl opt">,</span> _flips<span class="hl opt">) (</span>cksum<span class="hl opt">,</span> flips<span class="hl opt">) -&gt; (</span>_cksum <span class="hl opt">+</span> cksum<span class="hl opt">,</span> max _flips flips<span class="hl opt">)) (</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">0</span><span class="hl opt">)</span>

    <span class="hl kwd">Printf</span><span class="hl opt">.</span>printf <span class="hl str">&quot;%d</span><span class="hl esc">\n</span><span class="hl str">Pfannkuchen(%d) = %d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> c n fl
