<span class="hl slc">;;   The Computer Language Benchmarks Game</span>
<span class="hl slc">;;   http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">;;   contributed by Vsevolod Dyomkin</span>


<span class="hl opt">(</span><span class="hl kwa">defun</span> slice-and-dice <span class="hl opt">(</span><span class="hl kwa">gene</span> k ht<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">optimize</span> <span class="hl opt">(</span><span class="hl kwa">speed</span> <span class="hl num">3</span><span class="hl opt">) (</span><span class="hl kwa">safety</span> <span class="hl num">0</span><span class="hl opt">) (</span><span class="hl kwa">debug</span> <span class="hl num">0</span><span class="hl opt">))</span>
	   <span class="hl opt">(</span><span class="hl kwa">type</span> simple-base-string gene<span class="hl opt">)</span>
	   <span class="hl opt">(</span><span class="hl kwa">type</span> fixnum k<span class="hl opt">))</span>
  <span class="hl opt">(</span><span class="hl kwa">clrhash</span> ht<span class="hl opt">)</span>
<span class="hl slc">;  (setf ht (make-hash-table :size (expt 2 k)))</span>
  <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(=</span> k <span class="hl num">1</span><span class="hl opt">)</span>
      <span class="hl opt">(</span><span class="hl kwa">dotimes</span> <span class="hl opt">(</span><span class="hl kwa">i</span> <span class="hl opt">(</span><span class="hl kwa">the</span> fixnum <span class="hl opt">(</span><span class="hl kwa">-</span> <span class="hl opt">(</span><span class="hl kwa">length</span> gene<span class="hl opt">)</span> k<span class="hl opt">)))</span>
        <span class="hl opt">(</span><span class="hl kwa">incf</span> <span class="hl opt">(</span><span class="hl kwa">the</span> fixnum <span class="hl opt">(</span><span class="hl kwa">gethash</span> <span class="hl opt">(</span><span class="hl kwa">schar</span> gene i<span class="hl opt">)</span> ht <span class="hl num">0</span><span class="hl opt">))))</span>
      <span class="hl opt">(</span><span class="hl kwa">loop</span> for i from <span class="hl num">0</span> to <span class="hl opt">(</span><span class="hl kwa">the</span> fixnum <span class="hl opt">(</span><span class="hl kwa">-</span> <span class="hl opt">(</span><span class="hl kwa">length</span> gene<span class="hl opt">)</span> k<span class="hl opt">))</span>
         with gene-num <span class="hl opt">=</span> <span class="hl num">0</span> and mask <span class="hl opt">= (</span><span class="hl kwa">1-</span> <span class="hl opt">(</span><span class="hl kwa">expt</span> <span class="hl num">4</span> k<span class="hl opt">))</span> do
           <span class="hl opt">(</span><span class="hl kwa">setf</span> gene-num <span class="hl opt">(</span><span class="hl kwa">logand</span> mask <span class="hl opt">(</span><span class="hl kwa">letter-to-num</span> gene i gene-num<span class="hl opt">)))</span>
           <span class="hl opt">(</span><span class="hl kwa">unless</span> <span class="hl opt">(&lt;</span> i <span class="hl opt">(</span><span class="hl kwa">the</span> fixnum <span class="hl opt">(</span><span class="hl kwa">1-</span> k<span class="hl opt">)))</span>
             <span class="hl opt">(</span><span class="hl kwa">incf</span> <span class="hl opt">(</span><span class="hl kwa">the</span> fixnum <span class="hl opt">(</span><span class="hl kwa">gethash</span> gene-num ht <span class="hl num">0</span><span class="hl opt">))))))</span>
  ht<span class="hl opt">)</span>

<span class="hl opt">(</span><span class="hl kwa">declaim</span> <span class="hl opt">(</span><span class="hl kwa">inline</span> letter-to-num<span class="hl opt">))</span>
<span class="hl opt">(</span><span class="hl kwa">defun</span> letter-to-num <span class="hl opt">(</span><span class="hl kwa">gene</span> i idx<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">optimize</span> <span class="hl opt">(</span><span class="hl kwa">speed</span> <span class="hl num">3</span><span class="hl opt">) (</span><span class="hl kwa">safety</span> <span class="hl num">0</span><span class="hl opt">) (</span><span class="hl kwa">debug</span> <span class="hl num">0</span><span class="hl opt">))</span>
           <span class="hl opt">(</span><span class="hl kwa">type</span> fixnum i<span class="hl opt">))</span>
  <span class="hl opt">(</span><span class="hl kwa">ecase</span> <span class="hl opt">(</span><span class="hl kwa">schar</span> gene i<span class="hl opt">)</span>
    <span class="hl opt">(#</span>\A <span class="hl opt">(</span><span class="hl kwa">ash</span> idx <span class="hl num">2</span><span class="hl opt">))</span>
    <span class="hl opt">(#</span>\C <span class="hl opt">(</span><span class="hl kwa">logxor</span> <span class="hl opt">(</span><span class="hl kwa">ash</span> idx <span class="hl num">2</span><span class="hl opt">)</span> <span class="hl num">1</span><span class="hl opt">))</span>
    <span class="hl opt">(#</span>\G <span class="hl opt">(</span><span class="hl kwa">logxor</span> <span class="hl opt">(</span><span class="hl kwa">ash</span> idx <span class="hl num">2</span><span class="hl opt">)</span> <span class="hl num">2</span><span class="hl opt">))</span>
    <span class="hl opt">(#</span>\T <span class="hl opt">(</span><span class="hl kwa">logxor</span> <span class="hl opt">(</span><span class="hl kwa">ash</span> idx <span class="hl num">2</span><span class="hl opt">)</span> <span class="hl num">3</span><span class="hl opt">))))</span>

<span class="hl opt">(</span><span class="hl kwa">declaim</span> <span class="hl opt">(</span><span class="hl kwa">inline</span> gene-to-num<span class="hl opt">))</span>
<span class="hl opt">(</span><span class="hl kwa">defun</span> gene-to-num <span class="hl opt">(</span><span class="hl kwa">gene</span><span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">((</span><span class="hl kwa">gene-num</span> <span class="hl num">0</span><span class="hl opt">))</span>
    <span class="hl opt">(</span><span class="hl kwa">dotimes</span> <span class="hl opt">(</span><span class="hl kwa">i</span> <span class="hl opt">(</span><span class="hl kwa">length</span> gene<span class="hl opt">))</span>
      <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">fixnum</span> i<span class="hl opt">))</span>
      <span class="hl opt">(</span><span class="hl kwa">setf</span> gene-num <span class="hl opt">(</span><span class="hl kwa">letter-to-num</span> gene i gene-num<span class="hl opt">)))</span>
    gene-num<span class="hl opt">))</span>

<span class="hl opt">(</span><span class="hl kwa">declaim</span> <span class="hl opt">(</span><span class="hl kwa">inline</span> num-to-gene<span class="hl opt">))</span>
<span class="hl opt">(</span><span class="hl kwa">defun</span> num-to-gene <span class="hl opt">(</span><span class="hl kwa">num</span> k<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">optimize</span> <span class="hl opt">(</span><span class="hl kwa">speed</span> <span class="hl num">3</span><span class="hl opt">) (</span><span class="hl kwa">safety</span> <span class="hl num">0</span><span class="hl opt">) (</span><span class="hl kwa">debug</span> <span class="hl num">0</span><span class="hl opt">))</span>
           <span class="hl opt">(</span><span class="hl kwa">type</span> fixnum num<span class="hl opt">)</span>
           <span class="hl opt">(</span><span class="hl kwa">type</span> fixnum k<span class="hl opt">))</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">((</span><span class="hl kwa">gene</span> <span class="hl opt">(</span><span class="hl kwa">make-array</span> k <span class="hl opt">:</span>element-type <span class="hl opt">'</span>base-char<span class="hl opt">))</span>
        <span class="hl opt">(</span><span class="hl kwa">acgt</span> <span class="hl opt">#(#</span>\A <span class="hl opt">#</span>\C <span class="hl opt">#</span>\G <span class="hl opt">#</span>\T<span class="hl opt">)))</span>
    <span class="hl opt">(</span><span class="hl kwa">dotimes</span> <span class="hl opt">(</span><span class="hl kwa">i</span> k<span class="hl opt">)</span>
      <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">((</span><span class="hl kwa">pos</span> <span class="hl opt">(*</span> i <span class="hl num">2</span><span class="hl opt">)))</span>
        <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> fixnum pos<span class="hl opt">))</span>
        <span class="hl opt">(</span><span class="hl kwa">setf</span> <span class="hl opt">(</span><span class="hl kwa">aref</span> gene <span class="hl opt">(</span><span class="hl kwa">-</span> k i <span class="hl num">1</span><span class="hl opt">))</span>
              <span class="hl opt">(</span><span class="hl kwa">aref</span> acgt <span class="hl opt">(+ (</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">logbitp</span> pos num<span class="hl opt">)</span> <span class="hl num">1 0</span><span class="hl opt">)</span>
                            <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">logbitp</span> <span class="hl opt">(</span><span class="hl kwa">1</span><span class="hl opt">+</span> pos<span class="hl opt">)</span> num<span class="hl opt">)</span> <span class="hl num">2 0</span><span class="hl opt">))))))</span>
    gene<span class="hl opt">))</span>

<span class="hl opt">(</span><span class="hl kwa">defun</span> discard-data-header <span class="hl opt">(</span><span class="hl kwa">stream</span><span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">loop</span> for line <span class="hl opt">= (</span><span class="hl kwa">read-line</span> stream nil nil<span class="hl opt">)</span>
	while <span class="hl opt">(</span><span class="hl kwa">and</span> line <span class="hl opt">(</span><span class="hl kwa">string</span><span class="hl opt">/=</span> <span class="hl str">&quot;&gt;THREE&quot;</span> line <span class="hl opt">:</span>end2 <span class="hl num">6</span><span class="hl opt">))))</span>

<span class="hl opt">(</span><span class="hl kwa">defun</span> read-data <span class="hl opt">(</span><span class="hl kwa">stream</span><span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">optimize</span> <span class="hl opt">(</span><span class="hl kwa">speed</span> <span class="hl num">3</span><span class="hl opt">) (</span><span class="hl kwa">safety</span> <span class="hl num">0</span><span class="hl opt">) (</span><span class="hl kwa">debug</span> <span class="hl num">0</span><span class="hl opt">)))</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">((</span><span class="hl kwa">data</span> <span class="hl opt">(</span><span class="hl kwa">make-array</span> <span class="hl num">0</span> <span class="hl opt">:</span>element-type <span class="hl opt">'</span>base-char <span class="hl opt">:</span>adjustable t <span class="hl opt">:</span>fill-pointer <span class="hl num">0</span><span class="hl opt">)))</span>
    <span class="hl opt">(</span><span class="hl kwa">do</span> <span class="hl opt">((</span><span class="hl kwa">line</span> <span class="hl opt">(</span><span class="hl kwa">read-line</span> stream nil <span class="hl opt">'</span>eof<span class="hl opt">) (</span><span class="hl kwa">read-line</span> stream nil <span class="hl opt">'</span>eof<span class="hl opt">)))</span>
        <span class="hl opt">((</span><span class="hl kwa">or</span> <span class="hl opt">(</span><span class="hl kwa">eq</span> line <span class="hl opt">'</span>eof<span class="hl opt">) (</span><span class="hl kwa">char</span><span class="hl opt">= (</span><span class="hl kwa">schar</span> line <span class="hl num">0</span><span class="hl opt">) #</span>\<span class="hl opt">&gt;)))</span>
      <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">not</span> <span class="hl opt">(</span><span class="hl kwa">char</span><span class="hl opt">= (</span><span class="hl kwa">schar</span> line <span class="hl num">0</span><span class="hl opt">) #</span>\<span class="hl slc">;))</span>
          <span class="hl opt">(</span><span class="hl kwa">dotimes</span> <span class="hl opt">(</span><span class="hl kwa">char-index</span> <span class="hl opt">(</span><span class="hl kwa">length</span> line<span class="hl opt">))</span>
            <span class="hl opt">(</span><span class="hl kwa">vector-push-extend</span> <span class="hl opt">(</span><span class="hl kwa">char-upcase</span> <span class="hl opt">(</span><span class="hl kwa">the</span> base-char <span class="hl opt">(</span><span class="hl kwa">schar</span> line char-index<span class="hl opt">)))</span> data<span class="hl opt">))))</span>
    <span class="hl opt">(</span><span class="hl kwa">coerce</span> data <span class="hl opt">'</span>simple-base-string<span class="hl opt">)))</span>

<span class="hl opt">(</span><span class="hl kwa">defun</span> print-precentages <span class="hl opt">(</span><span class="hl kwa">gene</span> k ht<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> simple-base-string gene<span class="hl opt">)</span>
	   <span class="hl opt">(</span><span class="hl kwa">type</span> fixnum k<span class="hl opt">))</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span><span class="hl opt">* ((</span><span class="hl kwa">gene-table</span> <span class="hl opt">(</span><span class="hl kwa">slice-and-dice</span> gene k ht<span class="hl opt">))</span>
	 sorted-frequencies
	 <span class="hl opt">(</span><span class="hl kwa">sum</span> <span class="hl num">0</span><span class="hl opt">))</span>
    <span class="hl opt">(</span><span class="hl kwa">maphash</span> <span class="hl opt">(</span><span class="hl kwa">lambda</span> <span class="hl opt">(</span><span class="hl kwa">key</span> v<span class="hl opt">)</span>
	       <span class="hl opt">(</span><span class="hl kwa">incf</span> sum v<span class="hl opt">)</span>
	       <span class="hl opt">(</span><span class="hl kwa">push</span> <span class="hl opt">(</span><span class="hl kwa">cons</span> key v<span class="hl opt">)</span>
                     sorted-frequencies<span class="hl opt">))</span>
	     gene-table<span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl kwa">setf</span> sorted-frequencies 
	  <span class="hl opt">(</span><span class="hl kwa">sort</span> sorted-frequencies
		<span class="hl opt">(</span><span class="hl kwa">lambda</span> <span class="hl opt">(</span><span class="hl kwa">v1</span> v2<span class="hl opt">)</span>
                  <span class="hl opt">(</span><span class="hl kwa">cond</span> <span class="hl opt">((&gt; (</span><span class="hl kwa">cdr</span> v1<span class="hl opt">) (</span><span class="hl kwa">cdr</span> v2<span class="hl opt">))</span> t<span class="hl opt">)</span>
                        <span class="hl opt">((&lt; (</span><span class="hl kwa">cdr</span> v1<span class="hl opt">) (</span><span class="hl kwa">cdr</span> v2<span class="hl opt">))</span> nil<span class="hl opt">)</span>
                        <span class="hl opt">(</span><span class="hl kwa">t</span> <span class="hl opt">(&lt; (</span><span class="hl kwa">car</span> v1<span class="hl opt">) (</span><span class="hl kwa">car</span> v2<span class="hl opt">)))))))</span>
    <span class="hl opt">(</span><span class="hl kwa">dolist</span> <span class="hl opt">(</span><span class="hl kwa">entry</span> sorted-frequencies<span class="hl opt">)</span>
      <span class="hl opt">(</span><span class="hl kwa">format</span> t <span class="hl str">&quot;~a ~,3F~%&quot;</span>
	      <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(=</span> k <span class="hl num">1</span><span class="hl opt">) (</span><span class="hl kwa">car</span> entry<span class="hl opt">)</span>
                  <span class="hl opt">(</span><span class="hl kwa">num-to-gene</span> <span class="hl opt">(</span><span class="hl kwa">car</span> entry<span class="hl opt">)</span> k<span class="hl opt">))</span>
	      <span class="hl opt">(* (/ (</span><span class="hl kwa">cdr</span> entry<span class="hl opt">) (</span><span class="hl kwa">float</span> sum<span class="hl opt">))</span> <span class="hl num">100.0</span><span class="hl opt">)))</span>
    <span class="hl opt">(</span><span class="hl kwa">terpri</span><span class="hl opt">)))</span>

<span class="hl opt">(</span><span class="hl kwa">defun</span> print-occurence <span class="hl opt">(</span><span class="hl kwa">slice</span> gene k ht<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">((</span><span class="hl kwa">gene-table</span> <span class="hl opt">(</span><span class="hl kwa">slice-and-dice</span> gene k ht<span class="hl opt">)))</span>
    <span class="hl opt">(</span><span class="hl kwa">format</span> t <span class="hl str">&quot;~A~C~A~%&quot;</span>
            <span class="hl opt">(</span><span class="hl kwa">gethash</span> <span class="hl opt">(</span><span class="hl kwa">gene-to-num</span> slice<span class="hl opt">)</span> gene-table <span class="hl num">0</span><span class="hl opt">)</span>
            <span class="hl opt">#</span>\Tab
            slice<span class="hl opt">)))</span>

<span class="hl opt">(</span><span class="hl kwa">defun</span> main <span class="hl opt">()</span>
  <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">optimize</span> <span class="hl opt">(</span><span class="hl kwa">speed</span> <span class="hl num">0</span><span class="hl opt">) (</span><span class="hl kwa">safety</span> <span class="hl num">1</span><span class="hl opt">)))</span>
  <span class="hl opt">(</span><span class="hl kwa">discard-data-header</span> <span class="hl opt">*</span>standard-input<span class="hl opt">*)</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">((</span><span class="hl kwa">gene</span> <span class="hl opt">(</span><span class="hl kwa">read-data</span> <span class="hl opt">*</span>standard-input<span class="hl opt">*))</span>
        <span class="hl opt">(</span><span class="hl kwa">ht</span> <span class="hl opt">(</span><span class="hl kwa">make-hash-table</span> <span class="hl opt">:</span>rehash-size <span class="hl num">5.0</span><span class="hl opt">)))</span>
    <span class="hl opt">(</span><span class="hl kwa">print-precentages</span> gene <span class="hl num">1</span> ht<span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl kwa">print-precentages</span> gene <span class="hl num">2</span> ht<span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl kwa">print-occurence</span> <span class="hl str">&quot;GGT&quot;</span> gene <span class="hl num">3</span> ht<span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl kwa">print-occurence</span> <span class="hl str">&quot;GGTA&quot;</span> gene <span class="hl num">4</span> ht<span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl kwa">print-occurence</span> <span class="hl str">&quot;GGTATT&quot;</span> gene <span class="hl num">6</span> ht<span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl kwa">print-occurence</span> <span class="hl str">&quot;GGTATTTTAATT&quot;</span> gene <span class="hl num">12</span> ht<span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl kwa">print-occurence</span> <span class="hl str">&quot;GGTATTTTAATTTATAGT&quot;</span> gene <span class="hl num">18</span> ht<span class="hl opt">)))</span>


<span class="hl opt">(</span><span class="hl kwa">defun</span> test <span class="hl opt">()</span>
  <span class="hl opt">(</span><span class="hl kwa">with-open-file</span> <span class="hl opt">(*</span>standard-input<span class="hl opt">*</span> <span class="hl str">&quot;knucleotide-input.txt&quot;</span>
				    <span class="hl opt">:</span>direction <span class="hl opt">:</span>input<span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl kwa">with-open-file</span> <span class="hl opt">(*</span>standard-output<span class="hl opt">*</span> <span class="hl str">&quot;knucleotide-output.txt&quot;</span>
				       <span class="hl opt">:</span>direction <span class="hl opt">:</span>output
				       <span class="hl opt">:</span>if-does-not-exist <span class="hl opt">:</span>create
				       <span class="hl opt">:</span>if-exists <span class="hl opt">:</span>supersede<span class="hl opt">)</span>
      <span class="hl opt">(</span><span class="hl kwa">main</span><span class="hl opt">))))</span>
