<span class="hl slc">// The Computer Language Benchmarks Game</span>
<span class="hl slc">// http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">//</span>
<span class="hl slc">// Based on C# version by Isaac Gouy, The Anh Tran, Alan McGovern</span>
<span class="hl slc">// Contributed by Don Syme</span>

<span class="hl kwa">open</span> <span class="hl kwd">System</span>
<span class="hl kwa">open</span> <span class="hl kwd">System</span><span class="hl opt">.</span><span class="hl kwd">Threading</span>

<span class="hl kwa">type</span> <span class="hl kwd">BarrierHandle</span><span class="hl opt">(</span>threads<span class="hl opt">:</span><span class="hl kwb">int</span><span class="hl opt">) =</span> 
    <span class="hl kwa">let mutable</span> current <span class="hl opt">=</span> threads
    <span class="hl kwa">let mutable</span> handle <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">ManualResetEvent</span><span class="hl opt">(</span><span class="hl kwa">false</span><span class="hl opt">)</span>

    <span class="hl kwa">member</span> x<span class="hl opt">.</span><span class="hl kwd">WaitOne</span><span class="hl opt">() =</span>
        <span class="hl kwa">let</span> h <span class="hl opt">=</span> handle
        <span class="hl kwa">if</span> <span class="hl kwd">Interlocked</span><span class="hl opt">.</span><span class="hl kwd">Decrement</span><span class="hl opt">(&amp;</span>current<span class="hl opt">) &gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span> 
            h<span class="hl opt">.</span><span class="hl kwd">WaitOne</span><span class="hl opt">()</span> |<span class="hl opt">&gt;</span> ignore<span class="hl opt">;</span>
        <span class="hl kwa">else</span>
            handle <span class="hl opt">&lt;-</span> <span class="hl kwa">new</span> <span class="hl kwd">ManualResetEvent</span><span class="hl opt">(</span><span class="hl kwa">false</span><span class="hl opt">);</span>
            <span class="hl kwd">Interlocked</span><span class="hl opt">.</span><span class="hl kwd">Exchange</span><span class="hl opt">(&amp;</span>current<span class="hl opt">,</span> threads<span class="hl opt">)</span> |<span class="hl opt">&gt;</span> ignore<span class="hl opt">;</span>
            h<span class="hl opt">.</span><span class="hl kwd">Set</span><span class="hl opt">()</span> |<span class="hl opt">&gt;</span> ignore<span class="hl opt">;</span>
            h<span class="hl opt">.</span><span class="hl kwd">Close</span><span class="hl opt">();</span>

<span class="hl kwa">let</span> <span class="hl kwd">Approximate</span><span class="hl opt">(</span>u<span class="hl opt">:</span>double<span class="hl opt">[],</span> v<span class="hl opt">:</span>double<span class="hl opt">[],</span> tmp<span class="hl opt">:</span>double<span class="hl opt">[],</span> rbegin<span class="hl opt">,</span> rend<span class="hl opt">,</span> barrier<span class="hl opt">:</span> <span class="hl kwd">BarrierHandle</span><span class="hl opt">) =</span>

    <span class="hl kwa">let mutable</span> vBv <span class="hl opt">=</span> <span class="hl num">0.0</span>
    <span class="hl kwa">let mutable</span> vv <span class="hl opt">=</span> <span class="hl num">0.0</span>

    <span class="hl slc">// return element i,j of infinite matrix A </span>
    <span class="hl kwa">let</span> <span class="hl kwd">A</span> i j <span class="hl opt">=</span> <span class="hl num">1.0</span> <span class="hl opt">/</span> <span class="hl kwb">float</span><span class="hl opt">((</span>i <span class="hl opt">+</span> j<span class="hl opt">) * (</span>i <span class="hl opt">+</span> j <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">) /</span> <span class="hl num">2</span> <span class="hl opt">+</span> i <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">)</span>

    <span class="hl slc">// multiply vector v by matrix A </span>
    <span class="hl kwa">let</span> multiplyAv<span class="hl opt">(</span>v<span class="hl opt">:</span>double<span class="hl opt">[],</span> <span class="hl kwd">Av</span><span class="hl opt">:</span>double<span class="hl opt">[]) =</span>
        <span class="hl kwa">for</span> i <span class="hl opt">=</span> rbegin <span class="hl kwa">to</span> rend <span class="hl opt">-</span> <span class="hl num">1</span> <span class="hl kwa">do</span> 
            <span class="hl kwa">let mutable</span> sum <span class="hl opt">=</span> <span class="hl num">0.0</span><span class="hl opt">;</span>
            <span class="hl kwa">for</span> j <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> v<span class="hl opt">.</span><span class="hl kwd">Length</span> <span class="hl opt">-</span> <span class="hl num">1</span> <span class="hl kwa">do</span> 
                sum <span class="hl opt">&lt;-</span> sum <span class="hl opt">+</span> <span class="hl kwd">A</span> i j <span class="hl opt">*</span> v<span class="hl opt">.[</span>j<span class="hl opt">];</span>
            <span class="hl kwd">Av</span><span class="hl opt">.[</span>i<span class="hl opt">] &lt;-</span> sum

    <span class="hl slc">// multiply vector v by matrix A transposed </span>
    <span class="hl kwa">let</span> multiplyAtv<span class="hl opt">(</span>v<span class="hl opt">:</span>double<span class="hl opt">[],</span> atv<span class="hl opt">:</span>double<span class="hl opt">[]) =</span>
        <span class="hl kwa">for</span> i <span class="hl opt">=</span> rbegin <span class="hl kwa">to</span> rend <span class="hl opt">-</span> <span class="hl num">1</span> <span class="hl kwa">do</span>
            <span class="hl kwa">let mutable</span> sum <span class="hl opt">=</span> <span class="hl num">0.0</span>
            <span class="hl kwa">for</span> j <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> v<span class="hl opt">.</span><span class="hl kwd">Length</span> <span class="hl opt">-</span> <span class="hl num">1</span> <span class="hl kwa">do</span> 
                sum <span class="hl opt">&lt;-</span> sum <span class="hl opt">+</span> <span class="hl kwd">A</span> j i <span class="hl opt">*</span> v<span class="hl opt">.[</span>j<span class="hl opt">];</span>
            atv<span class="hl opt">.[</span>i<span class="hl opt">] &lt;-</span> sum<span class="hl opt">;</span>

    <span class="hl slc">// multiply vector v by matrix A and then by matrix A transposed </span>
    <span class="hl kwa">let</span> multiplyatAv<span class="hl opt">(</span>v<span class="hl opt">:</span>double<span class="hl opt">[],</span> tmp<span class="hl opt">:</span>double<span class="hl opt">[],</span> atAv<span class="hl opt">:</span>double<span class="hl opt">[]) =</span>
        multiplyAv<span class="hl opt">(</span>v<span class="hl opt">,</span> tmp<span class="hl opt">);</span>
        barrier<span class="hl opt">.</span><span class="hl kwd">WaitOne</span><span class="hl opt">();</span>

        multiplyAtv<span class="hl opt">(</span>tmp<span class="hl opt">,</span> atAv<span class="hl opt">);</span>
        barrier<span class="hl opt">.</span><span class="hl kwd">WaitOne</span><span class="hl opt">();</span>

    <span class="hl kwa">for</span> i <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> <span class="hl num">9</span> <span class="hl kwa">do</span> 
        multiplyatAv<span class="hl opt">(</span>u<span class="hl opt">,</span> tmp<span class="hl opt">,</span> v<span class="hl opt">);</span>
        multiplyatAv<span class="hl opt">(</span>v<span class="hl opt">,</span> tmp<span class="hl opt">,</span> u<span class="hl opt">);</span>

    <span class="hl kwa">for</span> i <span class="hl opt">=</span> rbegin <span class="hl kwa">to</span> rend <span class="hl opt">-</span> <span class="hl num">1</span> <span class="hl kwa">do</span>
        vBv <span class="hl opt">&lt;-</span> vBv <span class="hl opt">+</span> u<span class="hl opt">.[</span>i<span class="hl opt">] *</span> v<span class="hl opt">.[</span>i<span class="hl opt">];</span>
        vv <span class="hl opt">&lt;-</span> vv <span class="hl opt">+</span> v<span class="hl opt">.[</span>i<span class="hl opt">] *</span> v<span class="hl opt">.[</span>i<span class="hl opt">];</span>

    <span class="hl opt">(</span>vBv<span class="hl opt">,</span> vv<span class="hl opt">)</span>


<span class="hl kwa">let</span> <span class="hl kwd">RunGame</span> n <span class="hl opt">=</span> 
    <span class="hl slc">// create unit vector</span>
    <span class="hl kwa">let</span> u <span class="hl opt">=</span> <span class="hl kwd">Array</span><span class="hl opt">.</span>create n <span class="hl num">1.0</span>
    <span class="hl kwa">let</span> tmp <span class="hl opt">=</span> <span class="hl kwd">Array</span><span class="hl opt">.</span>zeroCreate n 
    <span class="hl kwa">let</span> v <span class="hl opt">=</span> <span class="hl kwd">Array</span><span class="hl opt">.</span>zeroCreate n 

    <span class="hl kwa">let</span> nthread <span class="hl opt">=</span> <span class="hl kwd">Environment</span><span class="hl opt">.</span><span class="hl kwd">ProcessorCount</span><span class="hl opt">;</span>

    <span class="hl kwa">let</span> barrier <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">BarrierHandle</span><span class="hl opt">(</span>nthread<span class="hl opt">);</span>
        <span class="hl slc">// create thread and hand out tasks</span>
    <span class="hl kwa">let</span> chunk <span class="hl opt">=</span> n <span class="hl opt">/</span> nthread<span class="hl opt">;</span>
        <span class="hl slc">// objects contain result of each thread</span>
    <span class="hl kwa">let</span> aps <span class="hl opt">=</span> 
        <span class="hl kwd">Async</span><span class="hl opt">.</span><span class="hl kwd">Parallel</span> 
          <span class="hl opt">[</span> <span class="hl kwa">for</span> i <span class="hl kwa">in</span> <span class="hl num">0</span> <span class="hl opt">..</span> nthread <span class="hl opt">-</span> <span class="hl num">1</span> <span class="hl kwa">do</span>
                <span class="hl kwa">let</span> r1 <span class="hl opt">=</span> i <span class="hl opt">*</span> chunk<span class="hl opt">;</span>
                <span class="hl kwa">let</span> r2 <span class="hl opt">=</span> <span class="hl kwa">if</span> <span class="hl opt">(</span>i <span class="hl opt">&lt; (</span>nthread <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">))</span> <span class="hl kwa">then</span> r1 <span class="hl opt">+</span> chunk <span class="hl kwa">else</span> n
                yield async <span class="hl opt">{</span> return <span class="hl kwd">Approximate</span><span class="hl opt">(</span>u<span class="hl opt">,</span> v<span class="hl opt">,</span> tmp<span class="hl opt">,</span> r1<span class="hl opt">,</span> r2<span class="hl opt">,</span> barrier<span class="hl opt">) } ]</span>
         |<span class="hl opt">&gt;</span> <span class="hl kwd">Async</span><span class="hl opt">.</span><span class="hl kwd">RunSynchronously</span>

    <span class="hl kwa">let</span> vBv <span class="hl opt">=</span> aps |<span class="hl opt">&gt;</span> <span class="hl kwd">Array</span><span class="hl opt">.</span>sumBy fst
    <span class="hl kwa">let</span> vv <span class="hl opt">=</span> aps |<span class="hl opt">&gt;</span> <span class="hl kwd">Array</span><span class="hl opt">.</span>sumBy snd

    <span class="hl kwd">Math</span><span class="hl opt">.</span><span class="hl kwd">Sqrt</span><span class="hl opt">(</span>vBv <span class="hl opt">/</span> vv<span class="hl opt">);</span>

<span class="hl opt">[&lt;</span><span class="hl kwd">EntryPoint</span><span class="hl opt">&gt;]</span>
<span class="hl kwa">let</span> main args <span class="hl opt">=</span>
    <span class="hl kwa">let</span> n <span class="hl opt">=</span> <span class="hl kwa">try</span> <span class="hl kwb">int</span> <span class="hl opt">&lt;</span>| args<span class="hl opt">.[</span><span class="hl num">0</span><span class="hl opt">]</span> <span class="hl kwa">with</span> _ <span class="hl opt">-&gt;</span> <span class="hl num">2500</span>

    <span class="hl kwd">System</span><span class="hl opt">.</span><span class="hl kwd">Console</span><span class="hl opt">.</span><span class="hl kwd">WriteLine</span><span class="hl opt">(</span><span class="hl str">&quot;{0:f9}&quot;</span><span class="hl opt">,</span> <span class="hl kwd">RunGame</span> n<span class="hl opt">);</span>
    <span class="hl num">0</span>

