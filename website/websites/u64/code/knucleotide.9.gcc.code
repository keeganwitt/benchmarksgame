<span class="hl slc">// The Computer Language Benchmarks Game</span>
<span class="hl slc">// http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">//</span>
<span class="hl slc">// Contributed by Jeremy Zerfas</span>

<span class="hl slc">// This controls the initial size used for the hash tables.</span>
<span class="hl ppc">#define INITIAL_HASH_TABLE_SIZE 64</span>
<span class="hl slc">// This controls the maximum length for each set of nucleotide sequence</span>
<span class="hl slc">// frequencies and each nucleotide sequence count output by this program.</span>
<span class="hl ppc">#define MAXIMUM_OUTPUT_LENGTH 4096</span>

<span class="hl ppc">#include &lt;stdint.h&gt;</span>
<span class="hl ppc">#include &lt;stdlib.h&gt;</span>
<span class="hl ppc">#include &lt;stdio.h&gt;</span>
<span class="hl ppc">#include &lt;string.h&gt;</span>

<span class="hl kwc">typedef</span> <span class="hl kwb">struct</span> ht_ht ht_ht<span class="hl opt">;</span>
<span class="hl kwc">typedef</span> <span class="hl kwb">struct</span> ht_node ht_node<span class="hl opt">;</span>

<span class="hl slc">// intptr_t should be the native integer type on most sane systems.</span>
<span class="hl kwc">typedef</span> <span class="hl kwb">intptr_t</span> intnative_t<span class="hl opt">;</span>


<span class="hl slc">// The hash table implementation provided by simple_hash3.h doesn't</span>
<span class="hl slc">// automatically grow hash tables (although the chained linked lists can grow</span>
<span class="hl slc">// infinitely long) and it also doesn't provide any function for growing a hash</span>
<span class="hl slc">// table so we create our own function for checking the hash table density and</span>
<span class="hl slc">// growing the hash table if necessary.</span>
<span class="hl kwb">static void</span> <span class="hl kwd">check_Hash_Table_Density_And_Grow_If_Necessary</span><span class="hl opt">(</span>
  ht_ht <span class="hl opt">**</span> <span class="hl kwb">const</span> hash_Table_To_Check<span class="hl opt">){</span>
   <span class="hl kwa">if</span><span class="hl opt">(</span><span class="hl kwd">ht_count</span><span class="hl opt">(*</span>hash_Table_To_Check<span class="hl opt">) &gt; (*</span>hash_Table_To_Check<span class="hl opt">)-&gt;</span>size<span class="hl opt">){</span>
      <span class="hl slc">// Create a new grown_Hash_Table which is at least four times the size</span>
      <span class="hl slc">// of the current hash_Table_To_Check.</span>
      ht_ht <span class="hl opt">*</span> grown_Hash_Table<span class="hl opt">=</span><span class="hl kwd">ht_create</span><span class="hl opt">(</span><span class="hl num">4</span> <span class="hl opt">* (*</span>hash_Table_To_Check<span class="hl opt">)-&gt;</span>size<span class="hl opt">);</span>

      <span class="hl slc">// Copy all the ht_nodes from the current hash_Table_To_Check to the new</span>
      <span class="hl slc">// grown_Hash_Table.</span>
      ht_node <span class="hl opt">*</span>HT_Node_Pointer<span class="hl opt">=</span><span class="hl kwd">ht_first</span><span class="hl opt">(*</span>hash_Table_To_Check<span class="hl opt">);</span>
      <span class="hl kwa">for</span><span class="hl opt">(</span>intnative_t i<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span> i<span class="hl opt">&lt;</span><span class="hl kwd">ht_count</span><span class="hl opt">(*</span>hash_Table_To_Check<span class="hl opt">);</span> i<span class="hl opt">++){</span>
         <span class="hl kwd">ht_find_new</span><span class="hl opt">(</span>grown_Hash_Table<span class="hl opt">,</span> HT_Node_Pointer<span class="hl opt">-&gt;</span>key<span class="hl opt">)-&gt;</span>val<span class="hl opt">=</span>
           HT_Node_Pointer<span class="hl opt">-&gt;</span>val<span class="hl opt">;</span>
         HT_Node_Pointer<span class="hl opt">=</span><span class="hl kwd">ht_next</span><span class="hl opt">(*</span>hash_Table_To_Check<span class="hl opt">);</span>
      <span class="hl opt">}</span>

      <span class="hl slc">// Destroy the old hash_Table_To_Check and update its pointer to point</span>
      <span class="hl slc">// to the new grown_Hash_Table.</span>
      <span class="hl kwd">ht_destroy</span><span class="hl opt">(*</span>hash_Table_To_Check<span class="hl opt">);</span>
      <span class="hl opt">*</span>hash_Table_To_Check<span class="hl opt">=</span>grown_Hash_Table<span class="hl opt">;</span>
   <span class="hl opt">}</span>
<span class="hl opt">}</span>


<span class="hl slc">// Function to use when sorting ht_nodes with qsort() later. ht_nodes with</span>
<span class="hl slc">// larger values will come first and in cases of identical values then ht_nodes</span>
<span class="hl slc">// with smaller keys will come first.</span>
<span class="hl kwb">static int</span> <span class="hl kwd">HT_Node_Compare</span><span class="hl opt">(</span><span class="hl kwb">const void</span> <span class="hl opt">*</span> <span class="hl kwb">const</span> uncasted_Left_HT_Node<span class="hl opt">,</span>
  <span class="hl kwb">const void</span> <span class="hl opt">*</span> <span class="hl kwb">const</span> uncasted_Right_HT_Node<span class="hl opt">){</span>
   <span class="hl kwb">const</span> ht_node <span class="hl opt">*</span> left_HT_Node<span class="hl opt">=</span>uncasted_Left_HT_Node<span class="hl opt">,</span>
     <span class="hl opt">*</span> right_HT_Node<span class="hl opt">=</span>uncasted_Right_HT_Node<span class="hl opt">;</span>

   <span class="hl slc">// Sort based on ht_node values.</span>
   <span class="hl kwa">if</span><span class="hl opt">(</span>left_HT_Node<span class="hl opt">-&gt;</span>val <span class="hl opt">&lt;</span> right_HT_Node<span class="hl opt">-&gt;</span>val<span class="hl opt">)</span> <span class="hl kwa">return</span> <span class="hl num">1</span><span class="hl opt">;</span>
   <span class="hl kwa">if</span><span class="hl opt">(</span>left_HT_Node<span class="hl opt">-&gt;</span>val <span class="hl opt">&gt;</span> right_HT_Node<span class="hl opt">-&gt;</span>val<span class="hl opt">)</span> <span class="hl kwa">return</span> <span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">;</span>

   <span class="hl slc">// If we got here then both items have the same value so then sort based on</span>
   <span class="hl slc">// key.</span>
   <span class="hl kwa">if</span><span class="hl opt">(</span>left_HT_Node<span class="hl opt">-&gt;</span>key <span class="hl opt">&gt;</span> right_HT_Node<span class="hl opt">-&gt;</span>key<span class="hl opt">)</span>
      <span class="hl kwa">return</span> <span class="hl num">1</span><span class="hl opt">;</span>
   <span class="hl kwa">else</span>
      <span class="hl kwa">return</span> <span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">;</span>
<span class="hl opt">}</span>


<span class="hl slc">// Macro to convert a nucleotide character to a code. Note that upper and lower</span>
<span class="hl slc">// case ASCII letters only differ in the fifth bit from the right and we only</span>
<span class="hl slc">// need the three least significant bits to differentiate the letters 'A', 'C',</span>
<span class="hl slc">// 'G', and 'T'. Spaces in this array/string will never be used as long as</span>
<span class="hl slc">// characters other than 'A', 'C', 'G', and 'T' aren't used.</span>
<span class="hl ppc">#define code_For_Nucleotide(nucleotide) (</span><span class="hl pps">&quot; \0 \1\3  \2&quot;</span><span class="hl ppc">[nucleotide &amp; 0x7])</span>


<span class="hl slc">// And one more macro to convert the codes back to nucleotide characters.</span>
<span class="hl ppc">#define nucleotide_For_Code(code) (</span><span class="hl pps">&quot;ACGT&quot;</span><span class="hl ppc">[code &amp; 0x3])</span>


<span class="hl slc">// Generate frequences for all nucleotide sequences in sequences that are of</span>
<span class="hl slc">// length sequence_Length and then save it to output.</span>
<span class="hl kwb">static void</span> <span class="hl kwd">generate_Frequencies_For_Sequences</span><span class="hl opt">(</span><span class="hl kwb">const char</span> <span class="hl opt">*</span> <span class="hl kwb">const</span> sequences<span class="hl opt">,</span>
  <span class="hl kwb">const</span> intnative_t sequences_Length<span class="hl opt">,</span> intnative_t sequence_Length<span class="hl opt">,</span>
  <span class="hl kwb">char</span> <span class="hl opt">*</span> <span class="hl kwb">const</span> output<span class="hl opt">){</span>
   ht_ht <span class="hl opt">*</span> hash_Table<span class="hl opt">=</span><span class="hl kwd">ht_create</span><span class="hl opt">(</span>INITIAL_HASH_TABLE_SIZE<span class="hl opt">);</span>

   <span class="hl slc">// Add all the sequences of sequence_Length to hash_Table.</span>
   <span class="hl kwb">uint64_t</span> key<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span>
   <span class="hl kwa">for</span><span class="hl opt">(</span>intnative_t i<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span> i<span class="hl opt">&lt;</span>sequences_Length<span class="hl opt">;</span> i<span class="hl opt">++){</span>
      <span class="hl kwb">const uint64_t</span> mask<span class="hl opt">=((</span><span class="hl kwb">uint64_t</span><span class="hl opt">)</span><span class="hl num">1</span><span class="hl opt">&lt;&lt;</span><span class="hl num">2</span><span class="hl opt">*</span>sequence_Length<span class="hl opt">)-</span><span class="hl num">1</span><span class="hl opt">;</span>
      key<span class="hl opt">=(</span>key<span class="hl opt">&lt;&lt;</span><span class="hl num">2</span> <span class="hl opt">&amp;</span> mask<span class="hl opt">) |</span> sequences<span class="hl opt">[</span>i<span class="hl opt">];</span>
      <span class="hl kwa">if</span><span class="hl opt">(</span>i<span class="hl opt">&gt;=</span>sequence_Length<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">){</span>
         <span class="hl kwd">ht_find_new</span><span class="hl opt">(</span>hash_Table<span class="hl opt">,</span> key<span class="hl opt">)-&gt;</span>val<span class="hl opt">++;</span>
         <span class="hl kwd">check_Hash_Table_Density_And_Grow_If_Necessary</span><span class="hl opt">(&amp;</span>hash_Table<span class="hl opt">);</span>
      <span class="hl opt">}</span>
   <span class="hl opt">}</span>

   <span class="hl slc">// Create an array of ht_nodes from hash_Table.</span>
   intnative_t HT_Nodes_Array_Size<span class="hl opt">=</span>hash_Table<span class="hl opt">-&gt;</span>items<span class="hl opt">;</span>
   ht_node <span class="hl opt">*</span> HT_Nodes_Array<span class="hl opt">=</span><span class="hl kwd">malloc</span><span class="hl opt">(</span>HT_Nodes_Array_Size<span class="hl opt">*</span><span class="hl kwa">sizeof</span><span class="hl opt">(</span>ht_node<span class="hl opt">));</span>
   ht_node <span class="hl opt">*</span> HT_Node_Pointer<span class="hl opt">=</span><span class="hl kwd">ht_first</span><span class="hl opt">(</span>hash_Table<span class="hl opt">);</span>
   <span class="hl kwa">for</span><span class="hl opt">(</span>intnative_t i<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span> i<span class="hl opt">&lt;</span>HT_Nodes_Array_Size<span class="hl opt">;</span> i<span class="hl opt">++){</span>
      HT_Nodes_Array<span class="hl opt">[</span>i<span class="hl opt">]=*</span>HT_Node_Pointer<span class="hl opt">;</span>
      HT_Node_Pointer<span class="hl opt">=</span><span class="hl kwd">ht_next</span><span class="hl opt">(</span>hash_Table<span class="hl opt">);</span>
   <span class="hl opt">}</span>

   <span class="hl kwd">ht_destroy</span><span class="hl opt">(</span>hash_Table<span class="hl opt">);</span>

   <span class="hl slc">// Sort HT_Nodes_Array.</span>
   <span class="hl kwd">qsort</span><span class="hl opt">(</span>HT_Nodes_Array<span class="hl opt">,</span> HT_Nodes_Array_Size<span class="hl opt">,</span> <span class="hl kwa">sizeof</span><span class="hl opt">(</span>ht_node<span class="hl opt">),</span>
     <span class="hl opt">&amp;</span>HT_Node_Compare<span class="hl opt">);</span>

   <span class="hl slc">// Print the frequencies for each nucleotide sequence.</span>
   <span class="hl kwa">for</span><span class="hl opt">(</span>intnative_t output_Position<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">,</span> i<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span> i<span class="hl opt">&lt;</span>HT_Nodes_Array_Size<span class="hl opt">;</span> i<span class="hl opt">++){</span>
      <span class="hl kwb">char</span> nucleotide_Sequence<span class="hl opt">[</span>sequence_Length<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">];</span>
      <span class="hl kwa">for</span><span class="hl opt">(</span>intnative_t j<span class="hl opt">=</span>sequence_Length<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">;</span> j<span class="hl opt">&gt;-</span><span class="hl num">1</span><span class="hl opt">;</span> j<span class="hl opt">--){</span>
         nucleotide_Sequence<span class="hl opt">[</span>j<span class="hl opt">]=</span><span class="hl kwd">nucleotide_For_Code</span><span class="hl opt">(</span>HT_Nodes_Array<span class="hl opt">[</span>i<span class="hl opt">].</span>key<span class="hl opt">);</span>
         HT_Nodes_Array<span class="hl opt">[</span>i<span class="hl opt">].</span>key<span class="hl opt">&gt;&gt;=</span><span class="hl num">2</span><span class="hl opt">;</span>
      <span class="hl opt">}</span>
      nucleotide_Sequence<span class="hl opt">[</span>sequence_Length<span class="hl opt">]=</span><span class="hl str">'\0'</span><span class="hl opt">;</span>

      <span class="hl slc">// Output the frequency for nucleotide_Sequence to output.</span>
      output_Position<span class="hl opt">+=</span><span class="hl kwd">snprintf</span><span class="hl opt">(</span>output<span class="hl opt">+</span>output_Position<span class="hl opt">,</span>
        MAXIMUM_OUTPUT_LENGTH<span class="hl opt">-</span>output_Position<span class="hl opt">,</span> <span class="hl str">&quot;%s %.3f</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span>
        nucleotide_Sequence<span class="hl opt">,</span> <span class="hl num">100.0</span>f<span class="hl opt">*</span>HT_Nodes_Array<span class="hl opt">[</span>i<span class="hl opt">].</span>val<span class="hl opt">/</span>sequences_Length<span class="hl opt">);</span>
   <span class="hl opt">}</span>

   <span class="hl kwd">free</span><span class="hl opt">(</span>HT_Nodes_Array<span class="hl opt">);</span>
<span class="hl opt">}</span>


<span class="hl slc">// Generate a count for the number of times nucleotide_Sequence appears in</span>
<span class="hl slc">// sequences and then save it to output.</span>
<span class="hl kwb">static void</span> <span class="hl kwd">generate_Count_For_Sequence</span><span class="hl opt">(</span><span class="hl kwb">const char</span> <span class="hl opt">*</span> <span class="hl kwb">const</span> sequences<span class="hl opt">,</span>
  <span class="hl kwb">const</span> intnative_t sequences_Length<span class="hl opt">,</span> <span class="hl kwb">const char</span> <span class="hl opt">*</span> <span class="hl kwb">const</span> nucleotide_Sequence<span class="hl opt">,</span>
  <span class="hl kwb">char</span> <span class="hl opt">*</span> <span class="hl kwb">const</span> output<span class="hl opt">){</span>
   <span class="hl kwb">const</span> intnative_t nucleotide_Sequence_Length<span class="hl opt">=</span><span class="hl kwd">strlen</span><span class="hl opt">(</span>nucleotide_Sequence<span class="hl opt">);</span>

   ht_ht <span class="hl opt">*</span> hash_Table<span class="hl opt">=</span><span class="hl kwd">ht_create</span><span class="hl opt">(</span>INITIAL_HASH_TABLE_SIZE<span class="hl opt">);</span>

   <span class="hl kwb">uint64_t</span> key<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span>
   <span class="hl kwa">for</span><span class="hl opt">(</span>intnative_t i<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span> i<span class="hl opt">&lt;</span>sequences_Length<span class="hl opt">;</span> i<span class="hl opt">++){</span>
      <span class="hl kwb">const uint64_t</span> mask<span class="hl opt">=((</span><span class="hl kwb">uint64_t</span><span class="hl opt">)</span><span class="hl num">1</span><span class="hl opt">&lt;&lt;</span><span class="hl num">2</span><span class="hl opt">*</span>nucleotide_Sequence_Length<span class="hl opt">)-</span><span class="hl num">1</span><span class="hl opt">;</span>
      key<span class="hl opt">=(</span>key<span class="hl opt">&lt;&lt;</span><span class="hl num">2</span> <span class="hl opt">&amp;</span> mask<span class="hl opt">) |</span> sequences<span class="hl opt">[</span>i<span class="hl opt">];</span>
      <span class="hl kwa">if</span><span class="hl opt">(</span>i<span class="hl opt">&gt;=</span>nucleotide_Sequence_Length<span class="hl opt">){</span>
         <span class="hl kwd">ht_find_new</span><span class="hl opt">(</span>hash_Table<span class="hl opt">,</span> key<span class="hl opt">)-&gt;</span>val<span class="hl opt">++;</span>
         <span class="hl kwd">check_Hash_Table_Density_And_Grow_If_Necessary</span><span class="hl opt">(&amp;</span>hash_Table<span class="hl opt">);</span>
      <span class="hl opt">}</span>
   <span class="hl opt">}</span>

   <span class="hl slc">// Generate key for the sequence.</span>
   key<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span>
   <span class="hl kwa">for</span><span class="hl opt">(</span>intnative_t i<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span> i<span class="hl opt">&lt;</span>nucleotide_Sequence_Length<span class="hl opt">;</span> i<span class="hl opt">++)</span>
      key<span class="hl opt">=(</span>key<span class="hl opt">&lt;&lt;</span><span class="hl num">2</span><span class="hl opt">) |</span> <span class="hl kwd">code_For_Nucleotide</span><span class="hl opt">(</span>nucleotide_Sequence<span class="hl opt">[</span>i<span class="hl opt">]);</span>

   <span class="hl slc">// Output the count for nucleotide_Sequence to output.</span>
   intnative_t count<span class="hl opt">=</span><span class="hl kwd">ht_find</span><span class="hl opt">(</span>hash_Table<span class="hl opt">,</span> key<span class="hl opt">)-&gt;</span>val<span class="hl opt">;</span>
   <span class="hl kwd">snprintf</span><span class="hl opt">(</span>output<span class="hl opt">,</span> MAXIMUM_OUTPUT_LENGTH<span class="hl opt">,</span> <span class="hl str">&quot;%jd</span><span class="hl esc">\t</span><span class="hl str">%s&quot;</span><span class="hl opt">, (</span><span class="hl kwb">intmax_t</span><span class="hl opt">)</span>count<span class="hl opt">,</span>
     nucleotide_Sequence<span class="hl opt">);</span>

   <span class="hl kwd">ht_destroy</span><span class="hl opt">(</span>hash_Table<span class="hl opt">);</span>
<span class="hl opt">}</span>


<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(){</span>
   <span class="hl kwb">char</span> buffer<span class="hl opt">[</span><span class="hl num">4096</span><span class="hl opt">];</span>

   <span class="hl slc">// Find the start of the third nucleotide sequence.</span>
   <span class="hl kwa">while</span><span class="hl opt">(</span><span class="hl kwd">fgets</span><span class="hl opt">(</span>buffer<span class="hl opt">,</span> <span class="hl kwa">sizeof</span><span class="hl opt">(</span>buffer<span class="hl opt">),</span> stdin<span class="hl opt">) &amp;&amp;</span> <span class="hl kwd">memcmp</span><span class="hl opt">(</span><span class="hl str">&quot;&gt;THREE&quot;</span><span class="hl opt">,</span> buffer<span class="hl opt">,</span>
     <span class="hl kwa">sizeof</span><span class="hl opt">(</span><span class="hl str">&quot;&gt;THREE&quot;</span><span class="hl opt">)-</span><span class="hl num">1</span><span class="hl opt">));</span>

   <span class="hl slc">// Start with 1 MB of storage for reading in the nucleotide sequence and</span>
   <span class="hl slc">// grow exponentially.</span>
   intnative_t nucleotide_Sequence_Capacity<span class="hl opt">=</span><span class="hl num">1048576</span><span class="hl opt">;</span>
   intnative_t nucleotide_Sequence_Size<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span>
   <span class="hl kwb">char</span> <span class="hl opt">*</span> nucleotide_Sequence<span class="hl opt">=</span><span class="hl kwd">malloc</span><span class="hl opt">(</span>nucleotide_Sequence_Capacity<span class="hl opt">);</span>

   <span class="hl slc">// Start reading and encoding the third nucleotide sequence.</span>
   <span class="hl kwa">while</span><span class="hl opt">(</span><span class="hl kwd">fgets</span><span class="hl opt">(</span>buffer<span class="hl opt">,</span> <span class="hl kwa">sizeof</span><span class="hl opt">(</span>buffer<span class="hl opt">),</span> stdin<span class="hl opt">) &amp;&amp;</span> buffer<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">]!=</span><span class="hl str">'&gt;'</span><span class="hl opt">){</span>
      <span class="hl kwa">for</span><span class="hl opt">(</span>intnative_t i<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span> buffer<span class="hl opt">[</span>i<span class="hl opt">]!=</span><span class="hl str">'\0'</span><span class="hl opt">;</span> i<span class="hl opt">++){</span>
         <span class="hl kwa">if</span><span class="hl opt">(</span>buffer<span class="hl opt">[</span>i<span class="hl opt">]!=</span><span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl opt">)</span>
            nucleotide_Sequence<span class="hl opt">[</span>nucleotide_Sequence_Size<span class="hl opt">++]=</span>
              <span class="hl kwd">code_For_Nucleotide</span><span class="hl opt">(</span>buffer<span class="hl opt">[</span>i<span class="hl opt">]);</span>
      <span class="hl opt">}</span>

      <span class="hl slc">// Make sure we still have enough memory allocated for any potential</span>
      <span class="hl slc">// nucleotides in the next line.</span>
      <span class="hl kwa">if</span><span class="hl opt">(</span>nucleotide_Sequence_Capacity<span class="hl opt">-</span>nucleotide_Sequence_Size <span class="hl opt">&lt;</span>
        <span class="hl kwa">sizeof</span><span class="hl opt">(</span>buffer<span class="hl opt">)){</span>
         nucleotide_Sequence_Capacity<span class="hl opt">*=</span><span class="hl num">2</span><span class="hl opt">;</span>
         nucleotide_Sequence<span class="hl opt">=</span><span class="hl kwd">realloc</span><span class="hl opt">(</span>nucleotide_Sequence<span class="hl opt">,</span>
           nucleotide_Sequence_Capacity<span class="hl opt">);</span>
      <span class="hl opt">}</span>
   <span class="hl opt">}</span>

   <span class="hl slc">// Free up any leftover memory.</span>
   nucleotide_Sequence<span class="hl opt">=</span><span class="hl kwd">realloc</span><span class="hl opt">(</span>nucleotide_Sequence<span class="hl opt">,</span> nucleotide_Sequence_Size<span class="hl opt">);</span>

   <span class="hl kwb">char</span> output_Buffer<span class="hl opt">[</span><span class="hl num">7</span><span class="hl opt">][</span>MAXIMUM_OUTPUT_LENGTH<span class="hl opt">];</span>

   <span class="hl slc">// Do the following functions in parallel.</span>
   <span class="hl ppc">#pragma omp parallel sections</span>
   <span class="hl opt">{</span>
      <span class="hl ppc">#pragma omp section</span>
      <span class="hl opt">{</span> <span class="hl kwd">generate_Frequencies_For_Sequences</span><span class="hl opt">(</span>nucleotide_Sequence<span class="hl opt">,</span>
        nucleotide_Sequence_Size<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">,</span> output_Buffer<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">]); }</span>
      <span class="hl ppc">#pragma omp section</span>
      <span class="hl opt">{</span> <span class="hl kwd">generate_Frequencies_For_Sequences</span><span class="hl opt">(</span>nucleotide_Sequence<span class="hl opt">,</span>
        nucleotide_Sequence_Size<span class="hl opt">,</span> <span class="hl num">2</span><span class="hl opt">,</span> output_Buffer<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">]); }</span>

      <span class="hl ppc">#pragma omp section</span>
      <span class="hl opt">{</span> <span class="hl kwd">generate_Count_For_Sequence</span><span class="hl opt">(</span>nucleotide_Sequence<span class="hl opt">,</span>
        nucleotide_Sequence_Size<span class="hl opt">,</span> <span class="hl str">&quot;GGT&quot;</span><span class="hl opt">,</span> output_Buffer<span class="hl opt">[</span><span class="hl num">2</span><span class="hl opt">]); }</span>
      <span class="hl ppc">#pragma omp section</span>
      <span class="hl opt">{</span> <span class="hl kwd">generate_Count_For_Sequence</span><span class="hl opt">(</span>nucleotide_Sequence<span class="hl opt">,</span>
        nucleotide_Sequence_Size<span class="hl opt">,</span> <span class="hl str">&quot;GGTA&quot;</span><span class="hl opt">,</span> output_Buffer<span class="hl opt">[</span><span class="hl num">3</span><span class="hl opt">]); }</span>
      <span class="hl ppc">#pragma omp section</span>
      <span class="hl opt">{</span> <span class="hl kwd">generate_Count_For_Sequence</span><span class="hl opt">(</span>nucleotide_Sequence<span class="hl opt">,</span>
        nucleotide_Sequence_Size<span class="hl opt">,</span> <span class="hl str">&quot;GGTATT&quot;</span><span class="hl opt">,</span> output_Buffer<span class="hl opt">[</span><span class="hl num">4</span><span class="hl opt">]); }</span>
      <span class="hl ppc">#pragma omp section</span>
      <span class="hl opt">{</span> <span class="hl kwd">generate_Count_For_Sequence</span><span class="hl opt">(</span>nucleotide_Sequence<span class="hl opt">,</span>
        nucleotide_Sequence_Size<span class="hl opt">,</span> <span class="hl str">&quot;GGTATTTTAATT&quot;</span><span class="hl opt">,</span> output_Buffer<span class="hl opt">[</span><span class="hl num">5</span><span class="hl opt">]); }</span>
      <span class="hl ppc">#pragma omp section</span>
      <span class="hl opt">{</span> <span class="hl kwd">generate_Count_For_Sequence</span><span class="hl opt">(</span>nucleotide_Sequence<span class="hl opt">,</span>
        nucleotide_Sequence_Size<span class="hl opt">,</span> <span class="hl str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="hl opt">,</span> output_Buffer<span class="hl opt">[</span><span class="hl num">6</span><span class="hl opt">]); }</span>
   <span class="hl opt">}</span>

   <span class="hl kwa">for</span><span class="hl opt">(</span>intnative_t i<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span> i<span class="hl opt">&lt;</span><span class="hl num">7</span><span class="hl opt">;</span> <span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;%s</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> output_Buffer<span class="hl opt">[</span>i<span class="hl opt">++]));</span>

   <span class="hl kwd">free</span><span class="hl opt">(</span>nucleotide_Sequence<span class="hl opt">);</span>

   <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
