<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com">   transliterated from C++ (Ben St. John) and D (Michael Deardeuff) by Amir K aka Razii</span>
<span class="hl com">*/</span>


<span class="hl kwa">import</span> java<span class="hl sym">.</span>util<span class="hl sym">.*;</span>

<span class="hl kwa">public final class</span> meteor
<span class="hl sym">{</span>
    <span class="hl kwa">static final</span> <span class="hl kwb">int</span> X <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
    <span class="hl kwa">static final</span> <span class="hl kwb">int</span> Y <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">;</span>
    <span class="hl kwa">static final</span> <span class="hl kwb">int</span> N_DIM <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">;</span>

    <span class="hl kwa">static final</span> <span class="hl kwb">int</span> EVEN <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
    <span class="hl kwa">static final</span> <span class="hl kwb">int</span> ODD <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">;</span>
    <span class="hl kwa">static final</span> <span class="hl kwb">int</span> N_PARITY <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">;</span>

    <span class="hl kwa">static final</span> <span class="hl kwb">int</span> GOOD <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
    <span class="hl kwa">static final</span> <span class="hl kwb">int</span> BAD <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">;</span>
    <span class="hl kwa">static final</span> <span class="hl kwb">int</span> ALWAYS_BAD <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">;</span>

    <span class="hl kwa">static final</span> <span class="hl kwb">int</span> OPEN    <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
    <span class="hl kwa">static final</span> <span class="hl kwb">int</span> CLOSED  <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">;</span>
    <span class="hl kwa">static final</span> <span class="hl kwb">int</span> N_FIXED <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">;</span>

    <span class="hl kwa">static final</span> <span class="hl kwb">int</span> MAX_ISLAND_OFFSET <span class="hl sym">=</span> <span class="hl num">1024</span><span class="hl sym">;</span>
    <span class="hl kwa">static final</span> <span class="hl kwb">int</span> N_COL <span class="hl sym">=</span> <span class="hl num">5</span><span class="hl sym">;</span>
    <span class="hl kwa">static final</span> <span class="hl kwb">int</span> N_ROW <span class="hl sym">=</span> <span class="hl num">10</span><span class="hl sym">;</span>
    <span class="hl kwa">static final</span> <span class="hl kwb">int</span> N_CELL <span class="hl sym">=</span> N_COL <span class="hl sym">*</span> N_ROW<span class="hl sym">;</span>
    <span class="hl kwa">static final</span> <span class="hl kwb">int</span> N_PIECE_TYPE <span class="hl sym">=</span> <span class="hl num">10</span><span class="hl sym">;</span>
    <span class="hl kwa">static final</span> <span class="hl kwb">int</span> N_ORIENT <span class="hl sym">=</span> <span class="hl num">12</span><span class="hl sym">;</span>


<span class="hl slc">//-- Globals -------------------------</span>
    <span class="hl kwa">static</span> IslandInfo<span class="hl sym">[]</span> g_islandInfo <span class="hl sym">=</span> <span class="hl kwa">new</span> IslandInfo <span class="hl sym">[</span>MAX_ISLAND_OFFSET<span class="hl sym">];</span>
    <span class="hl kwa">static</span> <span class="hl kwb">int</span> g_nIslandInfo <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
    <span class="hl kwa">static</span> OkPieces<span class="hl sym">[][]</span> g_okPieces <span class="hl sym">=</span> <span class="hl kwa">new</span> OkPieces <span class="hl sym">[</span>N_ROW<span class="hl sym">][</span>N_COL<span class="hl sym">];</span>

    <span class="hl kwa">static final</span> <span class="hl kwb">int</span> g_firstRegion<span class="hl sym">[] = {</span>
        <span class="hl num">0x00</span><span class="hl sym">,</span> <span class="hl num">0x01</span><span class="hl sym">,</span> <span class="hl num">0x02</span><span class="hl sym">,</span> <span class="hl num">0x03</span><span class="hl sym">,</span>   <span class="hl num">0x04</span><span class="hl sym">,</span> <span class="hl num">0x01</span><span class="hl sym">,</span> <span class="hl num">0x06</span><span class="hl sym">,</span> <span class="hl num">0x07</span><span class="hl sym">,</span>
        <span class="hl num">0x08</span><span class="hl sym">,</span> <span class="hl num">0x01</span><span class="hl sym">,</span> <span class="hl num">0x02</span><span class="hl sym">,</span> <span class="hl num">0x03</span><span class="hl sym">,</span>   <span class="hl num">0x0c</span><span class="hl sym">,</span> <span class="hl num">0x01</span><span class="hl sym">,</span> <span class="hl num">0x0e</span><span class="hl sym">,</span> <span class="hl num">0x0f</span><span class="hl sym">,</span>

        <span class="hl num">0x10</span><span class="hl sym">,</span> <span class="hl num">0x01</span><span class="hl sym">,</span> <span class="hl num">0x02</span><span class="hl sym">,</span> <span class="hl num">0x03</span><span class="hl sym">,</span>   <span class="hl num">0x04</span><span class="hl sym">,</span> <span class="hl num">0x01</span><span class="hl sym">,</span> <span class="hl num">0x06</span><span class="hl sym">,</span> <span class="hl num">0x07</span><span class="hl sym">,</span>
        <span class="hl num">0x18</span><span class="hl sym">,</span> <span class="hl num">0x01</span><span class="hl sym">,</span> <span class="hl num">0x02</span><span class="hl sym">,</span> <span class="hl num">0x03</span><span class="hl sym">,</span>   <span class="hl num">0x1c</span><span class="hl sym">,</span> <span class="hl num">0x01</span><span class="hl sym">,</span> <span class="hl num">0x1e</span><span class="hl sym">,</span> <span class="hl num">0x1f</span>
    <span class="hl sym">};</span>

    <span class="hl kwa">static final</span> <span class="hl kwb">int</span> g_flip<span class="hl sym">[] = {</span>
        <span class="hl num">0x00</span><span class="hl sym">,</span> <span class="hl num">0x10</span><span class="hl sym">,</span> <span class="hl num">0x08</span><span class="hl sym">,</span> <span class="hl num">0x18</span><span class="hl sym">,</span> <span class="hl num">0x04</span><span class="hl sym">,</span> <span class="hl num">0x14</span><span class="hl sym">,</span> <span class="hl num">0x0c</span><span class="hl sym">,</span> <span class="hl num">0x1c</span><span class="hl sym">,</span>
        <span class="hl num">0x02</span><span class="hl sym">,</span> <span class="hl num">0x12</span><span class="hl sym">,</span> <span class="hl num">0x0a</span><span class="hl sym">,</span> <span class="hl num">0x1a</span><span class="hl sym">,</span> <span class="hl num">0x06</span><span class="hl sym">,</span> <span class="hl num">0x16</span><span class="hl sym">,</span> <span class="hl num">0x0e</span><span class="hl sym">,</span> <span class="hl num">0x1e</span><span class="hl sym">,</span>

        <span class="hl num">0x01</span><span class="hl sym">,</span> <span class="hl num">0x11</span><span class="hl sym">,</span> <span class="hl num">0x09</span><span class="hl sym">,</span> <span class="hl num">0x19</span><span class="hl sym">,</span> <span class="hl num">0x05</span><span class="hl sym">,</span> <span class="hl num">0x15</span><span class="hl sym">,</span> <span class="hl num">0x0d</span><span class="hl sym">,</span> <span class="hl num">0x1d</span><span class="hl sym">,</span>
        <span class="hl num">0x03</span><span class="hl sym">,</span> <span class="hl num">0x13</span><span class="hl sym">,</span> <span class="hl num">0x0b</span><span class="hl sym">,</span> <span class="hl num">0x1b</span><span class="hl sym">,</span> <span class="hl num">0x07</span><span class="hl sym">,</span> <span class="hl num">0x17</span><span class="hl sym">,</span> <span class="hl num">0x0f</span><span class="hl sym">,</span> <span class="hl num">0x1f</span><span class="hl sym">,</span>
    <span class="hl sym">};</span>

    <span class="hl kwa">static final</span> <span class="hl kwb">int</span><span class="hl sym">[]</span> s_firstOne <span class="hl sym">= {</span>
        <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span>   <span class="hl num">2</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span>
        <span class="hl num">3</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span>   <span class="hl num">2</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span>

        <span class="hl num">4</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span>   <span class="hl num">2</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span>
        <span class="hl num">3</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span>   <span class="hl num">2</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span>
    <span class="hl sym">};</span>

    <span class="hl kwa">static</span> <span class="hl kwb">int</span> <span class="hl kwd">getMask</span><span class="hl sym">(</span><span class="hl kwb">int</span> iPos<span class="hl sym">) {</span>
        <span class="hl kwa">return</span> <span class="hl sym">(</span><span class="hl num">1</span> <span class="hl sym">&lt;&lt; (</span>iPos<span class="hl sym">));</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">static</span> <span class="hl kwb">int</span> <span class="hl kwd">floor</span><span class="hl sym">(</span><span class="hl kwb">int</span> top<span class="hl sym">,</span> <span class="hl kwb">int</span> bot<span class="hl sym">) {</span>
        <span class="hl kwb">int</span> toZero <span class="hl sym">=</span> top <span class="hl sym">/</span> bot<span class="hl sym">;</span>
        <span class="hl slc">// negative numbers should be rounded down, not towards zero;</span>
        <span class="hl kwa">if</span> <span class="hl sym">((</span>toZero <span class="hl sym">*</span> bot <span class="hl sym">!=</span> top<span class="hl sym">) &amp;&amp; ((</span>top <span class="hl sym">&lt;</span> <span class="hl num">0</span><span class="hl sym">) != (</span>bot <span class="hl sym">&lt;=</span> <span class="hl num">0</span><span class="hl sym">)))</span>
            toZero<span class="hl sym">--;</span>

        <span class="hl kwa">return</span> toZero<span class="hl sym">;</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">static</span> <span class="hl kwb">int</span> <span class="hl kwd">getFirstOne</span><span class="hl sym">(</span><span class="hl kwb">int</span> v<span class="hl sym">) {</span>
        <span class="hl kwb">int</span> startPos <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
        <span class="hl kwa">if</span> <span class="hl sym">(</span>v <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">)</span>
            <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl sym">;</span>

        <span class="hl kwb">int</span> iPos <span class="hl sym">=</span> startPos<span class="hl sym">;</span>
        <span class="hl kwb">int</span> mask <span class="hl sym">=</span> <span class="hl num">0xff</span> <span class="hl sym">&lt;&lt;</span> startPos<span class="hl sym">;</span>
        <span class="hl kwa">while</span> <span class="hl sym">((</span>mask <span class="hl sym">&amp;</span> v<span class="hl sym">) ==</span> <span class="hl num">0</span><span class="hl sym">) {</span>
            mask <span class="hl sym">&lt;&lt;=</span> <span class="hl num">8</span><span class="hl sym">;</span>
            iPos <span class="hl sym">+=</span> <span class="hl num">8</span><span class="hl sym">;</span>
        <span class="hl sym">}</span>
        <span class="hl kwb">int</span> result <span class="hl sym">= (</span>mask <span class="hl sym">&amp;</span> v<span class="hl sym">) &gt;&gt;</span> iPos<span class="hl sym">;</span>
        <span class="hl kwb">int</span> resultLow <span class="hl sym">=</span> result <span class="hl sym">&amp;</span> <span class="hl num">0x0f</span><span class="hl sym">;</span>
        <span class="hl kwa">if</span> <span class="hl sym">(</span>resultLow <span class="hl sym">!=</span> <span class="hl num">0</span><span class="hl sym">)</span>
            iPos <span class="hl sym">+=</span> s_firstOne<span class="hl sym">[</span>resultLow<span class="hl sym">];</span>
        <span class="hl kwa">else</span>
            iPos <span class="hl sym">+=</span> <span class="hl num">4</span> <span class="hl sym">+</span> s_firstOne<span class="hl sym">[</span>result <span class="hl sym">&gt;&gt;</span> <span class="hl num">4</span><span class="hl sym">];</span>

        <span class="hl kwa">return</span> iPos<span class="hl sym">;</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">static</span> <span class="hl kwb">int</span> <span class="hl kwd">countOnes</span><span class="hl sym">(</span><span class="hl kwb">int</span> v<span class="hl sym">) {</span>
        <span class="hl kwb">int</span> n <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
        <span class="hl kwa">while</span> <span class="hl sym">(</span>v <span class="hl sym">!=</span> <span class="hl num">0</span><span class="hl sym">) {</span>
            n<span class="hl sym">++;</span>
            v <span class="hl sym">=</span> v <span class="hl sym">&amp; (</span>v <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">);</span>
        <span class="hl sym">}</span>

        <span class="hl kwa">return</span> n<span class="hl sym">;</span>
    <span class="hl sym">}</span>


    <span class="hl kwa">static</span> <span class="hl kwb">int</span> <span class="hl kwd">flipTwoRows</span><span class="hl sym">(</span><span class="hl kwb">int</span> bits<span class="hl sym">) {</span>
        <span class="hl kwb">int</span> flipped <span class="hl sym">=</span> g_flip<span class="hl sym">[</span>bits <span class="hl sym">&gt;&gt;</span> N_COL<span class="hl sym">] &lt;&lt;</span> N_COL<span class="hl sym">;</span>
        <span class="hl kwa">return</span> <span class="hl sym">(</span>flipped <span class="hl sym">|</span> g_flip<span class="hl sym">[</span>bits <span class="hl sym">&amp;</span> Board<span class="hl sym">.</span>TOP_ROW<span class="hl sym">]);</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">static</span> <span class="hl kwb">void</span> <span class="hl kwd">markBad</span><span class="hl sym">(</span>IslandInfo info<span class="hl sym">,</span> <span class="hl kwb">int</span> mask<span class="hl sym">,</span> <span class="hl kwb">int</span> eo<span class="hl sym">,</span> <span class="hl kwb">boolean</span> always<span class="hl sym">) {</span>
        info<span class="hl sym">.</span>hasBad<span class="hl sym">[</span>eo<span class="hl sym">][</span>OPEN<span class="hl sym">] |=</span> mask<span class="hl sym">;</span>
        info<span class="hl sym">.</span>hasBad<span class="hl sym">[</span>eo<span class="hl sym">][</span>CLOSED<span class="hl sym">] |=</span> mask<span class="hl sym">;</span>

        <span class="hl kwa">if</span> <span class="hl sym">(</span>always<span class="hl sym">)</span>
            info<span class="hl sym">.</span>alwaysBad<span class="hl sym">[</span>eo<span class="hl sym">] |=</span> mask<span class="hl sym">;</span>
    <span class="hl sym">}</span>

    <span class="hl kwa">static</span> <span class="hl kwb">void</span> <span class="hl kwd">initGlobals</span><span class="hl sym">() {</span>
        <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> MAX_ISLAND_OFFSET<span class="hl sym">;</span> i<span class="hl sym">++)</span>
        <span class="hl sym">{</span>
            g_islandInfo<span class="hl sym">[</span>i<span class="hl sym">] =</span> <span class="hl kwa">new</span> <span class="hl kwd">IslandInfo</span><span class="hl sym">();</span>
        <span class="hl sym">}</span>

        <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> N_ROW<span class="hl sym">;</span> i<span class="hl sym">++)</span>
        <span class="hl sym">{</span>
            <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> j <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> j <span class="hl sym">&lt;</span> N_COL<span class="hl sym">;</span> j<span class="hl sym">++)</span>
                g_okPieces<span class="hl sym">[</span>i<span class="hl sym">][</span>j<span class="hl sym">] =</span> <span class="hl kwa">new</span> <span class="hl kwd">OkPieces</span><span class="hl sym">();</span>
        <span class="hl sym">}</span>
    <span class="hl sym">}</span>


<span class="hl slc">//-- Classes -------------------------;</span>

    <span class="hl kwa">static class</span> OkPieces <span class="hl sym">{</span>
        <span class="hl kwb">byte</span><span class="hl sym">[]</span> nPieces <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwb">byte</span><span class="hl sym">[</span>N_PIECE_TYPE<span class="hl sym">];</span>
        <span class="hl kwb">int</span><span class="hl sym">[][]</span> pieceVec <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwb">int</span><span class="hl sym">[</span>N_PIECE_TYPE<span class="hl sym">][</span>N_ORIENT<span class="hl sym">];</span>
    <span class="hl sym">}</span>


    <span class="hl kwa">static class</span> IslandInfo <span class="hl sym">{</span>
        <span class="hl kwb">int</span><span class="hl sym">[][]</span> hasBad  <span class="hl sym">=</span>  <span class="hl kwa">new</span> <span class="hl kwb">int</span><span class="hl sym">[</span>N_FIXED<span class="hl sym">][</span>N_PARITY<span class="hl sym">];</span>
        <span class="hl kwb">int</span><span class="hl sym">[][]</span> isKnown <span class="hl sym">=</span>  <span class="hl kwa">new</span> <span class="hl kwb">int</span><span class="hl sym">[</span>N_FIXED<span class="hl sym">][</span>N_PARITY<span class="hl sym">];</span>
        <span class="hl kwb">int</span><span class="hl sym">[]</span> alwaysBad <span class="hl sym">=</span>  <span class="hl kwa">new</span> <span class="hl kwb">int</span><span class="hl sym">[</span>N_PARITY<span class="hl sym">];</span>
    <span class="hl sym">}</span>


    <span class="hl kwa">static class</span> Soln <span class="hl sym">{</span>
        <span class="hl kwa">static final</span> <span class="hl kwb">int</span> NO_PIECE <span class="hl sym">= -</span><span class="hl num">1</span><span class="hl sym">;</span>

        <span class="hl kwb">boolean</span> <span class="hl kwd">isEmpty</span><span class="hl sym">() {</span>
            <span class="hl kwa">return</span> <span class="hl sym">(</span>m_nPiece <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">);</span>
        <span class="hl sym">}</span>
        <span class="hl kwb">void</span> <span class="hl kwd">popPiece</span><span class="hl sym">() {</span>
            m_nPiece<span class="hl sym">--;</span>
            m_synched <span class="hl sym">=</span> false<span class="hl sym">;</span>
        <span class="hl sym">}</span>
        <span class="hl kwb">void</span> <span class="hl kwd">pushPiece</span><span class="hl sym">(</span><span class="hl kwb">int</span> vec<span class="hl sym">,</span> <span class="hl kwb">int</span> iPiece<span class="hl sym">,</span> <span class="hl kwb">int</span> row<span class="hl sym">) {</span>
            SPiece p <span class="hl sym">=</span> m_pieces<span class="hl sym">[</span>m_nPiece<span class="hl sym">++];</span>
            p<span class="hl sym">.</span>vec <span class="hl sym">=</span> vec<span class="hl sym">;</span>
            p<span class="hl sym">.</span>iPiece <span class="hl sym">= (</span><span class="hl kwb">short</span><span class="hl sym">)</span> iPiece<span class="hl sym">;</span>
            p<span class="hl sym">.</span>row <span class="hl sym">= (</span><span class="hl kwb">short</span><span class="hl sym">)</span> row<span class="hl sym">;</span>
        <span class="hl sym">}</span>

        <span class="hl kwd">Soln</span><span class="hl sym">() {</span>
            m_synched <span class="hl sym">=</span> false<span class="hl sym">;</span>
            m_nPiece <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
            <span class="hl kwd">init</span><span class="hl sym">();</span>
        <span class="hl sym">}</span>

        <span class="hl kwa">class</span> SPiece <span class="hl sym">{</span>
            <span class="hl kwb">int</span> vec<span class="hl sym">;</span>
            <span class="hl kwb">short</span> iPiece<span class="hl sym">;</span>
            <span class="hl kwb">short</span> row<span class="hl sym">;</span>
            <span class="hl kwd">SPiece</span><span class="hl sym">() {}</span>
            <span class="hl kwd">SPiece</span><span class="hl sym">(</span><span class="hl kwb">int</span> avec<span class="hl sym">,</span> <span class="hl kwb">int</span> apiece<span class="hl sym">,</span> <span class="hl kwb">int</span> arow<span class="hl sym">) {</span>
                vec <span class="hl sym">=</span> avec<span class="hl sym">;</span>
                iPiece <span class="hl sym">= (</span><span class="hl kwb">short</span><span class="hl sym">)</span>apiece<span class="hl sym">;</span>
                row <span class="hl sym">= (</span><span class="hl kwb">short</span><span class="hl sym">)</span>arow<span class="hl sym">;</span>
            <span class="hl sym">}</span>
            <span class="hl kwd">SPiece</span><span class="hl sym">(</span>SPiece other<span class="hl sym">) {</span>
                vec <span class="hl sym">=</span> other<span class="hl sym">.</span>vec<span class="hl sym">;</span>
                iPiece <span class="hl sym">=</span> other<span class="hl sym">.</span>iPiece<span class="hl sym">;</span>
                row <span class="hl sym">=</span> other<span class="hl sym">.</span>row<span class="hl sym">;</span>
            <span class="hl sym">}</span>
        <span class="hl sym">}</span>

        SPiece<span class="hl sym">[]</span> m_pieces <span class="hl sym">=</span> <span class="hl kwa">new</span> SPiece <span class="hl sym">[</span>N_PIECE_TYPE<span class="hl sym">];</span>
        <span class="hl kwb">int</span> m_nPiece<span class="hl sym">;</span>
        <span class="hl kwb">byte</span><span class="hl sym">[][]</span> m_cells <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwb">byte</span> <span class="hl sym">[</span>N_ROW<span class="hl sym">][</span>N_COL<span class="hl sym">];</span>
        <span class="hl kwb">boolean</span> m_synched<span class="hl sym">;</span>

        <span class="hl kwb">void</span> <span class="hl kwd">init</span><span class="hl sym">() {</span>
            <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> N_PIECE_TYPE<span class="hl sym">;</span> i<span class="hl sym">++)</span>
                m_pieces<span class="hl sym">[</span>i<span class="hl sym">] =</span> <span class="hl kwa">new</span> <span class="hl kwd">SPiece</span><span class="hl sym">();</span>
        <span class="hl sym">}</span>
        <span class="hl kwd">Soln</span> <span class="hl sym">(</span><span class="hl kwb">int</span> fillVal<span class="hl sym">) {</span>
            <span class="hl kwd">init</span><span class="hl sym">();</span>
            m_nPiece <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
            <span class="hl kwd">fill</span><span class="hl sym">(</span>fillVal<span class="hl sym">);</span>
        <span class="hl sym">}</span>
        <span class="hl kwa">public</span> Soln <span class="hl kwd">clone2</span><span class="hl sym">() {</span>
            Soln s <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Soln</span><span class="hl sym">();</span>
            <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> m_pieces<span class="hl sym">.</span>length<span class="hl sym">;</span> i<span class="hl sym">++)</span>
                s<span class="hl sym">.</span>m_pieces<span class="hl sym">[</span>i<span class="hl sym">] =</span> <span class="hl kwa">new</span> <span class="hl kwd">SPiece</span><span class="hl sym">(</span>m_pieces<span class="hl sym">[</span>i<span class="hl sym">]);</span>

            s<span class="hl sym">.</span>m_nPiece <span class="hl sym">=</span> m_nPiece<span class="hl sym">;</span>
            <span class="hl slc">//System.arraycopy(m_cells, 0, s.m_cells, 0, N_CELL);</span>
            <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> N_ROW<span class="hl sym">;</span> i<span class="hl sym">++)</span>
            <span class="hl sym">{</span>
                <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> j <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> j <span class="hl sym">&lt;</span> N_COL<span class="hl sym">;</span> j <span class="hl sym">++)</span>
                <span class="hl sym">{</span>
                    s<span class="hl sym">.</span>m_cells<span class="hl sym">[</span>i<span class="hl sym">][</span>j<span class="hl sym">] =</span> m_cells<span class="hl sym">[</span>i<span class="hl sym">][</span>j<span class="hl sym">];</span>
                <span class="hl sym">}</span>
            <span class="hl sym">}</span>

            s<span class="hl sym">.</span>m_synched <span class="hl sym">=</span> m_synched<span class="hl sym">;</span>
            <span class="hl kwa">return</span> s<span class="hl sym">;</span>
        <span class="hl sym">}</span>

        <span class="hl kwb">void</span> <span class="hl kwd">fill</span><span class="hl sym">(</span><span class="hl kwb">int</span> val<span class="hl sym">) {</span>
            m_synched <span class="hl sym">=</span> false<span class="hl sym">;</span>
            <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> N_ROW<span class="hl sym">;</span> i<span class="hl sym">++)</span>
            <span class="hl sym">{</span>
                <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> j <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> j <span class="hl sym">&lt;</span> N_COL<span class="hl sym">;</span> j<span class="hl sym">++)</span>
                    m_cells<span class="hl sym">[</span>i<span class="hl sym">][</span>j<span class="hl sym">] = (</span><span class="hl kwb">byte</span><span class="hl sym">)</span> val<span class="hl sym">;</span>
            <span class="hl sym">}</span>
        <span class="hl sym">}</span>

        <span class="hl kwa">public</span> <span class="hl kwc">String</span> <span class="hl kwd">toString</span><span class="hl sym">()  {</span>
            <span class="hl kwc">StringBuffer</span> result <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">StringBuffer</span><span class="hl sym">(</span>N_CELL <span class="hl sym">*</span> <span class="hl num">2</span><span class="hl sym">);</span>

            <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> y <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> y <span class="hl sym">&lt;</span> N_ROW<span class="hl sym">;</span> y<span class="hl sym">++) {</span>
                <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> x <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> x <span class="hl sym">&lt;</span> N_COL<span class="hl sym">;</span> x<span class="hl sym">++) {</span>
                    <span class="hl kwb">int</span> val <span class="hl sym">=</span> m_cells<span class="hl sym">[</span>y<span class="hl sym">][</span>x<span class="hl sym">];</span>
                    <span class="hl slc">//if (val == NO_PIECE) result.append('.');</span>
                    <span class="hl sym">{</span>
                        result<span class="hl sym">.</span><span class="hl kwd">append</span><span class="hl sym">(</span>val<span class="hl sym">);</span>
                    <span class="hl sym">}</span>
                    result<span class="hl sym">.</span><span class="hl kwd">append</span><span class="hl sym">(</span><span class="hl str">' '</span><span class="hl sym">);</span>
                <span class="hl sym">}</span>
                result<span class="hl sym">.</span><span class="hl kwd">append</span><span class="hl sym">(</span><span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl sym">);</span>

                <span class="hl slc">// indent every second line</span>
                <span class="hl kwa">if</span> <span class="hl sym">(</span>y <span class="hl sym">%</span> <span class="hl num">2</span> <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">)</span>
                    result<span class="hl sym">.</span><span class="hl kwd">append</span><span class="hl sym">(</span><span class="hl str">&quot; &quot;</span><span class="hl sym">);</span>
            <span class="hl sym">}</span>
            <span class="hl kwa">return</span> result<span class="hl sym">.</span><span class="hl kwd">toString</span><span class="hl sym">();</span>
        <span class="hl sym">}</span>

        <span class="hl kwb">void</span> <span class="hl kwd">setCells</span><span class="hl sym">() {</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>m_synched<span class="hl sym">)</span>
                <span class="hl kwa">return</span><span class="hl sym">;</span>

            <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> iPiece <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> iPiece <span class="hl sym">&lt;</span> m_nPiece<span class="hl sym">;</span> iPiece<span class="hl sym">++) {</span>
                SPiece p <span class="hl sym">=</span> m_pieces<span class="hl sym">[</span>iPiece<span class="hl sym">];</span>
                <span class="hl kwb">int</span> vec <span class="hl sym">=</span> p<span class="hl sym">.</span>vec<span class="hl sym">;</span>
                <span class="hl kwb">byte</span> pID <span class="hl sym">= (</span><span class="hl kwb">byte</span><span class="hl sym">)</span> p<span class="hl sym">.</span>iPiece<span class="hl sym">;</span>
                <span class="hl kwb">int</span> rowOffset <span class="hl sym">=</span> p<span class="hl sym">.</span>row<span class="hl sym">;</span>

                <span class="hl kwb">int</span> nNewCells <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
                <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> y <span class="hl sym">=</span> rowOffset<span class="hl sym">;</span> y <span class="hl sym">&lt;</span> N_ROW<span class="hl sym">;</span> y<span class="hl sym">++) {</span>
                    <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> x <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> x <span class="hl sym">&lt;</span> N_COL<span class="hl sym">;</span> x<span class="hl sym">++) {</span>
                        <span class="hl kwa">if</span> <span class="hl sym">((</span>vec <span class="hl sym">&amp;</span> <span class="hl num">1</span><span class="hl sym">) !=</span> <span class="hl num">0</span><span class="hl sym">) {</span>
                            m_cells<span class="hl sym">[</span>y<span class="hl sym">][</span>x<span class="hl sym">] =</span> pID<span class="hl sym">;</span>
                            nNewCells<span class="hl sym">++;</span>
                        <span class="hl sym">}</span>
                        vec <span class="hl sym">&gt;&gt;=</span> <span class="hl num">1</span><span class="hl sym">;</span>
                    <span class="hl sym">}</span>
                    <span class="hl kwa">if</span> <span class="hl sym">(</span>nNewCells <span class="hl sym">==</span> Piece<span class="hl sym">.</span>N_ELEM<span class="hl sym">)</span>
                        <span class="hl kwa">break</span><span class="hl sym">;</span>
                <span class="hl sym">}</span>
            <span class="hl sym">}</span>
            m_synched <span class="hl sym">=</span> true<span class="hl sym">;</span>
        <span class="hl sym">}</span>

        <span class="hl kwb">boolean</span> <span class="hl kwd">lessThan</span><span class="hl sym">(</span>Soln r<span class="hl sym">) {</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>m_pieces<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">].</span>iPiece <span class="hl sym">!=</span> r<span class="hl sym">.</span>m_pieces<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">].</span>iPiece<span class="hl sym">) {</span>
                <span class="hl kwa">return</span> m_pieces<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">].</span>iPiece <span class="hl sym">&lt;</span> r<span class="hl sym">.</span>m_pieces<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">].</span>iPiece<span class="hl sym">;</span>
            <span class="hl sym">}</span>

            <span class="hl kwd">setCells</span><span class="hl sym">();</span>
            r<span class="hl sym">.</span><span class="hl kwd">setCells</span><span class="hl sym">();</span>

            <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> y <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> y <span class="hl sym">&lt;</span> N_ROW<span class="hl sym">;</span> y<span class="hl sym">++) {</span>
                <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> x <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> x <span class="hl sym">&lt;</span> N_COL<span class="hl sym">;</span> x<span class="hl sym">++) {</span>
                    <span class="hl kwb">int</span> lval <span class="hl sym">=</span> m_cells<span class="hl sym">[</span>y<span class="hl sym">][</span>x<span class="hl sym">];</span>
                    <span class="hl kwb">int</span> rval <span class="hl sym">=</span> r<span class="hl sym">.</span>m_cells<span class="hl sym">[</span>y<span class="hl sym">][</span>x<span class="hl sym">];</span>

                    <span class="hl kwa">if</span> <span class="hl sym">(</span>lval <span class="hl sym">!=</span> rval<span class="hl sym">)</span>
                        <span class="hl kwa">return</span> <span class="hl sym">(</span>lval <span class="hl sym">&lt;</span> rval<span class="hl sym">);</span>
                <span class="hl sym">}</span>
            <span class="hl sym">}</span>

            <span class="hl kwa">return</span> false<span class="hl sym">;</span>
        <span class="hl sym">}</span>

        <span class="hl kwb">void</span> <span class="hl kwd">spin</span><span class="hl sym">(</span>Soln spun<span class="hl sym">) {</span>
            <span class="hl kwd">setCells</span><span class="hl sym">();</span>

            <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> y <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> y <span class="hl sym">&lt;</span> N_ROW<span class="hl sym">;</span> y<span class="hl sym">++) {</span>
                <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> x <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> x <span class="hl sym">&lt;</span> N_COL<span class="hl sym">;</span> x<span class="hl sym">++) {</span>
                    <span class="hl kwb">byte</span> flipped <span class="hl sym">=</span> m_cells<span class="hl sym">[</span>N_ROW <span class="hl sym">-</span> y <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">][</span>N_COL <span class="hl sym">-</span> x <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">];</span>
                    spun<span class="hl sym">.</span>m_cells<span class="hl sym">[</span>y<span class="hl sym">][</span>x<span class="hl sym">] =</span> flipped<span class="hl sym">;</span>
                <span class="hl sym">}</span>
            <span class="hl sym">}</span>


            spun<span class="hl sym">.</span>m_pieces<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">].</span>iPiece <span class="hl sym">=</span> m_pieces<span class="hl sym">[</span>N_PIECE_TYPE <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">].</span>iPiece<span class="hl sym">;</span>
            spun<span class="hl sym">.</span>m_synched <span class="hl sym">=</span> true<span class="hl sym">;</span>
        <span class="hl sym">}</span>
    <span class="hl sym">}</span>


<span class="hl slc">//-----------------------</span>
    <span class="hl kwa">static class</span> Board <span class="hl sym">{</span>
        <span class="hl kwa">static final</span> <span class="hl kwb">int</span> L_EDGE_MASK <span class="hl sym">=</span> 
                                       <span class="hl sym">((</span><span class="hl num">1</span> <span class="hl sym">&lt;&lt;</span>  <span class="hl num">0</span><span class="hl sym">) | (</span><span class="hl num">1</span> <span class="hl sym">&lt;&lt;</span>  <span class="hl num">5</span><span class="hl sym">) | (</span><span class="hl num">1</span> <span class="hl sym">&lt;&lt;</span> <span class="hl num">10</span><span class="hl sym">) | (</span><span class="hl num">1</span> <span class="hl sym">&lt;&lt;</span> <span class="hl num">15</span><span class="hl sym">) |</span>
                                        <span class="hl sym">(</span><span class="hl num">1</span> <span class="hl sym">&lt;&lt;</span> <span class="hl num">20</span><span class="hl sym">) | (</span><span class="hl num">1</span> <span class="hl sym">&lt;&lt;</span> <span class="hl num">25</span><span class="hl sym">) | (</span><span class="hl num">1</span> <span class="hl sym">&lt;&lt;</span> <span class="hl num">30</span><span class="hl sym">));</span>
        <span class="hl kwa">static final</span> <span class="hl kwb">int</span> R_EDGE_MASK <span class="hl sym">=</span> L_EDGE_MASK <span class="hl sym">&lt;&lt;</span> <span class="hl num">4</span><span class="hl sym">;</span>
        <span class="hl kwa">static final</span> <span class="hl kwb">int</span> TOP_ROW <span class="hl sym">= (</span><span class="hl num">1</span> <span class="hl sym">&lt;&lt;</span> N_COL<span class="hl sym">) -</span> <span class="hl num">1</span><span class="hl sym">;</span>
        <span class="hl kwa">static final</span> <span class="hl kwb">int</span> ROW_0_MASK <span class="hl sym">=</span>
            TOP_ROW <span class="hl sym">| (</span>TOP_ROW <span class="hl sym">&lt;&lt;</span> <span class="hl num">10</span><span class="hl sym">) | (</span>TOP_ROW <span class="hl sym">&lt;&lt;</span> <span class="hl num">20</span><span class="hl sym">) | (</span>TOP_ROW <span class="hl sym">&lt;&lt;</span> <span class="hl num">30</span><span class="hl sym">);</span>
        <span class="hl kwa">static final</span> <span class="hl kwb">int</span> ROW_1_MASK <span class="hl sym">=</span> ROW_0_MASK <span class="hl sym">&lt;&lt;</span> <span class="hl num">5</span><span class="hl sym">;</span>
        <span class="hl kwa">static final</span> <span class="hl kwb">int</span> BOARD_MASK <span class="hl sym">= (</span><span class="hl num">1</span> <span class="hl sym">&lt;&lt;</span> <span class="hl num">30</span><span class="hl sym">) -</span> <span class="hl num">1</span><span class="hl sym">;</span>

        <span class="hl kwa">static</span> <span class="hl kwb">int</span> <span class="hl kwd">getIndex</span><span class="hl sym">(</span><span class="hl kwb">int</span> x<span class="hl sym">,</span> <span class="hl kwb">int</span> y<span class="hl sym">) {</span>
            <span class="hl kwa">return</span> y <span class="hl sym">*</span> N_COL <span class="hl sym">+</span> x<span class="hl sym">;</span>
        <span class="hl sym">}</span>

        Soln m_curSoln<span class="hl sym">;</span>
        Soln m_minSoln<span class="hl sym">;</span>
        Soln m_maxSoln<span class="hl sym">;</span>
        <span class="hl kwb">int</span> m_nSoln<span class="hl sym">;</span>

        <span class="hl kwd">Board</span> <span class="hl sym">() {</span>
            m_curSoln <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Soln</span><span class="hl sym">(</span>Soln<span class="hl sym">.</span>NO_PIECE<span class="hl sym">);</span>
            m_minSoln <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Soln</span><span class="hl sym">(</span>N_PIECE_TYPE<span class="hl sym">);</span>
            m_maxSoln <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Soln</span><span class="hl sym">(</span>Soln<span class="hl sym">.</span>NO_PIECE<span class="hl sym">);</span>
            m_nSoln <span class="hl sym">= (</span><span class="hl num">0</span><span class="hl sym">);</span>
        <span class="hl sym">}</span>

        <span class="hl kwa">static</span> <span class="hl kwb">boolean</span> <span class="hl kwd">badRegion</span><span class="hl sym">(</span><span class="hl kwb">int</span><span class="hl sym">[]</span> toFill<span class="hl sym">,</span> <span class="hl kwb">int</span> rNew<span class="hl sym">)</span>
        <span class="hl sym">{</span>
            <span class="hl slc">// grow empty region, until it doesn't change any more;</span>
            <span class="hl kwb">int</span> region<span class="hl sym">;</span>
            <span class="hl kwa">do</span> <span class="hl sym">{</span>
                region <span class="hl sym">=</span> rNew<span class="hl sym">;</span>

                <span class="hl slc">// simple grow up/down</span>
                rNew <span class="hl sym">|= (</span>region <span class="hl sym">&gt;&gt;</span> N_COL<span class="hl sym">);</span>
                rNew <span class="hl sym">|= (</span>region <span class="hl sym">&lt;&lt;</span> N_COL<span class="hl sym">);</span>

                <span class="hl slc">// grow right/left</span>
                rNew <span class="hl sym">|= (</span>region <span class="hl sym">&amp;</span> ~L_EDGE_MASK<span class="hl sym">) &gt;&gt;</span> <span class="hl num">1</span><span class="hl sym">;</span>
                rNew <span class="hl sym">|= (</span>region <span class="hl sym">&amp;</span> ~R_EDGE_MASK<span class="hl sym">) &lt;&lt;</span> <span class="hl num">1</span><span class="hl sym">;</span>

                <span class="hl slc">// tricky growth</span>
                <span class="hl kwb">int</span> evenRegion <span class="hl sym">=</span> region <span class="hl sym">&amp; (</span>ROW_0_MASK <span class="hl sym">&amp;</span> ~L_EDGE_MASK<span class="hl sym">);</span>
                rNew <span class="hl sym">|=</span> evenRegion <span class="hl sym">&gt;&gt; (</span>N_COL <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">);</span>
                rNew <span class="hl sym">|=</span> evenRegion <span class="hl sym">&lt;&lt; (</span>N_COL <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">);</span>
                <span class="hl kwb">int</span> oddRegion <span class="hl sym">=</span> region <span class="hl sym">&amp; (</span>ROW_1_MASK <span class="hl sym">&amp;</span> ~R_EDGE_MASK<span class="hl sym">);</span>
                rNew <span class="hl sym">|=</span> oddRegion <span class="hl sym">&gt;&gt; (</span>N_COL <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">);</span>
                rNew <span class="hl sym">|=</span> oddRegion <span class="hl sym">&lt;&lt; (</span>N_COL <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">);</span>

                <span class="hl slc">// clamp against existing pieces</span>
                rNew <span class="hl sym">&amp;=</span> toFill<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">];</span>
            <span class="hl sym">}</span>
            <span class="hl kwa">while</span> <span class="hl sym">((</span>rNew <span class="hl sym">!=</span> toFill<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]) &amp;&amp; (</span>rNew <span class="hl sym">!=</span> region<span class="hl sym">));</span>

            <span class="hl slc">// subtract empty region from board</span>
            toFill<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]</span> ^<span class="hl sym">=</span> rNew<span class="hl sym">;</span>

            <span class="hl kwb">int</span> nCells <span class="hl sym">=</span> <span class="hl kwd">countOnes</span><span class="hl sym">(</span>toFill<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]);</span>
            <span class="hl kwa">return</span> <span class="hl sym">(</span>nCells <span class="hl sym">%</span> Piece<span class="hl sym">.</span>N_ELEM <span class="hl sym">!=</span> <span class="hl num">0</span><span class="hl sym">);</span>
        <span class="hl sym">}</span>

        <span class="hl kwa">static</span> <span class="hl kwb">int</span> <span class="hl kwd">hasBadIslands</span><span class="hl sym">(</span><span class="hl kwb">int</span> boardVec<span class="hl sym">,</span> <span class="hl kwb">int</span> row<span class="hl sym">)</span>
        <span class="hl sym">{</span>
            <span class="hl slc">// skip over any filled rows</span>
            <span class="hl kwa">while</span> <span class="hl sym">((</span>boardVec <span class="hl sym">&amp;</span> TOP_ROW<span class="hl sym">) ==</span> TOP_ROW<span class="hl sym">) {</span>
                boardVec <span class="hl sym">&gt;&gt;=</span> N_COL<span class="hl sym">;</span>
                row<span class="hl sym">++;</span>
            <span class="hl sym">}</span>

            <span class="hl kwb">int</span> iInfo <span class="hl sym">=</span> boardVec <span class="hl sym">&amp; ((</span><span class="hl num">1</span> <span class="hl sym">&lt;&lt;</span> <span class="hl num">2</span> <span class="hl sym">*</span> N_COL<span class="hl sym">) -</span> <span class="hl num">1</span><span class="hl sym">);</span>
            IslandInfo info <span class="hl sym">=</span> g_islandInfo<span class="hl sym">[</span>iInfo<span class="hl sym">];</span>

            <span class="hl kwb">int</span> lastRow <span class="hl sym">= (</span>boardVec <span class="hl sym">&gt;&gt; (</span><span class="hl num">2</span> <span class="hl sym">*</span> N_COL<span class="hl sym">)) &amp;</span> TOP_ROW<span class="hl sym">;</span>
            <span class="hl kwb">int</span> mask <span class="hl sym">=</span> <span class="hl kwd">getMask</span><span class="hl sym">(</span>lastRow<span class="hl sym">);</span>
            <span class="hl kwb">int</span> isOdd <span class="hl sym">=</span> row <span class="hl sym">&amp;</span> <span class="hl num">1</span><span class="hl sym">;</span>

            <span class="hl kwa">if</span> <span class="hl sym">((</span>info<span class="hl sym">.</span>alwaysBad<span class="hl sym">[</span>isOdd<span class="hl sym">] &amp;</span> mask<span class="hl sym">) !=</span> <span class="hl num">0</span><span class="hl sym">)</span>
                <span class="hl kwa">return</span> BAD<span class="hl sym">;</span>

            <span class="hl kwa">if</span> <span class="hl sym">((</span>boardVec <span class="hl sym">&amp; (</span>TOP_ROW <span class="hl sym">&lt;&lt;</span> N_COL <span class="hl sym">*</span> <span class="hl num">3</span><span class="hl sym">)) !=</span> <span class="hl num">0</span><span class="hl sym">)</span>
                <span class="hl kwa">return</span> <span class="hl kwd">calcBadIslands</span><span class="hl sym">(</span>boardVec<span class="hl sym">,</span> row<span class="hl sym">);</span>

            <span class="hl kwb">int</span> isClosed <span class="hl sym">= (</span>row <span class="hl sym">&gt;</span> <span class="hl num">6</span><span class="hl sym">)</span> ? <span class="hl num">1</span> <span class="hl sym">:</span> <span class="hl num">0</span><span class="hl sym">;</span>

            <span class="hl kwa">if</span> <span class="hl sym">((</span>info<span class="hl sym">.</span>isKnown<span class="hl sym">[</span>isOdd<span class="hl sym">][</span>isClosed<span class="hl sym">] &amp;</span> mask<span class="hl sym">) !=</span> <span class="hl num">0</span><span class="hl sym">)</span>
                <span class="hl kwa">return</span> <span class="hl sym">(</span>info<span class="hl sym">.</span>hasBad<span class="hl sym">[</span>isOdd<span class="hl sym">][</span>isClosed<span class="hl sym">] &amp;</span> mask<span class="hl sym">);</span>

            <span class="hl kwa">if</span> <span class="hl sym">(</span>boardVec <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">)</span>
                <span class="hl kwa">return</span> GOOD<span class="hl sym">;</span>

            <span class="hl kwb">int</span> hasBad <span class="hl sym">=</span> <span class="hl kwd">calcBadIslands</span><span class="hl sym">(</span>boardVec<span class="hl sym">,</span> row<span class="hl sym">);</span>

            info<span class="hl sym">.</span>isKnown<span class="hl sym">[</span>isOdd<span class="hl sym">][</span>isClosed<span class="hl sym">] |=</span> mask<span class="hl sym">;</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>hasBad <span class="hl sym">!=</span> <span class="hl num">0</span><span class="hl sym">)</span>
                info<span class="hl sym">.</span>hasBad<span class="hl sym">[</span>isOdd<span class="hl sym">][</span>isClosed<span class="hl sym">] |=</span> mask<span class="hl sym">;</span>

            <span class="hl kwa">return</span> hasBad<span class="hl sym">;</span>
        <span class="hl sym">}</span>
        <span class="hl kwa">static</span> <span class="hl kwb">int</span> <span class="hl kwd">calcBadIslands</span><span class="hl sym">(</span><span class="hl kwb">int</span> boardVec<span class="hl sym">,</span> <span class="hl kwb">int</span> row<span class="hl sym">)</span>
        <span class="hl sym">{</span>
            <span class="hl kwb">int</span><span class="hl sym">[]</span> toFill <span class="hl sym">= {</span>~boardVec<span class="hl sym">};</span>
            <span class="hl kwa">if</span> <span class="hl sym">((</span>row <span class="hl sym">&amp;</span> <span class="hl num">1</span><span class="hl sym">) !=</span> <span class="hl num">0</span><span class="hl sym">) {</span>
                row<span class="hl sym">--;</span>
                toFill<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] &lt;&lt;=</span> N_COL<span class="hl sym">;</span>
            <span class="hl sym">}</span>

            <span class="hl kwb">int</span> boardMask <span class="hl sym">=</span> BOARD_MASK<span class="hl sym">;</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>row <span class="hl sym">&gt;</span> <span class="hl num">4</span><span class="hl sym">) {</span>
                <span class="hl kwb">int</span> boardMaskShift <span class="hl sym">= (</span>row <span class="hl sym">-</span> <span class="hl num">4</span><span class="hl sym">) *</span> N_COL<span class="hl sym">;</span>
                boardMask <span class="hl sym">&gt;&gt;=</span> boardMaskShift<span class="hl sym">;</span>
            <span class="hl sym">}</span>
            toFill<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] &amp;=</span> boardMask<span class="hl sym">;</span>

            <span class="hl slc">// a little pre-work to speed things up</span>
            <span class="hl kwb">int</span> bottom <span class="hl sym">= (</span>TOP_ROW <span class="hl sym">&lt;&lt; (</span><span class="hl num">5</span> <span class="hl sym">*</span> N_COL<span class="hl sym">));</span>
            <span class="hl kwb">boolean</span> filled <span class="hl sym">= ((</span>bottom <span class="hl sym">&amp;</span> toFill<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]) ==</span> bottom<span class="hl sym">);</span>
            <span class="hl kwa">while</span> <span class="hl sym">((</span>bottom <span class="hl sym">&amp;</span> toFill<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]) ==</span> bottom<span class="hl sym">) {</span>
                toFill<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]</span> ^<span class="hl sym">=</span> bottom<span class="hl sym">;</span>
                bottom <span class="hl sym">&gt;&gt;=</span> N_COL<span class="hl sym">;</span>
            <span class="hl sym">}</span>

            <span class="hl kwb">int</span> startRegion<span class="hl sym">;</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>filled <span class="hl sym">|| (</span>row <span class="hl sym">&lt;</span> <span class="hl num">4</span><span class="hl sym">))</span>
                startRegion <span class="hl sym">=</span> bottom <span class="hl sym">&amp;</span> toFill<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">];</span>
            <span class="hl kwa">else</span> <span class="hl sym">{</span>
                startRegion <span class="hl sym">=</span> g_firstRegion<span class="hl sym">[</span>toFill<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] &amp;</span> TOP_ROW<span class="hl sym">];</span>
                <span class="hl kwa">if</span> <span class="hl sym">(</span>startRegion <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">)  {</span>
                    startRegion <span class="hl sym">= (</span>toFill<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] &gt;&gt;</span> N_COL<span class="hl sym">) &amp;</span> TOP_ROW<span class="hl sym">;</span>
                    startRegion <span class="hl sym">=</span> g_firstRegion<span class="hl sym">[</span>startRegion<span class="hl sym">];</span>
                    startRegion <span class="hl sym">&lt;&lt;=</span> N_COL<span class="hl sym">;</span>
                <span class="hl sym">}</span>
                startRegion <span class="hl sym">|= (</span>startRegion <span class="hl sym">&lt;&lt;</span> N_COL<span class="hl sym">) &amp;</span> toFill<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">];</span>
            <span class="hl sym">}</span>

            <span class="hl kwa">while</span> <span class="hl sym">(</span>toFill<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] !=</span> <span class="hl num">0</span><span class="hl sym">)    {</span>
                <span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwd">badRegion</span><span class="hl sym">(</span>toFill<span class="hl sym">,</span> startRegion<span class="hl sym">))</span>
                    <span class="hl kwa">return</span> <span class="hl sym">((</span>toFill<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]!=</span><span class="hl num">0</span><span class="hl sym">)</span> ? ALWAYS_BAD <span class="hl sym">:</span> BAD<span class="hl sym">);</span>
                <span class="hl kwb">int</span> iPos <span class="hl sym">=</span> <span class="hl kwd">getFirstOne</span><span class="hl sym">(</span>toFill<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]);</span>
                startRegion <span class="hl sym">=</span> <span class="hl kwd">getMask</span><span class="hl sym">(</span>iPos<span class="hl sym">);</span>
            <span class="hl sym">}</span>

            <span class="hl kwa">return</span> GOOD<span class="hl sym">;</span>
        <span class="hl sym">}</span>
        <span class="hl kwa">static</span> <span class="hl kwb">void</span> <span class="hl kwd">calcAlwaysBad</span><span class="hl sym">() {</span>
            <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> iWord <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">;</span> iWord <span class="hl sym">&lt;</span> MAX_ISLAND_OFFSET<span class="hl sym">;</span> iWord<span class="hl sym">++) {</span>
                IslandInfo isleInfo <span class="hl sym">=</span> g_islandInfo<span class="hl sym">[</span>iWord<span class="hl sym">];</span>
                IslandInfo flipped <span class="hl sym">=</span> g_islandInfo<span class="hl sym">[</span><span class="hl kwd">flipTwoRows</span><span class="hl sym">(</span>iWord<span class="hl sym">)];</span>

                <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">,</span> mask <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> <span class="hl num">32</span><span class="hl sym">;</span> i<span class="hl sym">++,</span> mask <span class="hl sym">&lt;&lt;=</span> <span class="hl num">1</span><span class="hl sym">) {</span>
                    <span class="hl kwb">int</span> boardVec <span class="hl sym">= (</span>i <span class="hl sym">&lt;&lt; (</span><span class="hl num">2</span> <span class="hl sym">*</span> N_COL<span class="hl sym">)) |</span> iWord<span class="hl sym">;</span>
                    <span class="hl kwa">if</span> <span class="hl sym">((</span>isleInfo<span class="hl sym">.</span>isKnown<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">][</span>OPEN<span class="hl sym">] &amp;</span> mask<span class="hl sym">) !=</span> <span class="hl num">0</span><span class="hl sym">)</span>
                        <span class="hl kwa">continue</span><span class="hl sym">;</span>

                    <span class="hl kwb">int</span> hasBad <span class="hl sym">=</span> <span class="hl kwd">calcBadIslands</span><span class="hl sym">(</span>boardVec<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">);</span>
                    <span class="hl kwa">if</span> <span class="hl sym">(</span>hasBad <span class="hl sym">!=</span> GOOD<span class="hl sym">) {</span>
                        <span class="hl kwb">boolean</span> always <span class="hl sym">= (</span>hasBad<span class="hl sym">==</span>ALWAYS_BAD<span class="hl sym">);</span>
                        <span class="hl kwd">markBad</span><span class="hl sym">(</span>isleInfo<span class="hl sym">,</span> mask<span class="hl sym">,</span> EVEN<span class="hl sym">,</span> always<span class="hl sym">);</span>

                        <span class="hl kwb">int</span> flipMask <span class="hl sym">=</span> <span class="hl kwd">getMask</span><span class="hl sym">(</span>g_flip<span class="hl sym">[</span>i<span class="hl sym">]);</span>
                        <span class="hl kwd">markBad</span><span class="hl sym">(</span>flipped<span class="hl sym">,</span> flipMask<span class="hl sym">,</span> ODD<span class="hl sym">,</span> always<span class="hl sym">);</span>
                    <span class="hl sym">}</span>
                <span class="hl sym">}</span>
                flipped<span class="hl sym">.</span>isKnown<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">][</span>OPEN<span class="hl sym">] =  -</span><span class="hl num">1</span><span class="hl sym">;</span>
                isleInfo<span class="hl sym">.</span>isKnown<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">][</span>OPEN<span class="hl sym">] = -</span><span class="hl num">1</span><span class="hl sym">;</span>
            <span class="hl sym">}</span>
        <span class="hl sym">}</span>

        <span class="hl kwa">static</span> <span class="hl kwb">boolean</span> <span class="hl kwd">hasBadIslandsSingle</span><span class="hl sym">(</span><span class="hl kwb">int</span> boardVec<span class="hl sym">,</span> <span class="hl kwb">int</span> row<span class="hl sym">)</span>
        <span class="hl sym">{</span>
            <span class="hl kwb">int</span><span class="hl sym">[]</span> toFill <span class="hl sym">= {</span>~boardVec<span class="hl sym">};</span>
            <span class="hl kwb">boolean</span> isOdd <span class="hl sym">= ((</span>row <span class="hl sym">&amp;</span> <span class="hl num">1</span><span class="hl sym">) !=</span> <span class="hl num">0</span><span class="hl sym">);</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>isOdd<span class="hl sym">) {</span>
                row<span class="hl sym">--;</span>
                toFill<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] &lt;&lt;=</span> N_COL<span class="hl sym">;</span> <span class="hl slc">// shift to even aligned</span>
                toFill<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] |=</span> TOP_ROW<span class="hl sym">;</span>
            <span class="hl sym">}</span>

            <span class="hl kwb">int</span> startRegion <span class="hl sym">=</span> TOP_ROW<span class="hl sym">;</span>
            <span class="hl kwb">int</span> lastRow <span class="hl sym">=</span> TOP_ROW <span class="hl sym">&lt;&lt; (</span><span class="hl num">5</span> <span class="hl sym">*</span> N_COL<span class="hl sym">);</span>
            <span class="hl kwb">int</span> boardMask <span class="hl sym">=</span> BOARD_MASK<span class="hl sym">;</span> <span class="hl slc">// all but the first two bits</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>row <span class="hl sym">&gt;=</span> <span class="hl num">4</span><span class="hl sym">)</span>
                boardMask <span class="hl sym">&gt;&gt;= ((</span>row <span class="hl sym">-</span> <span class="hl num">4</span><span class="hl sym">) *</span> N_COL<span class="hl sym">);</span>
            <span class="hl kwa">else if</span> <span class="hl sym">(</span>isOdd <span class="hl sym">|| (</span>row <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">))</span>
                startRegion <span class="hl sym">=</span> lastRow<span class="hl sym">;</span>

            toFill<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] &amp;=</span> boardMask<span class="hl sym">;</span>
            startRegion <span class="hl sym">&amp;=</span> toFill<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">];</span>

            <span class="hl kwa">while</span> <span class="hl sym">(</span>toFill<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] !=</span> <span class="hl num">0</span><span class="hl sym">)    {</span>
                <span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwd">badRegion</span><span class="hl sym">(</span>toFill<span class="hl sym">,</span> startRegion<span class="hl sym">))</span>
                    <span class="hl kwa">return</span> true<span class="hl sym">;</span>
                <span class="hl kwb">int</span> iPos <span class="hl sym">=</span> <span class="hl kwd">getFirstOne</span><span class="hl sym">(</span>toFill<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]);</span>
                startRegion <span class="hl sym">=</span> <span class="hl kwd">getMask</span><span class="hl sym">(</span>iPos<span class="hl sym">);</span>
            <span class="hl sym">}</span>

            <span class="hl kwa">return</span> false<span class="hl sym">;</span>
        <span class="hl sym">}</span>

        <span class="hl kwb">void</span> <span class="hl kwd">genAllSolutions</span><span class="hl sym">(</span><span class="hl kwb">int</span> boardVec<span class="hl sym">,</span> <span class="hl kwb">int</span> placedPieces<span class="hl sym">,</span> <span class="hl kwb">int</span> row<span class="hl sym">)</span>
        <span class="hl sym">{</span>
            <span class="hl kwa">while</span> <span class="hl sym">((</span>boardVec <span class="hl sym">&amp;</span> TOP_ROW<span class="hl sym">) ==</span> TOP_ROW<span class="hl sym">) {</span>
                boardVec <span class="hl sym">&gt;&gt;=</span> N_COL<span class="hl sym">;</span>
                row<span class="hl sym">++;</span>
            <span class="hl sym">}</span>
            <span class="hl kwb">int</span> iNextFill <span class="hl sym">=</span> s_firstOne<span class="hl sym">[</span>~boardVec <span class="hl sym">&amp;</span> TOP_ROW<span class="hl sym">];</span>
            OkPieces allowed <span class="hl sym">=</span> g_okPieces<span class="hl sym">[</span>row<span class="hl sym">][</span>iNextFill<span class="hl sym">];</span>

            <span class="hl kwb">int</span> iPiece <span class="hl sym">=</span> <span class="hl kwd">getFirstOne</span><span class="hl sym">(</span>~placedPieces<span class="hl sym">);</span>
            <span class="hl kwb">int</span> pieceMask <span class="hl sym">=</span> <span class="hl kwd">getMask</span><span class="hl sym">(</span>iPiece<span class="hl sym">);</span>
            <span class="hl kwa">for</span> <span class="hl sym">(;</span> iPiece <span class="hl sym">&lt;</span> N_PIECE_TYPE<span class="hl sym">;</span> iPiece<span class="hl sym">++,</span> pieceMask <span class="hl sym">&lt;&lt;=</span> <span class="hl num">1</span><span class="hl sym">)</span>
            <span class="hl sym">{</span>
                <span class="hl kwa">if</span> <span class="hl sym">((</span>pieceMask <span class="hl sym">&amp;</span> placedPieces<span class="hl sym">) !=</span> <span class="hl num">0</span><span class="hl sym">)</span>
                    <span class="hl kwa">continue</span><span class="hl sym">;</span>

                placedPieces <span class="hl sym">|=</span> pieceMask<span class="hl sym">;</span>
                <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> iOrient <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> iOrient <span class="hl sym">&lt;</span> allowed<span class="hl sym">.</span>nPieces<span class="hl sym">[</span>iPiece<span class="hl sym">];</span> iOrient<span class="hl sym">++) {</span>
                    <span class="hl kwb">int</span> pieceVec <span class="hl sym">=</span> allowed<span class="hl sym">.</span>pieceVec<span class="hl sym">[</span>iPiece<span class="hl sym">][</span>iOrient<span class="hl sym">];</span>

                    <span class="hl kwa">if</span> <span class="hl sym">((</span>pieceVec <span class="hl sym">&amp;</span> boardVec<span class="hl sym">) !=</span> <span class="hl num">0</span><span class="hl sym">)</span>
                        <span class="hl kwa">continue</span><span class="hl sym">;</span>

                    boardVec <span class="hl sym">|=</span> pieceVec<span class="hl sym">;</span>

                    <span class="hl kwa">if</span> <span class="hl sym">((</span><span class="hl kwd">hasBadIslands</span><span class="hl sym">(</span>boardVec<span class="hl sym">,</span> row<span class="hl sym">)) !=</span> <span class="hl num">0</span><span class="hl sym">) {</span>
                        boardVec ^<span class="hl sym">=</span> pieceVec<span class="hl sym">;</span>
                        <span class="hl kwa">continue</span><span class="hl sym">;</span>
                    <span class="hl sym">}</span>

                    m_curSoln<span class="hl sym">.</span><span class="hl kwd">pushPiece</span><span class="hl sym">(</span>pieceVec<span class="hl sym">,</span> iPiece<span class="hl sym">,</span> row<span class="hl sym">);</span>

                    <span class="hl slc">// recur or record solution</span>
                    <span class="hl kwa">if</span> <span class="hl sym">(</span>placedPieces <span class="hl sym">!=</span> Piece<span class="hl sym">.</span>ALL_PIECE_MASK<span class="hl sym">)</span>
                        <span class="hl kwd">genAllSolutions</span><span class="hl sym">(</span>boardVec<span class="hl sym">,</span> placedPieces<span class="hl sym">,</span> row<span class="hl sym">);</span>
                    <span class="hl kwa">else</span>
                        <span class="hl kwd">recordSolution</span><span class="hl sym">(</span>m_curSoln<span class="hl sym">);</span>

                    boardVec ^<span class="hl sym">=</span> pieceVec<span class="hl sym">;</span>
                    m_curSoln<span class="hl sym">.</span><span class="hl kwd">popPiece</span><span class="hl sym">();</span>
                <span class="hl sym">}</span>

                placedPieces ^<span class="hl sym">=</span> pieceMask<span class="hl sym">;</span>
            <span class="hl sym">}</span>
        <span class="hl sym">}</span>

        <span class="hl kwb">void</span> <span class="hl kwd">recordSolution</span><span class="hl sym">(</span>Soln s<span class="hl sym">) {</span>
            m_nSoln <span class="hl sym">+=</span> <span class="hl num">2</span><span class="hl sym">;</span>

            <span class="hl kwa">if</span> <span class="hl sym">(</span>m_minSoln<span class="hl sym">.</span><span class="hl kwd">isEmpty</span><span class="hl sym">()) {</span>
                m_minSoln <span class="hl sym">=</span> m_maxSoln <span class="hl sym">=</span> s<span class="hl sym">.</span><span class="hl kwd">clone2</span><span class="hl sym">();</span>
                <span class="hl kwa">return</span><span class="hl sym">;</span>
            <span class="hl sym">}</span>

            <span class="hl kwa">if</span> <span class="hl sym">(</span>s<span class="hl sym">.</span><span class="hl kwd">lessThan</span><span class="hl sym">(</span>m_minSoln<span class="hl sym">))</span>
                m_minSoln <span class="hl sym">=</span> s<span class="hl sym">.</span><span class="hl kwd">clone2</span><span class="hl sym">();</span>
            <span class="hl kwa">else if</span> <span class="hl sym">(</span>m_maxSoln<span class="hl sym">.</span><span class="hl kwd">lessThan</span><span class="hl sym">(</span>s<span class="hl sym">))</span>
                m_maxSoln <span class="hl sym">=</span> s<span class="hl sym">.</span><span class="hl kwd">clone2</span><span class="hl sym">();</span>

            Soln spun <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Soln</span><span class="hl sym">();</span>
            s<span class="hl sym">.</span><span class="hl kwd">spin</span><span class="hl sym">(</span>spun<span class="hl sym">);</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>spun<span class="hl sym">.</span><span class="hl kwd">lessThan</span><span class="hl sym">(</span>m_minSoln<span class="hl sym">))</span>
                m_minSoln <span class="hl sym">=</span> spun<span class="hl sym">;</span>
            <span class="hl kwa">else if</span> <span class="hl sym">(</span>m_maxSoln<span class="hl sym">.</span><span class="hl kwd">lessThan</span><span class="hl sym">(</span>spun<span class="hl sym">))</span>
                m_maxSoln <span class="hl sym">=</span> spun<span class="hl sym">;</span>
        <span class="hl sym">}</span>
    <span class="hl sym">}</span>

<span class="hl slc">//----------------------</span>
    <span class="hl kwa">static class</span> Piece <span class="hl sym">{</span>
        <span class="hl kwa">class</span> Instance <span class="hl sym">{</span>
            <span class="hl kwb">long</span> m_allowed<span class="hl sym">;</span>
            <span class="hl kwb">int</span> m_vec<span class="hl sym">;</span>
            <span class="hl kwb">int</span> m_offset<span class="hl sym">;</span>
        <span class="hl sym">}</span>

        <span class="hl kwa">static final</span> <span class="hl kwb">int</span> N_ELEM <span class="hl sym">=</span> <span class="hl num">5</span><span class="hl sym">;</span>
        <span class="hl kwa">static final</span> <span class="hl kwb">int</span> ALL_PIECE_MASK <span class="hl sym">= (</span><span class="hl num">1</span> <span class="hl sym">&lt;&lt;</span> N_PIECE_TYPE<span class="hl sym">) -</span> <span class="hl num">1</span><span class="hl sym">;</span>
        <span class="hl kwa">static final</span> <span class="hl kwb">int</span> SKIP_PIECE <span class="hl sym">=</span> <span class="hl num">5</span><span class="hl sym">;</span>

        <span class="hl kwa">static final</span> <span class="hl kwb">int</span> BaseVecs<span class="hl sym">[] = {</span>
            <span class="hl num">0x10f</span><span class="hl sym">,</span> <span class="hl num">0x0cb</span><span class="hl sym">,</span> <span class="hl num">0x1087</span><span class="hl sym">,</span> <span class="hl num">0x427</span><span class="hl sym">,</span> <span class="hl num">0x465</span><span class="hl sym">,</span>
            <span class="hl num">0x0c7</span><span class="hl sym">,</span> <span class="hl num">0x8423</span><span class="hl sym">,</span> <span class="hl num">0x0a7</span><span class="hl sym">,</span> <span class="hl num">0x187</span><span class="hl sym">,</span> <span class="hl num">0x08f</span>
        <span class="hl sym">};</span>

        <span class="hl kwa">static</span> Piece<span class="hl sym">[][]</span> s_basePiece <span class="hl sym">=</span> <span class="hl kwa">new</span> Piece <span class="hl sym">[</span>N_PIECE_TYPE<span class="hl sym">][</span>N_ORIENT<span class="hl sym">];</span>

        Instance<span class="hl sym">[]</span> m_instance <span class="hl sym">=</span> <span class="hl kwa">new</span> Instance <span class="hl sym">[</span>N_PARITY<span class="hl sym">];</span>

        <span class="hl kwb">void</span> <span class="hl kwd">init</span><span class="hl sym">() {</span>
            <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> N_PARITY<span class="hl sym">;</span> i<span class="hl sym">++)</span>
                m_instance<span class="hl sym">[</span>i<span class="hl sym">] =</span> <span class="hl kwa">new</span> <span class="hl kwd">Instance</span><span class="hl sym">();</span>
        <span class="hl sym">}</span>
        <span class="hl kwd">Piece</span><span class="hl sym">() {</span>
            <span class="hl kwd">init</span><span class="hl sym">();</span>
        <span class="hl sym">}</span>

        <span class="hl kwa">static</span> <span class="hl sym">{</span>
            <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> i <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> i <span class="hl sym">&lt;</span> N_PIECE_TYPE<span class="hl sym">;</span> i<span class="hl sym">++) {</span>
                <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> j <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> j <span class="hl sym">&lt;</span> N_ORIENT<span class="hl sym">;</span> j<span class="hl sym">++)</span>
                    s_basePiece<span class="hl sym">[</span>i<span class="hl sym">][</span>j<span class="hl sym">] =</span> <span class="hl kwa">new</span> <span class="hl kwd">Piece</span><span class="hl sym">();</span>
            <span class="hl sym">}</span>
        <span class="hl sym">}</span>
        <span class="hl kwa">static</span> <span class="hl kwb">void</span> <span class="hl kwd">setCoordList</span><span class="hl sym">(</span><span class="hl kwb">int</span> vec<span class="hl sym">,</span> <span class="hl kwb">int</span><span class="hl sym">[][]</span> pts<span class="hl sym">) {</span>
            <span class="hl kwb">int</span> iPt <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
            <span class="hl kwb">int</span> mask <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">;</span>
            <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> y <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> y <span class="hl sym">&lt;</span> N_ROW<span class="hl sym">;</span> y<span class="hl sym">++) {</span>
                <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> x <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> x <span class="hl sym">&lt;</span> N_COL<span class="hl sym">;</span> x<span class="hl sym">++) {</span>
                    <span class="hl kwa">if</span> <span class="hl sym">((</span>mask <span class="hl sym">&amp;</span> vec<span class="hl sym">) !=</span> <span class="hl num">0</span><span class="hl sym">) {</span>
                        pts<span class="hl sym">[</span>iPt<span class="hl sym">][</span>X<span class="hl sym">] =</span> x<span class="hl sym">;</span>
                        pts<span class="hl sym">[</span>iPt<span class="hl sym">][</span>Y<span class="hl sym">] =</span> y<span class="hl sym">;</span>

                        iPt<span class="hl sym">++;</span>
                    <span class="hl sym">}</span>
                    mask <span class="hl sym">&lt;&lt;=</span> <span class="hl num">1</span><span class="hl sym">;</span>
                <span class="hl sym">}</span>
            <span class="hl sym">}</span>
        <span class="hl sym">}</span>

        <span class="hl kwa">static</span> <span class="hl kwb">int</span> <span class="hl kwd">toBitVector</span><span class="hl sym">(</span><span class="hl kwb">int</span><span class="hl sym">[][]</span> pts<span class="hl sym">) {</span>
            <span class="hl kwb">int</span> y<span class="hl sym">,</span> x<span class="hl sym">;</span>
            <span class="hl kwb">int</span> result <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
            <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> iPt <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> iPt <span class="hl sym">&lt;</span> N_ELEM<span class="hl sym">;</span> iPt<span class="hl sym">++) {</span>
                x <span class="hl sym">=</span> pts<span class="hl sym">[</span>iPt<span class="hl sym">][</span>X<span class="hl sym">];</span>
                y <span class="hl sym">=</span> pts<span class="hl sym">[</span>iPt<span class="hl sym">][</span>Y<span class="hl sym">];</span>

                <span class="hl kwb">int</span> pos <span class="hl sym">=</span> Board<span class="hl sym">.</span><span class="hl kwd">getIndex</span><span class="hl sym">(</span>x<span class="hl sym">,</span> y<span class="hl sym">);</span>
                result <span class="hl sym">|= (</span><span class="hl num">1</span> <span class="hl sym">&lt;&lt;</span> pos<span class="hl sym">);</span>
            <span class="hl sym">}</span>

            <span class="hl kwa">return</span> result<span class="hl sym">;</span>
        <span class="hl sym">}</span>

        <span class="hl kwa">static</span> <span class="hl kwb">void</span> <span class="hl kwd">shiftUpLines</span><span class="hl sym">(</span><span class="hl kwb">int</span><span class="hl sym">[][]</span> pts<span class="hl sym">,</span> <span class="hl kwb">int</span> shift<span class="hl sym">) {</span>

            <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> iPt <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> iPt <span class="hl sym">&lt;</span> N_ELEM<span class="hl sym">;</span> iPt<span class="hl sym">++) {</span>
                <span class="hl kwa">if</span> <span class="hl sym">((</span>pts<span class="hl sym">[</span>iPt<span class="hl sym">][</span>Y<span class="hl sym">] &amp;</span> shift <span class="hl sym">&amp;</span> <span class="hl num">0x1</span><span class="hl sym">) !=</span> <span class="hl num">0</span><span class="hl sym">)</span>
                    <span class="hl sym">(</span>pts<span class="hl sym">[</span>iPt<span class="hl sym">][</span>X<span class="hl sym">])++;</span>
                pts<span class="hl sym">[</span>iPt<span class="hl sym">][</span>Y<span class="hl sym">] -=</span> shift<span class="hl sym">;</span>
            <span class="hl sym">}</span>
        <span class="hl sym">}</span>

        <span class="hl kwa">static</span> <span class="hl kwb">int</span> <span class="hl kwd">shiftToX0</span><span class="hl sym">(</span><span class="hl kwb">int</span><span class="hl sym">[][]</span> pts<span class="hl sym">,</span> Instance instance<span class="hl sym">,</span> <span class="hl kwb">int</span> offsetRow<span class="hl sym">)</span>
        <span class="hl sym">{</span>
            <span class="hl kwb">int</span> x<span class="hl sym">,</span> y<span class="hl sym">,</span> iPt<span class="hl sym">;</span>
            <span class="hl kwb">int</span> xMin <span class="hl sym">=</span> pts<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">][</span>X<span class="hl sym">];</span>
            <span class="hl kwb">int</span> xMax <span class="hl sym">=</span> xMin<span class="hl sym">;</span>
            <span class="hl kwa">for</span> <span class="hl sym">(</span>iPt <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">;</span> iPt <span class="hl sym">&lt;</span> N_ELEM<span class="hl sym">;</span> iPt<span class="hl sym">++) {</span>
                x <span class="hl sym">=</span> pts<span class="hl sym">[</span>iPt<span class="hl sym">][</span>X<span class="hl sym">];</span>
                y <span class="hl sym">=</span> pts<span class="hl sym">[</span>iPt<span class="hl sym">][</span>Y<span class="hl sym">];</span>

                <span class="hl kwa">if</span> <span class="hl sym">(</span>x <span class="hl sym">&lt;</span> xMin<span class="hl sym">)</span>
                    xMin <span class="hl sym">=</span> x<span class="hl sym">;</span>
                <span class="hl kwa">else if</span> <span class="hl sym">(</span>x <span class="hl sym">&gt;</span> xMax<span class="hl sym">)</span>
                    xMax <span class="hl sym">=</span> x<span class="hl sym">;</span>
            <span class="hl sym">}</span>

            <span class="hl kwb">int</span> offset <span class="hl sym">=</span> N_ELEM<span class="hl sym">;</span>
            <span class="hl kwa">for</span> <span class="hl sym">(</span>iPt <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> iPt <span class="hl sym">&lt;</span> N_ELEM<span class="hl sym">;</span> iPt<span class="hl sym">++) {</span>

                pts<span class="hl sym">[</span>iPt<span class="hl sym">][</span>X<span class="hl sym">] -=</span> xMin<span class="hl sym">;</span>

                <span class="hl kwa">if</span> <span class="hl sym">((</span>pts<span class="hl sym">[</span>iPt<span class="hl sym">][</span>Y<span class="hl sym">] ==</span> offsetRow<span class="hl sym">) &amp;&amp; (</span>pts<span class="hl sym">[</span>iPt<span class="hl sym">][</span>X<span class="hl sym">] &lt;</span> offset<span class="hl sym">))</span>
                    offset <span class="hl sym">=</span> pts<span class="hl sym">[</span>iPt<span class="hl sym">][</span>X<span class="hl sym">];</span>
            <span class="hl sym">}</span>

            instance<span class="hl sym">.</span>m_offset <span class="hl sym">=</span> offset<span class="hl sym">;</span>
            instance<span class="hl sym">.</span>m_vec <span class="hl sym">=</span> <span class="hl kwd">toBitVector</span><span class="hl sym">(</span>pts<span class="hl sym">);</span>
            <span class="hl kwa">return</span> xMax <span class="hl sym">-</span> xMin<span class="hl sym">;</span>
        <span class="hl sym">}</span>

        <span class="hl kwb">void</span> <span class="hl kwd">setOkPos</span><span class="hl sym">(</span><span class="hl kwb">int</span> isOdd<span class="hl sym">,</span> <span class="hl kwb">int</span> w<span class="hl sym">,</span> <span class="hl kwb">int</span> h<span class="hl sym">) {</span>
            Instance p <span class="hl sym">=</span> m_instance<span class="hl sym">[</span>isOdd<span class="hl sym">];</span>
            p<span class="hl sym">.</span>m_allowed <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
            <span class="hl kwb">long</span> posMask <span class="hl sym">=</span> <span class="hl num">1L</span> <span class="hl sym">&lt;&lt; (</span>isOdd <span class="hl sym">*</span> N_COL<span class="hl sym">);</span>

            <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> y <span class="hl sym">=</span> isOdd<span class="hl sym">;</span> y <span class="hl sym">&lt;</span> N_ROW <span class="hl sym">-</span> h<span class="hl sym">;</span> y<span class="hl sym">+=</span><span class="hl num">2</span><span class="hl sym">,</span> posMask <span class="hl sym">&lt;&lt;=</span> N_COL<span class="hl sym">) {</span>
                <span class="hl kwa">if</span> <span class="hl sym">((</span>p<span class="hl sym">.</span>m_offset<span class="hl sym">) !=</span> <span class="hl num">0</span><span class="hl sym">)</span>
                    posMask <span class="hl sym">&lt;&lt;=</span> p<span class="hl sym">.</span>m_offset<span class="hl sym">;</span>

                <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> xPos <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> xPos <span class="hl sym">&lt;</span> N_COL <span class="hl sym">-</span> p<span class="hl sym">.</span>m_offset<span class="hl sym">;</span> xPos<span class="hl sym">++,</span> posMask <span class="hl sym">&lt;&lt;=</span> <span class="hl num">1</span><span class="hl sym">) {</span>

                    <span class="hl kwa">if</span> <span class="hl sym">(</span>xPos <span class="hl sym">&gt;=</span> N_COL <span class="hl sym">-</span> w<span class="hl sym">)</span>
                        <span class="hl kwa">continue</span><span class="hl sym">;</span>

                    <span class="hl kwb">int</span> pieceVec <span class="hl sym">=</span> p<span class="hl sym">.</span>m_vec <span class="hl sym">&lt;&lt;</span> xPos<span class="hl sym">;</span>

                    <span class="hl kwa">if</span> <span class="hl sym">(</span>Board<span class="hl sym">.</span><span class="hl kwd">hasBadIslandsSingle</span><span class="hl sym">(</span>pieceVec<span class="hl sym">,</span> y<span class="hl sym">))</span>
                        <span class="hl kwa">continue</span><span class="hl sym">;</span>

                    p<span class="hl sym">.</span>m_allowed <span class="hl sym">|=</span> posMask<span class="hl sym">;</span>
                <span class="hl sym">}</span>
            <span class="hl sym">}</span>
        <span class="hl sym">}</span>

        <span class="hl kwa">static</span> <span class="hl kwb">void</span> <span class="hl kwd">genOrientation</span><span class="hl sym">(</span><span class="hl kwb">int</span> vec<span class="hl sym">,</span> <span class="hl kwb">int</span> iOrient<span class="hl sym">,</span> Piece target<span class="hl sym">)</span>
        <span class="hl sym">{</span>
            <span class="hl kwb">int</span><span class="hl sym">[][]</span> pts <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwb">int</span><span class="hl sym">[</span>N_ELEM<span class="hl sym">][</span>N_DIM<span class="hl sym">];</span>
            <span class="hl kwd">setCoordList</span><span class="hl sym">(</span>vec<span class="hl sym">,</span> pts<span class="hl sym">);</span>

            <span class="hl kwb">int</span> y<span class="hl sym">,</span> x<span class="hl sym">,</span> iPt<span class="hl sym">;</span>
            <span class="hl kwb">int</span> rot <span class="hl sym">=</span> iOrient <span class="hl sym">%</span> <span class="hl num">6</span><span class="hl sym">;</span>
            <span class="hl kwb">int</span> flip <span class="hl sym">=</span> iOrient <span class="hl sym">&gt;=</span> <span class="hl num">6</span> ? <span class="hl num">1</span> <span class="hl sym">:</span> <span class="hl num">0</span><span class="hl sym">;</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>flip <span class="hl sym">!=</span> <span class="hl num">0</span><span class="hl sym">) {</span>
                <span class="hl kwa">for</span> <span class="hl sym">(</span>iPt <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> iPt <span class="hl sym">&lt;</span> N_ELEM<span class="hl sym">;</span> iPt<span class="hl sym">++)</span>
                    pts<span class="hl sym">[</span>iPt<span class="hl sym">][</span>Y<span class="hl sym">] = -</span>pts<span class="hl sym">[</span>iPt<span class="hl sym">][</span>Y<span class="hl sym">];</span>
            <span class="hl sym">}</span>

            <span class="hl kwa">while</span> <span class="hl sym">((</span>rot<span class="hl sym">--) !=</span> <span class="hl num">0</span><span class="hl sym">) {</span>
                <span class="hl kwa">for</span> <span class="hl sym">(</span>iPt <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> iPt <span class="hl sym">&lt;</span> N_ELEM<span class="hl sym">;</span> iPt<span class="hl sym">++) {</span>
                    x <span class="hl sym">=</span> pts<span class="hl sym">[</span>iPt<span class="hl sym">][</span>X<span class="hl sym">];</span>
                    y <span class="hl sym">=</span> pts<span class="hl sym">[</span>iPt<span class="hl sym">][</span>Y<span class="hl sym">];</span>

                    <span class="hl kwb">int</span> xNew <span class="hl sym">=</span> <span class="hl kwd">floor</span><span class="hl sym">((</span><span class="hl num">2</span> <span class="hl sym">*</span> x <span class="hl sym">-</span> <span class="hl num">3</span> <span class="hl sym">*</span> y <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">),</span> <span class="hl num">4</span><span class="hl sym">);</span>
                    <span class="hl kwb">int</span> yNew <span class="hl sym">=</span> <span class="hl kwd">floor</span><span class="hl sym">((</span><span class="hl num">2</span> <span class="hl sym">*</span> x <span class="hl sym">+</span> y <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">),</span> <span class="hl num">2</span><span class="hl sym">);</span>
                    pts<span class="hl sym">[</span>iPt<span class="hl sym">][</span>X<span class="hl sym">] =</span> xNew<span class="hl sym">;</span>
                    pts<span class="hl sym">[</span>iPt<span class="hl sym">][</span>Y<span class="hl sym">] =</span> yNew<span class="hl sym">;</span>
                <span class="hl sym">}</span>
            <span class="hl sym">}</span>

            <span class="hl kwb">int</span> yMin <span class="hl sym">=</span> pts<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">][</span>Y<span class="hl sym">];</span>
            <span class="hl kwb">int</span> yMax <span class="hl sym">=</span> yMin<span class="hl sym">;</span>
            <span class="hl kwa">for</span> <span class="hl sym">(</span>iPt <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">;</span> iPt <span class="hl sym">&lt;</span> N_ELEM<span class="hl sym">;</span> iPt<span class="hl sym">++) {</span>
                y <span class="hl sym">=</span> pts<span class="hl sym">[</span>iPt<span class="hl sym">][</span>Y<span class="hl sym">];</span>

                <span class="hl kwa">if</span> <span class="hl sym">(</span>y <span class="hl sym">&lt;</span> yMin<span class="hl sym">)</span>
                    yMin <span class="hl sym">=</span> y<span class="hl sym">;</span>
                <span class="hl kwa">else if</span> <span class="hl sym">(</span>y <span class="hl sym">&gt;</span> yMax<span class="hl sym">)</span>
                    yMax <span class="hl sym">=</span> y<span class="hl sym">;</span>
            <span class="hl sym">}</span>
            <span class="hl kwb">int</span> h <span class="hl sym">=</span> yMax <span class="hl sym">-</span> yMin<span class="hl sym">;</span>
            Instance even <span class="hl sym">=</span> target<span class="hl sym">.</span>m_instance<span class="hl sym">[</span>EVEN<span class="hl sym">];</span>
            Instance odd <span class="hl sym">=</span> target<span class="hl sym">.</span>m_instance<span class="hl sym">[</span>ODD<span class="hl sym">];</span>

            <span class="hl kwd">shiftUpLines</span><span class="hl sym">(</span>pts<span class="hl sym">,</span> yMin<span class="hl sym">);</span>
            <span class="hl kwb">int</span> w <span class="hl sym">=</span> <span class="hl kwd">shiftToX0</span><span class="hl sym">(</span>pts<span class="hl sym">,</span> even<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">);</span>
            target<span class="hl sym">.</span><span class="hl kwd">setOkPos</span><span class="hl sym">(</span>EVEN<span class="hl sym">,</span> w<span class="hl sym">,</span> h<span class="hl sym">);</span>
            even<span class="hl sym">.</span>m_vec <span class="hl sym">&gt;&gt;=</span> even<span class="hl sym">.</span>m_offset<span class="hl sym">;</span>

            <span class="hl kwd">shiftUpLines</span><span class="hl sym">(</span>pts<span class="hl sym">, -</span><span class="hl num">1</span><span class="hl sym">);</span>
            w <span class="hl sym">=</span> <span class="hl kwd">shiftToX0</span><span class="hl sym">(</span>pts<span class="hl sym">,</span> odd<span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">);</span>
            odd<span class="hl sym">.</span>m_vec <span class="hl sym">&gt;&gt;=</span> N_COL<span class="hl sym">;</span>
            target<span class="hl sym">.</span><span class="hl kwd">setOkPos</span><span class="hl sym">(</span>ODD<span class="hl sym">,</span> w<span class="hl sym">,</span> h<span class="hl sym">);</span>
            odd<span class="hl sym">.</span>m_vec <span class="hl sym">&gt;&gt;=</span> odd<span class="hl sym">.</span>m_offset<span class="hl sym">;</span>
        <span class="hl sym">}</span>

        <span class="hl kwa">static</span> <span class="hl kwb">void</span> <span class="hl kwd">genAllOrientations</span><span class="hl sym">() {</span>
            <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> iPiece <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> iPiece <span class="hl sym">&lt;</span> N_PIECE_TYPE<span class="hl sym">;</span> iPiece<span class="hl sym">++) {</span>
                <span class="hl kwb">int</span> refPiece <span class="hl sym">=</span> BaseVecs<span class="hl sym">[</span>iPiece<span class="hl sym">];</span>
                <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> iOrient <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> iOrient <span class="hl sym">&lt;</span> N_ORIENT<span class="hl sym">;</span> iOrient<span class="hl sym">++) {</span>
                    Piece p <span class="hl sym">=</span> s_basePiece<span class="hl sym">[</span>iPiece<span class="hl sym">][</span>iOrient<span class="hl sym">];</span>
                    <span class="hl kwd">genOrientation</span><span class="hl sym">(</span>refPiece<span class="hl sym">,</span> iOrient<span class="hl sym">,</span> p<span class="hl sym">);</span>
                    <span class="hl kwa">if</span> <span class="hl sym">((</span>iPiece <span class="hl sym">==</span> SKIP_PIECE<span class="hl sym">)  &amp;&amp; (((</span>iOrient <span class="hl sym">/</span> <span class="hl num">3</span><span class="hl sym">) &amp;</span> <span class="hl num">1</span><span class="hl sym">) !=</span> <span class="hl num">0</span><span class="hl sym">))</span>
                        p<span class="hl sym">.</span>m_instance<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">].</span>m_allowed <span class="hl sym">=</span> p<span class="hl sym">.</span>m_instance<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">].</span>m_allowed <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
                <span class="hl sym">}</span>
            <span class="hl sym">}</span>
            <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> iPiece <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> iPiece <span class="hl sym">&lt;</span> N_PIECE_TYPE<span class="hl sym">;</span> iPiece<span class="hl sym">++) {</span>
                <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> iOrient <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> iOrient <span class="hl sym">&lt;</span> N_ORIENT<span class="hl sym">;</span> iOrient<span class="hl sym">++) {</span>
                    <span class="hl kwb">long</span> mask <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">;</span>
                    <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> iRow <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> iRow <span class="hl sym">&lt;</span> N_ROW<span class="hl sym">;</span> iRow<span class="hl sym">++) {</span>
                        Instance p <span class="hl sym">=</span> <span class="hl kwd">getPiece</span><span class="hl sym">(</span>iPiece<span class="hl sym">,</span> iOrient<span class="hl sym">, (</span>iRow <span class="hl sym">&amp;</span> <span class="hl num">1</span><span class="hl sym">));</span>
                        <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwb">int</span> iCol <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> iCol <span class="hl sym">&lt;</span> N_COL<span class="hl sym">;</span> iCol<span class="hl sym">++) {</span>
                            OkPieces allowed <span class="hl sym">=</span> g_okPieces<span class="hl sym">[</span>iRow<span class="hl sym">][</span>iCol<span class="hl sym">];</span>
                            <span class="hl kwa">if</span> <span class="hl sym">((</span>p<span class="hl sym">.</span>m_allowed <span class="hl sym">&amp;</span> mask<span class="hl sym">) !=</span> <span class="hl num">0</span><span class="hl sym">) {</span>
                                allowed<span class="hl sym">.</span>pieceVec<span class="hl sym">[</span>iPiece<span class="hl sym">][</span>allowed<span class="hl sym">.</span>nPieces<span class="hl sym">[</span>iPiece<span class="hl sym">]] =</span> p<span class="hl sym">.</span>m_vec <span class="hl sym">&lt;&lt;</span> iCol<span class="hl sym">;</span>
                                <span class="hl sym">(</span>allowed<span class="hl sym">.</span>nPieces<span class="hl sym">[</span>iPiece<span class="hl sym">])++;</span>
                            <span class="hl sym">}</span>

                            mask <span class="hl sym">&lt;&lt;=</span> <span class="hl num">1</span><span class="hl sym">;</span>
                        <span class="hl sym">}</span>
                    <span class="hl sym">}</span>
                <span class="hl sym">}</span>
            <span class="hl sym">}</span>
        <span class="hl sym">}</span>

        <span class="hl kwa">static</span> Instance <span class="hl kwd">getPiece</span><span class="hl sym">(</span><span class="hl kwb">int</span> iPiece<span class="hl sym">,</span> <span class="hl kwb">int</span> iOrient<span class="hl sym">,</span> <span class="hl kwb">int</span> iParity<span class="hl sym">) {</span>
            <span class="hl kwa">return</span> s_basePiece<span class="hl sym">[</span>iPiece<span class="hl sym">][</span>iOrient<span class="hl sym">].</span>m_instance<span class="hl sym">[</span>iParity<span class="hl sym">];</span>
        <span class="hl sym">}</span>
    <span class="hl sym">}</span>


<span class="hl slc">//-- Main ---------------------------</span>
    <span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwc">String</span><span class="hl sym">[]</span> args<span class="hl sym">) {</span>
        <span class="hl kwa">if</span> <span class="hl sym">(</span>args<span class="hl sym">.</span>length <span class="hl sym">&gt;</span> <span class="hl num">2</span><span class="hl sym">)</span>
            <span class="hl kwc">System</span><span class="hl sym">.</span><span class="hl kwd">exit</span><span class="hl sym">(-</span><span class="hl num">1</span><span class="hl sym">);</span> <span class="hl slc">// spec says this is an error;</span>

        <span class="hl kwd">initGlobals</span><span class="hl sym">();</span>
        Board b <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Board</span><span class="hl sym">();</span>
        Piece<span class="hl sym">.</span><span class="hl kwd">genAllOrientations</span><span class="hl sym">();</span>
        Board<span class="hl sym">.</span><span class="hl kwd">calcAlwaysBad</span><span class="hl sym">();</span>
        b<span class="hl sym">.</span><span class="hl kwd">genAllSolutions</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">);</span>

        <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">(</span>b<span class="hl sym">.</span>m_nSoln <span class="hl sym">+</span> <span class="hl str">&quot; solutions found</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">);</span>
        <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">(</span>b<span class="hl sym">.</span>m_minSoln<span class="hl sym">);</span>
        <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">(</span>b<span class="hl sym">.</span>m_maxSoln<span class="hl sym">);</span>
    <span class="hl sym">}</span>
<span class="hl sym">}</span>
