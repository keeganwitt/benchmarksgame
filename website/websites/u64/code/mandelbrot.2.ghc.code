<span class="hl slc">--</span>
<span class="hl slc">-- The Computer Language Benchmarks Game</span>
<span class="hl slc">-- http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">--</span>
<span class="hl slc">-- Contributed by Spencer Janssen, Trevor McCort, Christophe Poucet and Don Stewart</span>
<span class="hl slc">-- Parallelised by Tim Newsham</span>
<span class="hl slc">--</span>
<span class="hl slc">-- Must be compiled with the -fexcess-precision flag as a pragma. GHC</span>
<span class="hl slc">-- currently doesn't recognise the -fexcess-precision flag on the command</span>
<span class="hl slc">-- line (!).</span>
<span class="hl slc">--</span>
<span class="hl slc">-- The following flags are suggested when compiling:</span>
<span class="hl slc">--</span>
<span class="hl slc">--      ghc -optc-march=pentium4 -optc-mfpmath=sse -optc-msse2 -threaded --make</span>
<span class="hl slc">--</span>
<span class="hl slc">-- Run with -N6 on a quad core (more capabilities to hide latency)</span>
<span class="hl slc">--</span>
<span class="hl slc">--      $ time ./A 6400 +RTS -N6</span>
<span class="hl slc">--</span>

<span class="hl kwd">import</span> System<span class="hl opt">.</span>Environment
<span class="hl kwd">import</span> System<span class="hl opt">.</span><span class="hl kwb">IO</span>
<span class="hl kwd">import</span> Foreign
<span class="hl kwd">import</span> Foreign<span class="hl opt">.</span>Marshal<span class="hl opt">.</span><span class="hl kwb">Array</span>
<span class="hl kwd">import</span> Control<span class="hl opt">.</span>Concurrent
<span class="hl kwd">import</span> Control<span class="hl opt">.</span>Concurrent<span class="hl opt">.</span>MVar
<span class="hl kwd">import</span> Control<span class="hl opt">.</span>Concurrent<span class="hl opt">.</span>Chan
<span class="hl kwd">import</span> Control<span class="hl opt">.</span>Monad

main <span class="hl opt">=</span> <span class="hl kwd">do</span>
    <span class="hl slc">-- width in pixels</span>
    w <span class="hl opt">&lt;-</span> <span class="hl kwc">getArgs</span> <span class="hl opt">&gt;&gt;=</span> <span class="hl kwc">readIO</span> <span class="hl opt">.</span> <span class="hl kwc">head</span>
        <span class="hl slc">-- width in bytes</span>
    <span class="hl kwd">let</span> n      <span class="hl opt">=</span> w `<span class="hl kwc">div</span>` <span class="hl num">8</span>
        <span class="hl slc">-- width of a pixel in the complex plane</span>
        m  <span class="hl opt">=</span> <span class="hl num">2</span> <span class="hl opt">/</span> <span class="hl kwc">fromIntegral</span> w
        coords <span class="hl opt">= [</span>T <span class="hl num">1 0</span> y <span class="hl opt">(</span><span class="hl kwc">fromIntegral</span> y <span class="hl opt">*</span> m <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">)</span> | y <span class="hl opt">&lt;- [</span><span class="hl num">0</span><span class="hl opt">..</span>w<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">]]</span>
    q <span class="hl opt">&lt;-</span> newChan
    replies <span class="hl opt">&lt;-</span> replicateM w newEmptyMVar
    <span class="hl kwc">mapM_</span> <span class="hl opt">(</span>writeChan q<span class="hl opt">) $</span> <span class="hl kwc">zip</span> coords replies
    replicateM_ <span class="hl num">4</span> <span class="hl opt">.</span> forkIO <span class="hl opt">$</span> worker q w m n

    <span class="hl kwc">putStrLn</span> <span class="hl opt">(</span><span class="hl str">&quot;P4</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">++</span><span class="hl kwc">show</span> w<span class="hl opt">++</span><span class="hl str">&quot; &quot;</span><span class="hl opt">++</span><span class="hl kwc">show</span> w<span class="hl opt">)</span>
    <span class="hl kwc">mapM_</span> <span class="hl opt">(</span>takeMVar <span class="hl opt">&gt;=&gt;</span> <span class="hl esc">\b</span> <span class="hl opt">-&gt;</span> hPutBuf <span class="hl kwc">stdout</span> b n<span class="hl opt">)</span> replies

<span class="hl slc">-- Worker computes one line of the image and sends it to the master</span>
<span class="hl slc">-- q - work queue</span>
<span class="hl slc">-- w - width in pixels</span>
<span class="hl slc">-- m - width of a pixel in the complex plane</span>
<span class="hl slc">-- n - width in bytes</span>
worker q w m n <span class="hl opt">=</span> forever <span class="hl opt">(</span><span class="hl kwd">do</span>
    <span class="hl opt">(</span>coord<span class="hl opt">,</span> reply<span class="hl opt">) &lt;-</span> readChan q
    p <span class="hl opt">&lt;-</span> mallocArray0 n
    unfold <span class="hl opt">(</span>next_x w m n<span class="hl opt">)</span> p coord
    putMVar reply p<span class="hl opt">)</span>

<span class="hl slc">-- f - takes coordinates and returns Nothing if done</span>
<span class="hl slc">--     or the next byte of the bitmap otherwise.</span>
<span class="hl slc">-- ptr - buffer to write to</span>
<span class="hl slc">-- x0 - initial coordinates </span>
unfold <span class="hl opt">:: (</span>T <span class="hl opt">-&gt;</span> <span class="hl kwb">Maybe</span> <span class="hl opt">(</span>Word8<span class="hl opt">,</span>T<span class="hl opt">)) -&gt;</span> Ptr Word8 <span class="hl opt">-&gt;</span> T <span class="hl opt">-&gt;</span> <span class="hl kwb">IO</span> <span class="hl opt">(</span>Ptr Word8<span class="hl opt">)</span>
unfold <span class="hl opt">!</span>f <span class="hl opt">!</span>ptr <span class="hl opt">!</span>x0 <span class="hl opt">=</span> go ptr x0
  <span class="hl kwd">where</span>
    <span class="hl slc">-- p - pointer into the buffer</span>
    <span class="hl slc">-- x - coordinates</span>
    go <span class="hl opt">!</span>p <span class="hl opt">!</span>x <span class="hl opt">=</span> <span class="hl kwd">case</span> f x <span class="hl kwd">of</span>
        Just <span class="hl opt">(</span>w<span class="hl opt">,</span>y<span class="hl opt">)          -&gt;</span> poke p w <span class="hl opt">&gt;&gt;</span> go <span class="hl opt">(</span>p `plusPtr` <span class="hl num">1</span><span class="hl opt">)</span> y
        Nothing             <span class="hl opt">-&gt;</span> <span class="hl kwc">return</span> ptr

<span class="hl slc">-- T bs x y ci</span>
<span class="hl slc">--    bx - x position in bytes</span>
<span class="hl slc">--    x  - x position in pixels</span>
<span class="hl slc">--    y  - y position in pixels</span>
<span class="hl slc">--    ci - y position in complex plane</span>
<span class="hl kwd">data</span> T <span class="hl opt">=</span> T <span class="hl opt">!</span><span class="hl kwb">Int</span> <span class="hl opt">!</span><span class="hl kwb">Int</span> <span class="hl opt">!</span><span class="hl kwb">Int</span> <span class="hl opt">!</span><span class="hl kwb">Double</span>

<span class="hl slc">-- w - image width in pixels</span>
<span class="hl slc">-- iw - pixel width in the complex plane</span>
<span class="hl slc">-- bw - image width in bytes</span>
next_x <span class="hl opt">!</span>w <span class="hl opt">!</span>iw <span class="hl opt">!</span>bw <span class="hl opt">(</span>T bx x y ci<span class="hl opt">)</span>
    | bx <span class="hl opt">==</span> bw  <span class="hl opt">=</span> Nothing
    | <span class="hl kwc">otherwise</span> <span class="hl opt">=</span> Just <span class="hl opt">(</span>loop_x w x <span class="hl num">8</span> iw ci <span class="hl num">0</span><span class="hl opt">,</span> T <span class="hl opt">(</span>bx<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">) (</span>x<span class="hl opt">+</span><span class="hl num">8</span><span class="hl opt">)</span> y ci<span class="hl opt">)</span>

<span class="hl slc">-- w - image width in pixels</span>
<span class="hl slc">-- x - current x coordinate in pixels</span>
<span class="hl slc">-- n - bit positition from 8 to 0</span>
<span class="hl slc">-- iw - pixel width in the complex plane</span>
<span class="hl slc">-- ci - current y coordinate in complex plane</span>
<span class="hl slc">-- b - accumulated bit value.</span>
loop_x <span class="hl opt">!</span>w <span class="hl opt">!</span>x <span class="hl opt">!</span>n <span class="hl opt">!</span>iw <span class="hl opt">!</span>ci <span class="hl opt">!</span>b
    | x <span class="hl opt">&lt;</span> w <span class="hl opt">=</span> <span class="hl kwd">if</span> n <span class="hl opt">==</span> <span class="hl num">0</span>
                    <span class="hl kwd">then</span> b
                    <span class="hl kwd">else</span> loop_x w <span class="hl opt">(</span>x<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">) (</span>n<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">)</span> iw ci <span class="hl opt">(</span>b<span class="hl opt">+</span>b<span class="hl opt">+</span>v<span class="hl opt">)</span>
    | <span class="hl kwc">otherwise</span> <span class="hl opt">=</span> b `shiftL` n
  <span class="hl kwd">where</span>
    v <span class="hl opt">=</span> fractal <span class="hl num">0 0</span> <span class="hl opt">(</span><span class="hl kwc">fromIntegral</span> x <span class="hl opt">*</span> iw <span class="hl opt">-</span> <span class="hl num">1.5</span><span class="hl opt">)</span> ci <span class="hl num">50</span>

<span class="hl slc">-- julia function (r :+ i) (cr :+ ci) with max iterations k.</span>
fractal <span class="hl opt">::</span> <span class="hl kwb">Double</span> <span class="hl opt">-&gt;</span> <span class="hl kwb">Double</span> <span class="hl opt">-&gt;</span> <span class="hl kwb">Double</span> <span class="hl opt">-&gt;</span> <span class="hl kwb">Double</span> <span class="hl opt">-&gt;</span> <span class="hl kwb">Int</span> <span class="hl opt">-&gt;</span> Word8
fractal <span class="hl opt">!</span>r <span class="hl opt">!</span>i <span class="hl opt">!</span>cr <span class="hl opt">!</span>ci <span class="hl opt">!</span>k
    | r2 <span class="hl opt">+</span> i2 <span class="hl opt">&gt;</span> <span class="hl num">4</span> <span class="hl opt">=</span> <span class="hl num">0</span>
    | k <span class="hl opt">==</span> <span class="hl num">0</span>      <span class="hl opt">=</span> <span class="hl num">1</span>
    | <span class="hl kwc">otherwise</span>   <span class="hl opt">=</span> fractal <span class="hl opt">(</span>r2<span class="hl opt">-</span>i2<span class="hl opt">+</span>cr<span class="hl opt">) ((</span>r<span class="hl opt">+</span>r<span class="hl opt">)*</span>i<span class="hl opt">+</span>ci<span class="hl opt">)</span> cr ci <span class="hl opt">(</span>k<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">)</span>
  <span class="hl kwd">where</span>
    <span class="hl opt">(!</span>r2<span class="hl opt">,!</span>i2<span class="hl opt">) = (</span>r<span class="hl opt">*</span>r<span class="hl opt">,</span>i<span class="hl opt">*</span>i<span class="hl opt">)</span>
