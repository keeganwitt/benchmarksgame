<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by Branimir Maksimovic</span>
<span class="hl com">*/</span>

<span class="hl ppc">#include &lt;cstdlib&gt;</span>
<span class="hl ppc">#include &lt;cstdio&gt;</span>
<span class="hl ppc">#include &lt;cstring&gt;</span>
<span class="hl ppc">#include &lt;algorithm&gt;</span>
<span class="hl ppc">#include &lt;immintrin.h&gt;</span>

<span class="hl kwb">int</span> checksum<span class="hl opt">;</span>
<span class="hl kwb">int</span> maxflips<span class="hl opt">;</span>
<span class="hl kwc">typedef</span> <span class="hl kwb">unsigned char</span> int_t<span class="hl opt">;</span>

<span class="hl kwb">void</span> <span class="hl kwd">reverse</span><span class="hl opt">(</span>int_t<span class="hl opt">*</span> p<span class="hl opt">,</span><span class="hl kwb">int</span> n<span class="hl opt">)</span>
<span class="hl opt">{</span>
   <span class="hl kwb">static</span> <span class="hl kwd">__attribute__</span><span class="hl opt">((</span><span class="hl kwd">aligned</span><span class="hl opt">(</span><span class="hl num">16</span><span class="hl opt">)))</span> <span class="hl kwb">unsigned long long</span> w<span class="hl opt">[</span><span class="hl num">11</span><span class="hl opt">][</span><span class="hl num">2</span><span class="hl opt">] =</span>
   <span class="hl opt">{   {</span><span class="hl num">0x0706050403020001</span>ll<span class="hl opt">,</span><span class="hl num">0x0f0e0d0c0b0a0908</span>ll<span class="hl opt">},</span> 
      <span class="hl opt">{</span><span class="hl num">0x0706050403000102</span>ll<span class="hl opt">,</span><span class="hl num">0x0f0e0d0c0b0a0908</span>ll<span class="hl opt">},</span>
      <span class="hl opt">{</span><span class="hl num">0x0706050400010203</span>ll<span class="hl opt">,</span><span class="hl num">0x0f0e0d0c0b0a0908</span>ll<span class="hl opt">},</span>
      <span class="hl opt">{</span><span class="hl num">0x0706050001020304</span>ll<span class="hl opt">,</span><span class="hl num">0x0f0e0d0c0b0a0908</span>ll<span class="hl opt">},</span>
      <span class="hl opt">{</span><span class="hl num">0x0706000102030405</span>ll<span class="hl opt">,</span><span class="hl num">0x0f0e0d0c0b0a0908</span>ll<span class="hl opt">},</span>
      <span class="hl opt">{</span><span class="hl num">0x0700010203040506</span>ll<span class="hl opt">,</span><span class="hl num">0x0f0e0d0c0b0a0908</span>ll<span class="hl opt">},</span>
      <span class="hl opt">{</span><span class="hl num">0x0001020304050607</span>ll<span class="hl opt">,</span><span class="hl num">0x0f0e0d0c0b0a0908</span>ll<span class="hl opt">},</span>
      <span class="hl opt">{</span><span class="hl num">0x0102030405060708</span>ll<span class="hl opt">,</span><span class="hl num">0x0f0e0d0c0b0a0900</span>ll<span class="hl opt">},</span>
      <span class="hl opt">{</span><span class="hl num">0x0203040506070809</span>ll<span class="hl opt">,</span><span class="hl num">0x0f0e0d0c0b0a0001</span>ll<span class="hl opt">},</span>
      <span class="hl opt">{</span><span class="hl num">0x030405060708090a</span>ll<span class="hl opt">,</span><span class="hl num">0x0f0e0d0c0b000102</span>ll<span class="hl opt">},</span>
      <span class="hl opt">{</span><span class="hl num">0x0405060708090a0b</span>ll<span class="hl opt">,</span><span class="hl num">0x0f0e0d0c00010203</span>ll<span class="hl opt">},</span>
   <span class="hl opt">};</span>
   
   __m128i a<span class="hl opt">,</span>b<span class="hl opt">;</span>
   b <span class="hl opt">=</span> <span class="hl kwd">_mm_load_si128</span><span class="hl opt">((</span>__m128i<span class="hl opt">*)&amp;</span>w<span class="hl opt">[</span>n<span class="hl opt">-</span><span class="hl num">2</span><span class="hl opt">][</span><span class="hl num">0</span><span class="hl opt">]);</span>
   a <span class="hl opt">=</span> <span class="hl kwd">_mm_load_si128</span><span class="hl opt">((</span>__m128i<span class="hl opt">*)</span>p<span class="hl opt">);</span>
   a <span class="hl opt">=</span> <span class="hl kwd">_mm_shuffle_epi8</span><span class="hl opt">(</span>a<span class="hl opt">,</span>b<span class="hl opt">);</span>
   <span class="hl kwd">_mm_store_si128</span><span class="hl opt">((</span>__m128i<span class="hl opt">*)</span>p<span class="hl opt">,</span>a<span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwb">void</span> <span class="hl kwd">rotate</span><span class="hl opt">(</span>int_t<span class="hl opt">*</span> p<span class="hl opt">,</span> <span class="hl kwb">int</span> n<span class="hl opt">)</span>
<span class="hl opt">{</span>
   <span class="hl kwb">static</span> <span class="hl kwd">__attribute__</span><span class="hl opt">((</span><span class="hl kwd">aligned</span><span class="hl opt">(</span><span class="hl num">16</span><span class="hl opt">)))</span> <span class="hl kwb">unsigned long long</span> w<span class="hl opt">[</span><span class="hl num">11</span><span class="hl opt">][</span><span class="hl num">2</span><span class="hl opt">] =</span>
   <span class="hl opt">{   {</span><span class="hl num">0x0706050403020001</span>ll<span class="hl opt">,</span><span class="hl num">0x0f0e0d0c0b0a0908</span>ll<span class="hl opt">},</span> 
      <span class="hl opt">{</span><span class="hl num">0x0706050403000201</span>ll<span class="hl opt">,</span><span class="hl num">0x0f0e0d0c0b0a0908</span>ll<span class="hl opt">},</span>
      <span class="hl opt">{</span><span class="hl num">0x0706050400030201</span>ll<span class="hl opt">,</span><span class="hl num">0x0f0e0d0c0b0a0908</span>ll<span class="hl opt">},</span>
      <span class="hl opt">{</span><span class="hl num">0x0706050004030201</span>ll<span class="hl opt">,</span><span class="hl num">0x0f0e0d0c0b0a0908</span>ll<span class="hl opt">},</span>
      <span class="hl opt">{</span><span class="hl num">0x0706000504030201</span>ll<span class="hl opt">,</span><span class="hl num">0x0f0e0d0c0b0a0908</span>ll<span class="hl opt">},</span>
      <span class="hl opt">{</span><span class="hl num">0x0700060504030201</span>ll<span class="hl opt">,</span><span class="hl num">0x0f0e0d0c0b0a0908</span>ll<span class="hl opt">},</span>
      <span class="hl opt">{</span><span class="hl num">0x0007060504030201</span>ll<span class="hl opt">,</span><span class="hl num">0x0f0e0d0c0b0a0908</span>ll<span class="hl opt">},</span>
      <span class="hl opt">{</span><span class="hl num">0x0807060504030201</span>ll<span class="hl opt">,</span><span class="hl num">0x0f0e0d0c0b0a0900</span>ll<span class="hl opt">},</span>
      <span class="hl opt">{</span><span class="hl num">0x0807060504030201</span>ll<span class="hl opt">,</span><span class="hl num">0x0f0e0d0c0b0a0009</span>ll<span class="hl opt">},</span>
      <span class="hl opt">{</span><span class="hl num">0x0807060504030201</span>ll<span class="hl opt">,</span><span class="hl num">0x0f0e0d0c0b000a09</span>ll<span class="hl opt">},</span>
      <span class="hl opt">{</span><span class="hl num">0x0807060504030201</span>ll<span class="hl opt">,</span><span class="hl num">0x0f0e0d0c000b0a09</span>ll<span class="hl opt">},</span>
   <span class="hl opt">};</span>
   
   __m128i a<span class="hl opt">,</span>b<span class="hl opt">;</span>
   b <span class="hl opt">=</span> <span class="hl kwd">_mm_load_si128</span><span class="hl opt">((</span>__m128i<span class="hl opt">*)&amp;</span>w<span class="hl opt">[</span>n<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">][</span><span class="hl num">0</span><span class="hl opt">]);</span>
   a <span class="hl opt">=</span> <span class="hl kwd">_mm_load_si128</span><span class="hl opt">((</span>__m128i<span class="hl opt">*)</span>p<span class="hl opt">);</span>
   a <span class="hl opt">=</span> <span class="hl kwd">_mm_shuffle_epi8</span><span class="hl opt">(</span>a<span class="hl opt">,</span>b<span class="hl opt">);</span>
   <span class="hl kwd">_mm_store_si128</span><span class="hl opt">((</span>__m128i<span class="hl opt">*)</span>p<span class="hl opt">,</span>a<span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwb">bool</span> <span class="hl kwd">next_permutation</span><span class="hl opt">(</span>int_t<span class="hl opt">*</span> beg<span class="hl opt">,</span> <span class="hl kwb">int</span> n<span class="hl opt">,</span> int_t<span class="hl opt">*</span> c<span class="hl opt">)</span>
<span class="hl opt">{</span>
   <span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span>
   <span class="hl kwa">while</span><span class="hl opt">(</span>i<span class="hl opt">&lt;</span>n<span class="hl opt">)</span>
   <span class="hl opt">{</span>
      <span class="hl kwd">rotate</span><span class="hl opt">(</span>beg<span class="hl opt">,</span>i<span class="hl opt">);</span>
      <span class="hl kwa">if</span><span class="hl opt">(</span>c<span class="hl opt">[</span>i<span class="hl opt">]&gt;=</span>i<span class="hl opt">)</span>c<span class="hl opt">[</span>i<span class="hl opt">++]=</span><span class="hl num">0</span><span class="hl opt">;</span>
      <span class="hl kwa">else break</span><span class="hl opt">;</span>
   <span class="hl opt">}</span>
   <span class="hl kwa">if</span><span class="hl opt">(</span>i<span class="hl opt">&gt;=</span>n<span class="hl opt">)</span><span class="hl kwa">return false</span><span class="hl opt">;</span>
   <span class="hl opt">++</span>c<span class="hl opt">[</span>i<span class="hl opt">];</span>
   <span class="hl kwa">return true</span><span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwb">struct</span> next<span class="hl opt">{</span>
      <span class="hl kwd">next</span><span class="hl opt">():</span><span class="hl kwd">n</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">){}</span>
      int_t <span class="hl kwc">operator</span> <span class="hl opt">()(){</span> <span class="hl kwa">return</span> <span class="hl opt">++</span>n<span class="hl opt">;}</span>
      int_t n<span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl kwb">void</span> <span class="hl kwd">fannkuch</span><span class="hl opt">(</span><span class="hl kwb">int</span> n<span class="hl opt">)</span>
<span class="hl opt">{</span>
   checksum <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
   maxflips <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
   <span class="hl kwd">__attribute__</span><span class="hl opt">((</span><span class="hl kwd">aligned</span><span class="hl opt">(</span><span class="hl num">16</span><span class="hl opt">)))</span> int_t perm<span class="hl opt">[</span><span class="hl num">16</span><span class="hl opt">];</span>
   <span class="hl kwd">__attribute__</span><span class="hl opt">((</span><span class="hl kwd">aligned</span><span class="hl opt">(</span><span class="hl num">16</span><span class="hl opt">)))</span> int_t tperm<span class="hl opt">[</span><span class="hl num">16</span><span class="hl opt">];</span>
   <span class="hl kwb">int</span> permcount <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
   
   int_t count<span class="hl opt">[</span><span class="hl num">16</span><span class="hl opt">]={</span><span class="hl num">0</span><span class="hl opt">};</span>
   
   std<span class="hl opt">::</span><span class="hl kwd">generate</span><span class="hl opt">(</span>perm<span class="hl opt">,</span>perm<span class="hl opt">+</span>n<span class="hl opt">,</span><span class="hl kwd">next</span><span class="hl opt">());</span>
   <span class="hl kwa">do</span>
   <span class="hl opt">{</span>
      std<span class="hl opt">::</span><span class="hl kwd">copy</span><span class="hl opt">(</span>perm<span class="hl opt">,</span>perm<span class="hl opt">+</span>n<span class="hl opt">,</span>tperm<span class="hl opt">);</span>
      <span class="hl kwb">int</span> flips <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
      <span class="hl kwa">while</span><span class="hl opt">(</span>tperm<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] !=</span> <span class="hl num">1</span><span class="hl opt">)</span>
      <span class="hl opt">{</span>
         <span class="hl kwd">reverse</span><span class="hl opt">(</span>tperm<span class="hl opt">,</span>tperm<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">]);</span>
         <span class="hl opt">++</span>flips<span class="hl opt">;</span>
      <span class="hl opt">}</span>
      checksum <span class="hl opt">+= (</span>permcount<span class="hl opt">%</span><span class="hl num">2</span> <span class="hl opt">==</span> <span class="hl num">0</span><span class="hl opt">)</span>?flips<span class="hl opt">:-</span>flips<span class="hl opt">;</span>
      maxflips <span class="hl opt">=</span> std<span class="hl opt">::</span><span class="hl kwd">max</span><span class="hl opt">(</span>maxflips<span class="hl opt">,</span>flips<span class="hl opt">);</span>
   <span class="hl opt">}</span><span class="hl kwa">while</span><span class="hl opt">(++</span>permcount<span class="hl opt">,</span><span class="hl kwd">next_permutation</span><span class="hl opt">(</span>perm<span class="hl opt">,</span>n<span class="hl opt">,</span>count<span class="hl opt">));</span>
<span class="hl opt">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span><span class="hl opt">**</span> argv<span class="hl opt">)</span>
<span class="hl opt">{</span>
   <span class="hl kwb">int</span> n <span class="hl opt">=</span> <span class="hl num">7</span><span class="hl opt">;</span>
   <span class="hl kwa">if</span><span class="hl opt">(</span>argc <span class="hl opt">&gt;</span> <span class="hl num">1</span><span class="hl opt">)</span>n <span class="hl opt">=</span> <span class="hl kwd">atoi</span><span class="hl opt">(</span>argv<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">]);</span>
   <span class="hl kwa">if</span><span class="hl opt">(</span>n <span class="hl opt">&lt;</span> <span class="hl num">3</span> <span class="hl opt">||</span> n <span class="hl opt">&gt;</span> <span class="hl num">12</span><span class="hl opt">)</span>
   <span class="hl opt">{</span>
      <span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;n should be between 3 and 12</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">);</span>
      <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
   <span class="hl opt">}</span>
   <span class="hl kwd">fannkuch</span><span class="hl opt">(</span>n<span class="hl opt">);</span>
   <span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;%d</span><span class="hl esc">\n</span><span class="hl str">Pfannkuchen(%d) = %d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span>checksum<span class="hl opt">,</span>n<span class="hl opt">,</span>maxflips<span class="hl opt">);</span>
<span class="hl opt">}</span>
