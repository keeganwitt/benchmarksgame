<span class="hl slc">--</span>
<span class="hl slc">-- The Computer Language Benchmarks Game</span>
<span class="hl slc">-- http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">--</span>
<span class="hl slc">-- contributed by Sergei Matusevich 2007</span>
<span class="hl slc">-- modified by Tim Newsham</span>
<span class="hl slc">-- modified by Stephen Blackheath 2009, v1.0</span>
<span class="hl slc">-- mostly redone by Louis Wasserman, 2010</span>

<span class="hl slc">-- Compile command: ghc --make -O2 -threaded regex.hs -o regex</span>
<span class="hl slc">-- Run command:     ./regex +RTS -N4 -qm -qw -H250M       (quad core)</span>
<span class="hl slc">--                  ./regex +RTS -H250M               (single core)</span>
<span class="hl slc">-- </span>
<span class="hl slc">-- Note for future reference: with GHC HEAD as of 6/13/10,</span>
<span class="hl slc">-- works something like 3x as fast as GHC 6.12.1.  Reevaluate </span>
<span class="hl slc">-- in future! -LW</span>


<span class="hl kwd">import</span> Control<span class="hl opt">.</span>Concurrent
<span class="hl kwd">import</span> Control<span class="hl opt">.</span>Parallel<span class="hl opt">.</span>Strategies
<span class="hl kwd">import</span> Control<span class="hl opt">.</span>Monad
<span class="hl kwd">import</span> GHC<span class="hl opt">.</span>Conc
<span class="hl kwd">import</span> Foreign
<span class="hl kwd">import</span> Text<span class="hl opt">.</span>Regex<span class="hl opt">.</span>PCRE
<span class="hl kwd">import</span> Text<span class="hl opt">.</span>Regex<span class="hl opt">.</span>PCRE<span class="hl opt">.</span>ByteString          <span class="hl slc">-- requires haskell-regex-pcre-builtin</span>
<span class="hl kwd">import qualified</span> Data<span class="hl opt">.</span>ByteString <span class="hl kwd">as</span> B
<span class="hl kwd">import qualified</span> Data<span class="hl opt">.</span>ByteString<span class="hl opt">.</span>Internal <span class="hl kwd">as</span> BI
<span class="hl kwd">import</span> Data<span class="hl opt">.</span><span class="hl kwb">Array</span><span class="hl opt">.</span>Base
<span class="hl kwd">import</span> Data<span class="hl opt">.</span>List
<span class="hl kwd">import</span> Data<span class="hl opt">.</span>Word
<span class="hl kwd">import</span> Data<span class="hl opt">.</span>ByteString<span class="hl opt">.</span>Unsafe

subs <span class="hl opt">= [</span>
    <span class="hl opt">(</span><span class="hl str">&quot;B&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(c|g|t)&quot;</span><span class="hl opt">),</span>
    <span class="hl opt">(</span><span class="hl str">&quot;D&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(a|g|t)&quot;</span><span class="hl opt">),</span>
    <span class="hl opt">(</span><span class="hl str">&quot;H&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(a|c|t)&quot;</span><span class="hl opt">),</span>
    <span class="hl opt">(</span><span class="hl str">&quot;K&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(g|t)&quot;</span><span class="hl opt">),</span>
    <span class="hl opt">(</span><span class="hl str">&quot;M&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(a|c)&quot;</span><span class="hl opt">),</span>
    <span class="hl opt">(</span><span class="hl str">&quot;N&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(a|c|g|t)&quot;</span><span class="hl opt">),</span>
    <span class="hl opt">(</span><span class="hl str">&quot;R&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(a|g)&quot;</span><span class="hl opt">),</span>
    <span class="hl opt">(</span><span class="hl str">&quot;S&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(c|g)&quot;</span><span class="hl opt">),</span>
    <span class="hl opt">(</span><span class="hl str">&quot;V&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(a|c|g)&quot;</span><span class="hl opt">),</span>
    <span class="hl opt">(</span><span class="hl str">&quot;W&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(a|t)&quot;</span><span class="hl opt">),</span>
    <span class="hl opt">(</span><span class="hl str">&quot;Y&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(c|t)&quot;</span><span class="hl opt">)]</span>

main <span class="hl opt">=</span> <span class="hl kwd">do</span>
  file <span class="hl opt">&lt;-</span> B<span class="hl opt">.</span><span class="hl kwc">getContents</span>
  <span class="hl kwd">let</span> variants <span class="hl opt">=</span> <span class="hl kwc">map</span> <span class="hl opt">(\</span> x <span class="hl opt">-&gt; (</span>x<span class="hl opt">,</span> makeRegex x<span class="hl opt">)) [</span>
	<span class="hl str">&quot;agggtaaa|tttaccct&quot;</span><span class="hl opt">,</span>
	<span class="hl str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span><span class="hl opt">,</span>
	<span class="hl str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span><span class="hl opt">,</span>
	<span class="hl str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span><span class="hl opt">,</span>
	<span class="hl str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span><span class="hl opt">,</span>
	<span class="hl str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span><span class="hl opt">,</span>
	<span class="hl str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span><span class="hl opt">,</span>
	<span class="hl str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span><span class="hl opt">,</span>
	<span class="hl str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span> <span class="hl opt">]  :: [(</span><span class="hl kwb">String</span><span class="hl opt">,</span> Regex<span class="hl opt">)]</span>
  <span class="hl kwd">let</span> <span class="hl opt">[</span>s1<span class="hl opt">,</span>s2<span class="hl opt">,</span>s3<span class="hl opt">] =</span> <span class="hl kwc">map</span> <span class="hl opt">(</span>B<span class="hl opt">.</span><span class="hl kwc">concat</span> <span class="hl opt">.</span> <span class="hl kwc">tail</span><span class="hl opt">) $</span>
                <span class="hl kwc">groupBy</span> notHeader <span class="hl opt">$</span> B<span class="hl opt">.</span><span class="hl kwa">split</span> <span class="hl opt">(</span>BI<span class="hl opt">.</span>c2w <span class="hl opt">'</span><span class="hl esc">\n</span><span class="hl opt">')</span> file
      showVars <span class="hl opt">:: (</span><span class="hl kwb">String</span><span class="hl opt">,</span> Regex<span class="hl opt">) -&gt;</span> <span class="hl kwb">String</span>
      showVars <span class="hl opt">(</span>rx<span class="hl opt">,</span>r<span class="hl opt">) =</span> <span class="hl kwd">let</span> m2 <span class="hl opt">=</span> match r s2<span class="hl opt">;</span> m3 <span class="hl opt">=</span> match r s3 <span class="hl opt">::</span> <span class="hl kwb">Int</span> <span class="hl kwd">in</span>
      	m2 `par` m3 `<span class="hl kwc">seq</span>` <span class="hl opt">(</span>rx <span class="hl opt">++ ' ' :</span> <span class="hl kwc">show</span> <span class="hl opt">(</span>m2 <span class="hl opt">+</span> m3<span class="hl opt">))</span>
      results <span class="hl opt">=</span> <span class="hl kwc">map</span> showVars variants <span class="hl opt">++ [</span>
                  <span class="hl str">&quot;&quot;</span><span class="hl opt">,</span>
                  <span class="hl kwc">show</span> <span class="hl opt">$</span> B<span class="hl opt">.</span><span class="hl kwa">length</span> file<span class="hl opt">,</span>
                  <span class="hl kwc">show</span> <span class="hl opt">$</span> B<span class="hl opt">.</span><span class="hl kwa">length</span> s1 <span class="hl opt">+</span> B<span class="hl opt">.</span><span class="hl kwa">length</span> s2 <span class="hl opt">+</span> B<span class="hl opt">.</span><span class="hl kwa">length</span> s3<span class="hl opt">]</span>
  store <span class="hl opt">&lt;-</span> newEmptyMVar
  <span class="hl kwd">let</span> chunks <span class="hl opt">=</span> fragment <span class="hl num">20000</span> s2  <span class="hl slc">-- break into chunks to parallelize, which</span>
                                 <span class="hl slc">-- is possible as our regexes are 1 char long</span>
  s1 `<span class="hl kwc">seq</span>` s2 `<span class="hl kwc">seq</span>` s3 `<span class="hl kwc">seq</span>` <span class="hl opt">(</span>variants `using` parList <span class="hl opt">(</span>evalTuple2 r0 rseq<span class="hl opt">))</span> `par` 
  	forkIO <span class="hl opt">(</span>parallel <span class="hl opt">(</span><span class="hl kwc">map</span> substituteAll chunks<span class="hl opt">) &gt;&gt;=</span> putMVar store<span class="hl opt">)</span>
  	<span class="hl slc">-- do regex substitutions</span>
  <span class="hl kwc">mapM_ putStrLn</span> <span class="hl opt">(</span>results `using` parList rdeepseq<span class="hl opt">)</span>
  chunks<span class="hl opt">' &lt;-</span> takeMVar store
  <span class="hl kwc">print</span> <span class="hl opt">$</span> B<span class="hl opt">.</span><span class="hl kwa">length</span> s1 <span class="hl opt">+</span> B<span class="hl opt">.</span><span class="hl kwa">length</span> s3 <span class="hl opt">+</span> chunks<span class="hl opt">'</span>
  <span class="hl kwd">where</span> notHeader _ s <span class="hl opt">=</span> B<span class="hl opt">.</span><span class="hl kwc">null</span> s || B<span class="hl opt">.</span><span class="hl kwc">head</span> s <span class="hl opt">/= (</span>BI<span class="hl opt">.</span>c2w <span class="hl opt">'&gt;')</span>

<span class="hl slc">-- Drop in replacement for sequence</span>
parallel <span class="hl opt">:: [</span><span class="hl kwb">IO Int</span><span class="hl opt">] -&gt;</span> <span class="hl kwb">IO Int</span>
parallel actions <span class="hl opt">=</span> <span class="hl kwd">do</span>
    vars <span class="hl opt">&lt;-</span> <span class="hl kwc">mapM</span> <span class="hl opt">(\</span> action <span class="hl opt">-&gt;</span> <span class="hl kwd">do</span>
        var <span class="hl opt">&lt;-</span> newEmptyMVar
        forkIO <span class="hl opt">$</span> <span class="hl kwd">do</span>
            answer <span class="hl opt">&lt;-</span> action
            putMVar var <span class="hl opt">$!</span> answer
        <span class="hl kwc">return</span> var<span class="hl opt">)</span> actions
    <span class="hl kwc">foldM</span> <span class="hl opt">(\ !</span>x v <span class="hl opt">-&gt;</span> <span class="hl kwc">liftM</span> <span class="hl opt">(+</span>x<span class="hl opt">) (</span>takeMVar v<span class="hl opt">))</span> <span class="hl num">0</span> vars

fragment <span class="hl opt">::</span> <span class="hl kwb">Int</span> <span class="hl opt">-&gt;</span> B<span class="hl opt">.</span>ByteString <span class="hl opt">-&gt; [</span>B<span class="hl opt">.</span>ByteString<span class="hl opt">]</span>
fragment chunkSize bs <span class="hl opt">=</span> <span class="hl kwd">if</span> B<span class="hl opt">.</span><span class="hl kwc">null</span> bs <span class="hl kwd">then</span> <span class="hl opt">[]</span> <span class="hl kwd">else</span> 
    <span class="hl kwd">case</span> B<span class="hl opt">.</span><span class="hl kwc">splitAt</span> chunkSize bs <span class="hl kwd">of</span>
    	<span class="hl opt">(</span>start<span class="hl opt">,</span> <span class="hl kwc">rem</span><span class="hl opt">) -&gt;</span> start <span class="hl opt">:</span> fragment chunkSize <span class="hl kwc">rem</span>

<span class="hl slc">-- Precompile regexes</span>
subRegexes <span class="hl opt">:: [(</span>Regex<span class="hl opt">,</span> B<span class="hl opt">.</span>ByteString<span class="hl opt">)]</span>
subRegexes <span class="hl opt">=</span> <span class="hl kwc">flip map</span> subs <span class="hl opt">$ \(</span>pattern<span class="hl opt">,</span> sub<span class="hl opt">) -&gt;</span>	
    <span class="hl opt">(</span>makeRegex pattern <span class="hl opt">::</span> Regex<span class="hl opt">,</span> B<span class="hl opt">.</span>pack <span class="hl opt">(</span><span class="hl kwc">map</span> BI<span class="hl opt">.</span>c2w sub<span class="hl opt">))</span>

extend <span class="hl opt">::</span> B<span class="hl opt">.</span>ByteString <span class="hl opt">-&gt;</span> <span class="hl kwb">IO</span> B<span class="hl opt">.</span>ByteString
extend src <span class="hl opt">=</span> <span class="hl kwd">do</span>
	destFP <span class="hl opt">&lt;-</span> BI<span class="hl opt">.</span>mallocByteString <span class="hl opt">(</span>B<span class="hl opt">.</span><span class="hl kwa">length</span> src <span class="hl opt">*</span> <span class="hl num">3</span><span class="hl opt">)</span>
	copyBS src destFP

copyBS <span class="hl opt">::</span> B<span class="hl opt">.</span>ByteString <span class="hl opt">-&gt;</span> ForeignPtr Word8 <span class="hl opt">-&gt;</span> <span class="hl kwb">IO</span> B<span class="hl opt">.</span>ByteString
copyBS <span class="hl opt">(</span>BI<span class="hl opt">.</span>PS srcFP srcOff srcLen<span class="hl opt">)</span> destFP <span class="hl opt">=</span> withForeignPtr srcFP <span class="hl opt">$ \</span> src0 <span class="hl opt">-&gt;</span>
	withForeignPtr destFP <span class="hl opt">$ \</span> dest0 <span class="hl opt">-&gt;</span> <span class="hl kwd">do</span>
	  copyArray dest0 <span class="hl opt">(</span>src0 <span class="hl opt">+!</span> srcOff<span class="hl opt">)</span> srcLen
	  <span class="hl kwc">return</span> <span class="hl opt">(</span>BI<span class="hl opt">.</span>PS destFP <span class="hl num">0</span> srcLen<span class="hl opt">)</span>

substituteAll <span class="hl opt">::</span> B<span class="hl opt">.</span>ByteString <span class="hl opt">-&gt;</span> <span class="hl kwb">IO Int</span>
substituteAll <span class="hl opt">!</span>txt<span class="hl opt">&#64;(</span>BI<span class="hl opt">.</span>PS srcFP srcOff srcLen<span class="hl opt">) =</span> allocaArray <span class="hl opt">(</span>B<span class="hl opt">.</span><span class="hl kwa">length</span> txt <span class="hl opt">*</span> <span class="hl num">3</span><span class="hl opt">) $ \</span> destP <span class="hl opt">-&gt;</span> <span class="hl kwd">do</span>
    destFP <span class="hl opt">&lt;-</span> newForeignPtr_ destP
    withForeignPtr srcFP <span class="hl opt">$ \</span> srcP <span class="hl opt">-&gt;</span> copyArray destP <span class="hl opt">(</span>srcP `advancePtr` srcOff<span class="hl opt">)</span> srcLen
    <span class="hl kwd">let</span> dest <span class="hl opt">=</span> BI<span class="hl opt">.</span>PS destFP <span class="hl num">0</span> srcLen
    allocaArray <span class="hl opt">(</span>B<span class="hl opt">.</span><span class="hl kwa">length</span> txt <span class="hl opt">*</span> <span class="hl num">3</span><span class="hl opt">) $ \</span> tmp <span class="hl opt">-&gt;</span> <span class="hl kwd">do</span>
    	tmpF <span class="hl opt">&lt;-</span> newForeignPtr_ tmp
    	<span class="hl kwc">foldM</span> <span class="hl opt">(\ !</span>n sub <span class="hl opt">-&gt;</span> <span class="hl kwd">do</span>
       		n<span class="hl opt">' &lt;-</span> substitute_ tmp <span class="hl opt">(</span>BI<span class="hl opt">.</span>PS destFP <span class="hl num">0</span> n<span class="hl opt">)</span> sub 
       		copyArray destP tmp n<span class="hl opt">'</span>
       		<span class="hl kwc">return</span> n<span class="hl opt">')</span> srcLen subRegexes

<span class="hl opt">(+!) =</span> advancePtr

substitute_ <span class="hl opt">::</span> Ptr Word8 <span class="hl opt">-&gt;</span> B<span class="hl opt">.</span>ByteString <span class="hl opt">-&gt; (</span>Regex<span class="hl opt">,</span> B<span class="hl opt">.</span>ByteString<span class="hl opt">) -&gt;</span> <span class="hl kwb">IO Int</span>
substitute_ <span class="hl opt">!</span>p xs<span class="hl opt">&#64;(</span>BI<span class="hl opt">.</span>PS fp0 i0 l0<span class="hl opt">) (</span>regex<span class="hl opt">,</span> BI<span class="hl opt">.</span>PS fpSub iSub lSub<span class="hl opt">) =</span> 
  withForeignPtr fp0 <span class="hl opt">$ \</span> p00 <span class="hl opt">-&gt;</span> <span class="hl kwd">let</span> p0 <span class="hl opt">=</span> p00 <span class="hl opt">+!</span> i0 <span class="hl kwd">in</span> withForeignPtr fpSub <span class="hl opt">$ \</span> pSub <span class="hl opt">-&gt;</span> <span class="hl kwd">do</span>
	len <span class="hl opt">&lt;-</span> <span class="hl kwd">do</span>
		<span class="hl kwd">let</span> go <span class="hl opt">!</span>i <span class="hl opt">!</span>j <span class="hl opt">=</span> <span class="hl kwd">do</span>
		      match <span class="hl opt">&lt;-</span> execute regex <span class="hl opt">(</span>unsafeDrop i xs<span class="hl opt">)</span>
		      <span class="hl kwd">case</span> match <span class="hl kwd">of</span>
			Right <span class="hl opt">(</span>Just arr<span class="hl opt">) -&gt;</span> <span class="hl kwd">do</span>
			    <span class="hl kwd">let</span> <span class="hl opt">!(!</span>off<span class="hl opt">, !</span>len<span class="hl opt">) =</span> arr `unsafeAt` <span class="hl num">0</span>
			    copyArray <span class="hl opt">(</span>p <span class="hl opt">+!</span> j<span class="hl opt">) (</span>p0 <span class="hl opt">+!</span> i<span class="hl opt">)</span> off
			    copyArray <span class="hl opt">(</span>p <span class="hl opt">+! (</span>j <span class="hl opt">+</span> off<span class="hl opt">)) (</span>pSub <span class="hl opt">+!</span> iSub<span class="hl opt">)</span> lSub
			    go <span class="hl opt">(</span>i <span class="hl opt">+</span> off <span class="hl opt">+</span> len<span class="hl opt">) (</span>j <span class="hl opt">+</span> off <span class="hl opt">+</span> lSub<span class="hl opt">)</span>
			_ <span class="hl opt">-&gt;</span> copyArray <span class="hl opt">(</span>p <span class="hl opt">+!</span> j<span class="hl opt">) (</span>p0 <span class="hl opt">+!</span> i<span class="hl opt">) (</span>l0 <span class="hl opt">-</span> i<span class="hl opt">) &gt;&gt;</span> <span class="hl kwc">return</span> <span class="hl opt">(</span>j <span class="hl opt">+</span> l0 <span class="hl opt">-</span> i<span class="hl opt">)</span>
		go <span class="hl num">0 0</span>
	<span class="hl kwc">return</span> len <span class="hl slc">-- destFP now points to the substituted string</span>
