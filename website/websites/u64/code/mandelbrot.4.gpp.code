<span class="hl slc">// The Computer Language Benchmarks Game</span>
<span class="hl slc">// http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">//</span>
<span class="hl slc">// contributed by Elam Kolenovic</span>
<span class="hl slc">// modified by Sean Stanek</span>
<span class="hl slc">//</span>
<span class="hl slc">// Changes (2013-08-31)</span>
<span class="hl slc">//   - changed loop type to be more identical to the current top mandlebrot</span>
<span class="hl slc">//     program (Fortran), dated Tue, 15 Jan 2013 04:47:47 GMT</span>
<span class="hl slc">//</span>
<span class="hl slc">// Changes (2013-05-07)</span>
<span class="hl slc">//   - changed omp schedule for more even distribution of work</span>
<span class="hl slc">//   - changed loop variables to signed integer because msvc was complaining</span>
<span class="hl slc">//     when omp was enabled</span>
<span class="hl slc">//   - replaced std::copy and std::fill by one loop. slightly faster.</span>
<span class="hl slc">//   - swapped order of tests in for-i-loop. slightly faster.</span>
<span class="hl slc">//</span>
<span class="hl slc">// Changes (2013-04-19)</span>
<span class="hl slc">//   - using omp</span>
<span class="hl slc">//   - use buffer and fwrite at end instead of putchar</span>
<span class="hl slc">//   - pre-calculate cr0[]</span>
<span class="hl slc">//   - rename variables and use underscore before the index part of the name</span>
<span class="hl slc">//   - inverted bit tests, better performance under MSVC</span>
<span class="hl slc">//   - optional argument for file output, usefull in windows shell</span>
<span class="hl slc">//</span>
<span class="hl slc">// Changes (2013-04-07):</span>
<span class="hl slc">//   - removed unnecessary arrays, faster especially on 32 bits</span>
<span class="hl slc">//   - using putchar instead of iostreams, slightly faster</span>
<span class="hl slc">//   - using namespace std for readability</span>
<span class="hl slc">//   - replaced size_t with unsigned</span>
<span class="hl slc">//   - removed some includes</span>

<span class="hl ppc">#include &lt;cstdio&gt;</span>
<span class="hl ppc">#include &lt;cstdlib&gt;</span>
<span class="hl ppc">#include &lt;vector&gt;</span>
<span class="hl ppc">#include &lt;math.h&gt;</span>

<span class="hl kwc">typedef</span> <span class="hl kwb">unsigned char</span> Byte<span class="hl opt">;</span>

<span class="hl kwa">using namespace</span> std<span class="hl opt">;</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span><span class="hl opt">*</span> argv<span class="hl opt">[])</span>
<span class="hl opt">{</span>
    <span class="hl kwb">const int</span>    N              <span class="hl opt">=</span> <span class="hl kwd">max</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">, (</span>argc <span class="hl opt">&gt;</span> <span class="hl num">1</span><span class="hl opt">)</span> ? <span class="hl kwd">atoi</span><span class="hl opt">(</span>argv<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">]) :</span> <span class="hl num">0</span><span class="hl opt">);</span>
    <span class="hl kwb">const int</span>    width          <span class="hl opt">=</span> N<span class="hl opt">;</span>
    <span class="hl kwb">const int</span>    height         <span class="hl opt">=</span> N<span class="hl opt">;</span>
    <span class="hl kwb">const int</span>    max_x          <span class="hl opt">= (</span>width <span class="hl opt">+</span> <span class="hl num">7</span><span class="hl opt">) /</span> <span class="hl num">8</span><span class="hl opt">;</span>
    <span class="hl kwb">const int</span>    max_iterations <span class="hl opt">=</span> <span class="hl num">50</span><span class="hl opt">;</span>
    <span class="hl kwb">const double</span> limit          <span class="hl opt">=</span> <span class="hl num">2.0</span><span class="hl opt">;</span>
    <span class="hl kwb">const double</span> limit_sq       <span class="hl opt">=</span> limit <span class="hl opt">*</span> limit<span class="hl opt">;</span>

    vector<span class="hl opt">&lt;</span>Byte<span class="hl opt">&gt;</span> <span class="hl kwd">buffer</span><span class="hl opt">(</span>height <span class="hl opt">*</span> max_x<span class="hl opt">);</span>

    vector<span class="hl opt">&lt;</span><span class="hl kwb">double</span><span class="hl opt">&gt;</span> <span class="hl kwd">cr0</span><span class="hl opt">(</span><span class="hl num">8</span> <span class="hl opt">*</span> max_x<span class="hl opt">);</span>
<span class="hl ppc">#pragma omp parallel for</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> x <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> x <span class="hl opt">&lt;</span> max_x<span class="hl opt">; ++</span>x<span class="hl opt">)</span>
    <span class="hl opt">{</span>
        <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> k <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> k <span class="hl opt">&lt;</span> <span class="hl num">8</span><span class="hl opt">; ++</span>k<span class="hl opt">)</span>
        <span class="hl opt">{</span>
            <span class="hl kwb">const int</span> xk <span class="hl opt">=</span> <span class="hl num">8</span> <span class="hl opt">*</span> x <span class="hl opt">+</span> k<span class="hl opt">;</span>
            cr0<span class="hl opt">[</span>xk<span class="hl opt">] = (</span><span class="hl num">2.0</span> <span class="hl opt">*</span> xk<span class="hl opt">) /</span> width <span class="hl opt">-</span> <span class="hl num">1.5</span><span class="hl opt">;</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span>

<span class="hl ppc">#pragma omp parallel for schedule(guided)</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> y <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> y <span class="hl opt">&lt;</span> height<span class="hl opt">; ++</span>y<span class="hl opt">)</span>
    <span class="hl opt">{</span>
        Byte<span class="hl opt">*</span> line <span class="hl opt">= &amp;</span>buffer<span class="hl opt">[</span>y <span class="hl opt">*</span> max_x<span class="hl opt">];</span>

        <span class="hl kwb">const double</span> ci0 <span class="hl opt">=</span> <span class="hl num">2.0</span> <span class="hl opt">*</span> y <span class="hl opt">/</span> height <span class="hl opt">-</span> <span class="hl num">1.0</span><span class="hl opt">;</span>

        Byte anyescape <span class="hl opt">=</span> <span class="hl num">0xff</span><span class="hl opt">;</span>

        <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> x <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> x <span class="hl opt">&lt;</span> max_x<span class="hl opt">; ++</span>x<span class="hl opt">)</span>
        <span class="hl opt">{</span>
            <span class="hl kwb">const double</span><span class="hl opt">*</span> cr0_x <span class="hl opt">= &amp;</span>cr0<span class="hl opt">[</span><span class="hl num">8</span> <span class="hl opt">*</span> x<span class="hl opt">];</span>
            <span class="hl kwb">double</span> cr<span class="hl opt">[</span><span class="hl num">8</span><span class="hl opt">];</span>
            <span class="hl kwb">double</span> ci<span class="hl opt">[</span><span class="hl num">8</span><span class="hl opt">];</span>
            <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> k <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> k <span class="hl opt">&lt;</span> <span class="hl num">8</span><span class="hl opt">; ++</span>k<span class="hl opt">)</span>
            <span class="hl opt">{</span>
                cr<span class="hl opt">[</span>k<span class="hl opt">] =</span> cr0_x<span class="hl opt">[</span>k<span class="hl opt">];</span>
                ci<span class="hl opt">[</span>k<span class="hl opt">] =</span> ci0<span class="hl opt">;</span>
            <span class="hl opt">}</span>

            <span class="hl kwa">if</span><span class="hl opt">(!</span>anyescape<span class="hl opt">)</span>
            <span class="hl opt">{</span>
                Byte bits <span class="hl opt">=</span> <span class="hl num">0xFF</span><span class="hl opt">;</span>
                <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> bits <span class="hl opt">&amp;&amp;</span> i <span class="hl opt">&lt;</span> max_iterations<span class="hl opt">; ++</span>i<span class="hl opt">)</span>
                <span class="hl opt">{</span>
                    Byte bit_k <span class="hl opt">=</span> <span class="hl num">0x80</span><span class="hl opt">;</span>
                    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> k <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> k <span class="hl opt">&lt;</span> <span class="hl num">8</span><span class="hl opt">; ++</span>k<span class="hl opt">)</span>
                    <span class="hl opt">{</span>
                        <span class="hl kwa">if</span> <span class="hl opt">(</span>bits <span class="hl opt">&amp;</span> bit_k<span class="hl opt">)</span>
                        <span class="hl opt">{</span>
                            <span class="hl kwb">const double</span> cr_k    <span class="hl opt">=</span> cr<span class="hl opt">[</span>k<span class="hl opt">];</span>
                            <span class="hl kwb">const double</span> ci_k    <span class="hl opt">=</span> ci<span class="hl opt">[</span>k<span class="hl opt">];</span>
                            <span class="hl kwb">const double</span> cr_k_sq <span class="hl opt">=</span> cr_k <span class="hl opt">*</span> cr_k<span class="hl opt">;</span>
                            <span class="hl kwb">const double</span> ci_k_sq <span class="hl opt">=</span> ci_k <span class="hl opt">*</span> ci_k<span class="hl opt">;</span>

                            cr<span class="hl opt">[</span>k<span class="hl opt">] =</span> cr_k_sq <span class="hl opt">-</span> ci_k_sq <span class="hl opt">+</span> cr0_x<span class="hl opt">[</span>k<span class="hl opt">];</span>
                            ci<span class="hl opt">[</span>k<span class="hl opt">] =</span> <span class="hl num">2.0</span> <span class="hl opt">*</span> cr_k <span class="hl opt">*</span> ci_k <span class="hl opt">+</span> ci0<span class="hl opt">;</span>

                            <span class="hl kwa">if</span> <span class="hl opt">(</span>cr_k_sq <span class="hl opt">+</span> ci_k_sq <span class="hl opt">&gt;</span> limit_sq<span class="hl opt">)</span>
                            <span class="hl opt">{</span>
                                bits <span class="hl opt">^=</span> bit_k<span class="hl opt">;</span>
                            <span class="hl opt">}</span>
                        <span class="hl opt">}</span>
                        bit_k <span class="hl opt">&gt;&gt;=</span> <span class="hl num">1</span><span class="hl opt">;</span>
                    <span class="hl opt">}</span>
                <span class="hl opt">}</span>
                line<span class="hl opt">[</span>x<span class="hl opt">] =</span> bits<span class="hl opt">;</span>
                anyescape <span class="hl opt">=</span> bits<span class="hl opt">;</span>
            <span class="hl opt">}</span>
            <span class="hl kwa">else</span>
            <span class="hl opt">{</span>
                Byte bits <span class="hl opt">=</span> <span class="hl num">0xFF</span><span class="hl opt">;</span>
                <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> bits <span class="hl opt">&amp;&amp;</span> i <span class="hl opt">&lt;</span> max_iterations<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">; ++</span>i<span class="hl opt">)</span>
                <span class="hl opt">{</span>
                    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> k <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> k <span class="hl opt">&lt;</span> <span class="hl num">8</span><span class="hl opt">; ++</span>k<span class="hl opt">)</span>
                    <span class="hl opt">{</span>
                        <span class="hl kwb">const double</span> cr_k    <span class="hl opt">=</span> cr<span class="hl opt">[</span>k<span class="hl opt">];</span>
                        <span class="hl kwb">const double</span> ci_k    <span class="hl opt">=</span> ci<span class="hl opt">[</span>k<span class="hl opt">];</span>
                        <span class="hl kwb">const double</span> cr_k_sq <span class="hl opt">=</span> cr_k <span class="hl opt">*</span> cr_k<span class="hl opt">;</span>
                        <span class="hl kwb">const double</span> ci_k_sq <span class="hl opt">=</span> ci_k <span class="hl opt">*</span> ci_k<span class="hl opt">;</span>

                        cr<span class="hl opt">[</span>k<span class="hl opt">] =</span> cr_k_sq <span class="hl opt">-</span> ci_k_sq <span class="hl opt">+</span> cr0_x<span class="hl opt">[</span>k<span class="hl opt">];</span>
                        ci<span class="hl opt">[</span>k<span class="hl opt">] =</span> <span class="hl num">2.0</span> <span class="hl opt">*</span> cr_k <span class="hl opt">*</span> ci_k <span class="hl opt">+</span> ci0<span class="hl opt">;</span>
                    <span class="hl opt">}</span>
                <span class="hl opt">}</span>

                Byte bit_k <span class="hl opt">=</span> <span class="hl num">0x80</span><span class="hl opt">;</span>
                <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> k <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> k <span class="hl opt">&lt;</span> <span class="hl num">8</span><span class="hl opt">; ++</span>k<span class="hl opt">)</span>
                <span class="hl opt">{</span>
                    <span class="hl kwb">const double</span> cr_k    <span class="hl opt">=</span> cr<span class="hl opt">[</span>k<span class="hl opt">];</span>
                    <span class="hl kwb">const double</span> ci_k    <span class="hl opt">=</span> ci<span class="hl opt">[</span>k<span class="hl opt">];</span>
                    <span class="hl kwb">const double</span> sum <span class="hl opt">=</span> cr_k <span class="hl opt">*</span> cr_k <span class="hl opt">+</span> ci_k <span class="hl opt">*</span> ci_k<span class="hl opt">;</span>

                    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">isnan</span><span class="hl opt">(</span>sum<span class="hl opt">) ||</span> sum <span class="hl opt">&gt;</span> limit_sq<span class="hl opt">)</span>
                    <span class="hl opt">{</span>
                        bits <span class="hl opt">^=</span> bit_k<span class="hl opt">;</span>
                    <span class="hl opt">}</span>
                    bit_k <span class="hl opt">&gt;&gt;=</span> <span class="hl num">1</span><span class="hl opt">;</span>
                <span class="hl opt">}</span>

                line<span class="hl opt">[</span>x<span class="hl opt">] =</span> bits<span class="hl opt">;</span>
                anyescape <span class="hl opt">=</span> bits<span class="hl opt">;</span>
            <span class="hl opt">}</span>

        <span class="hl opt">}</span>
    <span class="hl opt">}</span>

    <span class="hl kwb">FILE</span><span class="hl opt">*</span> out <span class="hl opt">= (</span>argc <span class="hl opt">==</span> <span class="hl num">3</span><span class="hl opt">)</span> ? <span class="hl kwd">fopen</span><span class="hl opt">(</span>argv<span class="hl opt">[</span><span class="hl num">2</span><span class="hl opt">],</span> <span class="hl str">&quot;wb&quot;</span><span class="hl opt">) :</span> stdout<span class="hl opt">;</span>
    <span class="hl kwd">fprintf</span><span class="hl opt">(</span>out<span class="hl opt">,</span> <span class="hl str">&quot;P4</span><span class="hl esc">\n</span><span class="hl str">%u %u</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> width<span class="hl opt">,</span> height<span class="hl opt">);</span>
    <span class="hl kwd">fwrite</span><span class="hl opt">(&amp;</span>buffer<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">],</span> buffer<span class="hl opt">.</span><span class="hl kwd">size</span><span class="hl opt">(),</span> <span class="hl num">1</span><span class="hl opt">,</span> out<span class="hl opt">);</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span>out <span class="hl opt">!=</span> stdout<span class="hl opt">)</span>
    <span class="hl opt">{</span>
        <span class="hl kwd">fclose</span><span class="hl opt">(</span>out<span class="hl opt">);</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
