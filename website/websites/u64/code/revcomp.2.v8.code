<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   Contributed by Matthew Wilson</span>
<span class="hl com">*/</span>

<span class="hl opt">(</span><span class="hl kwa">function</span><span class="hl opt">(</span>complement<span class="hl opt">,</span>print<span class="hl opt">,</span>readline<span class="hl opt">) {</span>
  <span class="hl kwa">var</span> l<span class="hl opt">,</span> seq<span class="hl opt">=</span><span class="hl str">&quot;&quot;</span><span class="hl opt">;</span>
  <span class="hl kwd">print</span><span class="hl opt">(</span>l <span class="hl opt">=</span> <span class="hl kwd">readline</span><span class="hl opt">());</span>
  <span class="hl kwa">for</span> <span class="hl opt">(;;) {</span> <span class="hl kwa">try</span> <span class="hl opt">{</span>
    <span class="hl kwa">if</span> <span class="hl opt">((</span>l <span class="hl opt">=</span> <span class="hl kwd">readline</span><span class="hl opt">()).</span>length <span class="hl opt">==</span> <span class="hl num">60</span><span class="hl opt">) {</span>
      seq <span class="hl opt">+=</span> l<span class="hl opt">;</span>
    <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(/</span>^<span class="hl opt">&gt;/.</span><span class="hl kwd">test</span><span class="hl opt">(</span>l<span class="hl opt">)) {</span>
      <span class="hl kwd">complement</span><span class="hl opt">(</span>seq<span class="hl opt">);</span>
      seq <span class="hl opt">=</span> <span class="hl str">&quot;&quot;</span><span class="hl opt">;</span>
      <span class="hl kwd">print</span><span class="hl opt">(</span>l<span class="hl opt">);</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
      seq <span class="hl opt">+=</span> l<span class="hl opt">;</span>
    <span class="hl opt">}</span>
  <span class="hl opt">}</span> <span class="hl kwa">catch</span><span class="hl opt">(</span>e<span class="hl opt">){</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">typeof</span><span class="hl opt">(</span>seq<span class="hl opt">)!=</span><span class="hl str">'undefined'</span> <span class="hl opt">&amp;&amp;</span> seq<span class="hl opt">.</span>length <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">) {</span>
      <span class="hl kwd">complement</span><span class="hl opt">(</span>seq<span class="hl opt">);</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">break</span><span class="hl opt">;</span>
  <span class="hl opt">}}</span>
<span class="hl opt">})((</span><span class="hl kwa">function</span><span class="hl opt">(</span>complement<span class="hl opt">,</span>print<span class="hl opt">) {</span>
  <span class="hl kwa">return function</span><span class="hl opt">(</span>seq<span class="hl opt">) {</span>
    <span class="hl kwa">var</span> l <span class="hl opt">=</span> seq<span class="hl opt">.</span>length<span class="hl opt">;</span>
    <span class="hl kwa">for</span> <span class="hl opt">(;;) {</span>
      <span class="hl kwa">var</span> line<span class="hl opt">=</span><span class="hl str">&quot;&quot;</span><span class="hl opt">;</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>l <span class="hl opt">&gt;=</span> <span class="hl num">60</span><span class="hl opt">) {</span>
        <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i<span class="hl opt">=</span>l<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">,</span> j<span class="hl opt">=</span>l<span class="hl opt">-</span><span class="hl num">61</span><span class="hl opt">;</span> i<span class="hl opt">&gt;</span>j<span class="hl opt">; --</span>i<span class="hl opt">) {</span>
          line <span class="hl opt">+=</span> complement<span class="hl opt">[</span>seq<span class="hl opt">.</span><span class="hl kwd">charCodeAt</span><span class="hl opt">(</span>i<span class="hl opt">)]</span>
        <span class="hl opt">}</span>
        l<span class="hl opt">-=</span><span class="hl num">60</span><span class="hl opt">;</span>
        <span class="hl kwd">print</span><span class="hl opt">(</span>line<span class="hl opt">);</span>
      <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span>l <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">) {</span>
        <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwa">var</span> i<span class="hl opt">=</span>l<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">;</span> i<span class="hl opt">&gt;-</span><span class="hl num">1</span><span class="hl opt">; --</span>i<span class="hl opt">) {</span>
          line <span class="hl opt">+=</span> complement<span class="hl opt">[</span>seq<span class="hl opt">.</span><span class="hl kwd">charCodeAt</span><span class="hl opt">(</span>i<span class="hl opt">)]</span>
        <span class="hl opt">}</span>
        <span class="hl kwd">print</span><span class="hl opt">(</span>line<span class="hl opt">);</span>
        <span class="hl kwa">break</span><span class="hl opt">;</span>
      <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
        <span class="hl kwa">break</span><span class="hl opt">;</span>
      <span class="hl opt">}</span>
    <span class="hl opt">}</span>
  <span class="hl opt">}</span>
<span class="hl opt">})((</span><span class="hl kwa">function</span><span class="hl opt">() {</span>
  <span class="hl kwa">var</span> complement<span class="hl opt">=[],</span>
    keys <span class="hl opt">=</span><span class="hl str">'WSATUGCYRKMBDHVNwsatugcyrkmbdhvn'</span><span class="hl opt">,</span>
    comps<span class="hl opt">=</span><span class="hl str">'WSTAACGRYMKVHDBNWSTAACGRYMKVHDBN'</span><span class="hl opt">;</span>
  <span class="hl kwa">for</span><span class="hl opt">(</span><span class="hl kwa">var</span> i<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span> i<span class="hl opt">&lt;</span><span class="hl num">32</span><span class="hl opt">; ++</span>i<span class="hl opt">)</span>
    complement<span class="hl opt">[</span>keys<span class="hl opt">.</span><span class="hl kwd">charCodeAt</span><span class="hl opt">(</span>i<span class="hl opt">)]</span>
      <span class="hl opt">=</span> comps<span class="hl kwc">[i]</span><span class="hl opt">;</span>
  
  <span class="hl kwa">return</span> complement<span class="hl opt">;</span>
<span class="hl opt">})(),</span> print<span class="hl opt">),</span> print<span class="hl opt">,</span> readline<span class="hl opt">)</span>
