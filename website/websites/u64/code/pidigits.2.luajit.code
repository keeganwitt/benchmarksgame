<span class="hl slc">-- The Computer Language Shootout</span>
<span class="hl slc">-- http://shootout.alioth.debian.org/</span>
<span class="hl slc">-- contributed by Mike Pall</span>

<span class="hl slc">-- Start of dynamically compiled chunk.</span>
<span class="hl kwa">local</span> chunk <span class="hl sym">= [=[</span>

<span class="hl slc">-- Factory function for multi-precision number (mpn) operations.</span>
<span class="hl kwa">local function</span> <span class="hl kwd">fmm</span><span class="hl sym">(</span>fa<span class="hl sym">,</span> fb<span class="hl sym">)</span>
  <span class="hl kwa">return</span> <span class="hl kwd">loadstring</span><span class="hl sym">([[</span>
    <span class="hl kwa">return function</span><span class="hl sym">(</span>y<span class="hl sym">,</span> a<span class="hl sym">,</span> ka<span class="hl sym">,</span> b<span class="hl sym">,</span> kb<span class="hl sym">)</span>
      <span class="hl kwa">local</span> carry<span class="hl sym">,</span> n <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">, #</span>a ]]<span class="hl sym">..(</span>fb <span class="hl sym">==</span> <span class="hl num">0</span> <span class="hl kwa">and</span> <span class="hl str">&quot;&quot;</span> <span class="hl kwa">or</span> <span class="hl sym">[[</span>
      <span class="hl kwa">local</span> na<span class="hl sym">,</span> nb <span class="hl sym">=</span> n<span class="hl sym">, #</span>b <span class="hl slc">-- Need to adjust lengths. 1 element suffices here.</span>
      <span class="hl kwa">if</span> na <span class="hl sym">&gt;</span> nb <span class="hl kwa">then</span> b<span class="hl sym">[</span>na<span class="hl sym">] =</span> <span class="hl num">0</span> <span class="hl kwa">elseif</span> na <span class="hl sym">&lt;</span> nb <span class="hl kwa">then</span> a<span class="hl sym">[</span>nb<span class="hl sym">] =</span> <span class="hl num">0</span><span class="hl sym">;</span> n <span class="hl sym">=</span> nb <span class="hl kwa">end</span>
    ]]<span class="hl sym">)..[[</span>
      <span class="hl kwa">for</span> i<span class="hl sym">=</span><span class="hl num">1</span><span class="hl sym">,</span>n <span class="hl kwa">do</span> <span class="hl slc">-- Sum up all elements and propagate carry.</span>
        <span class="hl kwa">local</span> x <span class="hl sym">=</span> a<span class="hl sym">[</span>i<span class="hl sym">]</span> ]]<span class="hl sym">..(</span>fa <span class="hl sym">==</span> <span class="hl num">2</span> <span class="hl kwa">and</span> <span class="hl str">&quot;*ka&quot;</span> <span class="hl kwa">or</span> <span class="hl str">&quot;&quot;</span><span class="hl sym">)..</span>
          <span class="hl sym">(</span>fb <span class="hl sym">==</span> <span class="hl num">2</span> <span class="hl kwa">and</span> <span class="hl str">&quot;+b[i]*kb&quot;</span> <span class="hl kwa">or</span> <span class="hl sym">(</span>fb <span class="hl sym">==</span> <span class="hl num">1</span> <span class="hl kwa">and</span> <span class="hl str">&quot;+b[i]&quot;</span> <span class="hl kwa">or</span> <span class="hl str">&quot;&quot;</span><span class="hl sym">))..[[ +</span> carry
        <span class="hl kwa">if</span> x <span class="hl sym">&lt;</span> RADIX <span class="hl kwa">and</span> x <span class="hl sym">&gt;=</span> <span class="hl num">0</span> <span class="hl kwa">then</span> carry <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> y<span class="hl sym">[</span>i<span class="hl sym">] =</span> x <span class="hl slc">-- Check for overflow.</span>
        <span class="hl kwa">else local</span> d <span class="hl sym">=</span> x <span class="hl sym">%</span> RADIX<span class="hl sym">;</span> carry <span class="hl sym">= (</span>x<span class="hl sym">-</span>d<span class="hl sym">) /</span> RADIX<span class="hl sym">;</span> y<span class="hl sym">[</span>i<span class="hl sym">] =</span> d <span class="hl kwa">end</span>
      <span class="hl kwa">end</span>
      y<span class="hl sym">[</span>n<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">] =</span> <span class="hl kwa">nil</span> <span class="hl slc">-- Truncate target. 1 element suffices here.</span>
      <span class="hl kwa">if</span> carry <span class="hl sym">==</span> <span class="hl num">0</span> <span class="hl kwa">then while</span> n <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">and</span> y<span class="hl sym">[</span>n<span class="hl sym">] ==</span> <span class="hl num">0</span> <span class="hl kwa">do</span> y<span class="hl sym">[</span>n<span class="hl sym">] =</span> <span class="hl kwa">nil end</span>
      <span class="hl kwa">elseif</span> carry <span class="hl sym">== -</span><span class="hl num">1</span> <span class="hl kwa">then</span> y<span class="hl sym">[</span>n<span class="hl sym">] =</span> y<span class="hl sym">[</span>n<span class="hl sym">] -</span> RADIX <span class="hl kwa">else</span> y<span class="hl sym">[</span>n<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">] =</span> carry <span class="hl kwa">end</span>
    ]]<span class="hl sym">..(</span>fb <span class="hl sym">==</span> <span class="hl num">0</span> <span class="hl kwa">and</span> <span class="hl str">&quot;&quot;</span> <span class="hl kwa">or</span> <span class="hl sym">[[</span> <span class="hl slc">-- Undo length adjustment.</span>
      <span class="hl kwa">if</span> na <span class="hl sym">&gt;</span> nb <span class="hl kwa">then</span> b<span class="hl sym">[</span>na<span class="hl sym">] =</span> <span class="hl kwa">nil elseif</span> na <span class="hl sym">&lt;</span> nb <span class="hl kwa">and</span> y <span class="hl sym">~=</span> a <span class="hl kwa">then</span> a<span class="hl sym">[</span>nb<span class="hl sym">] =</span> <span class="hl kwa">nil end</span>
    ]]<span class="hl sym">)..[[</span>
      <span class="hl kwa">return</span> y
    <span class="hl kwa">end</span>]]<span class="hl sym">)()</span>
<span class="hl kwa">end</span>

<span class="hl slc">-- Generate needed mpn functions.</span>
<span class="hl kwa">local</span> mm_kk<span class="hl sym">,</span> mm_k1<span class="hl sym">,</span> mm_k0<span class="hl sym">,</span> mm_11 <span class="hl sym">=</span> <span class="hl kwd">fmm</span><span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">,</span> <span class="hl num">2</span><span class="hl sym">),</span> <span class="hl kwd">fmm</span><span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">),</span> <span class="hl kwd">fmm</span><span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">),</span> <span class="hl kwd">fmm</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">)</span>

<span class="hl slc">-- Choose the most efficient mpn function for y = a*ka + b*kb at run-time.</span>
<span class="hl kwa">local function</span> <span class="hl kwd">mm</span><span class="hl sym">(</span>y<span class="hl sym">,</span> a<span class="hl sym">,</span> ka<span class="hl sym">,</span> b<span class="hl sym">,</span> kb<span class="hl sym">)</span>
  <span class="hl kwa">local</span> f <span class="hl sym">=</span> mm_kk
  <span class="hl kwa">if</span> kb <span class="hl sym">==</span> <span class="hl num">0</span> <span class="hl kwa">or</span> <span class="hl sym">#</span>b <span class="hl sym">==</span> <span class="hl num">0</span> <span class="hl kwa">then if</span> ka <span class="hl sym">==</span> <span class="hl num">1</span> <span class="hl kwa">then return</span> a <span class="hl kwa">else</span> f <span class="hl sym">=</span> mm_k0 <span class="hl kwa">end</span>
  <span class="hl kwa">elseif</span> kb <span class="hl sym">==</span> <span class="hl num">1</span> <span class="hl kwa">then if</span> ka <span class="hl sym">==</span> <span class="hl num">1</span> <span class="hl kwa">then</span> f <span class="hl sym">=</span> mm_11 <span class="hl kwa">else</span> f <span class="hl sym">=</span> mm_k1 <span class="hl kwa">end end</span>
  <span class="hl kwa">return</span> <span class="hl kwd">f</span><span class="hl sym">(</span>y<span class="hl sym">,</span> a<span class="hl sym">,</span> ka<span class="hl sym">,</span> b<span class="hl sym">,</span> kb<span class="hl sym">)</span>
<span class="hl kwa">end</span>

<span class="hl slc">-- Compose matrix with numbers on the right.</span>
<span class="hl kwa">local function</span> <span class="hl kwd">compose_r</span><span class="hl sym">(</span>aq<span class="hl sym">,</span>ar<span class="hl sym">,</span>as<span class="hl sym">,</span>at<span class="hl sym">,</span> bq<span class="hl sym">,</span>br<span class="hl sym">,</span>bs<span class="hl sym">,</span>bt<span class="hl sym">)</span>
  <span class="hl kwd">mm</span><span class="hl sym">(</span>ar<span class="hl sym">,</span> ar<span class="hl sym">,</span>bq<span class="hl sym">,</span> at<span class="hl sym">,</span>br<span class="hl sym">)</span> <span class="hl kwd">mm</span><span class="hl sym">(</span>at<span class="hl sym">,</span> at<span class="hl sym">,</span>bt<span class="hl sym">,</span> ar<span class="hl sym">,</span>bs<span class="hl sym">)</span>
  <span class="hl kwd">mm</span><span class="hl sym">(</span>as<span class="hl sym">,</span> as<span class="hl sym">,</span>bt<span class="hl sym">,</span> aq<span class="hl sym">,</span>bs<span class="hl sym">)</span> <span class="hl kwd">mm</span><span class="hl sym">(</span>aq<span class="hl sym">,</span> aq<span class="hl sym">,</span>bq<span class="hl sym">,</span> <span class="hl kwa">nil</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">)</span>
<span class="hl kwa">end</span>

<span class="hl slc">-- Compose matrix with numbers on the left.</span>
<span class="hl kwa">local function</span> <span class="hl kwd">compose_l</span><span class="hl sym">(</span>aq<span class="hl sym">,</span>ar<span class="hl sym">,</span>as<span class="hl sym">,</span>at<span class="hl sym">,</span> bq<span class="hl sym">,</span>br<span class="hl sym">,</span>bs<span class="hl sym">,</span>bt<span class="hl sym">)</span>
  <span class="hl kwd">mm</span><span class="hl sym">(</span>ar<span class="hl sym">,</span> ar<span class="hl sym">,</span>bt<span class="hl sym">,</span> aq<span class="hl sym">,</span>br<span class="hl sym">)</span> <span class="hl kwd">mm</span><span class="hl sym">(</span>at<span class="hl sym">,</span> at<span class="hl sym">,</span>bt<span class="hl sym">,</span> as<span class="hl sym">,</span>br<span class="hl sym">)</span>
  <span class="hl kwd">mm</span><span class="hl sym">(</span>as<span class="hl sym">,</span> as<span class="hl sym">,</span>bq<span class="hl sym">,</span> at<span class="hl sym">,</span>bs<span class="hl sym">)</span> <span class="hl kwd">mm</span><span class="hl sym">(</span>aq<span class="hl sym">,</span> aq<span class="hl sym">,</span>bq<span class="hl sym">,</span> <span class="hl kwa">nil</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">)</span>
<span class="hl kwa">end</span>

<span class="hl slc">-- Extract one digit.</span>
<span class="hl kwa">local</span> u<span class="hl sym">,</span> v<span class="hl sym">,</span> jj <span class="hl sym">= {}, {},</span> <span class="hl num">0</span>
<span class="hl kwa">local function</span> <span class="hl kwd">extract</span><span class="hl sym">(</span>q<span class="hl sym">,</span>r<span class="hl sym">,</span>s<span class="hl sym">,</span>t<span class="hl sym">,</span> j<span class="hl sym">)</span>
  <span class="hl kwa">local</span> u <span class="hl sym">=</span> j <span class="hl sym">==</span> jj <span class="hl sym">+</span> <span class="hl num">1</span> <span class="hl kwa">and</span> <span class="hl kwd">mm</span><span class="hl sym">(</span>u<span class="hl sym">,</span> u<span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">,</span> q<span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">)</span> <span class="hl kwa">or</span> <span class="hl kwd">mm</span><span class="hl sym">(</span>u<span class="hl sym">,</span> q<span class="hl sym">,</span>j<span class="hl sym">,</span> r<span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">);</span> jj <span class="hl sym">=</span> j
  <span class="hl kwa">local</span> v <span class="hl sym">=</span> <span class="hl kwd">mm</span><span class="hl sym">(</span>v<span class="hl sym">,</span> t<span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">,</span> s<span class="hl sym">,</span>j<span class="hl sym">)</span>
  <span class="hl kwa">local</span> nu<span class="hl sym">,</span> nv<span class="hl sym">,</span> y <span class="hl sym">= #</span>u<span class="hl sym">, #</span>v
  <span class="hl kwa">if</span> nu <span class="hl sym">==</span> nv <span class="hl kwa">then</span>
    <span class="hl kwa">if</span> nu <span class="hl sym">==</span> <span class="hl num">1</span> <span class="hl kwa">then</span> y <span class="hl sym">=</span> u<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">] /</span> v<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]</span>
    <span class="hl kwa">else</span> y <span class="hl sym">= (</span>u<span class="hl sym">[</span>nu<span class="hl sym">]*</span>RADIX <span class="hl sym">+</span> u<span class="hl sym">[</span>nu<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">]) / (</span>v<span class="hl sym">[</span>nv<span class="hl sym">]*</span>RADIX <span class="hl sym">+</span> v<span class="hl sym">[</span>nv<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">])</span> <span class="hl kwa">end</span>
  <span class="hl kwa">elseif</span> nu <span class="hl sym">==</span> nv<span class="hl sym">+</span><span class="hl num">1</span> <span class="hl kwa">then</span> y <span class="hl sym">= (</span>u<span class="hl sym">[</span>nu<span class="hl sym">]*</span>RADIX <span class="hl sym">+</span> u<span class="hl sym">[</span>nv<span class="hl sym">]) /</span> v<span class="hl sym">[</span>nv<span class="hl sym">]</span>
  <span class="hl kwa">else return</span> <span class="hl num">0</span> <span class="hl kwa">end</span>
  <span class="hl kwa">return</span> math<span class="hl sym">.</span><span class="hl kwb">floor</span><span class="hl sym">(</span>y<span class="hl sym">)</span>
<span class="hl kwa">end</span>

<span class="hl slc">-- Coroutine which yields successive digits of PI.</span>
<span class="hl kwa">return</span> coroutine<span class="hl sym">.</span><span class="hl kwd">wrap</span><span class="hl sym">(</span><span class="hl kwa">function</span><span class="hl sym">()</span>
  <span class="hl kwa">local</span> q<span class="hl sym">,</span> r<span class="hl sym">,</span> s<span class="hl sym">,</span> t<span class="hl sym">,</span> k <span class="hl sym">= {</span><span class="hl num">1</span><span class="hl sym">}, {}, {}, {</span><span class="hl num">1</span><span class="hl sym">},</span> <span class="hl num">1</span>
  <span class="hl kwa">repeat</span>
    <span class="hl kwa">local</span> y <span class="hl sym">=</span> <span class="hl kwd">extract</span><span class="hl sym">(</span>q<span class="hl sym">,</span>r<span class="hl sym">,</span>s<span class="hl sym">,</span>t<span class="hl sym">,</span> <span class="hl num">3</span><span class="hl sym">)</span>
    <span class="hl kwa">if</span> y <span class="hl sym">==</span> <span class="hl kwd">extract</span><span class="hl sym">(</span>q<span class="hl sym">,</span>r<span class="hl sym">,</span>s<span class="hl sym">,</span>t<span class="hl sym">,</span> <span class="hl num">4</span><span class="hl sym">)</span> <span class="hl kwa">then</span>
      coroutine<span class="hl sym">.</span><span class="hl kwd">yield</span><span class="hl sym">(</span>y<span class="hl sym">)</span>
      <span class="hl kwd">compose_r</span><span class="hl sym">(</span>q<span class="hl sym">,</span>r<span class="hl sym">,</span>s<span class="hl sym">,</span>t<span class="hl sym">,</span>  <span class="hl num">10</span><span class="hl sym">, -</span><span class="hl num">10</span><span class="hl sym">*</span>y<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">)</span>
    <span class="hl kwa">else</span>
      <span class="hl kwd">compose_l</span><span class="hl sym">(</span>q<span class="hl sym">,</span>r<span class="hl sym">,</span>s<span class="hl sym">,</span>t<span class="hl sym">,</span>   k<span class="hl sym">,</span> <span class="hl num">4</span><span class="hl sym">*</span>k<span class="hl sym">+</span><span class="hl num">2</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">2</span><span class="hl sym">*</span>k<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span>
      k <span class="hl sym">=</span> k <span class="hl sym">+</span> <span class="hl num">1</span>
    <span class="hl kwa">end</span>
  <span class="hl kwa">until false</span>
<span class="hl kwa">end</span><span class="hl sym">)</span>

<span class="hl sym">]=]</span> <span class="hl slc">-- End of dynamically compiled chunk.</span>

<span class="hl kwa">local</span> N <span class="hl sym">=</span> <span class="hl kwb">tonumber</span><span class="hl sym">(</span>arg <span class="hl kwa">and</span> arg<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">])</span> <span class="hl kwa">or</span> <span class="hl num">27</span>
<span class="hl kwa">local</span> RADIX <span class="hl sym">=</span> N <span class="hl sym">&lt;</span> <span class="hl num">6500</span> <span class="hl kwa">and</span> <span class="hl num">2</span>^<span class="hl num">36</span> <span class="hl kwa">or</span> <span class="hl num">2</span>^<span class="hl num">32</span> <span class="hl slc">-- Avoid overflow.</span>

<span class="hl slc">-- Substitute radix and compile chunk.</span>
<span class="hl kwa">local</span> pidigit <span class="hl sym">=</span> <span class="hl kwd">loadstring</span><span class="hl sym">(</span><span class="hl kwb">string</span><span class="hl sym">.</span><span class="hl kwb">gsub</span><span class="hl sym">(</span>chunk<span class="hl sym">,</span> <span class="hl str">&quot;RADIX&quot;</span><span class="hl sym">,</span> <span class="hl kwb">tostring</span><span class="hl sym">(</span>RADIX<span class="hl sym">)))()</span>

<span class="hl slc">-- Print lines with 10 digits.</span>
<span class="hl kwa">for</span> i<span class="hl sym">=</span><span class="hl num">10</span><span class="hl sym">,</span>N<span class="hl sym">,</span><span class="hl num">10</span> <span class="hl kwa">do</span>
  <span class="hl kwa">for</span> j<span class="hl sym">=</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">10</span> <span class="hl kwa">do</span> io<span class="hl sym">.</span><span class="hl kwb">write</span><span class="hl sym">(</span><span class="hl kwd">pidigit</span><span class="hl sym">())</span> <span class="hl kwa">end</span>
  io<span class="hl sym">.</span><span class="hl kwb">write</span><span class="hl sym">(</span><span class="hl str">&quot;</span><span class="hl esc">\t</span><span class="hl str">:&quot;</span><span class="hl sym">,</span> i<span class="hl sym">,</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">)</span>
<span class="hl kwa">end</span>

<span class="hl slc">-- Print remaining digits (if any).</span>
<span class="hl kwa">local</span> n10 <span class="hl sym">=</span> N <span class="hl sym">%</span> <span class="hl num">10</span>
<span class="hl kwa">if</span> n10 <span class="hl sym">~=</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
  <span class="hl kwa">for</span> i<span class="hl sym">=</span><span class="hl num">1</span><span class="hl sym">,</span>n10 <span class="hl kwa">do</span> io<span class="hl sym">.</span><span class="hl kwb">write</span><span class="hl sym">(</span><span class="hl kwd">pidigit</span><span class="hl sym">())</span> <span class="hl kwa">end</span>
  io<span class="hl sym">.</span><span class="hl kwb">write</span><span class="hl sym">(</span><span class="hl kwb">string</span><span class="hl sym">.</span><span class="hl kwd">rep</span><span class="hl sym">(</span><span class="hl str">&quot; &quot;</span><span class="hl sym">,</span> <span class="hl num">10</span><span class="hl sym">-</span>n10<span class="hl sym">),</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span><span class="hl str">:&quot;</span><span class="hl sym">,</span> N<span class="hl sym">,</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">)</span>
<span class="hl kwa">end</span>

