<span class="hl com">(*</span>
<span class="hl com">** The Computer Language Benchmarks Game</span>
<span class="hl com">** http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com">**</span>
<span class="hl com">** contributed by Hongwei Xi</span>
<span class="hl com">**</span>
<span class="hl com">** This code is a direct translation from a C submission by</span>
<span class="hl com">** Sean Bartell, which is based on the Scheme PLT #4 version</span>
<span class="hl com">**</span>
<span class="hl com">** compilation command:</span>
<span class="hl com">**   atscc -O3 -fomit-frame-pointer pidigits2.dats -o pidigits2 -lgmp</span>
<span class="hl com">*)</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">staload</span> <span class="hl str">&quot;libc/SATS/gmp.sats&quot;</span>

<span class="hl com">(* ****** ****** *)</span>

var tmp<span class="hl opt">:</span> mpz_vt <span class="hl kwa">with</span> pf_tmp
viewdef v_tmp <span class="hl opt">=</span> mpz_vt &#64; tmp
<span class="hl kwa">val</span> <span class="hl opt">() =</span> mpz_init <span class="hl opt">(</span>tmp<span class="hl opt">)</span>

var acc<span class="hl opt">:</span> mpz_vt <span class="hl kwa">with</span> pf_acc
viewdef v_acc <span class="hl opt">=</span> mpz_vt &#64; acc
<span class="hl kwa">val</span> <span class="hl opt">() =</span> mpz_init_set <span class="hl opt">(</span>acc<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">)</span>

var num<span class="hl opt">:</span> mpz_vt <span class="hl kwa">with</span> pf_num
viewdef v_num <span class="hl opt">=</span> mpz_vt &#64; num
<span class="hl kwa">val</span> <span class="hl opt">() =</span> mpz_init_set <span class="hl opt">(</span>num<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">)</span>

var den<span class="hl opt">:</span> mpz_vt <span class="hl kwa">with</span> pf_den
viewdef v_den <span class="hl opt">=</span> mpz_vt &#64; den
<span class="hl kwa">val</span> <span class="hl opt">() =</span> mpz_init_set <span class="hl opt">(</span>den<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">)</span>

<span class="hl com">(* ****** ****** *)</span>

viewdef v_all <span class="hl opt">=</span> &#64;<span class="hl opt">(</span>v_tmp<span class="hl opt">,</span> v_acc<span class="hl opt">,</span> v_num<span class="hl opt">,</span> v_den<span class="hl opt">)</span>
prval pf_all <span class="hl opt">=</span> &#64;<span class="hl opt">(</span>pf_tmp<span class="hl opt">,</span> pf_acc<span class="hl opt">,</span> pf_num<span class="hl opt">,</span> pf_den<span class="hl opt">)</span>
prval pfbox_all <span class="hl opt">=</span>
  vbox_make <span class="hl opt">{</span>v_all<span class="hl opt">} (</span>pf_all<span class="hl opt">)</span> where <span class="hl opt">{</span>
  <span class="hl kwa">extern</span> prfun vbox_make <span class="hl opt">{</span>v<span class="hl opt">:</span>view<span class="hl opt">} (</span>pf<span class="hl opt">:</span> v<span class="hl opt">):</span> vbox <span class="hl opt">(</span>v<span class="hl opt">)</span>
<span class="hl opt">}</span> <span class="hl slc">// end of [val]</span>

<span class="hl com">(* ****** ****** *)</span>

fn extract_digit <span class="hl opt">(</span>
    pf_tmp<span class="hl opt">: !</span>v_tmp<span class="hl opt">,</span> pf_acc<span class="hl opt">: !</span>v_acc<span class="hl opt">,</span> pf_num<span class="hl opt">: !</span>v_num<span class="hl opt">,</span> pf_den<span class="hl opt">: !</span>v_den
  | nth<span class="hl opt">:</span> uint
  <span class="hl opt">) :&lt;</span><span class="hl com">(*pure*)</span><span class="hl opt">&gt;</span> uint <span class="hl opt">=</span> <span class="hl kwa">let</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> <span class="hl kwa">begin</span>
    mpz_mul <span class="hl opt">(</span>tmp<span class="hl opt">,</span> num<span class="hl opt">,</span> nth<span class="hl opt">);</span> mpz_add <span class="hl opt">(</span>tmp<span class="hl opt">,</span> acc<span class="hl opt">);</span> mpz_tdiv_q <span class="hl opt">(</span>tmp<span class="hl opt">,</span> den<span class="hl opt">)</span>
  <span class="hl kwa">end</span> <span class="hl slc">// end of [val]</span>
<span class="hl kwa">in</span>
  mpz_get_uint <span class="hl opt">(</span>tmp<span class="hl opt">)</span>
<span class="hl kwa">end</span> <span class="hl slc">// end of [extract_digit]</span>

<span class="hl com">(* ****** ****** *)</span>

fn next_term <span class="hl opt">(</span>
    pf_tmp<span class="hl opt">: !</span>v_tmp<span class="hl opt">,</span> pf_acc<span class="hl opt">: !</span>v_acc<span class="hl opt">,</span> pf_num<span class="hl opt">: !</span>v_num<span class="hl opt">,</span> pf_den<span class="hl opt">: !</span>v_den
  | k<span class="hl opt">:</span> uint
  <span class="hl opt">) :&lt;</span><span class="hl com">(*pure*)</span><span class="hl opt">&gt;</span> void <span class="hl opt">= ()</span> where <span class="hl opt">{</span>
  <span class="hl kwa">val</span> y2 <span class="hl opt">=</span> k <span class="hl opt">*</span> <span class="hl num">2U</span> <span class="hl opt">+</span> <span class="hl num">1U</span> <span class="hl com">(* : uint *)</span><span class="hl opt">;</span> <span class="hl kwa">val</span> <span class="hl opt">() =</span> <span class="hl kwa">begin</span>
    mpz_addmul <span class="hl opt">(</span>acc<span class="hl opt">,</span> num<span class="hl opt">,</span> <span class="hl num">2U</span><span class="hl opt">);</span> mpz_mul <span class="hl opt">(</span>acc<span class="hl opt">,</span> y2<span class="hl opt">);</span> mpz_mul <span class="hl opt">(</span>num<span class="hl opt">,</span> k<span class="hl opt">);</span> mpz_mul <span class="hl opt">(</span>den<span class="hl opt">,</span> y2<span class="hl opt">)</span>
  <span class="hl kwa">end</span> <span class="hl slc">// end of [val]</span>
<span class="hl opt">}</span> <span class="hl slc">// end of [next_term]</span>

<span class="hl com">(* ****** ****** *)</span>

fn eliminate_digit <span class="hl opt">(</span>
    pf_acc<span class="hl opt">: !</span>v_acc<span class="hl opt">,</span> pf_num<span class="hl opt">: !</span>v_num<span class="hl opt">,</span> pf_den<span class="hl opt">: !</span>v_den | d<span class="hl opt">:</span> uint
  <span class="hl opt">) :&lt;</span><span class="hl com">(*pure*)</span><span class="hl opt">&gt;</span> void <span class="hl opt">= ()</span> where <span class="hl opt">{</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> <span class="hl kwa">begin</span>
    mpz_submul <span class="hl opt">(</span>acc<span class="hl opt">,</span> den<span class="hl opt">,</span> d<span class="hl opt">);</span> mpz_mul <span class="hl opt">(</span>acc<span class="hl opt">,</span> <span class="hl num">10</span><span class="hl opt">);</span> mpz_mul <span class="hl opt">(</span>num<span class="hl opt">,</span> <span class="hl num">10</span><span class="hl opt">)</span>
  <span class="hl kwa">end</span> <span class="hl slc">// end of [val]</span>
<span class="hl opt">}</span> <span class="hl slc">// end of [eliminate_digit]</span>

<span class="hl com">(* ****** ****** *)</span>

fn pidigits <span class="hl opt">(</span>
    pf_tmp<span class="hl opt">: !</span>v_tmp<span class="hl opt">,</span> pf_acc<span class="hl opt">: !</span>v_acc<span class="hl opt">,</span> pf_num<span class="hl opt">: !</span>v_num<span class="hl opt">,</span> pf_den<span class="hl opt">: !</span>v_den
  | n<span class="hl opt">:</span> <span class="hl kwb">int</span>
  <span class="hl opt">) :</span> void <span class="hl opt">= ()</span> where <span class="hl opt">{</span>
  var i<span class="hl opt">:</span> <span class="hl kwb">int</span> <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl kwa">and</span> m<span class="hl opt">:</span> <span class="hl kwb">int</span> <span class="hl opt">=</span> <span class="hl num">0</span>
  var d<span class="hl opt">:</span> uint <span class="hl kwa">with</span> pf_d <span class="hl opt">=</span> <span class="hl num">0U</span> <span class="hl kwa">and</span> k<span class="hl opt">:</span> uint <span class="hl kwa">with</span> pf_k <span class="hl opt">=</span> <span class="hl num">0U</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> <span class="hl kwa">while</span> <span class="hl opt">(</span><span class="hl kwa">true</span><span class="hl opt">)</span> <span class="hl kwa">let</span>
    <span class="hl kwa">fun</span> loop <span class="hl opt">(</span>
        pf_tmp<span class="hl opt">: !</span>v_tmp<span class="hl opt">,</span> pf_acc<span class="hl opt">: !</span>v_acc<span class="hl opt">,</span> pf_num<span class="hl opt">: !</span>v_num<span class="hl opt">,</span> pf_den<span class="hl opt">: !</span>v_den
      <span class="hl opt">,</span> pf_k<span class="hl opt">: !</span>uint &#64; k<span class="hl opt">,</span> pf_d<span class="hl opt">: !</span>uint &#64; d
      | <span class="hl com">(*none*)</span>
      <span class="hl opt">) :&lt;</span>cloref1<span class="hl opt">&gt;</span> void <span class="hl opt">=</span> <span class="hl kwa">let</span>
      <span class="hl kwa">val</span> <span class="hl opt">() =</span> k <span class="hl opt">:=</span> k <span class="hl opt">+</span> <span class="hl num">1U</span>
      <span class="hl kwa">val</span> <span class="hl opt">() =</span> next_term <span class="hl opt">(</span>pf_tmp<span class="hl opt">,</span> pf_acc<span class="hl opt">,</span> pf_num<span class="hl opt">,</span> pf_den | k<span class="hl opt">)</span>
      <span class="hl kwa">val</span> sgn <span class="hl opt">=</span> mpz_cmp <span class="hl opt">(</span>num<span class="hl opt">,</span> acc<span class="hl opt">)</span>
    <span class="hl kwa">in</span>
      <span class="hl kwa">if</span> sgn <span class="hl opt">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span> loop
        <span class="hl opt">(</span>pf_tmp<span class="hl opt">,</span> pf_acc<span class="hl opt">,</span> pf_num<span class="hl opt">,</span> pf_den<span class="hl opt">,</span> pf_k<span class="hl opt">,</span> pf_d | <span class="hl com">(*none*)</span><span class="hl opt">)</span>
      <span class="hl kwa">else let</span>
        <span class="hl kwa">val</span> <span class="hl opt">() =</span>
          d <span class="hl opt">:=</span> extract_digit <span class="hl opt">(</span>pf_tmp<span class="hl opt">,</span> pf_acc<span class="hl opt">,</span> pf_num<span class="hl opt">,</span> pf_den | <span class="hl num">3U</span><span class="hl opt">)</span>
        <span class="hl slc">// end of [val]</span>
        <span class="hl kwa">val</span> d4 <span class="hl opt">=</span> extract_digit <span class="hl opt">(</span>pf_tmp<span class="hl opt">,</span> pf_acc<span class="hl opt">,</span> pf_num<span class="hl opt">,</span> pf_den | <span class="hl num">4U</span><span class="hl opt">)</span>
      <span class="hl kwa">in</span>
        <span class="hl kwa">if</span> d <span class="hl opt">&lt;&gt;</span> d4 <span class="hl kwa">then</span> loop
          <span class="hl opt">(</span>pf_tmp<span class="hl opt">,</span> pf_acc<span class="hl opt">,</span> pf_num<span class="hl opt">,</span> pf_den<span class="hl opt">,</span> pf_k<span class="hl opt">,</span> pf_d | <span class="hl com">(*none*)</span><span class="hl opt">)</span>
        <span class="hl slc">// end of [if]</span>
      <span class="hl kwa">end</span> <span class="hl slc">// end of [if]</span>
    <span class="hl kwa">end</span> <span class="hl com">(* end of [loop] *)</span>
    <span class="hl kwa">val</span> <span class="hl opt">() =</span> loop
      <span class="hl opt">(</span>pf_tmp<span class="hl opt">,</span> pf_acc<span class="hl opt">,</span> pf_num<span class="hl opt">,</span> pf_den<span class="hl opt">,</span> pf_k<span class="hl opt">,</span> pf_d | <span class="hl com">(*none*)</span><span class="hl opt">)</span>
    <span class="hl slc">// end of [val]</span>
    <span class="hl kwa">val</span> <span class="hl opt">() =</span> print <span class="hl opt">(</span>char_of_uint <span class="hl opt">(</span>d <span class="hl opt">+</span> uint_of_char <span class="hl kwb">'0'</span><span class="hl opt">))</span>
    <span class="hl kwa">val</span> <span class="hl opt">() =</span> i <span class="hl opt">:=</span> i <span class="hl opt">+</span> <span class="hl num">1</span>
    <span class="hl kwa">val</span> <span class="hl opt">() =</span> m <span class="hl opt">:=</span> i <span class="hl kwa">mod</span> <span class="hl num">10</span>
    <span class="hl kwa">val</span> <span class="hl opt">() =</span> <span class="hl kwa">if</span> m <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl kwa">then</span> printf <span class="hl opt">(</span><span class="hl str">&quot;</span><span class="hl esc">\t</span><span class="hl str">:%d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> &#64;<span class="hl opt">(</span>i<span class="hl opt">))</span>
    <span class="hl kwa">val</span> <span class="hl opt">() =</span> <span class="hl kwa">if</span> <span class="hl opt">(</span>i <span class="hl opt">&gt;=</span> n<span class="hl opt">)</span> <span class="hl kwa">then</span> break
    <span class="hl kwa">val</span> <span class="hl opt">() =</span> eliminate_digit <span class="hl opt">(</span>pf_acc<span class="hl opt">,</span> pf_num<span class="hl opt">,</span> pf_den | d<span class="hl opt">)</span>
  <span class="hl kwa">in</span>
    <span class="hl slc">// empty</span>
  <span class="hl kwa">end</span> <span class="hl slc">// end of [val]</span>
  
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> <span class="hl kwa">if</span> <span class="hl opt">(</span>m <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">then let</span>
    <span class="hl kwa">fun</span> loop <span class="hl opt">(</span>i<span class="hl opt">:</span> <span class="hl kwb">int</span><span class="hl opt">):</span> void <span class="hl opt">=</span> <span class="hl kwa">if</span> i <span class="hl opt">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span> <span class="hl opt">(</span>print <span class="hl opt">(</span><span class="hl str">' '</span><span class="hl opt">);</span> loop <span class="hl opt">(</span>i<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">))</span>
  <span class="hl kwa">in</span>
    loop <span class="hl opt">(</span><span class="hl num">10</span><span class="hl opt">-</span>m<span class="hl opt">);</span> printf <span class="hl opt">(</span><span class="hl str">&quot;</span><span class="hl esc">\t</span><span class="hl str">:%d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> &#64;<span class="hl opt">(</span>n<span class="hl opt">))</span>
  <span class="hl kwa">end</span> <span class="hl slc">// end of [val]</span>
<span class="hl opt">}</span> <span class="hl com">(* end of [pidigits] *)</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">implement</span> main <span class="hl opt">(</span>argc<span class="hl opt">,</span> argv<span class="hl opt">) =</span> <span class="hl kwa">let</span>
  <span class="hl kwa">val</span> n <span class="hl opt">= (</span><span class="hl kwa">if</span> argc <span class="hl opt">&gt;</span> <span class="hl num">1</span> <span class="hl kwa">then</span> int_of_string <span class="hl opt">(</span>argv<span class="hl opt">.[</span><span class="hl num">1</span><span class="hl opt">])</span> <span class="hl kwa">else</span> <span class="hl num">27</span><span class="hl opt">):</span> <span class="hl kwb">int</span>
  prval vbox pf_all <span class="hl opt">=</span> pfbox_all
<span class="hl kwa">in</span>
  $effmask_ref <span class="hl opt">(</span>pidigits <span class="hl opt">(</span>pf_all<span class="hl num">.0</span><span class="hl opt">,</span> pf_all<span class="hl num">.1</span><span class="hl opt">,</span> pf_all<span class="hl num">.2</span><span class="hl opt">,</span> pf_all<span class="hl num">.3</span> | n<span class="hl opt">))</span>
<span class="hl kwa">end</span> <span class="hl slc">// end of [main]</span>
  
<span class="hl com">(* ****** ****** *)</span>

<span class="hl com">(* end of [pidigits2.dats] *)</span>
