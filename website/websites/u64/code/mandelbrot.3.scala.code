<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"> * original contributed by Kenneth Jonsson</span>
<span class="hl com"> */</span>

<span class="hl kwa">import</span> scala<span class="hl opt">.</span>actors<span class="hl opt">.</span>Actor
<span class="hl kwa">import</span> scala<span class="hl opt">.</span>actors<span class="hl opt">.</span>Actor<span class="hl opt">.</span>_

<span class="hl kwa">class</span> <span class="hl kwd">Worker</span><span class="hl opt">(</span>size<span class="hl opt">:</span> Int<span class="hl opt">)</span> <span class="hl kwa">extends</span> Actor <span class="hl opt">{</span>
    <span class="hl kwa">private val</span> bytesPerRow <span class="hl opt">= (</span>size <span class="hl opt">+</span> <span class="hl num">7</span><span class="hl opt">) &gt;&gt;</span> <span class="hl num">3</span>
    <span class="hl kwa">private val</span> maxIterations <span class="hl opt">=</span> <span class="hl num">50</span>
    <span class="hl kwa">private val</span> limitSquared <span class="hl opt">=</span> <span class="hl num">4.0</span>

    <span class="hl slc">// Calculate all pixes for one row [-i..i], the real-part</span>
    <span class="hl slc">// coordinate is constant throughout this method</span>
    <span class="hl kwa">private def</span> <span class="hl kwd">calcRow</span><span class="hl opt">(</span>rowNum<span class="hl opt">:</span> Int<span class="hl opt">): (</span>Actor<span class="hl opt">,</span> Int<span class="hl opt">,</span> Array<span class="hl opt">[</span>Byte<span class="hl opt">]) = {</span>
	<span class="hl kwa">var</span> rowBitmap <span class="hl opt">=</span> <span class="hl kwa">new</span> Array<span class="hl opt">[</span>Byte<span class="hl opt">](</span>bytesPerRow<span class="hl opt">)</span>
	<span class="hl kwa">var</span> column <span class="hl opt">=</span> <span class="hl num">0</span>
	<span class="hl kwa">val</span> ci <span class="hl opt">=</span> <span class="hl num">2.0</span> <span class="hl opt">*</span> rowNum <span class="hl opt">/</span> size <span class="hl opt">-</span> <span class="hl num">1.0</span>

	<span class="hl kwa">while</span> <span class="hl opt">(</span>column <span class="hl opt">&lt;</span> size<span class="hl opt">) {</span>
	    <span class="hl kwa">val</span> cr <span class="hl opt">=</span> <span class="hl num">2.0</span> <span class="hl opt">*</span> column <span class="hl opt">/</span> size <span class="hl opt">-</span> <span class="hl num">1.5</span>
	    <span class="hl kwa">var</span> zr<span class="hl opt">,</span> tr<span class="hl opt">,</span> zi<span class="hl opt">,</span> ti <span class="hl opt">=</span> <span class="hl num">0.0</span>
            <span class="hl kwa">var</span> iterations <span class="hl opt">=</span> <span class="hl num">0</span>

            <span class="hl kwa">do</span> <span class="hl opt">{</span>
		zi <span class="hl opt">=</span> <span class="hl num">2</span> <span class="hl opt">*</span> zr <span class="hl opt">*</span> zi <span class="hl opt">+</span> ci
		zr <span class="hl opt">=</span> tr <span class="hl opt">-</span> ti <span class="hl opt">+</span> cr
		ti <span class="hl opt">=</span> zi <span class="hl opt">*</span> zi
		tr <span class="hl opt">=</span> zr <span class="hl opt">*</span> zr
		iterations <span class="hl opt">+=</span> <span class="hl num">1</span>
            <span class="hl opt">}</span> <span class="hl kwa">while</span> <span class="hl opt">(</span>tr <span class="hl opt">+</span> ti <span class="hl opt">&lt;=</span> limitSquared <span class="hl opt">&amp;&amp;</span> iterations <span class="hl opt">&lt;</span> maxIterations<span class="hl opt">)</span>

	    <span class="hl kwa">if</span> <span class="hl opt">(</span>tr <span class="hl opt">+</span> ti <span class="hl opt">&lt;=</span> limitSquared<span class="hl opt">)</span>
		<span class="hl kwd">rowBitmap</span><span class="hl opt">(</span>column <span class="hl opt">&gt;&gt;</span> <span class="hl num">3</span><span class="hl opt">) = (</span><span class="hl kwd">rowBitmap</span><span class="hl opt">(</span>column <span class="hl opt">&gt;&gt;</span> <span class="hl num">3</span><span class="hl opt">)</span>
					  <span class="hl opt">| (</span><span class="hl num">0x80</span> <span class="hl opt">&gt;&gt; (</span>column <span class="hl opt">&amp;</span> <span class="hl num">7</span><span class="hl opt">))).</span>toByte

            column <span class="hl opt">+=</span> <span class="hl num">1</span>
	<span class="hl opt">}</span>
	<span class="hl kwa">return</span> <span class="hl opt">(</span>self<span class="hl opt">,</span> rowNum<span class="hl opt">,</span> rowBitmap<span class="hl opt">)</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">def</span> <span class="hl kwd">act</span><span class="hl opt">() {</span>
	<span class="hl kwa">while</span> <span class="hl opt">(</span>true<span class="hl opt">) {</span>
	    receive <span class="hl opt">{</span>
		<span class="hl kwa">case</span> rowNum<span class="hl opt">:</span> Int <span class="hl opt">=&gt;</span>
		    <span class="hl kwd">reply</span><span class="hl opt">(</span><span class="hl kwd">calcRow</span><span class="hl opt">(</span>rowNum<span class="hl opt">))</span>
		<span class="hl kwa">case</span> <span class="hl str">&quot;EXIT&quot;</span> <span class="hl opt">=&gt;</span>
		    <span class="hl kwd">exit</span><span class="hl opt">()</span>
	    <span class="hl opt">}</span>
	<span class="hl opt">}</span>
    <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl kwa">class</span> <span class="hl kwd">MandelbrotCoordinator</span><span class="hl opt">(</span>size<span class="hl opt">:</span> Int<span class="hl opt">)</span> <span class="hl kwa">extends</span> Actor <span class="hl opt">{</span>

    <span class="hl kwa">private var</span> nextRowNum <span class="hl opt">=</span> <span class="hl num">0</span>
    <span class="hl kwa">private var</span> rowsRemaining <span class="hl opt">=</span> size
    <span class="hl kwa">private var</span> bitmap <span class="hl opt">=</span> <span class="hl kwa">new</span> Array<span class="hl opt">[</span>Array<span class="hl opt">[</span>Byte<span class="hl opt">]](</span>size<span class="hl opt">)</span>

    <span class="hl kwa">private def</span> <span class="hl kwd">calcNextRow</span><span class="hl opt">(</span>worker<span class="hl opt">:</span> Actor<span class="hl opt">) {</span>
	<span class="hl kwa">if</span> <span class="hl opt">(</span>nextRowNum <span class="hl opt">==</span> size<span class="hl opt">)</span>
	    <span class="hl slc">// All rows has been dispatched, tell the worker to exit</span>
	    worker <span class="hl opt">!</span> <span class="hl str">&quot;EXIT&quot;</span>
	<span class="hl kwa">else</span> <span class="hl opt">{</span>
	    worker <span class="hl opt">!</span> nextRowNum
	    nextRowNum <span class="hl opt">+=</span> <span class="hl num">1</span>
	<span class="hl opt">}</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">def</span> <span class="hl kwd">act</span><span class="hl opt">() {</span>
	<span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">&lt;-</span> <span class="hl num">1</span> to Runtime<span class="hl opt">.</span><span class="hl kwd">getRuntime</span><span class="hl opt">().</span><span class="hl kwd">availableProcessors</span><span class="hl opt">()) {</span>
	    <span class="hl kwa">val</span> worker <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Worker</span><span class="hl opt">(</span>size<span class="hl opt">)</span>
	    <span class="hl slc">// Keep two rows in flight per worker to avoid any worker</span>
	    <span class="hl slc">// idle time, probably not neccessary on a quad-core</span>
	    <span class="hl slc">// machine but might help at higher core count...</span>
	    <span class="hl kwd">calcNextRow</span><span class="hl opt">(</span>worker<span class="hl opt">)</span>
	    <span class="hl kwd">calcNextRow</span><span class="hl opt">(</span>worker<span class="hl opt">)</span>
	    worker<span class="hl opt">.</span>start
	<span class="hl opt">}</span>

	<span class="hl kwa">while</span> <span class="hl opt">(</span>true<span class="hl opt">) {</span>
	    receive <span class="hl opt">{</span>
		<span class="hl kwa">case</span> <span class="hl opt">(</span>sender<span class="hl opt">:</span> Actor<span class="hl opt">,</span> rowNum<span class="hl opt">:</span> Int<span class="hl opt">,</span> rowBitmap<span class="hl opt">:</span> Array<span class="hl opt">[</span>Byte<span class="hl opt">]) =&gt;</span>
		    <span class="hl kwd">calcNextRow</span><span class="hl opt">(</span>sender<span class="hl opt">)</span>
		    <span class="hl kwd">bitmap</span><span class="hl opt">(</span>rowNum<span class="hl opt">) =</span> rowBitmap
		    rowsRemaining <span class="hl opt">-=</span> <span class="hl num">1</span>
		    <span class="hl kwa">if</span> <span class="hl opt">(</span>rowsRemaining <span class="hl opt">==</span> <span class="hl num">0</span><span class="hl opt">) {</span>
			<span class="hl slc">// The image is finished, write it to stdout and exit</span>
			<span class="hl kwd">println</span><span class="hl opt">(</span><span class="hl str">&quot;P4</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> <span class="hl opt">+</span> size <span class="hl opt">+</span> <span class="hl str">&quot; &quot;</span> <span class="hl opt">+</span> size<span class="hl opt">)</span>
			bitmap<span class="hl opt">.</span><span class="hl kwd">foreach</span><span class="hl opt">(</span>row <span class="hl opt">=&gt;</span> System<span class="hl opt">.</span>out<span class="hl opt">.</span><span class="hl kwd">write</span><span class="hl opt">(</span>row<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> row<span class="hl opt">.</span>length<span class="hl opt">))</span>
			<span class="hl kwd">exit</span><span class="hl opt">()</span>
		    <span class="hl opt">}</span>
	    <span class="hl opt">}</span>
	<span class="hl opt">}</span>
    <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl kwa">object</span> mandelbrot <span class="hl opt">{</span>
    <span class="hl kwa">def</span> <span class="hl kwd">main</span><span class="hl opt">(</span>args<span class="hl opt">:</span> Array<span class="hl opt">[</span>String<span class="hl opt">]) {</span>
	<span class="hl kwa">val</span> coordinator <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">MandelbrotCoordinator</span><span class="hl opt">(</span><span class="hl kwd">args</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">).</span>toInt<span class="hl opt">)</span>
	coordinator<span class="hl opt">.</span>start
    <span class="hl opt">}</span>
<span class="hl opt">}</span>
