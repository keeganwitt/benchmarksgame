<span class="hl slc">-- The Computer Language Benchmarks Game</span>
<span class="hl slc">-- http://shootout.alioth.debian.org/</span>
<span class="hl slc">-- contributed by Mike Pall</span>

<span class="hl kwa">local</span> ffi <span class="hl sym">=</span> <span class="hl kwd">require</span><span class="hl sym">(</span><span class="hl str">&quot;ffi&quot;</span><span class="hl sym">)</span>

ffi<span class="hl sym">.</span>cdef<span class="hl sym">[[</span>
typedef struct FILE FILE<span class="hl sym">;</span>
extern FILE <span class="hl sym">*</span>stdout<span class="hl sym">;</span>
size_t <span class="hl kwd">_IO_file_xsputn</span><span class="hl sym">(</span>FILE <span class="hl sym">*,</span> const void <span class="hl sym">*,</span> size_t<span class="hl sym">);</span>
int <span class="hl kwd">putchar_unlocked</span><span class="hl sym">(</span>int<span class="hl sym">);</span>
int <span class="hl kwd">setvbuf</span><span class="hl sym">(</span>FILE <span class="hl sym">*,</span> char <span class="hl sym">*,</span> int<span class="hl sym">,</span> size_t<span class="hl sym">);</span>
int <span class="hl kwd">fflush</span><span class="hl sym">(</span>FILE <span class="hl sym">*);</span>
]]

<span class="hl kwa">local function</span> <span class="hl kwd">fasta_repeat</span><span class="hl sym">(</span>s<span class="hl sym">,</span> n<span class="hl sym">)</span>
  <span class="hl kwa">local</span> C<span class="hl sym">,</span> stdout <span class="hl sym">=</span> ffi<span class="hl sym">.</span>C<span class="hl sym">,</span> ffi<span class="hl sym">.</span>C<span class="hl sym">.</span>stdout
  <span class="hl kwa">local</span> s2<span class="hl sym">,</span> j<span class="hl sym">,</span> sn <span class="hl sym">=</span> s<span class="hl sym">..</span>s<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">, #</span>s
  <span class="hl kwa">local</span> p <span class="hl sym">=</span> ffi<span class="hl sym">.</span><span class="hl kwd">new</span><span class="hl sym">(</span><span class="hl str">&quot;const char *&quot;</span><span class="hl sym">,</span> s2<span class="hl sym">)</span>
  <span class="hl kwa">for</span> i<span class="hl sym">=</span><span class="hl num">60</span><span class="hl sym">,</span>n<span class="hl sym">,</span><span class="hl num">60</span> <span class="hl kwa">do</span>
    C<span class="hl sym">.</span><span class="hl kwd">_IO_file_xsputn</span><span class="hl sym">(</span>stdout<span class="hl sym">,</span> p<span class="hl sym">+</span>j<span class="hl sym">,</span> <span class="hl num">60</span><span class="hl sym">);</span> C<span class="hl sym">.</span><span class="hl kwd">putchar_unlocked</span><span class="hl sym">(</span><span class="hl num">10</span><span class="hl sym">)</span>
    j <span class="hl sym">=</span> j <span class="hl sym">+</span> <span class="hl num">60</span><span class="hl sym">;</span> <span class="hl kwa">if</span> j <span class="hl sym">&gt;=</span> sn <span class="hl kwa">then</span> j <span class="hl sym">=</span> j <span class="hl sym">-</span> sn <span class="hl kwa">end</span>
  <span class="hl kwa">end</span>
  <span class="hl kwa">local</span> tail <span class="hl sym">=</span> n <span class="hl sym">%</span> <span class="hl num">60</span>
  <span class="hl kwa">if</span> tail <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
    C<span class="hl sym">.</span><span class="hl kwd">_IO_file_xsputn</span><span class="hl sym">(</span>stdout<span class="hl sym">,</span> p<span class="hl sym">+</span>j<span class="hl sym">,</span> tail<span class="hl sym">);</span> C<span class="hl sym">.</span><span class="hl kwd">putchar_unlocked</span><span class="hl sym">(</span><span class="hl num">10</span><span class="hl sym">)</span>
  <span class="hl kwa">end</span>
<span class="hl kwa">end</span>

<span class="hl kwa">local</span> rstate <span class="hl sym">=</span> ffi<span class="hl sym">.</span><span class="hl kwd">new</span><span class="hl sym">(</span><span class="hl str">&quot;struct { double d; int i;}&quot;</span><span class="hl sym">,</span> <span class="hl num">42</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">)</span>
<span class="hl kwa">local function</span> <span class="hl kwb">random</span><span class="hl sym">()</span>
  <span class="hl kwa">local</span> m <span class="hl sym">=</span> rstate<span class="hl sym">.</span>d <span class="hl sym">*</span> <span class="hl num">3877</span> <span class="hl sym">+</span> <span class="hl num">29573</span><span class="hl sym">;</span> rstate<span class="hl sym">.</span>i <span class="hl sym">=</span> m <span class="hl sym">* (</span><span class="hl num">502748801</span> <span class="hl sym">/</span> <span class="hl num">2</span>^<span class="hl num">46</span><span class="hl sym">)</span>
  <span class="hl kwa">local</span> y <span class="hl sym">=</span> m <span class="hl sym">-</span> rstate<span class="hl sym">.</span>i <span class="hl sym">*</span> <span class="hl num">139968</span><span class="hl sym">;</span> rstate<span class="hl sym">.</span>d <span class="hl sym">=</span> y
  <span class="hl kwa">return</span> y
<span class="hl kwa">end</span>

<span class="hl kwa">local function</span> <span class="hl kwd">genlookup</span><span class="hl sym">(</span>t<span class="hl sym">)</span>
  <span class="hl kwa">local</span> lookup <span class="hl sym">=</span> ffi<span class="hl sym">.</span><span class="hl kwd">new</span><span class="hl sym">(</span><span class="hl str">&quot;uint8_t[?]&quot;</span><span class="hl sym">,</span> <span class="hl num">139968</span><span class="hl sym">)</span>
  <span class="hl kwa">local</span> j<span class="hl sym">,</span> p<span class="hl sym">,</span> s <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">,</span> t<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]*</span><span class="hl num">139968</span><span class="hl sym">,</span> <span class="hl kwb">string</span><span class="hl sym">.</span><span class="hl kwd">byte</span><span class="hl sym">(</span>t<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">],</span> <span class="hl num">1</span><span class="hl sym">)</span>
  <span class="hl kwa">for</span> i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">139967</span> <span class="hl kwa">do</span>
    <span class="hl kwa">if</span> p <span class="hl sym">&lt;</span> i <span class="hl kwa">then</span> j <span class="hl sym">=</span> j<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">;</span> p <span class="hl sym">=</span> p <span class="hl sym">+</span> t<span class="hl sym">[</span>j<span class="hl sym">]*</span><span class="hl num">139968</span><span class="hl sym">;</span> s <span class="hl sym">=</span> <span class="hl kwb">string</span><span class="hl sym">.</span><span class="hl kwd">byte</span><span class="hl sym">(</span>t<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">],</span> j<span class="hl sym">)</span> <span class="hl kwa">end</span>
    lookup<span class="hl sym">[</span>i<span class="hl sym">] =</span> s
  <span class="hl kwa">end</span>
  <span class="hl kwa">return</span> lookup
<span class="hl kwa">end</span>

<span class="hl kwa">local function</span> <span class="hl kwd">fasta_random</span><span class="hl sym">(</span>t<span class="hl sym">,</span> n<span class="hl sym">)</span>
  <span class="hl kwa">local</span> C<span class="hl sym">,</span> stdout <span class="hl sym">=</span> ffi<span class="hl sym">.</span>C<span class="hl sym">,</span> ffi<span class="hl sym">.</span>C<span class="hl sym">.</span>stdout
  <span class="hl kwa">local</span> lookup <span class="hl sym">=</span> <span class="hl kwd">genlookup</span><span class="hl sym">(</span>t<span class="hl sym">)</span>
  <span class="hl kwa">local</span> buf <span class="hl sym">=</span> ffi<span class="hl sym">.</span><span class="hl kwd">new</span><span class="hl sym">(</span><span class="hl str">&quot;uint8_t[?]&quot;</span><span class="hl sym">,</span> <span class="hl num">61</span><span class="hl sym">);</span> buf<span class="hl sym">[</span><span class="hl num">60</span><span class="hl sym">] =</span> <span class="hl num">10</span>
  <span class="hl kwa">for</span> i<span class="hl sym">=</span><span class="hl num">60</span><span class="hl sym">,</span>n<span class="hl sym">,</span><span class="hl num">60</span> <span class="hl kwa">do</span>
    <span class="hl kwa">for</span> j<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">59</span> <span class="hl kwa">do</span> buf<span class="hl sym">[</span>j<span class="hl sym">] =</span> lookup<span class="hl sym">[</span><span class="hl kwb">random</span><span class="hl sym">()]</span> <span class="hl kwa">end</span>
    C<span class="hl sym">.</span><span class="hl kwd">_IO_file_xsputn</span><span class="hl sym">(</span>stdout<span class="hl sym">,</span> buf<span class="hl sym">,</span> <span class="hl num">61</span><span class="hl sym">)</span>
  <span class="hl kwa">end</span>
  <span class="hl kwa">local</span> tail <span class="hl sym">=</span> n <span class="hl sym">%</span> <span class="hl num">60</span>
  <span class="hl kwa">if</span> tail <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
    <span class="hl kwa">for</span> j<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">,</span>tail<span class="hl sym">-</span><span class="hl num">1</span> <span class="hl kwa">do</span> buf<span class="hl sym">[</span>j<span class="hl sym">] =</span> lookup<span class="hl sym">[</span><span class="hl kwb">random</span><span class="hl sym">()]</span> <span class="hl kwa">end</span>
    buf<span class="hl sym">[</span>tail<span class="hl sym">] =</span> <span class="hl num">10</span>
    C<span class="hl sym">.</span><span class="hl kwd">_IO_file_xsputn</span><span class="hl sym">(</span>stdout<span class="hl sym">,</span> buf<span class="hl sym">,</span> tail<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)</span>
  <span class="hl kwa">end</span>
<span class="hl kwa">end</span>

<span class="hl kwa">local</span> alu <span class="hl sym">=</span>
  <span class="hl str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span><span class="hl sym">..</span>
  <span class="hl str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span><span class="hl sym">..</span>
  <span class="hl str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span><span class="hl sym">..</span>
  <span class="hl str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span><span class="hl sym">..</span>
  <span class="hl str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span><span class="hl sym">..</span>
  <span class="hl str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span><span class="hl sym">..</span>
  <span class="hl str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span>

<span class="hl kwa">local</span> iub <span class="hl sym">= {</span>
  <span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] =</span> <span class="hl str">&quot;acgtBDHKMNRSVWY&quot;</span><span class="hl sym">,</span>
  <span class="hl num">0.27</span><span class="hl sym">,</span><span class="hl num">0.12</span><span class="hl sym">,</span><span class="hl num">0.12</span><span class="hl sym">,</span><span class="hl num">0.27</span><span class="hl sym">,</span><span class="hl num">0.02</span><span class="hl sym">,</span><span class="hl num">0.02</span><span class="hl sym">,</span><span class="hl num">0.02</span><span class="hl sym">,</span><span class="hl num">0.02</span><span class="hl sym">,</span><span class="hl num">0.02</span><span class="hl sym">,</span><span class="hl num">0.02</span><span class="hl sym">,</span><span class="hl num">0.02</span><span class="hl sym">,</span><span class="hl num">0.02</span><span class="hl sym">,</span><span class="hl num">0.02</span><span class="hl sym">,</span><span class="hl num">0.02</span><span class="hl sym">,</span><span class="hl num">0.02</span>
<span class="hl sym">}</span>

<span class="hl kwa">local</span> homosapiens <span class="hl sym">= {</span>
  <span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">] =</span> <span class="hl str">&quot;acgt&quot;</span><span class="hl sym">,</span>
  <span class="hl num">0.3029549426680</span><span class="hl sym">,</span> <span class="hl num">0.1979883004921</span><span class="hl sym">,</span> <span class="hl num">0.1975473066391</span><span class="hl sym">,</span> <span class="hl num">0.3015094502008</span>
<span class="hl sym">}</span>

<span class="hl kwa">local</span> N <span class="hl sym">=</span> <span class="hl kwb">tonumber</span><span class="hl sym">(</span>arg <span class="hl kwa">and</span> arg<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">])</span> <span class="hl kwa">or</span> <span class="hl num">1000</span>
<span class="hl kwa">local</span> outbuf <span class="hl sym">=</span> ffi<span class="hl sym">.</span><span class="hl kwd">new</span><span class="hl sym">(</span><span class="hl str">&quot;char[?]&quot;</span><span class="hl sym">,</span> <span class="hl num">2</span>^<span class="hl num">20</span><span class="hl sym">)</span>
ffi<span class="hl sym">.</span>C<span class="hl sym">.</span><span class="hl kwd">setvbuf</span><span class="hl sym">(</span>ffi<span class="hl sym">.</span>C<span class="hl sym">.</span>stdout<span class="hl sym">,</span> outbuf<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">2</span>^<span class="hl num">20</span><span class="hl sym">)</span>
io<span class="hl sym">.</span><span class="hl kwb">write</span><span class="hl sym">(</span><span class="hl str">&quot;&gt;ONE Homo sapiens alu</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">);</span> <span class="hl kwd">fasta_repeat</span><span class="hl sym">(</span>alu<span class="hl sym">,</span> N<span class="hl sym">*</span><span class="hl num">2</span><span class="hl sym">)</span>
io<span class="hl sym">.</span><span class="hl kwb">write</span><span class="hl sym">(</span><span class="hl str">&quot;&gt;TWO IUB ambiguity codes</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">);</span> <span class="hl kwd">fasta_random</span><span class="hl sym">(</span>iub<span class="hl sym">,</span> N<span class="hl sym">*</span><span class="hl num">3</span><span class="hl sym">)</span>
io<span class="hl sym">.</span><span class="hl kwb">write</span><span class="hl sym">(</span><span class="hl str">&quot;&gt;THREE Homo sapiens frequency</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">);</span> <span class="hl kwd">fasta_random</span><span class="hl sym">(</span>homosapiens<span class="hl sym">,</span> N<span class="hl sym">*</span><span class="hl num">5</span><span class="hl sym">)</span>
ffi<span class="hl sym">.</span>C<span class="hl sym">.</span><span class="hl kwd">fflush</span><span class="hl sym">(</span>ffi<span class="hl sym">.</span>C<span class="hl sym">.</span>stdout<span class="hl sym">)</span>
