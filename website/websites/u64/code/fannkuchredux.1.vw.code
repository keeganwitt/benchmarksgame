<span class="hl com">&quot;* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com">   contributed by Paolo Bonzini </span>
<span class="hl com">   modified by Isaac Gouy *&quot;</span><span class="hl opt">!</span>


<span class="hl kwc">Object</span> <span class="hl kwb">subclass:</span> <span class="hl kwd">#PermGeneratorRedux</span>
   <span class="hl kwb">instanceVariableNames:</span> <span class="hl str">'timesRotated perm atEnd'</span>
   <span class="hl kwb">classVariableNames:</span> <span class="hl str">''</span>
   <span class="hl kwb">poolDictionaries:</span> <span class="hl str">''</span>
   <span class="hl kwb">category:</span> <span class="hl str">'Shootout'</span><span class="hl opt">!</span>


<span class="hl opt">!</span><span class="hl kwc">Array</span> <span class="hl kwb">methodsFor:</span> <span class="hl str">'benchmarking'</span><span class="hl opt">!</span>
<span class="hl kwb">pfannkuchen</span>
   <span class="hl kwd">| first complement a b k |</span>
   k <span class="hl opt">:</span><span class="hl kwb">=</span> <span class="hl num">0</span><span class="hl opt">.</span>
   <span class="hl opt">[ (</span>first <span class="hl opt">:</span><span class="hl kwb">=</span> <span class="hl kwa">self</span> <span class="hl kwb">at:</span> <span class="hl num">1</span><span class="hl opt">)</span> <span class="hl kwb">==</span> <span class="hl num">1</span> <span class="hl opt">]</span> <span class="hl kwb">whileFalse:</span> <span class="hl opt">[</span>
      k <span class="hl opt">:</span><span class="hl kwb">=</span> k <span class="hl kwb">+</span> <span class="hl num">1</span><span class="hl opt">.</span>
      complement <span class="hl opt">:</span><span class="hl kwb">=</span> first <span class="hl kwb">+</span> <span class="hl num">1</span><span class="hl opt">.</span>
      <span class="hl num">1</span> <span class="hl kwb">to:</span> first <span class="hl kwb">//</span> <span class="hl num">2</span> <span class="hl kwb">do:</span> <span class="hl opt">[</span> <span class="hl kwd">:i</span> |
         a <span class="hl opt">:</span><span class="hl kwb">=</span> <span class="hl kwa">self</span> <span class="hl kwb">at:</span> i<span class="hl opt">.</span>
         b <span class="hl opt">:</span><span class="hl kwb">=</span> <span class="hl kwa">self</span> <span class="hl kwb">at:</span> complement <span class="hl kwb">-</span> i<span class="hl opt">.</span>
         <span class="hl kwa">self</span> <span class="hl kwb">at:</span> i <span class="hl kwb">put:</span> b<span class="hl opt">.</span>
         <span class="hl kwa">self</span> <span class="hl kwb">at:</span> complement <span class="hl kwb">-</span> i <span class="hl kwb">put:</span> a<span class="hl opt">.</span>
      <span class="hl opt">]</span>
   <span class="hl opt">].</span>
   <span class="hl opt">^</span>k<span class="hl opt">! !</span>



<span class="hl opt">!</span><span class="hl kwc">PermGeneratorRedux</span> <span class="hl kwb">methodsFor:</span> <span class="hl str">'initialize-release'</span><span class="hl opt">!</span>
<span class="hl kwb">initialize:</span> size
   perm <span class="hl opt">:</span><span class="hl kwb">=</span> <span class="hl opt">(</span><span class="hl num">1</span> <span class="hl kwb">to:</span> size<span class="hl opt">)</span> <span class="hl kwb">asArray</span><span class="hl opt">.</span>
   timesRotated <span class="hl opt">:</span><span class="hl kwb">=</span> <span class="hl kwc">Array</span> <span class="hl kwb">new:</span> size <span class="hl kwb">withAll:</span> <span class="hl num">0</span><span class="hl opt">.</span>
   atEnd <span class="hl opt">:</span><span class="hl kwb">=</span> <span class="hl kwa">false</span><span class="hl opt">.</span>
   permCount <span class="hl opt">:</span><span class="hl kwb">=</span> <span class="hl num">0</span><span class="hl opt">! !</span>



<span class="hl opt">!</span><span class="hl kwc">PermGeneratorRedux</span> <span class="hl kwb">methodsFor:</span> <span class="hl str">'initialize-release'</span><span class="hl opt">!</span>
<span class="hl kwb">makeNext</span>
   <span class="hl kwd">| temp remainder |</span>
   <span class="hl com">&quot;* Generate the next permutation. *&quot;</span>
   <span class="hl num">2</span> <span class="hl kwb">to:</span> perm <span class="hl kwb">size do:</span> <span class="hl opt">[</span> <span class="hl kwd">:r</span> |
      <span class="hl com">&quot;* Rotate the first r items to the left. *&quot;</span>
      temp <span class="hl opt">:</span><span class="hl kwb">=</span> perm <span class="hl kwb">at:</span> <span class="hl num">1</span><span class="hl opt">.</span>
      <span class="hl num">1</span> <span class="hl kwb">to:</span> r <span class="hl kwb">-</span> <span class="hl num">1</span> <span class="hl kwb">do:</span> <span class="hl opt">[</span> <span class="hl kwd">:i</span> | perm <span class="hl kwb">at:</span> i <span class="hl kwb">put:</span> <span class="hl opt">(</span>perm <span class="hl kwb">at:</span> i <span class="hl kwb">+</span> <span class="hl num">1</span><span class="hl opt">) ].</span>
      perm <span class="hl kwb">at:</span> r <span class="hl kwb">put:</span> temp<span class="hl opt">.</span>

      remainder <span class="hl opt">:</span><span class="hl kwb">=</span> timesRotated <span class="hl kwb">at:</span> r <span class="hl kwb">put:</span> <span class="hl opt">((</span>timesRotated <span class="hl kwb">at:</span> r<span class="hl opt">)</span> <span class="hl kwb">+</span> <span class="hl num">1</span><span class="hl opt">)</span> <span class="hl esc">\\</span> <span class="hl kwb">r</span><span class="hl opt">.</span>
      remainder <span class="hl kwb">=</span> <span class="hl num">0</span> <span class="hl kwb">ifFalse:</span> <span class="hl opt">[ ^</span><span class="hl kwa">self</span> <span class="hl opt">].</span>

      <span class="hl com">&quot;* After r rotations, the first r items are in their original positions.</span>
<span class="hl com">      Go on rotating the first r+1 items. *&quot;</span>
   <span class="hl opt">].</span>

   <span class="hl com">&quot;* We are past the final permutation. *&quot;</span>
   atEnd <span class="hl opt">:</span><span class="hl kwb">=</span> <span class="hl kwa">true</span><span class="hl opt">! !</span>



<span class="hl opt">!</span><span class="hl kwc">PermGeneratorRedux</span> <span class="hl kwb">methodsFor:</span> <span class="hl str">'benchmarks'</span><span class="hl opt">!</span>
<span class="hl kwb">maxPfannkuchenTo:</span> output
   <span class="hl kwd">| max permutation checksum permCount flipsCount |</span>
   max <span class="hl opt">:</span><span class="hl kwb">=</span> <span class="hl num">0</span><span class="hl opt">.</span>
   permCount <span class="hl opt">:</span><span class="hl kwb">=</span> <span class="hl num">0</span><span class="hl opt">.</span>
   checksum <span class="hl opt">:</span><span class="hl kwb">=</span> <span class="hl num">0</span><span class="hl opt">.</span>
   <span class="hl opt">[</span><span class="hl kwa">self</span> <span class="hl kwb">atEnd</span><span class="hl opt">]</span> <span class="hl kwb">whileFalse:</span>
      <span class="hl opt">[</span>permutation <span class="hl opt">:</span><span class="hl kwb">=</span> <span class="hl kwa">self</span> <span class="hl kwb">next</span><span class="hl opt">.</span>
      permCount <span class="hl opt">:</span><span class="hl kwb">=</span> permCount <span class="hl kwb">+</span> <span class="hl num">1</span><span class="hl opt">.</span>
      <span class="hl opt">(</span>permCount <span class="hl kwb">=</span> <span class="hl num">1048576</span><span class="hl opt">)</span> <span class="hl kwb">ifTrue:</span> <span class="hl opt">[</span>permCount <span class="hl opt">:</span><span class="hl kwb">=</span> <span class="hl num">0</span><span class="hl opt">].</span>
      flipsCount <span class="hl opt">:</span><span class="hl kwb">=</span> permutation <span class="hl kwb">pfannkuchen</span><span class="hl opt">.</span>
      checksum <span class="hl opt">:</span><span class="hl kwb">=</span> permCount <span class="hl kwb">odd ifTrue:</span> <span class="hl opt">[</span>checksum<span class="hl kwb">+</span>flipsCount<span class="hl opt">]</span> <span class="hl kwb">ifFalse:</span> <span class="hl opt">[</span>checksum<span class="hl kwb">-</span>flipsCount<span class="hl opt">].</span>
      max <span class="hl opt">:</span><span class="hl kwb">=</span> max <span class="hl kwb">max:</span> flipsCount<span class="hl opt">].</span>
   output <span class="hl kwb">print:</span> checksum<span class="hl opt">;</span> <span class="hl kwb">nl</span><span class="hl opt">.</span>
   <span class="hl opt">^</span>max<span class="hl opt">! !</span>



<span class="hl opt">!</span><span class="hl kwc">PermGeneratorRedux</span> <span class="hl kwb">methodsFor:</span> <span class="hl str">'accessing'</span><span class="hl opt">!</span>
<span class="hl kwb">atEnd</span>
   <span class="hl opt">^</span>atEnd<span class="hl opt">! !</span>



<span class="hl opt">!</span><span class="hl kwc">PermGeneratorRedux</span> <span class="hl kwb">methodsFor:</span> <span class="hl str">'accessing'</span><span class="hl opt">!</span>
<span class="hl kwb">next</span>
   <span class="hl kwd">| result |</span>
   result <span class="hl opt">:</span><span class="hl kwb">=</span> perm <span class="hl kwb">copy</span><span class="hl opt">.</span>
   <span class="hl kwa">self</span> <span class="hl kwb">makeNext</span><span class="hl opt">.</span>
   <span class="hl opt">^</span>result<span class="hl opt">! !</span>



<span class="hl opt">!</span><span class="hl kwc">PermGeneratorRedux</span> <span class="hl kwb">class methodsFor:</span> <span class="hl str">'instance creation'</span><span class="hl opt">!</span>
<span class="hl kwb">new:</span> size
   <span class="hl opt">^</span><span class="hl kwa">self</span> <span class="hl kwb">new</span>
      <span class="hl kwb">initialize:</span> size<span class="hl opt">;</span>
      yourself<span class="hl opt">! !</span>



<span class="hl opt">!</span><span class="hl kwc">Tests</span> <span class="hl kwb">class methodsFor:</span> <span class="hl str">'benchmarking'</span><span class="hl opt">!</span>
<span class="hl kwb">fannkuchRedux:</span> n <span class="hl kwb">to:</span> output
   <span class="hl opt">^(</span><span class="hl kwc">PermGeneratorRedux</span> <span class="hl kwb">new:</span> n<span class="hl opt">)</span> <span class="hl kwb">maxPfannkuchenTo:</span> output<span class="hl opt">! !</span>



<span class="hl opt">!</span><span class="hl kwc">Tests</span> <span class="hl kwb">class methodsFor:</span> <span class="hl str">'benchmark scripts'</span><span class="hl opt">!</span>
<span class="hl kwb">fannkuchredux</span>
   <span class="hl kwd">| n f |</span>
   n <span class="hl opt">:</span><span class="hl kwb">=</span> <span class="hl kwa">self</span> <span class="hl kwb">arg</span><span class="hl opt">.</span>
   f <span class="hl opt">:</span><span class="hl kwb">=</span> <span class="hl kwa">self</span> <span class="hl kwb">fannkuchRedux:</span> n <span class="hl kwb">to:</span> <span class="hl kwa">self</span> <span class="hl kwb">stdout</span><span class="hl opt">.</span>
   <span class="hl kwa">self</span> <span class="hl kwb">stdout</span>
      <span class="hl kwb">nextPutAll:</span> <span class="hl str">'Pfannkuchen('</span>, <span class="hl kwb">n printString</span>, <span class="hl str">') = '</span><span class="hl opt">;</span>
      <span class="hl kwb">print:</span> f<span class="hl opt">;</span> <span class="hl kwb">nl</span><span class="hl opt">.</span>
   <span class="hl opt">^</span><span class="hl str">''</span><span class="hl opt">! !</span>
