<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com"> * contributed by Sassa NF</span>
<span class="hl com"> * fork-join + NIO</span>
<span class="hl com"> *</span>
<span class="hl com"> * very little left from original contribution by</span>
<span class="hl com"> * Jon Edvardsson which in turn is based on</span>
<span class="hl com"> * the original program by Anthony Donnefort and Enotus.</span>
<span class="hl com"> */</span>

<span class="hl kwa">import</span> java<span class="hl opt">.</span>io<span class="hl opt">.*;</span>
<span class="hl kwa">import</span> java<span class="hl opt">.</span>nio<span class="hl opt">.*;</span>
<span class="hl kwa">import</span> java<span class="hl opt">.</span>nio<span class="hl opt">.</span>channels<span class="hl opt">.*;</span>
<span class="hl kwa">import</span> java<span class="hl opt">.</span>util<span class="hl opt">.</span>ArrayList<span class="hl opt">;</span>
<span class="hl kwa">import</span> java<span class="hl opt">.</span>util<span class="hl opt">.</span>concurrent<span class="hl opt">.*;</span>

<span class="hl kwa">public class</span> revcomp <span class="hl kwa">extends</span> RecursiveTask<span class="hl opt">&lt;</span>ArrayList<span class="hl opt">&lt;</span>revcomp<span class="hl opt">&gt;&gt; {</span>
  <span class="hl kwa">private static final</span> <span class="hl kwb">byte</span><span class="hl opt">[]</span> map <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwb">byte</span><span class="hl opt">[</span><span class="hl num">128</span><span class="hl opt">];</span>
  <span class="hl kwa">private static final</span> ByteBuffer bytes<span class="hl opt">;</span>
  <span class="hl kwa">private static final</span> Semaphore processed <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Semaphore</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">);</span>
  <span class="hl kwa">private static final</span> <span class="hl kwb">int</span> THRESHOLD <span class="hl opt">=</span> <span class="hl num">1024</span><span class="hl opt">*</span><span class="hl num">1024</span><span class="hl opt">;</span>
  <span class="hl kwa">private static final</span> ForkJoinPool jobs <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">ForkJoinPool</span><span class="hl opt">();</span>

  <span class="hl kwa">private static</span> <span class="hl kwb">int</span> tails <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>

  <span class="hl kwa">static</span> <span class="hl opt">{</span>
    ByteBuffer b <span class="hl opt">=</span> null<span class="hl opt">;</span>
    <span class="hl kwa">try</span> <span class="hl opt">{</span>
      b <span class="hl opt">=</span> ByteBuffer<span class="hl opt">.</span><span class="hl kwd">allocateDirect</span><span class="hl opt">(</span>System<span class="hl opt">.</span><span class="hl kwa">in</span><span class="hl opt">.</span><span class="hl kwd">available</span><span class="hl opt">());</span>
    <span class="hl opt">}</span> <span class="hl kwa">catch</span><span class="hl opt">(</span>Exception ioe<span class="hl opt">) {</span>
    <span class="hl opt">}</span>
    bytes <span class="hl opt">=</span> b<span class="hl opt">;</span>
    String<span class="hl opt">[]</span> mm <span class="hl opt">= {</span> <span class="hl str">&quot;ACBDGHK</span><span class="hl esc">\n</span><span class="hl str">MNSRUTWVYacbdghkmnsrutwvy&quot;</span><span class="hl opt">,</span>
                    <span class="hl str">&quot;TGVHCDM</span><span class="hl esc">\n</span><span class="hl str">KNSYAAWBRTGVHCDMKNSYAAWBR&quot;</span> <span class="hl opt">};</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> mm<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">].</span><span class="hl kwd">length</span><span class="hl opt">();</span> i<span class="hl opt">++)</span>
      map<span class="hl opt">[</span>mm<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">].</span><span class="hl kwd">charAt</span><span class="hl opt">(</span>i<span class="hl opt">)] = (</span><span class="hl kwb">byte</span><span class="hl opt">)</span> mm<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">].</span><span class="hl kwd">charAt</span><span class="hl opt">(</span>i<span class="hl opt">);</span>
  <span class="hl opt">}</span>

  <span class="hl kwa">private static</span> <span class="hl kwb">void</span> <span class="hl kwd">reverse</span><span class="hl opt">(</span>ByteBuffer bytes<span class="hl opt">,</span> <span class="hl kwb">int</span> f<span class="hl opt">,</span> <span class="hl kwb">int</span> t<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span> f <span class="hl opt">&gt;=</span> t <span class="hl opt">)</span> <span class="hl kwa">return</span><span class="hl opt">;</span>
    <span class="hl kwa">for</span><span class="hl opt">(;;) {</span>
      <span class="hl kwb">int</span> b <span class="hl opt">=</span> bytes<span class="hl opt">.</span><span class="hl kwd">get</span><span class="hl opt">(</span>f<span class="hl opt">);</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>b <span class="hl opt">==</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl opt">)</span> b <span class="hl opt">=</span> bytes<span class="hl opt">.</span><span class="hl kwd">get</span><span class="hl opt">(++</span>f<span class="hl opt">);</span>
      <span class="hl kwb">int</span> e <span class="hl opt">=</span> bytes<span class="hl opt">.</span><span class="hl kwd">get</span><span class="hl opt">(--</span>t<span class="hl opt">);</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>e <span class="hl opt">==</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl opt">)</span> e <span class="hl opt">=</span> bytes<span class="hl opt">.</span><span class="hl kwd">get</span><span class="hl opt">(--</span>t<span class="hl opt">);</span>

      <span class="hl kwa">if</span> <span class="hl opt">(</span>f <span class="hl opt">&gt;</span> t<span class="hl opt">)</span> <span class="hl kwa">break</span><span class="hl opt">;</span>
      bytes<span class="hl opt">.</span><span class="hl kwd">put</span><span class="hl opt">(</span>f<span class="hl opt">++,</span> map<span class="hl opt">[</span>e<span class="hl opt">]);</span>
      bytes<span class="hl opt">.</span><span class="hl kwd">put</span><span class="hl opt">(</span>t<span class="hl opt">,</span> map<span class="hl opt">[</span>b<span class="hl opt">]);</span>
    <span class="hl opt">}</span>
  <span class="hl opt">}</span>

  <span class="hl kwa">private static</span> <span class="hl kwb">void</span> <span class="hl kwd">reverse</span><span class="hl opt">(</span>ByteBuffer<span class="hl opt">[]</span> bbs<span class="hl opt">) {</span>
    <span class="hl kwb">int</span> head <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwb">int</span> tail <span class="hl opt">=</span> bbs<span class="hl opt">.</span>length<span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span> tail <span class="hl opt">==</span> <span class="hl num">0</span> <span class="hl opt">)</span> <span class="hl kwa">return</span><span class="hl opt">;</span>
    ByteBuffer bh <span class="hl opt">=</span> bbs<span class="hl opt">[</span>head<span class="hl opt">++];</span>
    ByteBuffer bt <span class="hl opt">=</span> bbs<span class="hl opt">[--</span>tail<span class="hl opt">];</span>
    <span class="hl kwb">int</span> f <span class="hl opt">=</span> bh<span class="hl opt">.</span><span class="hl kwd">position</span><span class="hl opt">();</span>
    <span class="hl kwb">int</span> t <span class="hl opt">=</span> bt<span class="hl opt">.</span><span class="hl kwd">limit</span><span class="hl opt">()-</span><span class="hl num">1</span><span class="hl opt">;</span>
    <span class="hl kwa">while</span><span class="hl opt">(</span> bh <span class="hl opt">!=</span> bt <span class="hl opt">) {</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span> f <span class="hl opt">==</span> bh<span class="hl opt">.</span><span class="hl kwd">limit</span><span class="hl opt">() ) {</span>
        bh <span class="hl opt">=</span> bbs<span class="hl opt">[</span>head<span class="hl opt">++];</span>
        f <span class="hl opt">=</span> bh<span class="hl opt">.</span><span class="hl kwd">position</span><span class="hl opt">();</span>
        <span class="hl kwa">continue</span><span class="hl opt">;</span>
      <span class="hl opt">}</span>

      <span class="hl kwa">if</span> <span class="hl opt">(</span> t <span class="hl opt">&lt;</span> bt<span class="hl opt">.</span><span class="hl kwd">position</span><span class="hl opt">() ) {</span>
        bt <span class="hl opt">=</span> bbs<span class="hl opt">[--</span>tail<span class="hl opt">];</span>
        t <span class="hl opt">=</span> bt<span class="hl opt">.</span><span class="hl kwd">limit</span><span class="hl opt">()-</span><span class="hl num">1</span><span class="hl opt">;</span>
        <span class="hl kwa">continue</span><span class="hl opt">;</span>
      <span class="hl opt">}</span>

      <span class="hl kwb">int</span> b <span class="hl opt">=</span> bh<span class="hl opt">.</span><span class="hl kwd">get</span><span class="hl opt">(</span>f<span class="hl opt">);</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>b <span class="hl opt">==</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span> <span class="hl opt">) {</span>
        f<span class="hl opt">++;</span>
        <span class="hl kwa">continue</span><span class="hl opt">;</span>
      <span class="hl opt">}</span>

      <span class="hl kwb">int</span> e <span class="hl opt">=</span> bt<span class="hl opt">.</span><span class="hl kwd">get</span><span class="hl opt">(</span>t<span class="hl opt">);</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>e <span class="hl opt">==</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span> <span class="hl opt">) {</span>
        t<span class="hl opt">--;</span>
        <span class="hl kwa">continue</span><span class="hl opt">;</span>
      <span class="hl opt">}</span>

       bh<span class="hl opt">.</span><span class="hl kwd">put</span><span class="hl opt">(</span>f<span class="hl opt">++,</span> map<span class="hl opt">[</span>e<span class="hl opt">]);</span>
       bt<span class="hl opt">.</span><span class="hl kwd">put</span><span class="hl opt">(</span>t<span class="hl opt">--,</span> map<span class="hl opt">[</span>b<span class="hl opt">]);</span>
    <span class="hl opt">}</span>

    <span class="hl kwd">reverse</span><span class="hl opt">(</span>bh<span class="hl opt">,</span> f<span class="hl opt">,</span> t<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">);</span>
  <span class="hl opt">}</span>

  <span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">main</span><span class="hl opt">(</span>String <span class="hl opt">[]</span> args<span class="hl opt">)</span> <span class="hl kwa">throws</span> Exception <span class="hl opt">{</span>
    <span class="hl kwb">long</span> t0 <span class="hl opt">=</span> System<span class="hl opt">.</span><span class="hl kwd">nanoTime</span><span class="hl opt">();</span>
    FileChannel <span class="hl kwa">in</span> <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">FileInputStream</span><span class="hl opt">(</span>FileDescriptor<span class="hl opt">.</span><span class="hl kwa">in</span><span class="hl opt">).</span><span class="hl kwd">getChannel</span><span class="hl opt">();</span>
    <span class="hl kwa">while</span><span class="hl opt">(</span>bytes<span class="hl opt">.</span><span class="hl kwd">hasRemaining</span><span class="hl opt">()) {</span>
      <span class="hl kwa">in</span><span class="hl opt">.</span><span class="hl kwd">read</span><span class="hl opt">(</span>bytes<span class="hl opt">);</span>
    <span class="hl opt">}</span>
    bytes<span class="hl opt">.</span><span class="hl kwd">flip</span><span class="hl opt">();</span>

    revcomp t <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">revcomp</span><span class="hl opt">(</span>bytes<span class="hl opt">);</span>
    jobs<span class="hl opt">.</span><span class="hl kwd">execute</span><span class="hl opt">(</span>t<span class="hl opt">);</span>

    ArrayList<span class="hl opt">&lt;</span>revcomp<span class="hl opt">&gt;</span> bs <span class="hl opt">=</span> t<span class="hl opt">.</span><span class="hl kwd">flatten</span><span class="hl opt">();</span>
    ArrayList<span class="hl opt">&lt;</span>ByteBuffer<span class="hl opt">&gt;</span> head <span class="hl opt">=</span> <span class="hl kwa">new</span> ArrayList<span class="hl opt">&lt;</span>ByteBuffer<span class="hl opt">&gt;(</span>bs<span class="hl opt">.</span><span class="hl kwd">size</span><span class="hl opt">()*</span><span class="hl num">2</span><span class="hl opt">);</span>
    ArrayList<span class="hl opt">&lt;</span>ByteBuffer<span class="hl opt">&gt;</span> tail <span class="hl opt">=</span> <span class="hl kwa">new</span> ArrayList<span class="hl opt">&lt;</span>ByteBuffer<span class="hl opt">&gt;(</span>bs<span class="hl opt">.</span><span class="hl kwd">size</span><span class="hl opt">()*</span><span class="hl num">2</span><span class="hl opt">);</span>
    <span class="hl kwa">for</span><span class="hl opt">(</span> revcomp b<span class="hl opt">:</span> bs <span class="hl opt">)</span> b<span class="hl opt">.</span><span class="hl kwd">foldl</span><span class="hl opt">(</span> head<span class="hl opt">,</span> tail <span class="hl opt">);</span>

    <span class="hl kwd">reverse</span><span class="hl opt">(</span>tail<span class="hl opt">.</span><span class="hl kwd">toArray</span><span class="hl opt">(</span><span class="hl kwa">new</span> ByteBuffer<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">]));</span>

    head<span class="hl opt">.</span><span class="hl kwd">addAll</span><span class="hl opt">(</span>tail<span class="hl opt">);</span>
    ByteBuffer<span class="hl opt">[]</span> toWrite <span class="hl opt">=</span> head<span class="hl opt">.</span><span class="hl kwd">toArray</span><span class="hl opt">(</span><span class="hl kwa">new</span> ByteBuffer<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">]);</span>

    processed<span class="hl opt">.</span><span class="hl kwd">acquire</span><span class="hl opt">(</span>tails<span class="hl opt">);</span>

    FileChannel out <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">FileOutputStream</span><span class="hl opt">(</span>FileDescriptor<span class="hl opt">.</span>out<span class="hl opt">).</span><span class="hl kwd">getChannel</span><span class="hl opt">();</span>

    <span class="hl kwb">long</span> sz<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">while</span><span class="hl opt">((</span> sz <span class="hl opt">+=</span> out<span class="hl opt">.</span><span class="hl kwd">write</span><span class="hl opt">(</span>toWrite<span class="hl opt">) ) &lt;</span> bytes<span class="hl opt">.</span><span class="hl kwd">capacity</span><span class="hl opt">());</span>
    out<span class="hl opt">.</span><span class="hl kwd">force</span><span class="hl opt">(</span>true<span class="hl opt">);</span>

    System<span class="hl opt">.</span>err<span class="hl opt">.</span><span class="hl kwd">println</span><span class="hl opt">( (</span> System<span class="hl opt">.</span><span class="hl kwd">nanoTime</span><span class="hl opt">() -</span> t0 <span class="hl opt">) /</span> <span class="hl num">1</span>e9 <span class="hl opt">);</span>
  <span class="hl opt">}</span>

  ByteBuffer<span class="hl opt">[]</span> bufs<span class="hl opt">;</span>
  ByteBuffer buf<span class="hl opt">;</span>
  <span class="hl kwb">int</span> firstt<span class="hl opt">;</span>
  <span class="hl kwb">int</span> lastf<span class="hl opt">;</span>

  <span class="hl kwa">public</span> <span class="hl kwd">revcomp</span><span class="hl opt">(</span>ByteBuffer b<span class="hl opt">) {</span>
    buf <span class="hl opt">=</span> b<span class="hl opt">;</span>
  <span class="hl opt">}</span>

  <span class="hl kwa">public</span> <span class="hl kwd">revcomp</span><span class="hl opt">(</span>ByteBuffer<span class="hl opt">[]</span> bs<span class="hl opt">) {</span>
    bufs <span class="hl opt">=</span> bs<span class="hl opt">;</span>
  <span class="hl opt">}</span>

  <span class="hl kwa">protected</span> ArrayList<span class="hl opt">&lt;</span>revcomp<span class="hl opt">&gt;</span> <span class="hl kwd">compute</span><span class="hl opt">() {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>bufs <span class="hl opt">!=</span> null<span class="hl opt">) {</span>
      <span class="hl kwd">reverse</span><span class="hl opt">(</span>bufs<span class="hl opt">);</span>
      processed<span class="hl opt">.</span><span class="hl kwd">release</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">);</span>
      <span class="hl kwa">return</span> null<span class="hl opt">;</span>
    <span class="hl opt">}</span>

    ArrayList<span class="hl opt">&lt;</span>revcomp<span class="hl opt">&gt;</span> al <span class="hl opt">=</span> <span class="hl kwa">new</span> ArrayList<span class="hl opt">&lt;</span>revcomp<span class="hl opt">&gt;();</span>

    <span class="hl kwa">while</span><span class="hl opt">(</span> buf<span class="hl opt">.</span><span class="hl kwd">remaining</span><span class="hl opt">() &gt;</span> THRESHOLD <span class="hl opt">) {</span>
      <span class="hl kwb">int</span> next <span class="hl opt">= (</span>buf<span class="hl opt">.</span><span class="hl kwd">position</span><span class="hl opt">() +</span> buf<span class="hl opt">.</span><span class="hl kwd">limit</span><span class="hl opt">()) /</span> <span class="hl num">2</span><span class="hl opt">;</span>
         <span class="hl slc">// assuming well-formed input, the buffer must contain</span>
         <span class="hl slc">// at least one CRLF in THRESHOLD bytes</span>
      <span class="hl kwa">while</span><span class="hl opt">(</span> buf<span class="hl opt">.</span><span class="hl kwd">get</span><span class="hl opt">(</span>next<span class="hl opt">) !=</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span> <span class="hl opt">)</span> next<span class="hl opt">--;</span> 
      ByteBuffer b <span class="hl opt">=</span> buf<span class="hl opt">.</span><span class="hl kwd">slice</span><span class="hl opt">();</span>
      b<span class="hl opt">.</span><span class="hl kwd">limit</span><span class="hl opt">(</span>next<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">-</span>buf<span class="hl opt">.</span><span class="hl kwd">position</span><span class="hl opt">());</span>
      buf<span class="hl opt">.</span><span class="hl kwd">position</span><span class="hl opt">(</span>next<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">);</span>
      revcomp t <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">revcomp</span><span class="hl opt">(</span>b<span class="hl opt">);</span>
      jobs<span class="hl opt">.</span><span class="hl kwd">execute</span><span class="hl opt">(</span>t<span class="hl opt">);</span>
      al<span class="hl opt">.</span><span class="hl kwd">add</span><span class="hl opt">(</span>t<span class="hl opt">);</span>
    <span class="hl opt">}</span>

    <span class="hl kwb">int</span> f <span class="hl opt">=</span> buf<span class="hl opt">.</span><span class="hl kwd">position</span><span class="hl opt">();</span>
    <span class="hl kwb">int</span> t <span class="hl opt">=</span> f<span class="hl opt">;</span>
    <span class="hl kwa">while</span><span class="hl opt">(</span>t <span class="hl opt">&lt;</span> buf<span class="hl opt">.</span><span class="hl kwd">limit</span><span class="hl opt">() &amp;&amp;</span> buf<span class="hl opt">.</span><span class="hl kwd">get</span><span class="hl opt">(</span>t<span class="hl opt">) !=</span> <span class="hl str">'&gt;'</span><span class="hl opt">)</span> t<span class="hl opt">++;</span>
    lastf <span class="hl opt">=</span> f<span class="hl opt">;</span>
    firstt <span class="hl opt">=</span> t<span class="hl opt">;</span> 
       <span class="hl slc">// this is where the first entry ends; </span>
       <span class="hl slc">// it must go before the last entry of the previous job</span>
    <span class="hl kwa">for</span><span class="hl opt">(;;) {</span>
         <span class="hl slc">// we don't reverse the first entry, </span>
         <span class="hl slc">// and we don't reverse the last entry</span>
      <span class="hl kwa">while</span><span class="hl opt">(</span>t <span class="hl opt">&lt;</span> buf<span class="hl opt">.</span><span class="hl kwd">limit</span><span class="hl opt">() &amp;&amp;</span> buf<span class="hl opt">.</span><span class="hl kwd">get</span><span class="hl opt">(</span>t<span class="hl opt">) !=</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl opt">)</span> t<span class="hl opt">++;</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span> t <span class="hl opt">==</span> buf<span class="hl opt">.</span><span class="hl kwd">limit</span><span class="hl opt">() )</span> <span class="hl kwa">break</span><span class="hl opt">;</span>
      f <span class="hl opt">=</span> t<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">;</span>
      lastf <span class="hl opt">=</span> f<span class="hl opt">;</span>

      <span class="hl kwa">while</span><span class="hl opt">(</span>t <span class="hl opt">&lt;</span> buf<span class="hl opt">.</span><span class="hl kwd">limit</span><span class="hl opt">() &amp;&amp;</span> buf<span class="hl opt">.</span><span class="hl kwd">get</span><span class="hl opt">(</span>t<span class="hl opt">) !=</span> <span class="hl str">'&gt;'</span><span class="hl opt">)</span> t<span class="hl opt">++;</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span> t <span class="hl opt">==</span> buf<span class="hl opt">.</span><span class="hl kwd">limit</span><span class="hl opt">() )</span> <span class="hl kwa">break</span><span class="hl opt">;</span>

      <span class="hl kwd">reverse</span><span class="hl opt">(</span> buf<span class="hl opt">,</span> f<span class="hl opt">,</span> t <span class="hl opt">);</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">return</span> al<span class="hl opt">;</span>
  <span class="hl opt">}</span>

  <span class="hl kwa">public</span> ArrayList<span class="hl opt">&lt;</span>revcomp<span class="hl opt">&gt;</span> <span class="hl kwd">flatten</span><span class="hl opt">()</span> <span class="hl kwa">throws</span> InterruptedException<span class="hl opt">,</span> ExecutionException <span class="hl opt">{</span>
    ArrayList<span class="hl opt">&lt;</span>revcomp<span class="hl opt">&gt;</span> pre <span class="hl opt">=</span> <span class="hl kwd">get</span><span class="hl opt">();</span>
    ArrayList<span class="hl opt">&lt;</span>revcomp<span class="hl opt">&gt;</span> r <span class="hl opt">=</span> pre<span class="hl opt">.</span><span class="hl kwd">isEmpty</span><span class="hl opt">()</span> ? pre<span class="hl opt">:</span> <span class="hl kwa">new</span> ArrayList<span class="hl opt">&lt;</span>revcomp<span class="hl opt">&gt;();</span>
    <span class="hl kwa">for</span><span class="hl opt">(</span> revcomp p<span class="hl opt">:</span> pre <span class="hl opt">)</span> r<span class="hl opt">.</span><span class="hl kwd">addAll</span><span class="hl opt">(</span> p<span class="hl opt">.</span><span class="hl kwd">flatten</span><span class="hl opt">() );</span>
    r<span class="hl opt">.</span><span class="hl kwd">add</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">);</span>
    <span class="hl kwa">return</span> r<span class="hl opt">;</span>
  <span class="hl opt">}</span>

  <span class="hl kwa">public</span> <span class="hl kwb">void</span> <span class="hl kwd">foldl</span><span class="hl opt">(</span>ArrayList<span class="hl opt">&lt;</span>ByteBuffer<span class="hl opt">&gt;</span> head<span class="hl opt">,</span> ArrayList<span class="hl opt">&lt;</span>ByteBuffer<span class="hl opt">&gt;</span> tail<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span> lastf <span class="hl opt">&lt;=</span> firstt <span class="hl opt">) {</span> 
         <span class="hl slc">// all in one chunk - add all to head</span>
      tail<span class="hl opt">.</span><span class="hl kwd">add</span><span class="hl opt">(</span>buf<span class="hl opt">);</span>
      <span class="hl kwa">return</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>firstt <span class="hl opt">&gt;</span> buf<span class="hl opt">.</span><span class="hl kwd">position</span><span class="hl opt">()) {</span>
      ByteBuffer first <span class="hl opt">=</span> buf<span class="hl opt">.</span><span class="hl kwd">slice</span><span class="hl opt">();</span>
      first<span class="hl opt">.</span><span class="hl kwd">limit</span><span class="hl opt">(</span>firstt <span class="hl opt">-</span> buf<span class="hl opt">.</span><span class="hl kwd">position</span><span class="hl opt">());</span>

      tail<span class="hl opt">.</span><span class="hl kwd">add</span><span class="hl opt">(</span>first<span class="hl opt">);</span>
    <span class="hl opt">}</span>
    jobs<span class="hl opt">.</span><span class="hl kwd">execute</span><span class="hl opt">(</span><span class="hl kwa">new</span> <span class="hl kwd">revcomp</span><span class="hl opt">(</span>tail<span class="hl opt">.</span><span class="hl kwd">toArray</span><span class="hl opt">(</span><span class="hl kwa">new</span> ByteBuffer<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">])));</span>
    tails<span class="hl opt">++;</span>
    head<span class="hl opt">.</span><span class="hl kwd">addAll</span><span class="hl opt">(</span>tail<span class="hl opt">);</span>
    head<span class="hl opt">.</span><span class="hl kwd">add</span><span class="hl opt">(</span>buf<span class="hl opt">);</span>

    tail<span class="hl opt">.</span><span class="hl kwd">clear</span><span class="hl opt">();</span>

    ByteBuffer last <span class="hl opt">=</span> buf<span class="hl opt">.</span><span class="hl kwd">slice</span><span class="hl opt">();</span>
    last<span class="hl opt">.</span><span class="hl kwd">position</span><span class="hl opt">(</span>lastf <span class="hl opt">-</span> buf<span class="hl opt">.</span><span class="hl kwd">position</span><span class="hl opt">());</span>
    buf<span class="hl opt">.</span><span class="hl kwd">limit</span><span class="hl opt">(</span>lastf<span class="hl opt">);</span>
    tail<span class="hl opt">.</span><span class="hl kwd">add</span><span class="hl opt">(</span>last<span class="hl opt">);</span>

    buf<span class="hl opt">.</span><span class="hl kwd">position</span><span class="hl opt">(</span>firstt<span class="hl opt">);</span>
  <span class="hl opt">}</span>
<span class="hl opt">}</span>
