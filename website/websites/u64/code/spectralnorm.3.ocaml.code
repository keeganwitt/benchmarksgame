<span class="hl com">(* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * Contributed by Sebastien Loisel</span>
<span class="hl com"> * Cleanup by Troestler Christophe</span>
<span class="hl com"> * Parallelized by Mauricio Fernandez</span>
<span class="hl com"> *)</span>

<span class="hl kwa">open</span> <span class="hl kwd">Bigarray</span>
<span class="hl kwa">type</span> v <span class="hl opt">= (</span><span class="hl kwb">float</span><span class="hl opt">,</span> float64_elt<span class="hl opt">,</span> c_layout<span class="hl opt">)</span> <span class="hl kwc">Array1</span><span class="hl opt">.</span>t

<span class="hl kwa">let</span> max_workers <span class="hl opt">=</span> <span class="hl num">8</span>

<span class="hl kwa">let</span> map_chunks f low hi <span class="hl opt">=</span>
  <span class="hl kwa">let</span> step <span class="hl opt">= (</span>hi <span class="hl opt">-</span> low<span class="hl opt">) /</span> max_workers <span class="hl kwa">in</span>
  <span class="hl kwa">let rec</span> loop acc n <span class="hl opt">=</span>
    <span class="hl kwa">if</span> n <span class="hl opt">&lt;</span> hi <span class="hl kwa">then</span>
      <span class="hl kwa">let</span> n<span class="hl str">' = n + step in loop (f (n, (min hi n'</span><span class="hl opt">)) ::</span> acc<span class="hl opt">)</span> n<span class="hl str">'</span>
<span class="hl str">    else acc</span>
<span class="hl str">  in loop [] low</span>
<span class="hl str"></span>
<span class="hl str">let wait_for = List.iter (fun f -&gt; f())</span>
<span class="hl str"></span>
<span class="hl str">(* original function due to Jon D. Harrop *)</span>
<span class="hl str">let invoke (f : '</span>a <span class="hl opt">-&gt;</span> <span class="hl str">'b) x : unit -&gt; '</span>b <span class="hl opt">=</span>
  <span class="hl kwa">let</span> input<span class="hl opt">,</span> output <span class="hl opt">=</span> <span class="hl kwc">Unix</span><span class="hl opt">.</span>pipe<span class="hl opt">()</span> <span class="hl kwa">in</span>
  <span class="hl kwa">match</span> <span class="hl kwc">Unix</span><span class="hl opt">.</span>fork<span class="hl opt">()</span> <span class="hl kwa">with</span>
  | <span class="hl opt">-</span><span class="hl num">1</span> <span class="hl opt">-&gt;</span> <span class="hl kwc">Unix</span><span class="hl opt">.</span>close input<span class="hl opt">;</span> <span class="hl kwc">Unix</span><span class="hl opt">.</span>close output<span class="hl opt">; (</span><span class="hl kwa">let</span> v <span class="hl opt">=</span> f x <span class="hl kwa">in fun</span> <span class="hl opt">() -&gt;</span> v<span class="hl opt">)</span>
  | <span class="hl num">0</span> <span class="hl opt">-&gt;</span>
      <span class="hl kwc">Unix</span><span class="hl opt">.</span>close input<span class="hl opt">;</span>
      <span class="hl kwa">let</span> output <span class="hl opt">=</span> <span class="hl kwc">Unix</span><span class="hl opt">.</span>out_channel_of_descr output <span class="hl kwa">in</span>
        <span class="hl kwc">Marshal</span><span class="hl opt">.</span>to_channel output <span class="hl opt">(</span><span class="hl kwa">try</span> `<span class="hl kwd">Res</span><span class="hl opt">(</span>f x<span class="hl opt">)</span> <span class="hl kwa">with</span> e <span class="hl opt">-&gt;</span> `<span class="hl kwd">Exn</span> e<span class="hl opt">) [];</span>
        close_out output<span class="hl opt">;</span>
        exit <span class="hl num">0</span>
  | pid <span class="hl opt">-&gt;</span>
      <span class="hl kwc">Unix</span><span class="hl opt">.</span>close output<span class="hl opt">;</span>
      <span class="hl kwa">let</span> input <span class="hl opt">=</span> <span class="hl kwc">Unix</span><span class="hl opt">.</span>in_channel_of_descr input <span class="hl kwa">in fun</span> <span class="hl opt">() -&gt;</span>
        <span class="hl kwa">let</span> v <span class="hl opt">=</span> <span class="hl kwc">Marshal</span><span class="hl opt">.</span>from_channel input <span class="hl kwa">in</span>
        ignore <span class="hl opt">(</span><span class="hl kwc">Unix</span><span class="hl opt">.</span>waitpid <span class="hl opt">[]</span> pid<span class="hl opt">);</span>
        close_in input<span class="hl opt">;</span>
        <span class="hl kwa">match</span> v <span class="hl kwa">with</span> `<span class="hl kwd">Res</span> x <span class="hl opt">-&gt;</span> x | `<span class="hl kwd">Exn</span> e <span class="hl opt">-&gt;</span> raise e

<span class="hl kwa">let</span> eval_A i j <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">. /.</span> <span class="hl kwb">float</span><span class="hl opt">((</span>i<span class="hl opt">+</span>j<span class="hl opt">)*(</span>i<span class="hl opt">+</span>j<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)/</span><span class="hl num">2</span><span class="hl opt">+</span>i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)</span>

<span class="hl kwa">let</span> eval_A_times_u <span class="hl opt">(</span>u <span class="hl opt">:</span> v<span class="hl opt">) (</span>v <span class="hl opt">:</span> v<span class="hl opt">) =</span>
  <span class="hl kwa">let</span> n <span class="hl opt">=</span> <span class="hl kwc">Array1</span><span class="hl opt">.</span>dim v <span class="hl opt">-</span> <span class="hl num">1</span> <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> compute <span class="hl opt">(</span>p<span class="hl opt">,</span> q<span class="hl opt">) =</span>
    <span class="hl kwa">for</span> i <span class="hl opt">=</span> p <span class="hl kwa">to</span> q <span class="hl kwa">do</span>
      <span class="hl kwa">let</span> vi <span class="hl opt">=</span> <span class="hl kwb">ref</span> <span class="hl num">0</span><span class="hl opt">.</span> <span class="hl kwa">in</span>
        <span class="hl kwa">for</span> j <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> n <span class="hl kwa">do</span> vi <span class="hl opt">:= !</span>vi <span class="hl opt">+.</span> eval_A i j <span class="hl opt">*.</span> u<span class="hl opt">.{</span>j<span class="hl opt">}</span> <span class="hl kwa">done</span><span class="hl opt">;</span>
        v<span class="hl opt">.{</span>i<span class="hl opt">} &lt;- !</span>vi
    <span class="hl kwa">done</span>
  <span class="hl kwa">in</span> wait_for <span class="hl opt">(</span>map_chunks <span class="hl opt">(</span>invoke compute<span class="hl opt">)</span> <span class="hl num">0</span> n<span class="hl opt">)</span>

<span class="hl kwa">let</span> eval_At_times_u <span class="hl opt">(</span>u <span class="hl opt">:</span> v<span class="hl opt">) (</span>v <span class="hl opt">:</span> v<span class="hl opt">) =</span>
  <span class="hl kwa">let</span> n <span class="hl opt">=</span> <span class="hl kwc">Array1</span><span class="hl opt">.</span>dim v <span class="hl opt">-</span> <span class="hl num">1</span> <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> compute <span class="hl opt">(</span>p<span class="hl opt">,</span> q<span class="hl opt">) =</span>
    <span class="hl kwa">for</span> i <span class="hl opt">=</span> p <span class="hl kwa">to</span> q <span class="hl kwa">do</span>
      <span class="hl kwa">let</span> vi <span class="hl opt">=</span> <span class="hl kwb">ref</span> <span class="hl num">0</span><span class="hl opt">.</span> <span class="hl kwa">in</span>
        <span class="hl kwa">for</span> j <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> n <span class="hl kwa">do</span> vi <span class="hl opt">:= !</span>vi <span class="hl opt">+.</span> eval_A j i <span class="hl opt">*.</span> u<span class="hl opt">.{</span>j<span class="hl opt">}</span> <span class="hl kwa">done</span><span class="hl opt">;</span>
        v<span class="hl opt">.{</span>i<span class="hl opt">} &lt;- !</span>vi
    <span class="hl kwa">done</span>
  <span class="hl kwa">in</span> wait_for <span class="hl opt">(</span>map_chunks <span class="hl opt">(</span>invoke compute<span class="hl opt">)</span> <span class="hl num">0</span> n<span class="hl opt">)</span>

<span class="hl kwa">let</span> make_array n x <span class="hl opt">=</span>
  <span class="hl kwa">let</span> v <span class="hl opt">=</span> <span class="hl kwc">Array1</span><span class="hl opt">.</span>map_file
            <span class="hl opt">(</span><span class="hl kwc">Unix</span><span class="hl opt">.</span>openfile <span class="hl str">&quot;/dev/zero&quot;</span> <span class="hl opt">[</span><span class="hl kwc">Unix</span><span class="hl opt">.</span><span class="hl kwd">O_RDWR</span><span class="hl opt">]</span> <span class="hl num">0</span>o755<span class="hl opt">)</span>
            float64 c_layout <span class="hl kwa">true</span> n <span class="hl kwa">in</span>
    <span class="hl kwa">for</span> i <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> n <span class="hl opt">-</span> <span class="hl num">1</span> <span class="hl kwa">do</span> v<span class="hl opt">.{</span>i<span class="hl opt">} &lt;-</span> x <span class="hl kwa">done</span><span class="hl opt">;</span>
    v

<span class="hl kwa">let</span> eval_AtA_times_u u v <span class="hl opt">=</span>
  <span class="hl kwa">let</span> w <span class="hl opt">=</span> make_array <span class="hl opt">(</span><span class="hl kwc">Array1</span><span class="hl opt">.</span>dim u<span class="hl opt">)</span> <span class="hl num">0.0</span> <span class="hl kwa">in</span>
  eval_A_times_u u w<span class="hl opt">;</span> eval_At_times_u w v

<span class="hl kwa">let</span> <span class="hl opt">() =</span>
  <span class="hl kwa">let</span> n <span class="hl opt">=</span> <span class="hl kwa">try</span> int_of_string<span class="hl opt">(</span><span class="hl kwc">Array</span><span class="hl opt">.</span>get <span class="hl kwc">Sys</span><span class="hl opt">.</span>argv <span class="hl num">1</span><span class="hl opt">)</span> <span class="hl kwa">with</span> _ <span class="hl opt">-&gt;</span>  <span class="hl num">2000</span> <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> u <span class="hl opt">=</span> make_array n <span class="hl num">1.0</span>  <span class="hl kwa">and</span>  v <span class="hl opt">=</span> make_array n <span class="hl num">0.0</span> <span class="hl kwa">in</span>
  <span class="hl kwa">for</span> i <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> <span class="hl num">9</span> <span class="hl kwa">do</span>
    eval_AtA_times_u u v<span class="hl opt">;</span> eval_AtA_times_u v u
  <span class="hl kwa">done</span><span class="hl opt">;</span>

  <span class="hl kwa">let</span> vv <span class="hl opt">=</span> <span class="hl kwb">ref</span> <span class="hl num">0.0</span>  <span class="hl kwa">and</span>  vBv <span class="hl opt">=</span> <span class="hl kwb">ref</span> <span class="hl num">0.0</span> <span class="hl kwa">in</span>
  <span class="hl kwa">for</span> i<span class="hl opt">=</span><span class="hl num">0</span> <span class="hl kwa">to</span> n<span class="hl opt">-</span><span class="hl num">1</span> <span class="hl kwa">do</span>
    vv <span class="hl opt">:= !</span>vv <span class="hl opt">+.</span> v<span class="hl opt">.{</span>i<span class="hl opt">} *.</span> v<span class="hl opt">.{</span>i<span class="hl opt">};</span>
    vBv <span class="hl opt">:= !</span>vBv <span class="hl opt">+.</span> u<span class="hl opt">.{</span>i<span class="hl opt">} *.</span> v<span class="hl opt">.{</span>i<span class="hl opt">}</span>
  <span class="hl kwa">done</span><span class="hl opt">;</span>
  <span class="hl kwc">Printf</span><span class="hl opt">.</span>printf <span class="hl str">&quot;%0.9f</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> <span class="hl opt">(</span>sqrt<span class="hl opt">(!</span>vBv <span class="hl opt">/. !</span>vv<span class="hl opt">))</span>

