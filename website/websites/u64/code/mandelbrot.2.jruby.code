<span class="hl slc"># The Computer Language Benchmarks Game</span>
<span class="hl slc"># http://benchmarksgame.alioth.debian.org</span>
<span class="hl slc">#</span>
<span class="hl slc">#  contributed by Karl von Laudermann</span>
<span class="hl slc">#  modified by Jeremy Echols</span>
<span class="hl slc">#  modified by Detlef Reichl</span>
<span class="hl slc">#  modified by Joseph LaFata</span>

PAD <span class="hl opt">=</span> <span class="hl str">&quot;\\\\__MARSHAL_RECORD_SEPARATOR__//&quot;</span> <span class="hl slc"># silly, but works</span>

<span class="hl kwa">class</span> Worker
  
  attr_reader <span class="hl kwc">:reader</span>
  
  <span class="hl kwa">def</span> <span class="hl kwd">initialize</span><span class="hl opt">(</span>enum<span class="hl opt">,</span> index<span class="hl opt">,</span> total<span class="hl opt">, &amp;</span>block)
    <span class="hl kwb">&#64;enum</span>             <span class="hl opt">=</span> enum
    <span class="hl kwb">&#64;index</span>            <span class="hl opt">=</span> index
    <span class="hl kwb">&#64;total</span>            <span class="hl opt">=</span> total
    <span class="hl kwb">&#64;reader</span><span class="hl opt">,</span> <span class="hl kwb">&#64;writer</span>  <span class="hl opt">=</span> IO<span class="hl opt">.</span>pipe
    
    <span class="hl kwa">if</span> <span class="hl kwc">RUBY_PLATFORM</span> <span class="hl opt">==</span> <span class="hl str">&quot;java&quot;</span>
      <span class="hl kwb">&#64;t</span> <span class="hl opt">=</span> Thread<span class="hl opt">.</span>new <span class="hl kwa">do</span>
        <span class="hl kwa">self</span><span class="hl opt">.</span><span class="hl kwd">execute</span><span class="hl opt">(&amp;</span>block)
      <span class="hl kwa">end</span>
    <span class="hl kwa">else</span>
      <span class="hl kwb">&#64;p</span> <span class="hl opt">=</span> Process<span class="hl opt">.</span>fork <span class="hl kwa">do</span>
        <span class="hl kwb">&#64;reader</span><span class="hl opt">.</span>close
        <span class="hl kwa">self</span><span class="hl opt">.</span><span class="hl kwd">execute</span><span class="hl opt">(&amp;</span>block)
        <span class="hl kwb">&#64;writer</span><span class="hl opt">.</span>close
      <span class="hl kwa">end</span>
      
      <span class="hl kwb">&#64;writer</span><span class="hl opt">.</span>close
    <span class="hl kwa">end</span>
  <span class="hl kwa">end</span>
  
  <span class="hl kwa">def</span> <span class="hl kwd">execute</span><span class="hl opt">(&amp;</span>block)
    <span class="hl opt">(</span><span class="hl num">0</span> <span class="hl opt">...</span> <span class="hl kwb">&#64;enum</span><span class="hl opt">.</span>size)<span class="hl opt">.</span><span class="hl kwd">step</span><span class="hl opt">(</span><span class="hl kwb">&#64;total</span>) <span class="hl kwa">do</span> <span class="hl opt">|</span>bi<span class="hl opt">|</span>
      idx <span class="hl opt">=</span> bi <span class="hl opt">+</span> <span class="hl kwb">&#64;index</span>
      <span class="hl kwa">if</span> item <span class="hl opt">=</span> <span class="hl kwb">&#64;enum</span><span class="hl opt">[</span>idx<span class="hl opt">]</span>
        res <span class="hl opt">=</span> <span class="hl kwa">yield</span><span class="hl opt">(</span>item)
        <span class="hl kwb">&#64;writer</span><span class="hl opt">.</span><span class="hl kwd">write</span><span class="hl opt">(</span>Marshal<span class="hl opt">.</span><span class="hl kwd">dump</span><span class="hl opt">([</span>idx<span class="hl opt">,</span> res<span class="hl opt">]</span>) <span class="hl opt">+</span> PAD)
      <span class="hl kwa">end</span>
    <span class="hl kwa">end</span>
    
    <span class="hl kwb">&#64;writer</span><span class="hl opt">.</span><span class="hl kwd">write</span><span class="hl opt">(</span>Marshal<span class="hl opt">.</span><span class="hl kwd">dump</span><span class="hl opt">(</span><span class="hl kwc">:end</span>) <span class="hl opt">+</span> PAD)
  <span class="hl kwa">end</span>
<span class="hl kwa">end</span>

<span class="hl kwa">def</span> <span class="hl kwd">parallel_map</span><span class="hl opt">(</span>enum<span class="hl opt">,</span> worker_count <span class="hl opt">=</span> <span class="hl num">8</span><span class="hl opt">, &amp;</span>block)
  count <span class="hl opt">= [</span>enum<span class="hl opt">.</span>size<span class="hl opt">,</span> worker_count<span class="hl opt">].</span>min
  
  Array<span class="hl opt">.</span><span class="hl kwd">new</span><span class="hl opt">(</span>enum<span class="hl opt">.</span>size)<span class="hl opt">.</span>tap <span class="hl kwa">do</span> <span class="hl opt">|</span>res<span class="hl opt">|</span>  
    workers <span class="hl opt">= (</span><span class="hl num">0</span> <span class="hl opt">...</span> count)<span class="hl opt">.</span>map <span class="hl kwa">do</span> <span class="hl opt">|</span>idx<span class="hl opt">|</span>
      Worker<span class="hl opt">.</span><span class="hl kwd">new</span><span class="hl opt">(</span>enum<span class="hl opt">,</span> idx<span class="hl opt">,</span> count<span class="hl opt">, &amp;</span>block)
    <span class="hl kwa">end</span>
  
    ios <span class="hl opt">=</span> workers<span class="hl opt">.</span>map <span class="hl esc">{ |w| w.reader }</span>

    <span class="hl kwa">while</span> ios<span class="hl opt">.</span>size <span class="hl opt">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">do</span>
      sr<span class="hl opt">,</span> sw<span class="hl opt">,</span> se <span class="hl opt">=</span> IO<span class="hl opt">.</span><span class="hl kwd">select</span><span class="hl opt">(</span>ios<span class="hl opt">,</span> <span class="hl kwa">nil</span><span class="hl opt">,</span> <span class="hl kwa">nil</span><span class="hl opt">,</span> <span class="hl num">0.01</span>)

      <span class="hl kwa">if</span> sr
        sr<span class="hl opt">.</span>each <span class="hl kwa">do</span> <span class="hl opt">|</span>io<span class="hl opt">|</span>
          buf <span class="hl opt">=</span> <span class="hl str">&quot;&quot;</span>
          
          <span class="hl kwa">while</span> sbuf <span class="hl opt">=</span> io<span class="hl opt">.</span><span class="hl kwd">readpartial</span><span class="hl opt">(</span><span class="hl num">4096</span>)
            buf <span class="hl opt">+=</span> sbuf
            <span class="hl kwa">break if</span> sbuf<span class="hl opt">.</span>size <span class="hl opt">&lt;</span> <span class="hl num">4096</span>
          <span class="hl kwa">end</span>
          
          msgs <span class="hl opt">=</span> buf<span class="hl opt">.</span><span class="hl kwd">split</span><span class="hl opt">(</span>PAD)
          
          msgs<span class="hl opt">.</span>each <span class="hl kwa">do</span> <span class="hl opt">|</span>msg<span class="hl opt">|</span>
            m <span class="hl opt">=</span> Marshal<span class="hl opt">.</span><span class="hl kwd">load</span><span class="hl opt">(</span>msg)
            <span class="hl kwa">if</span> m <span class="hl opt">==</span> <span class="hl kwc">:end</span>
              ios<span class="hl opt">.</span><span class="hl kwd">delete</span><span class="hl opt">(</span>io)
            <span class="hl kwa">else</span>
              idx<span class="hl opt">,</span> content <span class="hl opt">=</span> m
              res<span class="hl opt">[</span>idx<span class="hl opt">] =</span> content
            <span class="hl kwa">end</span>
          <span class="hl kwa">end</span>
        <span class="hl kwa">end</span>
      <span class="hl kwa">end</span>      
    <span class="hl kwa">end</span>
    
    Process<span class="hl opt">.</span>waitall
  <span class="hl kwa">end</span>
<span class="hl kwa">end</span>

<span class="hl kwb">$size</span> <span class="hl opt">= (</span><span class="hl kwc">ARGV</span><span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] ||</span> <span class="hl num">100</span>)<span class="hl opt">.</span>to_i
csize <span class="hl opt">=</span> <span class="hl kwb">$size</span> <span class="hl opt">-</span> <span class="hl num">1</span>

puts <span class="hl str">&quot;P4&quot;</span>
puts <span class="hl str">&quot;</span><span class="hl esc">#{$size}</span> <span class="hl str"></span><span class="hl esc">#{$size}</span><span class="hl str">&quot;</span>

set <span class="hl opt">= (</span><span class="hl num">0</span> <span class="hl opt">...</span> <span class="hl kwb">$size</span>)<span class="hl opt">.</span>to_a

results <span class="hl opt">=</span> <span class="hl kwd">parallel_map</span><span class="hl opt">(</span>set<span class="hl opt">,</span> <span class="hl num">8</span>) <span class="hl kwa">do</span> <span class="hl opt">|</span>y<span class="hl opt">|</span>
  res <span class="hl opt">=</span> <span class="hl str">&quot;&quot;</span>
  
  byte_acc <span class="hl opt">=</span> <span class="hl num">0</span>
  bit_num  <span class="hl opt">=</span> <span class="hl num">0</span>
  
  ci <span class="hl opt">= (</span><span class="hl num">2.0</span> <span class="hl opt">*</span> y <span class="hl opt">/</span> <span class="hl kwb">$size</span>) <span class="hl opt">-</span> <span class="hl num">1.0</span>

  <span class="hl kwb">$size</span><span class="hl opt">.</span>times <span class="hl kwa">do</span> <span class="hl opt">|</span>x<span class="hl opt">|</span>
    zrzr <span class="hl opt">=</span> zr <span class="hl opt">=</span> <span class="hl num">0.0</span>
    zizi <span class="hl opt">=</span> zi <span class="hl opt">=</span> <span class="hl num">0.0</span>
    cr <span class="hl opt">= (</span><span class="hl num">2.0</span> <span class="hl opt">*</span> x <span class="hl opt">/</span> <span class="hl kwb">$size</span>) <span class="hl opt">-</span> <span class="hl num">1.5</span>
    escape <span class="hl opt">=</span> <span class="hl num">0b1</span>
  
    <span class="hl num">50</span><span class="hl opt">.</span>times <span class="hl kwa">do</span>
      tr <span class="hl opt">=</span> zrzr <span class="hl opt">-</span> zizi <span class="hl opt">+</span> cr
      ti <span class="hl opt">=</span> <span class="hl num">2.0</span> <span class="hl opt">*</span> zr <span class="hl opt">*</span> zi <span class="hl opt">+</span> ci
      zr <span class="hl opt">=</span> tr
      zi <span class="hl opt">=</span> ti
      <span class="hl slc"># preserve recalculation</span>
      zrzr <span class="hl opt">=</span> zr <span class="hl opt">*</span> zr
      zizi <span class="hl opt">=</span> zi <span class="hl opt">*</span> zi
      <span class="hl kwa">if</span> zrzr <span class="hl opt">+</span> zizi <span class="hl opt">&gt;</span> <span class="hl num">4.0</span>
        escape <span class="hl opt">=</span> <span class="hl num">0b0</span>
        <span class="hl kwa">break</span>
      <span class="hl kwa">end</span>
    <span class="hl kwa">end</span>
  
    byte_acc <span class="hl opt">= (</span>byte_acc <span class="hl opt">&lt;&lt;</span> <span class="hl num">1</span>) <span class="hl opt">|</span> escape
    bit_num  <span class="hl opt">+=</span> <span class="hl num">1</span>
    
    <span class="hl kwa">if</span> <span class="hl opt">(</span>bit_num <span class="hl opt">==</span> <span class="hl num">8</span>)
      res <span class="hl opt">+=</span> byte_acc<span class="hl opt">.</span>chr
      byte_acc <span class="hl opt">=</span> <span class="hl num">0</span>
      bit_num <span class="hl opt">=</span> <span class="hl num">0</span>
    <span class="hl kwa">elsif</span> <span class="hl opt">(</span>x <span class="hl opt">==</span> csize)
      byte_acc <span class="hl opt">&lt;&lt;= (</span><span class="hl num">8</span> <span class="hl opt">-</span> bit_num)
      res <span class="hl opt">+=</span> byte_acc<span class="hl opt">.</span>chr
      byte_acc <span class="hl opt">=</span> <span class="hl num">0</span>
      bit_num <span class="hl opt">=</span> <span class="hl num">0</span>
    <span class="hl kwa">end</span>
  <span class="hl kwa">end</span>

  res
<span class="hl kwa">end</span>

print results<span class="hl opt">.</span>join
