<span class="hl slc"># The Computer Language Benchmarks Game</span>
<span class="hl slc"># http://shootout.alioth.debian.org/</span>
<span class="hl slc">#</span>
<span class="hl slc"># contributed by Alex Gaynor</span>

<span class="hl kwa">import</span> array
<span class="hl kwa">import</span> ctypes
<span class="hl kwa">import</span> string
<span class="hl kwa">import</span> sys


TRANS_TABLE <span class="hl sym">=</span> string<span class="hl sym">.</span><span class="hl kwd">maketrans</span><span class="hl sym">(</span>
    <span class="hl str">&quot;ACBDGHKMNSRUTWVYacbdghkmnsrutwvy&quot;</span><span class="hl sym">,</span>
    <span class="hl str">&quot;TGVHCDMKNSYAAWBRTGVHCDMKNSYAAWBR&quot;</span><span class="hl sym">,</span>
<span class="hl sym">)</span>

libc <span class="hl sym">=</span> ctypes<span class="hl sym">.</span><span class="hl kwd">CDLL</span><span class="hl sym">(</span><span class="hl str">&quot;libc.so.6&quot;</span><span class="hl sym">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">show</span><span class="hl sym">(</span>seq<span class="hl sym">,</span> out<span class="hl sym">,</span> out_idx<span class="hl sym">,</span> end<span class="hl sym">,</span> start<span class="hl sym">):</span>
    line_idx <span class="hl sym">=</span> <span class="hl num">0</span>
    <span class="hl kwa">while</span> end <span class="hl sym">&gt;=</span> start<span class="hl sym">:</span>
        ch <span class="hl sym">=</span> seq<span class="hl sym">[</span>end<span class="hl sym">]</span>
        <span class="hl kwa">if</span> ch <span class="hl sym">!=</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">:</span>
            out<span class="hl sym">[</span>out_idx<span class="hl sym">] =</span> TRANS_TABLE<span class="hl sym">[</span><span class="hl kwb">ord</span><span class="hl sym">(</span>ch<span class="hl sym">)]</span>
            out_idx <span class="hl sym">+=</span> <span class="hl num">1</span>
            line_idx <span class="hl sym">+=</span> <span class="hl num">1</span>
            <span class="hl kwa">if</span> line_idx <span class="hl sym">==</span> <span class="hl num">60</span><span class="hl sym">:</span>
                out<span class="hl sym">[</span>out_idx<span class="hl sym">] =</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span>
                out_idx <span class="hl sym">+=</span> <span class="hl num">1</span>
                line_idx <span class="hl sym">=</span> <span class="hl num">0</span>
        end <span class="hl sym">-=</span> <span class="hl num">1</span>
        <span class="hl kwa">del</span> ch
    <span class="hl kwa">if</span> line_idx <span class="hl sym">!=</span> <span class="hl num">0</span><span class="hl sym">:</span>
        out<span class="hl sym">[</span>out_idx<span class="hl sym">] =</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span>
        out_idx <span class="hl sym">+=</span> <span class="hl num">1</span>
    <span class="hl kwa">return</span> out_idx

<span class="hl kwa">def</span> <span class="hl kwd">main</span><span class="hl sym">():</span>
    data <span class="hl sym">=</span> sys<span class="hl sym">.</span>stdin<span class="hl sym">.</span><span class="hl kwd">read</span><span class="hl sym">()</span>

    out <span class="hl sym">=</span> array<span class="hl sym">.</span><span class="hl kwd">array</span><span class="hl sym">(</span><span class="hl str">&quot;c&quot;</span><span class="hl sym">, [</span><span class="hl str">&quot;</span><span class="hl esc">\x00</span><span class="hl str">&quot;</span><span class="hl sym">]) *</span> <span class="hl kwb">len</span><span class="hl sym">(</span>data<span class="hl sym">)</span>
    idx <span class="hl sym">=</span> <span class="hl num">0</span>
    out_idx <span class="hl sym">=</span> <span class="hl num">0</span>
    start_idx <span class="hl sym">=</span> <span class="hl num">0</span>

    <span class="hl kwa">while</span> idx <span class="hl sym">&lt;</span> <span class="hl kwb">len</span><span class="hl sym">(</span>data<span class="hl sym">):</span>
        ch <span class="hl sym">=</span> data<span class="hl sym">[</span>idx<span class="hl sym">]</span>
        <span class="hl kwa">if</span> ch <span class="hl sym">==</span> <span class="hl str">&quot;&gt;&quot;</span> <span class="hl kwa">or</span> ch <span class="hl sym">==</span> <span class="hl str">&quot;;&quot;</span><span class="hl sym">:</span>
            <span class="hl kwa">if</span> idx <span class="hl sym">!=</span> <span class="hl num">0</span><span class="hl sym">:</span>
                out_idx <span class="hl sym">=</span> <span class="hl kwd">show</span><span class="hl sym">(</span>data<span class="hl sym">,</span> out<span class="hl sym">,</span> out_idx<span class="hl sym">,</span> idx <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">,</span> start_idx<span class="hl sym">)</span>
            <span class="hl kwa">while True</span><span class="hl sym">:</span>
                out<span class="hl sym">[</span>out_idx<span class="hl sym">] =</span> ch
                out_idx <span class="hl sym">+=</span> <span class="hl num">1</span>
                idx <span class="hl sym">+=</span> <span class="hl num">1</span>
                <span class="hl kwa">if</span> ch <span class="hl sym">==</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">:</span>
                    <span class="hl kwa">break</span>
                ch <span class="hl sym">=</span> data<span class="hl sym">[</span>idx<span class="hl sym">]</span>
            start_idx <span class="hl sym">=</span> idx
        <span class="hl kwa">else</span><span class="hl sym">:</span>
            idx <span class="hl sym">+=</span> <span class="hl num">1</span>
        <span class="hl kwa">del</span> ch
    out_idx <span class="hl sym">=</span> <span class="hl kwd">show</span><span class="hl sym">(</span>data<span class="hl sym">,</span> out<span class="hl sym">,</span> out_idx<span class="hl sym">,</span> idx <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">,</span> start_idx<span class="hl sym">)</span>

    n <span class="hl sym">=</span> <span class="hl num">0</span>
    <span class="hl kwa">while</span> n <span class="hl sym">&lt;</span> out_idx<span class="hl sym">:</span>
        n <span class="hl sym">+=</span> libc<span class="hl sym">.</span><span class="hl kwd">write</span><span class="hl sym">(</span>sys<span class="hl sym">.</span>stdout<span class="hl sym">.</span><span class="hl kwd">fileno</span><span class="hl sym">(),</span> out<span class="hl sym">.</span><span class="hl kwd">buffer_info</span><span class="hl sym">()[</span><span class="hl num">0</span><span class="hl sym">] +</span> n<span class="hl sym">,</span> out_idx <span class="hl sym">-</span> n<span class="hl sym">)</span>


<span class="hl kwa">if</span> __name__ <span class="hl sym">==</span> <span class="hl str">&quot;__main__&quot;</span><span class="hl sym">:</span>
    <span class="hl kwd">main</span><span class="hl sym">()</span>
