<span class="hl com">&quot;* The Computer Language Benchmarks Game</span>
<span class="hl com">    http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com">    adapted from a program by Paolo Bonzini</span>
<span class="hl com">    contributed by Isaac Gouy </span>
<span class="hl com">    modified by Carlo Teixeira *&quot;</span><span class="hl opt">!</span>


<span class="hl opt">!</span><span class="hl kwc">Tests</span> <span class="hl kwb">class methodsFor:</span> <span class="hl str">'benchmarking'</span><span class="hl opt">!</span>

<span class="hl kwb">threadring2</span>
   <span class="hl kwd">| done |</span>
   <span class="hl opt">(</span><span class="hl kwa">self</span> <span class="hl kwb">threadRing:</span> <span class="hl opt">(</span>done <span class="hl opt">:</span><span class="hl kwb">=</span> <span class="hl kwc">Semaphore</span> <span class="hl kwb">new</span><span class="hl opt">))</span> <span class="hl kwb">takeToken:</span> <span class="hl kwa">self</span> <span class="hl kwb">arg</span><span class="hl opt">.</span>
   done <span class="hl kwb">wait</span><span class="hl opt">.</span>
   <span class="hl opt">^</span><span class="hl str">''</span><span class="hl opt">!</span>

<span class="hl kwb">threadRing:</span> aSemaphore
   <span class="hl kwd">| first last |</span>
   <span class="hl num">503</span> <span class="hl kwb">to:</span> <span class="hl num">1</span> <span class="hl kwb">by: -</span><span class="hl num">1</span> <span class="hl kwb">do:</span> <span class="hl opt">[</span><span class="hl kwd">:i</span>|
      first <span class="hl opt">:</span><span class="hl kwb">=</span> <span class="hl kwc">Thread</span> <span class="hl kwb">named:</span> i <span class="hl kwb">next:</span> first <span class="hl kwb">done:</span> aSemaphore<span class="hl opt">.</span>
      last <span class="hl kwb">isNil ifTrue:</span> <span class="hl opt">[</span> last<span class="hl opt">:</span><span class="hl kwb">=</span>first<span class="hl opt">. ].</span>
   <span class="hl opt">].</span>
   last <span class="hl kwb">nextThread:</span> first<span class="hl opt">.</span>
   <span class="hl opt">^</span>first<span class="hl opt">! !</span>


<span class="hl kwc">Object</span> <span class="hl kwb">subclass:</span> <span class="hl kwd">#Thread</span>
   <span class="hl kwb">instanceVariableNames:</span> <span class="hl str">'name nextThread token semaphore done '</span>
   <span class="hl kwb">classVariableNames:</span> <span class="hl str">''</span>
   <span class="hl kwb">poolDictionaries:</span> <span class="hl str">''</span>
   <span class="hl kwb">category:</span> <span class="hl str">'BenchmarksGame'</span><span class="hl opt">!</span>

<span class="hl kwc">Thread</span> <span class="hl kwb">class</span>
   <span class="hl kwb">instanceVariableNames:</span> <span class="hl str">''</span><span class="hl opt">!</span>


<span class="hl opt">!</span><span class="hl kwc">Thread</span> <span class="hl kwb">class methodsFor:</span> <span class="hl str">'instance creation'</span><span class="hl opt">!</span>

<span class="hl kwb">named:</span> anInteger <span class="hl kwb">next:</span> aThread <span class="hl kwb">done:</span> aSemaphore
   <span class="hl opt">^</span><span class="hl kwa">self</span> <span class="hl kwb">new name:</span> anInteger<span class="hl opt">;</span> <span class="hl kwb">nextThread:</span> aThread<span class="hl opt">;</span> <span class="hl kwb">done:</span> aSemaphore<span class="hl opt">;</span> <span class="hl kwb">fork</span> <span class="hl opt">!</span>

<span class="hl kwb">new</span>
   <span class="hl opt">^</span><span class="hl kwa">self</span> <span class="hl kwb">basicNew semaphore:</span> <span class="hl kwc">Semaphore</span> <span class="hl kwb">new</span> <span class="hl opt">! !</span>


<span class="hl opt">!</span><span class="hl kwc">Thread</span> <span class="hl kwb">methodsFor:</span> <span class="hl str">'accessing'</span><span class="hl opt">!</span>

<span class="hl kwb">done:</span> aSemaphore
   done <span class="hl opt">:</span><span class="hl kwb">=</span> aSemaphore <span class="hl opt">!</span>

<span class="hl kwb">fork</span>
   <span class="hl opt">[</span> <span class="hl kwa">self</span> <span class="hl kwb">run</span> <span class="hl opt">]</span> <span class="hl kwb">forkAt:</span> <span class="hl kwc">Processor</span> <span class="hl kwb">userBackgroundPriority</span><span class="hl opt">.!</span>

<span class="hl kwb">name:</span> anInteger
   name <span class="hl opt">:</span><span class="hl kwb">=</span> anInteger <span class="hl opt">!</span>

<span class="hl kwb">nextThread:</span> aThread
   nextThread <span class="hl opt">:</span><span class="hl kwb">=</span> aThread <span class="hl opt">!</span>

<span class="hl kwb">run</span>
   <span class="hl opt">[</span>semaphore <span class="hl kwb">wait</span><span class="hl opt">.</span>
   <span class="hl num">0</span><span class="hl kwb">==</span>token<span class="hl opt">]</span> <span class="hl kwb">whileFalse:</span> <span class="hl opt">[</span>nextThread <span class="hl kwb">takeToken:</span> token <span class="hl kwb">-</span> <span class="hl num">1</span><span class="hl opt">].</span>
   name <span class="hl kwb">printOn:</span> <span class="hl kwc">Tests</span> <span class="hl kwb">stdout</span><span class="hl opt">.</span>
   <span class="hl kwc">Tests</span> <span class="hl kwb">stdout cr</span><span class="hl opt">.</span>
   done <span class="hl kwb">signal</span><span class="hl opt">!</span>

<span class="hl kwb">semaphore:</span> aSemaphore
   semaphore <span class="hl opt">:</span><span class="hl kwb">=</span> aSemaphore <span class="hl opt">!</span>

<span class="hl kwb">takeToken:</span> x
   token <span class="hl opt">:</span><span class="hl kwb">=</span> x<span class="hl opt">.</span>
   semaphore <span class="hl kwb">signal</span> <span class="hl opt">! !</span>
