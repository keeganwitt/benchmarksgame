<span class="hl slc">! The Computer Language Benchmarks Game</span>
<span class="hl slc">! http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">!</span>
<span class="hl slc">! Original C contributed by Sebastien Loisel</span>
<span class="hl slc">! Conversion to C++ by Jon Harrop</span>
<span class="hl slc">! OpenMP parallelize by The Anh Tran</span>
<span class="hl slc">! Add SSE by The Anh Tran</span>
<span class="hl slc">! Reconversion into C by Dan Farina</span>
<span class="hl slc">! Conversion to Fortran by Brian Taylor</span>

<span class="hl kwa">program</span> main
<span class="hl slc">!$ use omp_lib</span>
<span class="hl kwa">implicit none</span>

<span class="hl kwa">character</span><span class="hl opt">(</span>len<span class="hl opt">=</span><span class="hl num">6</span><span class="hl opt">) ::</span> argv
<span class="hl kwa">integer</span> <span class="hl opt">::</span> n
<span class="hl kwa">real</span><span class="hl opt">*</span><span class="hl num">8</span><span class="hl opt">,</span> allocatable <span class="hl opt">::</span> <span class="hl kwd">u</span><span class="hl opt">(:),</span> <span class="hl kwd">v</span><span class="hl opt">(:),</span> <span class="hl kwd">tmp</span><span class="hl opt">(:)</span>
<span class="hl kwa">integer</span> <span class="hl opt">::</span> n2<span class="hl opt">,</span> r_begin<span class="hl opt">,</span> r_end
<span class="hl kwa">real</span><span class="hl opt">*</span><span class="hl num">8</span> uv<span class="hl opt">,</span> vv
<span class="hl kwa">integer</span> <span class="hl opt">::</span> i<span class="hl opt">,</span> tid<span class="hl opt">,</span> tcount<span class="hl opt">,</span> chunk<span class="hl opt">,</span> ite

<span class="hl kwa">call</span> <span class="hl kwd">get_command_argument</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">,</span> argv<span class="hl opt">)</span>
<span class="hl kwa">read</span> <span class="hl opt">(</span>argv<span class="hl opt">, *)</span> n

n2 <span class="hl opt">=</span> n <span class="hl opt">/</span> <span class="hl num">2</span>

<span class="hl kwd">allocate</span><span class="hl opt">(</span><span class="hl kwd">u</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">:</span>n<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">),</span> <span class="hl kwd">v</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">:</span>n<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">),</span> <span class="hl kwd">tmp</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">:</span>n<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">))</span>

uv <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">.</span>d0
vv <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">.</span>d0

<span class="hl slc">!$omp parallel default(shared) private(i,tid,tcount,chunk,r_begin,r_end)</span>

<span class="hl slc">!$omp do schedule(static)</span>
<span class="hl kwa">do</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">,</span> n <span class="hl opt">-</span> <span class="hl num">1</span>
  <span class="hl kwd">u</span><span class="hl opt">(</span>i<span class="hl opt">) =</span> <span class="hl num">1</span><span class="hl opt">.</span>d0
<span class="hl kwa">end do</span>

tid <span class="hl opt">=</span> <span class="hl kwd">omp_get_thread_num</span><span class="hl opt">()</span>
tcount <span class="hl opt">=</span> <span class="hl kwd">omp_get_num_threads</span><span class="hl opt">()</span>
chunk <span class="hl opt">=</span> n <span class="hl opt">/</span> tcount

r_begin <span class="hl opt">=</span> tid <span class="hl opt">*</span> chunk
<span class="hl kwa">if</span> <span class="hl opt">(</span>tid <span class="hl opt">&lt;</span> tcount <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">)</span> <span class="hl kwa">then</span>
  r_end <span class="hl opt">=</span> r_begin <span class="hl opt">+</span> chunk <span class="hl opt">-</span> <span class="hl num">1</span>
<span class="hl kwa">else</span>
  r_end <span class="hl opt">=</span> n <span class="hl opt">-</span> <span class="hl num">1</span>
<span class="hl kwa">end if</span>

<span class="hl kwa">do</span> i <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">10</span>
  <span class="hl kwa">call</span> <span class="hl kwd">eval_AtA_times_u</span><span class="hl opt">(</span>r_begin<span class="hl opt">,</span> r_end<span class="hl opt">,</span> u<span class="hl opt">,</span> v<span class="hl opt">)</span>
  <span class="hl kwa">call</span> <span class="hl kwd">eval_AtA_times_u</span><span class="hl opt">(</span>r_begin<span class="hl opt">,</span> r_end<span class="hl opt">,</span> v<span class="hl opt">,</span> u<span class="hl opt">)</span>
<span class="hl kwa">end do</span>

<span class="hl slc">!$omp do schedule(static) reduction(+:uv) reduction(+:vv)</span>
<span class="hl kwa">do</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">,</span> n <span class="hl opt">-</span> <span class="hl num">1</span>
  uv <span class="hl opt">=</span> uv <span class="hl opt">+</span> <span class="hl kwd">u</span><span class="hl opt">(</span>i<span class="hl opt">) *</span> <span class="hl kwd">v</span><span class="hl opt">(</span>i<span class="hl opt">)</span>
  vv <span class="hl opt">=</span> vv <span class="hl opt">+</span> <span class="hl kwd">v</span><span class="hl opt">(</span>i<span class="hl opt">) *</span> <span class="hl kwd">v</span><span class="hl opt">(</span>i<span class="hl opt">)</span>
<span class="hl kwa">end do</span>
<span class="hl slc">!$omp end do nowait</span>

<span class="hl slc">!$omp end parallel</span>

<span class="hl kwa">write</span> <span class="hl opt">(*,</span> <span class="hl str">&quot;(f0.9)&quot;</span><span class="hl opt">)</span> <span class="hl kwd">sqrt</span><span class="hl opt">(</span>uv <span class="hl opt">/</span> vv<span class="hl opt">)</span>

<span class="hl kwa">contains</span>


<span class="hl slc">! Return element (i,j) of matrix A</span>
pure <span class="hl kwa">function</span> <span class="hl kwd">eval_A</span><span class="hl opt">(</span>i<span class="hl opt">,</span> j<span class="hl opt">)</span>
<span class="hl kwa">real</span><span class="hl opt">*</span><span class="hl num">8</span> <span class="hl opt">::</span> eval_A
<span class="hl kwa">integer</span><span class="hl opt">,</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>in<span class="hl opt">) ::</span> i<span class="hl opt">,</span> j
<span class="hl kwa">real</span><span class="hl opt">*</span><span class="hl num">8</span> <span class="hl opt">::</span> di<span class="hl opt">,</span> dj
<span class="hl kwa">integer</span> <span class="hl opt">::</span> d
di <span class="hl opt">=</span> <span class="hl kwa">real</span><span class="hl opt">(</span>i<span class="hl opt">,</span><span class="hl num">8</span><span class="hl opt">)</span>
dj <span class="hl opt">=</span> <span class="hl kwa">real</span><span class="hl opt">(</span>j<span class="hl opt">,</span><span class="hl num">8</span><span class="hl opt">)</span>
eval_A <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">.</span>d0 <span class="hl opt">/ (</span><span class="hl num">0.5d0</span> <span class="hl opt">* ((</span>di <span class="hl opt">+</span> dj<span class="hl opt">) * (</span>di <span class="hl opt">+</span> dj <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">.</span>d0<span class="hl opt">)) +</span> di <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">.</span>d0<span class="hl opt">)</span>
<span class="hl kwa">end function</span>


<span class="hl kwa">subroutine</span> <span class="hl kwd">eval_A_times_u</span><span class="hl opt">(</span>r_begin<span class="hl opt">,</span> r_end<span class="hl opt">,</span> src<span class="hl opt">,</span> dest<span class="hl opt">)</span>
<span class="hl kwa">integer</span><span class="hl opt">,</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>in<span class="hl opt">) ::</span> r_begin<span class="hl opt">,</span> r_end
<span class="hl kwa">real</span><span class="hl opt">*</span><span class="hl num">8</span><span class="hl opt">,</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>in<span class="hl opt">) ::</span> <span class="hl kwd">src</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">:)</span>
<span class="hl kwa">real</span><span class="hl opt">*</span><span class="hl num">8</span><span class="hl opt">,</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>out<span class="hl opt">) ::</span> <span class="hl kwd">dest</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">:)</span>
<span class="hl kwa">real</span><span class="hl opt">*</span><span class="hl num">8</span> sum1
<span class="hl kwa">integer</span> <span class="hl opt">::</span> i<span class="hl opt">,</span> j
<span class="hl kwa">do</span> i <span class="hl opt">=</span> r_begin<span class="hl opt">,</span> r_end
  sum1 <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">.</span>d0
  <span class="hl kwa">do</span> j <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">,</span> n <span class="hl opt">-</span> <span class="hl num">1</span>
    sum1 <span class="hl opt">=</span> sum1 <span class="hl opt">+</span> <span class="hl kwd">src</span><span class="hl opt">(</span>j<span class="hl opt">) *</span> <span class="hl kwd">eval_A</span><span class="hl opt">(</span>i<span class="hl opt">,</span> j<span class="hl opt">)</span>
  <span class="hl kwa">end do</span>
  <span class="hl kwd">dest</span><span class="hl opt">(</span>i<span class="hl opt">) =</span> sum1
<span class="hl kwa">end do</span>
<span class="hl kwa">end subroutine</span>


<span class="hl kwa">subroutine</span> <span class="hl kwd">eval_At_times_u</span><span class="hl opt">(</span>r_begin<span class="hl opt">,</span> r_end<span class="hl opt">,</span> src<span class="hl opt">,</span> dest<span class="hl opt">)</span>
<span class="hl kwa">integer</span><span class="hl opt">,</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>in<span class="hl opt">) ::</span> r_begin<span class="hl opt">,</span> r_end
<span class="hl kwa">real</span><span class="hl opt">*</span><span class="hl num">8</span><span class="hl opt">,</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>in<span class="hl opt">) ::</span> <span class="hl kwd">src</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">:)</span>
<span class="hl kwa">real</span><span class="hl opt">*</span><span class="hl num">8</span><span class="hl opt">,</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>out<span class="hl opt">) ::</span> <span class="hl kwd">dest</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">:)</span>
<span class="hl kwa">real</span><span class="hl opt">*</span><span class="hl num">8</span> sum1
<span class="hl kwa">integer</span> <span class="hl opt">::</span> i<span class="hl opt">,</span> j
<span class="hl kwa">do</span> i <span class="hl opt">=</span> r_begin<span class="hl opt">,</span> r_end
  sum1 <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">.</span>d0
  <span class="hl kwa">do</span> j <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">,</span> n <span class="hl opt">-</span> <span class="hl num">1</span>
    sum1 <span class="hl opt">=</span> sum1 <span class="hl opt">+</span> <span class="hl kwd">src</span><span class="hl opt">(</span>j<span class="hl opt">) *</span> <span class="hl kwd">eval_A</span><span class="hl opt">(</span>j<span class="hl opt">,</span> i<span class="hl opt">)</span>
  <span class="hl kwa">end do</span>
  <span class="hl kwd">dest</span><span class="hl opt">(</span>i<span class="hl opt">) =</span> sum1
<span class="hl kwa">end do</span>
<span class="hl kwa">end subroutine</span>


<span class="hl kwa">subroutine</span> <span class="hl kwd">eval_AtA_times_u</span><span class="hl opt">(</span>r_begin<span class="hl opt">,</span> r_end<span class="hl opt">,</span> src<span class="hl opt">,</span> dest<span class="hl opt">)</span>
<span class="hl kwa">integer</span><span class="hl opt">,</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>in<span class="hl opt">) ::</span> r_begin<span class="hl opt">,</span> r_end
<span class="hl kwa">real</span><span class="hl opt">*</span><span class="hl num">8</span><span class="hl opt">,</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>in<span class="hl opt">) ::</span> <span class="hl kwd">src</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">:)</span>
<span class="hl kwa">real</span><span class="hl opt">*</span><span class="hl num">8</span><span class="hl opt">,</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>out<span class="hl opt">) ::</span> <span class="hl kwd">dest</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">:)</span>
<span class="hl kwa">call</span> <span class="hl kwd">eval_A_times_u</span><span class="hl opt">(</span>r_begin<span class="hl opt">,</span> r_end<span class="hl opt">,</span> src<span class="hl opt">,</span> tmp<span class="hl opt">)</span>
<span class="hl slc">!$omp barrier</span>
<span class="hl kwa">call</span> <span class="hl kwd">eval_At_times_u</span><span class="hl opt">(</span>r_begin<span class="hl opt">,</span> r_end<span class="hl opt">,</span> tmp<span class="hl opt">,</span> dest<span class="hl opt">)</span>
<span class="hl slc">!$omp barrier</span>
<span class="hl kwa">end subroutine</span>

<span class="hl kwa">end program</span>
