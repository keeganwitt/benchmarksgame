<span class="hl slc">// The Computer Language Benchmarks Game</span>
<span class="hl slc">// http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">//</span>
<span class="hl slc">// contributed by Elam Kolenovic</span>

<span class="hl ppc">#include &lt;cstdio&gt;</span>
<span class="hl ppc">#include &lt;cstdlib&gt;</span>
<span class="hl ppc">#include &lt;iostream&gt;</span>
<span class="hl ppc">#include &lt;iterator&gt;</span>
<span class="hl ppc">#include &lt;limits&gt;</span>
<span class="hl ppc">#include &lt;sstream&gt;</span>
<span class="hl ppc">#include &lt;string&gt;</span>
<span class="hl ppc">#include &lt;vector&gt;</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span><span class="hl opt">*</span> argv<span class="hl opt">[])</span>
<span class="hl opt">{</span>
    <span class="hl kwc">typedef</span> <span class="hl kwb">unsigned char</span> Byte<span class="hl opt">;</span>

    <span class="hl kwb">const size_t</span> N             <span class="hl opt">=</span> std<span class="hl opt">::</span><span class="hl kwd">max</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">, (</span>argc <span class="hl opt">&gt;</span> <span class="hl num">1</span><span class="hl opt">)</span> ? <span class="hl kwd">atoi</span><span class="hl opt">(</span>argv<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">]) :</span> <span class="hl num">0</span><span class="hl opt">);</span>
    <span class="hl kwb">const size_t</span> width         <span class="hl opt">=</span> N<span class="hl opt">;</span>
    <span class="hl kwb">const size_t</span> height        <span class="hl opt">=</span> N<span class="hl opt">;</span>
    <span class="hl kwb">const size_t</span> maxX          <span class="hl opt">= (</span>width <span class="hl opt">+</span> <span class="hl num">7</span><span class="hl opt">) /</span> <span class="hl num">8</span><span class="hl opt">;</span>
    <span class="hl kwb">const size_t</span> maxIterations <span class="hl opt">=</span> <span class="hl num">50</span><span class="hl opt">;</span>
    <span class="hl kwb">const double</span> limit         <span class="hl opt">=</span> <span class="hl num">2.0</span><span class="hl opt">;</span>
    <span class="hl kwb">const double</span> limitSq       <span class="hl opt">=</span> limit <span class="hl opt">*</span> limit<span class="hl opt">;</span>

    std<span class="hl opt">::</span>vector<span class="hl opt">&lt;</span>Byte<span class="hl opt">&gt;</span> <span class="hl kwd">data</span><span class="hl opt">(</span>height <span class="hl opt">*</span> maxX<span class="hl opt">);</span>

    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">size_t</span> y <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> y <span class="hl opt">&lt;</span> height<span class="hl opt">; ++</span>y<span class="hl opt">)</span>
    <span class="hl opt">{</span>
        <span class="hl kwb">const double</span> ci0  <span class="hl opt">=</span> <span class="hl num">2.0</span> <span class="hl opt">*</span> y <span class="hl opt">/</span> height <span class="hl opt">-</span> <span class="hl num">1.0</span><span class="hl opt">;</span>
        Byte<span class="hl opt">*</span>        line <span class="hl opt">= &amp;</span>data<span class="hl opt">[</span>y <span class="hl opt">*</span> maxX<span class="hl opt">];</span>

        <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">size_t</span> x <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> x <span class="hl opt">&lt;</span> maxX<span class="hl opt">; ++</span>x<span class="hl opt">)</span>
        <span class="hl opt">{</span>
            <span class="hl kwb">double</span> cr0<span class="hl opt">[</span><span class="hl num">8</span><span class="hl opt">];</span>
            <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">size_t</span> k <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> k <span class="hl opt">&lt;</span> <span class="hl num">8</span><span class="hl opt">; ++</span>k<span class="hl opt">)</span>
            <span class="hl opt">{</span>
                cr0<span class="hl opt">[</span>k<span class="hl opt">] =</span> <span class="hl num">2.0</span> <span class="hl opt">* (</span><span class="hl num">8</span> <span class="hl opt">*</span> x <span class="hl opt">+</span> k<span class="hl opt">) /</span> width <span class="hl opt">-</span> <span class="hl num">1.5</span><span class="hl opt">;</span>
            <span class="hl opt">}</span>

            <span class="hl kwb">double</span> cr<span class="hl opt">[</span><span class="hl num">8</span><span class="hl opt">];</span>
            std<span class="hl opt">::</span><span class="hl kwd">copy</span><span class="hl opt">(</span>cr0<span class="hl opt">,</span> cr0 <span class="hl opt">+</span> <span class="hl num">8</span><span class="hl opt">, &amp;</span>cr<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">]);</span>

            <span class="hl kwb">double</span> ci<span class="hl opt">[</span><span class="hl num">8</span><span class="hl opt">];</span>
            std<span class="hl opt">::</span><span class="hl kwd">fill</span><span class="hl opt">(</span>ci<span class="hl opt">,</span> ci <span class="hl opt">+</span> <span class="hl num">8</span><span class="hl opt">,</span> ci0<span class="hl opt">);</span>

            Byte bits <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
            <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">size_t</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> maxIterations <span class="hl opt">&amp;&amp;</span> bits <span class="hl opt">!=</span> <span class="hl num">0xFF</span><span class="hl opt">; ++</span>i<span class="hl opt">)</span>
            <span class="hl opt">{</span>
                <span class="hl kwb">double</span> cr2<span class="hl opt">[</span><span class="hl num">8</span><span class="hl opt">];</span>
                <span class="hl kwb">double</span> ci2<span class="hl opt">[</span><span class="hl num">8</span><span class="hl opt">];</span>
                <span class="hl kwb">double</span> crci<span class="hl opt">[</span><span class="hl num">8</span><span class="hl opt">];</span>

                <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">size_t</span> k <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> k <span class="hl opt">&lt;</span> <span class="hl num">8</span><span class="hl opt">; ++</span>k<span class="hl opt">)</span>
                <span class="hl opt">{</span>
                    <span class="hl kwb">const</span> Byte mask <span class="hl opt">= (</span><span class="hl num">1</span> <span class="hl opt">&lt;&lt; (</span><span class="hl num">7</span> <span class="hl opt">-</span> k<span class="hl opt">));</span>
                    <span class="hl kwa">if</span> <span class="hl opt">((</span>bits <span class="hl opt">&amp;</span> mask<span class="hl opt">) ==</span> <span class="hl num">0</span><span class="hl opt">)</span>
                    <span class="hl opt">{</span>
                        cr2<span class="hl opt">[</span>k<span class="hl opt">]  =</span> cr<span class="hl opt">[</span>k<span class="hl opt">] *</span> cr<span class="hl opt">[</span>k<span class="hl opt">];</span>
                        ci2<span class="hl opt">[</span>k<span class="hl opt">]  =</span> ci<span class="hl opt">[</span>k<span class="hl opt">] *</span> ci<span class="hl opt">[</span>k<span class="hl opt">];</span>
                        crci<span class="hl opt">[</span>k<span class="hl opt">] =</span> cr<span class="hl opt">[</span>k<span class="hl opt">] *</span> ci<span class="hl opt">[</span>k<span class="hl opt">];</span>

                        cr<span class="hl opt">[</span>k<span class="hl opt">] =</span> cr2<span class="hl opt">[</span>k<span class="hl opt">] -</span> ci2<span class="hl opt">[</span>k<span class="hl opt">] +</span> cr0<span class="hl opt">[</span>k<span class="hl opt">];</span>
                        ci<span class="hl opt">[</span>k<span class="hl opt">] =</span> <span class="hl num">2.0</span> <span class="hl opt">*</span> crci<span class="hl opt">[</span>k<span class="hl opt">] +</span> ci0<span class="hl opt">;</span>

                        <span class="hl kwa">if</span> <span class="hl opt">(</span>cr2<span class="hl opt">[</span>k<span class="hl opt">] +</span> ci2<span class="hl opt">[</span>k<span class="hl opt">] &gt;</span> limitSq<span class="hl opt">)</span>
                        <span class="hl opt">{</span>
                            bits <span class="hl opt">|=</span> mask<span class="hl opt">;</span>
                        <span class="hl opt">}</span>
                    <span class="hl opt">}</span>
                <span class="hl opt">}</span>
            <span class="hl opt">}</span>
            line<span class="hl opt">[</span>x<span class="hl opt">] = ~</span>bits<span class="hl opt">;</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span>

    std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;P4</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> <span class="hl opt">&lt;&lt;</span> width <span class="hl opt">&lt;&lt;</span> <span class="hl str">' '</span> <span class="hl opt">&lt;&lt;</span> height <span class="hl opt">&lt;&lt;</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl opt">;</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">size_t</span> y <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> y <span class="hl opt">&lt;</span> height<span class="hl opt">; ++</span>y<span class="hl opt">)</span>
    <span class="hl opt">{</span>
        Byte<span class="hl opt">*</span> line <span class="hl opt">=</span> <span class="hl kwa">reinterpret_cast</span><span class="hl opt">&lt;</span>Byte<span class="hl opt">*&gt;(&amp;</span>data<span class="hl opt">[</span>y <span class="hl opt">*</span> maxX<span class="hl opt">]);</span>
        std<span class="hl opt">::</span><span class="hl kwd">copy</span><span class="hl opt">(</span>line<span class="hl opt">,</span> line <span class="hl opt">+</span> width <span class="hl opt">/</span> <span class="hl num">8</span><span class="hl opt">,</span> std<span class="hl opt">::</span>ostream_iterator<span class="hl opt">&lt;</span>Byte<span class="hl opt">&gt;(</span>std<span class="hl opt">::</span>cout<span class="hl opt">));</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
