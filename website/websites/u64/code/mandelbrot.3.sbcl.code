<span class="hl slc">;;   The Computer Language Benchmarks Game</span>
<span class="hl slc">;;   http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">;;;</span>
<span class="hl slc">;;; resubmitted by Wade Humeniuk (Fix Stream Problem)</span>
<span class="hl slc">;;; resubmitted by Jon Smith (Remove silly assertion causing it to break on 16000 size)</span>
<span class="hl slc">;;; re-resubmitted by Jon Smith (with a silly hack to make it parallel).</span>
<span class="hl slc">;;; Original contributed by Yannick Gingras</span>
<span class="hl slc">;;;</span>
<span class="hl slc">;;; To compile</span>
<span class="hl slc">;;; sbcl --load mandelbrot.lisp --eval &quot;(save-lisp-and-die \&quot;mandelbrot.core\&quot; :purify t :toplevel (lambda () (main) (quit)))&quot;</span>
<span class="hl slc">;;; To run</span>
<span class="hl slc">;;; sbcl --noinform --core mandelbrot.core %A</span>

<span class="hl opt">(</span><span class="hl kwa">defun</span> render <span class="hl opt">(</span><span class="hl kwa">size</span> stream<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> fixnum size<span class="hl opt">) (</span><span class="hl kwa">stream</span> stream<span class="hl opt">)</span>
	   <span class="hl opt">(</span><span class="hl kwa">optimize</span> <span class="hl opt">(</span><span class="hl kwa">speed</span> <span class="hl num">3</span><span class="hl opt">) (</span><span class="hl kwa">safety</span> <span class="hl num">0</span><span class="hl opt">) (</span><span class="hl kwa">debug</span> <span class="hl num">0</span><span class="hl opt">)))</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span><span class="hl opt">* ((</span><span class="hl kwa">code</span> <span class="hl num">0</span><span class="hl opt">)</span> 
	 <span class="hl opt">(</span><span class="hl kwa">bit</span> <span class="hl num">0</span><span class="hl opt">)</span>
         <span class="hl opt">(</span><span class="hl kwa">zr</span> <span class="hl num">0.0</span>d0<span class="hl opt">)</span>
	 <span class="hl opt">(</span><span class="hl kwa">zi</span> <span class="hl num">0.0</span>d0<span class="hl opt">)</span>
	 <span class="hl opt">(</span><span class="hl kwa">tr</span> <span class="hl num">0.0</span>d0<span class="hl opt">)</span>
	 <span class="hl opt">(</span><span class="hl kwa">delta</span> <span class="hl opt">(/</span> <span class="hl num">2</span>d0 size<span class="hl opt">))</span>
         <span class="hl opt">(</span><span class="hl kwa">base-real</span> -<span class="hl num">1.5</span>d0<span class="hl opt">)</span> 
	 <span class="hl opt">(</span><span class="hl kwa">base-imag</span> -<span class="hl num">1.0</span>d0<span class="hl opt">)</span>
         <span class="hl opt">(</span><span class="hl kwa">buffer</span> <span class="hl opt">(</span><span class="hl kwa">make-array</span> <span class="hl opt">(*</span> size <span class="hl opt">(</span><span class="hl kwa">ceiling</span> size <span class="hl num">8</span><span class="hl opt">)) :</span>element-type <span class="hl opt">'(</span><span class="hl kwa">unsigned-byte</span> <span class="hl num">8</span><span class="hl opt">)))</span>
         <span class="hl opt">(</span><span class="hl kwa">index</span> <span class="hl num">0</span><span class="hl opt">))</span>

    <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> <span class="hl opt">(</span><span class="hl kwa">unsigned-byte</span> <span class="hl num">8</span><span class="hl opt">)</span> code <span class="hl opt">)</span>
             <span class="hl opt">(</span><span class="hl kwa">type</span> double-float zr zi tr base-real base-imag delta<span class="hl opt">)</span>
             <span class="hl opt">(</span><span class="hl kwa">type</span> fixnum index bit<span class="hl opt">))</span>

    <span class="hl opt">(</span><span class="hl kwa">dotimes</span> <span class="hl opt">(</span><span class="hl kwa">y</span> size<span class="hl opt">)</span>
      <span class="hl opt">(</span><span class="hl kwa">setf</span> base-imag <span class="hl opt">(</span><span class="hl kwa">-</span> <span class="hl num">1.0</span>d0 <span class="hl opt">(*</span> delta y<span class="hl opt">)))</span>
      <span class="hl opt">(</span><span class="hl kwa">dotimes</span> <span class="hl opt">(</span><span class="hl kwa">x</span> size<span class="hl opt">)</span>
	<span class="hl opt">(</span><span class="hl kwa">setf</span> base-real <span class="hl opt">(+</span> -<span class="hl num">1.5</span>d0 <span class="hl opt">(*</span> delta x<span class="hl opt">))</span>
	      zr base-real
	      zi base-imag<span class="hl opt">)</span>
        <span class="hl opt">(</span><span class="hl kwa">setf</span> code  
	      <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">dotimes</span> <span class="hl opt">(</span><span class="hl kwa">n</span> <span class="hl num">50</span><span class="hl opt">)</span>
		    <span class="hl opt">(</span><span class="hl kwa">when</span> <span class="hl opt">(&lt;</span> <span class="hl num">4.0</span>d0 <span class="hl opt">(+ (*</span> zr zr<span class="hl opt">) (*</span> zi zi<span class="hl opt">)))</span>
		      <span class="hl opt">(</span><span class="hl kwa">return</span> t<span class="hl opt">))</span>
		    <span class="hl opt">(</span><span class="hl kwa">setf</span> tr <span class="hl opt">(+ (*</span> zr zr<span class="hl opt">) (</span><span class="hl kwa">-</span> <span class="hl opt">(*</span> zi zi<span class="hl opt">))</span> base-real<span class="hl opt">)</span>
			  zi <span class="hl opt">(+ (*</span> <span class="hl num">2.0</span>d0 zr zi<span class="hl opt">)</span> base-imag<span class="hl opt">)</span>
			  zr tr<span class="hl opt">))</span>
		  <span class="hl opt">(</span><span class="hl kwa">ash</span> code <span class="hl num">1</span><span class="hl opt">)</span>
		  <span class="hl opt">(</span><span class="hl kwa">logior</span> <span class="hl opt">(</span><span class="hl kwa">ash</span> code <span class="hl num">1</span><span class="hl opt">) #</span>x01<span class="hl opt">)))</span>
	<span class="hl opt">(</span><span class="hl kwa">when</span> <span class="hl opt">(= (</span><span class="hl kwa">incf</span> bit<span class="hl opt">)</span> <span class="hl num">8</span><span class="hl opt">)</span>
	  <span class="hl opt">(</span><span class="hl kwa">setf</span> <span class="hl opt">(</span><span class="hl kwa">aref</span> buffer index<span class="hl opt">)</span> code
		bit <span class="hl num">0</span> code <span class="hl num">0</span><span class="hl opt">)</span>
	  <span class="hl opt">(</span><span class="hl kwa">incf</span> index<span class="hl opt">))))</span>

    <span class="hl opt">(</span><span class="hl kwa">write-sequence</span> buffer stream<span class="hl opt">)))</span>

<span class="hl opt">(</span><span class="hl kwa">defun</span> par-render <span class="hl opt">(</span><span class="hl kwa">size</span> stream<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> fixnum size<span class="hl opt">)		(</span><span class="hl kwa">stream</span> stream<span class="hl opt">)</span>
	   <span class="hl opt">(</span><span class="hl kwa">optimize</span> <span class="hl opt">(</span><span class="hl kwa">speed</span> <span class="hl num">3</span><span class="hl opt">) (</span><span class="hl kwa">safety</span> <span class="hl num">0</span><span class="hl opt">) (</span><span class="hl kwa">debug</span> <span class="hl num">0</span><span class="hl opt">)))</span>

  <span class="hl opt">(</span><span class="hl kwa">let</span><span class="hl opt">* ((</span><span class="hl kwa">buffer</span> <span class="hl opt">(</span><span class="hl kwa">make-array</span> <span class="hl opt">(*</span> size <span class="hl opt">(</span><span class="hl kwa">ceiling</span> size <span class="hl num">8</span><span class="hl opt">)) :</span>element-type <span class="hl opt">'(</span><span class="hl kwa">unsigned-byte</span> <span class="hl num">8</span><span class="hl opt">)))</span>
	 <span class="hl opt">(</span><span class="hl kwa">quarter-size</span> <span class="hl opt">(</span><span class="hl kwa">ceiling</span> size <span class="hl num">4</span><span class="hl opt">))</span>
	 <span class="hl opt">(</span><span class="hl kwa">quarter-array</span> <span class="hl opt">(</span><span class="hl kwa">ceiling</span> <span class="hl opt">(</span><span class="hl kwa">the</span> <span class="hl opt">(</span><span class="hl kwa">unsigned-byte</span> <span class="hl num">32</span><span class="hl opt">) (*</span> size size<span class="hl opt">))</span> <span class="hl num">32</span><span class="hl opt">)))</span>
    

    <span class="hl opt">(</span><span class="hl kwa">labels</span> <span class="hl opt">((</span><span class="hl kwa">render-sub</span> <span class="hl opt">(</span><span class="hl kwa">y-start</span> y-end index<span class="hl opt">)</span>
	       <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">((</span><span class="hl kwa">code</span> <span class="hl num">0</span><span class="hl opt">)</span> 
		     <span class="hl opt">(</span><span class="hl kwa">bit</span> <span class="hl num">0</span><span class="hl opt">)</span>
		     <span class="hl opt">(</span><span class="hl kwa">zr</span> <span class="hl num">0.0</span>d0<span class="hl opt">) (</span><span class="hl kwa">zi</span> <span class="hl num">0.0</span>d0<span class="hl opt">) (</span><span class="hl kwa">tr</span> <span class="hl num">0.0</span>d0<span class="hl opt">)</span>
		     <span class="hl opt">(</span><span class="hl kwa">delta</span> <span class="hl opt">(/</span> <span class="hl num">2</span>d0 size<span class="hl opt">))</span>
		     <span class="hl opt">(</span><span class="hl kwa">base-real</span> -<span class="hl num">1.5</span>d0<span class="hl opt">)  (</span><span class="hl kwa">base-imag</span> -<span class="hl num">1.0</span>d0<span class="hl opt">))</span>
		 <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> <span class="hl opt">(</span><span class="hl kwa">unsigned-byte</span> <span class="hl num">8</span><span class="hl opt">)</span> code<span class="hl opt">)</span>
			  <span class="hl opt">(</span><span class="hl kwa">type</span> double-float zr zi tr base-real base-imag delta<span class="hl opt">)</span>
			  <span class="hl opt">(</span><span class="hl kwa">type</span> fixnum index bit<span class="hl opt">))</span>


		 <span class="hl opt">(</span><span class="hl kwa">do</span> <span class="hl opt">((</span><span class="hl kwa">y</span> y-start <span class="hl opt">(</span><span class="hl kwa">1</span><span class="hl opt">+</span> y<span class="hl opt">)))</span>
		     <span class="hl opt">((=</span> y y-end<span class="hl opt">))</span>
		   <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> <span class="hl opt">(</span><span class="hl kwa">unsigned-byte</span> <span class="hl num">32</span><span class="hl opt">)</span> y<span class="hl opt">))</span>

		   <span class="hl opt">(</span><span class="hl kwa">setf</span> base-imag <span class="hl opt">(</span><span class="hl kwa">-</span> <span class="hl num">1.0</span>d0 <span class="hl opt">(*</span> delta y<span class="hl opt">)))</span>
		   <span class="hl opt">(</span><span class="hl kwa">dotimes</span> <span class="hl opt">(</span><span class="hl kwa">x</span> size<span class="hl opt">)</span>
		     <span class="hl opt">(</span><span class="hl kwa">setf</span> base-real <span class="hl opt">(+</span> -<span class="hl num">1.5</span>d0 <span class="hl opt">(*</span> delta x<span class="hl opt">))</span>
			   zr base-real
			   zi base-imag<span class="hl opt">)</span>
		     <span class="hl opt">(</span><span class="hl kwa">setf</span> code  
			   <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">dotimes</span> <span class="hl opt">(</span><span class="hl kwa">n</span> <span class="hl num">50</span><span class="hl opt">)</span>
				 <span class="hl opt">(</span><span class="hl kwa">when</span> <span class="hl opt">(&lt;</span> <span class="hl num">4.0</span>d0 <span class="hl opt">(+ (*</span> zr zr<span class="hl opt">) (*</span> zi zi<span class="hl opt">)))</span>
				   <span class="hl opt">(</span><span class="hl kwa">return</span> t<span class="hl opt">))</span>
				 <span class="hl opt">(</span><span class="hl kwa">setf</span> tr <span class="hl opt">(+ (*</span> zr zr<span class="hl opt">) (</span><span class="hl kwa">-</span> <span class="hl opt">(*</span> zi zi<span class="hl opt">))</span> base-real<span class="hl opt">)</span>
				       zi <span class="hl opt">(+ (*</span> <span class="hl num">2.0</span>d0 zr zi<span class="hl opt">)</span> base-imag<span class="hl opt">)</span>
				       zr tr<span class="hl opt">))</span>
			       <span class="hl opt">(</span><span class="hl kwa">ash</span> code <span class="hl num">1</span><span class="hl opt">)</span>
			       <span class="hl opt">(</span><span class="hl kwa">logior</span> <span class="hl opt">(</span><span class="hl kwa">ash</span> code <span class="hl num">1</span><span class="hl opt">) #</span>x01<span class="hl opt">)))</span>
		     <span class="hl opt">(</span><span class="hl kwa">when</span> <span class="hl opt">(= (</span><span class="hl kwa">incf</span> bit<span class="hl opt">)</span> <span class="hl num">8</span><span class="hl opt">)</span>
		       <span class="hl opt">(</span><span class="hl kwa">setf</span> <span class="hl opt">(</span><span class="hl kwa">aref</span> buffer index<span class="hl opt">)</span> code
			     bit <span class="hl num">0</span> 
			     code <span class="hl num">0</span><span class="hl opt">)</span>
		       <span class="hl opt">(</span><span class="hl kwa">incf</span> index<span class="hl opt">))</span>
		     <span class="hl opt">)))))</span>
      <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">(</span><span class="hl kwa">threads</span><span class="hl opt">)</span>
	<span class="hl opt">(</span><span class="hl kwa">dotimes</span> <span class="hl opt">(</span><span class="hl kwa">i</span> <span class="hl num">4</span><span class="hl opt">)</span>
	  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">((</span><span class="hl kwa">start</span> <span class="hl opt">(*</span> i quarter-size<span class="hl opt">))</span>
		<span class="hl opt">(</span><span class="hl kwa">end</span> <span class="hl opt">(* (+</span> i <span class="hl num">1</span><span class="hl opt">)</span> quarter-size<span class="hl opt">))</span>
		<span class="hl opt">(</span><span class="hl kwa">idx</span> <span class="hl opt">(*</span> i quarter-array<span class="hl opt">)))</span>
	    <span class="hl opt">(</span><span class="hl kwa">push</span> <span class="hl opt">(</span><span class="hl kwa">sb-thread</span><span class="hl opt">:</span>make-thread <span class="hl opt">(</span><span class="hl kwa">lambda</span> <span class="hl opt">() (</span><span class="hl kwa">render-sub</span> start end idx<span class="hl opt">)))</span> threads<span class="hl opt">)))</span>
	<span class="hl opt">(</span><span class="hl kwa">dolist</span> <span class="hl opt">(</span><span class="hl kwa">thread</span> threads<span class="hl opt">)</span>
	  <span class="hl opt">(</span><span class="hl kwa">sb-thread</span><span class="hl opt">:</span>join-thread thread<span class="hl opt">)))</span>
      <span class="hl opt">(</span><span class="hl kwa">write-sequence</span> buffer stream<span class="hl opt">))))</span>

<span class="hl opt">(</span><span class="hl kwa">defun</span> main <span class="hl opt">()</span>
  <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">optimize</span> <span class="hl opt">(</span><span class="hl kwa">speed</span> <span class="hl num">0</span><span class="hl opt">) (</span><span class="hl kwa">safety</span> <span class="hl num">3</span><span class="hl opt">)))</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span><span class="hl opt">* ((</span><span class="hl kwa">args</span> sb-ext<span class="hl opt">:*</span>posix-argv<span class="hl opt">*)</span>
	 <span class="hl opt">(</span><span class="hl kwa">n</span> <span class="hl opt">(</span><span class="hl kwa">parse-integer</span> <span class="hl opt">(</span><span class="hl kwa">second</span> args<span class="hl opt">))))</span>
    <span class="hl opt">(</span><span class="hl kwa">with-open-stream</span> <span class="hl opt">(</span><span class="hl kwa">stream</span> <span class="hl opt">(</span><span class="hl kwa">sb-sys</span><span class="hl opt">:</span>make-fd-stream <span class="hl opt">(</span><span class="hl kwa">sb-sys</span><span class="hl opt">:</span>fd-stream-fd sb-sys<span class="hl opt">:*</span>stdout<span class="hl opt">*)</span>
						     <span class="hl opt">:</span>element-type <span class="hl opt">:</span>default
						     <span class="hl opt">:</span>buffering <span class="hl opt">:</span>full
						     <span class="hl opt">:</span>output t <span class="hl opt">:</span>input nil<span class="hl opt">))</span>

      <span class="hl opt">(</span><span class="hl kwa">format</span> stream <span class="hl str">&quot;P4~%~d ~d~%&quot;</span> n n<span class="hl opt">)</span>
      <span class="hl opt">#+</span>sb-thread<span class="hl opt">(</span><span class="hl kwa">par-render</span> n stream<span class="hl opt">)</span>
      <span class="hl opt">#</span>-sb-thread<span class="hl opt">(</span><span class="hl kwa">render</span> n stream<span class="hl opt">)</span>
      <span class="hl opt">(</span><span class="hl kwa">force-output</span> stream<span class="hl opt">))))</span>
