<span class="hl com">(* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * Contributed by Paolo Ribeca</span>
<span class="hl com"> *)</span>

<span class="hl kwa">let</span> chars_per_line <span class="hl opt">=</span> <span class="hl num">60</span>
<span class="hl kwa">and</span> lines_per_worker <span class="hl opt">=</span>
  <span class="hl kwa">match</span> <span class="hl kwc">Sys</span><span class="hl opt">.</span>word_size <span class="hl kwa">with</span>
  | <span class="hl num">32</span> <span class="hl opt">-&gt;</span> <span class="hl num">200000</span>
  | <span class="hl num">64</span> <span class="hl opt">-&gt;</span> <span class="hl num">500000</span>
  | _ <span class="hl opt">-&gt;</span> <span class="hl kwa">assert false</span>

<span class="hl kwa">let</span> rc_table <span class="hl opt">=</span> <span class="hl kwc">String</span><span class="hl opt">.</span>make <span class="hl num">256</span> <span class="hl str">'</span><span class="hl esc">\000</span><span class="hl str">'</span>
<span class="hl kwa">let</span> _ <span class="hl opt">=</span>
  rc_table<span class="hl opt">.[</span><span class="hl kwc">Char</span><span class="hl opt">.</span>code <span class="hl str">'A'</span><span class="hl opt">] &lt;-</span> <span class="hl str">'T'</span><span class="hl opt">;</span> rc_table<span class="hl opt">.[</span><span class="hl kwc">Char</span><span class="hl opt">.</span>code <span class="hl str">'T'</span><span class="hl opt">] &lt;-</span> <span class="hl str">'A'</span><span class="hl opt">;</span>
  rc_table<span class="hl opt">.[</span><span class="hl kwc">Char</span><span class="hl opt">.</span>code <span class="hl str">'w'</span><span class="hl opt">] &lt;-</span> <span class="hl str">'W'</span><span class="hl opt">;</span> rc_table<span class="hl opt">.[</span><span class="hl kwc">Char</span><span class="hl opt">.</span>code <span class="hl str">'s'</span><span class="hl opt">] &lt;-</span> <span class="hl str">'S'</span><span class="hl opt">;</span>
  rc_table<span class="hl opt">.[</span><span class="hl kwc">Char</span><span class="hl opt">.</span>code <span class="hl str">'a'</span><span class="hl opt">] &lt;-</span> <span class="hl str">'T'</span><span class="hl opt">;</span> rc_table<span class="hl opt">.[</span><span class="hl kwc">Char</span><span class="hl opt">.</span>code <span class="hl str">'t'</span><span class="hl opt">] &lt;-</span> <span class="hl str">'A'</span><span class="hl opt">;</span>
  rc_table<span class="hl opt">.[</span><span class="hl kwc">Char</span><span class="hl opt">.</span>code <span class="hl str">'C'</span><span class="hl opt">] &lt;-</span> <span class="hl str">'G'</span><span class="hl opt">;</span> rc_table<span class="hl opt">.[</span><span class="hl kwc">Char</span><span class="hl opt">.</span>code <span class="hl str">'G'</span><span class="hl opt">] &lt;-</span> <span class="hl str">'C'</span><span class="hl opt">;</span>
  rc_table<span class="hl opt">.[</span><span class="hl kwc">Char</span><span class="hl opt">.</span>code <span class="hl str">'c'</span><span class="hl opt">] &lt;-</span> <span class="hl str">'G'</span><span class="hl opt">;</span> rc_table<span class="hl opt">.[</span><span class="hl kwc">Char</span><span class="hl opt">.</span>code <span class="hl str">'g'</span><span class="hl opt">] &lt;-</span> <span class="hl str">'C'</span><span class="hl opt">;</span>
  rc_table<span class="hl opt">.[</span><span class="hl kwc">Char</span><span class="hl opt">.</span>code <span class="hl str">'U'</span><span class="hl opt">] &lt;-</span> <span class="hl str">'A'</span><span class="hl opt">;</span> rc_table<span class="hl opt">.[</span><span class="hl kwc">Char</span><span class="hl opt">.</span>code <span class="hl str">'u'</span><span class="hl opt">] &lt;-</span> <span class="hl str">'A'</span><span class="hl opt">;</span>
  rc_table<span class="hl opt">.[</span><span class="hl kwc">Char</span><span class="hl opt">.</span>code <span class="hl str">'M'</span><span class="hl opt">] &lt;-</span> <span class="hl str">'K'</span><span class="hl opt">;</span> rc_table<span class="hl opt">.[</span><span class="hl kwc">Char</span><span class="hl opt">.</span>code <span class="hl str">'K'</span><span class="hl opt">] &lt;-</span> <span class="hl str">'M'</span><span class="hl opt">;</span>
  rc_table<span class="hl opt">.[</span><span class="hl kwc">Char</span><span class="hl opt">.</span>code <span class="hl str">'m'</span><span class="hl opt">] &lt;-</span> <span class="hl str">'K'</span><span class="hl opt">;</span> rc_table<span class="hl opt">.[</span><span class="hl kwc">Char</span><span class="hl opt">.</span>code <span class="hl str">'k'</span><span class="hl opt">] &lt;-</span> <span class="hl str">'M'</span><span class="hl opt">;</span>
  rc_table<span class="hl opt">.[</span><span class="hl kwc">Char</span><span class="hl opt">.</span>code <span class="hl str">'R'</span><span class="hl opt">] &lt;-</span> <span class="hl str">'Y'</span><span class="hl opt">;</span> rc_table<span class="hl opt">.[</span><span class="hl kwc">Char</span><span class="hl opt">.</span>code <span class="hl str">'Y'</span><span class="hl opt">] &lt;-</span> <span class="hl str">'R'</span><span class="hl opt">;</span>
  rc_table<span class="hl opt">.[</span><span class="hl kwc">Char</span><span class="hl opt">.</span>code <span class="hl str">'r'</span><span class="hl opt">] &lt;-</span> <span class="hl str">'Y'</span><span class="hl opt">;</span> rc_table<span class="hl opt">.[</span><span class="hl kwc">Char</span><span class="hl opt">.</span>code <span class="hl str">'y'</span><span class="hl opt">] &lt;-</span> <span class="hl str">'R'</span><span class="hl opt">;</span>
  rc_table<span class="hl opt">.[</span><span class="hl kwc">Char</span><span class="hl opt">.</span>code <span class="hl str">'W'</span><span class="hl opt">] &lt;-</span> <span class="hl str">'W'</span><span class="hl opt">;</span> rc_table<span class="hl opt">.[</span><span class="hl kwc">Char</span><span class="hl opt">.</span>code <span class="hl str">'S'</span><span class="hl opt">] &lt;-</span> <span class="hl str">'S'</span><span class="hl opt">;</span>
  rc_table<span class="hl opt">.[</span><span class="hl kwc">Char</span><span class="hl opt">.</span>code <span class="hl str">'w'</span><span class="hl opt">] &lt;-</span> <span class="hl str">'W'</span><span class="hl opt">;</span> rc_table<span class="hl opt">.[</span><span class="hl kwc">Char</span><span class="hl opt">.</span>code <span class="hl str">'s'</span><span class="hl opt">] &lt;-</span> <span class="hl str">'S'</span><span class="hl opt">;</span>
  rc_table<span class="hl opt">.[</span><span class="hl kwc">Char</span><span class="hl opt">.</span>code <span class="hl str">'V'</span><span class="hl opt">] &lt;-</span> <span class="hl str">'B'</span><span class="hl opt">;</span> rc_table<span class="hl opt">.[</span><span class="hl kwc">Char</span><span class="hl opt">.</span>code <span class="hl str">'B'</span><span class="hl opt">] &lt;-</span> <span class="hl str">'V'</span><span class="hl opt">;</span>
  rc_table<span class="hl opt">.[</span><span class="hl kwc">Char</span><span class="hl opt">.</span>code <span class="hl str">'v'</span><span class="hl opt">] &lt;-</span> <span class="hl str">'B'</span><span class="hl opt">;</span> rc_table<span class="hl opt">.[</span><span class="hl kwc">Char</span><span class="hl opt">.</span>code <span class="hl str">'b'</span><span class="hl opt">] &lt;-</span> <span class="hl str">'V'</span><span class="hl opt">;</span>
  rc_table<span class="hl opt">.[</span><span class="hl kwc">Char</span><span class="hl opt">.</span>code <span class="hl str">'H'</span><span class="hl opt">] &lt;-</span> <span class="hl str">'D'</span><span class="hl opt">;</span> rc_table<span class="hl opt">.[</span><span class="hl kwc">Char</span><span class="hl opt">.</span>code <span class="hl str">'D'</span><span class="hl opt">] &lt;-</span> <span class="hl str">'H'</span><span class="hl opt">;</span>
  rc_table<span class="hl opt">.[</span><span class="hl kwc">Char</span><span class="hl opt">.</span>code <span class="hl str">'h'</span><span class="hl opt">] &lt;-</span> <span class="hl str">'D'</span><span class="hl opt">;</span> rc_table<span class="hl opt">.[</span><span class="hl kwc">Char</span><span class="hl opt">.</span>code <span class="hl str">'d'</span><span class="hl opt">] &lt;-</span> <span class="hl str">'H'</span><span class="hl opt">;</span>
  rc_table<span class="hl opt">.[</span><span class="hl kwc">Char</span><span class="hl opt">.</span>code <span class="hl str">'N'</span><span class="hl opt">] &lt;-</span> <span class="hl str">'N'</span><span class="hl opt">;</span> rc_table<span class="hl opt">.[</span><span class="hl kwc">Char</span><span class="hl opt">.</span>code <span class="hl str">'n'</span><span class="hl opt">] &lt;-</span> <span class="hl str">'N'</span>

<span class="hl kwa">let</span> _ <span class="hl opt">=</span>
  <span class="hl kwa">let</span> aug_chars_per_line <span class="hl opt">=</span> chars_per_line <span class="hl opt">+</span> <span class="hl num">1</span>
  <span class="hl kwa">and</span> in_ack<span class="hl opt">,</span> out_ack <span class="hl opt">=</span> <span class="hl kwc">Unix</span><span class="hl opt">.</span>pipe <span class="hl opt">()</span> <span class="hl kwa">and</span> in_end<span class="hl opt">,</span> out_end <span class="hl opt">=</span> <span class="hl kwc">Unix</span><span class="hl opt">.</span>pipe <span class="hl opt">()</span>
  <span class="hl kwa">and</span> put out_pipe <span class="hl opt">() =</span>
    <span class="hl kwa">if</span> <span class="hl kwc">Unix</span><span class="hl opt">.</span>write out_pipe <span class="hl str">&quot; &quot;</span> <span class="hl num">0 1</span> <span class="hl opt">&lt;&gt;</span> <span class="hl num">1</span> <span class="hl kwa">then</span>
      failwith <span class="hl str">&quot;Pipe problem&quot;</span>
  <span class="hl kwa">and</span> get in_pipe <span class="hl opt">() =</span>
    <span class="hl kwa">let</span> res <span class="hl opt">=</span> <span class="hl str">&quot; &quot;</span> <span class="hl kwa">in</span>
    <span class="hl kwa">if</span> <span class="hl kwc">Unix</span><span class="hl opt">.</span>read in_pipe res <span class="hl num">0 1</span> <span class="hl opt">&lt;&gt;</span> <span class="hl num">1</span> <span class="hl kwa">then</span>
      failwith <span class="hl str">&quot;Pipe problem&quot;</span> <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> put_ack <span class="hl opt">=</span> put out_ack <span class="hl kwa">and</span> get_ack <span class="hl opt">=</span> get in_ack
  <span class="hl kwa">and</span> put_end_ack <span class="hl opt">=</span> put out_end <span class="hl kwa">and</span> get_end_ack <span class="hl opt">=</span> get in_end <span class="hl kwa">in</span>
  <span class="hl kwa">let rec</span> spawn tag beg first <span class="hl opt">=</span>
    <span class="hl kwa">let</span> output_tag <span class="hl opt">() =</span>
      print_string tag<span class="hl opt">;</span>
      print_char <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl opt">;</span>
      flush stdout
    <span class="hl kwa">and</span> buf <span class="hl opt">=</span> <span class="hl kwc">String</span><span class="hl opt">.</span>create <span class="hl opt">(</span>lines_per_worker <span class="hl opt">*</span> chars_per_line <span class="hl opt">+</span> <span class="hl num">2</span><span class="hl opt">)</span>
    <span class="hl kwa">and</span> len <span class="hl opt">=</span> <span class="hl kwb">ref</span> <span class="hl opt">(</span><span class="hl kwc">String</span><span class="hl opt">.</span>length beg<span class="hl opt">)</span> <span class="hl kwa">in</span>
    <span class="hl kwc">String</span><span class="hl opt">.</span>blit beg <span class="hl num">0</span> buf <span class="hl num">0</span> <span class="hl opt">!</span>len<span class="hl opt">;</span>
    <span class="hl kwa">let</span> process_buffer <span class="hl opt">() =</span>
      <span class="hl kwa">let</span> red_len <span class="hl opt">= !</span>len <span class="hl opt">-</span> <span class="hl num">1</span> <span class="hl kwa">in</span>
      <span class="hl kwa">let</span> mid_point <span class="hl opt">=</span> red_len <span class="hl opt">/</span> <span class="hl num">2</span> <span class="hl kwa">in</span>
      <span class="hl kwa">for</span> i <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> mid_point <span class="hl kwa">do</span>
	<span class="hl kwa">let</span> ri <span class="hl opt">=</span> red_len <span class="hl opt">-</span> i <span class="hl kwa">and</span> tmp <span class="hl opt">=</span> buf<span class="hl opt">.[</span>i<span class="hl opt">]</span> <span class="hl kwa">in</span>
	buf<span class="hl opt">.[</span>i<span class="hl opt">] &lt;-</span> rc_table<span class="hl opt">.[</span><span class="hl kwc">Char</span><span class="hl opt">.</span>code buf<span class="hl opt">.[</span>ri<span class="hl opt">]];</span>
	buf<span class="hl opt">.[</span>ri<span class="hl opt">] &lt;-</span> rc_table<span class="hl opt">.[</span><span class="hl kwc">Char</span><span class="hl opt">.</span>code tmp<span class="hl opt">]</span>
      <span class="hl kwa">done</span>
    <span class="hl kwa">and</span> write_by_cols rem eol <span class="hl opt">=</span>
      <span class="hl kwa">let</span> len <span class="hl opt">= !</span>len <span class="hl kwa">and</span> dne <span class="hl opt">=</span> <span class="hl kwb">ref</span> <span class="hl num">0</span> <span class="hl kwa">in</span>
      <span class="hl kwa">if</span> rem <span class="hl opt">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then begin</span>
	<span class="hl kwa">let</span> to_do <span class="hl opt">=</span> min rem <span class="hl opt">(</span>len <span class="hl opt">- !</span>dne<span class="hl opt">)</span> <span class="hl kwa">in</span>
	output stdout buf <span class="hl opt">!</span>dne to_do<span class="hl opt">;</span>
	output_char stdout <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl opt">;</span>
	dne <span class="hl opt">:= !</span>dne <span class="hl opt">+</span> to_do
      <span class="hl kwa">end</span><span class="hl opt">;</span>
      <span class="hl kwa">while</span> len <span class="hl opt">- !</span>dne <span class="hl opt">&gt;=</span> chars_per_line <span class="hl kwa">do</span>
	output stdout buf <span class="hl opt">!</span>dne chars_per_line<span class="hl opt">;</span>
	output_char stdout <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl opt">;</span>
	dne <span class="hl opt">:= !</span>dne <span class="hl opt">+</span> chars_per_line
      <span class="hl kwa">done</span><span class="hl opt">;</span>
      <span class="hl kwa">let</span> rem <span class="hl opt">=</span> len <span class="hl opt">- !</span>dne <span class="hl kwa">in</span>
      <span class="hl kwa">if</span> rem <span class="hl opt">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then begin</span>
	output stdout buf <span class="hl opt">!</span>dne rem<span class="hl opt">;</span>
	<span class="hl kwa">if</span> eol <span class="hl kwa">then</span>
	  output_char stdout <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span>
      <span class="hl kwa">end</span><span class="hl opt">;</span>
      flush stdout<span class="hl opt">;</span>
      <span class="hl kwa">if</span> eol <span class="hl kwa">then</span>
	<span class="hl num">0</span>
      <span class="hl kwa">else</span>
	rem <span class="hl kwa">in</span>
    <span class="hl kwa">try</span>
      <span class="hl kwa">for</span> i <span class="hl opt">=</span> <span class="hl num">2</span> <span class="hl kwa">to</span> lines_per_worker <span class="hl kwa">do</span>
	really_input stdin buf <span class="hl opt">!</span>len aug_chars_per_line<span class="hl opt">;</span>
	<span class="hl kwa">let</span> new_len <span class="hl opt">=</span> <span class="hl kwb">ref</span> <span class="hl opt">(!</span>len <span class="hl opt">+</span> chars_per_line<span class="hl opt">)</span> <span class="hl kwa">in</span>
	<span class="hl kwa">if</span> buf<span class="hl opt">.[!</span>len<span class="hl opt">] =</span> <span class="hl str">'&gt;'</span> || buf<span class="hl opt">.[!</span>new_len<span class="hl opt">] &lt;&gt;</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span> <span class="hl kwa">then begin</span>
	  <span class="hl kwa">while</span> buf<span class="hl opt">.[!</span>len<span class="hl opt">] &lt;&gt;</span> <span class="hl str">'&gt;'</span> <span class="hl kwa">do</span>
	    incr len
	  <span class="hl kwa">done</span><span class="hl opt">;</span>
	  <span class="hl kwa">let</span> ptr <span class="hl opt">=</span> <span class="hl kwb">ref</span> <span class="hl opt">!</span>len <span class="hl kwa">in</span>
	  <span class="hl com">(* Needed to patch the hideous bug in the output of the C program *)</span>
	  <span class="hl kwa">if</span> buf<span class="hl opt">.[!</span>len <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">] &lt;&gt;</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span> <span class="hl kwa">then begin</span>
	    <span class="hl kwc">String</span><span class="hl opt">.</span>blit buf <span class="hl opt">!</span>len buf <span class="hl opt">(!</span>len <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">)</span> aug_chars_per_line<span class="hl opt">;</span>
	    buf<span class="hl opt">.[!</span>len<span class="hl opt">] &lt;-</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl opt">;</span>
	    incr new_len<span class="hl opt">;</span>
	    incr ptr
	  <span class="hl kwa">end else</span>
	    decr len<span class="hl opt">;</span>
	  <span class="hl kwa">while</span> <span class="hl opt">!</span>ptr <span class="hl opt">&lt; !</span>new_len <span class="hl opt">&amp;&amp;</span> buf<span class="hl opt">.[!</span>ptr<span class="hl opt">] &lt;&gt;</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span> <span class="hl kwa">do</span>
	    incr ptr
	  <span class="hl kwa">done</span><span class="hl opt">;</span>
	  <span class="hl kwa">match</span> <span class="hl kwc">Unix</span><span class="hl opt">.</span>fork <span class="hl opt">()</span> <span class="hl kwa">with</span>
	  | <span class="hl num">0</span> <span class="hl opt">-&gt;</span>
	      <span class="hl kwa">let</span> aug_len <span class="hl opt">= !</span>len <span class="hl opt">+</span> <span class="hl num">1</span> <span class="hl kwa">in</span>
	      <span class="hl kwa">if</span> <span class="hl opt">!</span>ptr <span class="hl opt">= !</span>new_len <span class="hl kwa">then</span>
		spawn
		  <span class="hl opt">(</span><span class="hl kwc">String</span><span class="hl opt">.</span>sub buf
		    aug_len <span class="hl opt">(!</span>new_len <span class="hl opt">-</span> aug_len<span class="hl opt">)</span> ^ input_line stdin<span class="hl opt">)</span>
		  <span class="hl str">&quot;&quot;</span> <span class="hl kwa">true</span>
	      <span class="hl kwa">else</span>
		<span class="hl kwa">let</span> aug_ptr <span class="hl opt">= !</span>ptr <span class="hl opt">+</span> <span class="hl num">1</span> <span class="hl kwa">in</span>
		spawn
		  <span class="hl opt">(</span><span class="hl kwc">String</span><span class="hl opt">.</span>sub buf aug_len <span class="hl opt">(!</span>ptr <span class="hl opt">-</span> aug_len<span class="hl opt">))</span>
		  <span class="hl opt">(</span><span class="hl kwc">String</span><span class="hl opt">.</span>sub buf aug_ptr <span class="hl opt">(!</span>new_len <span class="hl opt">- !</span>ptr<span class="hl opt">)</span> ^ input_line stdin<span class="hl opt">)</span>
		  <span class="hl kwa">true</span>
	  | _ <span class="hl opt">-&gt;</span>
	      get_ack <span class="hl opt">();</span>
	      output_tag <span class="hl opt">();</span>
	      process_buffer <span class="hl opt">();</span>
	      <span class="hl kwa">let</span> rem <span class="hl opt">=</span> write_by_cols <span class="hl num">0</span> first <span class="hl kwa">in</span>
	      <span class="hl kwa">if</span> first <span class="hl kwa">then</span>
		put_ack <span class="hl opt">();</span>
	      exit rem
	<span class="hl kwa">end</span><span class="hl opt">;</span>
	len <span class="hl opt">:= !</span>new_len
      <span class="hl kwa">done</span><span class="hl opt">;</span>
      <span class="hl kwa">match</span> <span class="hl kwc">Unix</span><span class="hl opt">.</span>fork <span class="hl opt">()</span> <span class="hl kwa">with</span>
      | <span class="hl num">0</span> <span class="hl opt">-&gt;</span> spawn tag <span class="hl str">&quot;&quot;</span> <span class="hl kwa">false</span>
      | pid <span class="hl opt">-&gt;</span>
	  process_buffer <span class="hl opt">();</span>
	  <span class="hl kwa">match</span> <span class="hl kwc">Unix</span><span class="hl opt">.</span>waitpid <span class="hl opt">[]</span> pid <span class="hl kwa">with</span>
	  | _<span class="hl opt">,</span> <span class="hl kwc">Unix</span><span class="hl opt">.</span><span class="hl kwd">WEXITED</span> rem <span class="hl opt">-&gt;</span>
	      <span class="hl kwa">let</span> rem <span class="hl opt">=</span> write_by_cols <span class="hl opt">(</span>chars_per_line <span class="hl opt">-</span> rem<span class="hl opt">)</span> first <span class="hl kwa">in</span>
	      <span class="hl kwa">if</span> first <span class="hl kwa">then</span>
		put_ack <span class="hl opt">();</span>
	      exit rem
	  | _ <span class="hl opt">-&gt;</span> <span class="hl kwa">assert false</span>
    <span class="hl kwa">with</span> <span class="hl kwd">End_of_file</span> <span class="hl opt">-&gt;</span>
      <span class="hl kwa">while</span> buf<span class="hl opt">.[!</span>len<span class="hl opt">] &lt;&gt;</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span> <span class="hl kwa">do</span>
	incr len
      <span class="hl kwa">done</span><span class="hl opt">;</span>
      get_ack <span class="hl opt">();</span>
      put_end_ack <span class="hl opt">();</span>
      output_tag <span class="hl opt">();</span>
      process_buffer <span class="hl opt">();</span>
      <span class="hl kwa">let</span> rem <span class="hl opt">=</span> write_by_cols <span class="hl num">0</span> first <span class="hl kwa">in</span>
      <span class="hl kwa">if</span> first <span class="hl kwa">then</span>
	put_ack <span class="hl opt">();</span>
      exit rem <span class="hl kwa">in</span>
  <span class="hl kwa">match</span> <span class="hl kwc">Unix</span><span class="hl opt">.</span>fork <span class="hl opt">()</span> <span class="hl kwa">with</span>
  | <span class="hl num">0</span> <span class="hl opt">-&gt;</span>
      put_ack <span class="hl opt">();</span>
      spawn <span class="hl opt">(</span>read_line <span class="hl opt">())</span> <span class="hl str">&quot;&quot;</span> <span class="hl kwa">true</span>
  | _ <span class="hl opt">-&gt;</span>
      get_end_ack <span class="hl opt">();</span>
      get_ack <span class="hl opt">();</span>
      exit <span class="hl num">0</span>
