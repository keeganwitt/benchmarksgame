<span class="hl com">(*</span>
<span class="hl com">** The Computer Language Benchmarks Game</span>
<span class="hl com">** http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com">**</span>
<span class="hl com">** contributed by Hongwei Xi</span>
<span class="hl com">**</span>
<span class="hl com">** compilation command:</span>
<span class="hl com">**   atscc -D_GNU_SOURCE -D_ATS_MULTITHREAD -O3 binary-trees3.dats -o binary-trees3 -D_ATS_GCATS -lpthread</span>
<span class="hl com">*)</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">staload</span> <span class="hl str">&quot;libats/SATS/parworkshop.sats&quot;</span>
<span class="hl kwa">staload</span> _ <span class="hl opt">=</span> <span class="hl str">&quot;libats/DATS/parworkshop.dats&quot;</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">staload</span> _<span class="hl com">(*anon*)</span> <span class="hl opt">=</span> <span class="hl str">&quot;prelude/DATS/reference.dats&quot;</span>

<span class="hl com">(* ****** ****** *)</span>

dataviewtype tree <span class="hl opt">(</span><span class="hl kwb">int</span><span class="hl opt">) =</span>
  <span class="hl kwd">Nil</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">)</span> | <span class="hl opt">{</span>n1<span class="hl opt">,</span>n2<span class="hl opt">:</span>two<span class="hl opt">}</span> <span class="hl kwd">Node</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">)</span> <span class="hl kwa">of</span> <span class="hl opt">(</span>tree n1<span class="hl opt">,</span> <span class="hl kwb">int</span><span class="hl opt">,</span> tree n2<span class="hl opt">)</span>

viewtypedef <span class="hl kwd">Tree</span> <span class="hl opt">= [</span>n<span class="hl opt">:</span>two<span class="hl opt">]</span> tree n

<span class="hl kwa">fun</span> tree_make <span class="hl opt">(</span>d<span class="hl opt">:</span> <span class="hl kwb">int</span><span class="hl opt">,</span> i<span class="hl opt">:</span> <span class="hl kwb">int</span><span class="hl opt">):</span> <span class="hl kwd">Tree</span> <span class="hl opt">=</span>
  <span class="hl kwa">if</span> d <span class="hl opt">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
    <span class="hl kwa">let val</span> d1 <span class="hl opt">=</span> d<span class="hl opt">-</span><span class="hl num">1</span> <span class="hl kwa">and</span> i2 <span class="hl opt">=</span> i <span class="hl opt">&lt;&lt;</span> <span class="hl num">1</span> <span class="hl kwa">in</span>      
      <span class="hl kwd">Node</span> <span class="hl opt">(</span>tree_make <span class="hl opt">(</span>d1<span class="hl opt">,</span> i2 <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">),</span> i<span class="hl opt">,</span> tree_make <span class="hl opt">(</span>d1<span class="hl opt">,</span> i2<span class="hl opt">))</span>
    <span class="hl kwa">end</span>
  <span class="hl kwa">else</span> <span class="hl kwd">Node</span> <span class="hl opt">(</span><span class="hl kwd">Nil</span> <span class="hl opt">(),</span> i<span class="hl opt">,</span> <span class="hl kwd">Nil</span> <span class="hl opt">())</span>
<span class="hl slc">// end of [tree_make]</span>

<span class="hl kwa">fun</span> check_and_free <span class="hl opt">(</span>t<span class="hl opt">:</span> <span class="hl kwd">Tree</span><span class="hl opt">):&lt;!</span>ntm<span class="hl opt">&gt;</span> <span class="hl kwb">int</span> <span class="hl opt">=</span>  case<span class="hl opt">+</span> t <span class="hl kwa">of</span>
  | ~<span class="hl kwd">Node</span> <span class="hl opt">(</span>tl<span class="hl opt">,</span> i<span class="hl opt">,</span> tr<span class="hl opt">) =&gt;</span> i <span class="hl opt">+</span> check_and_free tl <span class="hl opt">-</span> check_and_free tr
  | ~<span class="hl kwd">Nil</span> <span class="hl opt">() =&gt;</span> <span class="hl num">0</span>
<span class="hl slc">// end of [check_and_free]</span>

<span class="hl kwa">fun</span> check <span class="hl opt">(</span>t<span class="hl opt">: !</span><span class="hl kwd">Tree</span><span class="hl opt">):&lt;!</span>ntm<span class="hl opt">&gt;</span> <span class="hl kwb">int</span> <span class="hl opt">=</span>  case<span class="hl opt">+</span> t <span class="hl kwa">of</span>
  | <span class="hl kwd">Node</span> <span class="hl opt">(!</span>tl<span class="hl opt">,</span> i<span class="hl opt">, !</span>tr<span class="hl opt">) =&gt;</span>
    <span class="hl kwa">let val</span> ans <span class="hl opt">=</span> i <span class="hl opt">+</span> check <span class="hl opt">(!</span>tl<span class="hl opt">) -</span> check <span class="hl opt">(!</span>tr<span class="hl opt">)</span> <span class="hl kwa">in</span> <span class="hl opt">(</span>fold&#64; t<span class="hl opt">;</span> ans<span class="hl opt">)</span> <span class="hl kwa">end</span>
  | <span class="hl kwd">Nil</span> <span class="hl opt">() =&gt; (</span>fold&#64; t<span class="hl opt">;</span> <span class="hl num">0</span><span class="hl opt">)</span>
<span class="hl slc">// end of [check]</span>

<span class="hl kwa">fun</span> check_ref <span class="hl opt">(</span>r<span class="hl opt">:</span> <span class="hl kwb">ref</span> <span class="hl kwd">Tree</span><span class="hl opt">):</span> <span class="hl kwb">int</span> <span class="hl opt">=</span> <span class="hl kwa">let</span>
  <span class="hl kwa">val</span> <span class="hl opt">(</span>vbox pf | p<span class="hl opt">) =</span> ref_get_view_ptr r <span class="hl kwa">in</span> check <span class="hl opt">!</span>p     
<span class="hl kwa">end</span> <span class="hl slc">// end of [check_ref]</span>

<span class="hl slc">//</span>

<span class="hl ppc">#define MIN_DEPTH 4</span>

<span class="hl slc">//</span>

fn stretch <span class="hl opt">(</span>max_depth<span class="hl opt">:</span> <span class="hl kwd">Nat</span><span class="hl opt">):</span> void <span class="hl opt">=</span> <span class="hl kwa">let</span>
   <span class="hl kwa">val</span> stretch_depth <span class="hl opt">=</span> max_depth <span class="hl opt">+</span> <span class="hl num">1</span>
   <span class="hl kwa">val</span> t <span class="hl opt">=</span> tree_make <span class="hl opt">(</span>stretch_depth<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">)</span>
   <span class="hl kwa">val</span> c <span class="hl opt">=</span> check_and_free <span class="hl opt">(</span>t<span class="hl opt">)</span>
<span class="hl kwa">in</span>
   printf <span class="hl opt">(</span><span class="hl str">&quot;stretch tree of depth %i</span><span class="hl esc">\t</span> <span class="hl str">check: %i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> &#64;<span class="hl opt">(</span>stretch_depth<span class="hl opt">,</span> c<span class="hl opt">));</span>
<span class="hl kwa">end</span> <span class="hl slc">// end of [stretch]</span>

fn long_lived_tree_make
  <span class="hl opt">(</span>max_depth<span class="hl opt">:</span> <span class="hl kwd">Nat</span><span class="hl opt">):</span> <span class="hl kwb">ref</span> <span class="hl kwd">Tree</span> <span class="hl opt">=</span> <span class="hl kwa">let</span>
  <span class="hl kwa">val</span> t <span class="hl opt">=</span> tree_make <span class="hl opt">(</span>max_depth<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">);</span> <span class="hl kwa">val</span> t_r <span class="hl opt">=</span> <span class="hl kwb">ref</span><span class="hl opt">&lt;</span><span class="hl kwd">Tree</span><span class="hl opt">&gt; (</span>t<span class="hl opt">)</span>
<span class="hl kwa">in</span>
  t_r
<span class="hl kwa">end</span> <span class="hl slc">// end of [long_lived_tree_make]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">fun</span> doWork
  <span class="hl opt">{</span>l_n<span class="hl opt">,</span>l_d<span class="hl opt">,</span>l_c<span class="hl opt">:</span>addr<span class="hl opt">} {</span>d<span class="hl opt">,</span>md<span class="hl opt">:</span>nat | d <span class="hl opt">&lt;=</span> md<span class="hl opt">} (</span>
    pf_n<span class="hl opt">: !</span><span class="hl kwb">int</span> &#64; l_n
  <span class="hl opt">,</span> pf_d<span class="hl opt">: !</span><span class="hl kwb">int</span> &#64; l_d
  <span class="hl opt">,</span> pf_c<span class="hl opt">: !</span><span class="hl kwb">int</span> &#64; l_c
  | p_n<span class="hl opt">:</span> ptr l_n<span class="hl opt">,</span> p_d<span class="hl opt">:</span> ptr l_d<span class="hl opt">,</span> p_c<span class="hl opt">:</span> ptr l_c
  <span class="hl opt">,</span> d<span class="hl opt">:</span> <span class="hl kwb">int</span> d<span class="hl opt">,</span> max_depth<span class="hl opt">:</span> <span class="hl kwb">int</span> md
  <span class="hl opt">) :</span> void <span class="hl opt">=</span> <span class="hl kwa">let</span>
  <span class="hl kwa">val</span> n <span class="hl opt">=</span> <span class="hl num">1</span> <span class="hl opt">&lt;&lt; (</span>max_depth <span class="hl opt">-</span> d <span class="hl opt">+</span> <span class="hl kwd">MIN_DEPTH</span><span class="hl opt">)</span>
  <span class="hl kwa">fun</span> loop <span class="hl opt">(</span>i<span class="hl opt">:</span> <span class="hl kwd">Nat</span><span class="hl opt">,</span> c<span class="hl opt">:</span> <span class="hl kwb">int</span><span class="hl opt">):&lt;</span>cloref1<span class="hl opt">&gt;</span> <span class="hl kwb">int</span> <span class="hl opt">=</span>
    <span class="hl kwa">if</span> i <span class="hl opt">&lt;</span> n <span class="hl kwa">then let</span>
      <span class="hl kwa">val</span> t <span class="hl opt">=</span> tree_make<span class="hl opt">(</span>d<span class="hl opt">,</span>  i<span class="hl opt">);</span> <span class="hl kwa">val</span> c1 <span class="hl opt">=</span> check_and_free t
      <span class="hl kwa">val</span> t <span class="hl opt">=</span> tree_make<span class="hl opt">(</span>d<span class="hl opt">,</span> ~i<span class="hl opt">);</span> <span class="hl kwa">val</span> c2 <span class="hl opt">=</span> check_and_free t
    <span class="hl kwa">in</span>
      loop <span class="hl opt">(</span>i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">,</span> c <span class="hl opt">+</span> c1 <span class="hl opt">+</span> c2<span class="hl opt">)</span>
    <span class="hl kwa">end else begin</span>
      c <span class="hl slc">// return value</span>
    <span class="hl kwa">end</span> <span class="hl slc">// end of [if]</span>
  <span class="hl kwa">val</span> <span class="hl opt">() = !</span>p_n <span class="hl opt">:=</span> n
  <span class="hl kwa">val</span> <span class="hl opt">() = !</span>p_d <span class="hl opt">:=</span> d<span class="hl opt">;</span>
  <span class="hl kwa">val</span> <span class="hl opt">() = !</span>p_c <span class="hl opt">:=</span> loop <span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">)</span>
<span class="hl kwa">in</span>
  <span class="hl slc">// nothing</span>
<span class="hl kwa">end</span> <span class="hl slc">// end of [doWork]</span>

<span class="hl com">(* ****** ****** *)</span>

dataviewtype <span class="hl kwd">CONT</span> <span class="hl opt">=</span>
  | <span class="hl kwd">CONTnil</span> <span class="hl kwa">of</span> <span class="hl opt">()</span>
  | <span class="hl kwd">CONTcons</span> <span class="hl kwa">of</span> <span class="hl opt">(</span><span class="hl kwb">int</span><span class="hl com">(*n*)</span><span class="hl opt">,</span> <span class="hl kwb">int</span><span class="hl com">(*d*)</span><span class="hl opt">,</span> <span class="hl kwb">int</span><span class="hl com">(*c*)</span><span class="hl opt">,</span> <span class="hl kwd">CONT</span><span class="hl opt">)</span>
<span class="hl slc">// end of [CONT]</span>

<span class="hl kwa">fun</span> finishup <span class="hl opt">(</span>cont<span class="hl opt">:</span> <span class="hl kwd">CONT</span><span class="hl opt">):</span> void <span class="hl opt">=</span> case<span class="hl opt">+</span> cont <span class="hl kwa">of</span>
  | ~<span class="hl kwd">CONTcons</span> <span class="hl opt">(</span>n<span class="hl opt">,</span> d<span class="hl opt">,</span> c<span class="hl opt">,</span> cont<span class="hl opt">) =&gt;</span> <span class="hl kwa">let</span>
      <span class="hl kwa">val</span> <span class="hl opt">() =</span> printf <span class="hl opt">(</span>
        <span class="hl str">&quot;%i</span><span class="hl esc">\t</span> <span class="hl str">trees of depth %i</span><span class="hl esc">\t</span> <span class="hl str">check: %i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> &#64;<span class="hl opt">(</span><span class="hl num">2</span> <span class="hl opt">*</span> n<span class="hl opt">,</span> d<span class="hl opt">,</span> c<span class="hl opt">)</span>
      <span class="hl opt">)</span> <span class="hl slc">// end of printf</span>
    <span class="hl kwa">in</span>
      finishup <span class="hl opt">(</span>cont<span class="hl opt">)</span>
    <span class="hl kwa">end</span> <span class="hl com">(* end of [locklst_cons] *)</span>
  | ~<span class="hl kwd">CONTnil</span> <span class="hl opt">() =&gt; ()</span>
<span class="hl slc">// end of [finishup]</span>

<span class="hl com">(* ****** ****** *)</span>

viewtypedef work <span class="hl opt">= () -&lt;</span>lincloptr1<span class="hl opt">&gt;</span> void
viewtypedef <span class="hl kwd">WSptr</span> <span class="hl opt">(</span>l<span class="hl opt">:</span>addr<span class="hl opt">) =</span> <span class="hl kwd">WORKSHOPptr</span> <span class="hl opt">(</span>work<span class="hl opt">,</span> l<span class="hl opt">)</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">fun</span> fwork <span class="hl opt">{</span>l<span class="hl opt">:</span>addr<span class="hl opt">}</span>
  <span class="hl opt">(</span>ws<span class="hl opt">: !</span><span class="hl kwd">WSptr</span> l<span class="hl opt">,</span> wk<span class="hl opt">: &amp;</span>work <span class="hl opt">&gt;&gt;</span> work?<span class="hl opt">):</span> <span class="hl kwb">int</span> <span class="hl opt">=</span> <span class="hl kwa">let</span>
  <span class="hl kwa">val</span> wk <span class="hl opt">=</span> wk
  <span class="hl kwa">val</span> pfun <span class="hl opt">=</span> __cast <span class="hl opt">(</span>wk<span class="hl opt">)</span> where <span class="hl opt">{</span>
    <span class="hl kwa">extern</span> castfn __cast
      <span class="hl opt">(</span>wk<span class="hl opt">: !</span>work <span class="hl opt">&gt;&gt;</span> opt <span class="hl opt">(</span>work<span class="hl opt">,</span> i <span class="hl opt">&gt;=</span> <span class="hl num">1</span><span class="hl opt">)):</span> <span class="hl ppc">#[i:nat] uintptr i</span>
  <span class="hl opt">}</span> <span class="hl slc">// end of [val]</span>
<span class="hl kwa">in</span>
  <span class="hl kwa">if</span> pfun <span class="hl opt">&gt;= (</span>uintptr1_of_uint1<span class="hl opt">)</span><span class="hl num">1U</span> <span class="hl kwa">then let</span>
    prval <span class="hl opt">() =</span> opt_unsome <span class="hl opt">{</span>work<span class="hl opt">} (</span>wk<span class="hl opt">)</span>
    <span class="hl kwa">val</span> <span class="hl opt">() =</span> wk <span class="hl opt">()</span>
    <span class="hl kwa">val</span> <span class="hl opt">() =</span> cloptr_free <span class="hl opt">(</span>wk<span class="hl opt">)</span>
  <span class="hl kwa">in</span>
    <span class="hl num">1</span> <span class="hl slc">// the worker is to continue</span>
  <span class="hl kwa">end else let</span>
    <span class="hl kwa">val</span> u <span class="hl opt">=</span> uint1_of_uintptr1 <span class="hl opt">(</span>pfun<span class="hl opt">)</span>
    <span class="hl kwa">val</span> i <span class="hl opt">=</span> int_of_uint <span class="hl opt">(</span>u<span class="hl opt">)</span>
    prval <span class="hl opt">() =</span> opt_unnone <span class="hl opt">{</span>work<span class="hl opt">} (</span>wk<span class="hl opt">)</span>
    prval <span class="hl opt">() =</span> cleanup_top <span class="hl opt">{</span>work<span class="hl opt">} (</span>wk<span class="hl opt">)</span>
  <span class="hl kwa">in</span>
    ~i <span class="hl slc">// the worker is to pause or quit</span>
  <span class="hl kwa">end</span> <span class="hl slc">// end of [if]</span>
<span class="hl kwa">end</span> <span class="hl slc">// end of [fwork]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">fun</span> loop_depths <span class="hl opt">{</span>lws<span class="hl opt">:</span>agz<span class="hl opt">}</span>
  <span class="hl opt">(</span>ws<span class="hl opt">: !</span><span class="hl kwd">WSptr</span> lws<span class="hl opt">,</span> d<span class="hl opt">:</span> <span class="hl kwd">Nat</span><span class="hl opt">,</span> max_depth<span class="hl opt">:</span> <span class="hl kwd">Nat</span><span class="hl opt">,</span> res<span class="hl opt">: &amp;</span><span class="hl kwd">CONT</span>? <span class="hl opt">&gt;&gt;</span> <span class="hl kwd">CONT</span><span class="hl opt">):</span> void <span class="hl opt">=</span> <span class="hl kwa">let</span>
  <span class="hl kwa">extern</span> prfun __ref <span class="hl opt">{</span>v<span class="hl opt">:</span>view<span class="hl opt">} (</span>pf<span class="hl opt">: !</span>v<span class="hl opt">):</span> v
  <span class="hl kwa">extern</span> prfun __unref <span class="hl opt">{</span>v<span class="hl opt">:</span>view<span class="hl opt">} (</span>pf<span class="hl opt">:</span> v<span class="hl opt">):</span> void
<span class="hl kwa">in</span>
  <span class="hl kwa">if</span> d <span class="hl opt">&lt;=</span> max_depth <span class="hl kwa">then let</span>
    <span class="hl kwa">val</span> <span class="hl opt">() =</span> res <span class="hl opt">:=</span> <span class="hl kwd">CONTcons</span> <span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> ?<span class="hl opt">)</span>
    <span class="hl kwa">val</span><span class="hl opt">+</span> <span class="hl kwd">CONTcons</span> <span class="hl opt">(!</span>p_n<span class="hl opt">, !</span>p_d<span class="hl opt">, !</span>p_c<span class="hl opt">, !</span>p_res1<span class="hl opt">) =</span> res
    stavar l_n<span class="hl opt">:</span>addr <span class="hl kwa">and</span> l_d<span class="hl opt">:</span>addr <span class="hl kwa">and</span> l_c<span class="hl opt">:</span>addr
    prval pf_n <span class="hl opt">=</span> __ref <span class="hl opt">{</span><span class="hl kwb">int</span>&#64;l_n<span class="hl opt">} (</span>view&#64; <span class="hl opt">!</span>p_n<span class="hl opt">)</span>
    prval pf_d <span class="hl opt">=</span> __ref <span class="hl opt">{</span><span class="hl kwb">int</span>&#64;l_d<span class="hl opt">} (</span>view&#64; <span class="hl opt">!</span>p_d<span class="hl opt">)</span>
    prval pf_c <span class="hl opt">=</span> __ref <span class="hl opt">{</span><span class="hl kwb">int</span>&#64;l_c<span class="hl opt">} (</span>view&#64; <span class="hl opt">!</span>p_c<span class="hl opt">)</span>
    <span class="hl kwa">val</span> <span class="hl opt">() =</span> workshop_insert_work <span class="hl opt">(</span>ws<span class="hl opt">,</span> f<span class="hl opt">)</span> where <span class="hl opt">{</span>
      <span class="hl kwa">val</span> f <span class="hl opt">=</span> lam <span class="hl opt">():</span> void <span class="hl opt">=&lt;</span>lincloptr1<span class="hl opt">&gt;</span> <span class="hl kwa">let</span>
        <span class="hl kwa">val</span> <span class="hl opt">() =</span> doWork <span class="hl opt">(</span>pf_n<span class="hl opt">,</span> pf_d<span class="hl opt">,</span> pf_c | p_n<span class="hl opt">,</span> p_d<span class="hl opt">,</span> p_c<span class="hl opt">,</span> d<span class="hl opt">,</span> max_depth<span class="hl opt">)</span>
        prval <span class="hl opt">() =</span> __unref <span class="hl opt">(</span>pf_n<span class="hl opt">)</span>
        prval <span class="hl opt">() =</span> __unref <span class="hl opt">(</span>pf_d<span class="hl opt">)</span>
        prval <span class="hl opt">() =</span> __unref <span class="hl opt">(</span>pf_c<span class="hl opt">)</span>
      <span class="hl kwa">in</span>
        <span class="hl slc">// nothing</span>
      <span class="hl kwa">end</span>
    <span class="hl opt">}</span> <span class="hl slc">// end of [workshop_add_work]</span>
    <span class="hl kwa">val</span> <span class="hl opt">() =</span> loop_depths <span class="hl opt">(</span>ws<span class="hl opt">,</span> d <span class="hl opt">+</span> <span class="hl num">2</span><span class="hl opt">,</span> max_depth<span class="hl opt">, !</span>p_res1<span class="hl opt">)</span>
  <span class="hl kwa">in</span>
    fold&#64; <span class="hl opt">(</span>res<span class="hl opt">)</span>
  <span class="hl kwa">end else begin</span>
    res <span class="hl opt">:=</span> <span class="hl kwd">CONTnil</span> <span class="hl opt">()</span>
  <span class="hl kwa">end</span> <span class="hl slc">// end of [if]</span>
<span class="hl kwa">end</span> <span class="hl com">(* end of [loop_depths] *)</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">staload</span> <span class="hl str">&quot;libc/SATS/sched.sats&quot;</span>
<span class="hl kwa">staload</span> <span class="hl kwd">TYPES</span> <span class="hl opt">=</span> <span class="hl str">&quot;libc/sys/SATS/types.sats&quot;</span>
<span class="hl kwa">macdef</span> pid_t <span class="hl opt">=</span> $<span class="hl kwc">TYPES</span><span class="hl opt">.</span>pid_of_int

<span class="hl kwa">extern fun</span> ncore_get <span class="hl opt">():</span> <span class="hl kwb">int</span>
<span class="hl kwa">implement</span> ncore_get <span class="hl opt">() =</span> <span class="hl kwa">let</span>
  var cs<span class="hl opt">:</span> cpu_set0_t <span class="hl slc">// uninitialized</span>
  prval <span class="hl opt">() =</span> cpusetinit <span class="hl opt">(</span>cs<span class="hl opt">)</span> <span class="hl slc">// not a real initialization</span>
  stavar nset<span class="hl opt">:</span> <span class="hl kwb">int</span>
  <span class="hl kwa">val</span> nset <span class="hl opt">=</span> cpusetsize_get <span class="hl opt">(</span>cs<span class="hl opt">)</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> assert_errmsg <span class="hl opt">(</span>nset <span class="hl opt">&gt;=</span> <span class="hl num">2</span><span class="hl opt">,</span> <span class="hl ppc">#LOCATION)</span>
  <span class="hl kwa">val</span> err <span class="hl opt">=</span> sched_getaffinity <span class="hl opt">((</span>pid_t<span class="hl opt">)</span><span class="hl num">0</span><span class="hl opt">,</span> nset<span class="hl opt">,</span> cs<span class="hl opt">)</span>
  var count<span class="hl opt">:</span> <span class="hl kwd">Nat</span> <span class="hl opt">=</span> <span class="hl num">0</span>
  var i<span class="hl opt">:</span> natLte <span class="hl num">16</span> <span class="hl slc">// uninitialized</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> <span class="hl kwa">for</span><span class="hl opt">* (</span>cs<span class="hl opt">:</span> cpu_set_t nset<span class="hl opt">) =&gt;</span>
    <span class="hl opt">(</span>i <span class="hl opt">:=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> <span class="hl num">16</span><span class="hl opt">;</span> i <span class="hl opt">:=</span> i <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">)</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">CPU_ISSET</span> <span class="hl opt">(</span>i<span class="hl opt">,</span> cs<span class="hl opt">) &gt;</span> <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">then</span> count <span class="hl opt">:=</span> count <span class="hl opt">+</span> <span class="hl num">1</span>
  <span class="hl slc">// end of [val]</span>
<span class="hl kwa">in</span>
  count
<span class="hl kwa">end</span> <span class="hl slc">// end of [ncore_get]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl ppc">#define QSZ 1024</span>

<span class="hl kwa">implement</span> main <span class="hl opt">(</span>argc<span class="hl opt">,</span> argv<span class="hl opt">) =</span> <span class="hl kwa">let</span>
<span class="hl slc">//</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> gc_chunk_count_limit_set <span class="hl opt">(</span><span class="hl num">1</span> <span class="hl opt">&lt;&lt;</span> <span class="hl num">15</span><span class="hl opt">)</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> gc_chunk_count_limit_max_set <span class="hl opt">(</span>~<span class="hl num">1</span><span class="hl opt">)</span> <span class="hl slc">// no max</span>
<span class="hl slc">//</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> assert_errmsg
    <span class="hl opt">(</span>argc <span class="hl opt">&gt;=</span> <span class="hl num">2</span><span class="hl opt">,</span> <span class="hl str">&quot;Exit: wrong command format!</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">)</span>
  <span class="hl kwa">val</span> n <span class="hl opt">=</span> int1_of argv<span class="hl opt">.[</span><span class="hl num">1</span><span class="hl opt">]</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> assert_errmsg
    <span class="hl opt">(</span>n <span class="hl opt">&gt;=</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl str">&quot;The input integer needs to be a natural number.</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">)</span>
<span class="hl slc">//</span>
  <span class="hl kwa">val</span> <span class="hl kwd">NWORKER</span> <span class="hl opt">=</span> ncore_get <span class="hl opt">()</span>
  <span class="hl kwa">val</span> nworker <span class="hl opt">=</span>
    <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(</span>argc <span class="hl opt">&gt;=</span> <span class="hl num">3</span><span class="hl opt">)</span> <span class="hl kwa">then</span> int_of argv<span class="hl opt">.[</span><span class="hl num">2</span><span class="hl opt">]</span> <span class="hl kwa">else</span> <span class="hl kwd">NWORKER</span><span class="hl opt">):</span> <span class="hl kwb">int</span>
  <span class="hl kwa">val</span> nworker <span class="hl opt">=</span> int1_of_int<span class="hl opt">(</span>nworker<span class="hl opt">)</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> assert_errmsg <span class="hl opt">(</span>nworker <span class="hl opt">&gt;=</span> <span class="hl num">1</span><span class="hl opt">,</span> <span class="hl ppc">#LOCATION)</span>
  <span class="hl kwa">val</span> ws <span class="hl opt">=</span> workshop_make<span class="hl opt">&lt;</span>work<span class="hl opt">&gt; (</span><span class="hl kwd">QSZ</span><span class="hl opt">,</span> fwork<span class="hl opt">)</span>
  <span class="hl kwa">val</span> _err <span class="hl opt">=</span> workshop_add_nworker <span class="hl opt">(</span>ws<span class="hl opt">,</span> nworker<span class="hl opt">)</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> assert_errmsg <span class="hl opt">(</span>_err <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl ppc">#LOCATION)</span>
<span class="hl slc">//</span>
  <span class="hl kwa">val</span> max_depth <span class="hl opt">=</span> max <span class="hl opt">(</span><span class="hl kwd">MIN_DEPTH</span> <span class="hl opt">+</span> <span class="hl num">2</span><span class="hl opt">,</span> n<span class="hl opt">)</span>
  var res<span class="hl opt">:</span> <span class="hl kwd">CONT</span> <span class="hl slc">// uninitialized</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> loop_depths <span class="hl opt">(</span>ws<span class="hl opt">,</span> <span class="hl kwd">MIN_DEPTH</span><span class="hl opt">,</span> max_depth<span class="hl opt">,</span> res<span class="hl opt">)</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> stretch <span class="hl opt">(</span>max_depth<span class="hl opt">)</span>
  <span class="hl kwa">val</span> long_lived_tree <span class="hl opt">=</span> long_lived_tree_make <span class="hl opt">(</span>max_depth<span class="hl opt">)</span>
<span class="hl slc">//</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> workshop_wait_blocked_all <span class="hl opt">(</span>ws<span class="hl opt">)</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> finishup <span class="hl opt">(</span>res<span class="hl opt">)</span>
<span class="hl slc">//</span>
  var i<span class="hl opt">:</span> <span class="hl kwd">Nat</span> <span class="hl opt">=</span> <span class="hl num">0</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> <span class="hl kwa">while</span> <span class="hl opt">(</span>i <span class="hl opt">&lt;</span> nworker<span class="hl opt">)</span> <span class="hl kwa">let</span>
    <span class="hl kwa">val</span> _quit <span class="hl opt">=</span> $extval <span class="hl opt">(</span>work<span class="hl opt">,</span> <span class="hl str">&quot;(void*)0&quot;</span><span class="hl opt">)</span>
    <span class="hl kwa">val</span> <span class="hl opt">() =</span> workshop_insert_work <span class="hl opt">(</span>ws<span class="hl opt">,</span> _quit<span class="hl opt">)</span> <span class="hl kwa">in</span> i <span class="hl opt">:=</span> i <span class="hl opt">+</span> <span class="hl num">1</span>
  <span class="hl kwa">end</span> <span class="hl slc">// end of [val]</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> workshop_wait_quit_all <span class="hl opt">(</span>ws<span class="hl opt">)</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> workshop_free_vt_exn <span class="hl opt">(</span>ws<span class="hl opt">)</span>
<span class="hl kwa">in</span>
  printf <span class="hl opt">(</span><span class="hl str">&quot;long lived tree of depth %i</span><span class="hl esc">\t</span> <span class="hl str">check: %i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> &#64;<span class="hl opt">(</span>max_depth<span class="hl opt">,</span> check_ref long_lived_tree<span class="hl opt">))</span>
<span class="hl kwa">end</span> <span class="hl slc">// end of [main]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl com">(* end of [binary-tree3.dats] *)</span>
