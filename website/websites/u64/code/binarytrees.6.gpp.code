<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * contributed by Jon Harrop</span>
<span class="hl com"> * modified by Alex Mizrahi</span>
<span class="hl com"> * modified by Andreas Sch√§fer</span>
<span class="hl com"> * very minor omp tweak by The Anh Tran</span>
<span class="hl com"> */</span>

<span class="hl ppc">#include &lt;iostream&gt;</span>
<span class="hl ppc">#include &lt;stdlib.h&gt;</span>
<span class="hl ppc">#include &lt;stdio.h&gt;</span>
<span class="hl ppc">#include &lt;omp.h&gt;</span>

<span class="hl ppc">#include &lt;boost/pool/object_pool.hpp&gt;</span>


<span class="hl kwb">const size_t</span>	LINE_SIZE <span class="hl opt">=</span> <span class="hl num">64</span><span class="hl opt">;</span>


<span class="hl kwb">struct</span> Node 
<span class="hl opt">{</span>
    Node <span class="hl opt">*</span>l<span class="hl opt">, *</span>r<span class="hl opt">;</span>
    <span class="hl kwb">int</span> i<span class="hl opt">;</span>
    
    <span class="hl kwd">Node</span><span class="hl opt">(</span><span class="hl kwb">int</span> i2<span class="hl opt">) :</span> <span class="hl kwd">l</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">),</span> <span class="hl kwd">r</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">),</span> <span class="hl kwd">i</span><span class="hl opt">(</span>i2<span class="hl opt">)</span> 
    <span class="hl opt">{}</span>
    <span class="hl kwd">Node</span><span class="hl opt">(</span>Node <span class="hl opt">*</span>l2<span class="hl opt">,</span> <span class="hl kwb">int</span> i2<span class="hl opt">,</span> Node <span class="hl opt">*</span>r2<span class="hl opt">) :</span> <span class="hl kwd">l</span><span class="hl opt">(</span>l2<span class="hl opt">),</span> <span class="hl kwd">r</span><span class="hl opt">(</span>r2<span class="hl opt">),</span> <span class="hl kwd">i</span><span class="hl opt">(</span>i2<span class="hl opt">)</span> 
    <span class="hl opt">{}</span>

    <span class="hl kwb">int</span> <span class="hl kwd">check</span><span class="hl opt">()</span> <span class="hl kwb">const</span> 
    <span class="hl opt">{</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>l<span class="hl opt">)</span>
            <span class="hl kwa">return</span> l<span class="hl opt">-&gt;</span><span class="hl kwd">check</span><span class="hl opt">() +</span> i <span class="hl opt">-</span> r<span class="hl opt">-&gt;</span><span class="hl kwd">check</span><span class="hl opt">();</span>
        <span class="hl kwa">else return</span> i<span class="hl opt">;</span>
    <span class="hl opt">}</span>
<span class="hl opt">};</span>

<span class="hl kwc">typedef</span> boost<span class="hl opt">::</span>object_pool<span class="hl opt">&lt;</span>Node<span class="hl opt">&gt;</span> NodePool<span class="hl opt">;</span>


Node <span class="hl opt">*</span><span class="hl kwd">make</span><span class="hl opt">(</span><span class="hl kwb">int</span> i<span class="hl opt">,</span> <span class="hl kwb">int</span> d<span class="hl opt">,</span> NodePool <span class="hl opt">&amp;</span>store<span class="hl opt">)</span> 
<span class="hl opt">{</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>d <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">)</span> 
	    <span class="hl kwa">return</span> store<span class="hl opt">.</span><span class="hl kwd">construct</span><span class="hl opt">(</span>	<span class="hl kwd">make</span><span class="hl opt">(</span><span class="hl num">2</span><span class="hl opt">*</span>i<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">,</span> d<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">,</span> store<span class="hl opt">),</span> 
	    						i<span class="hl opt">,</span> 
	    						<span class="hl kwd">make</span><span class="hl opt">(</span><span class="hl num">2</span><span class="hl opt">*</span>i<span class="hl opt">,</span> d<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">,</span> store<span class="hl opt">)	);</span>
   	<span class="hl kwa">return</span> store<span class="hl opt">.</span><span class="hl kwd">construct</span><span class="hl opt">(</span>i<span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">GetThreadCount</span><span class="hl opt">()</span>
<span class="hl opt">{</span>
	cpu_set_t cs<span class="hl opt">;</span>
	<span class="hl kwd">CPU_ZERO</span><span class="hl opt">(&amp;</span>cs<span class="hl opt">);</span>
	<span class="hl kwd">sched_getaffinity</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl kwa">sizeof</span><span class="hl opt">(</span>cs<span class="hl opt">), &amp;</span>cs<span class="hl opt">);</span>

	<span class="hl kwb">int</span> count <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
	<span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> <span class="hl num">8</span><span class="hl opt">;</span> i<span class="hl opt">++)</span>
	<span class="hl opt">{</span>
		<span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">CPU_ISSET</span><span class="hl opt">(</span>i<span class="hl opt">, &amp;</span>cs<span class="hl opt">))</span>
			count<span class="hl opt">++;</span>
	<span class="hl opt">}</span>
	<span class="hl kwa">return</span> count<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span> <span class="hl opt">*</span>argv<span class="hl opt">[])</span> 
<span class="hl opt">{</span>
    <span class="hl kwb">int</span> min_depth <span class="hl opt">=</span> <span class="hl num">4</span><span class="hl opt">;</span>
    <span class="hl kwb">int</span> max_depth <span class="hl opt">=</span> std<span class="hl opt">::</span><span class="hl kwd">max</span><span class="hl opt">(</span>min_depth<span class="hl opt">+</span><span class="hl num">2</span><span class="hl opt">,</span>
                             <span class="hl opt">(</span>argc <span class="hl opt">==</span> <span class="hl num">2</span> ? <span class="hl kwd">atoi</span><span class="hl opt">(</span>argv<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">]) :</span> <span class="hl num">10</span><span class="hl opt">));</span>
    <span class="hl kwb">int</span> stretch_depth <span class="hl opt">=</span> max_depth<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">;</span>

	<span class="hl slc">// Alloc then dealloc stretchdepth tree</span>
    <span class="hl opt">{</span>
        NodePool store<span class="hl opt">;</span>
        Node <span class="hl opt">*</span>c <span class="hl opt">=</span> <span class="hl kwd">make</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> stretch_depth<span class="hl opt">,</span> store<span class="hl opt">);</span>
        std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;stretch tree of depth &quot;</span> <span class="hl opt">&lt;&lt;</span> stretch_depth <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span> <span class="hl str">&quot;</span>
                  <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;check: &quot;</span> <span class="hl opt">&lt;&lt;</span> c<span class="hl opt">-&gt;</span><span class="hl kwd">check</span><span class="hl opt">() &lt;&lt;</span> std<span class="hl opt">::</span>endl<span class="hl opt">;</span>
    <span class="hl opt">}</span>

    NodePool long_lived_store<span class="hl opt">;</span>
    Node <span class="hl opt">*</span>long_lived_tree <span class="hl opt">=</span> <span class="hl kwd">make</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> max_depth<span class="hl opt">,</span> long_lived_store<span class="hl opt">);</span>

	<span class="hl slc">// buffer to store output of each thread</span>
	<span class="hl kwb">char</span> <span class="hl opt">*</span>outputstr <span class="hl opt">= (</span><span class="hl kwb">char</span><span class="hl opt">*)</span><span class="hl kwd">malloc</span><span class="hl opt">(</span>LINE_SIZE <span class="hl opt">* (</span>max_depth <span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">) *</span> <span class="hl kwa">sizeof</span><span class="hl opt">(</span><span class="hl kwb">char</span><span class="hl opt">));</span>

	<span class="hl ppc">#pragma omp parallel for default(shared) num_threads(GetThreadCount()) schedule(dynamic, 1)</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> d <span class="hl opt">=</span> min_depth<span class="hl opt">;</span> d <span class="hl opt">&lt;=</span> max_depth<span class="hl opt">;</span> d <span class="hl opt">+=</span> <span class="hl num">2</span><span class="hl opt">)</span> 
    <span class="hl opt">{</span>
        <span class="hl kwb">int</span> iterations <span class="hl opt">=</span> <span class="hl num">1</span> <span class="hl opt">&lt;&lt; (</span>max_depth <span class="hl opt">-</span> d <span class="hl opt">+</span> min_depth<span class="hl opt">);</span>
        <span class="hl kwb">int</span> c <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>

        <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span> i <span class="hl opt">&lt;=</span> iterations<span class="hl opt">; ++</span>i<span class="hl opt">)</span> 
        <span class="hl opt">{</span>
            NodePool store<span class="hl opt">;</span>
            Node <span class="hl opt">*</span>a <span class="hl opt">=</span> <span class="hl kwd">make</span><span class="hl opt">(</span>i<span class="hl opt">,</span> d<span class="hl opt">,</span> store<span class="hl opt">), *</span>b <span class="hl opt">=</span> <span class="hl kwd">make</span><span class="hl opt">(-</span>i<span class="hl opt">,</span> d<span class="hl opt">,</span> store<span class="hl opt">);</span>
            c <span class="hl opt">+=</span> a<span class="hl opt">-&gt;</span><span class="hl kwd">check</span><span class="hl opt">() +</span> b<span class="hl opt">-&gt;</span><span class="hl kwd">check</span><span class="hl opt">();</span>
        <span class="hl opt">}</span>

		<span class="hl slc">// each thread write to separate location</span>
		<span class="hl kwd">sprintf</span><span class="hl opt">(</span>outputstr <span class="hl opt">+</span> LINE_SIZE <span class="hl opt">*</span> d<span class="hl opt">,</span> <span class="hl str">&quot;%d</span><span class="hl esc">\t</span> <span class="hl str">trees of depth %d</span><span class="hl esc">\t</span> <span class="hl str">check: %d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">, (</span><span class="hl num">2</span> <span class="hl opt">*</span> iterations<span class="hl opt">),</span> d<span class="hl opt">,</span> c<span class="hl opt">);</span>
	<span class="hl opt">}</span>

	<span class="hl slc">// print all results</span>
	<span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> d <span class="hl opt">=</span> min_depth<span class="hl opt">;</span> d <span class="hl opt">&lt;=</span> max_depth<span class="hl opt">;</span> d <span class="hl opt">+=</span> <span class="hl num">2</span><span class="hl opt">)</span> 
		<span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;%s&quot;</span><span class="hl opt">,</span> outputstr <span class="hl opt">+ (</span>d <span class="hl opt">*</span> LINE_SIZE<span class="hl opt">) );</span>
	<span class="hl kwd">free</span><span class="hl opt">(</span>outputstr<span class="hl opt">);</span>

    std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;long lived tree of depth &quot;</span> <span class="hl opt">&lt;&lt;</span> max_depth <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span> <span class="hl str">&quot;</span>
              <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;check: &quot;</span> <span class="hl opt">&lt;&lt; (</span>long_lived_tree<span class="hl opt">-&gt;</span><span class="hl kwd">check</span><span class="hl opt">()) &lt;&lt;</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">;</span>

    <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>

