<span class="hl slc">-- The Computer Language Benchmarks Game</span>
<span class="hl slc">-- http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">--</span>
<span class="hl slc">--  Contributed by Brad Moore (13 Aug 2012)</span>
<span class="hl slc">--</span>
<span class="hl slc">-- Creates 503 lightweight &quot;virtual&quot; threads, and 503 OS threads which</span>
<span class="hl slc">-- map to Ada tasks. The Ada tasks are managed by a task pool object.</span>
<span class="hl slc">-- The task pool implements a work-sharing strategy whereby the current</span>
<span class="hl slc">-- OS worker thread will try to assign a new work item to itself if no other</span>
<span class="hl slc">-- work has yet been assigned to the worker, otherwise offers the new work</span>
<span class="hl slc">-- item to another OS thread.</span>


<span class="hl kwa">pragma</span> Suppress <span class="hl opt">(</span>All_Checks<span class="hl opt">);</span>

<span class="hl kwa">with</span> Ada<span class="hl opt">.</span>Command_Line<span class="hl opt">;</span> <span class="hl kwa">use</span> Ada<span class="hl opt">;</span>
<span class="hl kwa">with</span> Ada<span class="hl opt">.</span>Integer_Text_IO<span class="hl opt">;</span> <span class="hl kwa">use</span> Ada<span class="hl opt">.</span>Integer_Text_IO<span class="hl opt">;</span>
<span class="hl kwa">with</span> Task_Pools<span class="hl opt">;</span>

<span class="hl kwa">with</span> Ada<span class="hl opt">.</span>Text_IO<span class="hl opt">;</span> <span class="hl kwa">use</span> Ada<span class="hl opt">.</span>Text_IO<span class="hl opt">;</span>
<span class="hl kwa">procedure</span> ThreadRing <span class="hl kwa">is</span>

   Worker_Count <span class="hl opt">:</span> <span class="hl kwa">constant</span> <span class="hl opt">:=</span> <span class="hl num">503</span><span class="hl opt">;</span>
   Token_Count <span class="hl opt">:</span> <span class="hl kwb">Natural</span> <span class="hl opt">:=</span> <span class="hl num">1000</span><span class="hl opt">;</span>  <span class="hl slc">-- Default value</span>

   <span class="hl slc">--  Note: Worker_Id wraps around, i.e. 502 links to 0</span>
   <span class="hl kwa">type</span> Worker_Id <span class="hl kwa">is mod</span> Worker_Count<span class="hl opt">;</span>

   <span class="hl slc">-- The following type is used for checking completion of the test.</span>
   <span class="hl kwa">protected</span> Thread_Ring_Benchmark <span class="hl kwa">is</span>
      <span class="hl kwa">procedure</span> All_Done<span class="hl opt">;</span>
      <span class="hl kwa">entry</span> Wait_For_Completion<span class="hl opt">;</span>
   <span class="hl kwa">private</span>
      Done <span class="hl opt">:</span> <span class="hl kwb">Boolean</span> <span class="hl opt">:=</span> <span class="hl kwd">False</span><span class="hl opt">;</span>
   <span class="hl kwa">end</span> Thread_Ring_Benchmark<span class="hl opt">;</span>

   <span class="hl kwa">protected body</span> Thread_Ring_Benchmark <span class="hl kwa">is</span>

      <span class="hl kwa">procedure</span> All_Done <span class="hl kwa">is</span>
      <span class="hl kwa">begin</span>
         Done <span class="hl opt">:=</span> <span class="hl kwd">True</span><span class="hl opt">;</span>
      <span class="hl kwa">end</span> All_Done<span class="hl opt">;</span>

      <span class="hl kwa">entry</span> Wait_For_Completion <span class="hl kwa">when</span> Done <span class="hl kwa">is</span>
      <span class="hl kwa">begin</span>
         <span class="hl kwa">null</span><span class="hl opt">;</span>
      <span class="hl kwa">end</span> Wait_For_Completion<span class="hl opt">;</span>
   <span class="hl kwa">end</span> Thread_Ring_Benchmark<span class="hl opt">;</span>

   <span class="hl slc">--  Client specified virtual thread state information.</span>
   <span class="hl slc">--  Note this code is actually passing the token between the virtual</span>
   <span class="hl slc">--  threads, as opposed to each thread inspecting and modifying a global</span>
   <span class="hl slc">--  variable.</span>
   <span class="hl kwa">type</span> Thread_State <span class="hl kwa">is new</span> Task_Pools<span class="hl opt">.</span>Work_Item <span class="hl kwa">with</span>
      <span class="hl kwa">record</span>
         Current_Worker <span class="hl opt">:</span> Worker_Id<span class="hl opt">;</span>
         Token <span class="hl opt">:</span> <span class="hl kwb">Natural</span><span class="hl opt">;</span>
      <span class="hl kwa">end record</span><span class="hl opt">;</span>

   overriding
   <span class="hl kwa">procedure</span> Process <span class="hl opt">(</span>Work <span class="hl opt">:</span> <span class="hl kwa">in out</span> Thread_State<span class="hl opt">;</span>
                      Context <span class="hl opt">:</span> Task_Pools<span class="hl opt">.</span>Context_Handle<span class="hl opt">);</span>

   <span class="hl slc">-- The actual worker tasks (OS threads) to do the work</span>
   Threads <span class="hl opt">:</span> Task_Pools<span class="hl opt">.</span>Task_Pool <span class="hl opt">(</span>Number_Of_Tasks <span class="hl opt">=&gt;</span> Worker_Count<span class="hl opt">);</span>

   Next_Worker <span class="hl opt">:</span> Worker_Id <span class="hl opt">:=</span> Worker_Id<span class="hl kwd">'First</span><span class="hl opt">;</span>

   <span class="hl kwa">function</span> Create_Thread <span class="hl kwa">return</span> Thread_State <span class="hl kwa">is</span>
      Current_Worker <span class="hl opt">:</span> <span class="hl kwa">constant</span> Worker_Id <span class="hl opt">:=</span> Next_Worker<span class="hl opt">;</span>
   <span class="hl kwa">begin</span>
      Next_Worker <span class="hl opt">:=</span> Next_Worker <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span>
      <span class="hl kwa">return</span> <span class="hl opt">(</span>Current_Worker <span class="hl opt">=&gt;</span> Current_Worker<span class="hl opt">,</span>
              Token <span class="hl opt">=&gt; &lt;&gt;);</span>
   <span class="hl kwa">end</span> Create_Thread<span class="hl opt">;</span>

   <span class="hl slc">--  An array of virtual threads (or strands) linked in a circular chain</span>
   Fibers <span class="hl opt">:</span> <span class="hl kwa">array</span> <span class="hl opt">(</span>Worker_Id<span class="hl opt">)</span> <span class="hl kwa">of aliased</span> Thread_State
     <span class="hl opt">:= (</span><span class="hl kwa">others</span> <span class="hl opt">=&gt;</span> Create_Thread<span class="hl opt">);</span>

   overriding
   <span class="hl kwa">procedure</span> Process <span class="hl opt">(</span>Work <span class="hl opt">:</span> <span class="hl kwa">in out</span> Thread_State<span class="hl opt">;</span>
                      Context <span class="hl opt">:</span> Task_Pools<span class="hl opt">.</span>Context_Handle<span class="hl opt">)</span> <span class="hl kwa">is</span>
   <span class="hl kwa">begin</span>

      <span class="hl kwa">if</span> Work<span class="hl opt">.</span>Token <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
         Put <span class="hl opt">(</span>Item <span class="hl opt">=&gt;</span> <span class="hl kwb">Natural</span> <span class="hl opt">(</span>Work<span class="hl opt">.</span>Current_Worker<span class="hl opt">) +</span> <span class="hl num">1</span><span class="hl opt">,</span> Width <span class="hl opt">=&gt;</span> <span class="hl num">1</span><span class="hl opt">);</span>
         Thread_Ring_Benchmark<span class="hl opt">.</span>All_Done<span class="hl opt">;</span>
      <span class="hl kwa">else</span>

         <span class="hl slc">-- Pass the token</span>
         Fibers <span class="hl opt">(</span>Work<span class="hl opt">.</span>Current_Worker <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">).</span>Token <span class="hl opt">:=</span> Work<span class="hl opt">.</span>Token <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">;</span>

         <span class="hl slc">--  Note: Current_Worker wraps around from 502 to 0</span>
         Threads<span class="hl opt">.</span>Submit
           <span class="hl opt">(</span>Current_Context <span class="hl opt">=&gt;</span> Context<span class="hl opt">,</span>
            Next_Context <span class="hl opt">=&gt;</span> Fibers <span class="hl opt">(</span>Work<span class="hl opt">.</span>Current_Worker <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">)</span><span class="hl kwd">'Unchecked_Access</span><span class="hl opt">);</span>
      <span class="hl kwa">end if</span><span class="hl opt">;</span>

   <span class="hl kwa">end</span> Process<span class="hl opt">;</span>

<span class="hl kwa">begin</span> <span class="hl slc">-- ThreadRing</span>

   <span class="hl kwa">if</span> Command_Line<span class="hl opt">.</span>Argument_Count <span class="hl opt">&gt;=</span> <span class="hl num">1</span> <span class="hl kwa">then</span>
      Token_Count <span class="hl opt">:=</span> <span class="hl kwb">Natural</span><span class="hl kwd">'Value</span> <span class="hl opt">(</span>Command_Line<span class="hl opt">.</span>Argument <span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">));</span>
   <span class="hl kwa">end if</span><span class="hl opt">;</span>

   Fibers <span class="hl opt">(</span>Fibers<span class="hl kwd">'First</span><span class="hl opt">).</span>Token <span class="hl opt">:=</span> Token_Count<span class="hl opt">;</span>

   Threads<span class="hl opt">.</span>Submit <span class="hl opt">(</span>Next_Context <span class="hl opt">=&gt;</span> Fibers <span class="hl opt">(</span>Fibers<span class="hl kwd">'First</span><span class="hl opt">)</span><span class="hl kwd">'Unchecked_Access</span><span class="hl opt">);</span>

   Thread_Ring_Benchmark<span class="hl opt">.</span>Wait_For_Completion<span class="hl opt">;</span>
   Threads<span class="hl opt">.</span>Destruct<span class="hl opt">;</span>

<span class="hl kwa">end</span> ThreadRing<span class="hl opt">;</span>
<span class="hl kwa">package</span> Task_Pools <span class="hl kwa">is</span>

   <span class="hl kwa">type</span> Work_Item <span class="hl kwa">is abstract tagged</span><span class="hl opt">;</span>
   <span class="hl kwa">type</span> Work_Handle <span class="hl kwa">is access all</span> Work_Item<span class="hl kwd">'Class</span><span class="hl opt">;</span>

   <span class="hl kwa">type</span> Work_Item <span class="hl kwa">is abstract tagged null record</span><span class="hl opt">;</span>

   <span class="hl kwa">type</span> Context_Handle <span class="hl kwa">is access all</span> Work_Handle<span class="hl opt">;</span>

   <span class="hl kwa">procedure</span> Process
     <span class="hl opt">(</span>Work <span class="hl opt">:</span> <span class="hl kwa">in out</span> Work_Item<span class="hl opt">;</span>
      Context <span class="hl opt">:</span> Context_Handle<span class="hl opt">)</span> <span class="hl kwa">is abstract</span><span class="hl opt">;</span>
   <span class="hl slc">--  A thread context that can include client specified state information</span>

   <span class="hl kwa">type</span> Task_Pool <span class="hl opt">(</span>Number_Of_Tasks <span class="hl opt">:</span> <span class="hl kwb">Positive</span><span class="hl opt">)</span> <span class="hl kwa">is</span>
     <span class="hl kwa">tagged limited private</span><span class="hl opt">;</span>
   <span class="hl slc">--  task pool object type that has a pool of real Ada tasks to</span>
   <span class="hl slc">--  process virtual thread fibers that are submitted to the pool for</span>
   <span class="hl slc">--  processing. Each Ada task in the task pool corresponds to an OS threads</span>
   <span class="hl slc">--  in GNAT</span>

   <span class="hl kwa">procedure</span> Submit
     <span class="hl opt">(</span>Pool <span class="hl opt">:</span> <span class="hl kwa">in out</span> Task_Pool<span class="hl opt">;</span>
      Next_Context <span class="hl opt">:</span> Work_Handle<span class="hl opt">;</span>
      Current_Context <span class="hl opt">:</span> Context_Handle <span class="hl opt">:=</span> <span class="hl kwa">null</span><span class="hl opt">);</span>
   <span class="hl slc">--  Submit a work item (virtual thread) to the task pool for processing.</span>
   <span class="hl slc">--  Context should be null unless Submit was invoked from a Work_Item.</span>
   <span class="hl slc">--  (i.e. Called from a task in the task pool)</span>
   <span class="hl slc">--  Otherwise, it may be specified as null to signify that the virtual</span>
   <span class="hl slc">--  thread is to be assigned to a new task in the task pool, or if not</span>
   <span class="hl slc">--  null should be the current context as passed in to the virtual thread.</span>
   <span class="hl slc">--  In this case, the new virtual thread will be processed by the same</span>
   <span class="hl slc">--  Ada task from the task pool that invoked the current virtual thread.</span>

   <span class="hl kwa">procedure</span> Destruct <span class="hl opt">(</span>Pool <span class="hl opt">:</span> <span class="hl kwa">in out</span> Task_Pool<span class="hl opt">);</span>
   <span class="hl slc">--  Terminates all tasks in the task pool object. No further Submit calls</span>
   <span class="hl slc">--  can be issued against the specified task pool object.</span>

<span class="hl kwa">private</span>

   <span class="hl kwa">subtype</span> Worker_Id <span class="hl kwa">is</span> <span class="hl kwb">Natural</span><span class="hl opt">;</span>

   <span class="hl kwa">task type</span> Worker <span class="hl opt">(</span>Pool <span class="hl opt">:</span> <span class="hl kwa">access</span> Task_Pool <span class="hl opt">:=</span> <span class="hl kwa">null</span><span class="hl opt">)</span> <span class="hl kwa">is</span>
   <span class="hl kwa">end</span> Worker<span class="hl opt">;</span>

   <span class="hl kwa">function</span> Create_Worker <span class="hl opt">(</span>Pool <span class="hl opt">:</span> <span class="hl kwa">access</span> Task_Pool<span class="hl opt">)</span> <span class="hl kwa">return</span> Worker<span class="hl opt">;</span>
   <span class="hl slc">--  Creates a task in the task pool</span>

   <span class="hl kwa">type</span> Worker_Array <span class="hl kwa">is array</span> <span class="hl opt">(</span>Worker_Id <span class="hl kwa">range</span> <span class="hl opt">&lt;&gt;)</span> <span class="hl kwa">of</span> Worker<span class="hl opt">;</span>
   <span class="hl slc">--  The Ada tasks in the task pool</span>

   <span class="hl slc">--  A manager to hand off work requests from the client to the task pool</span>
   <span class="hl kwa">protected type</span> Work_Manager <span class="hl kwa">is</span>

      <span class="hl kwa">entry</span> Wait_For_Work <span class="hl opt">(</span>Work <span class="hl opt">:</span> <span class="hl kwa">out</span> Work_Handle<span class="hl opt">);</span>
      <span class="hl kwa">entry</span> Offer_Work <span class="hl opt">(</span>Work <span class="hl opt">:</span> Work_Handle<span class="hl opt">);</span>
      <span class="hl kwa">procedure</span> Shutdown<span class="hl opt">;</span>
      <span class="hl kwa">entry</span> Wait_For_Termination<span class="hl opt">;</span>

   <span class="hl kwa">private</span>
      Offered_Item <span class="hl opt">:</span> Work_Handle <span class="hl opt">:=</span> <span class="hl kwa">null</span><span class="hl opt">;</span>
      Shutting_Down <span class="hl opt">:</span> <span class="hl kwb">Boolean</span> <span class="hl opt">:=</span> <span class="hl kwd">False</span><span class="hl opt">;</span>
   <span class="hl kwa">end</span> Work_Manager<span class="hl opt">;</span>

   <span class="hl kwa">type</span> Task_Pool <span class="hl opt">(</span>Number_Of_Tasks <span class="hl opt">:</span> <span class="hl kwb">Positive</span><span class="hl opt">)</span> <span class="hl kwa">is tagged limited</span>
      <span class="hl kwa">record</span>
         Manager <span class="hl opt">:</span> Work_Manager<span class="hl opt">;</span>
         Workers <span class="hl opt">:</span> Worker_Array <span class="hl opt">(</span><span class="hl num">1</span> <span class="hl opt">..</span> Number_Of_Tasks<span class="hl opt">)</span>
           <span class="hl opt">:= (</span><span class="hl kwa">others</span> <span class="hl opt">=&gt;</span> Create_Worker <span class="hl opt">(</span>Task_Pool<span class="hl kwd">'Access</span><span class="hl opt">));</span>
      <span class="hl kwa">end record</span><span class="hl opt">;</span>
<span class="hl kwa">end</span> Task_Pools<span class="hl opt">;</span>
<span class="hl kwa">package body</span> Task_Pools <span class="hl kwa">is</span>

   <span class="hl kwa">protected body</span> Work_Manager <span class="hl kwa">is</span>
      <span class="hl kwa">entry</span> Offer_Work <span class="hl opt">(</span>Work <span class="hl opt">:</span> Work_Handle<span class="hl opt">)</span>
        <span class="hl kwa">when</span> Offered_Item <span class="hl opt">=</span> <span class="hl kwa">null is</span>
      <span class="hl kwa">begin</span>
         Offered_Item <span class="hl opt">:=</span> Work<span class="hl opt">;</span>
      <span class="hl kwa">end</span> Offer_Work<span class="hl opt">;</span>

      <span class="hl kwa">procedure</span> Shutdown <span class="hl kwa">is</span>
      <span class="hl kwa">begin</span>
         Shutting_Down <span class="hl opt">:=</span> <span class="hl kwd">True</span><span class="hl opt">;</span>
         Offered_Item <span class="hl opt">:=</span> <span class="hl kwa">null</span><span class="hl opt">;</span>
      <span class="hl kwa">end</span> Shutdown<span class="hl opt">;</span>

      <span class="hl kwa">entry</span> Wait_For_Work <span class="hl opt">(</span>Work <span class="hl opt">:</span> <span class="hl kwa">out</span> Work_Handle<span class="hl opt">)</span>
        <span class="hl kwa">when</span> Shutting_Down <span class="hl kwa">or else</span> Offered_Item <span class="hl opt">/=</span> <span class="hl kwa">null is</span>
      <span class="hl kwa">begin</span>
         Work <span class="hl opt">:=</span> Offered_Item<span class="hl opt">;</span>
         Offered_Item <span class="hl opt">:=</span> <span class="hl kwa">null</span><span class="hl opt">;</span>
      <span class="hl kwa">end</span> Wait_For_Work<span class="hl opt">;</span>

      <span class="hl kwa">entry</span> Wait_For_Termination <span class="hl kwa">when</span> Wait_For_Work<span class="hl kwd">'Count</span> <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl kwa">is</span>
      <span class="hl kwa">begin</span>
         <span class="hl kwa">null</span><span class="hl opt">;</span>
      <span class="hl kwa">end</span> Wait_For_Termination<span class="hl opt">;</span>

   <span class="hl kwa">end</span> Work_Manager<span class="hl opt">;</span>

   <span class="hl kwa">task body</span> Worker <span class="hl kwa">is</span>
      Current_Item <span class="hl opt">:</span> Work_Handle <span class="hl opt">:=</span> <span class="hl kwa">null</span><span class="hl opt">;</span>
      Work_Plan <span class="hl opt">:</span> <span class="hl kwa">aliased</span> Work_Handle <span class="hl opt">:=</span> <span class="hl kwa">null</span><span class="hl opt">;</span>
   <span class="hl kwa">begin</span>

      Pool<span class="hl opt">.</span>Manager<span class="hl opt">.</span>Wait_For_Work <span class="hl opt">(</span>Work_Plan<span class="hl opt">);</span>

      <span class="hl kwa">while</span> Work_Plan <span class="hl opt">/=</span> <span class="hl kwa">null loop</span>

         Current_Item <span class="hl opt">:=</span> Work_Plan<span class="hl opt">;</span>
         <span class="hl slc">--  Save the virtual thread to be invoked</span>

         Work_Plan <span class="hl opt">:=</span> <span class="hl kwa">null</span><span class="hl opt">;</span>
         <span class="hl slc">--  Clear the virtual thread so we can tell if further</span>
         <span class="hl slc">--  work was been assigned to the same task</span>

         Current_Item<span class="hl opt">.</span><span class="hl kwa">all</span><span class="hl opt">.</span>Process <span class="hl opt">(</span>Work_Plan<span class="hl kwd">'Unchecked_Access</span><span class="hl opt">);</span>
         <span class="hl slc">--  Invoke the virtual thread, passing it the context and</span>
         <span class="hl slc">--  client specified state</span>

         <span class="hl kwa">if</span> Work_Plan <span class="hl opt">=</span> <span class="hl kwa">null then</span>
            <span class="hl slc">-- If the Work_Plan does not have any work, we have to wait</span>
            <span class="hl slc">-- for another task to offer some work, otherwise, we can</span>
            <span class="hl slc">-- skip this and proceed directly to process the virtual thread</span>
            <span class="hl slc">-- that was submitted by the previous invocation of the client</span>
            <span class="hl slc">-- virtual thread.</span>
            Pool<span class="hl opt">.</span>Manager<span class="hl opt">.</span>Wait_For_Work <span class="hl opt">(</span>Work_Plan<span class="hl opt">);</span>
         <span class="hl kwa">end if</span><span class="hl opt">;</span>
      <span class="hl kwa">end loop</span><span class="hl opt">;</span>
   <span class="hl kwa">end</span> Worker<span class="hl opt">;</span>

   <span class="hl kwa">function</span> Create_Worker <span class="hl opt">(</span>Pool <span class="hl opt">:</span> <span class="hl kwa">access</span> Task_Pool<span class="hl opt">)</span> <span class="hl kwa">return</span> Worker <span class="hl kwa">is</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">return</span> New_Worker <span class="hl opt">:</span> Worker <span class="hl opt">(</span>Pool<span class="hl opt">)</span>
      <span class="hl kwa">do</span>
         <span class="hl kwa">null</span><span class="hl opt">;</span>
      <span class="hl kwa">end return</span><span class="hl opt">;</span>
   <span class="hl kwa">end</span> Create_Worker<span class="hl opt">;</span>

   <span class="hl slc">-------------</span>
   <span class="hl slc">-- Submit --</span>
   <span class="hl slc">-------------</span>

   <span class="hl kwa">procedure</span> Submit
     <span class="hl opt">(</span>Pool <span class="hl opt">:</span> <span class="hl kwa">in out</span> Task_Pool<span class="hl opt">;</span>
      Next_Context <span class="hl opt">:</span> Work_Handle<span class="hl opt">;</span>
      Current_Context <span class="hl opt">:</span> Context_Handle <span class="hl opt">:=</span> <span class="hl kwa">null</span><span class="hl opt">)</span> <span class="hl kwa">is</span>
   <span class="hl kwa">begin</span>
      <span class="hl kwa">if</span> Current_Context <span class="hl opt">=</span> <span class="hl kwa">null then</span>
         <span class="hl slc">--  Work is either being enqueued by a client (non-worker) task,</span>
         <span class="hl slc">--  or the client is requesting that a new task from the task pool</span>
         <span class="hl slc">--  should process the virtual thread, so offer the work to a new</span>
         <span class="hl slc">--  worker</span>
         Pool<span class="hl opt">.</span>Manager<span class="hl opt">.</span>Offer_Work <span class="hl opt">(</span>Next_Context<span class="hl opt">);</span>
      <span class="hl kwa">else</span>
         <span class="hl slc">--  The current task is a worker task</span>

         <span class="hl kwa">if</span> Current_Context<span class="hl opt">.</span><span class="hl kwa">all</span> <span class="hl opt">=</span> <span class="hl kwa">null then</span>
            <span class="hl slc">--  No further work has yet been assigned to the current task, so</span>
            <span class="hl slc">--  give the work to the same task. Note: no synchronization needed</span>
            <span class="hl slc">--  since current task owns its work.</span>
            Current_Context<span class="hl opt">.</span><span class="hl kwa">all</span> <span class="hl opt">:=</span> Next_Context<span class="hl opt">;</span>
         <span class="hl kwa">else</span>
            <span class="hl slc">--  Since this task already has something to do next, offer</span>
            <span class="hl slc">--  the work to another idle worker</span>
            Pool<span class="hl opt">.</span>Manager<span class="hl opt">.</span>Offer_Work <span class="hl opt">(</span>Next_Context<span class="hl opt">);</span>
         <span class="hl kwa">end if</span><span class="hl opt">;</span>
      <span class="hl kwa">end if</span><span class="hl opt">;</span>
   <span class="hl kwa">end</span> Submit<span class="hl opt">;</span>

   <span class="hl kwa">procedure</span> Destruct <span class="hl opt">(</span>Pool <span class="hl opt">:</span> <span class="hl kwa">in out</span> Task_Pool<span class="hl opt">)</span> <span class="hl kwa">is</span>
   <span class="hl kwa">begin</span>
      Pool<span class="hl opt">.</span>Manager<span class="hl opt">.</span>Shutdown<span class="hl opt">;</span>
      Pool<span class="hl opt">.</span>Manager<span class="hl opt">.</span>Wait_For_Termination<span class="hl opt">;</span>
   <span class="hl kwa">end</span> Destruct<span class="hl opt">;</span>

<span class="hl kwa">end</span> Task_Pools<span class="hl opt">;</span>
