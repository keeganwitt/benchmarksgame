<span class="hl com">/*</span>
<span class="hl com">The Computer Language Benchmarks Game</span>
<span class="hl com">http://shootout.alioth.debian.org/</span>
<span class="hl com">Contributed by Matthew Wilson</span>
<span class="hl com">*/</span>

<span class="hl sym">(</span><span class="hl kwa">function</span><span class="hl sym">(</span>complement<span class="hl sym">,</span>print<span class="hl sym">,</span>readline<span class="hl sym">) {</span>
  <span class="hl kwa">var</span> l<span class="hl sym">,</span> seq<span class="hl sym">=</span><span class="hl str">&quot;&quot;</span><span class="hl sym">;</span>
  <span class="hl kwd">print</span><span class="hl sym">(</span>l <span class="hl sym">=</span> <span class="hl kwd">readline</span><span class="hl sym">());</span>
  <span class="hl kwa">for</span> <span class="hl sym">(;;) {</span> <span class="hl kwa">try</span> <span class="hl sym">{</span>
    <span class="hl kwa">if</span> <span class="hl sym">((</span>l <span class="hl sym">=</span> <span class="hl kwd">readline</span><span class="hl sym">()).</span>length <span class="hl sym">==</span> <span class="hl num">60</span><span class="hl sym">) {</span>
      seq <span class="hl sym">+=</span> l<span class="hl sym">;</span>
    <span class="hl sym">}</span> <span class="hl kwa">else if</span> <span class="hl sym">(/</span>^<span class="hl sym">&gt;/.</span><span class="hl kwd">test</span><span class="hl sym">(</span>l<span class="hl sym">)) {</span>
      <span class="hl kwd">complement</span><span class="hl sym">(</span>seq<span class="hl sym">);</span>
      seq <span class="hl sym">=</span> <span class="hl str">&quot;&quot;</span><span class="hl sym">;</span>
      <span class="hl kwd">print</span><span class="hl sym">(</span>l<span class="hl sym">);</span>
    <span class="hl sym">}</span> <span class="hl kwa">else</span> <span class="hl sym">{</span>
      seq <span class="hl sym">+=</span> l<span class="hl sym">;</span>
    <span class="hl sym">}</span>
  <span class="hl sym">}</span> <span class="hl kwa">catch</span><span class="hl sym">(</span>e<span class="hl sym">){</span>
    <span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwa">typeof</span><span class="hl sym">(</span>seq<span class="hl sym">)!=</span><span class="hl str">'undefined'</span> <span class="hl sym">&amp;&amp;</span> seq<span class="hl sym">.</span>length <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">) {</span>
      <span class="hl kwd">complement</span><span class="hl sym">(</span>seq<span class="hl sym">);</span>
    <span class="hl sym">}</span>
    <span class="hl kwa">break</span><span class="hl sym">;</span>
  <span class="hl sym">}}</span>
<span class="hl sym">})((</span><span class="hl kwa">function</span><span class="hl sym">(</span>complement<span class="hl sym">,</span>print<span class="hl sym">) {</span>
  <span class="hl kwa">return function</span><span class="hl sym">(</span>seq<span class="hl sym">) {</span>
    <span class="hl kwa">var</span> l <span class="hl sym">=</span> seq<span class="hl sym">.</span>length<span class="hl sym">;</span>
    <span class="hl kwa">for</span> <span class="hl sym">(;;) {</span>
      <span class="hl kwa">var</span> line<span class="hl sym">=</span><span class="hl str">&quot;&quot;</span><span class="hl sym">;</span>
      <span class="hl kwa">if</span> <span class="hl sym">(</span>l <span class="hl sym">&gt;=</span> <span class="hl num">60</span><span class="hl sym">) {</span>
        <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwa">var</span> i<span class="hl sym">=</span>l<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span> j<span class="hl sym">=</span>l<span class="hl sym">-</span><span class="hl num">61</span><span class="hl sym">;</span> i<span class="hl sym">&gt;</span>j<span class="hl sym">; --</span>i<span class="hl sym">) {</span>
          line <span class="hl sym">+=</span> complement<span class="hl sym">[</span>seq<span class="hl sym">.</span><span class="hl kwd">charCodeAt</span><span class="hl sym">(</span>i<span class="hl sym">)]</span>
        <span class="hl sym">}</span>
        l<span class="hl sym">-=</span><span class="hl num">60</span><span class="hl sym">;</span>
        <span class="hl kwd">print</span><span class="hl sym">(</span>line<span class="hl sym">);</span>
      <span class="hl sym">}</span> <span class="hl kwa">else if</span> <span class="hl sym">(</span>l <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">) {</span>
        <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwa">var</span> i<span class="hl sym">=</span>l<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">;</span> i<span class="hl sym">&gt;-</span><span class="hl num">1</span><span class="hl sym">; --</span>i<span class="hl sym">) {</span>
          line <span class="hl sym">+=</span> complement<span class="hl sym">[</span>seq<span class="hl sym">.</span><span class="hl kwd">charCodeAt</span><span class="hl sym">(</span>i<span class="hl sym">)]</span>
        <span class="hl sym">}</span>
        <span class="hl kwd">print</span><span class="hl sym">(</span>line<span class="hl sym">);</span>
        <span class="hl kwa">break</span><span class="hl sym">;</span>
      <span class="hl sym">}</span> <span class="hl kwa">else</span> <span class="hl sym">{</span>
        <span class="hl kwa">break</span><span class="hl sym">;</span>
      <span class="hl sym">}</span>
    <span class="hl sym">}</span>
  <span class="hl sym">}</span>
<span class="hl sym">})((</span><span class="hl kwa">function</span><span class="hl sym">() {</span>
  <span class="hl kwa">var</span> complement<span class="hl sym">=[],</span>
    keys <span class="hl sym">=</span><span class="hl str">'WSATUGCYRKMBDHVNwsatugcyrkmbdhvn'</span><span class="hl sym">,</span>
    comps<span class="hl sym">=</span><span class="hl str">'WSTAACGRYMKVHDBNWSTAACGRYMKVHDBN'</span><span class="hl sym">;</span>
  <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwa">var</span> i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> i<span class="hl sym">&lt;</span><span class="hl num">32</span><span class="hl sym">; ++</span>i<span class="hl sym">)</span>
    complement<span class="hl sym">[</span>keys<span class="hl sym">.</span><span class="hl kwd">charCodeAt</span><span class="hl sym">(</span>i<span class="hl sym">)]</span>
      <span class="hl sym">=</span> comps<span class="hl sym">[</span>i<span class="hl sym">];</span>
  
  <span class="hl kwa">return</span> complement<span class="hl sym">;</span>
<span class="hl sym">})(),</span> print<span class="hl sym">),</span> print<span class="hl sym">,</span> readline<span class="hl sym">)</span>
