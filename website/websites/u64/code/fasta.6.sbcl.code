<span class="hl slc">;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;; http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">;;</span>
<span class="hl slc">;; Contributed by Lorenzo Bolla</span>
<span class="hl slc">;; Modified by Jason Miller</span>

<span class="hl opt">(</span><span class="hl kwa">declaim</span> <span class="hl opt">(</span><span class="hl kwa">optimize</span> <span class="hl opt">(</span><span class="hl kwa">speed</span> <span class="hl num">3</span><span class="hl opt">) (</span><span class="hl kwa">debug</span> <span class="hl num">0</span><span class="hl opt">) (</span><span class="hl kwa">safety</span> <span class="hl num">0</span><span class="hl opt">)))</span>

<span class="hl opt">(</span><span class="hl kwa">declaim</span> <span class="hl opt">(</span><span class="hl kwa">fixnum</span> <span class="hl opt">+</span>line-length<span class="hl opt">+ +</span>buffer-size<span class="hl opt">+ +</span>im<span class="hl opt">+))</span>
<span class="hl opt">(</span><span class="hl kwa">defconstant</span> <span class="hl opt">+</span>line-length<span class="hl opt">+</span> <span class="hl num">60</span><span class="hl opt">)</span>
<span class="hl opt">(</span><span class="hl kwa">defconstant</span> <span class="hl opt">+</span>buffer-size<span class="hl opt">+</span> <span class="hl num">3000</span><span class="hl opt">)</span>
<span class="hl opt">(</span><span class="hl kwa">defconstant</span> <span class="hl opt">+</span>im<span class="hl opt">+</span> <span class="hl num">139968</span><span class="hl opt">)</span>


<span class="hl opt">(</span><span class="hl kwa">declaim</span> <span class="hl opt">(</span><span class="hl kwa">simple-base-string</span> <span class="hl opt">*</span>alu<span class="hl opt">*))</span>
<span class="hl opt">(</span><span class="hl kwa">defparameter</span> <span class="hl opt">*</span>alu<span class="hl opt">* (</span><span class="hl kwa">concatenate</span> <span class="hl opt">'</span>simple-base-string
                                 <span class="hl str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span>
                                 <span class="hl str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span>
                                 <span class="hl str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span>
                                 <span class="hl str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span>
                                 <span class="hl str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span>
                                 <span class="hl str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span>
                                 <span class="hl str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span><span class="hl opt">))</span>

<span class="hl opt">(</span><span class="hl kwa">defun</span> cumsum <span class="hl opt">(</span><span class="hl kwa">lst</span><span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">((</span><span class="hl kwa">c</span> <span class="hl num">0.0</span><span class="hl opt">))</span>
    <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> single-float c<span class="hl opt">))</span>
    <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> <span class="hl opt">(</span><span class="hl kwa">vector</span> float<span class="hl opt">)</span> lst<span class="hl opt">))</span>
    <span class="hl opt">(</span><span class="hl kwa">map</span> <span class="hl opt">'</span>vector <span class="hl opt">#'(</span><span class="hl kwa">lambda</span> <span class="hl opt">(</span><span class="hl kwa">x</span><span class="hl opt">)</span> 
                <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> single-float x<span class="hl opt">)</span>
                         <span class="hl opt">(</span><span class="hl kwa">values</span> fixnum<span class="hl opt">))</span>
                <span class="hl opt">(</span><span class="hl kwa">the</span> fixnum <span class="hl opt">(</span><span class="hl kwa">ceiling</span> <span class="hl opt">(</span><span class="hl kwa">the</span> <span class="hl opt">(</span><span class="hl kwa">single-float</span> <span class="hl opt">#</span>.<span class="hl opt">(</span><span class="hl kwa">float</span> most-negative-fixnum<span class="hl opt">) #</span>.<span class="hl opt">(</span><span class="hl kwa">float</span> most-positive-fixnum<span class="hl opt">)) (* +</span>im<span class="hl opt">+ (</span><span class="hl kwa">incf</span> c x<span class="hl opt">))))))</span>
            lst<span class="hl opt">)))</span>

<span class="hl opt">(</span><span class="hl kwa">defun</span> make-cprob <span class="hl opt">(</span><span class="hl kwa">probs</span><span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> vector probs<span class="hl opt">))</span>
  <span class="hl opt">(</span><span class="hl kwa">make-array</span> <span class="hl opt">(</span><span class="hl kwa">length</span> probs<span class="hl opt">)</span>
              <span class="hl opt">:</span>element-type <span class="hl opt">'</span>fixnum
              <span class="hl opt">:</span>initial-contents <span class="hl opt">(</span><span class="hl kwa">cumsum</span> probs<span class="hl opt">)))</span>

<span class="hl opt">(</span><span class="hl kwa">defparameter</span> <span class="hl opt">*</span>amino-acids-syms<span class="hl opt">*</span> <span class="hl str">&quot;acgtBDHKMNRSVWY&quot;</span><span class="hl opt">)</span>
<span class="hl opt">(</span><span class="hl kwa">defparameter</span> <span class="hl opt">*</span>amino-acids-cprobs<span class="hl opt">*</span> 
  <span class="hl opt">(</span><span class="hl kwa">make-cprob</span> <span class="hl opt">#(</span><span class="hl kwa">0</span>.27 <span class="hl num">0.12 0.12 0.27 0.02 0.02 0.02 0.02 0.02 0.02 0.02 0.02 0.02 0.02 0.02</span><span class="hl opt">)))</span>

<span class="hl opt">(</span><span class="hl kwa">defparameter</span> <span class="hl opt">*</span>homo-sapiens-syms<span class="hl opt">*</span> <span class="hl str">&quot;acgt&quot;</span><span class="hl opt">)</span>
<span class="hl opt">(</span><span class="hl kwa">defparameter</span> <span class="hl opt">*</span>homo-sapiens-cprobs<span class="hl opt">*</span> 
  <span class="hl opt">(</span><span class="hl kwa">make-cprob</span> <span class="hl opt">#(</span><span class="hl kwa">0</span>.3029549426680 <span class="hl num">0.1979883004921 0.1975473066391 0.3015094502008</span><span class="hl opt">)))</span>

<span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">((</span><span class="hl kwa">r</span> <span class="hl num">42</span><span class="hl opt">)</span>
      <span class="hl opt">(</span><span class="hl kwa">ia</span> <span class="hl num">3877</span><span class="hl opt">)</span>
      <span class="hl opt">(</span><span class="hl kwa">ic</span> <span class="hl num">29573</span><span class="hl opt">))</span>
  <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> fixnum r ia ic<span class="hl opt">))</span>
  <span class="hl opt">(</span><span class="hl kwa">defun</span> reset-random <span class="hl opt">() (</span><span class="hl kwa">setf</span> r <span class="hl opt">(</span><span class="hl kwa">the</span> fixnum <span class="hl num">42</span><span class="hl opt">)))</span>
  <span class="hl opt">(</span><span class="hl kwa">declaim</span> <span class="hl opt">(</span><span class="hl kwa">inline</span> next-random<span class="hl opt">))</span>
  <span class="hl opt">(</span><span class="hl kwa">defun</span> next-random <span class="hl opt">()</span>
    <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">values</span> fixnum<span class="hl opt">))</span>
    <span class="hl opt">(</span><span class="hl kwa">setf</span> r <span class="hl opt">(</span><span class="hl kwa">mod</span> <span class="hl opt">(+ (</span><span class="hl kwa">the</span> <span class="hl opt">(</span><span class="hl kwa">integer</span> <span class="hl num">0 542655936</span><span class="hl opt">) (*</span> r ia<span class="hl opt">))</span> ic<span class="hl opt">) +</span>im<span class="hl opt">+))))</span>

<span class="hl opt">(</span><span class="hl kwa">declaim</span> <span class="hl opt">(</span><span class="hl kwa">inline</span> find-amino-acid next-random repeat<span class="hl opt">))</span>
<span class="hl opt">(</span><span class="hl kwa">defun</span> find-amino-acid <span class="hl opt">(</span><span class="hl kwa">amino-acids-syms</span> amino-acids-cprobs p<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> <span class="hl opt">(</span><span class="hl kwa">simple-array</span> fixnum <span class="hl opt">(*))</span> amino-acids-cprobs<span class="hl opt">)</span>
           <span class="hl opt">(</span><span class="hl kwa">type</span> simple-string amino-acids-syms<span class="hl opt">)</span>
           <span class="hl opt">(</span><span class="hl kwa">type</span> fixnum p<span class="hl opt">))</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> 
    <span class="hl opt">((</span><span class="hl kwa">i</span> <span class="hl opt">(</span><span class="hl kwa">position-if</span> <span class="hl opt">(</span><span class="hl kwa">lambda</span> <span class="hl opt">(</span><span class="hl kwa">x</span><span class="hl opt">) (&lt;</span> p x<span class="hl opt">))</span> amino-acids-cprobs<span class="hl opt">)))</span>
    <span class="hl opt">(</span><span class="hl kwa">if</span> i
      <span class="hl opt">(</span><span class="hl kwa">aref</span> amino-acids-syms i<span class="hl opt">)</span>
      <span class="hl opt">(</span><span class="hl kwa">aref</span> amino-acids-syms <span class="hl opt">(</span><span class="hl kwa">1-</span> <span class="hl opt">(</span><span class="hl kwa">length</span> amino-acids-syms<span class="hl opt">)))))</span>
  <span class="hl opt">)</span>

<span class="hl opt">(</span><span class="hl kwa">declaim</span> <span class="hl opt">(</span><span class="hl kwa">inline</span> output-line flush<span class="hl opt">))</span>
<span class="hl opt">(</span><span class="hl kwa">defun</span> output-line <span class="hl opt">(</span><span class="hl kwa">line</span> <span class="hl opt">&amp;</span>key <span class="hl opt">(</span><span class="hl kwa">start</span> <span class="hl num">0</span><span class="hl opt">) (</span><span class="hl kwa">end</span> nil<span class="hl opt">))</span>
  <span class="hl opt">(</span><span class="hl kwa">write-line</span> line <span class="hl opt">*</span>standard-output<span class="hl opt">* :</span>start start <span class="hl opt">:</span>end end<span class="hl opt">))</span>
<span class="hl opt">(</span><span class="hl kwa">defun</span> flush <span class="hl opt">()</span>
  <span class="hl opt">(</span><span class="hl kwa">finish-output</span> <span class="hl opt">*</span>standard-output<span class="hl opt">*))</span>

<span class="hl opt">(</span><span class="hl kwa">defun</span> randomize <span class="hl opt">(</span><span class="hl kwa">amino-acids-syms</span> amino-acids-cprobs title n<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> fixnum n<span class="hl opt">))</span>
  <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> <span class="hl opt">(</span><span class="hl kwa">simple-array</span> fixnum <span class="hl opt">(*))</span> amino-acids-cprobs<span class="hl opt">))</span>
  <span class="hl opt">(</span><span class="hl kwa">output-line</span> title<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">loop</span>
    with buf of-type simple-base-string <span class="hl opt">= (</span><span class="hl kwa">make-string</span> <span class="hl opt">+</span>buffer-size<span class="hl opt">+ :</span>element-type <span class="hl opt">'</span>base-char<span class="hl opt">)</span>
    with i of-type fixnum <span class="hl opt">=</span> <span class="hl num">0</span>
    with max-j of-type fixnum <span class="hl opt">= (</span><span class="hl kwa">1-</span> <span class="hl opt">+</span>buffer-size<span class="hl opt">+)</span>
    for j of-type fixnum from <span class="hl num">0</span>
    for k of-type fixnum from <span class="hl num">0</span>
    while <span class="hl opt">(&lt;</span> i n<span class="hl opt">)</span>
    if <span class="hl opt">(=</span> k <span class="hl opt">+</span>line-length<span class="hl opt">+)</span> do 
    <span class="hl opt">(</span><span class="hl kwa">setf</span> <span class="hl opt">(</span><span class="hl kwa">aref</span> buf j<span class="hl opt">) #</span>\Newline<span class="hl opt">)</span> 
    <span class="hl opt">(</span><span class="hl kwa">setf</span> k -<span class="hl num">1</span><span class="hl opt">)</span>
    else do 
    <span class="hl opt">(</span><span class="hl kwa">incf</span> i<span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl kwa">setf</span> <span class="hl opt">(</span><span class="hl kwa">aref</span> buf j<span class="hl opt">)</span> 
          <span class="hl opt">(</span><span class="hl kwa">find-amino-acid</span> amino-acids-syms amino-acids-cprobs <span class="hl opt">(</span><span class="hl kwa">next-random</span><span class="hl opt">)))</span>
    end
    when <span class="hl opt">(=</span> j max-j<span class="hl opt">)</span> do 
    <span class="hl opt">(</span><span class="hl kwa">write-string</span> buf <span class="hl opt">*</span>standard-output<span class="hl opt">*)</span>
    <span class="hl opt">(</span><span class="hl kwa">setf</span> j -<span class="hl num">1</span><span class="hl opt">)</span>
    finally 
    <span class="hl opt">(</span><span class="hl kwa">output-line</span> buf <span class="hl opt">:</span>start <span class="hl num">0</span> <span class="hl opt">:</span>end j<span class="hl opt">)</span>
    <span class="hl slc">;(flush)</span>
    <span class="hl opt">))</span>

<span class="hl opt">(</span><span class="hl kwa">defun</span> repeat <span class="hl opt">(</span><span class="hl kwa">alu</span> title n<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> simple-base-string alu<span class="hl opt">)</span> 
           <span class="hl opt">(</span><span class="hl kwa">type</span> fixnum n<span class="hl opt">))</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">((</span><span class="hl kwa">len</span> <span class="hl opt">(</span><span class="hl kwa">length</span> alu<span class="hl opt">))</span>
        <span class="hl opt">(</span><span class="hl kwa">buf</span> <span class="hl opt">(</span><span class="hl kwa">concatenate</span> <span class="hl opt">'</span>simple-base-string 
                          alu 
                          <span class="hl opt">(</span><span class="hl kwa">subseq</span> alu <span class="hl num">0</span> <span class="hl opt">+</span>line-length<span class="hl opt">+))))</span>
    <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> fixnum len<span class="hl opt">)</span> 
             <span class="hl opt">(</span><span class="hl kwa">type</span> simple-base-string buf<span class="hl opt">))</span>
    <span class="hl opt">(</span><span class="hl kwa">output-line</span> title<span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl kwa">do</span><span class="hl opt">* ((</span><span class="hl kwa">pos-start</span> <span class="hl num">0</span> <span class="hl opt">(</span><span class="hl kwa">mod</span> pos-end len<span class="hl opt">))</span>
          <span class="hl opt">(</span><span class="hl kwa">m</span> n <span class="hl opt">(</span><span class="hl kwa">-</span> m bytes<span class="hl opt">))</span>
          <span class="hl opt">(</span><span class="hl kwa">bytes</span> <span class="hl opt">(</span><span class="hl kwa">min</span> n <span class="hl opt">+</span>line-length<span class="hl opt">+) (</span><span class="hl kwa">min</span> m <span class="hl opt">+</span>line-length<span class="hl opt">+))</span>
          <span class="hl opt">(</span><span class="hl kwa">pos-end</span> <span class="hl opt">(+</span> pos-start bytes<span class="hl opt">) (+</span> pos-start bytes<span class="hl opt">)))</span>
      <span class="hl opt">((&lt;=</span> m <span class="hl num">0</span><span class="hl opt">) (</span><span class="hl kwa">flush</span><span class="hl opt">))</span>
      <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> fixnum pos-start pos-end m bytes<span class="hl opt">))</span>
      <span class="hl opt">(</span><span class="hl kwa">output-line</span> buf <span class="hl opt">:</span>start pos-start <span class="hl opt">:</span>end pos-end<span class="hl opt">))))</span>

<span class="hl opt">(</span><span class="hl kwa">defun</span> main <span class="hl opt">(&amp;</span>optional in-n<span class="hl opt">)</span>
  <span class="hl opt">#+</span>sbcl<span class="hl opt">(</span><span class="hl kwa">setq</span> <span class="hl opt">*</span>standard-output<span class="hl opt">*</span>
              <span class="hl opt">(</span><span class="hl kwa">sb-impl</span><span class="hl opt">::</span>make-fd-stream <span class="hl num">1</span>
                                       <span class="hl opt">:</span>output t
                                       <span class="hl opt">:</span>buffering <span class="hl opt">:</span>full
                                       <span class="hl opt">:</span>external-format <span class="hl opt">:</span>ascii<span class="hl opt">))</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">((</span><span class="hl kwa">n</span> <span class="hl opt">(</span><span class="hl kwa">or</span> in-n
               <span class="hl opt">(</span><span class="hl kwa">ignore-errors</span>
                 <span class="hl opt">(</span><span class="hl kwa">parse-integer</span>
                   <span class="hl opt">(</span><span class="hl kwa">car</span>
                     <span class="hl opt">(</span><span class="hl kwa">last</span> <span class="hl opt">#+</span>sbcl sb-ext<span class="hl opt">:*</span>posix-argv<span class="hl opt">*</span>
                           <span class="hl opt">#+</span>cmu  extensions<span class="hl opt">:*</span>command-line-strings<span class="hl opt">*</span>
                           <span class="hl opt">#+</span>gcl  si<span class="hl opt">::*</span>command-args<span class="hl opt">*</span>
                           <span class="hl opt">#+</span>clisp nil<span class="hl opt">))))</span>
               <span class="hl num">1000</span><span class="hl opt">)))</span>
    <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">fixnum</span> n<span class="hl opt">))</span>
    <span class="hl opt">(</span><span class="hl kwa">reset-random</span><span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl kwa">repeat</span> <span class="hl opt">*</span>alu<span class="hl opt">*</span> <span class="hl str">&quot;&gt;ONE Homo sapiens alu&quot;</span> <span class="hl opt">(</span><span class="hl kwa">the</span> fixnum <span class="hl opt">(*</span> n <span class="hl num">2</span><span class="hl opt">)))</span>
    <span class="hl opt">(</span><span class="hl kwa">randomize</span> <span class="hl opt">*</span>amino-acids-syms<span class="hl opt">*</span>
               <span class="hl opt">*</span>amino-acids-cprobs<span class="hl opt">*</span>
               <span class="hl str">&quot;&gt;TWO IUB ambiguity codes&quot;</span> <span class="hl opt">(</span><span class="hl kwa">the</span> fixnum <span class="hl opt">(*</span> n <span class="hl num">3</span><span class="hl opt">)))</span>
    <span class="hl opt">(</span><span class="hl kwa">randomize</span> <span class="hl opt">*</span>homo-sapiens-syms<span class="hl opt">*</span>
               <span class="hl opt">*</span>homo-sapiens-cprobs<span class="hl opt">*</span>
               <span class="hl str">&quot;&gt;THREE Homo sapiens frequency&quot;</span> <span class="hl opt">(</span><span class="hl kwa">the</span> fixnum <span class="hl opt">(*</span> n <span class="hl num">5</span><span class="hl opt">)))))</span>


<span class="hl opt">(</span><span class="hl kwa">eval-when</span> <span class="hl opt">(:</span>compile-toplevel <span class="hl opt">:</span>load-toplevel <span class="hl opt">:</span>execute<span class="hl opt">) (</span><span class="hl kwa">require</span> <span class="hl opt">:</span>sb-sprof<span class="hl opt">))</span>
<span class="hl opt">(</span><span class="hl kwa">defun</span> mainp <span class="hl opt">(</span><span class="hl kwa">n</span><span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">sb-sprof</span><span class="hl opt">:</span>with-profiling <span class="hl opt">(:</span>loop nil <span class="hl opt">:</span>report <span class="hl opt">:</span>graph<span class="hl opt">)</span>
                           <span class="hl opt">(</span><span class="hl kwa">main</span> n<span class="hl opt">)))</span>
