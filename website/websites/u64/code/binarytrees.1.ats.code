<span class="hl com">(*</span>
<span class="hl com">** The Computer Language Benchmarks Game</span>
<span class="hl com">** http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com">**</span>
<span class="hl com">** contributed by Hongwei Xi</span>
<span class="hl com">**</span>
<span class="hl com">** compilation command:</span>
<span class="hl com">**   atscc -O3 binary-trees2.dats -o binary-trees2 -D_ATS_GCATS</span>
<span class="hl com">*)</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">staload</span> _<span class="hl com">(*anonymous*)</span> <span class="hl opt">=</span> <span class="hl str">&quot;prelude/DATS/reference.dats&quot;</span>

<span class="hl com">(* ****** ****** *)</span>

dataviewtype tree <span class="hl opt">(</span><span class="hl kwb">int</span><span class="hl opt">) =</span>
  <span class="hl kwd">Nil</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">)</span> | <span class="hl opt">{</span>n1<span class="hl opt">,</span>n2<span class="hl opt">:</span>two<span class="hl opt">}</span> <span class="hl kwd">Node</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">)</span> <span class="hl kwa">of</span> <span class="hl opt">(</span>tree n1<span class="hl opt">,</span> <span class="hl kwb">int</span><span class="hl opt">,</span> tree n2<span class="hl opt">)</span>
<span class="hl slc">// end of [tree]</span>

viewtypedef <span class="hl kwd">Tree</span> <span class="hl opt">= [</span>n<span class="hl opt">:</span>two<span class="hl opt">]</span> tree n

<span class="hl kwa">fun</span> tree_make <span class="hl opt">(</span>d<span class="hl opt">:</span> <span class="hl kwb">int</span><span class="hl opt">,</span> i<span class="hl opt">:</span> <span class="hl kwb">int</span><span class="hl opt">):</span> <span class="hl kwd">Tree</span> <span class="hl opt">=</span>
  <span class="hl kwa">if</span> d <span class="hl opt">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then let</span>
    <span class="hl kwa">val</span> d1 <span class="hl opt">=</span> d<span class="hl opt">-</span><span class="hl num">1</span> <span class="hl kwa">and</span> i2 <span class="hl opt">=</span> i <span class="hl opt">&lt;&lt;</span> <span class="hl num">1</span> <span class="hl kwa">in</span>
    <span class="hl kwd">Node</span> <span class="hl opt">(</span>tree_make <span class="hl opt">(</span>d1<span class="hl opt">,</span> i2 <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">),</span> i<span class="hl opt">,</span> tree_make <span class="hl opt">(</span>d1<span class="hl opt">,</span> i2<span class="hl opt">))</span>
  <span class="hl kwa">end else</span> <span class="hl kwd">Node</span> <span class="hl opt">(</span><span class="hl kwd">Nil</span> <span class="hl opt">(),</span> i<span class="hl opt">,</span> <span class="hl kwd">Nil</span> <span class="hl opt">())</span>
<span class="hl slc">// end of [tree_make]</span>

<span class="hl kwa">fun</span> check_and_free <span class="hl opt">(</span>t<span class="hl opt">:</span> <span class="hl kwd">Tree</span><span class="hl opt">):&lt;!</span>ntm<span class="hl opt">&gt;</span> <span class="hl kwb">int</span> <span class="hl opt">=</span>  case<span class="hl opt">+</span> t <span class="hl kwa">of</span>
  | ~<span class="hl kwd">Node</span> <span class="hl opt">(</span>tl<span class="hl opt">,</span> i<span class="hl opt">,</span> tr<span class="hl opt">) =&gt;</span> i <span class="hl opt">+</span> check_and_free tl <span class="hl opt">-</span> check_and_free tr
  | ~<span class="hl kwd">Nil</span> <span class="hl opt">() =&gt;</span> <span class="hl num">0</span>
<span class="hl slc">// end of [check_and_free]</span>

<span class="hl kwa">fun</span> check <span class="hl opt">(</span>t<span class="hl opt">: !</span><span class="hl kwd">Tree</span><span class="hl opt">):&lt;!</span>ntm<span class="hl opt">&gt;</span> <span class="hl kwb">int</span> <span class="hl opt">=</span> case<span class="hl opt">+</span> t <span class="hl kwa">of</span>
  | <span class="hl kwd">Node</span> <span class="hl opt">(!</span>tl<span class="hl opt">,</span> i<span class="hl opt">, !</span>tr<span class="hl opt">) =&gt;</span> <span class="hl kwa">let</span>
      <span class="hl kwa">val</span> ans <span class="hl opt">=</span> i <span class="hl opt">+</span> check <span class="hl opt">(!</span>tl<span class="hl opt">) -</span> check <span class="hl opt">(!</span>tr<span class="hl opt">)</span> <span class="hl kwa">in</span> <span class="hl opt">(</span>fold&#64; t<span class="hl opt">;</span> ans<span class="hl opt">)</span>
    <span class="hl kwa">end</span> <span class="hl slc">// end of [Node]</span>
  | <span class="hl kwd">Nil</span> <span class="hl opt">() =&gt; (</span>fold&#64; t<span class="hl opt">;</span> <span class="hl num">0</span><span class="hl opt">)</span>
<span class="hl slc">// end of [check]</span>

<span class="hl kwa">fun</span> check_ref <span class="hl opt">(</span>r<span class="hl opt">:</span> <span class="hl kwb">ref</span> <span class="hl kwd">Tree</span><span class="hl opt">):</span> <span class="hl kwb">int</span> <span class="hl opt">=</span> <span class="hl kwa">let</span>
  <span class="hl kwa">val</span> <span class="hl opt">(</span>vbox pf | p<span class="hl opt">) =</span> ref_get_view_ptr r <span class="hl kwa">in</span> check <span class="hl opt">!</span>p     
<span class="hl kwa">end</span> <span class="hl slc">// end of [check_ref]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl ppc">#define MIN_DEPTH 4</span>

fn stretch <span class="hl opt">(</span>max_depth<span class="hl opt">:</span> <span class="hl kwd">Nat</span><span class="hl opt">):</span> void <span class="hl opt">=</span> <span class="hl kwa">let</span>
   <span class="hl kwa">val</span> stretch_depth <span class="hl opt">=</span> max_depth <span class="hl opt">+</span> <span class="hl num">1</span>
   <span class="hl kwa">val</span> t <span class="hl opt">=</span> tree_make <span class="hl opt">(</span>stretch_depth<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">)</span>
   <span class="hl kwa">val</span> c <span class="hl opt">=</span> check_and_free <span class="hl opt">(</span>t<span class="hl opt">)</span>
<span class="hl kwa">in</span>
   printf <span class="hl opt">(</span><span class="hl str">&quot;stretch tree of depth %i</span><span class="hl esc">\t</span> <span class="hl str">check: %i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> &#64;<span class="hl opt">(</span>stretch_depth<span class="hl opt">,</span> c<span class="hl opt">));</span>
<span class="hl kwa">end</span> <span class="hl slc">// end of [stretch]</span>

fn long_lived_tree_make
  <span class="hl opt">(</span>max_depth<span class="hl opt">:</span> <span class="hl kwd">Nat</span><span class="hl opt">):</span> <span class="hl kwb">ref</span> <span class="hl kwd">Tree</span> <span class="hl opt">=</span> <span class="hl kwa">let</span>
  <span class="hl kwa">val</span> t <span class="hl opt">=</span> tree_make <span class="hl opt">(</span>max_depth<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">);</span> <span class="hl kwa">val</span> t_r <span class="hl opt">=</span> <span class="hl kwb">ref</span><span class="hl opt">&lt;</span><span class="hl kwd">Tree</span><span class="hl opt">&gt; (</span>t<span class="hl opt">)</span>
<span class="hl kwa">in</span>
  t_r
<span class="hl kwa">end</span> <span class="hl slc">// end of [long_lived_tree_make]</span>

<span class="hl kwa">fun</span> loop_depths <span class="hl opt">(</span>d<span class="hl opt">:</span> <span class="hl kwd">Nat</span><span class="hl opt">,</span> max_depth<span class="hl opt">:</span> <span class="hl kwd">Nat</span><span class="hl opt">):</span> void <span class="hl opt">=</span> <span class="hl kwa">begin</span>
  <span class="hl kwa">if</span> d <span class="hl opt">&lt;=</span> max_depth <span class="hl kwa">then let</span>
    <span class="hl kwa">val</span> n <span class="hl opt">=</span> <span class="hl num">1</span> <span class="hl opt">&lt;&lt; (</span>max_depth <span class="hl opt">-</span> d <span class="hl opt">+</span> <span class="hl kwd">MIN_DEPTH</span><span class="hl opt">)</span>
    <span class="hl kwa">fun</span> loop <span class="hl opt">(</span>i<span class="hl opt">:</span> <span class="hl kwd">Nat</span><span class="hl opt">,</span> c<span class="hl opt">:</span> <span class="hl kwb">int</span><span class="hl opt">):&lt;</span>cloref1<span class="hl opt">&gt;</span> <span class="hl kwb">int</span> <span class="hl opt">=</span>
      <span class="hl kwa">if</span> i <span class="hl opt">&lt;</span> n <span class="hl kwa">then let</span>
        <span class="hl kwa">val</span> t <span class="hl opt">=</span> tree_make<span class="hl opt">(</span>d<span class="hl opt">,</span>  i<span class="hl opt">);</span> <span class="hl kwa">val</span> c1 <span class="hl opt">=</span> check_and_free t
        <span class="hl kwa">val</span> t <span class="hl opt">=</span> tree_make<span class="hl opt">(</span>d<span class="hl opt">,</span> ~i<span class="hl opt">);</span> <span class="hl kwa">val</span> c2 <span class="hl opt">=</span> check_and_free t
      <span class="hl kwa">in</span>
        loop <span class="hl opt">(</span>i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">,</span> c <span class="hl opt">+</span> c1 <span class="hl opt">+</span> c2<span class="hl opt">)</span>
      <span class="hl kwa">end else</span> c
    <span class="hl kwa">val</span> c <span class="hl opt">=</span> loop <span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">)</span>
  <span class="hl kwa">in</span>
    printf <span class="hl opt">(</span><span class="hl str">&quot;%i</span><span class="hl esc">\t</span> <span class="hl str">trees of depth %i</span><span class="hl esc">\t</span> <span class="hl str">check: %i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> &#64;<span class="hl opt">(</span><span class="hl num">2</span> <span class="hl opt">*</span> n<span class="hl opt">,</span> d<span class="hl opt">,</span> c<span class="hl opt">));</span>
    loop_depths <span class="hl opt">(</span>d <span class="hl opt">+</span> <span class="hl num">2</span><span class="hl opt">,</span> max_depth<span class="hl opt">)</span>
  <span class="hl kwa">end</span>
<span class="hl kwa">end</span> <span class="hl slc">// end of [loop_depths]</span>

<span class="hl kwa">implement</span> main <span class="hl opt">(</span>argc<span class="hl opt">,</span> argv<span class="hl opt">) =</span> <span class="hl kwa">let</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> assert_errmsg
    <span class="hl opt">(</span>argc <span class="hl opt">=</span> <span class="hl num">2</span><span class="hl opt">,</span> <span class="hl str">&quot;Exit: wrong command format!</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">)</span>
  <span class="hl kwa">val</span> n <span class="hl opt">=</span> int1_of argv<span class="hl opt">.[</span><span class="hl num">1</span><span class="hl opt">]</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> assert_errmsg
    <span class="hl opt">(</span>n <span class="hl opt">&gt;=</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl str">&quot;The input integer needs to be a natural number.</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">)</span>
  <span class="hl slc">// this simply means that no garbage collection can be triggered</span>
  <span class="hl slc">// and memory allocation and deallocation must be handled manually</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> gc_chunk_count_limit_max_set <span class="hl opt">(</span>~<span class="hl num">1</span><span class="hl opt">)</span> <span class="hl slc">// infinite</span>
  <span class="hl kwa">val</span> max_depth <span class="hl opt">=</span> max <span class="hl opt">(</span><span class="hl kwd">MIN_DEPTH</span> <span class="hl opt">+</span> <span class="hl num">2</span><span class="hl opt">,</span> n<span class="hl opt">)</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> stretch <span class="hl opt">(</span>max_depth<span class="hl opt">)</span>
  <span class="hl kwa">val</span> long_lived_tree <span class="hl opt">=</span> long_lived_tree_make <span class="hl opt">(</span>max_depth<span class="hl opt">)</span>
<span class="hl kwa">in</span>
  loop_depths <span class="hl opt">(</span><span class="hl kwd">MIN_DEPTH</span><span class="hl opt">,</span> max_depth<span class="hl opt">);</span>
  printf <span class="hl opt">(</span><span class="hl str">&quot;long lived tree of depth %i</span><span class="hl esc">\t</span> <span class="hl str">check: %i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> &#64;<span class="hl opt">(</span>max_depth<span class="hl opt">,</span> check_ref long_lived_tree<span class="hl opt">))</span>
<span class="hl kwa">end</span> <span class="hl slc">// end of [main]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl com">(* end of [binary-tree2.dats] *)</span>
