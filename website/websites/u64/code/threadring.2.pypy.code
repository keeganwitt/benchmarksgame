<span class="hl slc"># The Computer Language Benchmarks Game</span>
<span class="hl slc"># http://shootout.alioth.debian.org/</span>
<span class="hl slc"># Contributed by Antti Kervinen</span>
<span class="hl slc"># Modified by Tupteq</span>

<span class="hl kwa">import</span> sys
<span class="hl kwa">import</span> thread

<span class="hl slc"># Set minimum stack size for threads, otherwise the program may fail</span>
<span class="hl slc"># to create such a many threads</span>
thread<span class="hl sym">.</span><span class="hl kwd">stack_size</span><span class="hl sym">(</span><span class="hl num">32</span><span class="hl sym">*</span><span class="hl num">1024</span><span class="hl sym">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">threadfun</span><span class="hl sym">(</span>number<span class="hl sym">,</span> lock_acquire<span class="hl sym">,</span> next_release<span class="hl sym">):</span>
    <span class="hl kwa">global</span> n
    <span class="hl kwa">while</span> <span class="hl num">1</span><span class="hl sym">:</span>
        <span class="hl kwd">lock_acquire</span><span class="hl sym">()</span>
        <span class="hl kwa">if</span> n <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">:</span>
            n <span class="hl sym">-=</span> <span class="hl num">1</span>
            <span class="hl kwd">next_release</span><span class="hl sym">()</span>
        <span class="hl kwa">else</span><span class="hl sym">:</span>
            <span class="hl kwa">print</span> number
            main_lock<span class="hl sym">.</span><span class="hl kwd">release</span><span class="hl sym">()</span>

<span class="hl slc"># main</span>
n <span class="hl sym">=</span> <span class="hl kwb">int</span><span class="hl sym">(</span>sys<span class="hl sym">.</span>argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">])</span>
main_lock <span class="hl sym">=</span> thread<span class="hl sym">.</span><span class="hl kwd">allocate_lock</span><span class="hl sym">()</span>
main_lock<span class="hl sym">.</span><span class="hl kwd">acquire</span><span class="hl sym">()</span>

first_lock <span class="hl sym">=</span> thread<span class="hl sym">.</span><span class="hl kwd">allocate_lock</span><span class="hl sym">()</span>
next_lock <span class="hl sym">=</span> first_lock

<span class="hl kwa">for</span> number <span class="hl kwa">in</span> <span class="hl kwb">xrange</span><span class="hl sym">(</span><span class="hl num">503</span><span class="hl sym">):</span>
    lock <span class="hl sym">=</span> next_lock
    lock<span class="hl sym">.</span><span class="hl kwd">acquire</span><span class="hl sym">()</span>
    next_lock <span class="hl sym">=</span> thread<span class="hl sym">.</span><span class="hl kwd">allocate_lock</span><span class="hl sym">()</span> <span class="hl kwa">if</span> number <span class="hl sym">&lt;</span> <span class="hl num">502</span> <span class="hl kwa">else</span> first_lock
    thread<span class="hl sym">.</span><span class="hl kwd">start_new_thread</span><span class="hl sym">(</span>threadfun<span class="hl sym">,</span>
        <span class="hl sym">(</span>number<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">,</span> lock<span class="hl sym">.</span>acquire<span class="hl sym">,</span> next_lock<span class="hl sym">.</span>release<span class="hl sym">))</span>

first_lock<span class="hl sym">.</span><span class="hl kwd">release</span><span class="hl sym">()</span>
main_lock<span class="hl sym">.</span><span class="hl kwd">acquire</span><span class="hl sym">()</span>
