<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by Mr Ledrug</span>
<span class="hl com">*/</span>

<span class="hl ppc">#define _GNU_SOURCE</span>
<span class="hl ppc">#include &lt;sched.h&gt;</span>
<span class="hl ppc">#include &lt;stdio.h&gt;</span>
<span class="hl ppc">#include &lt;stdlib.h&gt;</span>
<span class="hl ppc">#include &lt;ctype.h&gt;</span>
<span class="hl ppc">#include &lt;unistd.h&gt;</span>
<span class="hl ppc">#include &lt;pthread.h&gt;</span>
<span class="hl ppc">#include &lt;string.h&gt;</span>

<span class="hl kwb">char</span> <span class="hl opt">*</span>pairs <span class="hl opt">=</span> <span class="hl str">&quot;ATCGGCTAUAMKRYWWSSYRKMVBHDDHBVNN</span><span class="hl esc">\n\n</span><span class="hl str">&quot;</span><span class="hl opt">;</span>
<span class="hl kwb">char</span> tbl<span class="hl opt">[</span><span class="hl num">128</span><span class="hl opt">];</span>

<span class="hl kwc">typedef</span> <span class="hl kwb">struct</span> work_s work_t<span class="hl opt">;</span>
<span class="hl kwb">struct</span> work_s <span class="hl opt">{</span>
   pthread_t id<span class="hl opt">;</span>
   work_t <span class="hl opt">*</span>next<span class="hl opt">;</span>
   <span class="hl kwb">char</span> <span class="hl opt">*</span>begin<span class="hl opt">, *</span>end<span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl kwb">void</span> <span class="hl opt">*</span><span class="hl kwd">process</span><span class="hl opt">(</span><span class="hl kwb">void</span> <span class="hl opt">*</span>ww<span class="hl opt">) {</span>
   work_t <span class="hl opt">*</span>w <span class="hl opt">=</span> ww<span class="hl opt">;</span>
   <span class="hl kwb">char</span> <span class="hl opt">*</span>from <span class="hl opt">=</span> w<span class="hl opt">-&gt;</span>begin<span class="hl opt">, *</span>to <span class="hl opt">=</span> w<span class="hl opt">-&gt;</span>end<span class="hl opt">;</span>
   <span class="hl kwa">while</span> <span class="hl opt">(*</span>from<span class="hl opt">++ !=</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl opt">);</span>

   <span class="hl kwb">size_t</span> len <span class="hl opt">=</span> to <span class="hl opt">-</span> from<span class="hl opt">;</span>
   <span class="hl kwb">size_t</span> off <span class="hl opt">=</span> <span class="hl num">60</span> <span class="hl opt">- (</span>len <span class="hl opt">%</span> <span class="hl num">61</span><span class="hl opt">);</span>

   <span class="hl kwa">if</span> <span class="hl opt">(</span>off<span class="hl opt">) {</span>
      <span class="hl kwb">char</span> <span class="hl opt">*</span>m<span class="hl opt">;</span>
      <span class="hl kwa">for</span> <span class="hl opt">(</span>m <span class="hl opt">=</span> from <span class="hl opt">+</span> <span class="hl num">60</span> <span class="hl opt">-</span> off<span class="hl opt">;</span> m <span class="hl opt">&lt;</span> to<span class="hl opt">;</span> m <span class="hl opt">+=</span> <span class="hl num">61</span><span class="hl opt">) {</span>
         <span class="hl kwd">memmove</span><span class="hl opt">(</span>m <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">,</span> m<span class="hl opt">,</span> off<span class="hl opt">);</span>
         <span class="hl opt">*</span>m <span class="hl opt">=</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl opt">;</span>
      <span class="hl opt">}</span>
   <span class="hl opt">}</span>

   <span class="hl kwb">char</span> c<span class="hl opt">;</span>
   <span class="hl kwa">for</span> <span class="hl opt">(</span>to<span class="hl opt">--;</span> from <span class="hl opt">&lt;=</span> to<span class="hl opt">;</span> from<span class="hl opt">++,</span> to<span class="hl opt">--)</span>
      c <span class="hl opt">=</span> tbl<span class="hl opt">[(</span><span class="hl kwb">int</span><span class="hl opt">)*</span>from<span class="hl opt">], *</span>from <span class="hl opt">=</span> tbl<span class="hl opt">[(</span><span class="hl kwb">int</span><span class="hl opt">)*</span>to<span class="hl opt">], *</span>to <span class="hl opt">=</span> c<span class="hl opt">;</span>

   <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">() {</span>
   <span class="hl kwb">char</span> <span class="hl opt">*</span>s<span class="hl opt">;</span>
   <span class="hl kwa">for</span> <span class="hl opt">(</span>s <span class="hl opt">=</span> pairs<span class="hl opt">; *</span>s<span class="hl opt">;</span> s <span class="hl opt">+=</span> <span class="hl num">2</span><span class="hl opt">) {</span>
      tbl<span class="hl opt">[</span><span class="hl kwd">toupper</span><span class="hl opt">(</span>s<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">])] =</span> s<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">];</span>
      tbl<span class="hl opt">[</span><span class="hl kwd">tolower</span><span class="hl opt">(</span>s<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">])] =</span> s<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">];</span>
   <span class="hl opt">}</span>


   <span class="hl kwb">size_t</span> buflen <span class="hl opt">=</span> <span class="hl num">1024</span><span class="hl opt">,</span> len<span class="hl opt">,</span> end <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
   <span class="hl kwb">char</span> <span class="hl opt">*</span>buf <span class="hl opt">=</span> <span class="hl kwd">malloc</span><span class="hl opt">(</span><span class="hl num">1024</span><span class="hl opt">);</span>

   <span class="hl kwb">int</span> in <span class="hl opt">=</span> <span class="hl kwd">fileno</span><span class="hl opt">(</span>stdin<span class="hl opt">);</span>
   <span class="hl kwa">while</span> <span class="hl opt">((</span>len <span class="hl opt">=</span> <span class="hl kwd">read</span><span class="hl opt">(</span>in<span class="hl opt">,</span> buf <span class="hl opt">+</span> end<span class="hl opt">,</span> buflen <span class="hl opt">-</span> <span class="hl num">256</span> <span class="hl opt">-</span> end<span class="hl opt">))) {</span>
      end <span class="hl opt">+=</span> len<span class="hl opt">;</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>end <span class="hl opt">&lt;</span> buflen <span class="hl opt">-</span> <span class="hl num">256</span><span class="hl opt">)</span> <span class="hl kwa">break</span><span class="hl opt">;</span>
      buf <span class="hl opt">=</span> <span class="hl kwd">realloc</span><span class="hl opt">(</span>buf<span class="hl opt">,</span> buflen <span class="hl opt">*=</span> <span class="hl num">2</span><span class="hl opt">);</span>
   <span class="hl opt">}</span>
   buf<span class="hl opt">[</span>end<span class="hl opt">] =</span> <span class="hl str">'&gt;'</span><span class="hl opt">;</span>

   work_t <span class="hl opt">*</span>work <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
   <span class="hl kwb">char</span> <span class="hl opt">*</span>from<span class="hl opt">, *</span>to <span class="hl opt">=</span> buf <span class="hl opt">+</span> end <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">;</span>
   <span class="hl kwa">while</span> <span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">) {</span>
      <span class="hl kwa">for</span> <span class="hl opt">(</span>from <span class="hl opt">=</span> to<span class="hl opt">; *</span>from <span class="hl opt">!=</span> <span class="hl str">'&gt;'</span><span class="hl opt">;</span> from<span class="hl opt">--);</span>

      work_t <span class="hl opt">*</span>w <span class="hl opt">=</span> <span class="hl kwd">malloc</span><span class="hl opt">(</span><span class="hl kwa">sizeof</span><span class="hl opt">(</span>work_t<span class="hl opt">));</span>
      w<span class="hl opt">-&gt;</span>begin <span class="hl opt">=</span> from<span class="hl opt">;</span>
      w<span class="hl opt">-&gt;</span>end <span class="hl opt">=</span> to<span class="hl opt">;</span>
      w<span class="hl opt">-&gt;</span>next <span class="hl opt">=</span> work<span class="hl opt">;</span>
      work <span class="hl opt">=</span> w<span class="hl opt">;</span>

      <span class="hl kwd">pthread_create</span><span class="hl opt">(&amp;</span>w<span class="hl opt">-&gt;</span>id<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> process<span class="hl opt">,</span> w<span class="hl opt">);</span>

      to <span class="hl opt">=</span> from <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">;</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>to <span class="hl opt">&lt;</span> buf<span class="hl opt">)</span> <span class="hl kwa">break</span><span class="hl opt">;</span>
   <span class="hl opt">}</span>

   <span class="hl kwa">while</span> <span class="hl opt">(</span>work<span class="hl opt">) {</span>
      work_t <span class="hl opt">*</span>w <span class="hl opt">=</span> work<span class="hl opt">;</span>
      work <span class="hl opt">=</span> work<span class="hl opt">-&gt;</span>next<span class="hl opt">;</span>
      <span class="hl kwd">pthread_join</span><span class="hl opt">(</span>w<span class="hl opt">-&gt;</span>id<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">);</span>
      <span class="hl kwd">free</span><span class="hl opt">(</span>w<span class="hl opt">);</span>
   <span class="hl opt">}</span>

   <span class="hl kwd">write</span><span class="hl opt">(</span><span class="hl kwd">fileno</span><span class="hl opt">(</span>stdout<span class="hl opt">),</span> buf<span class="hl opt">,</span> end<span class="hl opt">);</span>
   <span class="hl kwd">free</span><span class="hl opt">(</span>buf<span class="hl opt">);</span>

   <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
