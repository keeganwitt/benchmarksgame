<span class="hl slc">// The Computer Language Benchmarks Game</span>
<span class="hl slc">//  http://shootout.alioth.debian.org</span>
<span class="hl slc">//</span>
<span class="hl slc">//  Contributed by Matthew Wilson </span>
<span class="hl slc">//  biginteger derived from Tom Wu's jsbn.js</span>


<span class="hl kwa">var</span> compareTo<span class="hl sym">,</span> multiply<span class="hl sym">,</span> divide<span class="hl sym">,</span> addTo<span class="hl sym">,</span> add<span class="hl sym">,</span> intValue<span class="hl sym">,</span> shiftLeft<span class="hl sym">,</span> nbv<span class="hl sym">;</span>

<span class="hl kwa">function</span> <span class="hl kwd">main</span><span class="hl sym">(</span>$n<span class="hl sym">) {</span>
  <span class="hl kwa">var</span> $i<span class="hl sym">=</span><span class="hl num">1</span><span class="hl sym">,</span> $s<span class="hl sym">=</span><span class="hl str">&quot;&quot;</span><span class="hl sym">,</span> $d<span class="hl sym">,</span> neg10<span class="hl sym">=</span><span class="hl kwd">nbv</span><span class="hl sym">(-</span><span class="hl num">10</span><span class="hl sym">),</span> three<span class="hl sym">=</span><span class="hl kwd">nbv</span><span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">),</span> ten<span class="hl sym">=</span><span class="hl kwd">nbv</span><span class="hl sym">(</span><span class="hl num">10</span><span class="hl sym">),</span> g <span class="hl sym">=</span> <span class="hl num">1</span><span class="hl sym">,</span> $g<span class="hl sym">,</span>
  digits<span class="hl sym">=</span><span class="hl kwd">Array</span><span class="hl sym">(</span><span class="hl num">10</span><span class="hl sym">),</span> $z0<span class="hl sym">=</span><span class="hl kwd">nbv</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">),</span> $z1<span class="hl sym">=</span><span class="hl kwd">nbv</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">),</span> $z2<span class="hl sym">=</span><span class="hl kwd">nbv</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">),</span> negdigits<span class="hl sym">=</span><span class="hl kwd">Array</span><span class="hl sym">(</span><span class="hl num">10</span><span class="hl sym">),</span>
  k <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">,</span> $k<span class="hl sym">,</span> l <span class="hl sym">=</span> <span class="hl num">2</span><span class="hl sym">,</span> $l<span class="hl sym">,</span> a<span class="hl sym">;</span>
  
  <span class="hl kwa">for</span><span class="hl sym">(</span><span class="hl kwa">var</span> i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">;</span> i<span class="hl sym">&lt;</span><span class="hl num">10</span><span class="hl sym">; ++</span>i<span class="hl sym">) {</span> negdigits<span class="hl sym">[</span>i<span class="hl sym">] =</span> <span class="hl kwd">multiply</span><span class="hl sym">(</span>digits<span class="hl sym">[</span>i<span class="hl sym">] =</span> <span class="hl kwd">nbv</span><span class="hl sym">(</span>i<span class="hl sym">),</span>neg10<span class="hl sym">) }</span>
  
  <span class="hl kwa">do</span> <span class="hl sym">{</span>
    <span class="hl kwa">while</span> <span class="hl sym">(</span> <span class="hl kwd">compareTo</span><span class="hl sym">(</span>$z0<span class="hl sym">,</span>$z2<span class="hl sym">) &gt;</span> <span class="hl num">0</span>
         <span class="hl sym">|| (</span>$d <span class="hl sym">=</span> <span class="hl kwd">intValue</span><span class="hl sym">(</span><span class="hl kwd">divide</span><span class="hl sym">(</span><span class="hl kwd">add</span><span class="hl sym">(</span><span class="hl kwd">multiply</span><span class="hl sym">(</span>$z0<span class="hl sym">,</span>three<span class="hl sym">),</span>$z1<span class="hl sym">),</span>$z2<span class="hl sym">))) !=</span> 
             <span class="hl kwd">intValue</span><span class="hl sym">(</span><span class="hl kwd">divide</span><span class="hl sym">(</span><span class="hl kwd">add</span><span class="hl sym">(</span><span class="hl kwd">shiftLeft</span><span class="hl sym">(</span>$z0<span class="hl sym">,</span><span class="hl num">2</span><span class="hl sym">),</span>$z1<span class="hl sym">),</span>$z2<span class="hl sym">))</span>
    <span class="hl sym">) {</span>
      $z1 <span class="hl sym">=</span> <span class="hl kwd">multiply</span><span class="hl sym">(</span>$z1<span class="hl sym">,</span>$g <span class="hl sym">=</span> <span class="hl kwd">nbv</span><span class="hl sym">(</span>g<span class="hl sym">+=</span><span class="hl num">2</span><span class="hl sym">));</span>
      $z2 <span class="hl sym">=</span> <span class="hl kwd">multiply</span><span class="hl sym">(</span>$z2<span class="hl sym">,</span>$g<span class="hl sym">);</span>
      <span class="hl kwd">addTo</span><span class="hl sym">(</span>$z1<span class="hl sym">,</span> <span class="hl kwd">multiply</span><span class="hl sym">(</span>$z0<span class="hl sym">,</span>$l <span class="hl sym">=</span> <span class="hl kwd">nbv</span><span class="hl sym">(</span>l<span class="hl sym">+=</span><span class="hl num">4</span><span class="hl sym">)),</span> $z1<span class="hl sym">);</span>
      $z0 <span class="hl sym">=</span> <span class="hl kwd">multiply</span><span class="hl sym">(</span>$z0<span class="hl sym">,</span>$k <span class="hl sym">=</span> <span class="hl kwd">nbv</span><span class="hl sym">(++</span>k<span class="hl sym">));</span>
    <span class="hl sym">}</span>
    $z0 <span class="hl sym">=</span> <span class="hl kwd">multiply</span><span class="hl sym">(</span>$z0<span class="hl sym">,</span>ten<span class="hl sym">);</span>
    $z1 <span class="hl sym">=</span> <span class="hl kwd">multiply</span><span class="hl sym">(</span>$z1<span class="hl sym">,</span>ten<span class="hl sym">);</span>
    <span class="hl kwd">addTo</span><span class="hl sym">(</span>$z1<span class="hl sym">,</span> <span class="hl kwd">multiply</span><span class="hl sym">(</span>$z2<span class="hl sym">,</span>negdigits<span class="hl sym">[</span>$d<span class="hl sym">]),</span> $z1<span class="hl sym">);</span>
    $s <span class="hl sym">+=</span> $d<span class="hl sym">;</span>
    
    <span class="hl kwa">if</span> <span class="hl sym">(</span>$i <span class="hl sym">%</span> <span class="hl num">10</span> <span class="hl sym">==</span> <span class="hl num">0</span><span class="hl sym">) {</span> <span class="hl kwd">print</span><span class="hl sym">(</span>$s<span class="hl sym">+</span><span class="hl str">&quot;</span><span class="hl esc">\t</span><span class="hl str">:&quot;</span><span class="hl sym">+</span>$i<span class="hl sym">);</span> $s<span class="hl sym">=</span><span class="hl str">&quot;&quot;</span> <span class="hl sym">}</span>
  <span class="hl sym">}</span> <span class="hl kwa">while</span> <span class="hl sym">(++</span>$i <span class="hl sym">&lt;=</span> $n<span class="hl sym">)</span>
  
  <span class="hl kwa">if</span> <span class="hl sym">((</span>$i <span class="hl sym">=</span> $n <span class="hl sym">%</span> <span class="hl num">10</span><span class="hl sym">) !=</span> <span class="hl num">0</span><span class="hl sym">) {</span> $s <span class="hl sym">+=</span> <span class="hl kwd">Array</span><span class="hl sym">(</span><span class="hl num">11</span><span class="hl sym">-</span>$i<span class="hl sym">).</span><span class="hl kwd">join</span><span class="hl sym">(</span><span class="hl str">' '</span><span class="hl sym">) }</span>
  <span class="hl kwa">if</span> <span class="hl sym">(</span>$s<span class="hl sym">.</span>length <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">) {</span> <span class="hl kwd">print</span><span class="hl sym">(</span>$s<span class="hl sym">+</span><span class="hl str">&quot;</span><span class="hl esc">\t</span><span class="hl str">:&quot;</span><span class="hl sym">+</span>$n<span class="hl sym">) }</span>
<span class="hl sym">}</span>

<span class="hl kwa">var</span> functions<span class="hl sym">;</span>
<span class="hl kwd">load</span><span class="hl sym">(</span><span class="hl str">'/home/dunham/shootout/bench/Include/javascript/biginteger.js'</span><span class="hl sym">);</span>

compareTo<span class="hl sym">=</span>functions<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">];</span>
multiply<span class="hl sym">=</span>functions<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">];</span>
divide<span class="hl sym">=</span>functions<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">];</span>
addTo<span class="hl sym">=</span>functions<span class="hl sym">[</span><span class="hl num">3</span><span class="hl sym">];</span>
add<span class="hl sym">=</span>functions<span class="hl sym">[</span><span class="hl num">4</span><span class="hl sym">];</span>
nbv<span class="hl sym">=</span>functions<span class="hl sym">[</span><span class="hl num">5</span><span class="hl sym">];</span>
shiftLeft<span class="hl sym">=</span>functions<span class="hl sym">[</span><span class="hl num">6</span><span class="hl sym">];</span>
intValue<span class="hl sym">=</span>functions<span class="hl sym">[</span><span class="hl num">7</span><span class="hl sym">];</span>

main<span class="hl sym">.</span><span class="hl kwd">call</span><span class="hl sym">(</span><span class="hl kwa">this</span><span class="hl sym">,</span> <span class="hl num">1</span><span class="hl sym">*</span>arguments<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]*</span><span class="hl num">1</span><span class="hl sym">)</span>
