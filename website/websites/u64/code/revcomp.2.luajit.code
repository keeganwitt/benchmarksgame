<span class="hl slc">-- The Computer Language Benchmarks Game</span>
<span class="hl slc">-- http://shootout.alioth.debian.org/</span>
<span class="hl slc">-- contributed by Mike Pall</span>

<span class="hl kwa">local</span> bit <span class="hl sym">=</span> <span class="hl kwd">require</span><span class="hl sym">(</span><span class="hl str">&quot;bit&quot;</span><span class="hl sym">)</span>
<span class="hl kwa">local</span> ffi <span class="hl sym">=</span> <span class="hl kwd">require</span><span class="hl sym">(</span><span class="hl str">&quot;ffi&quot;</span><span class="hl sym">)</span>

ffi<span class="hl sym">.</span>cdef<span class="hl sym">[[</span>
typedef struct FILE FILE<span class="hl sym">;</span>
extern FILE <span class="hl sym">*</span>stdin<span class="hl sym">, *</span>stdout<span class="hl sym">;</span>
int <span class="hl kwd">_IO_getline_info</span><span class="hl sym">(</span>FILE <span class="hl sym">*,</span> char <span class="hl sym">*,</span> size_t<span class="hl sym">,</span> int<span class="hl sym">,</span> int<span class="hl sym">,</span> int <span class="hl sym">*);</span>
size_t <span class="hl kwd">_IO_file_xsputn</span><span class="hl sym">(</span>FILE <span class="hl sym">*,</span> const void <span class="hl sym">*,</span> size_t<span class="hl sym">);</span>
int <span class="hl kwd">putchar_unlocked</span><span class="hl sym">(</span>int<span class="hl sym">);</span>
int <span class="hl kwd">setvbuf</span><span class="hl sym">(</span>FILE <span class="hl sym">*,</span> char <span class="hl sym">*,</span> int<span class="hl sym">,</span> size_t<span class="hl sym">);</span>
int <span class="hl kwd">fflush</span><span class="hl sym">(</span>FILE <span class="hl sym">*);</span>
void <span class="hl sym">*</span><span class="hl kwd">realloc</span><span class="hl sym">(</span>void <span class="hl sym">*,</span> size_t<span class="hl sym">);</span>
void <span class="hl kwd">free</span><span class="hl sym">(</span>void <span class="hl sym">*);</span>
]]

<span class="hl slc">-- Generate a lookup table to map 2 chars in parallel to their complements.</span>
<span class="hl kwa">local function</span> <span class="hl kwd">genrev</span><span class="hl sym">(</span>map<span class="hl sym">)</span>
  <span class="hl kwa">local</span> r <span class="hl sym">=</span> ffi<span class="hl sym">.</span><span class="hl kwd">new</span><span class="hl sym">(</span><span class="hl str">&quot;uint8_t[?]&quot;</span><span class="hl sym">,</span> <span class="hl num">256</span><span class="hl sym">)</span>
  <span class="hl kwa">for</span> i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">255</span> <span class="hl kwa">do</span> r<span class="hl sym">[</span>i<span class="hl sym">] =</span> i <span class="hl kwa">end</span>
  <span class="hl kwa">for</span> i<span class="hl sym">=</span><span class="hl num">1</span><span class="hl sym">,#</span>map<span class="hl sym">,</span><span class="hl num">2</span> <span class="hl kwa">do local</span> f<span class="hl sym">,</span>t <span class="hl sym">=</span> <span class="hl kwb">string</span><span class="hl sym">.</span><span class="hl kwd">byte</span><span class="hl sym">(</span>map<span class="hl sym">,</span> i<span class="hl sym">,</span> i<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">);</span> r<span class="hl sym">[</span>f<span class="hl sym">]=</span>t<span class="hl sym">;</span> r<span class="hl sym">[</span>f<span class="hl sym">-</span><span class="hl num">32</span><span class="hl sym">]=</span>t <span class="hl kwa">end</span>
  <span class="hl kwa">local</span> rev <span class="hl sym">=</span> ffi<span class="hl sym">.</span><span class="hl kwd">new</span><span class="hl sym">(</span><span class="hl str">&quot;uint16_t[?]&quot;</span><span class="hl sym">,</span> <span class="hl num">65536</span><span class="hl sym">)</span>
  <span class="hl kwa">for</span> i<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">65535</span> <span class="hl kwa">do</span>
    rev<span class="hl sym">[</span>i<span class="hl sym">] =</span> bit<span class="hl sym">.</span><span class="hl kwd">lshift</span><span class="hl sym">(</span>r<span class="hl sym">[</span>bit<span class="hl sym">.</span><span class="hl kwd">band</span><span class="hl sym">(</span>i<span class="hl sym">,</span> <span class="hl num">255</span><span class="hl sym">)],</span> <span class="hl num">8</span><span class="hl sym">) +</span> r<span class="hl sym">[</span>bit<span class="hl sym">.</span><span class="hl kwd">rshift</span><span class="hl sym">(</span>i<span class="hl sym">,</span> <span class="hl num">8</span><span class="hl sym">)]</span>
  <span class="hl kwa">end</span>
  <span class="hl kwa">return</span> rev
<span class="hl kwa">end</span>

<span class="hl slc">-- Reverse and translate a buffer, chop it up into lines and write to stdout.</span>
<span class="hl kwa">local function</span> <span class="hl kwd">writerev</span><span class="hl sym">(</span>seq<span class="hl sym">,</span> n<span class="hl sym">,</span> rev<span class="hl sym">)</span>
  <span class="hl kwa">local</span> C <span class="hl sym">=</span> ffi<span class="hl sym">.</span>C
  <span class="hl kwa">local</span> stdout<span class="hl sym">,</span> out <span class="hl sym">=</span> C<span class="hl sym">.</span>stdout<span class="hl sym">,</span> ffi<span class="hl sym">.</span><span class="hl kwd">new</span><span class="hl sym">(</span><span class="hl str">&quot;uint8_t[?]&quot;</span><span class="hl sym">,</span> <span class="hl num">61</span><span class="hl sym">);</span> out<span class="hl sym">[</span><span class="hl num">60</span><span class="hl sym">] =</span> <span class="hl num">10</span>
  <span class="hl kwa">local</span> s<span class="hl sym">,</span> o <span class="hl sym">=</span> ffi<span class="hl sym">.</span><span class="hl kwd">cast</span><span class="hl sym">(</span><span class="hl str">&quot;uint16_t *&quot;</span><span class="hl sym">,</span> seq <span class="hl sym">+</span> n <span class="hl sym">%</span> <span class="hl num">2</span><span class="hl sym">),</span> ffi<span class="hl sym">.</span><span class="hl kwd">cast</span><span class="hl sym">(</span><span class="hl str">&quot;uint16_t *&quot;</span><span class="hl sym">,</span> out<span class="hl sym">)</span>
  <span class="hl kwa">for</span> i<span class="hl sym">=</span>bit<span class="hl sym">.</span><span class="hl kwd">rshift</span><span class="hl sym">(</span>n<span class="hl sym">,</span><span class="hl num">1</span><span class="hl sym">)-</span><span class="hl num">30</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,-</span><span class="hl num">30</span> <span class="hl kwa">do</span>
    <span class="hl kwa">for</span> j<span class="hl sym">=</span><span class="hl num">0</span><span class="hl sym">,</span><span class="hl num">29</span> <span class="hl kwa">do</span> o<span class="hl sym">[</span><span class="hl num">29</span><span class="hl sym">-</span>j<span class="hl sym">] =</span> rev<span class="hl sym">[</span>s<span class="hl sym">[</span>i<span class="hl sym">+</span>j]] <span class="hl kwa">end</span>
    C<span class="hl sym">.</span><span class="hl kwd">_IO_file_xsputn</span><span class="hl sym">(</span>stdout<span class="hl sym">,</span> out<span class="hl sym">,</span> <span class="hl num">61</span><span class="hl sym">)</span>
  <span class="hl kwa">end</span>
  <span class="hl kwa">local</span> tail <span class="hl sym">=</span> n <span class="hl sym">%</span> <span class="hl num">60</span>
  <span class="hl kwa">if</span> tail <span class="hl sym">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
    <span class="hl kwa">for</span> i<span class="hl sym">=</span>tail<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">,</span><span class="hl num">0</span><span class="hl sym">,-</span><span class="hl num">1</span> <span class="hl kwa">do</span> C<span class="hl sym">.</span><span class="hl kwd">putchar_unlocked</span><span class="hl sym">(</span>bit<span class="hl sym">.</span><span class="hl kwd">rshift</span><span class="hl sym">(</span>rev<span class="hl sym">[</span>seq<span class="hl sym">[</span>i]]<span class="hl sym">,</span> <span class="hl num">8</span><span class="hl sym">))</span> <span class="hl kwa">end</span>
    C<span class="hl sym">.</span><span class="hl kwd">putchar_unlocked</span><span class="hl sym">(</span><span class="hl num">10</span><span class="hl sym">)</span>
  <span class="hl kwa">end</span>
<span class="hl kwa">end</span>

<span class="hl kwa">local</span> C <span class="hl sym">=</span> ffi<span class="hl sym">.</span>C
<span class="hl kwa">local</span> stdin<span class="hl sym">,</span> stdout <span class="hl sym">=</span> C<span class="hl sym">.</span>stdin<span class="hl sym">,</span> C<span class="hl sym">.</span>stdout
<span class="hl kwa">local</span> inbuf<span class="hl sym">,</span> outbuf <span class="hl sym">=</span> ffi<span class="hl sym">.</span><span class="hl kwd">new</span><span class="hl sym">(</span><span class="hl str">&quot;char[?]&quot;</span><span class="hl sym">,</span> <span class="hl num">2</span>^<span class="hl num">20</span><span class="hl sym">),</span> ffi<span class="hl sym">.</span><span class="hl kwd">new</span><span class="hl sym">(</span><span class="hl str">&quot;char[?]&quot;</span><span class="hl sym">,</span> <span class="hl num">2</span>^<span class="hl num">20</span><span class="hl sym">)</span>
C<span class="hl sym">.</span><span class="hl kwd">setvbuf</span><span class="hl sym">(</span>stdin<span class="hl sym">,</span> inbuf<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">2</span>^<span class="hl num">20</span><span class="hl sym">);</span> C<span class="hl sym">.</span><span class="hl kwd">setvbuf</span><span class="hl sym">(</span>stdout<span class="hl sym">,</span> outbuf<span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl num">2</span>^<span class="hl num">20</span><span class="hl sym">)</span>
<span class="hl kwa">local</span> rev <span class="hl sym">=</span> <span class="hl kwd">genrev</span><span class="hl sym">(</span><span class="hl str">&quot;aTcGbVdHgChDkMmKnNsSrYuAtAwWvByR&quot;</span><span class="hl sym">)</span>

<span class="hl slc">-- Read each FASTA input sequence line-by-line into a growable buffer.</span>
<span class="hl kwa">local</span> sz <span class="hl sym">=</span> <span class="hl num">2</span>^<span class="hl num">20</span>
<span class="hl kwa">local</span> buf <span class="hl sym">=</span> ffi<span class="hl sym">.</span><span class="hl kwd">cast</span><span class="hl sym">(</span><span class="hl str">&quot;uint8_t *&quot;</span><span class="hl sym">,</span> C<span class="hl sym">.</span><span class="hl kwd">realloc</span><span class="hl sym">(</span><span class="hl kwa">nil</span><span class="hl sym">,</span> sz<span class="hl sym">+</span><span class="hl num">256</span><span class="hl sym">));</span> <span class="hl kwb">assert</span><span class="hl sym">(</span>buf <span class="hl sym">~=</span> <span class="hl kwa">nil</span><span class="hl sym">)</span>
<span class="hl kwa">local</span> m <span class="hl sym">=</span> C<span class="hl sym">.</span><span class="hl kwd">_IO_getline_info</span><span class="hl sym">(</span>stdin<span class="hl sym">,</span> buf<span class="hl sym">,</span> <span class="hl num">256</span><span class="hl sym">,</span> <span class="hl num">10</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl kwa">nil</span><span class="hl sym">)</span>
<span class="hl kwa">local</span> head <span class="hl sym">=</span> m <span class="hl sym">~=</span> <span class="hl num">0</span> <span class="hl kwa">and</span> ffi<span class="hl sym">.</span><span class="hl kwb">string</span><span class="hl sym">(</span>buf<span class="hl sym">,</span> m<span class="hl sym">)</span>
<span class="hl kwa">while</span> head <span class="hl kwa">do</span>
  C<span class="hl sym">.</span><span class="hl kwd">_IO_file_xsputn</span><span class="hl sym">(</span>stdout<span class="hl sym">,</span> head<span class="hl sym">, #</span>head<span class="hl sym">);</span> C<span class="hl sym">.</span><span class="hl kwd">putchar_unlocked</span><span class="hl sym">(</span><span class="hl num">10</span><span class="hl sym">)</span>
  <span class="hl kwa">local</span> n <span class="hl sym">=</span> <span class="hl num">0</span>
  <span class="hl kwa">repeat</span>
    <span class="hl kwa">local</span> m <span class="hl sym">=</span> C<span class="hl sym">.</span><span class="hl kwd">_IO_getline_info</span><span class="hl sym">(</span>stdin<span class="hl sym">,</span> buf<span class="hl sym">+</span>n<span class="hl sym">,</span> <span class="hl num">256</span><span class="hl sym">,</span> <span class="hl num">10</span><span class="hl sym">,</span> <span class="hl num">0</span><span class="hl sym">,</span> <span class="hl kwa">nil</span><span class="hl sym">)</span>
    <span class="hl kwa">if</span> m <span class="hl sym">==</span> <span class="hl num">0</span> <span class="hl kwa">then</span> head <span class="hl sym">=</span> <span class="hl kwa">nil</span><span class="hl sym">;</span> <span class="hl kwa">break end</span>
    <span class="hl kwa">if</span> buf<span class="hl sym">[</span>n<span class="hl sym">] ==</span> <span class="hl num">62</span> <span class="hl kwa">then</span> head <span class="hl sym">=</span> ffi<span class="hl sym">.</span><span class="hl kwb">string</span><span class="hl sym">(</span>buf<span class="hl sym">+</span>n<span class="hl sym">,</span> m<span class="hl sym">);</span> <span class="hl kwa">break end</span>
    n <span class="hl sym">=</span> n <span class="hl sym">+</span> m
    <span class="hl kwa">if</span> n <span class="hl sym">&gt;=</span> sz <span class="hl kwa">then</span>
      sz <span class="hl sym">=</span> sz <span class="hl sym">+</span> sz
      buf <span class="hl sym">=</span> ffi<span class="hl sym">.</span><span class="hl kwd">cast</span><span class="hl sym">(</span><span class="hl str">&quot;uint8_t *&quot;</span><span class="hl sym">,</span> C<span class="hl sym">.</span><span class="hl kwd">realloc</span><span class="hl sym">(</span>buf<span class="hl sym">,</span> sz<span class="hl sym">+</span><span class="hl num">256</span><span class="hl sym">));</span> <span class="hl kwb">assert</span><span class="hl sym">(</span>buf <span class="hl sym">~=</span> <span class="hl kwa">nil</span><span class="hl sym">)</span>
    <span class="hl kwa">end</span>
  <span class="hl kwa">until false</span>
  <span class="hl kwd">writerev</span><span class="hl sym">(</span>buf<span class="hl sym">,</span> n<span class="hl sym">,</span> rev<span class="hl sym">)</span>
<span class="hl kwa">end</span>

C<span class="hl sym">.</span><span class="hl kwd">fflush</span><span class="hl sym">(</span>stdout<span class="hl sym">)</span>
C<span class="hl sym">.</span><span class="hl kwd">free</span><span class="hl sym">(</span>buf<span class="hl sym">)</span>
