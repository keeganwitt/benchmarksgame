<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">contributed by Miroslav Rubanets</span>
<span class="hl com">algorithm is based on Java 6 source code by Oleg Mazurov</span>
<span class="hl com">source is based on my C++ submission.</span>
<span class="hl com"></span>
<span class="hl com">Building checked in Ubuntu 11.4 with g++ 4.5 (both x86 and amd64).</span>
<span class="hl com">gcc -pipe -Wall -O3 -fomit-frame-pointer -march=native -lpthread \</span>
<span class="hl com">    -falign-labels=8 fannkuchredux.gcc-2.c -o fannkuchredux.gcc-2.gcc_run</span>
<span class="hl com">note that -falign-labels=8 is needed only on x86 with gcc 4.5</span>
<span class="hl com">*/</span>

<span class="hl slc">//std stuff</span>
<span class="hl ppc">#include &lt;stdio.h&gt;</span>
<span class="hl ppc">#include &lt;stdlib.h&gt;</span>
<span class="hl ppc">#include &lt;string.h&gt;</span>
<span class="hl slc">//posix threads</span>
<span class="hl ppc">#include &lt;pthread.h&gt;</span>
<span class="hl slc">//linux (for sysconf)</span>
<span class="hl ppc">#include &lt;unistd.h&gt;</span>
<span class="hl slc">//gcc stuff</span>
<span class="hl ppc">#define unlikely(x)     __builtin_expect((x),0)</span>
<span class="hl slc">//hardcoded limits</span>
<span class="hl ppc">#define MAX_PROBLEM_SIZE 12</span>
<span class="hl ppc">#define MAX_CPU_LIMIT 4</span>

<span class="hl kwc">inline</span> <span class="hl kwb">int</span> <span class="hl kwd">max</span><span class="hl opt">(</span><span class="hl kwb">int</span> a<span class="hl opt">,</span> <span class="hl kwb">int</span> b<span class="hl opt">){</span> <span class="hl kwa">return</span> a <span class="hl opt">&gt;</span> b ? a <span class="hl opt">:</span> b<span class="hl opt">;}</span>
<span class="hl kwc">inline</span> <span class="hl kwb">int</span> <span class="hl kwd">min</span><span class="hl opt">(</span><span class="hl kwb">int</span> a<span class="hl opt">,</span> <span class="hl kwb">int</span> b<span class="hl opt">){</span> <span class="hl kwa">return</span> a <span class="hl opt">&lt;</span> b ? a <span class="hl opt">:</span> b<span class="hl opt">;}</span>

<span class="hl kwc">typedef</span> <span class="hl kwb">struct</span> tagResult<span class="hl opt">{</span><span class="hl kwb">int</span> maxflips<span class="hl opt">,</span> checksum<span class="hl opt">; }</span> Result<span class="hl opt">;</span>
<span class="hl kwc">typedef</span> <span class="hl kwb">struct</span> tagPermutationGenerator<span class="hl opt">{</span>
    <span class="hl kwb">int</span> perm<span class="hl opt">[</span>MAX_PROBLEM_SIZE<span class="hl opt">];</span>
    <span class="hl kwb">int</span> count<span class="hl opt">[</span>MAX_PROBLEM_SIZE<span class="hl opt">];</span>
    <span class="hl kwb">int</span><span class="hl opt">*</span> factorials<span class="hl opt">;</span>    
    <span class="hl kwb">int</span> length<span class="hl opt">;</span>
<span class="hl opt">}</span> G<span class="hl opt">;</span>

<span class="hl kwc">inline</span> <span class="hl kwb">void</span> <span class="hl kwd">copy</span><span class="hl opt">(</span><span class="hl kwb">int</span><span class="hl opt">*</span> dst<span class="hl opt">,</span> <span class="hl kwb">int</span><span class="hl opt">*</span> src<span class="hl opt">,</span> <span class="hl kwb">int</span> n<span class="hl opt">){</span>
    <span class="hl kwb">int</span><span class="hl opt">*</span> e <span class="hl opt">=</span> src<span class="hl opt">+</span>n<span class="hl opt">;</span>
    <span class="hl kwa">for</span><span class="hl opt">(;</span> src <span class="hl opt">!=</span> e<span class="hl opt">; ++</span>src<span class="hl opt">,++</span>dst <span class="hl opt">)</span>
        <span class="hl opt">*</span>dst <span class="hl opt">= *</span>src<span class="hl opt">;</span>
<span class="hl opt">}</span>
<span class="hl kwc">inline</span> <span class="hl kwb">void</span> <span class="hl kwd">rotate</span><span class="hl opt">(</span> <span class="hl kwb">int</span><span class="hl opt">*</span> data<span class="hl opt">,</span> <span class="hl kwb">int</span> n<span class="hl opt">){</span>
    <span class="hl kwb">int</span> i<span class="hl opt">;</span>
    <span class="hl kwb">int</span> first <span class="hl opt">=</span> data<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">];</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span>i<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span> i<span class="hl opt">&lt;</span>n<span class="hl opt">; ++</span>i<span class="hl opt">)</span>
        data<span class="hl opt">[</span>i<span class="hl opt">] =</span> data<span class="hl opt">[</span>i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">];</span>
    data<span class="hl opt">[</span>n<span class="hl opt">] =</span> first<span class="hl opt">;</span>
<span class="hl opt">}</span>
<span class="hl kwc">inline</span> <span class="hl kwb">void</span> <span class="hl kwd">reverse</span><span class="hl opt">(</span> <span class="hl kwb">int</span><span class="hl opt">*</span>data<span class="hl opt">,</span> <span class="hl kwb">int</span> n <span class="hl opt">){</span>
    <span class="hl kwb">int</span> <span class="hl opt">*</span> lo <span class="hl opt">= &amp;</span>data<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">], *</span> hi <span class="hl opt">= &amp;</span>data<span class="hl opt">[</span>n<span class="hl opt">];</span>
    <span class="hl kwa">for</span> <span class="hl opt">(;</span> lo <span class="hl opt">&lt;</span> hi<span class="hl opt">; ++</span>lo<span class="hl opt">, --</span>hi<span class="hl opt">){</span> 
        <span class="hl kwb">int</span> tmp <span class="hl opt">= *</span>lo<span class="hl opt">; *</span>lo <span class="hl opt">= *</span>hi<span class="hl opt">; *</span>hi <span class="hl opt">=</span> tmp<span class="hl opt">;</span>
    <span class="hl opt">}</span>
<span class="hl opt">}</span>
<span class="hl kwb">void</span> <span class="hl kwd">first_permutation</span><span class="hl opt">(</span> G<span class="hl opt">*</span> g<span class="hl opt">,</span> <span class="hl kwb">int</span> idx <span class="hl opt">){</span>
    <span class="hl kwb">int</span> p<span class="hl opt">[</span>MAX_PROBLEM_SIZE<span class="hl opt">];</span>
    <span class="hl kwb">int</span> pp<span class="hl opt">[</span>MAX_PROBLEM_SIZE<span class="hl opt">];</span>
    <span class="hl kwb">int</span> len <span class="hl opt">=</span> g<span class="hl opt">-&gt;</span>length<span class="hl opt">;</span>
    <span class="hl kwb">int</span> d<span class="hl opt">,</span> i<span class="hl opt">,</span> j<span class="hl opt">;</span>
    <span class="hl kwd">memset</span><span class="hl opt">(</span>p<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> MAX_PROBLEM_SIZE<span class="hl opt">*</span><span class="hl kwa">sizeof</span><span class="hl opt">(</span><span class="hl kwb">int</span><span class="hl opt">));</span>
    <span class="hl kwd">memset</span><span class="hl opt">(</span>pp<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> MAX_PROBLEM_SIZE<span class="hl opt">*</span><span class="hl kwa">sizeof</span><span class="hl opt">(</span><span class="hl kwb">int</span><span class="hl opt">));</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span> i<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span> i<span class="hl opt">&lt;</span>len<span class="hl opt">; ++</span>i <span class="hl opt">)</span> 
        p<span class="hl opt">[</span>i<span class="hl opt">] =</span> i<span class="hl opt">;</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span> i<span class="hl opt">=</span>len<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">;</span> i<span class="hl opt">&gt;</span><span class="hl num">0</span><span class="hl opt">; --</span>i <span class="hl opt">) {</span>
        d <span class="hl opt">=</span> idx <span class="hl opt">/</span> g<span class="hl opt">-&gt;</span>factorials<span class="hl opt">[</span>i<span class="hl opt">];</span>
        g<span class="hl opt">-&gt;</span>count<span class="hl opt">[</span>i<span class="hl opt">] =</span> d<span class="hl opt">;</span>
        idx <span class="hl opt">=</span> idx <span class="hl opt">%</span> g<span class="hl opt">-&gt;</span>factorials<span class="hl opt">[</span>i<span class="hl opt">];</span>
        <span class="hl kwd">copy</span><span class="hl opt">( &amp;</span>pp<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">], &amp;</span>p<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">], (</span>i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">) );</span>
        <span class="hl kwa">for</span> <span class="hl opt">(</span> j<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span> j<span class="hl opt">&lt;=</span>i<span class="hl opt">; ++</span>j <span class="hl opt">){</span>
            p<span class="hl opt">[</span>j<span class="hl opt">] =</span> j<span class="hl opt">+</span>d <span class="hl opt">&lt;=</span> i ? pp<span class="hl opt">[</span>j<span class="hl opt">+</span>d<span class="hl opt">] :</span> pp<span class="hl opt">[</span>j<span class="hl opt">+</span>d<span class="hl opt">-</span>i<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">];</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span>
    <span class="hl kwd">copy</span><span class="hl opt">( &amp;</span>g<span class="hl opt">-&gt;</span>perm<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">], &amp;</span>p<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">],</span> len <span class="hl opt">);</span>
<span class="hl opt">}</span>
<span class="hl kwb">void</span> <span class="hl kwd">next_permutation</span><span class="hl opt">(</span> G<span class="hl opt">*</span>p <span class="hl opt">){</span>
    <span class="hl kwb">int</span> i<span class="hl opt">=</span><span class="hl num">1</span><span class="hl opt">;</span>
    <span class="hl kwd">rotate</span><span class="hl opt">(</span> p<span class="hl opt">-&gt;</span>perm<span class="hl opt">,</span> i<span class="hl opt">);</span>
    <span class="hl kwa">while</span> <span class="hl opt">(++</span>p<span class="hl opt">-&gt;</span>count<span class="hl opt">[</span>i<span class="hl opt">] &gt;</span> i<span class="hl opt">){</span>
        p<span class="hl opt">-&gt;</span>count<span class="hl opt">[</span>i<span class="hl opt">++] =</span> <span class="hl num">0</span><span class="hl opt">;</span>
        <span class="hl kwd">rotate</span><span class="hl opt">(</span> p<span class="hl opt">-&gt;</span>perm<span class="hl opt">,</span> i <span class="hl opt">);</span>
    <span class="hl opt">}</span>
<span class="hl opt">}</span>
<span class="hl kwc">typedef</span> <span class="hl kwb">struct</span> tagTaskContext<span class="hl opt">{</span>
    <span class="hl kwb">union</span><span class="hl opt">{</span><span class="hl slc">// to avoid false sharing on multi cpu.</span>
        pthread_t thread<span class="hl opt">;</span>
        <span class="hl kwb">char</span> padding<span class="hl opt">[</span><span class="hl num">64</span><span class="hl opt">];</span>
    <span class="hl opt">};</span>
    G generator<span class="hl opt">;</span>
    <span class="hl kwb">int</span> first_index<span class="hl opt">,</span> last_index<span class="hl opt">;</span>
    Result result<span class="hl opt">;</span>
<span class="hl opt">}</span> Task<span class="hl opt">;</span>

<span class="hl kwb">void</span><span class="hl opt">*</span> <span class="hl kwd">task_body</span><span class="hl opt">(</span> <span class="hl kwb">void</span> <span class="hl opt">*</span>pvoid <span class="hl opt">){</span>
    Task<span class="hl opt">*</span> p <span class="hl opt">= (</span>Task<span class="hl opt">*)</span>pvoid<span class="hl opt">;</span>
    <span class="hl kwb">int</span> total_flips<span class="hl opt">;</span>
    <span class="hl kwb">int</span> i <span class="hl opt">=</span> p<span class="hl opt">-&gt;</span>first_index<span class="hl opt">;</span>
    <span class="hl kwb">int</span> n <span class="hl opt">=</span> p<span class="hl opt">-&gt;</span>last_index<span class="hl opt">;</span>
    <span class="hl kwd">first_permutation</span><span class="hl opt">( &amp;</span>p<span class="hl opt">-&gt;</span>generator<span class="hl opt">,</span> i <span class="hl opt">);</span>
    <span class="hl kwa">for</span><span class="hl opt">(;</span> i <span class="hl opt">&lt;</span> n<span class="hl opt">; ++</span>i<span class="hl opt">){</span>
        <span class="hl kwb">int</span> data<span class="hl opt">[</span>MAX_PROBLEM_SIZE<span class="hl opt">];</span>
        <span class="hl kwc">register</span> <span class="hl kwb">int</span> flips <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>        
        <span class="hl kwc">register</span> <span class="hl kwb">int</span> f <span class="hl opt">=</span>  p<span class="hl opt">-&gt;</span>generator<span class="hl opt">.</span>perm<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">];</span>
        <span class="hl kwa">if</span><span class="hl opt">(</span>f<span class="hl opt">){</span>
            <span class="hl kwd">copy</span><span class="hl opt">( &amp;</span>data<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">], &amp;</span>p<span class="hl opt">-&gt;</span>generator<span class="hl opt">.</span>perm<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">],</span> p<span class="hl opt">-&gt;</span>generator<span class="hl opt">.</span>length <span class="hl opt">);</span>
            <span class="hl kwa">do</span><span class="hl opt">{</span>
                <span class="hl kwd">reverse</span><span class="hl opt">(</span> data<span class="hl opt">,</span> f <span class="hl opt">);</span>
                <span class="hl opt">++</span>flips<span class="hl opt">;</span>
            <span class="hl opt">}</span><span class="hl kwa">while</span><span class="hl opt">(</span> <span class="hl kwd">unlikely</span><span class="hl opt">(</span> f <span class="hl opt">=</span> data<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] ) );</span>
        <span class="hl opt">}</span>
        total_flips <span class="hl opt">=</span> flips<span class="hl opt">;</span>
        p<span class="hl opt">-&gt;</span>result<span class="hl opt">.</span>maxflips <span class="hl opt">=</span> <span class="hl kwd">max</span><span class="hl opt">(</span>p<span class="hl opt">-&gt;</span>result<span class="hl opt">.</span>maxflips<span class="hl opt">,</span> total_flips<span class="hl opt">);</span>
        p<span class="hl opt">-&gt;</span>result<span class="hl opt">.</span>checksum <span class="hl opt">+=</span> i<span class="hl opt">%</span><span class="hl num">2</span> <span class="hl opt">==</span><span class="hl num">0</span> ? total_flips <span class="hl opt">: -</span>total_flips<span class="hl opt">;</span>
        <span class="hl kwd">next_permutation</span><span class="hl opt">( &amp;</span>p<span class="hl opt">-&gt;</span>generator <span class="hl opt">);</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
<span class="hl kwb">int</span> <span class="hl kwd">hardware_concurrency</span><span class="hl opt">(){</span><span class="hl slc">//linux specific</span>
    <span class="hl kwb">long</span> numCPU <span class="hl opt">=</span> <span class="hl kwd">sysconf</span><span class="hl opt">(</span> _SC_NPROCESSORS_ONLN <span class="hl opt">);</span>
    <span class="hl kwa">if</span><span class="hl opt">(</span> numCPU <span class="hl opt">&lt;=</span> <span class="hl num">0</span> <span class="hl opt">)</span> <span class="hl kwa">return</span> <span class="hl num">1</span><span class="hl opt">;</span>
    <span class="hl kwa">if</span><span class="hl opt">(</span> numCPU <span class="hl opt">&gt;=</span> MAX_CPU_LIMIT <span class="hl opt">)</span> <span class="hl kwa">return</span> MAX_CPU_LIMIT<span class="hl opt">;</span>
    <span class="hl kwa">return</span> <span class="hl opt">(</span><span class="hl kwb">int</span><span class="hl opt">)</span>numCPU<span class="hl opt">;</span>
<span class="hl opt">}</span>
<span class="hl kwb">const char</span><span class="hl opt">*</span> usage <span class="hl opt">=</span> <span class="hl str">&quot;usage fannkuchredux number</span><span class="hl esc">\n</span><span class="hl str">\</span>
<span class="hl str">number has to be in range [3-12]</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">;</span>
<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span><span class="hl opt">*</span> argv<span class="hl opt">[]){</span>
    <span class="hl kwb">int</span> len<span class="hl opt">;</span>
    <span class="hl kwb">int</span> factorials<span class="hl opt">[</span>MAX_PROBLEM_SIZE<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">];</span>
    <span class="hl kwb">int</span> n_cpu<span class="hl opt">;</span>
    <span class="hl kwb">int</span> i<span class="hl opt">,</span> n<span class="hl opt">,</span> index<span class="hl opt">,</span> index_max<span class="hl opt">,</span> index_step<span class="hl opt">,</span> err<span class="hl opt">;</span>
    Result result<span class="hl opt">;</span>
    Task parts<span class="hl opt">[</span>MAX_CPU_LIMIT<span class="hl opt">];</span>
    <span class="hl kwa">if</span><span class="hl opt">(</span> argc <span class="hl opt">&lt;</span> <span class="hl num">2</span> <span class="hl opt">){</span>
        <span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;%s&quot;</span><span class="hl opt">,</span> usage<span class="hl opt">);</span>
        <span class="hl kwa">return</span> <span class="hl num">1</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>
    len <span class="hl opt">=</span> <span class="hl kwd">atoi</span><span class="hl opt">(</span>argv<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">] );</span> 
    <span class="hl kwa">if</span><span class="hl opt">(</span> len <span class="hl opt">&lt;</span> <span class="hl num">3</span> <span class="hl opt">||</span> len <span class="hl opt">&gt;</span> MAX_PROBLEM_SIZE <span class="hl opt">){</span>
        <span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;%s&quot;</span><span class="hl opt">,</span> usage<span class="hl opt">);</span>
        <span class="hl kwa">return</span> <span class="hl num">2</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>
    factorials<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] =</span> <span class="hl num">1</span><span class="hl opt">;</span>
    <span class="hl kwa">for</span><span class="hl opt">(</span> i <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span> i<span class="hl opt">&lt;</span>len<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">; ++</span>i <span class="hl opt">)</span>
        factorials<span class="hl opt">[</span>i<span class="hl opt">] =</span> factorials<span class="hl opt">[</span>i<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">]*</span>i<span class="hl opt">;</span>
    n_cpu <span class="hl opt">=</span> <span class="hl kwd">hardware_concurrency</span><span class="hl opt">();</span>
    result<span class="hl opt">.</span>maxflips <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    result<span class="hl opt">.</span>checksum <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    n <span class="hl opt">=</span> <span class="hl kwd">min</span><span class="hl opt">(</span> n_cpu<span class="hl opt">,</span> MAX_CPU_LIMIT <span class="hl opt">);</span>
    index <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    index_max <span class="hl opt">=</span> factorials<span class="hl opt">[</span>len<span class="hl opt">];</span> 
    index_step <span class="hl opt">= (</span>index_max <span class="hl opt">+</span> n<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">)/</span>n<span class="hl opt">;</span>
    <span class="hl kwa">for</span><span class="hl opt">(</span>i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i<span class="hl opt">&lt;</span>n<span class="hl opt">; ++</span>i<span class="hl opt">,</span> index <span class="hl opt">+=</span> index_step<span class="hl opt">){</span>
        Task<span class="hl opt">*</span> p <span class="hl opt">= &amp;</span>parts<span class="hl opt">[</span>i<span class="hl opt">];</span>
        <span class="hl slc">//init task</span>
        <span class="hl kwd">memset</span><span class="hl opt">(</span> p<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl kwa">sizeof</span><span class="hl opt">(</span>Task<span class="hl opt">) );</span>
        p<span class="hl opt">-&gt;</span>generator<span class="hl opt">.</span>factorials <span class="hl opt">=</span> factorials<span class="hl opt">;</span>
        p<span class="hl opt">-&gt;</span>generator<span class="hl opt">.</span>length <span class="hl opt">=</span> len<span class="hl opt">;</span>
        p<span class="hl opt">-&gt;</span>first_index <span class="hl opt">=</span> index<span class="hl opt">;</span>
        p<span class="hl opt">-&gt;</span>last_index <span class="hl opt">=</span> index <span class="hl opt">+</span> index_step<span class="hl opt">;</span>
        err <span class="hl opt">=</span> <span class="hl kwd">pthread_create</span><span class="hl opt">( &amp;</span>p<span class="hl opt">-&gt;</span>thread<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> task_body<span class="hl opt">,</span> p <span class="hl opt">);</span>
        <span class="hl kwa">if</span><span class="hl opt">(</span> err <span class="hl opt">)</span> <span class="hl kwa">return</span> err<span class="hl opt">;</span>
    <span class="hl opt">}</span>    
    <span class="hl kwa">for</span><span class="hl opt">(</span>i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i<span class="hl opt">&lt;</span>n<span class="hl opt">; ++</span>i<span class="hl opt">){</span>
        Task <span class="hl opt">*</span>p <span class="hl opt">= &amp;</span>parts<span class="hl opt">[</span>i<span class="hl opt">];</span>
        err <span class="hl opt">=</span> <span class="hl kwd">pthread_join</span><span class="hl opt">(</span> p<span class="hl opt">-&gt;</span>thread<span class="hl opt">,</span> <span class="hl num">0</span> <span class="hl opt">);</span>
        <span class="hl kwa">if</span><span class="hl opt">(</span> err <span class="hl opt">)</span> <span class="hl kwa">return</span> err<span class="hl opt">;</span>
        result<span class="hl opt">.</span>maxflips <span class="hl opt">=</span> <span class="hl kwd">max</span><span class="hl opt">(</span> p<span class="hl opt">-&gt;</span>result<span class="hl opt">.</span>maxflips<span class="hl opt">,</span> result<span class="hl opt">.</span>maxflips <span class="hl opt">);</span>
        result<span class="hl opt">.</span>checksum <span class="hl opt">+=</span> p<span class="hl opt">-&gt;</span>result<span class="hl opt">.</span>checksum<span class="hl opt">;</span>
    <span class="hl opt">}</span>
    <span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;%d</span><span class="hl esc">\n</span><span class="hl str">Pfannkuchen(%d) = %d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> result<span class="hl opt">.</span>checksum<span class="hl opt">,</span> len<span class="hl opt">,</span> result<span class="hl opt">.</span>maxflips<span class="hl opt">);</span>
    <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
