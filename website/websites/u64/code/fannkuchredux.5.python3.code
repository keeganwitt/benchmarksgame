<span class="hl slc">#    The Computer Language Benchmarks Game</span>
<span class="hl slc">#    http://shootout.alioth.debian.org/</span>

<span class="hl slc">#    contributed by Isaac Gouy</span>
<span class="hl slc">#    converted to Java by Oleg Mazurov</span>
<span class="hl slc">#    converted to Python by Buck Golemon</span>
<span class="hl slc">#    modified by Justin Peel</span>

<span class="hl kwa">def</span> <span class="hl kwd">fannkuch</span><span class="hl sym">(</span>n<span class="hl sym">):</span>
    maxFlipsCount <span class="hl sym">=</span> <span class="hl num">0</span>
    permCount <span class="hl sym">=</span> <span class="hl kwa">False</span>
    checksum <span class="hl sym">=</span> <span class="hl num">0</span>

    r <span class="hl sym">=</span> n
    perm1 <span class="hl sym">=</span> <span class="hl kwb">list</span><span class="hl sym">(</span><span class="hl kwb">range</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">,</span>n<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">))</span>
    count <span class="hl sym">= [</span><span class="hl num">0</span><span class="hl sym">] *</span> r
    ranges <span class="hl sym">= [</span><span class="hl kwa">None</span><span class="hl sym">,</span> <span class="hl kwa">None</span><span class="hl sym">] + [</span><span class="hl kwb">list</span><span class="hl sym">(</span><span class="hl kwb">range</span><span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">,</span>x<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">))</span> <span class="hl kwa">for</span> x <span class="hl kwa">in</span> <span class="hl kwb">range</span><span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">,</span>n<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">)]</span>
    rxrange <span class="hl sym">=</span> <span class="hl kwb">range</span><span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">,</span>n<span class="hl sym">)</span>
    nm <span class="hl sym">=</span> n <span class="hl sym">-</span> <span class="hl num">1</span>
    <span class="hl kwa">while True</span><span class="hl sym">:</span>
        <span class="hl kwa">if</span> r <span class="hl sym">!=</span> <span class="hl num">1</span><span class="hl sym">:</span>
            count<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">:</span>r<span class="hl sym">] =</span> ranges<span class="hl sym">[</span>r<span class="hl sym">]</span>
            r <span class="hl sym">=</span> <span class="hl num">1</span>
        k<span class="hl sym">=</span>perm1<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]</span>
        <span class="hl kwa">if</span> k <span class="hl sym">!=</span> <span class="hl num">1</span><span class="hl sym">:</span>
            perm <span class="hl sym">=</span> perm1<span class="hl sym">[:]</span>
            perm<span class="hl sym">[:</span>k<span class="hl sym">] =</span> perm<span class="hl sym">[</span>k<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">::-</span><span class="hl num">1</span><span class="hl sym">]</span>
            flipsCount <span class="hl sym">=</span> <span class="hl num">1</span>
            k<span class="hl sym">=</span>perm<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]</span>
            <span class="hl kwa">while</span> k <span class="hl sym">!=</span> <span class="hl num">1</span><span class="hl sym">:</span>
                perm<span class="hl sym">[:</span>k<span class="hl sym">] =</span> perm<span class="hl sym">[</span>k<span class="hl sym">-</span><span class="hl num">1</span><span class="hl sym">::-</span><span class="hl num">1</span><span class="hl sym">]</span>
                flipsCount <span class="hl sym">+=</span> <span class="hl num">1</span>
                k<span class="hl sym">=</span>perm<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]</span>
        
            maxFlipsCount <span class="hl sym">=</span> flipsCount <span class="hl kwa">if</span> maxFlipsCount <span class="hl sym">&lt;</span> flipsCount <span class="hl kwa">else</span> maxFlipsCount
            checksum <span class="hl sym">+= -</span>flipsCount <span class="hl kwa">if</span> permCount <span class="hl kwa">else</span> flipsCount


        <span class="hl slc"># Use incremental change to generate another permutation</span>
        perm1<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">],</span>perm1<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">] =</span> perm1<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">],</span>perm1<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]</span>
        count<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">] -=</span> <span class="hl num">1</span>
        <span class="hl kwa">if not</span> count<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">]:</span>
            perm1<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">],</span>perm1<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">],</span>perm1<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">] =</span> perm1<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">],</span>perm1<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">],</span>perm1<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]</span>
            count<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">] -=</span> <span class="hl num">1</span>
            <span class="hl kwa">if not</span> count<span class="hl sym">[</span><span class="hl num">2</span><span class="hl sym">]:</span>
                <span class="hl kwa">for</span> r <span class="hl kwa">in</span> rxrange<span class="hl sym">:</span>
                    perm0 <span class="hl sym">=</span> perm1<span class="hl sym">[</span><span class="hl num">0</span><span class="hl sym">]</span>
                    perm1<span class="hl sym">[:</span>r<span class="hl sym">] =</span> perm1<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">:</span>r<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">]</span>
                    perm1<span class="hl sym">[</span>r<span class="hl sym">] =</span> perm0
                    count<span class="hl sym">[</span>r<span class="hl sym">] -=</span> <span class="hl num">1</span>
                
                    <span class="hl kwa">if</span> count<span class="hl sym">[</span>r<span class="hl sym">]:</span>
                        <span class="hl kwa">break</span>
                <span class="hl kwa">if</span> r <span class="hl sym">==</span> nm <span class="hl kwa">and</span> count<span class="hl sym">[</span>nm<span class="hl sym">] ==</span> <span class="hl num">0</span><span class="hl sym">:</span>
                    <span class="hl kwa">print</span><span class="hl sym">(</span> checksum <span class="hl sym">)</span>
                    <span class="hl kwa">return</span> maxFlipsCount
            <span class="hl kwa">else</span><span class="hl sym">:</span>
                r <span class="hl sym">=</span> <span class="hl num">2</span>
            
        permCount <span class="hl sym">=</span> <span class="hl kwa">not</span> permCount
<span class="hl kwa">from</span> sys <span class="hl kwa">import</span> argv
n <span class="hl sym">=</span> <span class="hl kwb">int</span><span class="hl sym">(</span>argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">])</span>

<span class="hl kwa">print</span><span class="hl sym">((</span> <span class="hl str">&quot;Pfannkuchen(%i) = %i&quot;</span> <span class="hl sym">% (</span>n<span class="hl sym">,</span> <span class="hl kwd">fannkuch</span><span class="hl sym">(</span>n<span class="hl sym">)) ))</span>
