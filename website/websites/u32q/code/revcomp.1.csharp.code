<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by Robert F. Tobler to process large blocks of byte arrays</span>
<span class="hl com">*/</span>

<span class="hl kwa">using</span> System<span class="hl opt">;</span>
<span class="hl kwa">using</span> System<span class="hl opt">.</span>IO<span class="hl opt">;</span>
<span class="hl kwa">using</span> System<span class="hl opt">.</span>Collections<span class="hl opt">.</span>Generic<span class="hl opt">;</span>

<span class="hl kwa">static class</span> revcomp
<span class="hl opt">{</span>
   <span class="hl kwb">struct</span> Block <span class="hl opt">{</span>
      <span class="hl kwa">public</span> <span class="hl kwb">byte</span><span class="hl opt">[]</span> Data<span class="hl opt">;</span> <span class="hl kwa">public</span> <span class="hl kwb">int</span> Count<span class="hl opt">;</span>
      <span class="hl kwa">public</span> <span class="hl kwb">int</span> <span class="hl kwd">Read</span><span class="hl opt">(</span>BinaryReader r<span class="hl opt">) {</span>
         Data <span class="hl opt">=</span> r<span class="hl opt">.</span><span class="hl kwd">ReadBytes</span><span class="hl opt">(</span><span class="hl num">16384</span><span class="hl opt">);</span> Count<span class="hl opt">++;</span> <span class="hl kwa">return</span> Data<span class="hl opt">.</span>Length<span class="hl opt">;</span>
      <span class="hl opt">}</span>
      <span class="hl kwa">public</span> Index <span class="hl kwd">IndexOf</span><span class="hl opt">(</span><span class="hl kwb">byte</span> b<span class="hl opt">,</span> <span class="hl kwb">int</span> o<span class="hl opt">) {</span>
         <span class="hl kwa">return new</span> Index <span class="hl opt">{</span> Block <span class="hl opt">=</span> Count<span class="hl opt">,</span> Pos <span class="hl opt">=</span> Array<span class="hl opt">.</span><span class="hl kwd">IndexOf</span><span class="hl opt">(</span>Data<span class="hl opt">,</span> b<span class="hl opt">,</span> o<span class="hl opt">) };</span>
      <span class="hl opt">}</span>
   <span class="hl opt">}</span>

   <span class="hl kwb">struct</span> Index <span class="hl opt">{</span>
      <span class="hl kwa">public</span> <span class="hl kwb">int</span> Block<span class="hl opt">;</span> <span class="hl kwa">public</span> <span class="hl kwb">int</span> Pos<span class="hl opt">;</span>
      <span class="hl kwa">public static readonly</span> Index None <span class="hl opt">=</span> <span class="hl kwa">new</span> Index <span class="hl opt">{</span> Block <span class="hl opt">= -</span><span class="hl num">1</span><span class="hl opt">,</span> Pos <span class="hl opt">= -</span><span class="hl num">1</span> <span class="hl opt">};</span>
      <span class="hl kwa">public</span> <span class="hl kwb">bool</span> <span class="hl kwd">InBlock</span><span class="hl opt">(</span>Block b<span class="hl opt">) {</span> <span class="hl kwa">return</span> Block <span class="hl opt">==</span> b<span class="hl opt">.</span>Count<span class="hl opt">; }</span>
   <span class="hl opt">}</span>

   <span class="hl kwb">const byte</span> Gt <span class="hl opt">= (</span><span class="hl kwb">byte</span><span class="hl opt">)</span><span class="hl str">'&gt;'</span><span class="hl opt">;</span>
   <span class="hl kwb">const byte</span> Lf <span class="hl opt">= (</span><span class="hl kwb">byte</span><span class="hl opt">)</span><span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl opt">;</span>

   <span class="hl kwa">static</span> <span class="hl kwb">void</span> <span class="hl kwd">Main</span><span class="hl opt">(</span><span class="hl kwb">string</span><span class="hl opt">[]</span> args<span class="hl opt">) {</span>
      <span class="hl kwd">InitComplements</span><span class="hl opt">();</span>
      var seq <span class="hl opt">=</span> <span class="hl kwa">new</span> List<span class="hl opt">&lt;</span><span class="hl kwb">byte</span><span class="hl opt">[]&gt;();</span>
      var b <span class="hl opt">=</span> <span class="hl kwa">new</span> Block <span class="hl opt">{</span> Count <span class="hl opt">= -</span><span class="hl num">1</span> <span class="hl opt">};</span>
      Index line <span class="hl opt">=</span> Index<span class="hl opt">.</span>None<span class="hl opt">,</span> start <span class="hl opt">=</span> Index<span class="hl opt">.</span>None<span class="hl opt">,</span> end <span class="hl opt">=</span> Index<span class="hl opt">.</span>None<span class="hl opt">;</span>
      <span class="hl kwa">using</span> <span class="hl opt">(</span>var r <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">BinaryReader</span><span class="hl opt">(</span>Console<span class="hl opt">.</span><span class="hl kwd">OpenStandardInput</span><span class="hl opt">())) {</span>
         <span class="hl kwa">using</span> <span class="hl opt">(</span>var w <span class="hl opt">=</span> Console<span class="hl opt">.</span><span class="hl kwd">OpenStandardOutput</span><span class="hl opt">()) {</span>
            <span class="hl kwa">while</span> <span class="hl opt">(</span>b<span class="hl opt">.</span><span class="hl kwd">Read</span><span class="hl opt">(</span>r<span class="hl opt">) &gt;</span> <span class="hl num">0</span><span class="hl opt">) {</span>
               seq<span class="hl opt">.</span><span class="hl kwd">Add</span><span class="hl opt">(</span>b<span class="hl opt">.</span>Data<span class="hl opt">);</span>
               <span class="hl kwa">if</span> <span class="hl opt">(</span>line<span class="hl opt">.</span>Pos <span class="hl opt">&lt;</span> <span class="hl num">0</span><span class="hl opt">)</span> line <span class="hl opt">=</span> b<span class="hl opt">.</span><span class="hl kwd">IndexOf</span><span class="hl opt">(</span>Gt<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">);</span>
               <span class="hl kwa">while</span> <span class="hl opt">(</span>line<span class="hl opt">.</span>Pos <span class="hl opt">&gt;=</span> <span class="hl num">0</span><span class="hl opt">) {</span>
                  <span class="hl kwa">if</span> <span class="hl opt">(</span>start<span class="hl opt">.</span>Pos <span class="hl opt">&lt;</span> <span class="hl num">0</span><span class="hl opt">) {</span>
                     var off <span class="hl opt">=</span> line<span class="hl opt">.</span><span class="hl kwd">InBlock</span><span class="hl opt">(</span>b<span class="hl opt">)</span> ? line<span class="hl opt">.</span>Pos <span class="hl opt">:</span> <span class="hl num">0</span><span class="hl opt">;</span>
                     start <span class="hl opt">=</span> b<span class="hl opt">.</span><span class="hl kwd">IndexOf</span><span class="hl opt">(</span>Lf<span class="hl opt">,</span> off<span class="hl opt">);</span>
                     <span class="hl kwa">if</span> <span class="hl opt">(</span>start<span class="hl opt">.</span>Pos <span class="hl opt">&lt;</span> <span class="hl num">0</span><span class="hl opt">) {</span>
                         w<span class="hl opt">.</span><span class="hl kwd">Write</span><span class="hl opt">(</span>b<span class="hl opt">.</span>Data<span class="hl opt">,</span> off<span class="hl opt">,</span> b<span class="hl opt">.</span>Data<span class="hl opt">.</span>Length <span class="hl opt">-</span> off<span class="hl opt">);</span>
                         seq<span class="hl opt">.</span><span class="hl kwd">Clear</span><span class="hl opt">();</span> <span class="hl kwa">break</span><span class="hl opt">;</span>
                     <span class="hl opt">}</span>
                     w<span class="hl opt">.</span><span class="hl kwd">Write</span><span class="hl opt">(</span>b<span class="hl opt">.</span>Data<span class="hl opt">,</span> off<span class="hl opt">,</span> start<span class="hl opt">.</span>Pos <span class="hl opt">+</span> <span class="hl num">1</span> <span class="hl opt">-</span> off<span class="hl opt">);</span>
                  <span class="hl opt">}</span>
                  <span class="hl kwa">if</span> <span class="hl opt">(</span>end<span class="hl opt">.</span>Pos <span class="hl opt">&lt;</span> <span class="hl num">0</span><span class="hl opt">) {</span>
                     end <span class="hl opt">=</span> b<span class="hl opt">.</span><span class="hl kwd">IndexOf</span><span class="hl opt">(</span>Gt<span class="hl opt">,</span> start<span class="hl opt">.</span><span class="hl kwd">InBlock</span><span class="hl opt">(</span>b<span class="hl opt">)</span> ? start<span class="hl opt">.</span>Pos <span class="hl opt">:</span> <span class="hl num">0</span><span class="hl opt">);</span>
                     <span class="hl kwa">if</span> <span class="hl opt">(</span>end<span class="hl opt">.</span>Pos <span class="hl opt">&lt;</span> <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">break</span><span class="hl opt">;</span>
                  <span class="hl opt">}</span>
                  w<span class="hl opt">.</span><span class="hl kwd">Reverse</span><span class="hl opt">(</span>start<span class="hl opt">.</span>Pos<span class="hl opt">,</span> end<span class="hl opt">.</span>Pos<span class="hl opt">,</span> seq<span class="hl opt">);</span>
                  <span class="hl kwa">if</span> <span class="hl opt">(</span>seq<span class="hl opt">.</span>Count <span class="hl opt">&gt;</span> <span class="hl num">1</span><span class="hl opt">)</span> seq<span class="hl opt">.</span><span class="hl kwd">RemoveRange</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> seq<span class="hl opt">.</span>Count <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">);</span>
                  line <span class="hl opt">=</span> end<span class="hl opt">;</span> end <span class="hl opt">=</span> Index<span class="hl opt">.</span>None<span class="hl opt">;</span> start <span class="hl opt">=</span> Index<span class="hl opt">.</span>None<span class="hl opt">;</span>
               <span class="hl opt">}</span>
            <span class="hl opt">}</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>start<span class="hl opt">.</span>Pos <span class="hl opt">&gt;=</span> <span class="hl num">0</span> <span class="hl opt">&amp;&amp;</span> end<span class="hl opt">.</span>Pos <span class="hl opt">&lt;</span> <span class="hl num">0</span><span class="hl opt">)</span>
               w<span class="hl opt">.</span><span class="hl kwd">Reverse</span><span class="hl opt">(</span>start<span class="hl opt">.</span>Pos<span class="hl opt">,</span> seq<span class="hl opt">[</span>seq<span class="hl opt">.</span>Count <span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">].</span>Length<span class="hl opt">,</span> seq<span class="hl opt">);</span>
         <span class="hl opt">}</span>
      <span class="hl opt">}</span>
   <span class="hl opt">}</span>

   <span class="hl kwb">const string</span> Seq <span class="hl opt">=</span> <span class="hl str">&quot;ABCDGHKMRTVYabcdghkmrtvy&quot;</span><span class="hl opt">;</span>
   <span class="hl kwb">const string</span> Rev <span class="hl opt">=</span> <span class="hl str">&quot;TVGHCDMKYABRTVGHCDMKYABR&quot;</span><span class="hl opt">;</span>
   <span class="hl kwa">static</span> <span class="hl kwb">byte</span><span class="hl opt">[]</span> comp <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwb">byte</span><span class="hl opt">[</span><span class="hl num">256</span><span class="hl opt">];</span>

   <span class="hl kwa">static</span> <span class="hl kwb">void</span> <span class="hl kwd">InitComplements</span><span class="hl opt">() {</span>
      <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">byte</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> <span class="hl num">255</span><span class="hl opt">;</span> i<span class="hl opt">++)</span> comp<span class="hl opt">[</span>i<span class="hl opt">] =</span> i<span class="hl opt">;</span>
      <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> Seq<span class="hl opt">.</span>Length<span class="hl opt">;</span> i<span class="hl opt">++)</span>
         comp<span class="hl opt">[(</span><span class="hl kwb">byte</span><span class="hl opt">)</span>Seq<span class="hl opt">[</span>i<span class="hl opt">]] = (</span><span class="hl kwb">byte</span><span class="hl opt">)</span>Rev<span class="hl opt">[</span>i<span class="hl opt">];</span>
      comp<span class="hl opt">[</span>Lf<span class="hl opt">] =</span> <span class="hl num">0</span><span class="hl opt">;</span>  comp<span class="hl opt">[(</span><span class="hl kwb">byte</span><span class="hl opt">)</span><span class="hl str">' '</span><span class="hl opt">] =</span> <span class="hl num">0</span><span class="hl opt">;</span>
   <span class="hl opt">}</span>

   <span class="hl kwb">const int</span> LineLen <span class="hl opt">=</span> <span class="hl num">61</span><span class="hl opt">;</span>
   <span class="hl kwb">const int</span> BufSize <span class="hl opt">=</span> LineLen <span class="hl opt">*</span> <span class="hl num">269</span><span class="hl opt">;</span>
   <span class="hl kwa">static</span> <span class="hl kwb">byte</span><span class="hl opt">[]</span> buf <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwb">byte</span><span class="hl opt">[</span>BufSize<span class="hl opt">];</span>

   <span class="hl kwa">static</span> <span class="hl kwb">void</span> <span class="hl kwd">Reverse</span><span class="hl opt">(</span><span class="hl kwa">this</span> Stream w<span class="hl opt">,</span> <span class="hl kwb">int</span> si<span class="hl opt">,</span> <span class="hl kwb">int</span> ei<span class="hl opt">,</span> List<span class="hl opt">&lt;</span><span class="hl kwb">byte</span><span class="hl opt">[]&gt;</span> bl<span class="hl opt">) {</span>
      <span class="hl kwb">int</span> bi <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">,</span> line <span class="hl opt">=</span> LineLen <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">;</span>
      <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> ri <span class="hl opt">=</span> bl<span class="hl opt">.</span>Count<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">;</span> ri <span class="hl opt">&gt;=</span> <span class="hl num">0</span><span class="hl opt">;</span> ri<span class="hl opt">--) {</span>
         var b <span class="hl opt">=</span> bl<span class="hl opt">[</span>ri<span class="hl opt">];</span> <span class="hl kwb">int</span> off <span class="hl opt">=</span> ri <span class="hl opt">==</span> <span class="hl num">0</span> ? si <span class="hl opt">:</span> <span class="hl num">0</span><span class="hl opt">;</span>
         <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">= (</span>ri <span class="hl opt">==</span> bl<span class="hl opt">.</span>Count<span class="hl opt">-</span><span class="hl num">1</span> ? ei <span class="hl opt">:</span> b<span class="hl opt">.</span>Length<span class="hl opt">)-</span><span class="hl num">1</span><span class="hl opt">;</span> i <span class="hl opt">&gt;=</span> off<span class="hl opt">;</span> i<span class="hl opt">--) {</span>
            var c <span class="hl opt">=</span> comp<span class="hl opt">[</span>b<span class="hl opt">[</span>i<span class="hl opt">]];</span> <span class="hl kwa">if</span> <span class="hl opt">(</span>c <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">)</span> buf<span class="hl opt">[</span>bi<span class="hl opt">++] =</span> c<span class="hl opt">;</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>bi <span class="hl opt">==</span> line<span class="hl opt">) {</span>
               buf<span class="hl opt">[</span>bi<span class="hl opt">++] =</span> Lf<span class="hl opt">;</span> line <span class="hl opt">+=</span> LineLen<span class="hl opt">;</span>
               <span class="hl kwa">if</span> <span class="hl opt">(</span>bi <span class="hl opt">==</span> BufSize<span class="hl opt">) {</span>
                  w<span class="hl opt">.</span><span class="hl kwd">Write</span><span class="hl opt">(</span>buf<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> BufSize<span class="hl opt">);</span> bi <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> line <span class="hl opt">=</span> LineLen <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">;</span>
               <span class="hl opt">}</span>
            <span class="hl opt">}</span>
         <span class="hl opt">}</span>
      <span class="hl opt">}</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>bi <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">) {</span>
          <span class="hl kwa">if</span> <span class="hl opt">(</span>buf<span class="hl opt">[</span>bi<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">] !=</span> Lf<span class="hl opt">)</span> buf<span class="hl opt">[</span>bi<span class="hl opt">++] =</span> Lf<span class="hl opt">;</span> w<span class="hl opt">.</span><span class="hl kwd">Write</span><span class="hl opt">(</span>buf<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> bi<span class="hl opt">);</span>
      <span class="hl opt">}</span>
   <span class="hl opt">}</span>
<span class="hl opt">}</span>
