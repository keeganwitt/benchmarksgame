<span class="hl com">(* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * contributed by Troestler Christophe</span>
<span class="hl com"> * modified by Mauricio Fernandez</span>
<span class="hl com"></span>
<span class="hl com"> * modified by Fabrice Le Fessant (submitted as Ocaml #4)</span>
<span class="hl com">    * speedup from 16.65sec to 4.31sec on x64</span>
<span class="hl com">    * distinct implementation on 32bits and 64bits</span>
<span class="hl com">    * cache of random generator</span>
<span class="hl com">    * parallelization</span>
<span class="hl com"></span>
<span class="hl com"> * modified by Fabrice Le Fessant</span>
<span class="hl com">    * use chunks for random too</span>
<span class="hl com"> *)</span>

<span class="hl kwa">let</span> arch64 <span class="hl opt">=</span>
  <span class="hl kwa">match</span> <span class="hl kwc">Sys</span><span class="hl opt">.</span>word_size <span class="hl kwa">with</span>
      <span class="hl num">32</span> <span class="hl opt">-&gt;</span> <span class="hl kwa">false</span>
    | <span class="hl num">64</span> <span class="hl opt">-&gt;</span> <span class="hl kwa">true</span>
    | _ <span class="hl opt">-&gt;</span> <span class="hl kwa">assert false</span>

<span class="hl kwa">module</span> <span class="hl kwd">Spawner</span> <span class="hl opt">:</span> <span class="hl kwa">sig</span>

  <span class="hl kwa">val</span> spawn <span class="hl opt">:</span> <span class="hl kwb">bool</span> <span class="hl opt">-&gt; (</span><span class="hl kwb">unit</span> <span class="hl opt">-&gt;</span> <span class="hl kwb">unit</span><span class="hl opt">) -&gt; (</span><span class="hl kwb">unit</span> <span class="hl opt">-&gt;</span> <span class="hl kwb">unit</span><span class="hl opt">) -&gt;</span> <span class="hl kwb">unit</span>

 <span class="hl kwa">end</span> <span class="hl opt">=</span> <span class="hl kwa">struct</span>

<span class="hl kwa">let</span> inbuf <span class="hl opt">=</span> <span class="hl kwc">String</span><span class="hl opt">.</span>create <span class="hl num">1</span>

<span class="hl kwa">let</span> wait_for <span class="hl opt">=</span> <span class="hl kwb">ref</span> <span class="hl kwd">None</span>
<span class="hl kwa">let</span> spawn spawn prelude postlude <span class="hl opt">=</span>
  <span class="hl kwa">begin</span>
  <span class="hl kwa">end</span><span class="hl opt">;</span>
  <span class="hl kwa">if</span> spawn <span class="hl kwa">then begin</span>
    <span class="hl kwa">let</span> <span class="hl opt">(</span>ix<span class="hl opt">,</span> ox<span class="hl opt">) =</span> <span class="hl kwc">Unix</span><span class="hl opt">.</span>pipe <span class="hl opt">()</span> <span class="hl kwa">in</span>
      <span class="hl kwa">match</span> <span class="hl kwc">Unix</span><span class="hl opt">.</span>fork <span class="hl opt">()</span> <span class="hl kwa">with</span>
	  <span class="hl opt">-</span><span class="hl num">1</span> <span class="hl opt">-&gt;</span> <span class="hl kwa">assert false</span>
	| <span class="hl num">0</span> <span class="hl opt">-&gt;</span>
	    prelude <span class="hl opt">();</span>
	    <span class="hl kwa">begin</span>
	      <span class="hl kwa">match</span> <span class="hl opt">!</span>wait_for <span class="hl kwa">with</span>
		  <span class="hl kwd">None</span> <span class="hl opt">-&gt; ()</span>
		| <span class="hl kwd">Some</span> ix <span class="hl opt">-&gt;</span>
		    ignore <span class="hl opt">(</span><span class="hl kwc">Unix</span><span class="hl opt">.</span>read ix inbuf <span class="hl num">0 1</span><span class="hl opt">)</span>
	    <span class="hl kwa">end</span><span class="hl opt">;</span>
	    postlude <span class="hl opt">();</span>
	    ignore <span class="hl opt">(</span><span class="hl kwc">Unix</span><span class="hl opt">.</span>write ox <span class="hl str">&quot;X&quot;</span> <span class="hl num">0 1</span><span class="hl opt">);</span>
	    <span class="hl kwc">Unix</span><span class="hl opt">.</span>close ox<span class="hl opt">;</span>
	    exit <span class="hl num">0</span>
	| _ <span class="hl opt">-&gt;</span>
	    wait_for <span class="hl opt">:=</span> <span class="hl kwd">Some</span> ix<span class="hl opt">;</span>
  <span class="hl kwa">end else begin</span>
    prelude <span class="hl opt">();</span>
    <span class="hl kwa">begin</span>
      <span class="hl kwa">match</span> <span class="hl opt">!</span>wait_for <span class="hl kwa">with</span>
	  <span class="hl kwd">None</span> <span class="hl opt">-&gt; ()</span>
	| <span class="hl kwd">Some</span> ix <span class="hl opt">-&gt;</span>
	    ignore <span class="hl opt">(</span><span class="hl kwc">Unix</span><span class="hl opt">.</span>read ix inbuf <span class="hl num">0 1</span><span class="hl opt">);</span>
    <span class="hl kwa">end</span><span class="hl opt">;</span>
    postlude <span class="hl opt">();</span>
  <span class="hl kwa">end</span>


<span class="hl kwa">end</span>

<span class="hl kwa">let</span> alu <span class="hl opt">=</span> <span class="hl str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG\</span>
<span class="hl str">GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA\</span>
<span class="hl str">CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT\</span>
<span class="hl str">ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA\</span>
<span class="hl str">GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG\</span>
<span class="hl str">AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC\</span>
<span class="hl str">AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span>

<span class="hl kwa">let</span> iub <span class="hl opt">= [</span>| <span class="hl opt">(</span><span class="hl str">'a'</span><span class="hl opt">,</span> <span class="hl num">0.27</span><span class="hl opt">);  (</span><span class="hl str">'c'</span><span class="hl opt">,</span> <span class="hl num">0.12</span><span class="hl opt">);  (</span><span class="hl str">'g'</span><span class="hl opt">,</span> <span class="hl num">0.12</span><span class="hl opt">);  (</span><span class="hl str">'t'</span><span class="hl opt">,</span> <span class="hl num">0.27</span><span class="hl opt">);</span>
	     <span class="hl opt">(</span><span class="hl str">'B'</span><span class="hl opt">,</span> <span class="hl num">0.02</span><span class="hl opt">);  (</span><span class="hl str">'D'</span><span class="hl opt">,</span> <span class="hl num">0.02</span><span class="hl opt">);  (</span><span class="hl str">'H'</span><span class="hl opt">,</span> <span class="hl num">0.02</span><span class="hl opt">);  (</span><span class="hl str">'K'</span><span class="hl opt">,</span> <span class="hl num">0.02</span><span class="hl opt">);</span>
	     <span class="hl opt">(</span><span class="hl str">'M'</span><span class="hl opt">,</span> <span class="hl num">0.02</span><span class="hl opt">);  (</span><span class="hl str">'N'</span><span class="hl opt">,</span> <span class="hl num">0.02</span><span class="hl opt">);  (</span><span class="hl str">'R'</span><span class="hl opt">,</span> <span class="hl num">0.02</span><span class="hl opt">);  (</span><span class="hl str">'S'</span><span class="hl opt">,</span> <span class="hl num">0.02</span><span class="hl opt">);</span>
	     <span class="hl opt">(</span><span class="hl str">'V'</span><span class="hl opt">,</span> <span class="hl num">0.02</span><span class="hl opt">);  (</span><span class="hl str">'W'</span><span class="hl opt">,</span> <span class="hl num">0.02</span><span class="hl opt">);  (</span><span class="hl str">'Y'</span><span class="hl opt">,</span> <span class="hl num">0.02</span><span class="hl opt">);</span>  |<span class="hl opt">]</span>

<span class="hl kwa">let</span> homosapiens <span class="hl opt">= [</span>| <span class="hl opt">(</span><span class="hl str">'a'</span><span class="hl opt">,</span> <span class="hl num">0.3029549426680</span><span class="hl opt">);    (</span><span class="hl str">'c'</span><span class="hl opt">,</span> <span class="hl num">0.1979883004921</span><span class="hl opt">);</span>
		     <span class="hl opt">(</span><span class="hl str">'g'</span><span class="hl opt">,</span> <span class="hl num">0.1975473066391</span><span class="hl opt">);    (</span><span class="hl str">'t'</span><span class="hl opt">,</span> <span class="hl num">0.3015094502008</span><span class="hl opt">);</span>  |<span class="hl opt">]</span>

<span class="hl com">(* Random number generator *)</span>
<span class="hl kwa">let</span> im <span class="hl opt">=</span> <span class="hl num">139968</span>
<span class="hl kwa">and</span> ia <span class="hl opt">=</span> <span class="hl num">3877</span>
<span class="hl kwa">and</span> ic <span class="hl opt">=</span> <span class="hl num">29573</span>

<span class="hl kwa">let</span> last <span class="hl opt">=</span> <span class="hl kwb">ref</span> <span class="hl num">42</span> <span class="hl kwa">and</span> im_f <span class="hl opt">=</span> <span class="hl kwb">float</span> im


<span class="hl kwa">let</span> cache <span class="hl opt">=</span>
  <span class="hl kwa">let</span> im <span class="hl opt">=</span> <span class="hl num">139968</span>
  <span class="hl kwa">and</span> ia <span class="hl opt">=</span> <span class="hl num">3877</span>
  <span class="hl kwa">and</span> ic <span class="hl opt">=</span> <span class="hl num">29573</span> <span class="hl kwa">in</span>
  <span class="hl kwc">Array</span><span class="hl opt">.</span>init im  <span class="hl opt">(</span><span class="hl kwa">fun</span> i <span class="hl opt">-&gt;  (</span>i <span class="hl opt">*</span> ia <span class="hl opt">+</span> ic<span class="hl opt">)</span> <span class="hl kwa">mod</span> im<span class="hl opt">)</span>

<span class="hl kwa">let</span> gen_random  <span class="hl opt">() =</span>
  <span class="hl kwa">let</span> n <span class="hl opt">=</span> cache<span class="hl opt">.(!</span>last<span class="hl opt">)</span> <span class="hl kwa">in</span>
    last <span class="hl opt">:=</span> n<span class="hl opt">;</span>
    n

<span class="hl kwa">module</span> <span class="hl kwd">Cumul_tbl</span> <span class="hl opt">:</span> <span class="hl kwa">sig</span>
   <span class="hl kwa">val</span> make <span class="hl opt">: (</span>char <span class="hl opt">*</span> <span class="hl kwb">float</span><span class="hl opt">)</span> array <span class="hl opt">-&gt;</span> <span class="hl kwb">string</span> <span class="hl opt">*</span> <span class="hl kwb">int</span> array
<span class="hl kwa">end</span> <span class="hl opt">=</span>
<span class="hl kwa">struct</span>
  <span class="hl kwa">type</span> t <span class="hl opt">= {</span> probs <span class="hl opt">:</span> <span class="hl kwb">float</span> array<span class="hl opt">;</span>
	     chars <span class="hl opt">:</span> char array<span class="hl opt">;</span>
	     cache <span class="hl opt">:</span> char array<span class="hl opt">; }</span>

<span class="hl com">(* Dichotomy is actually slower than linear search on small tables. *)</span>
  <span class="hl kwa">let</span> find t p <span class="hl opt">=</span>
    <span class="hl kwa">let</span> ps <span class="hl opt">=</span> t<span class="hl opt">.</span>probs <span class="hl kwa">in</span>
    <span class="hl kwa">let</span> i <span class="hl opt">=</span> <span class="hl kwb">ref</span> <span class="hl num">0</span> <span class="hl kwa">in</span>
      <span class="hl kwa">while</span> p <span class="hl opt">&gt;=</span> ps<span class="hl opt">.(!</span>i<span class="hl opt">)</span> <span class="hl kwa">do</span> incr i <span class="hl kwa">done</span><span class="hl opt">;</span>
      <span class="hl opt">!</span>i

  <span class="hl kwa">let</span> rand_char t <span class="hl opt">=</span>
    <span class="hl kwa">let</span> n <span class="hl opt">=</span> gen_random <span class="hl opt">()</span> <span class="hl kwa">in</span>
    <span class="hl kwa">let</span> c <span class="hl opt">=</span>  t<span class="hl opt">.</span>cache<span class="hl opt">.(</span>n<span class="hl opt">)</span> <span class="hl kwa">in</span>
      <span class="hl kwa">if</span> c <span class="hl opt">=</span> <span class="hl str">'</span><span class="hl esc">\000</span><span class="hl str">'</span> <span class="hl kwa">then</span>
	<span class="hl kwa">let</span> p <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">. *.</span> <span class="hl kwb">float</span> n <span class="hl opt">/.</span> im_f <span class="hl kwa">in</span>
	<span class="hl kwa">let</span> i <span class="hl opt">=</span> find t p <span class="hl kwa">in</span>
	  <span class="hl kwa">let</span> c <span class="hl opt">=</span> t<span class="hl opt">.</span>chars<span class="hl opt">.(</span>i<span class="hl opt">)</span> <span class="hl kwa">in</span>
	    t<span class="hl opt">.</span>cache<span class="hl opt">.(</span>n<span class="hl opt">) &lt;-</span> c<span class="hl opt">;</span>
	    c
      <span class="hl kwa">else</span>
	c

  <span class="hl kwa">let</span> rand_char2 t <span class="hl opt">=</span>
    <span class="hl kwa">let</span> n <span class="hl opt">=</span> gen_random <span class="hl opt">()</span> <span class="hl kwa">in</span>
    <span class="hl kwa">let</span> c <span class="hl opt">=</span>  t<span class="hl opt">.</span>cache<span class="hl opt">.(</span>n<span class="hl opt">)</span> <span class="hl kwa">in</span>
      <span class="hl kwa">if</span> c <span class="hl opt">=</span> <span class="hl str">'</span><span class="hl esc">\000</span><span class="hl str">'</span> <span class="hl kwa">then</span>
	<span class="hl kwa">let</span> p <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">. *.</span> <span class="hl kwb">float</span> n <span class="hl opt">/.</span> im_f <span class="hl kwa">in</span>
	<span class="hl kwa">let</span> i <span class="hl opt">=</span> find t p <span class="hl kwa">in</span>
	  <span class="hl kwa">let</span> c <span class="hl opt">=</span> t<span class="hl opt">.</span>chars<span class="hl opt">.(</span>i<span class="hl opt">)</span> <span class="hl kwa">in</span>
	    t<span class="hl opt">.</span>cache<span class="hl opt">.(</span>n<span class="hl opt">) &lt;-</span> c<span class="hl opt">;</span>
	    <span class="hl opt">(</span>c<span class="hl opt">,</span>n<span class="hl opt">)</span>
      <span class="hl kwa">else</span>
	<span class="hl opt">(</span>c<span class="hl opt">,</span>n<span class="hl opt">)</span>


  <span class="hl kwa">let</span> make a <span class="hl opt">=</span>
    <span class="hl kwa">let</span> len <span class="hl opt">=</span> <span class="hl kwc">Array</span><span class="hl opt">.</span>length a <span class="hl kwa">in</span>
    <span class="hl kwa">let</span> chars <span class="hl opt">=</span> <span class="hl kwc">Array</span><span class="hl opt">.</span>create len <span class="hl str">'x'</span> <span class="hl kwa">in</span>
    <span class="hl kwa">let</span> probs <span class="hl opt">=</span> <span class="hl kwc">Array</span><span class="hl opt">.</span>create len <span class="hl num">0</span><span class="hl opt">.</span> <span class="hl kwa">in</span>
    <span class="hl kwa">let</span> p <span class="hl opt">=</span> <span class="hl kwb">ref</span> <span class="hl num">0.0</span> <span class="hl kwa">in</span>
      <span class="hl kwa">for</span> i <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> len<span class="hl opt">-</span><span class="hl num">1</span> <span class="hl kwa">do</span>
	<span class="hl kwa">let</span> <span class="hl opt">(</span>c<span class="hl opt">,</span> p1<span class="hl opt">) =</span> a<span class="hl opt">.(</span>i<span class="hl opt">)</span> <span class="hl kwa">in</span>
	  chars<span class="hl opt">.(</span>i<span class="hl opt">) &lt;-</span> c<span class="hl opt">;</span>
	  <span class="hl kwa">let</span> p0 <span class="hl opt">= !</span>p <span class="hl opt">+.</span> p1 <span class="hl kwa">in</span>
	    p <span class="hl opt">:=</span> p0<span class="hl opt">;</span>
	    probs<span class="hl opt">.(</span>i<span class="hl opt">) &lt;-</span> p0
      <span class="hl kwa">done</span><span class="hl opt">;</span>
      <span class="hl kwa">let</span> t <span class="hl opt">=</span>
	<span class="hl opt">{</span>
	  probs <span class="hl opt">=</span> probs<span class="hl opt">;</span>
	  chars <span class="hl opt">=</span> chars<span class="hl opt">;</span>
	  cache <span class="hl opt">=</span> <span class="hl kwc">Array</span><span class="hl opt">.</span>create im <span class="hl str">'</span><span class="hl esc">\000</span><span class="hl str">'</span><span class="hl opt">;</span>
	<span class="hl opt">}</span>
      <span class="hl kwa">in</span>
      <span class="hl kwa">let</span> s <span class="hl opt">=</span> <span class="hl kwc">String</span><span class="hl opt">.</span>create im <span class="hl kwa">in</span>
      <span class="hl kwa">let</span> ns <span class="hl opt">=</span> <span class="hl kwc">Array</span><span class="hl opt">.</span>create im <span class="hl num">0</span> <span class="hl kwa">in</span>
	<span class="hl kwa">for</span> i <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> im<span class="hl opt">-</span><span class="hl num">1</span> <span class="hl kwa">do</span>
	  <span class="hl kwa">let</span> <span class="hl opt">(</span>c<span class="hl opt">,</span>n<span class="hl opt">) =</span> rand_char2 t <span class="hl kwa">in</span>
	    s<span class="hl opt">.[</span>i<span class="hl opt">] &lt;-</span> c<span class="hl opt">;</span>
	    ns<span class="hl opt">.(</span>i<span class="hl opt">) &lt;-</span> n
	<span class="hl kwa">done</span><span class="hl opt">;</span>
	<span class="hl opt">(</span>s<span class="hl opt">,</span> ns<span class="hl opt">)</span>

<span class="hl kwa">end</span>

<span class="hl kwa">let</span> width <span class="hl opt">=</span> <span class="hl num">60</span>

<span class="hl kwa">module</span> <span class="hl kwd">IMPLEMENTATION32</span> <span class="hl opt">=</span> <span class="hl kwa">struct</span>

<span class="hl kwa">module</span> <span class="hl kwd">Buffer</span> <span class="hl opt">:</span> <span class="hl kwa">sig</span>

  <span class="hl kwa">val</span> add_substring <span class="hl opt">:</span> <span class="hl kwb">string</span> <span class="hl opt">-&gt;</span> <span class="hl kwb">int</span> <span class="hl opt">-&gt;</span> <span class="hl kwb">int</span> <span class="hl opt">-&gt;</span> <span class="hl kwb">unit</span>
  <span class="hl kwa">val</span> add_string <span class="hl opt">:</span> <span class="hl kwb">string</span> <span class="hl opt">-&gt;</span> <span class="hl kwb">unit</span>
  <span class="hl kwa">val</span> add_char <span class="hl opt">:</span> char <span class="hl opt">-&gt;</span> <span class="hl kwb">unit</span>

  <span class="hl kwa">val</span> clear <span class="hl opt">:</span> <span class="hl kwb">unit</span> <span class="hl opt">-&gt;</span> <span class="hl kwb">unit</span>
  <span class="hl kwa">val</span> print <span class="hl opt">:</span> <span class="hl kwb">unit</span> <span class="hl opt">-&gt;</span> <span class="hl kwb">unit</span>

<span class="hl kwa">end</span> <span class="hl opt">=</span> <span class="hl kwa">struct</span>

  <span class="hl kwa">let</span> buffer_len <span class="hl opt">=</span> <span class="hl num">1_000_000</span>
  <span class="hl kwa">let</span> buffers <span class="hl opt">=</span> <span class="hl kwc">Array</span><span class="hl opt">.</span>init <span class="hl num">150</span> <span class="hl opt">(</span><span class="hl kwa">fun</span> _ <span class="hl opt">-&gt;</span> <span class="hl kwc">String</span><span class="hl opt">.</span>create buffer_len<span class="hl opt">)</span>
  <span class="hl kwa">let</span> nbuffer <span class="hl opt">=</span> <span class="hl kwb">ref</span> <span class="hl num">0</span>
  <span class="hl kwa">let</span> buffer_pos <span class="hl opt">=</span> <span class="hl kwb">ref</span> <span class="hl num">0</span>
  <span class="hl kwa">let</span> current_buffer <span class="hl opt">=</span> <span class="hl kwb">ref</span> buffers<span class="hl opt">.(</span><span class="hl num">0</span><span class="hl opt">)</span>

  <span class="hl kwa">let</span> add_substring s pos len <span class="hl opt">=</span>
    <span class="hl kwa">let</span> rem <span class="hl opt">=</span> buffer_len <span class="hl opt">- !</span>buffer_pos <span class="hl kwa">in</span>
      <span class="hl kwa">if</span> rem <span class="hl opt">&gt;=</span> len <span class="hl kwa">then begin</span>
	<span class="hl kwc">String</span><span class="hl opt">.</span>blit s pos <span class="hl opt">!</span>current_buffer <span class="hl opt">!</span>buffer_pos len<span class="hl opt">;</span>
	buffer_pos <span class="hl opt">:= !</span>buffer_pos <span class="hl opt">+</span> len
      <span class="hl kwa">end else</span>
	<span class="hl kwa">if</span> rem <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl kwa">then begin</span>
	  incr nbuffer<span class="hl opt">;</span>
	  current_buffer <span class="hl opt">:=</span> buffers<span class="hl opt">.(!</span>nbuffer<span class="hl opt">);</span>
	    <span class="hl kwc">String</span><span class="hl opt">.</span>blit s pos <span class="hl opt">!</span>current_buffer <span class="hl num">0</span> len<span class="hl opt">;</span>
	    buffer_pos <span class="hl opt">:=</span> len<span class="hl opt">;</span>
	<span class="hl kwa">end else begin</span>
	  <span class="hl kwc">String</span><span class="hl opt">.</span>blit s pos <span class="hl opt">!</span>current_buffer <span class="hl opt">!</span>buffer_pos rem<span class="hl opt">;</span>
	  incr nbuffer<span class="hl opt">;</span>
	  current_buffer <span class="hl opt">:=</span> buffers<span class="hl opt">.(!</span>nbuffer<span class="hl opt">);</span>
	  <span class="hl kwa">let</span> len2 <span class="hl opt">=</span> len <span class="hl opt">-</span> rem <span class="hl kwa">in</span>
	    <span class="hl kwc">String</span><span class="hl opt">.</span>blit s <span class="hl opt">(</span>pos<span class="hl opt">+</span>rem<span class="hl opt">) !</span>current_buffer <span class="hl num">0</span> len2<span class="hl opt">;</span>
	    buffer_pos <span class="hl opt">:=</span> len2<span class="hl opt">;</span>
	<span class="hl kwa">end</span>

  <span class="hl kwa">let</span> add_string s <span class="hl opt">=</span>
    add_substring s <span class="hl num">0</span> <span class="hl opt">(</span><span class="hl kwc">String</span><span class="hl opt">.</span>length s<span class="hl opt">)</span>

  <span class="hl kwa">let</span> add_char c <span class="hl opt">=</span>
    <span class="hl kwa">if</span> <span class="hl opt">!</span>buffer_pos <span class="hl opt">&lt;</span> buffer_len <span class="hl kwa">then begin</span>
       <span class="hl opt">!</span>current_buffer<span class="hl opt">.[!</span>buffer_pos<span class="hl opt">] &lt;-</span> c<span class="hl opt">;</span>
      incr buffer_pos
    <span class="hl kwa">end else begin</span>
      incr nbuffer<span class="hl opt">;</span>
      current_buffer <span class="hl opt">:=</span> buffers<span class="hl opt">.(!</span>nbuffer<span class="hl opt">);</span>
      <span class="hl opt">!</span>current_buffer<span class="hl opt">.[</span><span class="hl num">0</span><span class="hl opt">] &lt;-</span> c<span class="hl opt">;</span>
      buffer_pos <span class="hl opt">:=</span> <span class="hl num">1</span><span class="hl opt">;</span>
    <span class="hl kwa">end</span>

  <span class="hl kwa">let</span> clear <span class="hl opt">() =</span>
    buffer_pos <span class="hl opt">:=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    nbuffer <span class="hl opt">:=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    current_buffer <span class="hl opt">:=</span> buffers<span class="hl opt">.(</span><span class="hl num">0</span><span class="hl opt">)</span>

  <span class="hl kwa">let</span> print <span class="hl opt">() =</span>
    <span class="hl kwa">let rec</span> iter buffer i len <span class="hl opt">=</span>
      <span class="hl kwa">if</span> len <span class="hl opt">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then begin</span>
	<span class="hl kwa">let</span> nw <span class="hl opt">=</span> <span class="hl kwc">Unix</span><span class="hl opt">.</span>write <span class="hl kwc">Unix</span><span class="hl opt">.</span>stdout buffer i  len <span class="hl kwa">in</span>
	  iter buffer <span class="hl opt">(</span>i<span class="hl opt">+</span>nw<span class="hl opt">) (</span>len<span class="hl opt">-</span>nw<span class="hl opt">)</span>
      <span class="hl kwa">end</span>
    <span class="hl kwa">in</span>
      <span class="hl kwa">for</span> i <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> <span class="hl opt">!</span>nbuffer <span class="hl opt">-</span> <span class="hl num">1</span> <span class="hl kwa">do</span>
	iter buffers<span class="hl opt">.(</span>i<span class="hl opt">)</span> <span class="hl num">0</span> buffer_len
      <span class="hl kwa">done</span><span class="hl opt">;</span>
      iter buffers<span class="hl opt">.(!</span>nbuffer<span class="hl opt">)</span> <span class="hl num">0</span> <span class="hl opt">!</span>buffer_pos<span class="hl opt">;</span>
      clear <span class="hl opt">()</span>

<span class="hl kwa">end</span>

<span class="hl kwa">let</span> add_header id desc <span class="hl opt">=</span>
  <span class="hl kwc">Buffer</span><span class="hl opt">.</span>add_char <span class="hl str">'&gt;'</span><span class="hl opt">;</span>
  <span class="hl kwc">Buffer</span><span class="hl opt">.</span>add_string id<span class="hl opt">;</span>
  <span class="hl kwc">Buffer</span><span class="hl opt">.</span>add_char <span class="hl str">' '</span><span class="hl opt">;</span>
  <span class="hl kwc">Buffer</span><span class="hl opt">.</span>add_string desc<span class="hl opt">;</span>
  <span class="hl kwc">Buffer</span><span class="hl opt">.</span>add_char <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span>


<span class="hl kwa">let</span> make_random_fasta id desc table n <span class="hl opt">=</span>
  add_header id desc<span class="hl opt">;</span>
  <span class="hl kwa">let</span> <span class="hl opt">(</span>s<span class="hl opt">,</span> ns<span class="hl opt">) =</span> <span class="hl kwc">Cumul_tbl</span><span class="hl opt">.</span>make table <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> curpos <span class="hl opt">=</span> <span class="hl kwb">ref</span> <span class="hl num">0</span> <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> write_cached width <span class="hl opt">=</span>
    <span class="hl kwa">let</span> maxlen <span class="hl opt">=</span> im <span class="hl opt">- !</span>curpos <span class="hl kwa">in</span>
      <span class="hl kwa">if</span> maxlen <span class="hl opt">&gt;=</span> width <span class="hl kwa">then begin</span>
	<span class="hl kwc">Buffer</span><span class="hl opt">.</span>add_substring s <span class="hl opt">!</span>curpos width<span class="hl opt">;</span>
	curpos <span class="hl opt">:= !</span>curpos <span class="hl opt">+</span> width
      <span class="hl kwa">end else begin</span>
	<span class="hl kwc">Buffer</span><span class="hl opt">.</span>add_substring s <span class="hl opt">!</span>curpos maxlen<span class="hl opt">;</span>
	<span class="hl kwa">let</span> rem <span class="hl opt">=</span> width <span class="hl opt">-</span> maxlen <span class="hl kwa">in</span>
	<span class="hl kwc">Buffer</span><span class="hl opt">.</span>add_substring s <span class="hl num">0</span> rem<span class="hl opt">;</span>
	curpos <span class="hl opt">:=</span> rem<span class="hl opt">;</span>
      <span class="hl kwa">end</span>
  <span class="hl kwa">in</span>
  <span class="hl kwa">for</span> i <span class="hl opt">=</span> <span class="hl num">1</span> <span class="hl kwa">to</span> n <span class="hl opt">/</span> width <span class="hl kwa">do</span>
    write_cached width<span class="hl opt">;</span>
    <span class="hl kwc">Buffer</span><span class="hl opt">.</span>add_char <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span>
  <span class="hl kwa">done</span><span class="hl opt">;</span>
  <span class="hl kwa">let</span> w <span class="hl opt">=</span> n <span class="hl kwa">mod</span> width <span class="hl kwa">in</span>
  <span class="hl kwa">if</span> w <span class="hl opt">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then begin</span>
    write_cached w<span class="hl opt">;</span>
    <span class="hl kwc">Buffer</span><span class="hl opt">.</span>add_char <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span>
  <span class="hl kwa">end</span><span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">!</span>curpos <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl kwa">then</span> curpos <span class="hl opt">:=</span> im<span class="hl opt">;</span>
    last <span class="hl opt">:=</span> ns<span class="hl opt">.(!</span>curpos<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">)</span>


<span class="hl com">(* [write s i0 l w] outputs [w] chars of [s.[0 .. l]], followed by a</span>
<span class="hl com">   newline, starting with [s.[i0]] and considering the substring [s.[0</span>
<span class="hl com">   .. l]] as a &quot;circle&quot;.</span>
<span class="hl com">   One assumes [0 &lt;= i0 &lt;= l &lt;= String.length s].</span>
<span class="hl com">   &#64;return [i0] needed for subsequent writes.  *)</span>
<span class="hl kwa">let rec</span> write s i0 l w <span class="hl opt">=</span>
  <span class="hl kwa">let</span> len <span class="hl opt">=</span> l <span class="hl opt">-</span> i0 <span class="hl kwa">in</span>
  <span class="hl kwa">if</span> w <span class="hl opt">&lt;=</span> len <span class="hl kwa">then begin</span>
    <span class="hl kwc">Buffer</span><span class="hl opt">.</span>add_substring s i0 w<span class="hl opt">;</span>
    <span class="hl kwc">Buffer</span><span class="hl opt">.</span>add_char <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl opt">;</span> i0 <span class="hl opt">+</span> w
  <span class="hl kwa">end</span>
  <span class="hl kwa">else begin</span>
    <span class="hl kwc">Buffer</span><span class="hl opt">.</span>add_substring s i0 len<span class="hl opt">;</span>
    write s <span class="hl num">0</span> l <span class="hl opt">(</span>w <span class="hl opt">-</span> len<span class="hl opt">);</span>
  <span class="hl kwa">end</span>

<span class="hl kwa">let</span> make_repeat_fasta id desc src n <span class="hl opt">=</span>
  add_header id desc<span class="hl opt">;</span>
  <span class="hl kwa">let</span> l <span class="hl opt">=</span> <span class="hl kwc">String</span><span class="hl opt">.</span>length src
  <span class="hl kwa">and</span> i0 <span class="hl opt">=</span> <span class="hl kwb">ref</span> <span class="hl num">0</span> <span class="hl kwa">in</span>
  <span class="hl kwa">for</span> i <span class="hl opt">=</span> <span class="hl num">1</span> <span class="hl kwa">to</span> n <span class="hl opt">/</span> width <span class="hl kwa">do</span>
    i0 <span class="hl opt">:=</span> write src <span class="hl opt">!</span>i0 l width<span class="hl opt">;</span>
  <span class="hl kwa">done</span><span class="hl opt">;</span>
  <span class="hl kwa">let</span> w <span class="hl opt">=</span> n <span class="hl kwa">mod</span> width <span class="hl kwa">in</span>
  <span class="hl kwa">if</span> w <span class="hl opt">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span> ignore<span class="hl opt">(</span>write src <span class="hl opt">!</span>i0 l w<span class="hl opt">)</span>


<span class="hl com">(* This version keeps a cache of starting positions of the string in the buffer modulo 61.</span>
<span class="hl com"> After 61 misses, it fills the buffer at exponential speed. Unfortunately, it is useless</span>
<span class="hl com"> as the speed-up for the short computation time is neglectible.</span>
<span class="hl com">*)</span>

<span class="hl com">(*</span>
<span class="hl com">let make_repeat_fasta2 id desc src n =</span>
<span class="hl com">  Buffer.clear ();</span>
<span class="hl com">  add_header id desc;</span>
<span class="hl com">  let cache = Array.create 61 None in</span>
<span class="hl com">  let len_src = String.length src in</span>
<span class="hl com"></span>
<span class="hl com">  let rec iter i n =</span>
<span class="hl com">    if i &lt; n then</span>
<span class="hl com">      let x = i mod 61 in</span>
<span class="hl com">	match cache.(x) with</span>
<span class="hl com">	    Some pos -&gt;</span>
<span class="hl com">(*	      Printf.fprintf stderr &quot;Hit at %d (%d)\n%!&quot; i x; *)</span>
	      <span class="hl kwa">let</span> len <span class="hl opt">=</span> <span class="hl kwc">Buffer</span><span class="hl opt">.</span>length <span class="hl opt">() -</span> pos <span class="hl kwa">in</span>
<span class="hl com">(*		Printf.fprintf stderr &quot;copy %d\n%!&quot; len; *)</span>
	      <span class="hl kwa">let</span> len <span class="hl opt">=</span> <span class="hl kwa">if</span> len <span class="hl opt">&gt;</span> n<span class="hl opt">-</span>i <span class="hl kwa">then</span> n<span class="hl opt">-</span>i <span class="hl kwa">else</span> len <span class="hl kwa">in</span>
		<span class="hl kwc">Buffer</span><span class="hl opt">.</span>add_copy pos len<span class="hl opt">;</span>
		iter <span class="hl opt">(</span>i<span class="hl opt">+</span>len<span class="hl opt">)</span> n
	  | <span class="hl kwd">None</span> <span class="hl opt">-&gt;</span>
<span class="hl com">(*	      Printf.fprintf stderr &quot;Miss at %d (%d)\n%!&quot; i x; *)</span>
	      cache<span class="hl opt">.(</span>x<span class="hl opt">) &lt;-</span> <span class="hl kwd">Some</span> <span class="hl opt">(</span><span class="hl kwc">Buffer</span><span class="hl opt">.</span>length <span class="hl opt">());</span>
	      <span class="hl kwa">let</span> len <span class="hl opt">=</span> <span class="hl kwa">if</span> len_src <span class="hl opt">&gt;</span> n<span class="hl opt">-</span>i <span class="hl kwa">then</span> n<span class="hl opt">-</span>i <span class="hl kwa">else</span> len_src <span class="hl kwa">in</span>
	      iter2 <span class="hl num">0</span> len i x

  <span class="hl kwa">and</span> iter2 j len i imod <span class="hl opt">=</span>
    <span class="hl kwa">if</span> j <span class="hl opt">&lt;</span> len <span class="hl kwa">then</span>
      <span class="hl kwa">if</span> imod <span class="hl opt">=</span> <span class="hl num">60</span> <span class="hl kwa">then begin</span>
	<span class="hl kwc">Buffer</span><span class="hl opt">.</span>add_char <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl opt">;</span>
	iter2 j len <span class="hl opt">(</span>i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)</span> <span class="hl num">0</span>
      <span class="hl kwa">end else begin</span>
	<span class="hl kwc">Buffer</span><span class="hl opt">.</span>add_char src<span class="hl opt">.[</span>j<span class="hl opt">];</span>
	iter2 <span class="hl opt">(</span>j<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)</span> len <span class="hl opt">(</span>i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">) (</span>imod<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)</span>
      <span class="hl kwa">end</span>
    <span class="hl kwa">else</span>
      iter i n
  <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> n <span class="hl opt">=</span> n <span class="hl opt">+ (</span>n <span class="hl opt">/</span> <span class="hl num">60</span><span class="hl opt">)</span> <span class="hl kwa">in</span>
    iter <span class="hl num">0</span> n<span class="hl opt">;</span>
    <span class="hl kwa">if</span> n <span class="hl kwa">mod</span> <span class="hl num">61</span> <span class="hl opt">&lt;&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
      <span class="hl kwc">Buffer</span><span class="hl opt">.</span>add_char <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span>
*)

<span class="hl kwa">let</span> main n <span class="hl opt">=</span>
      <span class="hl kwc">Spawner</span><span class="hl opt">.</span>spawn <span class="hl kwa">true</span> <span class="hl opt">(</span><span class="hl kwa">fun</span> _ <span class="hl opt">-&gt;</span>
			  make_repeat_fasta <span class="hl str">&quot;ONE&quot;</span> <span class="hl str">&quot;Homo sapiens alu&quot;</span> alu <span class="hl opt">(</span>n<span class="hl opt">*</span><span class="hl num">2</span><span class="hl opt">);</span>
			  <span class="hl opt">())</span> <span class="hl kwc">Buffer</span><span class="hl opt">.</span>print<span class="hl opt">;</span>
      <span class="hl kwc">Buffer</span><span class="hl opt">.</span>clear <span class="hl opt">();</span>
      make_random_fasta <span class="hl str">&quot;TWO&quot;</span> <span class="hl str">&quot;IUB ambiguity codes&quot;</span> iub <span class="hl opt">(</span>n<span class="hl opt">*</span><span class="hl num">3</span><span class="hl opt">);</span>
      <span class="hl kwc">Spawner</span><span class="hl opt">.</span>spawn <span class="hl kwa">true</span> <span class="hl opt">(</span><span class="hl kwa">fun</span> _ <span class="hl opt">-&gt; ())</span> <span class="hl kwc">Buffer</span><span class="hl opt">.</span>print<span class="hl opt">;</span>
      <span class="hl kwc">Buffer</span><span class="hl opt">.</span>clear <span class="hl opt">();</span>
      make_random_fasta <span class="hl str">&quot;THREE&quot;</span> <span class="hl str">&quot;Homo sapiens frequency&quot;</span> homosapiens <span class="hl opt">(</span>n<span class="hl opt">*</span><span class="hl num">5</span><span class="hl opt">);</span>
      <span class="hl kwc">Spawner</span><span class="hl opt">.</span>spawn <span class="hl kwa">false</span> <span class="hl opt">(</span><span class="hl kwa">fun</span> _ <span class="hl opt">-&gt; ())</span> <span class="hl kwc">Buffer</span><span class="hl opt">.</span>print<span class="hl opt">;</span>
      <span class="hl kwc">Buffer</span><span class="hl opt">.</span>clear <span class="hl opt">();</span>


<span class="hl kwa">end</span>

<span class="hl kwa">module</span> <span class="hl kwd">IMPLEMENTATION64</span> <span class="hl opt">=</span> <span class="hl kwa">struct</span>

<span class="hl kwa">module</span> <span class="hl kwd">Buffer</span> <span class="hl opt">:</span> <span class="hl kwa">sig</span>

  <span class="hl kwa">val</span> add_substring <span class="hl opt">:</span> <span class="hl kwb">string</span> <span class="hl opt">-&gt;</span> <span class="hl kwb">int</span> <span class="hl opt">-&gt;</span> <span class="hl kwb">int</span> <span class="hl opt">-&gt;</span> <span class="hl kwb">unit</span>
  <span class="hl kwa">val</span> add_string <span class="hl opt">:</span> <span class="hl kwb">string</span> <span class="hl opt">-&gt;</span> <span class="hl kwb">unit</span>
  <span class="hl kwa">val</span> add_char <span class="hl opt">:</span> char <span class="hl opt">-&gt;</span> <span class="hl kwb">unit</span>
  <span class="hl kwa">val</span> add_copy <span class="hl opt">:</span> <span class="hl kwb">int</span> <span class="hl opt">-&gt;</span> <span class="hl kwb">int</span> <span class="hl opt">-&gt;</span> <span class="hl kwb">unit</span>

  <span class="hl kwa">val</span> length <span class="hl opt">:</span> <span class="hl kwb">unit</span> <span class="hl opt">-&gt;</span> <span class="hl kwb">int</span>

  <span class="hl kwa">val</span> clear <span class="hl opt">:</span> <span class="hl kwb">unit</span> <span class="hl opt">-&gt;</span> <span class="hl kwb">unit</span>
  <span class="hl kwa">val</span> print <span class="hl opt">:</span> <span class="hl kwb">unit</span> <span class="hl opt">-&gt;</span> <span class="hl kwb">unit</span>

  <span class="hl kwa">val</span> check_char <span class="hl opt">:</span> char <span class="hl opt">-&gt;</span> <span class="hl kwb">unit</span>
  <span class="hl kwa">val</span> check_copy <span class="hl opt">:</span> <span class="hl kwb">int</span> <span class="hl opt">-&gt;</span> <span class="hl kwb">int</span> <span class="hl opt">-&gt;</span> <span class="hl kwb">unit</span>


<span class="hl kwa">end</span> <span class="hl opt">=</span> <span class="hl kwa">struct</span>

  <span class="hl kwa">let</span> buffer_len <span class="hl opt">=</span> <span class="hl kwa">if</span> arch64 <span class="hl kwa">then</span> <span class="hl num">150_000_000</span> <span class="hl kwa">else</span> <span class="hl num">1</span>
  <span class="hl kwa">let</span> buffer <span class="hl opt">=</span> <span class="hl kwc">String</span><span class="hl opt">.</span>create buffer_len
  <span class="hl kwa">let</span> buffer_pos <span class="hl opt">=</span> <span class="hl kwb">ref</span> <span class="hl num">0</span>

  <span class="hl kwa">let</span> length <span class="hl opt">() = !</span>buffer_pos

  <span class="hl kwa">let</span> add_substring s pos len <span class="hl opt">=</span>
    <span class="hl kwc">String</span><span class="hl opt">.</span>blit s pos buffer <span class="hl opt">!</span>buffer_pos len<span class="hl opt">;</span>
    buffer_pos <span class="hl opt">:= !</span>buffer_pos <span class="hl opt">+</span> len

  <span class="hl kwa">let</span> add_string s <span class="hl opt">=</span>
    add_substring s <span class="hl num">0</span> <span class="hl opt">(</span><span class="hl kwc">String</span><span class="hl opt">.</span>length s<span class="hl opt">)</span>

  <span class="hl kwa">let</span> add_char c <span class="hl opt">=</span>
    buffer<span class="hl opt">.[!</span>buffer_pos<span class="hl opt">] &lt;-</span> c<span class="hl opt">;</span>
    incr buffer_pos

  <span class="hl kwa">let</span> check_char c <span class="hl opt">=</span>
    <span class="hl kwa">if</span> buffer<span class="hl opt">.[!</span>buffer_pos<span class="hl opt">] &lt;&gt;</span> c <span class="hl kwa">then begin</span>
      <span class="hl kwc">Printf</span><span class="hl opt">.</span>fprintf stderr <span class="hl str">&quot;check_char [%d]</span><span class="hl esc">\n</span><span class="hl str">%!&quot;</span> <span class="hl opt">!</span>buffer_pos<span class="hl opt">;</span>
      exit <span class="hl num">2</span><span class="hl opt">;</span>
    <span class="hl kwa">end</span><span class="hl opt">;</span>
    incr buffer_pos

  <span class="hl kwa">let</span> clear <span class="hl opt">() =</span> buffer_pos <span class="hl opt">:=</span> <span class="hl num">0</span>

  <span class="hl kwa">let</span> print <span class="hl opt">() =</span>
    <span class="hl kwa">let rec</span> iter i len <span class="hl opt">=</span>
      <span class="hl kwa">if</span> len <span class="hl opt">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then begin</span>
	<span class="hl kwa">let</span> nw <span class="hl opt">=</span> <span class="hl kwc">Unix</span><span class="hl opt">.</span>write <span class="hl kwc">Unix</span><span class="hl opt">.</span>stdout buffer i  len <span class="hl kwa">in</span>
	  iter <span class="hl opt">(</span>i<span class="hl opt">+</span>nw<span class="hl opt">) (</span>len<span class="hl opt">-</span>nw<span class="hl opt">)</span>
      <span class="hl kwa">end</span>

    <span class="hl kwa">in</span>
      iter <span class="hl num">0</span> <span class="hl opt">!</span>buffer_pos<span class="hl opt">;</span>
      buffer_pos <span class="hl opt">:=</span> <span class="hl num">0</span>

  <span class="hl kwa">let</span> add_copy src len <span class="hl opt">=</span>
    add_substring buffer src len

  <span class="hl kwa">let rec</span> check_copy src len <span class="hl opt">=</span>
    <span class="hl kwa">if</span> len <span class="hl opt">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then begin</span>
      <span class="hl kwa">assert</span> <span class="hl opt">(</span>buffer<span class="hl opt">.[</span>src<span class="hl opt">] =</span> buffer<span class="hl opt">.[!</span>buffer_pos<span class="hl opt">]);</span>
      incr buffer_pos<span class="hl opt">;</span>
      check_copy <span class="hl opt">(</span>src<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">) (</span>len<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">);</span>
    <span class="hl kwa">end</span>

<span class="hl kwa">end</span>

<span class="hl kwa">let</span> add_header id desc <span class="hl opt">=</span>
  <span class="hl kwc">Buffer</span><span class="hl opt">.</span>add_char <span class="hl str">'&gt;'</span><span class="hl opt">;</span>
  <span class="hl kwc">Buffer</span><span class="hl opt">.</span>add_string id<span class="hl opt">;</span>
  <span class="hl kwc">Buffer</span><span class="hl opt">.</span>add_char <span class="hl str">' '</span><span class="hl opt">;</span>
  <span class="hl kwc">Buffer</span><span class="hl opt">.</span>add_string desc<span class="hl opt">;</span>
  <span class="hl kwc">Buffer</span><span class="hl opt">.</span>add_char <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span>



<span class="hl kwa">let</span> make_random_fasta id desc table n <span class="hl opt">=</span>
<span class="hl com">(*  Printf.fprintf stderr &quot;make_random_fasta BEGIN: last = %d\n%!&quot; !last; *)</span>
  add_header id desc<span class="hl opt">;</span>
  <span class="hl kwa">let</span> <span class="hl opt">(</span>s<span class="hl opt">,</span> ns<span class="hl opt">) =</span> <span class="hl kwc">Cumul_tbl</span><span class="hl opt">.</span>make table <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> curpos <span class="hl opt">=</span> <span class="hl kwb">ref</span> <span class="hl num">0</span> <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> write_cached width <span class="hl opt">=</span>
<span class="hl com">(*</span>
<span class="hl com">    if !curpos &gt; 0 then</span>
<span class="hl com">    Printf.fprintf stderr &quot;last[%d] = {%d}%d{%d}\n%!&quot; !curpos ns.(!curpos-1) ns.(!curpos) ns.(!curpos+1);</span>
<span class="hl com">*)</span>
    <span class="hl kwa">let</span> maxlen <span class="hl opt">=</span> im <span class="hl opt">- !</span>curpos <span class="hl kwa">in</span>
      <span class="hl kwa">if</span> maxlen <span class="hl opt">&gt;=</span> width <span class="hl kwa">then begin</span>
	<span class="hl kwc">Buffer</span><span class="hl opt">.</span>add_substring s <span class="hl opt">!</span>curpos width<span class="hl opt">;</span>
	curpos <span class="hl opt">:= !</span>curpos <span class="hl opt">+</span> width
      <span class="hl kwa">end else begin</span>
	<span class="hl kwc">Buffer</span><span class="hl opt">.</span>add_substring s <span class="hl opt">!</span>curpos maxlen<span class="hl opt">;</span>
	<span class="hl kwa">let</span> rem <span class="hl opt">=</span> width <span class="hl opt">-</span> maxlen <span class="hl kwa">in</span>
	<span class="hl kwc">Buffer</span><span class="hl opt">.</span>add_substring s <span class="hl num">0</span> rem<span class="hl opt">;</span>
	curpos <span class="hl opt">:=</span> rem<span class="hl opt">;</span>
      <span class="hl kwa">end</span>
  <span class="hl kwa">in</span>
  <span class="hl kwa">for</span> i <span class="hl opt">=</span> <span class="hl num">1</span> <span class="hl kwa">to</span> n <span class="hl opt">/</span> width <span class="hl kwa">do</span>
    write_cached width<span class="hl opt">;</span>
    <span class="hl kwc">Buffer</span><span class="hl opt">.</span>add_char <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span>
  <span class="hl kwa">done</span><span class="hl opt">;</span>
  <span class="hl kwa">let</span> w <span class="hl opt">=</span> n <span class="hl kwa">mod</span> width <span class="hl kwa">in</span>
  <span class="hl kwa">if</span> w <span class="hl opt">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then begin</span>
    write_cached w<span class="hl opt">;</span>
    <span class="hl kwc">Buffer</span><span class="hl opt">.</span>add_char <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span>
  <span class="hl kwa">end</span><span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">!</span>curpos <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl kwa">then</span> curpos <span class="hl opt">:=</span> im<span class="hl opt">;</span>
    last <span class="hl opt">:=</span> ns<span class="hl opt">.(!</span>curpos<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">);</span>
<span class="hl com">(*    Printf.fprintf stderr &quot;make_random_fasta END: last = %d\n%!&quot; !last; *)</span>
    <span class="hl opt">()</span>

<span class="hl com">(*</span>
<span class="hl com">let make_random_fasta id desc table n =</span>
<span class="hl com">  add_header id desc;</span>
<span class="hl com">  let table = Cumul_tbl.make table in</span>
<span class="hl com">  for i = 1 to n / width do</span>
<span class="hl com">    for j = 0 to width-1 do Buffer.add_char(Cumul_tbl.rand_char table); done;</span>
<span class="hl com">    Buffer.add_char '\n'</span>
<span class="hl com">  done;</span>
<span class="hl com">  let w = n mod width in</span>
<span class="hl com">  if w &gt; 0 then (</span>
<span class="hl com">    for j = 1 to w do Buffer.add_char(Cumul_tbl.rand_char table); done;</span>
<span class="hl com">    Buffer.add_char '\n'</span>
<span class="hl com">  )</span>
<span class="hl com">*)</span>


<span class="hl com">(* [write s i0 l w] outputs [w] chars of [s.[0 .. l]], followed by a</span>
<span class="hl com">   newline, starting with [s.[i0]] and considering the substring [s.[0</span>
<span class="hl com">   .. l]] as a &quot;circle&quot;.</span>
<span class="hl com">   One assumes [0 &lt;= i0 &lt;= l &lt;= String.length s].</span>
<span class="hl com">   &#64;return [i0] needed for subsequent writes.  *)</span>
<span class="hl kwa">let rec</span> write s i0 l w <span class="hl opt">=</span>
  <span class="hl kwa">let</span> len <span class="hl opt">=</span> l <span class="hl opt">-</span> i0 <span class="hl kwa">in</span>
  <span class="hl kwa">if</span> w <span class="hl opt">&lt;=</span> len <span class="hl kwa">then begin</span>
    <span class="hl kwc">Buffer</span><span class="hl opt">.</span>add_substring s i0 w<span class="hl opt">;</span>
    <span class="hl kwc">Buffer</span><span class="hl opt">.</span>add_char <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl opt">;</span> i0 <span class="hl opt">+</span> w
  <span class="hl kwa">end</span>
  <span class="hl kwa">else begin</span>
    <span class="hl kwc">Buffer</span><span class="hl opt">.</span>add_substring s i0 len<span class="hl opt">;</span>
    write s <span class="hl num">0</span> l <span class="hl opt">(</span>w <span class="hl opt">-</span> len<span class="hl opt">);</span>
  <span class="hl kwa">end</span>


<span class="hl kwa">let</span> make_repeat_fasta1 id desc src n <span class="hl opt">=</span>
  add_header id desc<span class="hl opt">;</span>
  <span class="hl kwa">let</span> l <span class="hl opt">=</span> <span class="hl kwc">String</span><span class="hl opt">.</span>length src
  <span class="hl kwa">and</span> i0 <span class="hl opt">=</span> <span class="hl kwb">ref</span> <span class="hl num">0</span> <span class="hl kwa">in</span>
  <span class="hl kwa">for</span> i <span class="hl opt">=</span> <span class="hl num">1</span> <span class="hl kwa">to</span> n <span class="hl opt">/</span> width <span class="hl kwa">do</span>
    i0 <span class="hl opt">:=</span> write src <span class="hl opt">!</span>i0 l width<span class="hl opt">;</span>
  <span class="hl kwa">done</span><span class="hl opt">;</span>
  <span class="hl kwa">let</span> w <span class="hl opt">=</span> n <span class="hl kwa">mod</span> width <span class="hl kwa">in</span>
  <span class="hl kwa">if</span> w <span class="hl opt">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span> ignore<span class="hl opt">(</span>write src <span class="hl opt">!</span>i0 l w<span class="hl opt">)</span>

<span class="hl com">(* This version keeps a cache of starting positions of the string in the buffer modulo 61.</span>
<span class="hl com"> After 61 misses, it fills the buffer at exponential speed. Unfortunately, it is useless</span>
<span class="hl com"> as the speed-up for the short computation time is neglectible.</span>
<span class="hl com"></span>
<span class="hl com">let make_repeat_fasta2 id desc src n =</span>
<span class="hl com">  Buffer.clear ();</span>
<span class="hl com">  add_header id desc;</span>
<span class="hl com">  let cache = Array.create 61 None in</span>
<span class="hl com">  let len_src = String.length src in</span>
<span class="hl com"></span>
<span class="hl com">  let rec iter i n =</span>
<span class="hl com">    if i &lt; n then</span>
<span class="hl com">      let x = i mod 61 in</span>
<span class="hl com">	match cache.(x) with</span>
<span class="hl com">	    Some pos -&gt;</span>
<span class="hl com">(*	      Printf.fprintf stderr &quot;Hit at %d (%d)\n%!&quot; i x; *)</span>
	      <span class="hl kwa">let</span> len <span class="hl opt">=</span> <span class="hl kwc">Buffer</span><span class="hl opt">.</span>length <span class="hl opt">() -</span> pos <span class="hl kwa">in</span>
<span class="hl com">(*		Printf.fprintf stderr &quot;copy %d\n%!&quot; len; *)</span>
	      <span class="hl kwa">let</span> len <span class="hl opt">=</span> <span class="hl kwa">if</span> len <span class="hl opt">&gt;</span> n<span class="hl opt">-</span>i <span class="hl kwa">then</span> n<span class="hl opt">-</span>i <span class="hl kwa">else</span> len <span class="hl kwa">in</span>
		<span class="hl kwc">Buffer</span><span class="hl opt">.</span>add_copy pos len<span class="hl opt">;</span>
		iter <span class="hl opt">(</span>i<span class="hl opt">+</span>len<span class="hl opt">)</span> n
	  | <span class="hl kwd">None</span> <span class="hl opt">-&gt;</span>
<span class="hl com">(*	      Printf.fprintf stderr &quot;Miss at %d (%d)\n%!&quot; i x; *)</span>
	      cache<span class="hl opt">.(</span>x<span class="hl opt">) &lt;-</span> <span class="hl kwd">Some</span> <span class="hl opt">(</span><span class="hl kwc">Buffer</span><span class="hl opt">.</span>length <span class="hl opt">());</span>
	      <span class="hl kwa">let</span> len <span class="hl opt">=</span> <span class="hl kwa">if</span> len_src <span class="hl opt">&gt;</span> n<span class="hl opt">-</span>i <span class="hl kwa">then</span> n<span class="hl opt">-</span>i <span class="hl kwa">else</span> len_src <span class="hl kwa">in</span>
	      iter2 <span class="hl num">0</span> len i x

  <span class="hl kwa">and</span> iter2 j len i imod <span class="hl opt">=</span>
    <span class="hl kwa">if</span> j <span class="hl opt">&lt;</span> len <span class="hl kwa">then</span>
      <span class="hl kwa">if</span> imod <span class="hl opt">=</span> <span class="hl num">60</span> <span class="hl kwa">then begin</span>
	<span class="hl kwc">Buffer</span><span class="hl opt">.</span>add_char <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl opt">;</span>
	iter2 j len <span class="hl opt">(</span>i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)</span> <span class="hl num">0</span>
      <span class="hl kwa">end else begin</span>
	<span class="hl kwc">Buffer</span><span class="hl opt">.</span>add_char src<span class="hl opt">.[</span>j<span class="hl opt">];</span>
	iter2 <span class="hl opt">(</span>j<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)</span> len <span class="hl opt">(</span>i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">) (</span>imod<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)</span>
      <span class="hl kwa">end</span>
    <span class="hl kwa">else</span>
      iter i n
  <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> n <span class="hl opt">=</span> n <span class="hl opt">+ (</span>n <span class="hl opt">/</span> <span class="hl num">60</span><span class="hl opt">)</span> <span class="hl kwa">in</span>
    iter <span class="hl num">0</span> n<span class="hl opt">;</span>
    <span class="hl kwa">if</span> n <span class="hl kwa">mod</span> <span class="hl num">61</span> <span class="hl opt">&lt;&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
      <span class="hl kwc">Buffer</span><span class="hl opt">.</span>add_char <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span>
*)

<span class="hl kwa">let</span> make_repeat_fasta id desc src n <span class="hl opt">=</span>
  make_repeat_fasta1 id desc src n<span class="hl opt">;</span>
<span class="hl com">(*    make_repeat_fasta2 id desc src n; *)</span>
    <span class="hl opt">()</span>

<span class="hl kwa">let</span> main n <span class="hl opt">=</span>
      <span class="hl kwc">Spawner</span><span class="hl opt">.</span>spawn <span class="hl kwa">true</span> <span class="hl opt">(</span><span class="hl kwa">fun</span> _ <span class="hl opt">-&gt;</span>
			  make_repeat_fasta <span class="hl str">&quot;ONE&quot;</span> <span class="hl str">&quot;Homo sapiens alu&quot;</span> alu <span class="hl opt">(</span>n<span class="hl opt">*</span><span class="hl num">2</span><span class="hl opt">);</span>
			  <span class="hl opt">())</span> <span class="hl kwc">Buffer</span><span class="hl opt">.</span>print<span class="hl opt">;</span>
      <span class="hl kwc">Buffer</span><span class="hl opt">.</span>clear <span class="hl opt">();</span>
      make_random_fasta <span class="hl str">&quot;TWO&quot;</span> <span class="hl str">&quot;IUB ambiguity codes&quot;</span> iub <span class="hl opt">(</span>n<span class="hl opt">*</span><span class="hl num">3</span><span class="hl opt">);</span>
      <span class="hl kwc">Spawner</span><span class="hl opt">.</span>spawn <span class="hl kwa">true</span> <span class="hl opt">(</span><span class="hl kwa">fun</span> _ <span class="hl opt">-&gt; ())</span> <span class="hl kwc">Buffer</span><span class="hl opt">.</span>print<span class="hl opt">;</span>
      <span class="hl kwc">Buffer</span><span class="hl opt">.</span>clear <span class="hl opt">();</span>
      make_random_fasta <span class="hl str">&quot;THREE&quot;</span> <span class="hl str">&quot;Homo sapiens frequency&quot;</span> homosapiens <span class="hl opt">(</span>n<span class="hl opt">*</span><span class="hl num">5</span><span class="hl opt">);</span>
      <span class="hl kwc">Spawner</span><span class="hl opt">.</span>spawn <span class="hl kwa">false</span> <span class="hl opt">(</span><span class="hl kwa">fun</span> _ <span class="hl opt">-&gt; ())</span> <span class="hl kwc">Buffer</span><span class="hl opt">.</span>print<span class="hl opt">;</span>
      <span class="hl kwc">Buffer</span><span class="hl opt">.</span>clear <span class="hl opt">();</span>

<span class="hl kwa">end</span>

<span class="hl kwa">let</span> <span class="hl opt">() =</span>
  <span class="hl kwa">let</span> n <span class="hl opt">=</span> <span class="hl kwa">try</span> int_of_string<span class="hl opt">(</span><span class="hl kwc">Array</span><span class="hl opt">.</span>get <span class="hl kwc">Sys</span><span class="hl opt">.</span>argv <span class="hl num">1</span><span class="hl opt">)</span> <span class="hl kwa">with</span> _ <span class="hl opt">-&gt;</span> <span class="hl num">1000</span> <span class="hl kwa">in</span>
  <span class="hl kwa">if</span> arch64 <span class="hl kwa">then</span>
    <span class="hl kwc">IMPLEMENTATION64</span><span class="hl opt">.</span>main n
  <span class="hl kwa">else</span>
    <span class="hl kwc">IMPLEMENTATION32</span><span class="hl opt">.</span>main n
