<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"> </span>
<span class="hl com">   contributed by Isaac Gouy </span>
<span class="hl com">*/</span>

<span class="hl kwa">using</span> System<span class="hl opt">;</span>

<span class="hl kwa">class</span> SpectralNorm
<span class="hl opt">{</span>
   <span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">Main</span><span class="hl opt">(</span>String<span class="hl opt">[]</span> args<span class="hl opt">) {</span>        
      <span class="hl kwb">int</span> n <span class="hl opt">=</span> <span class="hl num">100</span><span class="hl opt">;</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>args<span class="hl opt">.</span>Length <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">)</span> n <span class="hl opt">=</span> Int32<span class="hl opt">.</span><span class="hl kwd">Parse</span><span class="hl opt">(</span>args<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">]);</span>

      Console<span class="hl opt">.</span><span class="hl kwd">WriteLine</span><span class="hl opt">(</span><span class="hl str">&quot;{0:f9}&quot;</span><span class="hl opt">,</span> <span class="hl kwa">new</span> <span class="hl kwd">SpectralNorm</span><span class="hl opt">().</span><span class="hl kwd">Approximate</span><span class="hl opt">(</span>n<span class="hl opt">));</span>
   <span class="hl opt">}</span>

   <span class="hl kwb">double</span> <span class="hl kwd">Approximate</span><span class="hl opt">(</span><span class="hl kwb">int</span> n<span class="hl opt">) {</span>
      <span class="hl slc">// create unit vector</span>
      <span class="hl kwb">double</span><span class="hl opt">[]</span> u <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwb">double</span><span class="hl opt">[</span>n<span class="hl opt">];</span>       
      <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span> i<span class="hl opt">&lt;</span>n<span class="hl opt">;</span> i<span class="hl opt">++)</span> u<span class="hl opt">[</span>i<span class="hl opt">] =</span>  <span class="hl num">1</span><span class="hl opt">;</span>

      <span class="hl slc">// 20 steps of the power method</span>
      <span class="hl kwb">double</span><span class="hl opt">[]</span> v <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwb">double</span><span class="hl opt">[</span>n<span class="hl opt">];</span>  
      <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span> i<span class="hl opt">&lt;</span>n<span class="hl opt">;</span> i<span class="hl opt">++)</span> v<span class="hl opt">[</span>i<span class="hl opt">] =</span> <span class="hl num">0</span><span class="hl opt">;</span>

      <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span> i<span class="hl opt">&lt;</span><span class="hl num">10</span><span class="hl opt">;</span> i<span class="hl opt">++) {</span>
         <span class="hl kwd">MultiplyAtAv</span><span class="hl opt">(</span>n<span class="hl opt">,</span>u<span class="hl opt">,</span>v<span class="hl opt">);</span>
         <span class="hl kwd">MultiplyAtAv</span><span class="hl opt">(</span>n<span class="hl opt">,</span>v<span class="hl opt">,</span>u<span class="hl opt">);</span>
      <span class="hl opt">}</span>

      <span class="hl slc">// B=AtA         A multiplied by A transposed</span>
      <span class="hl slc">// v.Bv /(v.v)   eigenvalue of v </span>
      <span class="hl kwb">double</span> vBv <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">,</span> vv <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
      <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span> i<span class="hl opt">&lt;</span>n<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
         vBv <span class="hl opt">+=</span> u<span class="hl opt">[</span>i<span class="hl opt">]*</span>v<span class="hl opt">[</span>i<span class="hl opt">];</span>
         vv  <span class="hl opt">+=</span> v<span class="hl opt">[</span>i<span class="hl opt">]*</span>v<span class="hl opt">[</span>i<span class="hl opt">];</span>
      <span class="hl opt">}</span>

      <span class="hl kwa">return</span> Math<span class="hl opt">.</span><span class="hl kwd">Sqrt</span><span class="hl opt">(</span>vBv<span class="hl opt">/</span>vv<span class="hl opt">);</span>
   <span class="hl opt">}</span>


   <span class="hl com">/* return element i,j of infinite matrix A */</span>
   <span class="hl kwb">double</span> <span class="hl kwd">A</span><span class="hl opt">(</span><span class="hl kwb">int</span> i<span class="hl opt">,</span> <span class="hl kwb">int</span> j<span class="hl opt">){</span>
      <span class="hl kwa">return</span> <span class="hl num">1.0</span><span class="hl opt">/((</span>i<span class="hl opt">+</span>j<span class="hl opt">)*(</span>i<span class="hl opt">+</span>j<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)/</span><span class="hl num">2</span> <span class="hl opt">+</span>i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">);</span> 
   <span class="hl opt">}</span>

   <span class="hl com">/* multiply vector v by matrix A */</span>
   <span class="hl kwb">void</span> <span class="hl kwd">MultiplyAv</span><span class="hl opt">(</span><span class="hl kwb">int</span> n<span class="hl opt">,</span> <span class="hl kwb">double</span><span class="hl opt">[]</span> v<span class="hl opt">,</span> <span class="hl kwb">double</span><span class="hl opt">[]</span> Av<span class="hl opt">){</span>
      <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span> i<span class="hl opt">&lt;</span>n<span class="hl opt">;</span> i<span class="hl opt">++){</span>
         Av<span class="hl opt">[</span>i<span class="hl opt">] =</span> <span class="hl num">0</span><span class="hl opt">;</span>
         <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> j<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span> j<span class="hl opt">&lt;</span>n<span class="hl opt">;</span> j<span class="hl opt">++)</span> Av<span class="hl opt">[</span>i<span class="hl opt">] +=</span> <span class="hl kwd">A</span><span class="hl opt">(</span>i<span class="hl opt">,</span>j<span class="hl opt">)*</span>v<span class="hl opt">[</span>j<span class="hl opt">];</span>
      <span class="hl opt">}</span>
   <span class="hl opt">}</span>

   <span class="hl com">/* multiply vector v by matrix A transposed */</span>
   <span class="hl kwb">void</span> <span class="hl kwd">MultiplyAtv</span><span class="hl opt">(</span><span class="hl kwb">int</span> n<span class="hl opt">,</span> <span class="hl kwb">double</span><span class="hl opt">[]</span> v<span class="hl opt">,</span> <span class="hl kwb">double</span><span class="hl opt">[]</span> Atv<span class="hl opt">){</span>
      <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span>i<span class="hl opt">&lt;</span>n<span class="hl opt">;</span>i<span class="hl opt">++){</span>
         Atv<span class="hl opt">[</span>i<span class="hl opt">] =</span> <span class="hl num">0</span><span class="hl opt">;</span>
         <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> j<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span> j<span class="hl opt">&lt;</span>n<span class="hl opt">;</span> j<span class="hl opt">++)</span> Atv<span class="hl opt">[</span>i<span class="hl opt">] +=</span> <span class="hl kwd">A</span><span class="hl opt">(</span>j<span class="hl opt">,</span>i<span class="hl opt">)*</span>v<span class="hl opt">[</span>j<span class="hl opt">];</span>
      <span class="hl opt">}</span>
   <span class="hl opt">}</span>

   <span class="hl com">/* multiply vector v by matrix A and then by matrix A transposed */</span>
   <span class="hl kwb">void</span> <span class="hl kwd">MultiplyAtAv</span><span class="hl opt">(</span><span class="hl kwb">int</span> n<span class="hl opt">,</span> <span class="hl kwb">double</span><span class="hl opt">[]</span> v<span class="hl opt">,</span> <span class="hl kwb">double</span><span class="hl opt">[]</span> AtAv<span class="hl opt">){</span>
      <span class="hl kwb">double</span><span class="hl opt">[]</span> u <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwb">double</span><span class="hl opt">[</span>n<span class="hl opt">];</span>
      <span class="hl kwd">MultiplyAv</span><span class="hl opt">(</span>n<span class="hl opt">,</span>v<span class="hl opt">,</span>u<span class="hl opt">);</span>
      <span class="hl kwd">MultiplyAtv</span><span class="hl opt">(</span>n<span class="hl opt">,</span>u<span class="hl opt">,</span>AtAv<span class="hl opt">);</span>
   <span class="hl opt">}</span>
<span class="hl opt">}</span>
