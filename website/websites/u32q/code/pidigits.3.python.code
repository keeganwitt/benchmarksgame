<span class="hl slc"># The Computer Language Benchmarks Game</span>
<span class="hl slc"># http://shootout.alioth.debian.org/</span>
<span class="hl slc">#</span>
<span class="hl slc"># contributed by - not known -</span>
<span class="hl slc"># modified by Pilho Kim (first GMP version)</span>
<span class="hl slc"># modified by Dani Nanz (2007-09-14)</span>

<span class="hl kwa">import</span> sys
<span class="hl kwa">import</span> itertools
<span class="hl kwa">import</span> gmpy


mpz0<span class="hl sym">,</span> mpz1 <span class="hl sym">=</span> gmpy<span class="hl sym">.</span><span class="hl kwd">mpz</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">),</span> gmpy<span class="hl sym">.</span><span class="hl kwd">mpz</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">)</span>
mpz2<span class="hl sym">,</span> mpz3 <span class="hl sym">=</span> gmpy<span class="hl sym">.</span><span class="hl kwd">mpz</span><span class="hl sym">(</span><span class="hl num">2</span><span class="hl sym">),</span> gmpy<span class="hl sym">.</span><span class="hl kwd">mpz</span><span class="hl sym">(</span><span class="hl num">3</span><span class="hl sym">)</span>
mpz4<span class="hl sym">,</span> mpz10 <span class="hl sym">=</span> gmpy<span class="hl sym">.</span><span class="hl kwd">mpz</span><span class="hl sym">(</span><span class="hl num">4</span><span class="hl sym">),</span> gmpy<span class="hl sym">.</span><span class="hl kwd">mpz</span><span class="hl sym">(</span><span class="hl num">10</span><span class="hl sym">)</span>


<span class="hl kwa">def</span> <span class="hl kwd">gen_x</span><span class="hl sym">(</span>k<span class="hl sym">=</span>mpz0<span class="hl sym">):</span>

    <span class="hl kwa">while</span> <span class="hl num">1</span><span class="hl sym">:</span>
        k <span class="hl sym">+=</span> mpz1
        <span class="hl kwa">yield</span> <span class="hl sym">(</span>k<span class="hl sym">,</span> mpz4 <span class="hl sym">*</span> k <span class="hl sym">+</span> mpz2<span class="hl sym">,</span> mpz0<span class="hl sym">,</span> mpz2 <span class="hl sym">*</span> k <span class="hl sym">+</span> mpz1<span class="hl sym">)</span>


<span class="hl kwa">def</span> <span class="hl kwd">compose</span><span class="hl sym">((</span>a<span class="hl sym">,</span> b<span class="hl sym">,</span> c<span class="hl sym">,</span> d<span class="hl sym">), (</span>e<span class="hl sym">,</span> f<span class="hl sym">,</span> g<span class="hl sym">,</span> h<span class="hl sym">)):</span>  

    <span class="hl kwa">return</span> <span class="hl sym">(</span>a <span class="hl sym">*</span> e<span class="hl sym">,</span>
            a <span class="hl sym">*</span> f <span class="hl sym">+</span> b <span class="hl sym">*</span> h<span class="hl sym">,</span>
            c <span class="hl sym">*</span> e <span class="hl sym">+</span> d <span class="hl sym">*</span> g<span class="hl sym">,</span>
            c <span class="hl sym">*</span> f <span class="hl sym">+</span> d <span class="hl sym">*</span> h<span class="hl sym">)</span>


<span class="hl kwa">def</span> <span class="hl kwd">extract</span><span class="hl sym">((</span>a<span class="hl sym">,</span> b<span class="hl sym">,</span> c<span class="hl sym">,</span> d<span class="hl sym">),</span> j<span class="hl sym">):</span>
    <span class="hl kwa">return</span> <span class="hl sym">(</span>a <span class="hl sym">*</span> j <span class="hl sym">+</span> b<span class="hl sym">) // (</span>c <span class="hl sym">*</span> j <span class="hl sym">+</span> d<span class="hl sym">)</span>


<span class="hl kwa">def</span> <span class="hl kwd">pi_digits</span><span class="hl sym">():</span>

    z <span class="hl sym">= (</span>mpz1<span class="hl sym">,</span> mpz0<span class="hl sym">,</span> mpz0<span class="hl sym">,</span> mpz1<span class="hl sym">)</span>
    x <span class="hl sym">=</span> <span class="hl kwd">gen_x</span><span class="hl sym">()</span>
    <span class="hl kwa">while</span> <span class="hl num">1</span><span class="hl sym">:</span>
        y <span class="hl sym">=</span> <span class="hl kwd">extract</span><span class="hl sym">(</span>z<span class="hl sym">,</span> mpz3<span class="hl sym">)</span>
        <span class="hl kwa">while</span> y <span class="hl sym">!=</span> <span class="hl kwd">extract</span><span class="hl sym">(</span>z<span class="hl sym">,</span> mpz4<span class="hl sym">):</span>
            z <span class="hl sym">=</span> <span class="hl kwd">compose</span><span class="hl sym">(</span>z<span class="hl sym">,</span> x<span class="hl sym">.</span><span class="hl kwd">next</span><span class="hl sym">())</span>
            y <span class="hl sym">=</span> <span class="hl kwd">extract</span><span class="hl sym">(</span>z<span class="hl sym">,</span> mpz3<span class="hl sym">)</span>
        z <span class="hl sym">=</span> <span class="hl kwd">compose</span><span class="hl sym">((</span>mpz10<span class="hl sym">, -</span>mpz10 <span class="hl sym">*</span> y<span class="hl sym">,</span> mpz0<span class="hl sym">,</span> mpz1<span class="hl sym">),</span> z<span class="hl sym">)</span>
        <span class="hl kwa">yield</span> <span class="hl kwb">str</span><span class="hl sym">(</span>y<span class="hl sym">)</span>


<span class="hl kwa">def</span> <span class="hl kwd">main</span><span class="hl sym">(</span>islice<span class="hl sym">=</span>itertools<span class="hl sym">.</span>islice<span class="hl sym">):</span>

    n <span class="hl sym">=</span> <span class="hl kwb">int</span><span class="hl sym">(</span>sys<span class="hl sym">.</span>argv<span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">])</span>
    digits <span class="hl sym">=</span> <span class="hl kwd">pi_digits</span><span class="hl sym">()</span>
    w <span class="hl sym">=</span> <span class="hl num">10</span>
    out <span class="hl sym">= []</span>
    <span class="hl kwa">for</span> i <span class="hl kwa">in</span> <span class="hl kwb">xrange</span><span class="hl sym">(</span>w<span class="hl sym">,</span> n<span class="hl sym">+</span><span class="hl num">1</span><span class="hl sym">,</span> w<span class="hl sym">):</span>
        out<span class="hl sym">.</span><span class="hl kwd">extend</span><span class="hl sym">([</span><span class="hl str">''</span><span class="hl sym">.</span><span class="hl kwd">join</span><span class="hl sym">(</span><span class="hl kwd">islice</span><span class="hl sym">(</span>digits<span class="hl sym">,</span> w<span class="hl sym">)),</span> i<span class="hl sym">])</span>
    <span class="hl kwa">print</span> <span class="hl sym">(</span><span class="hl str">'%s</span><span class="hl esc">\t</span><span class="hl str">:%d</span><span class="hl esc">\n</span><span class="hl str">'</span> <span class="hl sym">* (</span><span class="hl kwb">len</span><span class="hl sym">(</span>out<span class="hl sym">) /</span> <span class="hl num">2</span><span class="hl sym">)) %</span> <span class="hl kwb">tuple</span><span class="hl sym">(</span>out<span class="hl sym">),</span>
    <span class="hl kwa">if</span> n <span class="hl sym">%</span> w <span class="hl sym">&gt;</span> <span class="hl num">0</span><span class="hl sym">:</span>
        <span class="hl kwa">print</span> <span class="hl str">&quot;%s</span><span class="hl esc">\t</span><span class="hl str">:%d&quot;</span> <span class="hl sym">% (</span><span class="hl str">''</span><span class="hl sym">.</span><span class="hl kwd">join</span><span class="hl sym">(</span><span class="hl kwd">islice</span><span class="hl sym">(</span>digits<span class="hl sym">,</span> n <span class="hl sym">%</span> w<span class="hl sym">)).</span><span class="hl kwd">ljust</span><span class="hl sym">(</span>w<span class="hl sym">),</span> n<span class="hl sym">)</span>


<span class="hl kwd">main</span><span class="hl sym">()</span>
