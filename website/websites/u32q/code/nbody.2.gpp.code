<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by Mark C. Lewis</span>
<span class="hl com">   modified slightly by Chad Whipkey</span>
<span class="hl com">   converted from java to c++,added sse support, by Branimir Maksimovic </span>
<span class="hl com">*/</span>

<span class="hl ppc">#include &lt;cstdio&gt;</span>
<span class="hl ppc">#include &lt;cmath&gt;</span>
<span class="hl ppc">#include &lt;cstdlib&gt;</span>
<span class="hl ppc">#include &lt;vector&gt;</span>
<span class="hl ppc">#include &lt;immintrin.h&gt;</span>

<span class="hl kwb">static const double</span> PI <span class="hl opt">=</span> <span class="hl num">3.141592653589793</span><span class="hl opt">;</span>
<span class="hl kwb">static const double</span> SOLAR_MASS <span class="hl opt">=</span> <span class="hl num">4</span> <span class="hl opt">*</span> PI <span class="hl opt">*</span> PI<span class="hl opt">;</span>
<span class="hl kwb">static const double</span> DAYS_PER_YEAR <span class="hl opt">=</span> <span class="hl num">365.24</span><span class="hl opt">;</span>


<span class="hl kwc">class</span> Body <span class="hl opt">{</span>

   <span class="hl kwc">public</span><span class="hl opt">:</span> <span class="hl kwb">double</span> x<span class="hl opt">,</span> y<span class="hl opt">,</span> z<span class="hl opt">,</span> filler<span class="hl opt">,</span> vx<span class="hl opt">,</span> vy<span class="hl opt">,</span> vz<span class="hl opt">,</span> mass<span class="hl opt">;</span>

   <span class="hl kwc">public</span><span class="hl opt">:</span> <span class="hl kwd">Body</span><span class="hl opt">(){}</span>

   <span class="hl kwb">static</span> Body<span class="hl opt">&amp;</span> <span class="hl kwd">jupiter</span><span class="hl opt">(){</span>
      <span class="hl kwb">static</span> Body p<span class="hl opt">;</span>
      p<span class="hl opt">.</span>x <span class="hl opt">=</span> <span class="hl num">4.84143144246472090e+00</span><span class="hl opt">;</span>
      p<span class="hl opt">.</span>y <span class="hl opt">= -</span><span class="hl num">1.16032004402742839e+00</span><span class="hl opt">;</span>
      p<span class="hl opt">.</span>z <span class="hl opt">= -</span><span class="hl num">1.03622044471123109e-01</span><span class="hl opt">;</span>
      p<span class="hl opt">.</span>vx <span class="hl opt">=</span> <span class="hl num">1.66007664274403694e-03</span> <span class="hl opt">*</span> DAYS_PER_YEAR<span class="hl opt">;</span>
      p<span class="hl opt">.</span>vy <span class="hl opt">=</span> <span class="hl num">7.69901118419740425e-03</span> <span class="hl opt">*</span> DAYS_PER_YEAR<span class="hl opt">;</span>
      p<span class="hl opt">.</span>vz <span class="hl opt">= -</span><span class="hl num">6.90460016972063023e-05</span> <span class="hl opt">*</span> DAYS_PER_YEAR<span class="hl opt">;</span>
      p<span class="hl opt">.</span>mass <span class="hl opt">=</span> <span class="hl num">9.54791938424326609e-04</span> <span class="hl opt">*</span> SOLAR_MASS<span class="hl opt">;</span>
      <span class="hl kwa">return</span> p<span class="hl opt">;</span>
   <span class="hl opt">}</span>

   <span class="hl kwb">static</span> Body<span class="hl opt">&amp;</span> <span class="hl kwd">saturn</span><span class="hl opt">(){</span>
      <span class="hl kwb">static</span> Body p<span class="hl opt">;</span>
      p<span class="hl opt">.</span>x <span class="hl opt">=</span> <span class="hl num">8.34336671824457987e+00</span><span class="hl opt">;</span>
      p<span class="hl opt">.</span>y <span class="hl opt">=</span> <span class="hl num">4.12479856412430479e+00</span><span class="hl opt">;</span>
      p<span class="hl opt">.</span>z <span class="hl opt">= -</span><span class="hl num">4.03523417114321381e-01</span><span class="hl opt">;</span>
      p<span class="hl opt">.</span>vx <span class="hl opt">= -</span><span class="hl num">2.76742510726862411e-03</span> <span class="hl opt">*</span> DAYS_PER_YEAR<span class="hl opt">;</span>
      p<span class="hl opt">.</span>vy <span class="hl opt">=</span> <span class="hl num">4.99852801234917238e-03</span> <span class="hl opt">*</span> DAYS_PER_YEAR<span class="hl opt">;</span>
      p<span class="hl opt">.</span>vz <span class="hl opt">=</span> <span class="hl num">2.30417297573763929e-05</span> <span class="hl opt">*</span> DAYS_PER_YEAR<span class="hl opt">;</span>
      p<span class="hl opt">.</span>mass <span class="hl opt">=</span> <span class="hl num">2.85885980666130812e-04</span> <span class="hl opt">*</span> SOLAR_MASS<span class="hl opt">;</span>
      <span class="hl kwa">return</span> p<span class="hl opt">;</span>
   <span class="hl opt">}</span>

   <span class="hl kwb">static</span> Body<span class="hl opt">&amp;</span> <span class="hl kwd">uranus</span><span class="hl opt">(){</span>
      <span class="hl kwb">static</span> Body p<span class="hl opt">;</span>
      p<span class="hl opt">.</span>x <span class="hl opt">=</span> <span class="hl num">1.28943695621391310e+01</span><span class="hl opt">;</span>
      p<span class="hl opt">.</span>y <span class="hl opt">= -</span><span class="hl num">1.51111514016986312e+01</span><span class="hl opt">;</span>
      p<span class="hl opt">.</span>z <span class="hl opt">= -</span><span class="hl num">2.23307578892655734e-01</span><span class="hl opt">;</span>
      p<span class="hl opt">.</span>vx <span class="hl opt">=</span> <span class="hl num">2.96460137564761618e-03</span> <span class="hl opt">*</span> DAYS_PER_YEAR<span class="hl opt">;</span>
      p<span class="hl opt">.</span>vy <span class="hl opt">=</span> <span class="hl num">2.37847173959480950e-03</span> <span class="hl opt">*</span> DAYS_PER_YEAR<span class="hl opt">;</span>
      p<span class="hl opt">.</span>vz <span class="hl opt">= -</span><span class="hl num">2.96589568540237556e-05</span> <span class="hl opt">*</span> DAYS_PER_YEAR<span class="hl opt">;</span>
      p<span class="hl opt">.</span>mass <span class="hl opt">=</span> <span class="hl num">4.36624404335156298e-05</span> <span class="hl opt">*</span> SOLAR_MASS<span class="hl opt">;</span>
      <span class="hl kwa">return</span> p<span class="hl opt">;</span>
   <span class="hl opt">}</span>

   <span class="hl kwb">static</span> Body<span class="hl opt">&amp;</span> <span class="hl kwd">neptune</span><span class="hl opt">(){</span>
      <span class="hl kwb">static</span> Body p<span class="hl opt">;</span>
      p<span class="hl opt">.</span>x <span class="hl opt">=</span> <span class="hl num">1.53796971148509165e+01</span><span class="hl opt">;</span>
      p<span class="hl opt">.</span>y <span class="hl opt">= -</span><span class="hl num">2.59193146099879641e+01</span><span class="hl opt">;</span>
      p<span class="hl opt">.</span>z <span class="hl opt">=</span> <span class="hl num">1.79258772950371181e-01</span><span class="hl opt">;</span>
      p<span class="hl opt">.</span>vx <span class="hl opt">=</span> <span class="hl num">2.68067772490389322e-03</span> <span class="hl opt">*</span> DAYS_PER_YEAR<span class="hl opt">;</span>
      p<span class="hl opt">.</span>vy <span class="hl opt">=</span> <span class="hl num">1.62824170038242295e-03</span> <span class="hl opt">*</span> DAYS_PER_YEAR<span class="hl opt">;</span>
      p<span class="hl opt">.</span>vz <span class="hl opt">= -</span><span class="hl num">9.51592254519715870e-05</span> <span class="hl opt">*</span> DAYS_PER_YEAR<span class="hl opt">;</span>
      p<span class="hl opt">.</span>mass <span class="hl opt">=</span> <span class="hl num">5.15138902046611451e-05</span> <span class="hl opt">*</span> SOLAR_MASS<span class="hl opt">;</span>
      <span class="hl kwa">return</span> p<span class="hl opt">;</span>
   <span class="hl opt">}</span>

   <span class="hl kwb">static</span> Body<span class="hl opt">&amp;</span> <span class="hl kwd">sun</span><span class="hl opt">(){</span>
      <span class="hl kwb">static</span> Body p<span class="hl opt">;</span>
      p<span class="hl opt">.</span>mass <span class="hl opt">=</span> SOLAR_MASS<span class="hl opt">;</span>
      <span class="hl kwa">return</span> p<span class="hl opt">;</span>
   <span class="hl opt">}</span>

   Body<span class="hl opt">&amp;</span> <span class="hl kwd">offsetMomentum</span><span class="hl opt">(</span><span class="hl kwb">double</span> px<span class="hl opt">,</span> <span class="hl kwb">double</span> py<span class="hl opt">,</span> <span class="hl kwb">double</span> pz<span class="hl opt">){</span>
      vx <span class="hl opt">= -</span>px <span class="hl opt">/</span> SOLAR_MASS<span class="hl opt">;</span>
      vy <span class="hl opt">= -</span>py <span class="hl opt">/</span> SOLAR_MASS<span class="hl opt">;</span>
      vz <span class="hl opt">= -</span>pz <span class="hl opt">/</span> SOLAR_MASS<span class="hl opt">;</span>
      <span class="hl kwa">return</span> <span class="hl opt">*</span><span class="hl kwa">this</span><span class="hl opt">;</span>
   <span class="hl opt">}</span>
<span class="hl opt">};</span>

<span class="hl kwc">template</span> <span class="hl opt">&lt;</span>typename T<span class="hl opt">,</span> std<span class="hl opt">::</span><span class="hl kwb">size_t</span> N <span class="hl opt">=</span> <span class="hl num">16</span><span class="hl opt">&gt;</span>
<span class="hl kwc">class</span> AlignmentAllocator <span class="hl opt">{</span>
<span class="hl kwc">public</span><span class="hl opt">:</span>
  <span class="hl kwc">typedef</span> T value_type<span class="hl opt">;</span>
  <span class="hl kwc">typedef</span> std<span class="hl opt">::</span><span class="hl kwb">size_t</span> size_type<span class="hl opt">;</span>
  <span class="hl kwc">typedef</span> std<span class="hl opt">::</span><span class="hl kwb">ptrdiff_t</span> difference_type<span class="hl opt">;</span>

  <span class="hl kwc">typedef</span> T <span class="hl opt">*</span> pointer<span class="hl opt">;</span>
  <span class="hl kwc">typedef</span> <span class="hl kwb">const</span> T <span class="hl opt">*</span> const_pointer<span class="hl opt">;</span>

  <span class="hl kwc">typedef</span> T <span class="hl opt">&amp;</span> reference<span class="hl opt">;</span>
  <span class="hl kwc">typedef</span> <span class="hl kwb">const</span> T <span class="hl opt">&amp;</span> const_reference<span class="hl opt">;</span>

  <span class="hl kwc">public</span><span class="hl opt">:</span>
  <span class="hl kwc">inline</span> <span class="hl kwd">AlignmentAllocator</span> <span class="hl opt">()</span> <span class="hl kwa">throw</span> <span class="hl opt">() { }</span>

  <span class="hl kwc">template</span> <span class="hl opt">&lt;</span>typename T2<span class="hl opt">&gt;</span>
  <span class="hl kwc">inline</span> <span class="hl kwd">AlignmentAllocator</span> <span class="hl opt">(</span><span class="hl kwb">const</span> AlignmentAllocator<span class="hl opt">&lt;</span>T2<span class="hl opt">,</span> N<span class="hl opt">&gt; &amp;)</span> <span class="hl kwa">throw</span> <span class="hl opt">() { }</span>

  <span class="hl kwc">inline</span> <span class="hl opt">~</span><span class="hl kwd">AlignmentAllocator</span> <span class="hl opt">()</span> <span class="hl kwa">throw</span> <span class="hl opt">() { }</span>

  <span class="hl kwc">inline</span> pointer <span class="hl kwd">adress</span> <span class="hl opt">(</span>reference r<span class="hl opt">) {</span>
    <span class="hl kwa">return</span> <span class="hl opt">&amp;</span>r<span class="hl opt">;</span>
  <span class="hl opt">}</span>

  <span class="hl kwc">inline</span> const_pointer <span class="hl kwd">adress</span> <span class="hl opt">(</span>const_reference r<span class="hl opt">)</span> <span class="hl kwb">const</span> <span class="hl opt">{</span>
    <span class="hl kwa">return</span> <span class="hl opt">&amp;</span>r<span class="hl opt">;</span>
  <span class="hl opt">}</span>

  <span class="hl kwc">inline</span> pointer <span class="hl kwd">allocate</span> <span class="hl opt">(</span>size_type n<span class="hl opt">) {</span>
     <span class="hl kwa">return</span> <span class="hl opt">(</span>pointer<span class="hl opt">)</span><span class="hl kwd">_mm_malloc</span><span class="hl opt">(</span>n<span class="hl opt">*</span><span class="hl kwa">sizeof</span><span class="hl opt">(</span>value_type<span class="hl opt">),</span> N<span class="hl opt">);</span>
  <span class="hl opt">}</span>

  <span class="hl kwc">inline</span> <span class="hl kwb">void</span> <span class="hl kwd">deallocate</span> <span class="hl opt">(</span>pointer p<span class="hl opt">,</span> size_type<span class="hl opt">) {</span>
    <span class="hl kwd">_mm_free</span> <span class="hl opt">(</span>p<span class="hl opt">);</span>
  <span class="hl opt">}</span>

  <span class="hl kwc">inline</span> <span class="hl kwb">void</span> <span class="hl kwd">construct</span> <span class="hl opt">(</span>pointer p<span class="hl opt">,</span> <span class="hl kwb">const</span> value_type <span class="hl opt">&amp;</span> wert<span class="hl opt">) {</span>
     <span class="hl kwa">new</span> <span class="hl opt">(</span>p<span class="hl opt">)</span> <span class="hl kwd">value_type</span> <span class="hl opt">(</span>wert<span class="hl opt">);</span>
  <span class="hl opt">}</span>

  <span class="hl kwc">inline</span> <span class="hl kwb">void</span> <span class="hl kwd">destroy</span> <span class="hl opt">(</span>pointer p<span class="hl opt">) {</span>
    p<span class="hl opt">-&gt;~</span><span class="hl kwd">value_type</span> <span class="hl opt">();</span>
  <span class="hl opt">}</span>

  <span class="hl kwc">inline</span> size_type <span class="hl kwd">max_size</span> <span class="hl opt">()</span> <span class="hl kwb">const</span> <span class="hl kwa">throw</span> <span class="hl opt">() {</span>
    <span class="hl kwa">return</span> <span class="hl kwd">size_type</span> <span class="hl opt">(-</span><span class="hl num">1</span><span class="hl opt">) /</span> <span class="hl kwa">sizeof</span> <span class="hl opt">(</span>value_type<span class="hl opt">);</span>
  <span class="hl opt">}</span>

  <span class="hl kwc">template</span> <span class="hl opt">&lt;</span>typename T2<span class="hl opt">&gt;</span>
  <span class="hl kwb">struct</span> rebind <span class="hl opt">{</span>
    <span class="hl kwc">typedef</span> AlignmentAllocator<span class="hl opt">&lt;</span>T2<span class="hl opt">,</span> N<span class="hl opt">&gt;</span> other<span class="hl opt">;</span>
  <span class="hl opt">};</span>

  <span class="hl kwb">bool</span> <span class="hl kwc">operator</span><span class="hl opt">!=(</span><span class="hl kwb">const</span> AlignmentAllocator<span class="hl opt">&lt;</span>T<span class="hl opt">,</span>N<span class="hl opt">&gt;&amp;</span> other<span class="hl opt">)</span> <span class="hl kwb">const</span>  <span class="hl opt">{</span>
    <span class="hl kwa">return</span> <span class="hl opt">!(*</span><span class="hl kwa">this</span> <span class="hl opt">==</span> other<span class="hl opt">);</span>
  <span class="hl opt">}</span>

  <span class="hl slc">// Returns true if and only if storage allocated from *this</span>
  <span class="hl slc">// can be deallocated from other, and vice versa.</span>
  <span class="hl slc">// Always returns true for stateless allocators.</span>
  <span class="hl kwb">bool</span> <span class="hl kwc">operator</span><span class="hl opt">==(</span><span class="hl kwb">const</span> AlignmentAllocator<span class="hl opt">&lt;</span>T<span class="hl opt">,</span>N<span class="hl opt">&gt;&amp;</span> other<span class="hl opt">)</span> <span class="hl kwb">const</span> <span class="hl opt">{</span>
    <span class="hl kwa">return true</span><span class="hl opt">;</span>
  <span class="hl opt">}</span>
<span class="hl opt">};</span>

<span class="hl kwc">class</span> NBodySystem <span class="hl opt">{</span>
	<span class="hl kwc">private</span><span class="hl opt">:</span> std<span class="hl opt">::</span>vector<span class="hl opt">&lt;</span>Body<span class="hl opt">,</span>AlignmentAllocator<span class="hl opt">&lt;</span>Body<span class="hl opt">,</span><span class="hl num">4096</span><span class="hl opt">&gt; &gt;</span> bodies<span class="hl opt">;</span>

	<span class="hl kwc">public</span><span class="hl opt">:</span> <span class="hl kwd">NBodySystem</span><span class="hl opt">()</span>
    <span class="hl opt">:</span>  bodies <span class="hl opt">{</span>
            Body<span class="hl opt">::</span><span class="hl kwd">sun</span><span class="hl opt">(),</span>
            Body<span class="hl opt">::</span><span class="hl kwd">jupiter</span><span class="hl opt">(),</span>
            Body<span class="hl opt">::</span><span class="hl kwd">saturn</span><span class="hl opt">(),</span>
            Body<span class="hl opt">::</span><span class="hl kwd">uranus</span><span class="hl opt">(),</span>
            Body<span class="hl opt">::</span><span class="hl kwd">neptune</span><span class="hl opt">()</span>
         <span class="hl opt">}</span>
	<span class="hl opt">{</span>
      <span class="hl kwb">double</span> px <span class="hl opt">=</span> <span class="hl num">0.0</span><span class="hl opt">;</span>
      <span class="hl kwb">double</span> py <span class="hl opt">=</span> <span class="hl num">0.0</span><span class="hl opt">;</span>
      <span class="hl kwb">double</span> pz <span class="hl opt">=</span> <span class="hl num">0.0</span><span class="hl opt">;</span>
      <span class="hl kwa">for</span><span class="hl opt">(</span><span class="hl kwb">unsigned</span> i<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> bodies<span class="hl opt">.</span><span class="hl kwd">size</span><span class="hl opt">(); ++</span>i<span class="hl opt">) {</span>
         px <span class="hl opt">+=</span> bodies<span class="hl opt">[</span>i<span class="hl opt">].</span>vx <span class="hl opt">*</span> bodies<span class="hl opt">[</span>i<span class="hl opt">].</span>mass<span class="hl opt">;</span>
         py <span class="hl opt">+=</span> bodies<span class="hl opt">[</span>i<span class="hl opt">].</span>vy <span class="hl opt">*</span> bodies<span class="hl opt">[</span>i<span class="hl opt">].</span>mass<span class="hl opt">;</span>
         pz <span class="hl opt">+=</span> bodies<span class="hl opt">[</span>i<span class="hl opt">].</span>vz <span class="hl opt">*</span> bodies<span class="hl opt">[</span>i<span class="hl opt">].</span>mass<span class="hl opt">;</span>
      <span class="hl opt">}</span>
      bodies<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">].</span><span class="hl kwd">offsetMomentum</span><span class="hl opt">(</span>px<span class="hl opt">,</span>py<span class="hl opt">,</span>pz<span class="hl opt">);</span>
   <span class="hl opt">}</span>

   <span class="hl kwc">public</span><span class="hl opt">:</span> <span class="hl kwb">void</span> <span class="hl kwd">advance</span><span class="hl opt">(</span><span class="hl kwb">double</span> dt<span class="hl opt">) {</span>
	<span class="hl kwb">unsigned</span> N <span class="hl opt">= (</span>bodies<span class="hl opt">.</span><span class="hl kwd">size</span><span class="hl opt">()-</span><span class="hl num">1</span><span class="hl opt">)*</span>bodies<span class="hl opt">.</span><span class="hl kwd">size</span><span class="hl opt">()/</span><span class="hl num">2</span><span class="hl opt">;</span>
	<span class="hl kwb">struct</span> R<span class="hl opt">{</span>
		<span class="hl kwb">double</span> dx<span class="hl opt">,</span>dy<span class="hl opt">,</span>dz<span class="hl opt">,</span>filler<span class="hl opt">;</span>
	<span class="hl opt">};</span>
	__m128d ddt <span class="hl opt">=</span> <span class="hl kwd">_mm_set1_pd</span><span class="hl opt">(</span>dt<span class="hl opt">);</span>

	<span class="hl kwb">static</span> <span class="hl kwd">__attribute__</span><span class="hl opt">((</span><span class="hl kwd">aligned</span><span class="hl opt">(</span><span class="hl num">16</span><span class="hl opt">)))</span> R r<span class="hl opt">[</span><span class="hl num">1000</span><span class="hl opt">];</span>
	<span class="hl kwb">static</span> <span class="hl kwd">__attribute__</span><span class="hl opt">((</span><span class="hl kwd">aligned</span><span class="hl opt">(</span><span class="hl num">16</span><span class="hl opt">)))</span> <span class="hl kwb">double</span> mag<span class="hl opt">[</span><span class="hl num">1000</span><span class="hl opt">];</span>

      <span class="hl kwa">for</span><span class="hl opt">(</span><span class="hl kwb">unsigned</span> i<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">,</span>k<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> bodies<span class="hl opt">.</span><span class="hl kwd">size</span><span class="hl opt">()-</span><span class="hl num">1</span><span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
            Body<span class="hl opt">&amp;</span> iBody <span class="hl opt">=</span> bodies<span class="hl opt">[</span>i<span class="hl opt">];</span>
			__m128d idx <span class="hl opt">=</span> <span class="hl kwd">_mm_load_pd</span><span class="hl opt">(&amp;</span>iBody<span class="hl opt">.</span>x<span class="hl opt">);</span>
         <span class="hl kwa">for</span><span class="hl opt">(</span><span class="hl kwb">unsigned</span> j<span class="hl opt">=</span>i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">;</span> j <span class="hl opt">&lt;</span> bodies<span class="hl opt">.</span><span class="hl kwd">size</span><span class="hl opt">(); ++</span>j<span class="hl opt">,++</span>k<span class="hl opt">) {</span>
			__m128d jdx <span class="hl opt">=</span> <span class="hl kwd">_mm_load_pd</span><span class="hl opt">(&amp;</span>bodies<span class="hl opt">[</span>j<span class="hl opt">].</span>x<span class="hl opt">);</span>
			<span class="hl kwd">_mm_store_pd</span><span class="hl opt">(&amp;</span>r<span class="hl opt">[</span>k<span class="hl opt">].</span>dx<span class="hl opt">,</span>idx<span class="hl opt">-</span>jdx<span class="hl opt">);</span>
			r<span class="hl opt">[</span>k<span class="hl opt">].</span>dz <span class="hl opt">=</span> iBody<span class="hl opt">.</span>z <span class="hl opt">-</span> bodies<span class="hl opt">[</span>j<span class="hl opt">].</span>z<span class="hl opt">;</span>
         <span class="hl opt">}</span>
      <span class="hl opt">}</span>

      <span class="hl kwa">for</span><span class="hl opt">(</span><span class="hl kwb">unsigned</span> i<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> N<span class="hl opt">;</span> i<span class="hl opt">+=</span><span class="hl num">2</span><span class="hl opt">) {</span>
		  __m128d dx<span class="hl opt">,</span>dy<span class="hl opt">,</span>dz<span class="hl opt">;</span>
		  dx <span class="hl opt">=</span> <span class="hl kwd">_mm_loadl_pd</span><span class="hl opt">(</span>dx<span class="hl opt">,&amp;</span>r<span class="hl opt">[</span>i<span class="hl opt">].</span>dx<span class="hl opt">);</span>
		  dy <span class="hl opt">=</span> <span class="hl kwd">_mm_loadl_pd</span><span class="hl opt">(</span>dy<span class="hl opt">,&amp;</span>r<span class="hl opt">[</span>i<span class="hl opt">].</span>dy<span class="hl opt">);</span>
		  dz <span class="hl opt">=</span> <span class="hl kwd">_mm_loadl_pd</span><span class="hl opt">(</span>dz<span class="hl opt">,&amp;</span>r<span class="hl opt">[</span>i<span class="hl opt">].</span>dz<span class="hl opt">);</span>
		  
		  dx <span class="hl opt">=</span> <span class="hl kwd">_mm_loadh_pd</span><span class="hl opt">(</span>dx<span class="hl opt">,&amp;</span>r<span class="hl opt">[</span>i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">].</span>dx<span class="hl opt">);</span>
		  dy <span class="hl opt">=</span> <span class="hl kwd">_mm_loadh_pd</span><span class="hl opt">(</span>dy<span class="hl opt">,&amp;</span>r<span class="hl opt">[</span>i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">].</span>dy<span class="hl opt">);</span>
		  dz <span class="hl opt">=</span> <span class="hl kwd">_mm_loadh_pd</span><span class="hl opt">(</span>dz<span class="hl opt">,&amp;</span>r<span class="hl opt">[</span>i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">].</span>dz<span class="hl opt">);</span>
		  
		  
		  __m128d dSquared <span class="hl opt">=</span> dx<span class="hl opt">*</span>dx <span class="hl opt">+</span> dy<span class="hl opt">*</span>dy <span class="hl opt">+</span> dz<span class="hl opt">*</span>dz<span class="hl opt">;</span>

		  __m128d distance <span class="hl opt">=</span> 
		  <span class="hl kwd">_mm_cvtps_pd</span><span class="hl opt">(</span><span class="hl kwd">_mm_rsqrt_ps</span><span class="hl opt">(</span><span class="hl kwd">_mm_cvtpd_ps</span><span class="hl opt">(</span>dSquared<span class="hl opt">)));</span>
		  <span class="hl kwa">for</span><span class="hl opt">(</span><span class="hl kwb">unsigned</span> j<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span>j<span class="hl opt">&lt;</span><span class="hl num">2</span><span class="hl opt">;++</span>j<span class="hl opt">)</span>
		  <span class="hl opt">{</span>
			  distance <span class="hl opt">=</span> distance <span class="hl opt">*</span> <span class="hl kwd">_mm_set1_pd</span><span class="hl opt">(</span><span class="hl num">1.5</span><span class="hl opt">) -</span> 
			  <span class="hl opt">((</span><span class="hl kwd">_mm_set1_pd</span><span class="hl opt">(</span><span class="hl num">0.5</span><span class="hl opt">) *</span> dSquared<span class="hl opt">) *</span> distance<span class="hl opt">) *</span>
			  <span class="hl opt">(</span>distance <span class="hl opt">*</span> distance<span class="hl opt">);</span>
		  <span class="hl opt">}</span>

		  __m128d dmag <span class="hl opt">=</span> ddt<span class="hl opt">/(</span>dSquared<span class="hl opt">) *</span> distance<span class="hl opt">;</span>
		  <span class="hl kwd">_mm_store_pd</span><span class="hl opt">(&amp;</span>mag<span class="hl opt">[</span>i<span class="hl opt">],</span>dmag<span class="hl opt">);</span>
      <span class="hl opt">}</span>

      <span class="hl kwa">for</span><span class="hl opt">(</span><span class="hl kwb">unsigned</span> i<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">,</span>k<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> bodies<span class="hl opt">.</span><span class="hl kwd">size</span><span class="hl opt">()-</span><span class="hl num">1</span><span class="hl opt">; ++</span>i<span class="hl opt">) {</span>
            Body<span class="hl opt">&amp;</span> iBody <span class="hl opt">=</span> bodies<span class="hl opt">[</span>i<span class="hl opt">];</span>

         <span class="hl kwa">for</span><span class="hl opt">(</span><span class="hl kwb">unsigned</span> j<span class="hl opt">=</span>i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">;</span> j <span class="hl opt">&lt;</span> bodies<span class="hl opt">.</span><span class="hl kwd">size</span><span class="hl opt">(); ++</span>j<span class="hl opt">,++</span>k<span class="hl opt">) {</span>
				__m128d jmass <span class="hl opt">=</span> <span class="hl kwd">_mm_set1_pd</span><span class="hl opt">(</span>bodies<span class="hl opt">[</span>j<span class="hl opt">].</span>mass<span class="hl opt">);</span>
				__m128d kmag <span class="hl opt">=</span> <span class="hl kwd">_mm_set1_pd</span><span class="hl opt">(</span>mag<span class="hl opt">[</span>k<span class="hl opt">]);</span>

				__m128d jkmm <span class="hl opt">=</span> jmass <span class="hl opt">*</span> kmag<span class="hl opt">;</span>
				
				__m128d kdx <span class="hl opt">=</span> <span class="hl kwd">_mm_load_pd</span><span class="hl opt">(&amp;</span>r<span class="hl opt">[</span>k<span class="hl opt">].</span>dx<span class="hl opt">);</span>

				__m128d ivx <span class="hl opt">=</span> <span class="hl kwd">_mm_load_pd</span><span class="hl opt">(&amp;</span>iBody<span class="hl opt">.</span>vx<span class="hl opt">);</span>
				
				<span class="hl kwd">_mm_store_pd</span><span class="hl opt">(&amp;</span>iBody<span class="hl opt">.</span>vx<span class="hl opt">,</span> ivx <span class="hl opt">-</span> kdx<span class="hl opt">*</span>jkmm<span class="hl opt">);</span>
				
				iBody<span class="hl opt">.</span>vz <span class="hl opt">-=</span> r<span class="hl opt">[</span>k<span class="hl opt">].</span>dz <span class="hl opt">*</span> bodies<span class="hl opt">[</span>j<span class="hl opt">].</span>mass <span class="hl opt">*</span> mag<span class="hl opt">[</span>k<span class="hl opt">];</span>
				
				__m128d imass <span class="hl opt">=</span> <span class="hl kwd">_mm_set1_pd</span><span class="hl opt">(</span>iBody<span class="hl opt">.</span>mass<span class="hl opt">);</span>
				
				jkmm <span class="hl opt">=</span> imass <span class="hl opt">*</span> kmag<span class="hl opt">;</span>
				
				__m128d jvx <span class="hl opt">=</span> <span class="hl kwd">_mm_load_pd</span><span class="hl opt">(&amp;</span>bodies<span class="hl opt">[</span>j<span class="hl opt">].</span>vx<span class="hl opt">);</span>
				
				<span class="hl kwd">_mm_store_pd</span><span class="hl opt">(&amp;</span>bodies<span class="hl opt">[</span>j<span class="hl opt">].</span>vx<span class="hl opt">,</span> jvx <span class="hl opt">+</span> kdx <span class="hl opt">*</span> jkmm<span class="hl opt">);</span>
				
				bodies<span class="hl opt">[</span>j<span class="hl opt">].</span>vz <span class="hl opt">+=</span> r<span class="hl opt">[</span>k<span class="hl opt">].</span>dz <span class="hl opt">*</span> iBody<span class="hl opt">.</span>mass <span class="hl opt">*</span> mag<span class="hl opt">[</span>k<span class="hl opt">];</span>
         <span class="hl opt">}</span>
      <span class="hl opt">}</span>

        <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">unsigned</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> bodies<span class="hl opt">.</span><span class="hl kwd">size</span><span class="hl opt">(); ++</span>i<span class="hl opt">) {</span>
		 __m128d ix <span class="hl opt">=</span> <span class="hl kwd">_mm_load_pd</span><span class="hl opt">(&amp;</span>bodies<span class="hl opt">[</span>i<span class="hl opt">].</span>x<span class="hl opt">);</span>
		 __m128d ivx <span class="hl opt">=</span> <span class="hl kwd">_mm_load_pd</span><span class="hl opt">(&amp;</span>bodies<span class="hl opt">[</span>i<span class="hl opt">].</span>vx<span class="hl opt">);</span>
		 <span class="hl kwd">_mm_store_pd</span><span class="hl opt">(&amp;</span>bodies<span class="hl opt">[</span>i<span class="hl opt">].</span>x<span class="hl opt">,</span> ix <span class="hl opt">+</span> ddt <span class="hl opt">*</span> ivx<span class="hl opt">);</span>
         bodies<span class="hl opt">[</span>i<span class="hl opt">].</span>z <span class="hl opt">+=</span> dt <span class="hl opt">*</span> bodies<span class="hl opt">[</span>i<span class="hl opt">].</span>vz<span class="hl opt">;</span>
      <span class="hl opt">}</span>
   <span class="hl opt">}</span>

   <span class="hl kwc">public</span><span class="hl opt">:</span> <span class="hl kwb">double</span> <span class="hl kwd">energy</span><span class="hl opt">(){</span>
      <span class="hl kwb">double</span> dx<span class="hl opt">,</span> dy<span class="hl opt">,</span> dz<span class="hl opt">,</span> distance<span class="hl opt">;</span>
      <span class="hl kwb">double</span> e <span class="hl opt">=</span> <span class="hl num">0.0</span><span class="hl opt">;</span>

      <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">unsigned</span> i<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> bodies<span class="hl opt">.</span><span class="hl kwd">size</span><span class="hl opt">(); ++</span>i<span class="hl opt">) {</span>
            Body<span class="hl opt">&amp;</span> iBody <span class="hl opt">=</span> bodies<span class="hl opt">[</span>i<span class="hl opt">];</span>
            e <span class="hl opt">+=</span> <span class="hl num">0.5</span> <span class="hl opt">*</span> iBody<span class="hl opt">.</span>mass <span class="hl opt">*</span>
                 <span class="hl opt">(</span> iBody<span class="hl opt">.</span>vx <span class="hl opt">*</span> iBody<span class="hl opt">.</span>vx
                   <span class="hl opt">+</span> iBody<span class="hl opt">.</span>vy <span class="hl opt">*</span> iBody<span class="hl opt">.</span>vy
                   <span class="hl opt">+</span> iBody<span class="hl opt">.</span>vz <span class="hl opt">*</span> iBody<span class="hl opt">.</span>vz <span class="hl opt">);</span>

         <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">unsigned</span> j<span class="hl opt">=</span>i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">;</span> j <span class="hl opt">&lt;</span> bodies<span class="hl opt">.</span><span class="hl kwd">size</span><span class="hl opt">(); ++</span>j<span class="hl opt">) {</span>
                Body<span class="hl opt">&amp;</span> jBody <span class="hl opt">=</span> bodies<span class="hl opt">[</span>j<span class="hl opt">];</span>
                dx <span class="hl opt">=</span> iBody<span class="hl opt">.</span>x <span class="hl opt">-</span> jBody<span class="hl opt">.</span>x<span class="hl opt">;</span>
            dy <span class="hl opt">=</span> iBody<span class="hl opt">.</span>y <span class="hl opt">-</span> jBody<span class="hl opt">.</span>y<span class="hl opt">;</span>
            dz <span class="hl opt">=</span> iBody<span class="hl opt">.</span>z <span class="hl opt">-</span> jBody<span class="hl opt">.</span>z<span class="hl opt">;</span>

            distance <span class="hl opt">=</span> <span class="hl kwd">sqrt</span><span class="hl opt">(</span>dx<span class="hl opt">*</span>dx <span class="hl opt">+</span> dy<span class="hl opt">*</span>dy <span class="hl opt">+</span> dz<span class="hl opt">*</span>dz<span class="hl opt">);</span>
            e <span class="hl opt">-= (</span>iBody<span class="hl opt">.</span>mass <span class="hl opt">*</span> jBody<span class="hl opt">.</span>mass<span class="hl opt">) /</span> distance<span class="hl opt">;</span>
         <span class="hl opt">}</span>
      <span class="hl opt">}</span>
      <span class="hl kwa">return</span> e<span class="hl opt">;</span>
   <span class="hl opt">}</span>
<span class="hl opt">};</span>


<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span><span class="hl opt">**</span> argv<span class="hl opt">) {</span>
        <span class="hl kwb">int</span> n <span class="hl opt">=</span> <span class="hl kwd">atoi</span><span class="hl opt">(</span>argv<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">]);</span>

        NBodySystem bodies<span class="hl opt">;</span>
        <span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;%.9f</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> bodies<span class="hl opt">.</span><span class="hl kwd">energy</span><span class="hl opt">());</span>
        <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span> i<span class="hl opt">&lt;</span>n<span class="hl opt">; ++</span>i<span class="hl opt">)</span>
           bodies<span class="hl opt">.</span><span class="hl kwd">advance</span><span class="hl opt">(</span><span class="hl num">0.01</span><span class="hl opt">);</span>
        <span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;%.9f</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> bodies<span class="hl opt">.</span><span class="hl kwd">energy</span><span class="hl opt">());</span>
    <span class="hl opt">}</span>

