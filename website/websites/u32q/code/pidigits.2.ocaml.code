<span class="hl com">(* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * contributed by Christophe TROESTLER</span>
<span class="hl com"> * modified by Matías Giovannini</span>
<span class="hl com"> *)</span>
<span class="hl kwa">open</span> <span class="hl kwd">Printf</span>
<span class="hl kwa">open</span> <span class="hl kwd">Big_int</span>

<span class="hl kwa">let</span> <span class="hl opt">( +</span>$ <span class="hl opt">) =</span> add_big_int
<span class="hl kwa">let</span> <span class="hl opt">( *</span>$ <span class="hl opt">) =</span> mult_int_big_int
<span class="hl kwa">let</span> <span class="hl opt">( /</span>$ <span class="hl opt">) =</span> div_big_int

<span class="hl com">(* Entier part of the linear fractional transform qrst of x *)</span>
<span class="hl kwa">let</span> ext <span class="hl opt">(</span>q<span class="hl opt">,</span>r<span class="hl opt">,</span>s<span class="hl opt">,</span>t<span class="hl opt">)</span> x <span class="hl opt">=</span> int_of_big_int <span class="hl opt">((</span>x <span class="hl opt">*</span>$ q <span class="hl opt">+</span>$ r<span class="hl opt">) /</span>$ <span class="hl opt">(</span>x <span class="hl opt">*</span>$ s <span class="hl opt">+</span>$ t<span class="hl opt">))</span>

<span class="hl com">(* Multiply small int matrix qrst by big int matrix qrst' (small on left) *)</span>
<span class="hl kwa">let</span> mml <span class="hl opt">(</span>q<span class="hl opt">,</span>r<span class="hl opt">,</span>s<span class="hl opt">,</span>t<span class="hl opt">) (</span>q<span class="hl str">',r'</span><span class="hl opt">,</span>s<span class="hl str">',t'</span><span class="hl opt">) =</span>
  q <span class="hl opt">*</span>$ q<span class="hl str">'  +$  r *$ s'</span><span class="hl opt">,</span>  q <span class="hl opt">*</span>$ r<span class="hl str">'  +$  r *$ t'</span><span class="hl opt">,</span>
  s <span class="hl opt">*</span>$ q<span class="hl str">'  +$  t *$ s'</span><span class="hl opt">,</span>  s <span class="hl opt">*</span>$ r<span class="hl str">'  +$  t *$ t'</span>

<span class="hl com">(* Multiply big int matrix qrst by small int matrix qrst' (small on right) *)</span>
<span class="hl kwa">let</span> mmr <span class="hl opt">(</span>q<span class="hl opt">,</span>r<span class="hl opt">,</span>s<span class="hl opt">,</span>t<span class="hl opt">) (</span>q<span class="hl str">',r'</span><span class="hl opt">,</span>s<span class="hl str">',t'</span><span class="hl opt">) =</span>
  q<span class="hl str">' *$ q  +$  s'</span> <span class="hl opt">*</span>$ r<span class="hl opt">,</span>  r<span class="hl str">' *$ q  +$  t'</span> <span class="hl opt">*</span>$ r<span class="hl opt">,</span>
  q<span class="hl str">' *$ s  +$  s'</span> <span class="hl opt">*</span>$ t<span class="hl opt">,</span>  r<span class="hl str">' *$ s  +$  t'</span> <span class="hl opt">*</span>$ t

<span class="hl kwa">let</span> <span class="hl kwb">unit</span> <span class="hl opt">= (</span>unit_big_int<span class="hl opt">,</span>zero_big_int<span class="hl opt">,</span>zero_big_int<span class="hl opt">,</span>unit_big_int<span class="hl opt">)</span>

<span class="hl kwa">let</span> next z   <span class="hl opt">=</span> ext z <span class="hl num">3</span>
<span class="hl kwa">and</span> safe z n <span class="hl opt">=</span> ext z <span class="hl num">4</span> <span class="hl opt">==</span> n
<span class="hl kwa">and</span> prod z n <span class="hl opt">=</span> mml <span class="hl opt">(</span><span class="hl num">10</span><span class="hl opt">, -</span><span class="hl num">10</span><span class="hl opt">*</span>n<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">)</span> z
<span class="hl kwa">and</span> cons z k <span class="hl opt">=</span>
  <span class="hl kwa">let</span> den <span class="hl opt">=</span> <span class="hl num">2</span><span class="hl opt">*</span>k <span class="hl opt">+</span> <span class="hl num">1</span> <span class="hl kwa">in</span>
  mmr z <span class="hl opt">(</span>k<span class="hl opt">,</span> <span class="hl num">2</span><span class="hl opt">*</span>den<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> den<span class="hl opt">)</span>

<span class="hl kwa">let rec</span> digit k z n row col <span class="hl opt">=</span>
  <span class="hl kwa">if</span> n <span class="hl opt">==</span> <span class="hl num">0</span> <span class="hl kwa">then</span> printf <span class="hl str">&quot;%*s</span><span class="hl esc">\t</span><span class="hl str">:%i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> <span class="hl opt">(</span><span class="hl num">10</span><span class="hl opt">-</span>col<span class="hl opt">)</span> <span class="hl str">&quot;&quot;</span> <span class="hl opt">(</span>row<span class="hl opt">+</span>col<span class="hl opt">)</span> <span class="hl kwa">else</span>
  <span class="hl kwa">let</span> d <span class="hl opt">=</span> next z <span class="hl kwa">in</span>
  <span class="hl kwa">if</span> safe z d <span class="hl kwa">then</span>
    <span class="hl kwa">if</span> col <span class="hl opt">=</span> <span class="hl num">10</span> <span class="hl kwa">then begin</span>
      <span class="hl kwa">let</span> row <span class="hl opt">=</span> row <span class="hl opt">+</span> <span class="hl num">10</span> <span class="hl kwa">in</span>
      printf <span class="hl str">&quot;</span><span class="hl esc">\t</span><span class="hl str">:%i</span><span class="hl esc">\n</span><span class="hl str">%i&quot;</span> row d<span class="hl opt">;</span>
      digit k <span class="hl opt">(</span>prod z d<span class="hl opt">) (</span>n<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">)</span> row <span class="hl num">1</span>
    <span class="hl kwa">end else begin</span>
      print_int d<span class="hl opt">;</span>
      digit k <span class="hl opt">(</span>prod z d<span class="hl opt">) (</span>n<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">)</span> row <span class="hl opt">(</span>col<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)</span>
    <span class="hl kwa">end</span>
  <span class="hl kwa">else</span> digit <span class="hl opt">(</span>k<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">) (</span>cons z k<span class="hl opt">)</span> n row col

<span class="hl kwa">let</span> digits n <span class="hl opt">=</span> digit <span class="hl num">1</span> <span class="hl kwb">unit</span> n <span class="hl num">0 0</span>

<span class="hl kwa">let</span> <span class="hl opt">() =</span> digits <span class="hl opt">(</span><span class="hl kwa">try</span> int_of_string <span class="hl opt">(</span><span class="hl kwc">Array</span><span class="hl opt">.</span>get <span class="hl kwc">Sys</span><span class="hl opt">.</span>argv <span class="hl num">1</span><span class="hl opt">)</span> <span class="hl kwa">with</span> _ <span class="hl opt">-&gt;</span> <span class="hl num">27</span><span class="hl opt">)</span>
