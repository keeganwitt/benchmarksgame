<span class="hl com">/*</span>
<span class="hl com"> * The Computer Language Benchmarks Game </span>
<span class="hl com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"> * contributed by Benedikt Nordhoff</span>
<span class="hl com"> * parallelized adaptation of Scala version #4 by Rex Kerr (Java version #4 by Anthony Donnefort)</span>
<span class="hl com"> */</span>

<span class="hl kwa">import</span> akka<span class="hl opt">.</span>actor<span class="hl opt">.</span>_
<span class="hl kwa">object</span> revcomp <span class="hl kwa">extends</span> App <span class="hl opt">{</span>  
  <span class="hl kwa">val</span> table <span class="hl opt">=</span> <span class="hl kwa">new</span> Array<span class="hl opt">[</span>Byte<span class="hl opt">](</span><span class="hl num">128</span><span class="hl opt">)</span>
  <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">&lt;-</span> <span class="hl num">0</span> to <span class="hl num">127</span><span class="hl opt">) {</span> <span class="hl kwd">table</span><span class="hl opt">(</span>i<span class="hl opt">) =</span> i<span class="hl opt">.</span>toByte <span class="hl opt">}</span>
  <span class="hl kwa">for</span> <span class="hl opt">((</span>i<span class="hl opt">,</span>o<span class="hl opt">) &lt;-</span> <span class="hl str">&quot;ACGTUMRWSYKVHDB&quot;</span><span class="hl opt">.</span>toList zip <span class="hl str">&quot;TGCAAKYWSRMBDHVN&quot;</span><span class="hl opt">.</span>toList<span class="hl opt">) {</span>
    <span class="hl kwd">table</span><span class="hl opt">(</span>i<span class="hl opt">) =</span> o<span class="hl opt">.</span>toByte
    <span class="hl kwd">table</span><span class="hl opt">(</span>i<span class="hl opt">.</span>toLower<span class="hl opt">) =</span> o<span class="hl opt">.</span>toByte
  <span class="hl opt">}</span>
  <span class="hl kwa">val</span> system <span class="hl opt">=</span> ActorSystem<span class="hl opt">.</span><span class="hl kwd">create</span><span class="hl opt">(</span><span class="hl str">&quot;MySystem&quot;</span><span class="hl opt">);</span>
  <span class="hl kwa">val</span> mainActor <span class="hl opt">=</span> system<span class="hl opt">.</span><span class="hl kwd">actorOf</span><span class="hl opt">(</span>Props<span class="hl opt">[</span>Reader<span class="hl opt">])</span>
<span class="hl opt">}</span>

<span class="hl slc">//Messages</span>
<span class="hl kwa">case class</span> <span class="hl kwd">Parse</span><span class="hl opt">(</span>ar<span class="hl opt">:</span> Array<span class="hl opt">[</span>Byte<span class="hl opt">],</span>len<span class="hl opt">:</span>Int<span class="hl opt">)</span>
<span class="hl kwa">case class</span> <span class="hl kwd">Part</span><span class="hl opt">(</span>ar<span class="hl opt">:</span>Array<span class="hl opt">[</span>Byte<span class="hl opt">],</span>start<span class="hl opt">:</span>Int<span class="hl opt">,</span>len<span class="hl opt">:</span>Int<span class="hl opt">)</span>
<span class="hl kwa">case object</span> Reverse
<span class="hl kwa">case object</span> Done
<span class="hl kwa">case object</span> Write
<span class="hl kwa">case class</span> <span class="hl kwd">Next</span><span class="hl opt">(</span>ref<span class="hl opt">:</span> ActorRef<span class="hl opt">)</span>

<span class="hl slc">// Reads from stdio and forwards to Parser</span>
<span class="hl kwa">class</span> Reader <span class="hl kwa">extends</span> Actor <span class="hl opt">{</span>
    <span class="hl kwa">override def</span> preStart<span class="hl opt">{</span>
    <span class="hl kwa">val</span> parser <span class="hl opt">=</span> context<span class="hl opt">.</span><span class="hl kwd">actorOf</span><span class="hl opt">(</span>Props<span class="hl opt">[</span>Parser<span class="hl opt">])</span>
    <span class="hl kwa">val</span> SIZE <span class="hl opt">=</span> <span class="hl num">8192</span><span class="hl opt">*</span><span class="hl num">10000</span>    
    <span class="hl kwa">var</span> n <span class="hl opt">=</span> <span class="hl num">0</span>
    <span class="hl kwa">do</span> <span class="hl opt">{</span>
      <span class="hl kwa">val</span> input <span class="hl opt">=</span> <span class="hl kwa">new</span> Array<span class="hl opt">[</span>Byte<span class="hl opt">](</span>SIZE<span class="hl opt">)</span>
      n <span class="hl opt">=</span> System<span class="hl opt">.</span><span class="hl kwa">in</span><span class="hl opt">.</span><span class="hl kwd">read</span><span class="hl opt">(</span>input<span class="hl opt">)</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>n <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">) {</span>
        parser <span class="hl opt">!</span> <span class="hl kwd">Parse</span><span class="hl opt">(</span>input<span class="hl opt">,</span>n<span class="hl opt">)</span>        
      <span class="hl opt">}</span>
    <span class="hl opt">}</span> <span class="hl kwa">while</span> <span class="hl opt">(</span>n <span class="hl opt">!= -</span><span class="hl num">1</span><span class="hl opt">)</span>
    parser <span class="hl opt">!</span> Done
  <span class="hl opt">}</span>
  <span class="hl kwa">def</span> receive <span class="hl opt">= {</span><span class="hl kwa">case</span> _ <span class="hl opt">=&gt;}</span>
<span class="hl opt">}</span>

<span class="hl slc">// Receives chunks from reader, looks for '&gt;' and forwards chunks to Reverser</span>
<span class="hl kwa">class</span> Parser <span class="hl kwa">extends</span> Actor <span class="hl opt">{</span>
  <span class="hl kwa">var</span> cr<span class="hl opt">:</span>ActorRef <span class="hl opt">=</span> null
  <span class="hl kwa">def</span> receive <span class="hl opt">= {</span>
    <span class="hl kwa">case</span> <span class="hl kwd">Parse</span><span class="hl opt">(</span>ar<span class="hl opt">,</span>len<span class="hl opt">) =&gt;</span> 
      <span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span>
        <span class="hl kwa">var</span> i0 <span class="hl opt">=</span> <span class="hl num">0</span>
        <span class="hl kwa">while</span> <span class="hl opt">(</span>i <span class="hl opt">&lt;</span> len<span class="hl opt">) {</span>
          <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">ar</span><span class="hl opt">(</span>i<span class="hl opt">)==</span><span class="hl str">'&gt;'</span><span class="hl opt">) {</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>i<span class="hl opt">&gt;</span>i0<span class="hl opt">)</span> cr <span class="hl opt">!</span> <span class="hl kwd">Part</span><span class="hl opt">(</span>ar<span class="hl opt">,</span>i0<span class="hl opt">,</span>i<span class="hl opt">-</span>i0<span class="hl opt">)</span>
            <span class="hl kwa">val</span> nr <span class="hl opt">=</span> context<span class="hl opt">.</span><span class="hl kwd">actorOf</span><span class="hl opt">(</span>Props<span class="hl opt">[</span>Reverser<span class="hl opt">])</span>
            <span class="hl kwa">if</span><span class="hl opt">(</span>cr <span class="hl opt">!=</span> null<span class="hl opt">) {</span>
              cr <span class="hl opt">!</span> Reverse
              cr <span class="hl opt">!</span> <span class="hl kwd">Next</span><span class="hl opt">(</span>nr<span class="hl opt">)</span>
            <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>nr <span class="hl opt">!</span> Write<span class="hl opt">}</span>
            cr <span class="hl opt">=</span> nr
            i0 <span class="hl opt">=</span> i
          <span class="hl opt">}</span>
          i <span class="hl opt">+=</span> <span class="hl num">1</span>
        <span class="hl opt">}</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>i0<span class="hl opt">&lt;</span>len<span class="hl opt">)</span> cr <span class="hl opt">!</span> <span class="hl kwd">Part</span><span class="hl opt">(</span>ar<span class="hl opt">,</span>i0<span class="hl opt">,</span>len<span class="hl opt">-</span>i0<span class="hl opt">)</span>
    <span class="hl kwa">case</span> Done <span class="hl opt">=&gt;</span> cr <span class="hl opt">!</span> Reverse<span class="hl opt">;</span> cr <span class="hl opt">!</span> <span class="hl kwd">Next</span><span class="hl opt">(</span>self<span class="hl opt">)</span>
    <span class="hl kwa">case</span> Write <span class="hl opt">=&gt;</span> context<span class="hl opt">.</span>system<span class="hl opt">.</span>shutdown
  <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl slc">// Puts chucks together and reverses stuff</span>
<span class="hl kwa">class</span> Reverser <span class="hl kwa">extends</span> java<span class="hl opt">.</span>io<span class="hl opt">.</span>ByteArrayOutputStream with Actor <span class="hl opt">{</span>
  <span class="hl kwa">var</span> next<span class="hl opt">:</span>ActorRef <span class="hl opt">=</span> null
  <span class="hl kwa">var</span> done <span class="hl opt">=</span> false
  <span class="hl kwa">var</span> wdone <span class="hl opt">=</span> false
  <span class="hl kwa">def</span> receive <span class="hl opt">= {</span>
    <span class="hl kwa">case</span> <span class="hl kwd">Part</span><span class="hl opt">(</span>ar<span class="hl opt">,</span>start<span class="hl opt">,</span>len<span class="hl opt">) =&gt;</span> <span class="hl kwd">write</span><span class="hl opt">(</span>ar<span class="hl opt">,</span>start<span class="hl opt">,</span>len<span class="hl opt">)</span>
    <span class="hl kwa">case</span> Reverse <span class="hl opt">=&gt;</span> doReverse
    <span class="hl kwa">case</span> Write <span class="hl opt">=&gt;</span> <span class="hl kwa">if</span><span class="hl opt">(</span>done<span class="hl opt">)</span> doWrite <span class="hl kwa">else</span> <span class="hl opt">{</span>done <span class="hl opt">=</span> true<span class="hl opt">}</span>
    <span class="hl kwa">case</span> <span class="hl kwd">Next</span><span class="hl opt">(</span>ref<span class="hl opt">) =&gt;</span> next <span class="hl opt">=</span> ref<span class="hl opt">;</span> <span class="hl kwa">if</span><span class="hl opt">(</span>wdone<span class="hl opt">) {</span>next <span class="hl opt">!</span> Write<span class="hl opt">;</span>context<span class="hl opt">.</span><span class="hl kwd">stop</span><span class="hl opt">(</span>self<span class="hl opt">)}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>wdone <span class="hl opt">=</span> true<span class="hl opt">}</span>
  <span class="hl opt">}</span>
  <span class="hl kwa">def</span> doReverse <span class="hl opt">{</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>count <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">) {</span>
      <span class="hl kwa">val</span> table <span class="hl opt">=</span> revcomp<span class="hl opt">.</span>table
      <span class="hl kwa">var</span> begin <span class="hl opt">=</span> <span class="hl num">0</span>
      <span class="hl kwa">var</span> end <span class="hl opt">=</span> count<span class="hl opt">-</span><span class="hl num">1</span>
      <span class="hl kwa">while</span> <span class="hl opt">(</span><span class="hl kwd">buf</span><span class="hl opt">(</span>begin<span class="hl opt">) !=</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span> <span class="hl opt">&amp;&amp;</span> begin <span class="hl opt">&lt;</span> count<span class="hl opt">) {</span> begin <span class="hl opt">+=</span> <span class="hl num">1</span> <span class="hl opt">}</span>
      <span class="hl kwa">while</span> <span class="hl opt">(</span>begin <span class="hl opt">&lt;=</span> end<span class="hl opt">) {</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">buf</span><span class="hl opt">(</span>begin<span class="hl opt">) ==</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl opt">)</span> begin <span class="hl opt">+=</span> <span class="hl num">1</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">buf</span><span class="hl opt">(</span>end<span class="hl opt">) ==</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl opt">)</span> end <span class="hl opt">-=</span> <span class="hl num">1</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>begin<span class="hl opt">&lt;=</span>end<span class="hl opt">) {</span>
          <span class="hl kwa">val</span> temp <span class="hl opt">=</span> <span class="hl kwd">buf</span><span class="hl opt">(</span>begin<span class="hl opt">)</span>
          <span class="hl kwd">buf</span><span class="hl opt">(</span>begin<span class="hl opt">) =</span> <span class="hl kwd">table</span><span class="hl opt">(</span><span class="hl kwd">buf</span><span class="hl opt">(</span>end<span class="hl opt">))</span>
          <span class="hl kwd">buf</span><span class="hl opt">(</span>end<span class="hl opt">) =</span> <span class="hl kwd">table</span><span class="hl opt">(</span>temp<span class="hl opt">)</span>
          begin <span class="hl opt">+=</span> <span class="hl num">1</span>
          end <span class="hl opt">-=</span> <span class="hl num">1</span>
        <span class="hl opt">}</span>
      <span class="hl opt">}</span>
      <span class="hl kwa">if</span><span class="hl opt">(</span>done<span class="hl opt">)</span> doWrite <span class="hl kwa">else</span> done <span class="hl opt">=</span> true
    <span class="hl opt">}</span>
  <span class="hl opt">}</span>
  <span class="hl kwa">def</span> doWrite <span class="hl opt">{</span>
    System<span class="hl opt">.</span>out<span class="hl opt">.</span><span class="hl kwd">write</span><span class="hl opt">(</span>buf<span class="hl opt">,</span><span class="hl num">0</span><span class="hl opt">,</span>count<span class="hl opt">)</span>
    <span class="hl kwa">if</span><span class="hl opt">(</span>wdone<span class="hl opt">) {</span>next <span class="hl opt">!</span> Write<span class="hl opt">;</span>context<span class="hl opt">.</span><span class="hl kwd">stop</span><span class="hl opt">(</span>self<span class="hl opt">)}</span> <span class="hl kwa">else</span> wdone <span class="hl opt">=</span> true
  <span class="hl opt">}</span>    
<span class="hl opt">}</span> 
