<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * contributed by Branimir Maksimovic</span>
<span class="hl com"> */</span>

<span class="hl kwa">package</span> main

<span class="hl kwa">import</span> <span class="hl opt">(</span>
   <span class="hl str">&quot;bufio&quot;</span>
   <span class="hl str">&quot;bytes&quot;</span>
   <span class="hl str">&quot;fmt&quot;</span>
   <span class="hl str">&quot;os&quot;</span>
   <span class="hl str">&quot;sort&quot;</span>
   <span class="hl str">&quot;runtime&quot;</span>
<span class="hl opt">)</span>

<span class="hl kwa">var</span> <span class="hl opt">(</span>
   toNum <span class="hl opt">[</span><span class="hl num">256</span><span class="hl opt">]</span><span class="hl kwb">byte</span>
   toChar <span class="hl opt">[</span><span class="hl num">256</span><span class="hl opt">]</span><span class="hl kwb">byte</span>
<span class="hl opt">)</span>

<span class="hl kwa">func</span> <span class="hl kwd">InitTables</span> <span class="hl opt">() {</span>
   toNum<span class="hl opt">[</span><span class="hl str">'A'</span><span class="hl opt">] =</span> <span class="hl num">0</span>
   toNum<span class="hl opt">[</span><span class="hl str">'C'</span><span class="hl opt">] =</span> <span class="hl num">1</span>
   toNum<span class="hl opt">[</span><span class="hl str">'T'</span><span class="hl opt">] =</span> <span class="hl num">2</span>
   toNum<span class="hl opt">[</span><span class="hl str">'G'</span><span class="hl opt">] =</span> <span class="hl num">3</span>
   toNum<span class="hl opt">[</span><span class="hl str">'a'</span><span class="hl opt">] =</span> <span class="hl num">0</span>
   toNum<span class="hl opt">[</span><span class="hl str">'c'</span><span class="hl opt">] =</span> <span class="hl num">1</span>
   toNum<span class="hl opt">[</span><span class="hl str">'t'</span><span class="hl opt">] =</span> <span class="hl num">2</span>
   toNum<span class="hl opt">[</span><span class="hl str">'g'</span><span class="hl opt">] =</span> <span class="hl num">3</span>
   
   toChar<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] =</span> <span class="hl str">'A'</span>
   toChar<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">] =</span> <span class="hl str">'C'</span>
   toChar<span class="hl opt">[</span><span class="hl num">2</span><span class="hl opt">] =</span> <span class="hl str">'T'</span>
   toChar<span class="hl opt">[</span><span class="hl num">3</span><span class="hl opt">] =</span> <span class="hl str">'G'</span>
<span class="hl opt">}</span>
<span class="hl kwa">const</span> SIZE <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">&lt;&lt;</span><span class="hl num">16</span>
<span class="hl kwa">type</span> HTable <span class="hl kwa">struct</span> <span class="hl opt">{</span>
   table <span class="hl opt">*[</span>SIZE<span class="hl opt">]*</span>Node
<span class="hl opt">}</span>
<span class="hl kwa">type</span> Node <span class="hl kwa">struct</span> <span class="hl opt">{</span>
   data T
   next <span class="hl opt">*</span>Node
<span class="hl opt">}</span>
<span class="hl kwa">func</span> <span class="hl kwd">NewTable</span><span class="hl opt">()</span> HTable <span class="hl opt">{</span>
   <span class="hl kwa">return</span> HTable<span class="hl opt">{ &amp;[</span>SIZE<span class="hl opt">]*</span>Node<span class="hl opt">{} }</span>
<span class="hl opt">}</span>
<span class="hl kwa">func</span> <span class="hl opt">(</span>t<span class="hl opt">*</span> HTable<span class="hl opt">)</span> <span class="hl kwd">Get</span><span class="hl opt">(</span>input T<span class="hl opt">) (*</span>T<span class="hl opt">,</span><span class="hl kwb">bool</span><span class="hl opt">) {</span>
   hash <span class="hl opt">:=</span> input<span class="hl opt">.</span><span class="hl kwd">Hash</span><span class="hl opt">()</span>
   slot <span class="hl opt">:=</span> hash <span class="hl opt">&amp; (</span>SIZE<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">)</span>
   n <span class="hl opt">:=</span> t<span class="hl opt">.</span>table<span class="hl opt">[</span>slot<span class="hl opt">]</span> 
   <span class="hl kwa">if</span> n <span class="hl opt">==</span> <span class="hl kwb">nil</span> <span class="hl opt">{</span>
      n <span class="hl opt">= &amp;</span>Node<span class="hl opt">{</span> input<span class="hl opt">,</span><span class="hl kwb">nil</span> <span class="hl opt">}</span>
      t<span class="hl opt">.</span>table<span class="hl opt">[</span>slot<span class="hl opt">] =</span> n
      <span class="hl kwa">return</span> <span class="hl opt">&amp;</span>n<span class="hl opt">.</span>data<span class="hl opt">,</span><span class="hl kwb">false</span>
   <span class="hl opt">}</span>
   <span class="hl kwa">for</span> <span class="hl opt">;</span>n <span class="hl opt">!=</span> <span class="hl kwb">nil</span><span class="hl opt">;</span>n<span class="hl opt">=</span>n<span class="hl opt">.</span>next <span class="hl opt">{</span>
      <span class="hl kwa">if</span> n<span class="hl opt">.</span>data<span class="hl opt">.</span><span class="hl kwd">Equal</span><span class="hl opt">(</span>input<span class="hl opt">) {</span>
         <span class="hl kwa">return</span> <span class="hl opt">&amp;</span>n<span class="hl opt">.</span>data<span class="hl opt">,</span><span class="hl kwb">true</span>
      <span class="hl opt">}</span>
   <span class="hl opt">}</span> 
   n <span class="hl opt">= &amp;</span>Node<span class="hl opt">{</span> input<span class="hl opt">,</span> t<span class="hl opt">.</span>table<span class="hl opt">[</span>slot<span class="hl opt">] }</span>
   t<span class="hl opt">.</span>table<span class="hl opt">[</span>slot<span class="hl opt">] =</span> n
   <span class="hl kwa">return</span> <span class="hl opt">&amp;</span>n<span class="hl opt">.</span>data<span class="hl opt">,</span><span class="hl kwb">false</span>
<span class="hl opt">}</span>
<span class="hl kwa">func</span> <span class="hl opt">(</span>t<span class="hl opt">*</span> HTable<span class="hl opt">)</span> <span class="hl kwd">ForEach</span><span class="hl opt">(</span>f <span class="hl kwa">func</span><span class="hl opt">(</span>T<span class="hl opt">)) {</span>
   <span class="hl kwa">for</span> _<span class="hl opt">,</span>v <span class="hl opt">:=</span> <span class="hl kwa">range</span> t<span class="hl opt">.</span>table <span class="hl opt">{</span>
      <span class="hl kwa">for</span> <span class="hl opt">;</span>v <span class="hl opt">!=</span> <span class="hl kwb">nil</span><span class="hl opt">;</span>v <span class="hl opt">=</span> v<span class="hl opt">.</span>next <span class="hl opt">{</span>
         <span class="hl kwd">f</span><span class="hl opt">(</span>v<span class="hl opt">.</span>data<span class="hl opt">)</span>
      <span class="hl opt">}</span>
   <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl kwa">type</span> T <span class="hl kwa">struct</span> <span class="hl opt">{</span> 
   data <span class="hl kwb">uint64</span>
   count <span class="hl kwb">int</span>
   size <span class="hl kwb">byte</span>
<span class="hl opt">}</span>
<span class="hl kwa">func</span> <span class="hl kwd">Pack</span><span class="hl opt">(</span>input <span class="hl kwb">string</span><span class="hl opt">)</span> T <span class="hl opt">{</span>
   t <span class="hl opt">:=</span> T<span class="hl opt">{</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl kwb">byte</span><span class="hl opt">(</span><span class="hl kwb">len</span><span class="hl opt">(</span>input<span class="hl opt">))}</span>
   <span class="hl kwa">for</span> i <span class="hl opt">:=</span> <span class="hl num">0</span> <span class="hl opt">;</span> i <span class="hl opt">&lt;</span> <span class="hl kwb">int</span><span class="hl opt">(</span>t<span class="hl opt">.</span>size<span class="hl opt">);</span> i<span class="hl opt">++ {</span>
      t<span class="hl opt">.</span>data <span class="hl opt">&lt;&lt;=</span> <span class="hl num">2</span>
      t<span class="hl opt">.</span>data |<span class="hl opt">=</span> <span class="hl kwb">uint64</span><span class="hl opt">(</span>toNum<span class="hl opt">[</span>input<span class="hl opt">[</span>i<span class="hl opt">]])</span>
   <span class="hl opt">}</span>
   <span class="hl kwa">return</span> t
<span class="hl opt">}</span>
<span class="hl kwa">func</span> <span class="hl opt">(</span>t<span class="hl opt">*</span> T<span class="hl opt">)</span> <span class="hl kwd">String</span><span class="hl opt">()</span> <span class="hl kwb">string</span> <span class="hl opt">{</span>
   rc <span class="hl opt">:= []</span><span class="hl kwb">byte</span><span class="hl opt">{}</span>
   tmp <span class="hl opt">:=</span> t<span class="hl opt">.</span>data
   <span class="hl kwa">for</span> i<span class="hl opt">:=</span><span class="hl num">0</span> <span class="hl opt">;</span>i <span class="hl opt">&lt;</span> <span class="hl kwb">int</span><span class="hl opt">(</span>t<span class="hl opt">.</span>size<span class="hl opt">);</span> i<span class="hl opt">++ {</span>
      rc <span class="hl opt">=</span> <span class="hl kwd">append</span><span class="hl opt">(</span>rc<span class="hl opt">,</span> toChar<span class="hl opt">[</span>tmp <span class="hl opt">&amp;</span> <span class="hl num">3</span><span class="hl opt">])</span>
      tmp <span class="hl opt">&gt;&gt;=</span> <span class="hl num">2</span>
   <span class="hl opt">}</span>
   <span class="hl kwa">for</span> i<span class="hl opt">:=</span><span class="hl num">0</span><span class="hl opt">;</span>i<span class="hl opt">&lt;</span><span class="hl kwb">len</span><span class="hl opt">(</span>rc<span class="hl opt">)/</span><span class="hl num">2</span><span class="hl opt">;</span>i<span class="hl opt">++ {</span>
      tmp <span class="hl opt">:=</span> rc<span class="hl opt">[</span>i<span class="hl opt">]</span>
      rc<span class="hl opt">[</span>i<span class="hl opt">] =</span> rc<span class="hl opt">[</span><span class="hl kwb">len</span><span class="hl opt">(</span>rc<span class="hl opt">)-</span>i<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">]</span> 
      rc<span class="hl opt">[</span><span class="hl kwb">len</span><span class="hl opt">(</span>rc<span class="hl opt">) -</span> i <span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">] =</span> tmp
   <span class="hl opt">}</span>
   <span class="hl kwa">return</span> <span class="hl kwb">string</span><span class="hl opt">(</span>rc<span class="hl opt">)</span>
<span class="hl opt">}</span>
<span class="hl kwa">func</span> <span class="hl opt">(</span>t <span class="hl opt">*</span>T<span class="hl opt">)</span> <span class="hl kwd">Hash</span><span class="hl opt">()</span> <span class="hl kwb">uint64</span> <span class="hl opt">{</span>
   <span class="hl kwa">return</span> t<span class="hl opt">.</span>data
<span class="hl opt">}</span>
<span class="hl kwa">func</span> <span class="hl opt">(</span>t <span class="hl opt">*</span>T<span class="hl opt">)</span> <span class="hl kwd">Equal</span><span class="hl opt">(</span>in T<span class="hl opt">)</span> <span class="hl kwb">bool</span> <span class="hl opt">{</span>
   <span class="hl kwa">return</span> t<span class="hl opt">.</span>data <span class="hl opt">==</span> in<span class="hl opt">.</span>data
<span class="hl opt">}</span>

<span class="hl kwa">func</span> <span class="hl kwd">calculate</span><span class="hl opt">(</span>input <span class="hl kwb">string</span><span class="hl opt">,</span>size <span class="hl kwb">int</span><span class="hl opt">,</span>begin <span class="hl kwb">int</span><span class="hl opt">,</span> step <span class="hl kwb">int</span><span class="hl opt">,</span>snd <span class="hl kwa">chan</span> HTable<span class="hl opt">){</span>
   rc <span class="hl opt">:=</span> <span class="hl kwd">NewTable</span><span class="hl opt">()</span>
   <span class="hl kwa">for</span> i <span class="hl opt">:=</span> begin<span class="hl opt">;</span>i<span class="hl opt">&lt;</span><span class="hl kwb">len</span><span class="hl opt">(</span>input<span class="hl opt">)+</span><span class="hl num">1</span><span class="hl opt">-</span>size<span class="hl opt">;</span>i<span class="hl opt">+=</span>step <span class="hl opt">{</span>
      d<span class="hl opt">,</span>_ <span class="hl opt">:=</span> rc<span class="hl opt">.</span><span class="hl kwd">Get</span><span class="hl opt">(</span><span class="hl kwd">Pack</span><span class="hl opt">(</span>input<span class="hl opt">[</span>i<span class="hl opt">:</span>i<span class="hl opt">+</span>size<span class="hl opt">]))</span>
      d<span class="hl opt">.</span>count<span class="hl opt">++</span>
   <span class="hl opt">}</span>
   snd <span class="hl opt">&lt;-</span> rc
<span class="hl opt">}</span>

<span class="hl kwa">func</span> <span class="hl kwd">Tcalculate</span><span class="hl opt">(</span>input <span class="hl kwb">string</span><span class="hl opt">,</span>size <span class="hl kwb">int</span><span class="hl opt">) (</span>rc HTable<span class="hl opt">){</span>
   <span class="hl kwa">var</span> futures <span class="hl opt">[</span><span class="hl num">8</span><span class="hl opt">]</span><span class="hl kwa">chan</span> HTable
   rc <span class="hl opt">=</span> <span class="hl kwd">NewTable</span><span class="hl opt">()</span>
   <span class="hl kwa">for</span> i <span class="hl opt">:=</span> <span class="hl num">0</span><span class="hl opt">;</span>i<span class="hl opt">&lt;</span><span class="hl num">8</span><span class="hl opt">;</span> i<span class="hl opt">++ {</span>
      futures<span class="hl opt">[</span>i<span class="hl opt">] =</span> <span class="hl kwb">make</span><span class="hl opt">(</span><span class="hl kwa">chan</span> HTable<span class="hl opt">)</span>
      <span class="hl kwa">go</span> <span class="hl kwd">calculate</span><span class="hl opt">(</span>input<span class="hl opt">,</span>size<span class="hl opt">,</span>i<span class="hl opt">,</span><span class="hl num">8</span><span class="hl opt">,</span>futures<span class="hl opt">[</span>i<span class="hl opt">])</span>
   <span class="hl opt">}</span>
   <span class="hl kwa">var</span> res <span class="hl opt">[</span><span class="hl num">8</span><span class="hl opt">]</span>HTable
   <span class="hl kwa">for</span> i <span class="hl opt">:=</span> <span class="hl num">0</span><span class="hl opt">;</span>i<span class="hl opt">&lt;</span><span class="hl num">8</span><span class="hl opt">;</span>i<span class="hl opt">++ {</span>
      res<span class="hl opt">[</span>i<span class="hl opt">] = &lt;-</span> futures<span class="hl opt">[</span>i<span class="hl opt">]</span>
      f <span class="hl opt">:=</span> <span class="hl kwa">func</span><span class="hl opt">(</span>in T<span class="hl opt">) {</span>
         d<span class="hl opt">,</span>ok <span class="hl opt">:=</span> rc<span class="hl opt">.</span><span class="hl kwd">Get</span><span class="hl opt">(</span>in<span class="hl opt">)</span>
         <span class="hl kwa">if</span> ok <span class="hl opt">{</span>
            d<span class="hl opt">.</span>count <span class="hl opt">+=</span> in<span class="hl opt">.</span>count
         <span class="hl opt">}</span>
      <span class="hl opt">}</span>
      res<span class="hl opt">[</span>i<span class="hl opt">].</span><span class="hl kwd">ForEach</span><span class="hl opt">(</span>f<span class="hl opt">)</span>
   <span class="hl opt">}</span>
   <span class="hl kwa">return</span>
<span class="hl opt">}</span>

<span class="hl kwa">func</span> <span class="hl kwd">WriteFrequencies</span><span class="hl opt">(</span>input <span class="hl kwb">string</span><span class="hl opt">,</span>size <span class="hl kwb">int</span><span class="hl opt">){</span>
   <span class="hl kwa">var</span> sum <span class="hl kwb">int</span> <span class="hl opt">=</span> <span class="hl kwb">len</span><span class="hl opt">(</span>input<span class="hl opt">) +</span> <span class="hl num">1</span> <span class="hl opt">-</span> size
   frequencies <span class="hl opt">:=</span> <span class="hl kwd">Tcalculate</span><span class="hl opt">(</span>input<span class="hl opt">,</span>size<span class="hl opt">)</span>
   freq<span class="hl opt">,</span> mfreq <span class="hl opt">:= []</span><span class="hl kwb">int</span><span class="hl opt">{},</span><span class="hl kwa">map</span><span class="hl opt">[</span><span class="hl kwb">int</span><span class="hl opt">]*</span>T<span class="hl opt">{}</span>
   f <span class="hl opt">:=</span> <span class="hl kwa">func</span><span class="hl opt">(</span>in T<span class="hl opt">) {</span>
      freq <span class="hl opt">=</span> <span class="hl kwd">append</span><span class="hl opt">(</span>freq<span class="hl opt">,</span>in<span class="hl opt">.</span>count<span class="hl opt">)</span>
      mfreq<span class="hl opt">[</span>in<span class="hl opt">.</span>count<span class="hl opt">]=&amp;</span>in
   <span class="hl opt">}</span>
   frequencies<span class="hl opt">.</span><span class="hl kwd">ForEach</span><span class="hl opt">(</span>f<span class="hl opt">)</span>
   sort<span class="hl opt">.</span><span class="hl kwd">Sort</span><span class="hl opt">(</span>sort<span class="hl opt">.</span><span class="hl kwd">Reverse</span><span class="hl opt">(</span>sort<span class="hl opt">.</span><span class="hl kwd">IntSlice</span><span class="hl opt">(</span>freq<span class="hl opt">)))</span>
   <span class="hl kwa">for</span> _<span class="hl opt">,</span>k <span class="hl opt">:=</span> <span class="hl kwa">range</span> freq <span class="hl opt">{</span>
      <span class="hl kwa">var</span> val <span class="hl kwb">float64</span>
      <span class="hl kwa">if</span> sum <span class="hl opt">==</span> <span class="hl num">0</span> <span class="hl opt">{</span>
         val <span class="hl opt">=</span> <span class="hl num">0.0</span>
      <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
         val <span class="hl opt">=</span> <span class="hl kwb">float64</span><span class="hl opt">(</span><span class="hl num">100</span><span class="hl opt">*</span>k<span class="hl opt">)/</span><span class="hl kwb">float64</span><span class="hl opt">(</span>sum<span class="hl opt">)</span>
      <span class="hl opt">}</span>
      fmt<span class="hl opt">.</span><span class="hl kwd">Printf</span><span class="hl opt">(</span><span class="hl str">&quot;%s %.3f</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span>mfreq<span class="hl opt">[</span>k<span class="hl opt">].</span><span class="hl kwd">String</span><span class="hl opt">(),</span>val<span class="hl opt">)</span>
   <span class="hl opt">}</span>
   fmt<span class="hl opt">.</span><span class="hl kwd">Println</span><span class="hl opt">()</span>
<span class="hl opt">}</span>

<span class="hl kwa">func</span> <span class="hl kwd">WriteCount</span><span class="hl opt">(</span>input <span class="hl kwb">string</span><span class="hl opt">,</span>label <span class="hl kwb">string</span><span class="hl opt">) {</span>
   frequencies <span class="hl opt">:=</span> <span class="hl kwd">Tcalculate</span><span class="hl opt">(</span>input<span class="hl opt">,</span><span class="hl kwb">len</span><span class="hl opt">(</span>label<span class="hl opt">))</span>
   d<span class="hl opt">,</span>_ <span class="hl opt">:=</span> frequencies<span class="hl opt">.</span><span class="hl kwd">Get</span><span class="hl opt">(</span><span class="hl kwd">Pack</span><span class="hl opt">(</span>label<span class="hl opt">))</span>
   fmt<span class="hl opt">.</span><span class="hl kwd">Printf</span><span class="hl opt">(</span><span class="hl str">&quot;%d</span><span class="hl esc">\t</span><span class="hl str">%s</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span>d<span class="hl opt">.</span>count<span class="hl opt">,</span>label<span class="hl opt">)</span>
<span class="hl opt">}</span>

<span class="hl kwa">func</span> <span class="hl kwd">main</span><span class="hl opt">() {</span>
   runtime<span class="hl opt">.</span><span class="hl kwd">GOMAXPROCS</span><span class="hl opt">(</span><span class="hl num">4</span><span class="hl opt">)</span>
   <span class="hl kwd">InitTables</span><span class="hl opt">()</span>
   
   in <span class="hl opt">:=</span> bufio<span class="hl opt">.</span><span class="hl kwd">NewScanner</span><span class="hl opt">(</span>os<span class="hl opt">.</span>Stdin<span class="hl opt">)</span>
   three <span class="hl opt">:= []</span><span class="hl kwb">byte</span><span class="hl opt">(</span><span class="hl str">&quot;&gt;THREE&quot;</span><span class="hl opt">)</span>
   <span class="hl kwa">for</span> <span class="hl opt">{</span>
      in<span class="hl opt">.</span><span class="hl kwd">Scan</span><span class="hl opt">()</span>
      <span class="hl kwa">if</span> bytes<span class="hl opt">.</span><span class="hl kwd">HasPrefix</span><span class="hl opt">(</span>in<span class="hl opt">.</span><span class="hl kwd">Bytes</span><span class="hl opt">(),</span> three<span class="hl opt">) {</span>
         <span class="hl kwa">break</span>
      <span class="hl opt">}</span>
   <span class="hl opt">}</span>

   input <span class="hl opt">:=</span> <span class="hl kwb">make</span><span class="hl opt">([]</span><span class="hl kwb">byte</span><span class="hl opt">,</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">125000000</span><span class="hl opt">)</span>
   <span class="hl kwa">for</span> in<span class="hl opt">.</span><span class="hl kwd">Scan</span><span class="hl opt">() {</span>
      input <span class="hl opt">=</span> <span class="hl kwd">append</span><span class="hl opt">(</span>input<span class="hl opt">,</span>in<span class="hl opt">.</span><span class="hl kwd">Bytes</span><span class="hl opt">()...)</span>
   <span class="hl opt">}</span>
   sinput <span class="hl opt">:=</span> <span class="hl kwb">string</span><span class="hl opt">(</span>input<span class="hl opt">)</span>
   input <span class="hl opt">=</span> <span class="hl kwb">nil</span>

   <span class="hl kwd">WriteFrequencies</span><span class="hl opt">(</span>sinput<span class="hl opt">,</span><span class="hl num">1</span><span class="hl opt">)</span>
   <span class="hl kwd">WriteFrequencies</span><span class="hl opt">(</span>sinput<span class="hl opt">,</span><span class="hl num">2</span><span class="hl opt">)</span>
   
   <span class="hl kwd">WriteCount</span><span class="hl opt">(</span>sinput<span class="hl opt">,</span> <span class="hl str">&quot;GGT&quot;</span><span class="hl opt">)</span>
   <span class="hl kwd">WriteCount</span><span class="hl opt">(</span>sinput<span class="hl opt">,</span> <span class="hl str">&quot;GGTA&quot;</span><span class="hl opt">)</span>
   <span class="hl kwd">WriteCount</span><span class="hl opt">(</span>sinput<span class="hl opt">,</span> <span class="hl str">&quot;GGTATT&quot;</span><span class="hl opt">)</span>
   <span class="hl kwd">WriteCount</span><span class="hl opt">(</span>sinput<span class="hl opt">,</span> <span class="hl str">&quot;GGTATTTTAATT&quot;</span><span class="hl opt">)</span>
   <span class="hl kwd">WriteCount</span><span class="hl opt">(</span>sinput<span class="hl opt">,</span> <span class="hl str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="hl opt">)</span>
<span class="hl opt">}</span>
