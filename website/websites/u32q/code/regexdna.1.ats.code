<span class="hl com">(*</span>
<span class="hl com">** The Computer Language Benchmarks Game</span>
<span class="hl com">** http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com">** contributed by Hongwei Xi </span>
<span class="hl com">**</span>
<span class="hl com">** regex-dna benchmark using PCRE</span>
<span class="hl com">**</span>
<span class="hl com">** compilation command:</span>
<span class="hl com">**   atscc -O3 -fomit-frame-pointer -o regex-dna2 regex-dna2.dats -lpcre</span>
<span class="hl com">*)</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl opt">%{^</span>
<span class="hl ppc">#include &lt;pcre.h&gt;</span>
<span class="hl opt">%}</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">staload</span> _<span class="hl com">(*anonymous*)</span> <span class="hl opt">=</span> <span class="hl str">&quot;prelude/DATS/array.dats&quot;</span>

<span class="hl com">(* ****** ****** *)</span>

viewdef bytes_v <span class="hl opt">(</span>n<span class="hl opt">:</span><span class="hl kwb">int</span><span class="hl opt">,</span> l<span class="hl opt">:</span>addr<span class="hl opt">) =</span> bytes n &#64; l

<span class="hl com">(* ****** ****** *)</span>

<span class="hl opt">%{^</span>
<span class="hl kwd">ATSinline</span><span class="hl opt">()</span>
ats_ptr_type
malloc_atm <span class="hl opt">(</span>ats_int_type n<span class="hl opt">) {</span> <span class="hl kwa">return</span> malloc <span class="hl opt">(</span>n<span class="hl opt">) ; }</span>

<span class="hl kwd">ATSinline</span><span class="hl opt">()</span>
ats_void_type free_atm <span class="hl opt">(</span>ats_ptr_type p<span class="hl opt">) {</span> free <span class="hl opt">(</span>p<span class="hl opt">) ;</span> <span class="hl kwa">return</span> <span class="hl opt">; }</span>
<span class="hl opt">%}</span>

<span class="hl kwa">extern fun</span> malloc_atm <span class="hl opt">{</span>n<span class="hl opt">:</span>nat<span class="hl opt">}</span>
  <span class="hl opt">(</span>n<span class="hl opt">:</span> <span class="hl kwb">int</span> n<span class="hl opt">): [</span>l<span class="hl opt">:</span>addr<span class="hl opt">]</span> &#64;<span class="hl opt">(</span>bytes_v <span class="hl opt">(</span>n<span class="hl opt">,</span> l<span class="hl opt">)</span> | ptr l<span class="hl opt">) =</span> <span class="hl str">&quot;malloc_atm&quot;</span>
<span class="hl kwa">extern fun</span> free_atm <span class="hl opt">{</span>n<span class="hl opt">:</span>nat<span class="hl opt">} {</span>l<span class="hl opt">:</span>addr<span class="hl opt">}</span>
  <span class="hl opt">(</span>pf<span class="hl opt">:</span> bytes_v <span class="hl opt">(</span>n<span class="hl opt">,</span> l<span class="hl opt">)</span> | p<span class="hl opt">:</span> ptr l<span class="hl opt">):</span> void <span class="hl opt">=</span> <span class="hl str">&quot;free_atm&quot;</span>

<span class="hl com">(* ****** ****** *)</span>

viewdef block_v <span class="hl opt">(</span>sz<span class="hl opt">:</span><span class="hl kwb">int</span><span class="hl opt">,</span> l<span class="hl opt">:</span>addr<span class="hl opt">) =</span> bytes_v <span class="hl opt">(</span>sz<span class="hl opt">,</span> l<span class="hl opt">)</span>
dataviewtype blocklst <span class="hl opt">(</span><span class="hl kwb">int</span><span class="hl opt">) =</span>
  | <span class="hl opt">{</span>n<span class="hl opt">:</span>nat<span class="hl opt">} {</span>sz<span class="hl opt">:</span>nat<span class="hl opt">} {</span>l<span class="hl opt">:</span>addr<span class="hl opt">}</span> blocklst_cons <span class="hl opt">(</span>n<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)</span> <span class="hl kwa">of</span>
      <span class="hl opt">(</span>block_v <span class="hl opt">(</span>sz<span class="hl opt">,</span> l<span class="hl opt">)</span> | <span class="hl kwb">int</span> sz<span class="hl opt">,</span> ptr l<span class="hl opt">,</span> blocklst n<span class="hl opt">)</span>
  | blocklst_nil <span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">)</span>
viewtypedef blocklst <span class="hl opt">= [</span>n<span class="hl opt">:</span>nat<span class="hl opt">]</span> blocklst <span class="hl opt">(</span>n<span class="hl opt">)</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">extern typedef</span> <span class="hl str">&quot;blocklst_cons_pstruct&quot;</span> <span class="hl opt">=</span>
  blocklst_cons_pstruct <span class="hl opt">(</span>void | <span class="hl kwb">int</span><span class="hl opt">,</span> ptr<span class="hl opt">,</span> blocklst<span class="hl opt">)</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">extern fun</span> fread_stdin_block <span class="hl opt">{</span>sz<span class="hl opt">:</span>nat<span class="hl opt">} {</span>l<span class="hl opt">:</span>addr<span class="hl opt">}</span>
  <span class="hl opt">(</span>pf<span class="hl opt">: !</span>block_v <span class="hl opt">(</span>sz<span class="hl opt">,</span> l<span class="hl opt">)</span> | sz<span class="hl opt">:</span> <span class="hl kwb">int</span> sz<span class="hl opt">,</span> p<span class="hl opt">:</span> ptr l<span class="hl opt">):</span> natLte sz
  <span class="hl opt">=</span> <span class="hl str">&quot;fread_stdin_block&quot;</span>

<span class="hl opt">%{</span>$

ats_int_type
fread_stdin_block <span class="hl opt">(</span>
  ats_int_type sz0<span class="hl opt">,</span> ats_ptr_type p0
<span class="hl opt">) {</span>
  char <span class="hl opt">*</span>p <span class="hl opt">;</span> <span class="hl kwb">int</span> nread<span class="hl opt">,</span> sz <span class="hl opt">;</span>
  p <span class="hl opt">=</span> p0<span class="hl opt">;</span> sz <span class="hl opt">=</span> sz0 <span class="hl opt">;</span>
  <span class="hl kwa">while</span> <span class="hl opt">(</span>sz <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">) {</span>
    nread <span class="hl opt">=</span> fread <span class="hl opt">(</span>p<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">,</span> sz<span class="hl opt">,</span> stdin<span class="hl opt">) ;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>nread <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">) {</span> p <span class="hl opt">+=</span> nread <span class="hl opt">;</span> sz <span class="hl opt">-=</span> nread <span class="hl opt">;</span> continue <span class="hl opt">; }</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>feof <span class="hl opt">(</span>stdin<span class="hl opt">))</span> break <span class="hl opt">;</span>
  <span class="hl opt">}</span>
  <span class="hl kwa">return</span> <span class="hl opt">(</span>sz0 <span class="hl opt">-</span> sz<span class="hl opt">) ;</span>
<span class="hl opt">}</span> <span class="hl com">/* end of [fread_stdin_block] */</span>

<span class="hl opt">%}</span> <span class="hl slc">// end of [%{$]</span>

<span class="hl com">(* ****** ****** *)</span>

fn fread_stdin_blocklst <span class="hl opt">{</span>sz<span class="hl opt">:</span>nat<span class="hl opt">}</span>
  <span class="hl opt">(</span>sz<span class="hl opt">:</span> <span class="hl kwb">int</span> sz<span class="hl opt">,</span> tot<span class="hl opt">: &amp;</span><span class="hl kwb">int</span><span class="hl opt">):</span> blocklst <span class="hl opt">=</span> <span class="hl kwa">let</span>
  <span class="hl kwa">fun</span> loop <span class="hl opt">{</span>tot<span class="hl opt">:</span> addr<span class="hl opt">} (</span>
      pf_tot<span class="hl opt">: !</span><span class="hl kwb">int</span> &#64; tot |
      sz<span class="hl opt">:</span> <span class="hl kwb">int</span> sz<span class="hl opt">,</span> p_tot<span class="hl opt">:</span> ptr tot<span class="hl opt">,</span> res<span class="hl opt">: &amp;</span>blocklst? <span class="hl opt">&gt;&gt;</span> blocklst
    <span class="hl opt">) :</span> void <span class="hl opt">=</span> <span class="hl kwa">let</span>
    <span class="hl kwa">val</span> <span class="hl opt">(</span>pf | p<span class="hl opt">) =</span> malloc_atm <span class="hl opt">(</span>sz<span class="hl opt">)</span>
    <span class="hl kwa">val</span> n <span class="hl opt">=</span> fread_stdin_block <span class="hl opt">(</span>pf | sz<span class="hl opt">,</span> p<span class="hl opt">);</span> <span class="hl kwa">val</span> <span class="hl opt">() = !</span>p_tot <span class="hl opt">:= !</span>p_tot <span class="hl opt">+</span> n
    <span class="hl kwa">val</span> <span class="hl opt">() = (</span>res <span class="hl opt">:=</span> blocklst_cons <span class="hl opt">{</span><span class="hl num">0</span><span class="hl opt">} (</span>pf | sz<span class="hl opt">,</span> p<span class="hl opt">,</span> ?<span class="hl opt">))</span>
    <span class="hl kwa">val</span><span class="hl opt">+</span> blocklst_cons <span class="hl opt">(</span>_ | _<span class="hl opt">,</span> _<span class="hl opt">, !</span>res1<span class="hl opt">) =</span> res
  <span class="hl kwa">in</span>
    <span class="hl kwa">if</span> n <span class="hl opt">&lt;</span> sz <span class="hl kwa">then begin</span>
      <span class="hl opt">!</span>res1 <span class="hl opt">:=</span> blocklst_nil <span class="hl opt">();</span> fold&#64; res
    <span class="hl kwa">end else begin</span>
      loop <span class="hl opt">(</span>pf_tot | sz<span class="hl opt">,</span> p_tot<span class="hl opt">, !</span>res1<span class="hl opt">);</span> fold&#64; res
    <span class="hl kwa">end</span> <span class="hl slc">// end of [if]</span>
  <span class="hl kwa">end</span> <span class="hl slc">// end of [loop]</span>
  var res<span class="hl opt">:</span> blocklst<span class="hl opt">;</span> <span class="hl kwa">val</span> <span class="hl opt">() =</span> loop <span class="hl opt">(</span>view&#64; tot | sz<span class="hl opt">, &amp;</span>tot<span class="hl opt">,</span> res<span class="hl opt">)</span>
<span class="hl kwa">in</span>
  res
<span class="hl kwa">end</span> <span class="hl slc">// end of [fread_stdin_blocklst]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">extern fun</span> blocklst_concat_and_free
  <span class="hl opt">{</span>n<span class="hl opt">:</span>nat<span class="hl opt">} (</span>n<span class="hl opt">:</span> <span class="hl kwb">int</span> n<span class="hl opt">,</span> blks<span class="hl opt">:</span> blocklst<span class="hl opt">): [</span>l<span class="hl opt">:</span>addr<span class="hl opt">]</span> &#64;<span class="hl opt">(</span>bytes_v <span class="hl opt">(</span>n<span class="hl opt">,</span> l<span class="hl opt">)</span> | ptr l<span class="hl opt">)</span>
  <span class="hl opt">=</span> <span class="hl str">&quot;blocklst_concat_and_free&quot;</span>

<span class="hl opt">%{</span>$

ats_ptr_type
blocklst_concat_and_free
  <span class="hl opt">(</span>ats_int_type tot<span class="hl opt">,</span> ats_ptr_type blks<span class="hl opt">) {</span>
  char <span class="hl opt">*</span>res0<span class="hl opt">, *</span>res<span class="hl opt">, *</span>p_blk <span class="hl opt">;</span>
  <span class="hl kwb">int</span> lft<span class="hl opt">,</span> sz <span class="hl opt">;</span> blocklst_cons_pstruct blks_nxt <span class="hl opt">;</span>

  lft <span class="hl opt">=</span> tot <span class="hl opt">;</span> res0 <span class="hl opt">=</span> res <span class="hl opt">=</span> malloc_atm <span class="hl opt">(</span>tot<span class="hl opt">) ;</span>

  <span class="hl kwa">while</span> <span class="hl opt">(</span>blks<span class="hl opt">) {</span>
    sz <span class="hl opt">= ((</span>blocklst_cons_pstruct<span class="hl opt">)</span>blks<span class="hl opt">)-&gt;</span>atslab_0 <span class="hl opt">;</span>
    p_blk <span class="hl opt">= ((</span>blocklst_cons_pstruct<span class="hl opt">)</span>blks<span class="hl opt">)-&gt;</span>atslab_1 <span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>sz <span class="hl opt">&lt;</span> lft<span class="hl opt">) {</span>
      memcpy <span class="hl opt">(</span>res<span class="hl opt">,</span> p_blk<span class="hl opt">,</span> sz<span class="hl opt">) ;</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
      memcpy <span class="hl opt">(</span>res<span class="hl opt">,</span> p_blk<span class="hl opt">,</span> lft<span class="hl opt">) ;</span> lft <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl opt">;</span> break <span class="hl opt">;</span>
    <span class="hl opt">}</span>
    res <span class="hl opt">+=</span> sz <span class="hl opt">;</span> lft <span class="hl opt">-=</span> sz <span class="hl opt">;</span>
    blks_nxt <span class="hl opt">= ((</span>blocklst_cons_pstruct<span class="hl opt">)</span>blks<span class="hl opt">)-&gt;</span>atslab_2 <span class="hl opt">;</span>
    free_atm <span class="hl opt">(</span>p_blk<span class="hl opt">) ;</span> <span class="hl kwd">ATS_FREE</span> <span class="hl opt">(</span>blks<span class="hl opt">) ;</span>
    blks <span class="hl opt">=</span> blks_nxt <span class="hl opt">;</span>
  <span class="hl opt">}</span>
  <span class="hl kwa">return</span> res0 <span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl opt">%}</span> <span class="hl slc">// end of [{%$]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl opt">%{</span>$

ats_int_type
count_pattern_match
  <span class="hl opt">(</span>ats_int_type nsrc<span class="hl opt">,</span> ats_ptr_type src<span class="hl opt">,</span> ats_ptr_type pat<span class="hl opt">) {</span>
  <span class="hl kwb">int</span> count <span class="hl opt">;</span>
  pcre <span class="hl opt">*</span>re<span class="hl opt">;</span> pcre_extra <span class="hl opt">*</span>re_ex <span class="hl opt">;</span> const char <span class="hl opt">*</span>re_e <span class="hl opt">;</span>
  <span class="hl kwb">int</span> err<span class="hl opt">,</span> re_eo<span class="hl opt">,</span> m<span class="hl opt">[</span><span class="hl num">3</span><span class="hl opt">],</span> pos <span class="hl opt">;</span>

  re <span class="hl opt">=</span> pcre_compile
    <span class="hl opt">((</span>char*)pat<span class="hl opt">,</span> <span class="hl kwd">PCRE_CASELESS</span><span class="hl opt">, &amp;</span>re_e<span class="hl opt">, &amp;</span>re_eo<span class="hl opt">,</span> <span class="hl kwd">NULL</span><span class="hl opt">) ;</span>
  <span class="hl kwa">if</span> <span class="hl opt">(!</span>re<span class="hl opt">)</span> exit <span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">) ;</span>
  re_ex <span class="hl opt">=</span> pcre_study <span class="hl opt">(</span>re<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">, &amp;</span>re_e<span class="hl opt">);</span>  

  <span class="hl kwa">for</span> <span class="hl opt">(</span>count <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">,</span> pos <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl opt">; ; ) {</span>
    err <span class="hl opt">=</span> pcre_exec <span class="hl opt">(</span>re<span class="hl opt">,</span> re_ex<span class="hl opt">, (</span>char*)src<span class="hl opt">,</span> nsrc<span class="hl opt">,</span> pos<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> m<span class="hl opt">,</span> <span class="hl num">3</span><span class="hl opt">) ;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>err <span class="hl opt">&lt;</span> <span class="hl num">0</span><span class="hl opt">)</span> break <span class="hl opt">;</span> count <span class="hl opt">+=</span> <span class="hl num">1</span> <span class="hl opt">;</span> pos <span class="hl opt">=</span> m<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">] ;</span>
  <span class="hl opt">}</span>
  <span class="hl kwa">return</span> count <span class="hl opt">;</span>
<span class="hl opt">}</span> <span class="hl com">/* end of [count_pattern_match] */</span>

<span class="hl opt">%}</span> <span class="hl slc">// end of [%{$]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">extern fun</span> count_pattern_match <span class="hl opt">{</span>n<span class="hl opt">:</span>nat<span class="hl opt">} {</span>l<span class="hl opt">:</span>addr<span class="hl opt">}</span>
  <span class="hl opt">(</span>pf<span class="hl opt">: !</span>bytes_v <span class="hl opt">(</span>n<span class="hl opt">,</span> l<span class="hl opt">)</span> | n<span class="hl opt">:</span> <span class="hl kwb">int</span> n<span class="hl opt">,</span> p<span class="hl opt">:</span> ptr l<span class="hl opt">,</span> pat<span class="hl opt">:</span> <span class="hl kwb">string</span><span class="hl opt">):</span> <span class="hl kwb">int</span>
  <span class="hl opt">=</span> <span class="hl str">&quot;count_pattern_match&quot;</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl ppc">#define variants_length 9</span>
<span class="hl kwa">val</span> variants <span class="hl opt">=</span> array_make_arrsz <span class="hl opt">{</span><span class="hl kwb">string</span><span class="hl opt">}</span> $arrsz<span class="hl opt">(</span>
  <span class="hl str">&quot;agggtaaa|tttaccct&quot;</span>
<span class="hl opt">,</span> <span class="hl str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span>
<span class="hl opt">,</span> <span class="hl str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span>
<span class="hl opt">,</span> <span class="hl str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span>
<span class="hl opt">,</span> <span class="hl str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span>
<span class="hl opt">,</span> <span class="hl str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span>
<span class="hl opt">,</span> <span class="hl str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span>
<span class="hl opt">,</span> <span class="hl str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span>
<span class="hl opt">,</span> <span class="hl str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span>
<span class="hl opt">)</span> <span class="hl slc">// end of [variants]</span>

<span class="hl kwa">fun</span> count_loop <span class="hl opt">{</span>i<span class="hl opt">:</span>nat<span class="hl opt">} {</span>n<span class="hl opt">:</span>nat<span class="hl opt">} {</span>l<span class="hl opt">:</span>addr<span class="hl opt">}</span>
  <span class="hl opt">(</span>pf<span class="hl opt">: !</span>bytes_v <span class="hl opt">(</span>n<span class="hl opt">,</span> l<span class="hl opt">)</span> | n<span class="hl opt">:</span> <span class="hl kwb">int</span> n<span class="hl opt">,</span> p<span class="hl opt">:</span> ptr l<span class="hl opt">,</span> i<span class="hl opt">:</span> <span class="hl kwb">int</span> i<span class="hl opt">):</span> void <span class="hl opt">=</span>
  <span class="hl kwa">if</span> i <span class="hl opt">&lt;</span> variants_length <span class="hl kwa">then let</span>
    <span class="hl kwa">val</span> pat <span class="hl opt">=</span> variants<span class="hl opt">[</span>i<span class="hl opt">]</span>
    <span class="hl kwa">val</span> cnt <span class="hl opt">=</span> count_pattern_match <span class="hl opt">(</span>pf | n<span class="hl opt">,</span> p<span class="hl opt">,</span> pat<span class="hl opt">)</span>
    <span class="hl kwa">val</span> <span class="hl opt">() = (</span>print pat <span class="hl opt">;</span> print <span class="hl str">' '</span><span class="hl opt">;</span> print cnt <span class="hl opt">;</span> print_newline <span class="hl opt">())</span>
  <span class="hl kwa">in</span>
    count_loop <span class="hl opt">(</span>pf | n<span class="hl opt">,</span> p<span class="hl opt">,</span> i <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">)</span>
  <span class="hl kwa">end</span> <span class="hl slc">// end of [if]</span>

<span class="hl com">(* ****** ****** *)</span>

datatype seglst <span class="hl opt">(</span><span class="hl kwb">int</span><span class="hl opt">) =</span>
  | <span class="hl opt">{</span>n<span class="hl opt">:</span>nat<span class="hl opt">}</span> seglst_cons <span class="hl opt">(</span>n<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)</span> <span class="hl kwa">of</span> <span class="hl opt">(</span><span class="hl kwb">int</span><span class="hl com">(*beg*)</span><span class="hl opt">,</span> <span class="hl kwb">int</span><span class="hl com">(*len*)</span><span class="hl opt">,</span> seglst n<span class="hl opt">)</span>
  | seglst_nil <span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">)</span>
<span class="hl kwa">typedef</span> seglst0 <span class="hl opt">=</span> seglst <span class="hl num">0</span>
<span class="hl kwa">typedef</span> seglst <span class="hl opt">= [</span>n<span class="hl opt">:</span>nat<span class="hl opt">]</span> seglst <span class="hl opt">(</span>n<span class="hl opt">)</span>

<span class="hl kwa">extern typedef</span> <span class="hl str">&quot;seglst_cons_pstruct&quot;</span> <span class="hl opt">=</span>
  seglst_cons_pstruct <span class="hl opt">(</span><span class="hl kwb">int</span><span class="hl opt">,</span> <span class="hl kwb">int</span><span class="hl opt">,</span> seglst<span class="hl opt">)</span>

<span class="hl kwa">extern fun</span> seglst_cons_make
  <span class="hl opt">(</span>beg<span class="hl opt">:</span> <span class="hl kwb">int</span><span class="hl opt">,</span> len<span class="hl opt">:</span> <span class="hl kwb">int</span><span class="hl opt">):</span> seglst_cons_pstruct <span class="hl opt">(</span><span class="hl kwb">int</span><span class="hl opt">,</span> <span class="hl kwb">int</span><span class="hl opt">,</span> seglst0?<span class="hl opt">)</span>
  <span class="hl opt">=</span> <span class="hl str">&quot;seglst_cons_make&quot;</span>

<span class="hl kwa">implement</span> seglst_cons_make <span class="hl opt">(</span>beg<span class="hl opt">,</span> len<span class="hl opt">) =</span> seglst_cons <span class="hl opt">{</span><span class="hl num">0</span><span class="hl opt">} (</span>beg<span class="hl opt">,</span> len<span class="hl opt">,</span> ?<span class="hl opt">)</span>

<span class="hl kwa">extern typedef</span> <span class="hl str">&quot;int_ptr_type&quot;</span> <span class="hl opt">=</span> &#64;<span class="hl opt">(</span>void | <span class="hl kwb">int</span><span class="hl opt">,</span> ptr<span class="hl opt">)</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl opt">%{</span>$

ats_void_type subst_copy <span class="hl opt">(</span>
  char <span class="hl opt">*</span>dst<span class="hl opt">,</span> char <span class="hl opt">*</span>src<span class="hl opt">,</span> <span class="hl kwb">int</span> nsrc<span class="hl opt">,</span> seglst_cons_pstruct sgs<span class="hl opt">,</span> char <span class="hl opt">*</span>sub<span class="hl opt">,</span> <span class="hl kwb">int</span> nsub
<span class="hl opt">) {</span>
  <span class="hl kwb">int</span> ofs<span class="hl opt">,</span> beg<span class="hl opt">,</span> len <span class="hl opt">;</span> seglst_cons_pstruct sgs_nxt <span class="hl opt">;</span>
  <span class="hl kwa">for</span> <span class="hl opt">(</span>ofs <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl opt">; ; ) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(!</span>sgs<span class="hl opt">)</span> break <span class="hl opt">;</span>
    beg <span class="hl opt">=</span> sgs<span class="hl opt">-&gt;</span>atslab_0 <span class="hl opt">;</span> len <span class="hl opt">=</span> beg <span class="hl opt">-</span> ofs <span class="hl opt">;</span>
    memcpy <span class="hl opt">(</span>dst<span class="hl opt">,</span> src<span class="hl opt">,</span> len<span class="hl opt">) ;</span> dst <span class="hl opt">+=</span> len <span class="hl opt">;</span> src <span class="hl opt">+=</span> len <span class="hl opt">;</span> ofs <span class="hl opt">=</span> beg <span class="hl opt">;</span>
    len <span class="hl opt">=</span> sgs<span class="hl opt">-&gt;</span>atslab_1 <span class="hl opt">;</span>
    memcpy <span class="hl opt">(</span>dst<span class="hl opt">,</span> sub<span class="hl opt">,</span> nsub<span class="hl opt">) ;</span> dst <span class="hl opt">+=</span> nsub <span class="hl opt">;</span> src <span class="hl opt">+=</span> len <span class="hl opt">;</span> ofs <span class="hl opt">+=</span> len <span class="hl opt">;</span>
    sgs_nxt <span class="hl opt">=</span> sgs<span class="hl opt">-&gt;</span>atslab_2 <span class="hl opt">;</span> <span class="hl kwd">ATS_FREE</span> <span class="hl opt">(</span>sgs<span class="hl opt">);</span> sgs <span class="hl opt">=</span> sgs_nxt <span class="hl opt">;</span>
  <span class="hl opt">}</span>
  len <span class="hl opt">=</span> nsrc <span class="hl opt">-</span> ofs <span class="hl opt">;</span>  memcpy <span class="hl opt">(</span>dst<span class="hl opt">,</span> src<span class="hl opt">,</span> len<span class="hl opt">) ;</span> <span class="hl kwa">return</span> <span class="hl opt">;</span>
<span class="hl opt">}</span> <span class="hl com">/* end of [subst_copy] */</span>

int_ptr_type subst_pattern_string
  <span class="hl opt">(</span>ats_int_type nsrc<span class="hl opt">,</span> ats_ptr_type src<span class="hl opt">,</span> ats_ptr_type pat<span class="hl opt">,</span> ats_ptr_type sub<span class="hl opt">) {</span>
  char <span class="hl opt">*</span>dst <span class="hl opt">;</span> <span class="hl kwb">int</span> ndst<span class="hl opt">,</span> nsub <span class="hl opt">;</span> <span class="hl kwb">int</span> beg<span class="hl opt">,</span> len<span class="hl opt">,</span> nxt <span class="hl opt">;</span>
  pcre <span class="hl opt">*</span>re<span class="hl opt">;</span> pcre_extra <span class="hl opt">*</span>re_ex <span class="hl opt">;</span> const char <span class="hl opt">*</span>re_e <span class="hl opt">;</span>
  <span class="hl kwb">int</span> err<span class="hl opt">,</span> re_eo<span class="hl opt">,</span> m<span class="hl opt">[</span><span class="hl num">3</span><span class="hl opt">],</span> pos <span class="hl opt">;</span>
  seglst_cons_pstruct sgs0<span class="hl opt">,</span> sgs<span class="hl opt">, *</span>sgs_ptr <span class="hl opt">;</span>
  int_ptr_type ans <span class="hl opt">;</span>

  ndst <span class="hl opt">=</span> nsrc <span class="hl opt">;</span> nsub <span class="hl opt">=</span> strlen <span class="hl opt">((</span>char*)sub<span class="hl opt">) ;</span>
  re <span class="hl opt">=</span> pcre_compile
    <span class="hl opt">((</span>char*)pat<span class="hl opt">,</span> <span class="hl kwd">PCRE_CASELESS</span><span class="hl opt">, &amp;</span>re_e<span class="hl opt">, &amp;</span>re_eo<span class="hl opt">,</span> <span class="hl kwd">NULL</span><span class="hl opt">) ;</span>
  <span class="hl kwa">if</span> <span class="hl opt">(!</span>re<span class="hl opt">)</span> exit <span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">) ;</span>
  re_ex <span class="hl opt">=</span> pcre_study <span class="hl opt">(</span>re<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">, &amp;</span>re_e<span class="hl opt">);</span>  
  <span class="hl kwa">for</span> <span class="hl opt">(</span>pos <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">,</span> sgs_ptr <span class="hl opt">= &amp;</span>sgs0 <span class="hl opt">; ; ) {</span>
    err <span class="hl opt">=</span> pcre_exec <span class="hl opt">(</span>re<span class="hl opt">,</span> re_ex<span class="hl opt">, (</span>char*)src<span class="hl opt">,</span> nsrc<span class="hl opt">,</span> pos<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> m<span class="hl opt">,</span> <span class="hl num">3</span><span class="hl opt">) ;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>err <span class="hl opt">&gt;=</span> <span class="hl num">0</span><span class="hl opt">) {</span>
      beg <span class="hl opt">=</span> m<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] ;</span> pos <span class="hl opt">=</span> m<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">] ;</span>
      len <span class="hl opt">=</span> pos <span class="hl opt">-</span> beg <span class="hl opt">;</span> ndst <span class="hl opt">-=</span> len <span class="hl opt">;</span> ndst <span class="hl opt">+=</span> nsub <span class="hl opt">;</span>
      sgs <span class="hl opt">= (</span>seglst_cons_pstruct<span class="hl opt">)</span>seglst_cons_make <span class="hl opt">(</span>beg<span class="hl opt">,</span> len<span class="hl opt">) ;</span>
      <span class="hl opt">*</span>sgs_ptr <span class="hl opt">=</span> sgs <span class="hl opt">;</span> sgs_ptr <span class="hl opt">= (</span>seglst_cons_pstruct*)<span class="hl opt">&amp;(</span>sgs<span class="hl opt">-&gt;</span>atslab_2<span class="hl opt">) ;</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
     <span class="hl opt">*</span>sgs_ptr <span class="hl opt">= (</span>seglst_cons_pstruct<span class="hl opt">)</span><span class="hl num">0</span> <span class="hl opt">;</span> break <span class="hl opt">;</span>
    <span class="hl opt">}</span>
  <span class="hl opt">}</span> <span class="hl slc">// end of [for]</span>
  dst <span class="hl opt">=</span> malloc_atm <span class="hl opt">(</span>ndst<span class="hl opt">) ;</span>
  ans<span class="hl opt">.</span>atslab_1 <span class="hl opt">=</span> ndst <span class="hl opt">;</span> ans<span class="hl opt">.</span>atslab_2 <span class="hl opt">=</span> dst <span class="hl opt">;</span>
  subst_copy <span class="hl opt">(</span>dst<span class="hl opt">,</span> src<span class="hl opt">,</span> nsrc<span class="hl opt">,</span> sgs0<span class="hl opt">,</span> sub<span class="hl opt">,</span> nsub<span class="hl opt">) ;</span>
  <span class="hl kwa">return</span> ans <span class="hl opt">;</span>
<span class="hl opt">}</span> <span class="hl com">/* end of [subst_pattern_string] */</span>

<span class="hl opt">%}</span> <span class="hl slc">// end of [%{$]</span>

<span class="hl kwa">extern</span>
<span class="hl kwa">fun</span> subst_pattern_string
  <span class="hl opt">{</span>n<span class="hl opt">:</span>nat<span class="hl opt">} {</span>l<span class="hl opt">:</span>addr<span class="hl opt">} (</span>
  pf<span class="hl opt">: !</span>bytes_v <span class="hl opt">(</span>n<span class="hl opt">,</span> l<span class="hl opt">)</span> | n<span class="hl opt">:</span> <span class="hl kwb">int</span> n<span class="hl opt">,</span> p<span class="hl opt">:</span> ptr l<span class="hl opt">,</span> pat<span class="hl opt">:</span> <span class="hl kwb">string</span><span class="hl opt">,</span> sub<span class="hl opt">:</span> <span class="hl kwb">string</span>
<span class="hl opt">) : [</span>n<span class="hl opt">:</span>nat<span class="hl opt">] [</span>l<span class="hl opt">:</span>addr<span class="hl opt">]</span> &#64;<span class="hl opt">(</span>bytes_v <span class="hl opt">(</span>n<span class="hl opt">,</span> l<span class="hl opt">)</span> | <span class="hl kwb">int</span> n<span class="hl opt">,</span> ptr l<span class="hl opt">) =</span> <span class="hl str">&quot;subst_pattern_string&quot;</span>
<span class="hl slc">// end of [subst_pattern_string]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl ppc">#define subst_length 22</span>
<span class="hl kwa">val</span> subst <span class="hl opt">=</span> array_make_arrsz <span class="hl opt">{</span><span class="hl kwb">string</span><span class="hl opt">}</span> $arrsz<span class="hl opt">(</span>
  <span class="hl str">&quot;B&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(c|g|t)&quot;</span>
<span class="hl opt">,</span> <span class="hl str">&quot;D&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(a|g|t)&quot;</span>
<span class="hl opt">,</span> <span class="hl str">&quot;H&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(a|c|t)&quot;</span>
<span class="hl opt">,</span> <span class="hl str">&quot;K&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(g|t)&quot;</span>
<span class="hl opt">,</span> <span class="hl str">&quot;M&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(a|c)&quot;</span>
<span class="hl opt">,</span> <span class="hl str">&quot;N&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(a|c|g|t)&quot;</span>
<span class="hl opt">,</span> <span class="hl str">&quot;R&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(a|g)&quot;</span>
<span class="hl opt">,</span> <span class="hl str">&quot;S&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(c|g)&quot;</span>
<span class="hl opt">,</span> <span class="hl str">&quot;V&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(a|c|g)&quot;</span>
<span class="hl opt">,</span> <span class="hl str">&quot;W&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(a|t)&quot;</span>
<span class="hl opt">,</span> <span class="hl str">&quot;Y&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(c|t)&quot;</span>
<span class="hl opt">)</span> <span class="hl slc">// end of [subst]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">fun</span> subst_loop <span class="hl opt">{</span>i<span class="hl opt">:</span>nat<span class="hl opt">} {</span>n<span class="hl opt">:</span>nat<span class="hl opt">} {</span>l<span class="hl opt">:</span>addr<span class="hl opt">}</span>
  <span class="hl opt">(</span>pf<span class="hl opt">:</span> bytes_v <span class="hl opt">(</span>n<span class="hl opt">,</span> l<span class="hl opt">)</span> | n<span class="hl opt">:</span> <span class="hl kwb">int</span> n<span class="hl opt">,</span> p<span class="hl opt">:</span> ptr l<span class="hl opt">,</span> i<span class="hl opt">:</span> <span class="hl kwb">int</span> i<span class="hl opt">):</span> <span class="hl kwb">int</span> <span class="hl opt">=</span>
  <span class="hl kwa">if</span> i <span class="hl opt">&lt;</span> subst_length <span class="hl opt">-</span> <span class="hl num">1</span> <span class="hl kwa">then let</span>
    <span class="hl kwa">val</span> pat <span class="hl opt">=</span> subst<span class="hl opt">[</span>i<span class="hl opt">];</span> <span class="hl kwa">val</span> sub <span class="hl opt">=</span> subst<span class="hl opt">[</span>i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">]</span>
    <span class="hl kwa">val</span> <span class="hl opt">(</span>pf1 | n1<span class="hl opt">,</span> p1<span class="hl opt">) =</span> subst_pattern_string <span class="hl opt">(</span>pf | n<span class="hl opt">,</span> p<span class="hl opt">,</span> pat<span class="hl opt">,</span> sub<span class="hl opt">)</span>
    <span class="hl kwa">val</span> <span class="hl opt">() =</span> free_atm <span class="hl opt">(</span>pf | p<span class="hl opt">)</span>
  <span class="hl kwa">in</span>
    subst_loop <span class="hl opt">(</span>pf1 | n1<span class="hl opt">,</span> p1<span class="hl opt">,</span> i <span class="hl opt">+</span> <span class="hl num">2</span><span class="hl opt">)</span>
  <span class="hl kwa">end else begin</span>
    <span class="hl kwa">let val</span> <span class="hl opt">() =</span> free_atm <span class="hl opt">(</span>pf | p<span class="hl opt">)</span> <span class="hl kwa">in</span> n <span class="hl kwa">end</span>
  <span class="hl kwa">end</span> <span class="hl slc">// end of [if]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl ppc">#define BLOCKSIZE 0x10000</span> <span class="hl slc">// 0x4000000</span>
<span class="hl ppc"></span>
<span class="hl kwa">implement</span> main <span class="hl opt">() =</span> <span class="hl kwa">let</span>
  var n0<span class="hl opt">:</span> <span class="hl kwb">int</span> <span class="hl opt">=</span> <span class="hl num">0</span>
  <span class="hl kwa">val</span> blks <span class="hl opt">=</span> fread_stdin_blocklst <span class="hl opt">(</span><span class="hl kwd">BLOCKSIZE</span><span class="hl opt">,</span> n0<span class="hl opt">)</span>
  <span class="hl kwa">val</span> n0 <span class="hl opt">=</span> int1_of_int <span class="hl opt">(</span>n0<span class="hl opt">);</span> <span class="hl kwa">val</span> <span class="hl opt">() =</span> <span class="hl kwa">assert</span> <span class="hl opt">(</span>n0 <span class="hl opt">&gt;=</span> <span class="hl num">0</span><span class="hl opt">)</span>
  <span class="hl kwa">val</span> <span class="hl opt">(</span>pf_bytes | p0<span class="hl opt">) =</span> blocklst_concat_and_free <span class="hl opt">(</span>n0<span class="hl opt">,</span> blks<span class="hl opt">)</span>
  <span class="hl kwa">val</span> <span class="hl opt">(</span>pf1_bytes | n1<span class="hl opt">,</span> p1<span class="hl opt">) =</span>
    subst_pattern_string <span class="hl opt">(</span>pf_bytes | n0<span class="hl opt">,</span> p0<span class="hl opt">,</span> <span class="hl str">&quot;&gt;.*|</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;&quot;</span><span class="hl opt">)</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> free_atm <span class="hl opt">(</span>pf_bytes | p0<span class="hl opt">)</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> count_loop <span class="hl opt">(</span>pf1_bytes | n1<span class="hl opt">,</span> p1<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">)</span>
  <span class="hl kwa">val</span> n_last <span class="hl opt">=</span> subst_loop <span class="hl opt">(</span>pf1_bytes | n1<span class="hl opt">,</span> p1<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">)</span>
<span class="hl kwa">in</span>
  printf <span class="hl opt">(</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">%i</span><span class="hl esc">\n</span><span class="hl str">%i</span><span class="hl esc">\n</span><span class="hl str">%i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> &#64;<span class="hl opt">(</span>n0<span class="hl opt">,</span> n1<span class="hl opt">,</span> n_last<span class="hl opt">))</span>
<span class="hl kwa">end</span> <span class="hl slc">// end of [main]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl com">(* end of [regex-dna2.dats] *)</span>
