<span class="hl opt">#</span>lang racket<span class="hl opt">/</span>base

<span class="hl slc">;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;; http://benchmarksgame.alioth.debian.org/</span>

<span class="hl slc">;; Based on the Perl version of the benchmark</span>
<span class="hl slc">;; adapted with a GMP interface by Eli Barzilay</span>

<span class="hl opt">(</span><span class="hl kwa">require</span> racket<span class="hl opt">/</span>cmdline
         <span class="hl opt">(</span><span class="hl kwa">for-syntax</span> racket<span class="hl opt">/</span>base<span class="hl opt">)</span>
         ffi<span class="hl opt">/</span>unsafe<span class="hl opt">)</span>

<span class="hl slc">;; quick libgmp interface, limited to what we need below</span>
<span class="hl opt">(</span><span class="hl kwa">define</span> libgmp <span class="hl opt">(</span><span class="hl kwa">ffi-lib</span> <span class="hl str">&quot;libgmp&quot;</span><span class="hl opt">))</span>
<span class="hl opt">(</span><span class="hl kwa">define-syntax-rule</span> <span class="hl opt">(</span><span class="hl kwa">defgmp</span> op type ...<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">define</span> op <span class="hl opt">(</span><span class="hl kwa">get-ffi-obj</span> <span class="hl opt">(</span><span class="hl kwa">format</span> <span class="hl str">&quot;__gmpz_~a&quot;</span> <span class="hl opt">'</span>op<span class="hl opt">)</span> libgmp <span class="hl opt">(</span><span class="hl kwa">_fun</span> type ...<span class="hl opt">))))</span>
<span class="hl opt">(</span><span class="hl kwa">define-cstruct</span> _mpz <span class="hl opt">([</span>alloc _int<span class="hl opt">] [</span>size _int<span class="hl opt">] [</span>limbs _pointer<span class="hl opt">]))</span>
<span class="hl opt">(</span><span class="hl kwa">defgmp</span> init_set_ui _mpz-pointer _ulong -<span class="hl opt">&gt;</span> _void<span class="hl opt">)</span>
<span class="hl opt">(</span><span class="hl kwa">defgmp</span> set_ui _mpz-pointer _ulong -<span class="hl opt">&gt;</span> _void<span class="hl opt">)</span>
<span class="hl opt">(</span><span class="hl kwa">defgmp</span> get_ui    _mpz-pointer -<span class="hl opt">&gt;</span> _ulong<span class="hl opt">)</span>
<span class="hl opt">(</span><span class="hl kwa">defgmp</span> add       _mpz-pointer _mpz-pointer _mpz-pointer -<span class="hl opt">&gt;</span> _void<span class="hl opt">)</span>
<span class="hl opt">(</span><span class="hl kwa">defgmp</span> mul       _mpz-pointer _mpz-pointer _mpz-pointer -<span class="hl opt">&gt;</span> _void<span class="hl opt">)</span>
<span class="hl opt">(</span><span class="hl kwa">defgmp</span> mul_ui    _mpz-pointer _mpz-pointer _long        -<span class="hl opt">&gt;</span> _void<span class="hl opt">)</span>
<span class="hl opt">(</span><span class="hl kwa">defgmp</span> addmul    _mpz-pointer _mpz-pointer _mpz-pointer -<span class="hl opt">&gt;</span> _void<span class="hl opt">)</span>
<span class="hl opt">(</span><span class="hl kwa">defgmp</span> addmul_ui _mpz-pointer _mpz-pointer _ulong       -<span class="hl opt">&gt;</span> _void<span class="hl opt">)</span>
<span class="hl opt">(</span><span class="hl kwa">defgmp</span> submul_ui _mpz-pointer _mpz-pointer _ulong       -<span class="hl opt">&gt;</span> _void<span class="hl opt">)</span>
<span class="hl opt">(</span><span class="hl kwa">defgmp</span> tdiv_q    _mpz-pointer _mpz-pointer _mpz-pointer -<span class="hl opt">&gt;</span> _void<span class="hl opt">)</span>
<span class="hl opt">(</span><span class="hl kwa">defgmp</span> cmp       _mpz-pointer _mpz-pointer              -<span class="hl opt">&gt;</span> _int<span class="hl opt">)</span>
<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">make-ui</span> n<span class="hl opt">) (</span><span class="hl kwa">let</span> <span class="hl opt">([</span>i <span class="hl opt">(</span><span class="hl kwa">make-mpz</span> <span class="hl num">0 0</span> <span class="hl opt">#</span>f<span class="hl opt">)]) (</span><span class="hl kwa">init_set_ui</span> i n<span class="hl opt">)</span> i<span class="hl opt">))</span>
<span class="hl slc">;; &quot;fancy&quot; parser, for fun (only for the limited subset we use)</span>
<span class="hl opt">(</span><span class="hl kwa">define-syntax</span> <span class="hl opt">(</span><span class="hl kwa">gmp</span> stx<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">sym</span><span class="hl opt">=</span>? x y<span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl kwa">eq</span>? <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">syntax</span>? x<span class="hl opt">) (</span><span class="hl kwa">syntax-e</span> x<span class="hl opt">)</span> x<span class="hl opt">) (</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">syntax</span>? y<span class="hl opt">) (</span><span class="hl kwa">syntax-e</span> y<span class="hl opt">)</span> y<span class="hl opt">)))</span>
  <span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">_</span>? stx<span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl kwa">and</span> <span class="hl opt">(</span><span class="hl kwa">identifier</span>? stx<span class="hl opt">)</span>
         <span class="hl opt">(</span><span class="hl kwa">regexp-match</span>? <span class="hl opt">#</span>rx<span class="hl str">&quot;^_&quot;</span> <span class="hl opt">(</span><span class="hl kwa">symbol-</span><span class="hl opt">&gt;</span>string <span class="hl opt">(</span><span class="hl kwa">syntax-e</span> stx<span class="hl opt">)))))</span>
  <span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">split</span> xs<span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl kwa">let</span> loop <span class="hl opt">([</span>xs xs<span class="hl opt">] [</span>cur <span class="hl opt">'()] [</span>r <span class="hl opt">'()])</span>
      <span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">add</span><span class="hl opt">) (</span><span class="hl kwa">cons</span> <span class="hl opt">(</span><span class="hl kwa">reverse</span> cur<span class="hl opt">)</span> r<span class="hl opt">))</span>
      <span class="hl opt">(</span><span class="hl kwa">cond</span> <span class="hl opt">[(</span><span class="hl kwa">null</span>? xs<span class="hl opt">) (</span><span class="hl kwa">reverse</span> <span class="hl opt">(</span><span class="hl kwa">add</span><span class="hl opt">))]</span>
            <span class="hl opt">[(</span><span class="hl kwa">syntax-case</span> <span class="hl opt">(</span><span class="hl kwa">car</span> xs<span class="hl opt">) (</span><span class="hl kwa">unquote</span><span class="hl opt">) [,</span>x <span class="hl opt">#'</span>x<span class="hl opt">] [</span>else <span class="hl opt">#</span>f<span class="hl opt">])</span>
             <span class="hl opt">=&gt; (</span><span class="hl kwa">lambda</span> <span class="hl opt">(</span><span class="hl kwa">x</span><span class="hl opt">) (</span><span class="hl kwa">loop</span> <span class="hl opt">(</span><span class="hl kwa">cdr</span> xs<span class="hl opt">) (</span><span class="hl kwa">list</span> x<span class="hl opt">) (</span><span class="hl kwa">add</span><span class="hl opt">)))]</span>
            <span class="hl opt">[</span>else <span class="hl opt">(</span><span class="hl kwa">loop</span> <span class="hl opt">(</span><span class="hl kwa">cdr</span> xs<span class="hl opt">) (</span><span class="hl kwa">cons</span> <span class="hl opt">(</span><span class="hl kwa">car</span> xs<span class="hl opt">)</span> cur<span class="hl opt">)</span> r<span class="hl opt">)])))</span>
  <span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">translate</span> expr<span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl kwa">syntax-case</span><span class="hl opt">*</span> expr <span class="hl opt">(= +=</span> -<span class="hl opt">= + * / &lt; &gt;)</span> sym<span class="hl opt">=</span>?
      <span class="hl opt">[(</span><span class="hl kwa">x</span> <span class="hl opt">=</span> y <span class="hl opt">+</span> z<span class="hl opt">)  #'(</span><span class="hl kwa">add</span> x y z<span class="hl opt">)]</span>
      <span class="hl opt">[(</span><span class="hl kwa">x</span> <span class="hl opt">=</span> y <span class="hl opt">*</span> z<span class="hl opt">)  #`(#,(</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">_</span>? <span class="hl opt">#'</span>z<span class="hl opt">) #'</span>mul <span class="hl opt">#'</span>mul_ui<span class="hl opt">)</span> x y z<span class="hl opt">)]</span>
      <span class="hl opt">[(</span><span class="hl kwa">x</span> <span class="hl opt">+=</span> y <span class="hl opt">*</span> z<span class="hl opt">) #`(#,(</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">_</span>? <span class="hl opt">#'</span>z<span class="hl opt">) #'</span>addmul <span class="hl opt">#'</span>addmul_ui<span class="hl opt">)</span> x y z<span class="hl opt">)]</span>
      <span class="hl opt">[(</span><span class="hl kwa">x</span> -<span class="hl opt">=</span> y <span class="hl opt">*</span> z<span class="hl opt">) #`(#,(</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">_</span>? <span class="hl opt">#'</span>z<span class="hl opt">) #'</span>submul <span class="hl opt">#'</span>submul_ui<span class="hl opt">)</span> x y z<span class="hl opt">)]</span>
      <span class="hl opt">[(</span><span class="hl kwa">x</span> <span class="hl opt">=</span> y <span class="hl opt">/</span> z<span class="hl opt">)  #'(</span><span class="hl kwa">tdiv_q</span> x y z<span class="hl opt">)]</span>
      <span class="hl opt">[(</span><span class="hl kwa">x</span> <span class="hl opt">&lt;</span> y<span class="hl opt">)      #'(&lt; (</span><span class="hl kwa">cmp</span> x y<span class="hl opt">)</span> <span class="hl num">0</span><span class="hl opt">)]</span>
      <span class="hl opt">[(</span><span class="hl kwa">x</span> <span class="hl opt">&gt;</span> y<span class="hl opt">)      #'(&gt; (</span><span class="hl kwa">cmp</span> x y<span class="hl opt">)</span> <span class="hl num">0</span><span class="hl opt">)]</span>
      <span class="hl opt">[(</span><span class="hl kwa">get</span> x<span class="hl opt">)      #'(</span><span class="hl kwa">get_ui</span> x<span class="hl opt">)]))</span>
  <span class="hl opt">(</span><span class="hl kwa">syntax-case</span> stx <span class="hl opt">()</span>
    <span class="hl opt">[(</span><span class="hl kwa">_</span> x ...<span class="hl opt">) #`(</span><span class="hl kwa">begin</span> <span class="hl opt">#,&#64;(</span><span class="hl kwa">map</span> translate <span class="hl opt">(</span><span class="hl kwa">split</span> <span class="hl opt">(</span><span class="hl kwa">syntax-</span><span class="hl opt">&gt;</span>list <span class="hl opt">#'(</span><span class="hl kwa">x</span> ...<span class="hl opt">)))))]))</span>

<span class="hl slc">;; the actual code</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">digits</span> n<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">define</span> i <span class="hl num">0</span><span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">define</span> _x0 <span class="hl opt">(</span><span class="hl kwa">make-ui</span> <span class="hl num">1</span><span class="hl opt">))</span>
  <span class="hl opt">(</span><span class="hl kwa">define</span> _x1 <span class="hl opt">(</span><span class="hl kwa">make-ui</span> <span class="hl num">0</span><span class="hl opt">))</span>
  <span class="hl opt">(</span><span class="hl kwa">define</span> _x2 <span class="hl opt">(</span><span class="hl kwa">make-ui</span> <span class="hl num">1</span><span class="hl opt">))</span>
  <span class="hl opt">(</span><span class="hl kwa">define</span> _r  <span class="hl opt">(</span><span class="hl kwa">make-ui</span> <span class="hl num">0</span><span class="hl opt">))</span>

  <span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">extract-digit</span> n<span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl kwa">gmp</span> _r <span class="hl opt">=</span> _x0 <span class="hl opt">*</span> n<span class="hl opt">,</span> _r <span class="hl opt">=</span> _r <span class="hl opt">+</span> _x1<span class="hl opt">,</span> _r <span class="hl opt">=</span> _r <span class="hl opt">/</span> _x2<span class="hl opt">,</span> get _r<span class="hl opt">))</span>

  <span class="hl opt">(</span><span class="hl kwa">let</span> loop <span class="hl opt">([</span>k <span class="hl num">0</span><span class="hl opt">])</span>

    <span class="hl opt">(</span><span class="hl kwa">define-syntax-rule</span> <span class="hl opt">(</span><span class="hl kwa">compose1</span><span class="hl opt">!+</span>loop<span class="hl opt">)</span>
      <span class="hl opt">(</span><span class="hl kwa">let</span><span class="hl opt">* ([</span>k <span class="hl opt">(</span><span class="hl kwa">add1</span> k<span class="hl opt">)] [</span>y2 <span class="hl opt">(</span><span class="hl kwa">add1</span> <span class="hl opt">(*</span> k <span class="hl num">2</span><span class="hl opt">))])</span>
        <span class="hl opt">(</span><span class="hl kwa">gmp</span> _x1 <span class="hl opt">=</span> _x1 <span class="hl opt">*</span> y2<span class="hl opt">,</span> _x1 <span class="hl opt">+=</span> _x0 <span class="hl opt">* (*</span> y2 <span class="hl num">2</span><span class="hl opt">),</span> _x0 <span class="hl opt">=</span> _x0 <span class="hl opt">*</span> k<span class="hl opt">,</span>_x2 <span class="hl opt">=</span> _x2 <span class="hl opt">*</span> y2<span class="hl opt">)</span>
        <span class="hl opt">(</span><span class="hl kwa">loop</span> k<span class="hl opt">)))</span>
    <span class="hl opt">(</span><span class="hl kwa">define-syntax-rule</span> <span class="hl opt">(</span><span class="hl kwa">compose2</span><span class="hl opt">!</span> d<span class="hl opt">)</span>
      <span class="hl opt">(</span><span class="hl kwa">begin</span> <span class="hl opt">(</span><span class="hl kwa">gmp</span> _x1 -<span class="hl opt">=</span> _x2 <span class="hl opt">*</span> d<span class="hl opt">,</span> _x1 <span class="hl opt">=</span> _x1 <span class="hl opt">*</span> <span class="hl num">10</span><span class="hl opt">,</span> _x0 <span class="hl opt">=</span> _x0 <span class="hl opt">*</span> <span class="hl num">10</span><span class="hl opt">)</span>
             <span class="hl opt">(</span><span class="hl kwa">loop</span> k<span class="hl opt">)))</span>

    <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">gmp</span> _x0 <span class="hl opt">&gt;</span> _x1<span class="hl opt">)</span>
      <span class="hl opt">(</span><span class="hl kwa">compose1</span><span class="hl opt">!+</span>loop<span class="hl opt">)</span>
      <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">([</span>d <span class="hl opt">(</span><span class="hl kwa">extract-digit</span> <span class="hl num">3</span><span class="hl opt">)])</span>
        <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">not</span> <span class="hl opt">(=</span> d <span class="hl opt">(</span><span class="hl kwa">extract-digit</span> <span class="hl num">4</span><span class="hl opt">)))</span>
          <span class="hl opt">(</span><span class="hl kwa">compose1</span><span class="hl opt">!+</span>loop<span class="hl opt">)</span>
          <span class="hl opt">(</span><span class="hl kwa">begin</span> <span class="hl opt">(</span><span class="hl kwa">display</span> d<span class="hl opt">)</span>
                 <span class="hl opt">(</span><span class="hl kwa">set</span><span class="hl opt">!</span> i <span class="hl opt">(</span><span class="hl kwa">add1</span> i<span class="hl opt">))</span>
                 <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">([</span>m <span class="hl opt">(</span><span class="hl kwa">modulo</span> i <span class="hl num">10</span><span class="hl opt">)])</span>
                   <span class="hl opt">(</span><span class="hl kwa">when</span> <span class="hl opt">(</span><span class="hl kwa">zero</span>? m<span class="hl opt">) (</span><span class="hl kwa">printf</span> <span class="hl str">&quot;</span><span class="hl esc">\t</span><span class="hl str">:~a</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> i<span class="hl opt">))</span>
                   <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(&lt;</span> i n<span class="hl opt">)</span>
                     <span class="hl opt">(</span><span class="hl kwa">compose2</span><span class="hl opt">!</span> d<span class="hl opt">)</span>
                     <span class="hl opt">(</span><span class="hl kwa">unless</span> <span class="hl opt">(</span><span class="hl kwa">zero</span>? m<span class="hl opt">)</span>
                       <span class="hl opt">(</span><span class="hl kwa">printf</span> <span class="hl str">&quot;~a</span><span class="hl esc">\t</span><span class="hl str">:~a</span><span class="hl esc">\n</span><span class="hl str">&quot;</span>
                               <span class="hl opt">(</span><span class="hl kwa">make-string</span> <span class="hl opt">(</span><span class="hl kwa">-</span> <span class="hl num">10</span> m<span class="hl opt">) #</span>\space<span class="hl opt">)</span>
                               n<span class="hl opt">))))))))))</span>

<span class="hl opt">(</span><span class="hl kwa">digits</span> <span class="hl opt">(</span><span class="hl kwa">command-line</span> <span class="hl opt">#:</span>args <span class="hl opt">(</span><span class="hl kwa">n</span><span class="hl opt">) (</span><span class="hl kwa">string-</span><span class="hl opt">&gt;</span>number n<span class="hl opt">)))</span>
