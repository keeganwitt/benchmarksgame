<span class="hl com">(*</span>
<span class="hl com"> * The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * Contributed by Paolo Ribeca, August 2011</span>
<span class="hl com"> *</span>
<span class="hl com"> * (Based on the Java version by Oleg Mazurov)</span>
<span class="hl com"> *)</span>

<span class="hl kwa">let</span> workers <span class="hl opt">=</span> <span class="hl num">32</span>

<span class="hl kwa">module</span> <span class="hl kwd">Perm</span> <span class="hl opt">=</span>
  <span class="hl kwa">struct</span>
    <span class="hl kwa">type</span> t <span class="hl opt">= {</span> p<span class="hl opt">:</span> <span class="hl kwb">int</span> array<span class="hl opt">;</span>
               pp<span class="hl opt">:</span> <span class="hl kwb">int</span> array<span class="hl opt">;</span>
               c<span class="hl opt">:</span> <span class="hl kwb">int</span> array <span class="hl opt">}</span>
  <span class="hl kwa">let</span> facts <span class="hl opt">=</span>
    <span class="hl kwa">let</span> n <span class="hl opt">=</span> <span class="hl num">20</span> <span class="hl kwa">in</span>
    <span class="hl kwa">let</span> res <span class="hl opt">=</span> <span class="hl kwc">Array</span><span class="hl opt">.</span>make <span class="hl opt">(</span>n <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">)</span> <span class="hl num">1</span> <span class="hl kwa">in</span>
    <span class="hl kwa">for</span> i <span class="hl opt">=</span> <span class="hl num">1</span> <span class="hl kwa">to</span> n <span class="hl kwa">do</span>
      res<span class="hl opt">.(</span>i<span class="hl opt">) &lt;-</span> i <span class="hl opt">*</span> res<span class="hl opt">.(</span>i <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">)</span>
    <span class="hl kwa">done</span><span class="hl opt">;</span>
    res
  <span class="hl com">(* Setting up the permutation based on the given index *)</span>
  <span class="hl kwa">let</span> setup n idx <span class="hl opt">=</span>
    <span class="hl kwa">let</span> res <span class="hl opt">= {</span> p <span class="hl opt">=</span> <span class="hl kwc">Array</span><span class="hl opt">.</span>init n <span class="hl opt">(</span><span class="hl kwa">fun</span> i <span class="hl opt">-&gt;</span> i<span class="hl opt">);</span>
                pp <span class="hl opt">=</span> <span class="hl kwc">Array</span><span class="hl opt">.</span>make n <span class="hl num">1</span><span class="hl opt">;</span>
                c <span class="hl opt">=</span> <span class="hl kwc">Array</span><span class="hl opt">.</span>make n <span class="hl num">1</span> <span class="hl opt">}</span>
    <span class="hl kwa">and</span> idx <span class="hl opt">=</span> <span class="hl kwb">ref</span> idx <span class="hl kwa">in</span>
    <span class="hl kwa">for</span> i <span class="hl opt">=</span> n <span class="hl opt">-</span> <span class="hl num">1</span> <span class="hl kwa">downto</span> <span class="hl num">0</span> <span class="hl kwa">do</span>
      <span class="hl kwa">let</span> d <span class="hl opt">= !</span>idx <span class="hl opt">/</span> facts<span class="hl opt">.(</span>i<span class="hl opt">)</span> <span class="hl kwa">in</span>
      res<span class="hl opt">.</span>c<span class="hl opt">.(</span>i<span class="hl opt">) &lt;-</span> d<span class="hl opt">;</span>
      idx <span class="hl opt">:= !</span>idx <span class="hl kwa">mod</span> facts<span class="hl opt">.(</span>i<span class="hl opt">);</span>
      <span class="hl kwc">Array</span><span class="hl opt">.</span>blit res<span class="hl opt">.</span>p <span class="hl num">0</span> res<span class="hl opt">.</span>pp <span class="hl num">0</span> <span class="hl opt">(</span>i <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">);</span>
      <span class="hl kwa">for</span> j <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> i <span class="hl kwa">do</span>
        res<span class="hl opt">.</span>p<span class="hl opt">.(</span>j<span class="hl opt">) &lt;-</span> <span class="hl kwa">if</span> j <span class="hl opt">+</span> d <span class="hl opt">&lt;=</span> i <span class="hl kwa">then</span> res<span class="hl opt">.</span>pp<span class="hl opt">.(</span>j <span class="hl opt">+</span> d<span class="hl opt">)</span> <span class="hl kwa">else</span> res<span class="hl opt">.</span>pp<span class="hl opt">.(</span>j <span class="hl opt">+</span> d <span class="hl opt">-</span> i <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">)</span>
      <span class="hl kwa">done</span>
    <span class="hl kwa">done</span><span class="hl opt">;</span>
    res
  <span class="hl com">(* Getting the next permutation *)</span>
  <span class="hl kwa">let</span> next <span class="hl opt">{</span> p <span class="hl opt">=</span> p<span class="hl opt">;</span> c <span class="hl opt">=</span> c <span class="hl opt">} =</span>
    <span class="hl kwa">let</span> f <span class="hl opt">=</span> <span class="hl kwb">ref</span> p<span class="hl opt">.(</span><span class="hl num">1</span><span class="hl opt">)</span> <span class="hl kwa">in</span>
    p<span class="hl opt">.(</span><span class="hl num">1</span><span class="hl opt">) &lt;-</span> p<span class="hl opt">.(</span><span class="hl num">0</span><span class="hl opt">);</span>
    p<span class="hl opt">.(</span><span class="hl num">0</span><span class="hl opt">) &lt;- !</span>f<span class="hl opt">;</span>
    <span class="hl kwa">let</span> i <span class="hl opt">=</span> <span class="hl kwb">ref</span> <span class="hl num">1</span> <span class="hl kwa">in</span>
    <span class="hl kwa">while let</span> aug_c <span class="hl opt">=</span> c<span class="hl opt">.(!</span>i<span class="hl opt">) +</span> <span class="hl num">1</span> <span class="hl kwa">in</span> c<span class="hl opt">.(!</span>i<span class="hl opt">) &lt;-</span> aug_c<span class="hl opt">;</span> aug_c <span class="hl opt">&gt; !</span>i <span class="hl kwa">do</span>
      c<span class="hl opt">.(!</span>i<span class="hl opt">) &lt;-</span> <span class="hl num">0</span><span class="hl opt">;</span>
      incr i<span class="hl opt">;</span>
      <span class="hl kwa">let</span> n <span class="hl opt">=</span> p<span class="hl opt">.(</span><span class="hl num">1</span><span class="hl opt">)</span> <span class="hl kwa">in</span>
      p<span class="hl opt">.(</span><span class="hl num">0</span><span class="hl opt">) &lt;-</span> n<span class="hl opt">;</span>
      <span class="hl kwa">let</span> red_i <span class="hl opt">= !</span>i <span class="hl opt">-</span> <span class="hl num">1</span> <span class="hl kwa">in</span>
      <span class="hl kwa">for</span> j <span class="hl opt">=</span> <span class="hl num">1</span> <span class="hl kwa">to</span> red_i <span class="hl kwa">do</span>
        p<span class="hl opt">.(</span>j<span class="hl opt">) &lt;-</span> p<span class="hl opt">.(</span>j <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">)</span>
      <span class="hl kwa">done</span><span class="hl opt">;</span>
      p<span class="hl opt">.(!</span>i<span class="hl opt">) &lt;- !</span>f<span class="hl opt">;</span>
      f <span class="hl opt">:=</span> n
    <span class="hl kwa">done</span>
  <span class="hl com">(* Counting the number of flips *)</span>
  <span class="hl kwa">let</span> count <span class="hl opt">{</span> p <span class="hl opt">=</span> p<span class="hl opt">;</span> pp <span class="hl opt">=</span> pp <span class="hl opt">} =</span>
    <span class="hl kwa">let</span> f <span class="hl opt">=</span> <span class="hl kwb">ref</span> p<span class="hl opt">.(</span><span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">and</span> res <span class="hl opt">=</span> <span class="hl kwb">ref</span> <span class="hl num">1</span> <span class="hl kwa">in</span>
    <span class="hl kwa">if</span> p<span class="hl opt">.(!</span>f<span class="hl opt">) &lt;&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then begin</span>
      <span class="hl kwa">let</span> len <span class="hl opt">=</span> <span class="hl kwc">Array</span><span class="hl opt">.</span>length p <span class="hl kwa">in</span>
      <span class="hl kwa">let</span> red_len <span class="hl opt">=</span> len <span class="hl opt">-</span> <span class="hl num">1</span> <span class="hl kwa">in</span>
      <span class="hl kwa">for</span> i <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> red_len <span class="hl kwa">do</span> pp<span class="hl opt">.(</span>i<span class="hl opt">) &lt;-</span> p<span class="hl opt">.(</span>i<span class="hl opt">)</span> <span class="hl kwa">done</span><span class="hl opt">;</span>
      <span class="hl kwa">while</span> pp<span class="hl opt">.(!</span>f<span class="hl opt">) &lt;&gt;</span> <span class="hl num">0</span> <span class="hl kwa">do</span>
        incr res<span class="hl opt">;</span>
        <span class="hl kwa">let</span> lo <span class="hl opt">=</span> <span class="hl kwb">ref</span> <span class="hl num">1</span> <span class="hl kwa">and</span> hi <span class="hl opt">=</span> <span class="hl kwb">ref</span> <span class="hl opt">(!</span>f <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">)</span> <span class="hl kwa">in</span>
        <span class="hl kwa">while</span> <span class="hl opt">!</span>lo <span class="hl opt">&lt; !</span>hi <span class="hl kwa">do</span>
          <span class="hl kwa">let</span> t <span class="hl opt">=</span> pp<span class="hl opt">.(!</span>lo<span class="hl opt">)</span> <span class="hl kwa">in</span>
          pp<span class="hl opt">.(!</span>lo<span class="hl opt">) &lt;-</span> pp<span class="hl opt">.(!</span>hi<span class="hl opt">);</span>
          pp<span class="hl opt">.(!</span>hi<span class="hl opt">) &lt;-</span> t<span class="hl opt">;</span>
          incr lo<span class="hl opt">;</span>
          decr hi
        <span class="hl kwa">done</span><span class="hl opt">;</span>
        <span class="hl kwa">let</span> ff <span class="hl opt">= !</span>f <span class="hl kwa">in</span>
        <span class="hl kwa">let</span> t <span class="hl opt">=</span> pp<span class="hl opt">.(</span>ff<span class="hl opt">)</span> <span class="hl kwa">in</span>
        pp<span class="hl opt">.(</span>ff<span class="hl opt">) &lt;-</span> ff<span class="hl opt">;</span>
        f <span class="hl opt">:=</span> t
      <span class="hl kwa">done</span>
    <span class="hl kwa">end</span><span class="hl opt">;</span>
    <span class="hl opt">!</span>res
  <span class="hl kwa">end</span>

<span class="hl kwa">let</span> _ <span class="hl opt">=</span>
  <span class="hl kwa">match</span> <span class="hl kwc">Sys</span><span class="hl opt">.</span>argv <span class="hl kwa">with</span>
  | <span class="hl opt">[</span>| p<span class="hl opt">;</span> s_n |<span class="hl opt">] -&gt;</span>
    <span class="hl kwa">let</span> n <span class="hl opt">=</span> int_of_string s_n <span class="hl kwa">in</span>
    <span class="hl kwa">let</span> chunk_size <span class="hl opt">=</span> <span class="hl kwc">Perm</span><span class="hl opt">.</span>facts<span class="hl opt">.(</span>n<span class="hl opt">) /</span> workers
    <span class="hl kwa">and</span> rem <span class="hl opt">=</span> <span class="hl kwc">Perm</span><span class="hl opt">.</span>facts<span class="hl opt">.(</span>n<span class="hl opt">)</span> <span class="hl kwa">mod</span> workers <span class="hl kwa">in</span>
    <span class="hl kwa">let</span> w <span class="hl opt">=</span>
      <span class="hl kwc">Array</span><span class="hl opt">.</span>init workers
        <span class="hl opt">(</span><span class="hl kwa">fun</span> i <span class="hl opt">-&gt;</span>
          <span class="hl kwa">let</span> lo <span class="hl opt">=</span> i <span class="hl opt">*</span> chunk_size <span class="hl opt">+</span> min i rem <span class="hl kwa">in</span>
          <span class="hl kwa">let</span> hi <span class="hl opt">=</span> lo <span class="hl opt">+</span> chunk_size <span class="hl opt">+</span> <span class="hl kwa">if</span> i <span class="hl opt">&lt;</span> rem <span class="hl kwa">then</span> <span class="hl num">1</span> <span class="hl kwa">else</span> <span class="hl num">0</span> <span class="hl kwa">in</span>
          <span class="hl kwc">Unix</span><span class="hl opt">.</span>open_process_in <span class="hl opt">(</span>p ^ <span class="hl str">&quot; &quot;</span> ^ s_n ^ <span class="hl str">&quot; &quot;</span> ^ string_of_int lo ^ <span class="hl str">&quot; &quot;</span> ^ string_of_int hi<span class="hl opt">))</span> <span class="hl kwa">in</span>
    <span class="hl kwa">let</span> c <span class="hl opt">=</span> <span class="hl kwb">ref</span> <span class="hl num">0</span> <span class="hl kwa">and</span> m <span class="hl opt">=</span> <span class="hl kwb">ref</span> <span class="hl num">0</span> <span class="hl kwa">in</span>
    <span class="hl kwc">Array</span><span class="hl opt">.</span>iter
      <span class="hl opt">(</span><span class="hl kwa">fun</span> input <span class="hl opt">-&gt;</span>
        c <span class="hl opt">:= !</span>c <span class="hl opt">+</span> input_binary_int input<span class="hl opt">;</span>
        m <span class="hl opt">:=</span> max <span class="hl opt">!</span>m <span class="hl opt">(</span>input_binary_int input<span class="hl opt">))</span>
      w<span class="hl opt">;</span>
    <span class="hl kwc">Printf</span><span class="hl opt">.</span>printf <span class="hl str">&quot;%d</span><span class="hl esc">\n</span><span class="hl str">Pfannkuchen(%d) = %d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> <span class="hl opt">!</span>c n <span class="hl opt">!</span>m
  | <span class="hl opt">[</span>| _<span class="hl opt">;</span> n<span class="hl opt">;</span> lo<span class="hl opt">;</span> hi |<span class="hl opt">] -&gt;</span>
    <span class="hl kwa">let</span> n <span class="hl opt">=</span> int_of_string n
    <span class="hl kwa">and</span> lo <span class="hl opt">=</span> int_of_string lo <span class="hl kwa">and</span> hi <span class="hl opt">=</span> int_of_string hi <span class="hl kwa">in</span>
    <span class="hl kwa">let</span> p <span class="hl opt">=</span> <span class="hl kwc">Perm</span><span class="hl opt">.</span>setup n lo
    <span class="hl kwa">and</span> c <span class="hl opt">=</span> <span class="hl kwb">ref</span> <span class="hl num">0</span> <span class="hl kwa">and</span> m <span class="hl opt">=</span> <span class="hl kwb">ref</span> <span class="hl num">0</span>
    <span class="hl kwa">and</span> red_hi <span class="hl opt">=</span> hi <span class="hl opt">-</span> <span class="hl num">1</span> <span class="hl kwa">in</span>
    <span class="hl kwa">for</span> i <span class="hl opt">=</span> lo <span class="hl kwa">to</span> red_hi <span class="hl kwa">do</span>
      <span class="hl kwa">let</span> r <span class="hl opt">=</span> <span class="hl kwc">Perm</span><span class="hl opt">.</span>count p <span class="hl kwa">in</span>
      c <span class="hl opt">:= !</span>c <span class="hl opt">+</span> r <span class="hl opt">* (</span><span class="hl num">1</span> <span class="hl opt">- (</span>i <span class="hl kwa">land</span> <span class="hl num">1</span><span class="hl opt">)</span> <span class="hl kwa">lsl</span> <span class="hl num">1</span><span class="hl opt">);</span>
      <span class="hl kwa">if</span> r <span class="hl opt">&gt; !</span>m <span class="hl kwa">then</span>
      m <span class="hl opt">:=</span> r<span class="hl opt">;</span>
      <span class="hl kwc">Perm</span><span class="hl opt">.</span>next p
    <span class="hl kwa">done</span><span class="hl opt">;</span>
    output_binary_int stdout <span class="hl opt">!</span>c<span class="hl opt">;</span>
    output_binary_int stdout <span class="hl opt">!</span>m
  | _ <span class="hl opt">-&gt;</span> <span class="hl kwc">Printf</span><span class="hl opt">.</span>printf <span class="hl str">&quot;Wrong syntax</span><span class="hl esc">\n</span><span class="hl str">%!&quot;</span>

