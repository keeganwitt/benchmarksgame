<span class="hl com">{-  The Computer Language Benchmarks Game</span>
<span class="hl com">    http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com">    contributed by Miha Vučkovič</span>
<span class="hl com">-}</span>

<span class="hl kwd">import</span> System<span class="hl opt">.</span>Environment
<span class="hl kwd">import</span> Control<span class="hl opt">.</span>Applicative

flop <span class="hl opt">(</span><span class="hl num">2</span><span class="hl opt">:</span>x1<span class="hl opt">:</span>t<span class="hl opt">) =</span> x1<span class="hl opt">:</span><span class="hl num">2</span><span class="hl opt">:</span>t
flop <span class="hl opt">(</span><span class="hl num">3</span><span class="hl opt">:</span>x1<span class="hl opt">:</span>x2<span class="hl opt">:</span>t<span class="hl opt">) =</span> x2<span class="hl opt">:</span>x1<span class="hl opt">:</span><span class="hl num">3</span><span class="hl opt">:</span>t
flop <span class="hl opt">(</span><span class="hl num">4</span><span class="hl opt">:</span>x1<span class="hl opt">:</span>x2<span class="hl opt">:</span>x3<span class="hl opt">:</span>t<span class="hl opt">) =</span> x3<span class="hl opt">:</span>x2<span class="hl opt">:</span>x1<span class="hl opt">:</span><span class="hl num">4</span><span class="hl opt">:</span>t
flop <span class="hl opt">(</span><span class="hl num">5</span><span class="hl opt">:</span>x1<span class="hl opt">:</span>x2<span class="hl opt">:</span>x3<span class="hl opt">:</span>x4<span class="hl opt">:</span>t<span class="hl opt">) =</span> x4<span class="hl opt">:</span>x3<span class="hl opt">:</span>x2<span class="hl opt">:</span>x1<span class="hl opt">:</span><span class="hl num">5</span><span class="hl opt">:</span>t
flop <span class="hl opt">(</span><span class="hl num">6</span><span class="hl opt">:</span>x1<span class="hl opt">:</span>x2<span class="hl opt">:</span>x3<span class="hl opt">:</span>x4<span class="hl opt">:</span>x5<span class="hl opt">:</span>t<span class="hl opt">) =</span> x5<span class="hl opt">:</span>x4<span class="hl opt">:</span>x3<span class="hl opt">:</span>x2<span class="hl opt">:</span>x1<span class="hl opt">:</span><span class="hl num">6</span><span class="hl opt">:</span>t
flop <span class="hl opt">(</span><span class="hl num">7</span><span class="hl opt">:</span>x1<span class="hl opt">:</span>x2<span class="hl opt">:</span>x3<span class="hl opt">:</span>x4<span class="hl opt">:</span>x5<span class="hl opt">:</span>x6<span class="hl opt">:</span>t<span class="hl opt">) =</span> x6<span class="hl opt">:</span>x5<span class="hl opt">:</span>x4<span class="hl opt">:</span>x3<span class="hl opt">:</span>x2<span class="hl opt">:</span>x1<span class="hl opt">:</span><span class="hl num">7</span><span class="hl opt">:</span>t

flop lst<span class="hl opt">&#64;(</span>h<span class="hl opt">:</span>_<span class="hl opt">) =</span> r <span class="hl kwd">where</span>
	<span class="hl opt">(</span>t<span class="hl opt">,</span> r<span class="hl opt">) =</span> flop<span class="hl opt">'</span> h <span class="hl opt">(</span>lst<span class="hl opt">,</span> t<span class="hl opt">)</span>
	flop<span class="hl opt">'</span> <span class="hl num">0</span> <span class="hl opt">(</span>t<span class="hl opt">,</span> r<span class="hl opt">) = (</span>t<span class="hl opt">,</span> r<span class="hl opt">)</span>
	flop<span class="hl opt">'</span> n <span class="hl opt">((</span>h<span class="hl opt">:</span>t<span class="hl opt">),</span> r<span class="hl opt">) =</span> flop<span class="hl opt">' (</span>n<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">) (</span>t<span class="hl opt">,</span> h<span class="hl opt">:</span>r<span class="hl opt">)</span>

flopS <span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">:</span>_<span class="hl opt">) =</span> <span class="hl num">0</span>
flopS lst <span class="hl opt">=</span> <span class="hl num">1</span> <span class="hl opt">+</span> flopS <span class="hl opt">(</span>flop lst<span class="hl opt">)</span>

rotate n <span class="hl opt">(</span>h<span class="hl opt">:</span>t<span class="hl opt">) =</span> rotate<span class="hl opt">' (</span>n<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">)</span> t <span class="hl kwd">where</span>
	rotate<span class="hl opt">'</span> <span class="hl num">0</span> l <span class="hl opt">=</span> h<span class="hl opt">:</span>l
	rotate<span class="hl opt">'</span> n <span class="hl opt">(</span>f<span class="hl opt">:</span>t<span class="hl opt">) =</span> f<span class="hl opt">:(</span>rotate<span class="hl opt">' (</span>n<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">)</span> t<span class="hl opt">)</span>

checksum i f
   | <span class="hl kwc">mod</span> i <span class="hl num">2</span> <span class="hl opt">==</span> <span class="hl num">0</span> <span class="hl opt">=</span> f
   | <span class="hl kwa">True</span> <span class="hl opt">= -</span>f

pfold r <span class="hl opt">[] =</span> r
pfold <span class="hl opt">(</span>ac<span class="hl opt">,</span> af<span class="hl opt">) ((</span>c<span class="hl opt">,</span> f<span class="hl opt">):</span>t<span class="hl opt">)  =</span> <span class="hl kwc">seq</span> sc <span class="hl opt">$</span> <span class="hl kwc">seq</span> sf <span class="hl opt">$</span> pfold <span class="hl opt">(</span>sc<span class="hl opt">,</span> sf<span class="hl opt">)</span> t <span class="hl kwd">where</span> 
	sc <span class="hl opt">=</span> ac<span class="hl opt">+</span>c
	sf <span class="hl opt">=</span> <span class="hl kwc">max</span> af f

permut n <span class="hl opt">=</span> <span class="hl kwc">foldr</span> perm <span class="hl opt">[[</span><span class="hl num">1</span><span class="hl opt">..</span>n<span class="hl opt">]] [</span><span class="hl num">2</span><span class="hl opt">..</span>n<span class="hl opt">]</span> <span class="hl kwd">where</span>
   perm x lst <span class="hl opt">=</span> <span class="hl kwc">concat</span> <span class="hl opt">[</span><span class="hl kwc">take</span> x <span class="hl opt">$</span> <span class="hl kwc">iterate</span> <span class="hl opt">(</span>rotate x<span class="hl opt">)</span> l | l <span class="hl opt">&lt;-</span> lst<span class="hl opt">]</span>

main <span class="hl opt">=</span> <span class="hl kwd">do</span>
   n <span class="hl opt">&lt;-</span> <span class="hl kwc">read</span><span class="hl opt">.</span><span class="hl kwc">head</span> <span class="hl opt">&lt;$&gt;</span> <span class="hl kwc">getArgs</span>
   <span class="hl kwd">let</span> <span class="hl opt">(</span>chksm<span class="hl opt">,</span> mflops<span class="hl opt">) =</span> pfold <span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">0</span><span class="hl opt">) $</span> <span class="hl kwc">map</span> <span class="hl opt">(\(</span>i<span class="hl opt">,</span> p<span class="hl opt">) -&gt;</span> <span class="hl kwd">let</span> flops <span class="hl opt">=</span> flopS p <span class="hl kwd">in</span> <span class="hl opt">(</span>checksum i flops<span class="hl opt">,</span> flops<span class="hl opt">)) $</span> <span class="hl kwc">zip</span> <span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">..] (</span>permut n<span class="hl opt">)</span>
   <span class="hl kwc">putStrLn</span> <span class="hl opt">$ (</span><span class="hl kwc">show</span> chksm<span class="hl opt">) ++</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">Pfannkuchen(&quot;</span> <span class="hl opt">++ (</span><span class="hl kwc">show</span> n<span class="hl opt">) ++</span> <span class="hl str">&quot;) = &quot;</span> <span class="hl opt">++ (</span><span class="hl kwc">show</span> <span class="hl opt">$</span> mflops<span class="hl opt">)</span>
