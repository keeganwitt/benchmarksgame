<span class="hl slc"># The Computer Language Benchmarks Game</span>
<span class="hl slc"># http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">#</span>
<span class="hl slc"># Contributed by Sebastien Loisel</span>
<span class="hl slc"># Fixed by Isaac Gouy</span>
<span class="hl slc"># Sped up by Josh Goldfoot</span>
<span class="hl slc"># Dirtily sped up by Simon Descarpentries</span>
<span class="hl slc"># Sped up by Joseph LaFata</span>

<span class="hl kwa">from</span> array     <span class="hl kwa">import</span> array
<span class="hl kwa">from</span> math      <span class="hl kwa">import</span> sqrt
<span class="hl kwa">from</span> sys       <span class="hl kwa">import</span> argv
<span class="hl kwa">import</span> sys

<span class="hl kwa">if</span> sys<span class="hl opt">.</span>version_info <span class="hl opt">&lt; (</span><span class="hl num">3</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">):</span>
    <span class="hl kwa">from</span> itertools <span class="hl kwa">import</span> izip <span class="hl kwa">as</span> <span class="hl kwb">zip</span>
<span class="hl kwa">else</span><span class="hl opt">:</span>
    <span class="hl kwb">xrange</span> <span class="hl opt">=</span> <span class="hl kwb">range</span>

<span class="hl kwa">def</span> <span class="hl kwd">eval_A</span> <span class="hl opt">(</span>i<span class="hl opt">,</span> j<span class="hl opt">):</span>
    <span class="hl kwa">return</span> <span class="hl num">1.0</span> <span class="hl opt">/ (((</span>i <span class="hl opt">+</span> j<span class="hl opt">) * (</span>i <span class="hl opt">+</span> j <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">) &gt;&gt;</span> <span class="hl num">1</span><span class="hl opt">) +</span> i <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">eval_A_times_u</span> <span class="hl opt">(</span>u<span class="hl opt">,</span> resulted_list<span class="hl opt">):</span>
    u_len <span class="hl opt">=</span> <span class="hl kwb">len</span> <span class="hl opt">(</span>u<span class="hl opt">)</span>
    local_eval_A <span class="hl opt">=</span> eval_A
    
    <span class="hl kwa">for</span> i <span class="hl kwa">in</span> <span class="hl kwb">xrange</span> <span class="hl opt">(</span>u_len<span class="hl opt">):</span>
        partial_sum <span class="hl opt">=</span> <span class="hl num">0</span>
        
        j <span class="hl opt">=</span> <span class="hl num">0</span>
        <span class="hl kwa">while</span> j <span class="hl opt">&lt;</span> u_len<span class="hl opt">:</span>
            partial_sum <span class="hl opt">+=</span> <span class="hl kwd">local_eval_A</span> <span class="hl opt">(</span>i<span class="hl opt">,</span> j<span class="hl opt">) *</span> u<span class="hl opt">[</span>j<span class="hl opt">]</span>
            j <span class="hl opt">+=</span> <span class="hl num">1</span>
        
        resulted_list<span class="hl opt">[</span>i<span class="hl opt">] =</span> partial_sum

<span class="hl kwa">def</span> <span class="hl kwd">eval_At_times_u</span> <span class="hl opt">(</span>u<span class="hl opt">,</span> resulted_list<span class="hl opt">):</span>
    u_len <span class="hl opt">=</span> <span class="hl kwb">len</span> <span class="hl opt">(</span>u<span class="hl opt">)</span>
    local_eval_A <span class="hl opt">=</span> eval_A
    
    <span class="hl kwa">for</span> i <span class="hl kwa">in</span> <span class="hl kwb">xrange</span> <span class="hl opt">(</span>u_len<span class="hl opt">):</span>
        partial_sum <span class="hl opt">=</span> <span class="hl num">0</span>
        
        j <span class="hl opt">=</span> <span class="hl num">0</span>
        <span class="hl kwa">while</span> j <span class="hl opt">&lt;</span> u_len<span class="hl opt">:</span>
            partial_sum <span class="hl opt">+=</span> <span class="hl kwd">local_eval_A</span> <span class="hl opt">(</span>j<span class="hl opt">,</span> i<span class="hl opt">) *</span> u<span class="hl opt">[</span>j<span class="hl opt">]</span>
            j <span class="hl opt">+=</span> <span class="hl num">1</span>
        
        resulted_list<span class="hl opt">[</span>i<span class="hl opt">] =</span> partial_sum

<span class="hl kwa">def</span> <span class="hl kwd">eval_AtA_times_u</span> <span class="hl opt">(</span>u<span class="hl opt">,</span> out<span class="hl opt">,</span> tmp<span class="hl opt">):</span>
    <span class="hl kwd">eval_A_times_u</span> <span class="hl opt">(</span>u<span class="hl opt">,</span> tmp<span class="hl opt">)</span>
    <span class="hl kwd">eval_At_times_u</span> <span class="hl opt">(</span>tmp<span class="hl opt">,</span> out<span class="hl opt">)</span>

<span class="hl kwa">def</span> <span class="hl kwd">main</span><span class="hl opt">():</span>
    n <span class="hl opt">=</span> <span class="hl kwb">int</span> <span class="hl opt">(</span>argv <span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">])</span>
    u <span class="hl opt">=</span> <span class="hl kwd">array</span><span class="hl opt">(</span><span class="hl str">&quot;d&quot;</span><span class="hl opt">, [</span><span class="hl num">1</span><span class="hl opt">]) *</span> n
    v <span class="hl opt">=</span> <span class="hl kwd">array</span><span class="hl opt">(</span><span class="hl str">&quot;d&quot;</span><span class="hl opt">, [</span><span class="hl num">1</span><span class="hl opt">]) *</span> n
    tmp <span class="hl opt">=</span> <span class="hl kwd">array</span><span class="hl opt">(</span><span class="hl str">&quot;d&quot;</span><span class="hl opt">, [</span><span class="hl num">1</span><span class="hl opt">]) *</span> n
    local_eval_AtA_times_u <span class="hl opt">=</span> eval_AtA_times_u
    
    <span class="hl kwa">for</span> dummy <span class="hl kwa">in</span> <span class="hl kwb">xrange</span> <span class="hl opt">(</span><span class="hl num">10</span><span class="hl opt">):</span>
        <span class="hl kwd">local_eval_AtA_times_u</span> <span class="hl opt">(</span>u<span class="hl opt">,</span> v<span class="hl opt">,</span> tmp<span class="hl opt">)</span>
        <span class="hl kwd">local_eval_AtA_times_u</span> <span class="hl opt">(</span>v<span class="hl opt">,</span> u<span class="hl opt">,</span> tmp<span class="hl opt">)</span>
    
    vBv <span class="hl opt">=</span> vv <span class="hl opt">=</span> <span class="hl num">0</span>
    
    <span class="hl kwa">for</span> ue<span class="hl opt">,</span> ve <span class="hl kwa">in</span> <span class="hl kwb">zip</span> <span class="hl opt">(</span>u<span class="hl opt">,</span> v<span class="hl opt">):</span>
        vBv <span class="hl opt">+=</span> ue <span class="hl opt">*</span> ve
        vv  <span class="hl opt">+=</span> ve <span class="hl opt">*</span> ve
    
    <span class="hl kwa">print</span><span class="hl opt">(</span><span class="hl str">&quot;%0.9f&quot;</span> <span class="hl opt">% (</span><span class="hl kwd">sqrt</span><span class="hl opt">(</span>vBv<span class="hl opt">/</span>vv<span class="hl opt">)))</span>

<span class="hl kwd">main</span><span class="hl opt">()</span> 
