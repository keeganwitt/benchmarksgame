<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by Alexey Zolotov</span>
<span class="hl com">*/</span>

<span class="hl ppc">#include &lt;re2.h&gt;</span>
<span class="hl ppc">#include &lt;assert.h&gt;</span>
<span class="hl ppc">#include &lt;iostream&gt;</span>
<span class="hl ppc">#include &lt;stdio.h&gt;</span>

<span class="hl kwa">using namespace</span> re2<span class="hl opt">;</span>
<span class="hl kwa">using namespace</span> std<span class="hl opt">;</span>

<span class="hl ppc">#define BUFSIZE 1024</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">void</span><span class="hl opt">)</span>
<span class="hl opt">{</span>
    string str<span class="hl opt">,</span> out<span class="hl opt">;</span>
    <span class="hl kwb">int</span> len1<span class="hl opt">,</span> len2<span class="hl opt">;</span>
    <span class="hl kwb">int</span> read_size<span class="hl opt">;</span>
    <span class="hl kwb">char</span> <span class="hl opt">*</span>buf<span class="hl opt">;</span>

    string pattern1<span class="hl opt">[] = {</span>
        <span class="hl str">&quot;agggtaaa|tttaccct&quot;</span><span class="hl opt">,</span>
        <span class="hl str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span><span class="hl opt">,</span>
        <span class="hl str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span><span class="hl opt">,</span>
        <span class="hl str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span><span class="hl opt">,</span>
        <span class="hl str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span><span class="hl opt">,</span>
        <span class="hl str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span><span class="hl opt">,</span>
        <span class="hl str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span><span class="hl opt">,</span>
        <span class="hl str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span><span class="hl opt">,</span>
        <span class="hl str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span>
    <span class="hl opt">};</span>

    string pattern2<span class="hl opt">[] = {</span>
        <span class="hl str">&quot;B&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(c|g|t)&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;D&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(a|g|t)&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;H&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(a|c|t)&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;K&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(g|t)&quot;</span><span class="hl opt">,</span>
        <span class="hl str">&quot;M&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(a|c)&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;N&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(a|c|g|t)&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;R&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(a|g)&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;S&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(c|g)&quot;</span><span class="hl opt">,</span>
        <span class="hl str">&quot;V&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(a|c|g)&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;W&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(a|t)&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;Y&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(c|t)&quot;</span>
    <span class="hl opt">};</span>


    <span class="hl kwd">fseek</span><span class="hl opt">(</span>stdin<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> SEEK_END<span class="hl opt">);</span>
    read_size <span class="hl opt">=</span> <span class="hl kwd">ftell</span><span class="hl opt">(</span>stdin<span class="hl opt">);</span>
    <span class="hl kwa">assert</span><span class="hl opt">(</span>read_size <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">);</span>

    buf <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwb">char</span><span class="hl opt">[</span>read_size<span class="hl opt">];</span>
    <span class="hl kwd">rewind</span><span class="hl opt">(</span>stdin<span class="hl opt">);</span>
    read_size <span class="hl opt">=</span> <span class="hl kwd">fread</span><span class="hl opt">(</span>buf<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">,</span> read_size<span class="hl opt">,</span> stdin<span class="hl opt">);</span>
    <span class="hl kwa">assert</span><span class="hl opt">(</span>read_size<span class="hl opt">);</span>

    str<span class="hl opt">.</span><span class="hl kwd">append</span><span class="hl opt">(</span>buf<span class="hl opt">,</span> read_size<span class="hl opt">);</span>

    <span class="hl kwa">delete</span> <span class="hl opt">[]</span> buf<span class="hl opt">;</span>

    len1 <span class="hl opt">=</span> str<span class="hl opt">.</span><span class="hl kwd">length</span><span class="hl opt">();</span>
    RE2<span class="hl opt">::</span><span class="hl kwd">GlobalReplace</span><span class="hl opt">(&amp;</span>str<span class="hl opt">,</span> <span class="hl str">&quot;&gt;.*</span><span class="hl esc">\n</span><span class="hl str">|</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;&quot;</span><span class="hl opt">);</span>
    len2 <span class="hl opt">=</span> str<span class="hl opt">.</span><span class="hl kwd">length</span><span class="hl opt">();</span>

    out <span class="hl opt">=</span> str<span class="hl opt">;</span>

    <span class="hl ppc">#pragma omp parallel sections</span>
    <span class="hl opt">{</span>
        <span class="hl ppc">#pragma omp section</span>
        <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt; (</span><span class="hl kwb">int</span><span class="hl opt">)(</span><span class="hl kwa">sizeof</span><span class="hl opt">(</span>pattern1<span class="hl opt">) /</span> <span class="hl kwa">sizeof</span><span class="hl opt">(</span>string<span class="hl opt">));</span> i<span class="hl opt">++) {</span>
            <span class="hl kwb">int</span> count <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
            RE2 <span class="hl kwd">pat</span><span class="hl opt">(</span>pattern1<span class="hl opt">[</span>i<span class="hl opt">]);</span>
            StringPiece piece <span class="hl opt">=</span> str<span class="hl opt">;</span>

            <span class="hl kwa">while</span> <span class="hl opt">(</span>RE2<span class="hl opt">::</span><span class="hl kwd">FindAndConsume</span><span class="hl opt">(&amp;</span>piece<span class="hl opt">,</span> pat<span class="hl opt">)) {</span>
                count<span class="hl opt">++;</span>
            <span class="hl opt">}</span>

            cout <span class="hl opt">&lt;&lt;</span> pattern1<span class="hl opt">[</span>i<span class="hl opt">] &lt;&lt;</span> <span class="hl str">&quot; &quot;</span> <span class="hl opt">&lt;&lt;</span> count <span class="hl opt">&lt;&lt;</span> endl<span class="hl opt">;</span>
        <span class="hl opt">}</span>
        <span class="hl ppc">#pragma omp section</span>
        <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt; (</span><span class="hl kwb">int</span><span class="hl opt">)(</span><span class="hl kwa">sizeof</span><span class="hl opt">(</span>pattern2<span class="hl opt">) /</span> <span class="hl kwa">sizeof</span><span class="hl opt">(</span>string<span class="hl opt">));</span> i <span class="hl opt">+=</span> <span class="hl num">2</span><span class="hl opt">) {</span>
            RE2<span class="hl opt">::</span><span class="hl kwd">GlobalReplace</span><span class="hl opt">(&amp;</span>out<span class="hl opt">,</span> pattern2<span class="hl opt">[</span>i<span class="hl opt">],</span> pattern2<span class="hl opt">[</span>i <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">]);</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span>

    cout <span class="hl opt">&lt;&lt;</span> endl<span class="hl opt">;</span>
    cout <span class="hl opt">&lt;&lt;</span> len1 <span class="hl opt">&lt;&lt;</span> endl<span class="hl opt">;</span>
    cout <span class="hl opt">&lt;&lt;</span> len2 <span class="hl opt">&lt;&lt;</span> endl<span class="hl opt">;</span>
    cout <span class="hl opt">&lt;&lt;</span> out<span class="hl opt">.</span><span class="hl kwd">length</span><span class="hl opt">() &lt;&lt;</span> endl<span class="hl opt">;</span>

<span class="hl opt">}</span>
