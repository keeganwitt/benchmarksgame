<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com">   contributed by Andrew Moon</span>
<span class="hl com">   slightly modified by Krzysztof Jakubowski</span>
<span class="hl com">*/</span>

<span class="hl ppc">#include &lt;stdio.h&gt;</span>
<span class="hl ppc">#include &lt;stdlib.h&gt;</span>
<span class="hl ppc">#include &lt;string.h&gt;</span>
<span class="hl ppc">#include &lt;algorithm&gt;</span>

<span class="hl kwb">struct</span> Random <span class="hl opt">{</span>
   <span class="hl kwb">enum</span> <span class="hl opt">{</span> IM <span class="hl opt">=</span> <span class="hl num">139968</span><span class="hl opt">,</span> IA <span class="hl opt">=</span> <span class="hl num">3877</span><span class="hl opt">,</span> IC <span class="hl opt">=</span> <span class="hl num">29573</span> <span class="hl opt">};</span>
   <span class="hl kwd">Random</span><span class="hl opt">() :</span> <span class="hl kwd">last</span><span class="hl opt">(</span><span class="hl num">42</span><span class="hl opt">) {}</span>
   <span class="hl kwb">float</span> <span class="hl kwd">get</span><span class="hl opt">(</span> <span class="hl kwb">float</span> max <span class="hl opt">=</span> <span class="hl num">1.0</span>f <span class="hl opt">) {</span>
      last <span class="hl opt">= (</span> last <span class="hl opt">*</span> IA <span class="hl opt">+</span> IC <span class="hl opt">) %</span> IM<span class="hl opt">;</span>
      <span class="hl kwa">return</span> max <span class="hl opt">*</span> last <span class="hl opt">* (</span><span class="hl num">512.0</span>f <span class="hl opt">/</span> IM<span class="hl opt">);</span>
   <span class="hl opt">}</span>
<span class="hl kwc">protected</span><span class="hl opt">:</span>
   <span class="hl kwb">unsigned int</span> last<span class="hl opt">;</span>
<span class="hl opt">}</span> rng<span class="hl opt">;</span>

<span class="hl kwb">struct</span> IUB <span class="hl opt">{</span>
   <span class="hl kwb">int</span> c<span class="hl opt">;</span>
   <span class="hl kwb">double</span> p<span class="hl opt">;</span>
   <span class="hl kwb">unsigned int</span> pi<span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl kwb">struct</span> Cumulative <span class="hl opt">{</span>
   <span class="hl kwb">enum</span> <span class="hl opt">{</span> slots <span class="hl opt">=</span> <span class="hl num">512</span><span class="hl opt">, };</span>

   <span class="hl kwd">Cumulative</span><span class="hl opt">(</span> IUB <span class="hl opt">*</span>start <span class="hl opt">) {</span>
      <span class="hl kwb">double</span> p <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
      <span class="hl kwa">for</span> <span class="hl opt">(</span> IUB <span class="hl opt">*</span>iter <span class="hl opt">=</span> start<span class="hl opt">;</span> iter<span class="hl opt">-&gt;</span>c<span class="hl opt">; ++</span>iter <span class="hl opt">) {</span>
         p <span class="hl opt">+=</span> iter<span class="hl opt">-&gt;</span>p<span class="hl opt">;</span>
         iter<span class="hl opt">-&gt;</span>p <span class="hl opt">=</span> std<span class="hl opt">::</span><span class="hl kwd">min</span><span class="hl opt">(</span> p<span class="hl opt">,</span> <span class="hl num">1.0</span> <span class="hl opt">) *</span> slots<span class="hl opt">;</span>
         iter<span class="hl opt">-&gt;</span>pi <span class="hl opt">= (</span><span class="hl kwb">unsigned int</span> <span class="hl opt">)(</span>iter<span class="hl opt">-&gt;</span>p<span class="hl opt">);</span>
      <span class="hl opt">}</span>

      <span class="hl kwa">for</span> <span class="hl opt">(</span> <span class="hl kwb">unsigned int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;=</span> slots<span class="hl opt">;</span> i<span class="hl opt">++ ) {</span>
         <span class="hl kwa">while</span> <span class="hl opt">(</span> i <span class="hl opt">&gt;</span> start<span class="hl opt">-&gt;</span>pi <span class="hl opt">)</span>
            <span class="hl opt">++</span>start<span class="hl opt">;</span>
         table<span class="hl opt">[</span>i<span class="hl opt">] =</span> start<span class="hl opt">;</span>
      <span class="hl opt">}</span>
   <span class="hl opt">}</span>

   <span class="hl kwb">const char</span> <span class="hl kwc">operator</span><span class="hl opt">[] (</span> <span class="hl kwb">float</span> pct <span class="hl opt">)</span> <span class="hl kwb">const</span> <span class="hl opt">{</span>
      IUB <span class="hl opt">*</span>iter <span class="hl opt">=</span> table<span class="hl opt">[(</span><span class="hl kwb">unsigned</span><span class="hl opt">)</span>pct<span class="hl opt">];</span>
      <span class="hl kwa">while</span> <span class="hl opt">(</span> iter<span class="hl opt">-&gt;</span>p <span class="hl opt">&lt;</span> pct <span class="hl opt">)</span>
         <span class="hl opt">++</span>iter<span class="hl opt">;</span>
      <span class="hl kwa">return</span> iter<span class="hl opt">-&gt;</span>c<span class="hl opt">;</span>
   <span class="hl opt">}</span>

<span class="hl kwc">protected</span><span class="hl opt">:</span>
   IUB <span class="hl opt">*</span>table<span class="hl opt">[</span>slots <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">];</span>
<span class="hl opt">};</span>

<span class="hl kwb">static const size_t</span> lineLength <span class="hl opt">=</span> <span class="hl num">60</span><span class="hl opt">;</span>

<span class="hl kwb">struct</span> LineBuffer <span class="hl opt">{</span>
   <span class="hl kwd">LineBuffer</span><span class="hl opt">() :</span> <span class="hl kwd">lastN</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">) {}</span>
   LineBuffer <span class="hl opt">&amp;</span><span class="hl kwd">genrand</span><span class="hl opt">(</span> Cumulative <span class="hl opt">&amp;</span>table<span class="hl opt">,</span> <span class="hl kwb">size_t</span> N <span class="hl opt">) {</span>
      <span class="hl kwa">for</span> <span class="hl opt">(</span> <span class="hl kwb">size_t</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> N<span class="hl opt">;</span> i<span class="hl opt">++ )</span>
         buffer<span class="hl opt">[</span>i<span class="hl opt">] =</span> table<span class="hl opt">[</span>rng<span class="hl opt">.</span><span class="hl kwd">get</span><span class="hl opt">()];</span>
      buffer<span class="hl opt">[</span>N<span class="hl opt">] =</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl opt">;</span>
      lastN <span class="hl opt">=</span> N <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span>
      <span class="hl kwa">return</span> <span class="hl opt">*</span><span class="hl kwa">this</span><span class="hl opt">;</span>
   <span class="hl opt">}</span>
   <span class="hl kwb">void</span> <span class="hl kwd">writeline</span><span class="hl opt">()</span> <span class="hl kwb">const</span> <span class="hl opt">{</span> <span class="hl kwd">fwrite_unlocked</span><span class="hl opt">(</span> buffer<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">,</span> lastN<span class="hl opt">,</span> stdout <span class="hl opt">); }</span>
<span class="hl kwc">protected</span><span class="hl opt">:</span>
   <span class="hl kwb">char</span> buffer<span class="hl opt">[</span>lineLength <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">];</span>
   <span class="hl kwb">size_t</span> lastN<span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl kwb">struct</span> RotatingString <span class="hl opt">{</span>
   <span class="hl kwd">RotatingString</span><span class="hl opt">(</span> <span class="hl kwb">const char</span> <span class="hl opt">*</span>in <span class="hl opt">) :</span> <span class="hl kwd">pos</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">) {</span>
      size <span class="hl opt">=</span> <span class="hl kwd">strlen</span><span class="hl opt">(</span> in <span class="hl opt">);</span>
      buffer <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwb">char</span><span class="hl opt">[</span>size <span class="hl opt">+</span> lineLength<span class="hl opt">];</span>
      <span class="hl kwd">memcpy</span><span class="hl opt">(</span> buffer<span class="hl opt">,</span> in<span class="hl opt">,</span> size <span class="hl opt">);</span>
      <span class="hl kwd">memcpy</span><span class="hl opt">(</span> buffer <span class="hl opt">+</span> size<span class="hl opt">,</span> in<span class="hl opt">,</span> lineLength <span class="hl opt">);</span>
   <span class="hl opt">}</span>
   <span class="hl opt">~</span><span class="hl kwd">RotatingString</span><span class="hl opt">() {</span> <span class="hl kwa">delete</span><span class="hl opt">[]</span> buffer<span class="hl opt">; }</span>
   <span class="hl kwb">void</span> <span class="hl kwd">write</span><span class="hl opt">(</span> <span class="hl kwb">size_t</span> bytes <span class="hl opt">) {</span>
      <span class="hl kwd">fwrite_unlocked</span><span class="hl opt">(</span> buffer <span class="hl opt">+</span> pos<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">,</span> bytes<span class="hl opt">,</span> stdout <span class="hl opt">);</span>
      <span class="hl kwd">fputc_unlocked</span><span class="hl opt">(</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl opt">,</span> stdout <span class="hl opt">);</span>
      pos <span class="hl opt">+=</span> bytes<span class="hl opt">;</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span> pos <span class="hl opt">&gt;</span> size <span class="hl opt">)</span>
         pos <span class="hl opt">-=</span> size<span class="hl opt">;</span>
   <span class="hl opt">}</span>
<span class="hl kwc">protected</span><span class="hl opt">:</span>
   <span class="hl kwb">char</span> <span class="hl opt">*</span>buffer<span class="hl opt">;</span>
   <span class="hl kwb">size_t</span> size<span class="hl opt">,</span> pos<span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl kwc">template</span><span class="hl opt">&lt;</span> <span class="hl kwc">class</span> Output <span class="hl opt">&gt;</span>
<span class="hl kwb">void</span> <span class="hl kwd">makeFasta</span><span class="hl opt">(</span> <span class="hl kwb">const char</span> <span class="hl opt">*</span>id<span class="hl opt">,</span> <span class="hl kwb">const char</span> <span class="hl opt">*</span>desc<span class="hl opt">,</span> <span class="hl kwb">size_t</span> N<span class="hl opt">,</span> Output <span class="hl opt">&amp;</span>output <span class="hl opt">) {</span>
   <span class="hl kwd">fprintf</span><span class="hl opt">(</span> stdout<span class="hl opt">,</span> <span class="hl str">&quot;&gt;%s %s</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> id<span class="hl opt">,</span> desc <span class="hl opt">);</span>

   <span class="hl kwa">while</span> <span class="hl opt">(</span> N <span class="hl opt">) {</span>
      <span class="hl kwb">const size_t</span> bytes <span class="hl opt">=</span> std<span class="hl opt">::</span><span class="hl kwd">min</span><span class="hl opt">(</span> N<span class="hl opt">,</span> lineLength <span class="hl opt">);</span>
      output<span class="hl opt">.</span><span class="hl kwd">writeline</span><span class="hl opt">(</span> bytes <span class="hl opt">);</span>
      N <span class="hl opt">-=</span> bytes<span class="hl opt">;</span>
   <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl kwb">struct</span> Repeater <span class="hl opt">{</span>
   <span class="hl kwd">Repeater</span><span class="hl opt">(</span> <span class="hl kwb">const char</span> <span class="hl opt">*</span>alu <span class="hl opt">) :</span> <span class="hl kwd">rot</span><span class="hl opt">(</span>alu<span class="hl opt">) {}</span>
   <span class="hl kwb">void</span> <span class="hl kwd">writeline</span><span class="hl opt">(</span> <span class="hl kwb">size_t</span> bytes <span class="hl opt">) {</span> rot<span class="hl opt">.</span><span class="hl kwd">write</span><span class="hl opt">(</span> bytes <span class="hl opt">); }</span>
   <span class="hl kwb">void</span> <span class="hl kwd">run</span><span class="hl opt">(</span> <span class="hl kwb">const char</span> <span class="hl opt">*</span>id<span class="hl opt">,</span> <span class="hl kwb">const char</span> <span class="hl opt">*</span>desc<span class="hl opt">,</span> <span class="hl kwb">size_t</span> N <span class="hl opt">) {</span>
      <span class="hl kwd">makeFasta</span><span class="hl opt">(</span> id<span class="hl opt">,</span> desc<span class="hl opt">,</span> N<span class="hl opt">, *</span><span class="hl kwa">this</span> <span class="hl opt">);</span>
   <span class="hl opt">}</span>
<span class="hl kwc">protected</span><span class="hl opt">:</span>
   RotatingString rot<span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl kwb">struct</span> Randomized <span class="hl opt">{</span>
   <span class="hl kwd">Randomized</span><span class="hl opt">(</span> IUB <span class="hl opt">*</span>start <span class="hl opt">) :</span> <span class="hl kwd">table</span><span class="hl opt">(</span>start<span class="hl opt">) {}</span>
   <span class="hl kwb">void</span> <span class="hl kwd">writeline</span><span class="hl opt">(</span> <span class="hl kwb">size_t</span> bytes <span class="hl opt">) {</span> line<span class="hl opt">.</span><span class="hl kwd">genrand</span><span class="hl opt">(</span>table<span class="hl opt">,</span> bytes<span class="hl opt">).</span><span class="hl kwd">writeline</span><span class="hl opt">(); }</span>
   <span class="hl kwb">void</span> <span class="hl kwd">run</span><span class="hl opt">(</span> <span class="hl kwb">const char</span> <span class="hl opt">*</span>id<span class="hl opt">,</span> <span class="hl kwb">const char</span> <span class="hl opt">*</span>desc<span class="hl opt">,</span> <span class="hl kwb">size_t</span> N <span class="hl opt">) {</span>
      <span class="hl kwd">makeFasta</span><span class="hl opt">(</span> id<span class="hl opt">,</span> desc<span class="hl opt">,</span> N<span class="hl opt">, *</span><span class="hl kwa">this</span> <span class="hl opt">);</span>
   <span class="hl opt">}</span>
<span class="hl kwc">protected</span><span class="hl opt">:</span>
   Cumulative table<span class="hl opt">;</span>
   LineBuffer line<span class="hl opt">;</span>
<span class="hl opt">};</span>

IUB iub<span class="hl opt">[] = {</span>
   <span class="hl opt">{</span> <span class="hl str">'a'</span><span class="hl opt">,</span> <span class="hl num">0.27</span> <span class="hl opt">},</span>
   <span class="hl opt">{</span> <span class="hl str">'c'</span><span class="hl opt">,</span> <span class="hl num">0.12</span> <span class="hl opt">},</span>
   <span class="hl opt">{</span> <span class="hl str">'g'</span><span class="hl opt">,</span> <span class="hl num">0.12</span> <span class="hl opt">},</span>
   <span class="hl opt">{</span> <span class="hl str">'t'</span><span class="hl opt">,</span> <span class="hl num">0.27</span> <span class="hl opt">},</span>

   <span class="hl opt">{</span> <span class="hl str">'B'</span><span class="hl opt">,</span> <span class="hl num">0.02</span> <span class="hl opt">},</span>
   <span class="hl opt">{</span> <span class="hl str">'D'</span><span class="hl opt">,</span> <span class="hl num">0.02</span> <span class="hl opt">},</span>
   <span class="hl opt">{</span> <span class="hl str">'H'</span><span class="hl opt">,</span> <span class="hl num">0.02</span> <span class="hl opt">},</span>
   <span class="hl opt">{</span> <span class="hl str">'K'</span><span class="hl opt">,</span> <span class="hl num">0.02</span> <span class="hl opt">},</span>
   <span class="hl opt">{</span> <span class="hl str">'M'</span><span class="hl opt">,</span> <span class="hl num">0.02</span> <span class="hl opt">},</span>
   <span class="hl opt">{</span> <span class="hl str">'N'</span><span class="hl opt">,</span> <span class="hl num">0.02</span> <span class="hl opt">},</span>
   <span class="hl opt">{</span> <span class="hl str">'R'</span><span class="hl opt">,</span> <span class="hl num">0.02</span> <span class="hl opt">},</span>
   <span class="hl opt">{</span> <span class="hl str">'S'</span><span class="hl opt">,</span> <span class="hl num">0.02</span> <span class="hl opt">},</span>
   <span class="hl opt">{</span> <span class="hl str">'V'</span><span class="hl opt">,</span> <span class="hl num">0.02</span> <span class="hl opt">},</span>
   <span class="hl opt">{</span> <span class="hl str">'W'</span><span class="hl opt">,</span> <span class="hl num">0.02</span> <span class="hl opt">},</span>
   <span class="hl opt">{</span> <span class="hl str">'Y'</span><span class="hl opt">,</span> <span class="hl num">0.02</span> <span class="hl opt">},</span>
   <span class="hl opt">{</span>   <span class="hl num">0</span><span class="hl opt">,</span>    <span class="hl num">0</span> <span class="hl opt">},</span>
<span class="hl opt">};</span>

IUB homosapiens<span class="hl opt">[] = {</span>
   <span class="hl opt">{</span> <span class="hl str">'a'</span><span class="hl opt">,</span> <span class="hl num">0.3029549426680</span> <span class="hl opt">},</span>
   <span class="hl opt">{</span> <span class="hl str">'c'</span><span class="hl opt">,</span> <span class="hl num">0.1979883004921</span> <span class="hl opt">},</span>
   <span class="hl opt">{</span> <span class="hl str">'g'</span><span class="hl opt">,</span> <span class="hl num">0.1975473066391</span> <span class="hl opt">},</span>
   <span class="hl opt">{</span> <span class="hl str">'t'</span><span class="hl opt">,</span> <span class="hl num">0.3015094502008</span> <span class="hl opt">},</span>
   <span class="hl opt">{</span>   <span class="hl num">0</span><span class="hl opt">,</span>               <span class="hl num">0</span> <span class="hl opt">},</span>
<span class="hl opt">};</span>

<span class="hl kwb">static const char</span> alu<span class="hl opt">[] =</span>
   <span class="hl str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTG&quot;</span>
   <span class="hl str">&quot;GGAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGA&quot;</span>
   <span class="hl str">&quot;GACCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAA&quot;</span>
   <span class="hl str">&quot;AATACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAAT&quot;</span>
   <span class="hl str">&quot;CCCAGCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAAC&quot;</span>
   <span class="hl str">&quot;CCGGGAGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTG&quot;</span>
   <span class="hl str">&quot;CACTCCAGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span><span class="hl opt">;</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span> <span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">const char</span> <span class="hl opt">*</span>argv<span class="hl opt">[] ) {</span>
   <span class="hl kwb">const size_t</span> n <span class="hl opt">= (</span> argc <span class="hl opt">&gt;</span> <span class="hl num">1</span> <span class="hl opt">)</span> ? <span class="hl kwd">atoi</span><span class="hl opt">(</span> argv<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">] ) :</span> <span class="hl num">512</span><span class="hl opt">;</span>

   <span class="hl kwd">Repeater</span><span class="hl opt">(</span>alu<span class="hl opt">)</span>
      <span class="hl opt">.</span><span class="hl kwd">run</span><span class="hl opt">(</span> <span class="hl str">&quot;ONE&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;Homo sapiens alu&quot;</span><span class="hl opt">,</span> n<span class="hl opt">*</span><span class="hl num">2</span> <span class="hl opt">);</span>
   <span class="hl kwd">Randomized</span><span class="hl opt">(</span>iub<span class="hl opt">)</span>
      <span class="hl opt">.</span><span class="hl kwd">run</span><span class="hl opt">(</span> <span class="hl str">&quot;TWO&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;IUB ambiguity codes&quot;</span><span class="hl opt">,</span> n<span class="hl opt">*</span><span class="hl num">3</span> <span class="hl opt">);</span>
   <span class="hl kwd">Randomized</span><span class="hl opt">(</span>homosapiens<span class="hl opt">)</span>
      <span class="hl opt">.</span><span class="hl kwd">run</span><span class="hl opt">(</span> <span class="hl str">&quot;THREE&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;Homo sapiens frequency&quot;</span><span class="hl opt">,</span> n<span class="hl opt">*</span><span class="hl num">5</span> <span class="hl opt">);</span>

   <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>

