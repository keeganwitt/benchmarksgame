<span class="hl slc"># The Computer Language Benchmarks Game</span>
<span class="hl slc"># http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc"># contributed by Klaus Friedel</span>
<span class="hl slc">#</span>

<span class="hl kwa">require</span> <span class="hl str">&quot;thread&quot;</span>

THREAD_COUNT <span class="hl opt">=</span> <span class="hl num">503</span>

<span class="hl kwa">class</span> Receiver
  <span class="hl kwb">&#64;next</span>
  <span class="hl kwb">&#64;mailbox</span>

  <span class="hl kwa">def</span> <span class="hl kwd">initialize</span><span class="hl opt">(</span>name)
    <span class="hl kwb">&#64;name</span> <span class="hl opt">=</span> name
    <span class="hl kwb">&#64;mailbox</span> <span class="hl opt">=</span> Queue<span class="hl opt">.</span>new
  <span class="hl kwa">end</span>

  <span class="hl kwa">def next</span><span class="hl opt">=(</span>n)
    <span class="hl kwb">&#64;next</span> <span class="hl opt">=</span> n
  <span class="hl kwa">end</span>

  <span class="hl kwa">def</span> <span class="hl kwd">put</span><span class="hl opt">(</span>msg)
    <span class="hl kwb">&#64;mailbox</span><span class="hl opt">.</span><span class="hl kwd">push</span><span class="hl opt">(</span>msg)
  <span class="hl kwa">end</span>

  <span class="hl kwa">def</span> messageloop
    <span class="hl kwa">while true</span>
      hopsRemaining <span class="hl opt">=</span> <span class="hl kwb">&#64;mailbox</span><span class="hl opt">.</span>pop
      <span class="hl kwa">if</span><span class="hl opt">(</span>hopsRemaining <span class="hl opt">==</span> <span class="hl num">0</span>)
        print <span class="hl kwb">&#64;name</span><span class="hl opt">,</span> <span class="hl str">&quot;\n&quot;</span>
        <span class="hl kwd">exit</span><span class="hl opt">(</span><span class="hl num">0</span>)
      <span class="hl kwa">end</span>
      <span class="hl kwb">&#64;next</span><span class="hl opt">.</span><span class="hl kwd">put</span><span class="hl opt">(</span>hopsRemaining <span class="hl opt">-</span> <span class="hl num">1</span>)
    <span class="hl kwa">end</span>
  <span class="hl kwa">end</span>
<span class="hl kwa">end</span>

<span class="hl slc">##########</span>
<span class="hl slc">#  Main  #</span>
<span class="hl slc">##########</span>
receivers <span class="hl opt">= []</span>
<span class="hl kwa">for</span> i <span class="hl kwa">in</span> <span class="hl num">0</span><span class="hl opt">..</span>THREAD_COUNT-1
  receivers<span class="hl opt">[</span>i<span class="hl opt">] =</span> Receiver<span class="hl opt">.</span><span class="hl kwd">new</span><span class="hl opt">(</span>i<span class="hl opt">+</span><span class="hl num">1</span>)
  <span class="hl kwa">if</span><span class="hl opt">(</span>i <span class="hl opt">&gt;</span> <span class="hl num">0</span>)
    receivers<span class="hl opt">[</span>i-1<span class="hl opt">].</span><span class="hl kwa">next</span> <span class="hl opt">=</span> receivers<span class="hl opt">[</span>i<span class="hl opt">]</span>
  <span class="hl kwa">end</span>
<span class="hl kwa">end</span>
<span class="hl slc">#close the ring</span>
receivers<span class="hl opt">[</span>THREAD_COUNT-1<span class="hl opt">].</span><span class="hl kwa">next</span> <span class="hl opt">=</span> receivers<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">]</span>

<span class="hl slc"># start the threads</span>
<span class="hl kwa">for</span> i <span class="hl kwa">in</span> <span class="hl num">0</span><span class="hl opt">..</span>THREAD_COUNT-1
  Thread<span class="hl opt">.</span><span class="hl kwd">start</span><span class="hl opt">(</span>i)<span class="hl esc">{|k| receivers[k].messageloop}</span>
<span class="hl kwa">end</span>

receivers<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">].</span><span class="hl kwd">put</span><span class="hl opt">(</span><span class="hl kwc">ARGV</span><span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">].</span>to_i)

sleep

