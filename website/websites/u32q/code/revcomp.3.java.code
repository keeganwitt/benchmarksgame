<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"> </span>
<span class="hl com">   contributed by Leonhard Holz</span>
<span class="hl com">   thanks to Anthony Donnefort for the basic mapping idea</span>
<span class="hl com">*/</span>

<span class="hl kwa">import</span> java<span class="hl opt">.</span>io<span class="hl opt">.</span>IOException<span class="hl opt">;</span>
<span class="hl kwa">import</span> java<span class="hl opt">.</span>util<span class="hl opt">.</span>ArrayList<span class="hl opt">;</span>
<span class="hl kwa">import</span> java<span class="hl opt">.</span>util<span class="hl opt">.</span>Collections<span class="hl opt">;</span>
<span class="hl kwa">import</span> java<span class="hl opt">.</span>util<span class="hl opt">.</span>LinkedList<span class="hl opt">;</span>
<span class="hl kwa">import</span> java<span class="hl opt">.</span>util<span class="hl opt">.</span>List<span class="hl opt">;</span>
<span class="hl kwa">import</span> java<span class="hl opt">.</span>util<span class="hl opt">.</span>concurrent<span class="hl opt">.</span>ExecutorService<span class="hl opt">;</span>
<span class="hl kwa">import</span> java<span class="hl opt">.</span>util<span class="hl opt">.</span>concurrent<span class="hl opt">.</span>Executors<span class="hl opt">;</span>

<span class="hl kwa">public class</span> revcomp
<span class="hl opt">{</span>
   <span class="hl kwa">private static final</span> <span class="hl kwb">byte</span><span class="hl opt">[]</span> map <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwb">byte</span><span class="hl opt">[</span><span class="hl num">256</span><span class="hl opt">];</span>      
   <span class="hl kwa">private static final</span> <span class="hl kwb">int</span> CHUNK_SIZE <span class="hl opt">=</span> <span class="hl num">1024</span> <span class="hl opt">*</span> <span class="hl num">1024</span> <span class="hl opt">*</span> <span class="hl num">16</span><span class="hl opt">;</span>
   <span class="hl kwa">private static final</span> <span class="hl kwb">int</span> NUMBER_OF_CORES <span class="hl opt">=</span> Runtime<span class="hl opt">.</span><span class="hl kwd">getRuntime</span><span class="hl opt">().</span><span class="hl kwd">availableProcessors</span><span class="hl opt">();</span>
   <span class="hl kwa">private static final</span> ExecutorService service <span class="hl opt">=</span> Executors<span class="hl opt">.</span><span class="hl kwd">newFixedThreadPool</span><span class="hl opt">(</span>NUMBER_OF_CORES<span class="hl opt">);</span>
   <span class="hl kwa">private static final</span> List<span class="hl opt">&lt;</span><span class="hl kwb">byte</span><span class="hl opt">[]&gt;</span> list <span class="hl opt">=</span> Collections<span class="hl opt">.</span><span class="hl kwd">synchronizedList</span><span class="hl opt">(</span><span class="hl kwa">new</span> ArrayList<span class="hl opt">&lt;</span><span class="hl kwb">byte</span><span class="hl opt">[]&gt;());</span>

   <span class="hl kwa">static</span> <span class="hl opt">{</span>
      <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> map<span class="hl opt">.</span>length<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
         map<span class="hl opt">[</span>i<span class="hl opt">] = (</span><span class="hl kwb">byte</span><span class="hl opt">)</span> i<span class="hl opt">;</span>
      <span class="hl opt">}</span>
       map<span class="hl opt">[</span><span class="hl str">'t'</span><span class="hl opt">] =</span> map<span class="hl opt">[</span><span class="hl str">'T'</span><span class="hl opt">] =</span> <span class="hl str">'A'</span><span class="hl opt">;</span>
       map<span class="hl opt">[</span><span class="hl str">'a'</span><span class="hl opt">] =</span> map<span class="hl opt">[</span><span class="hl str">'A'</span><span class="hl opt">] =</span> <span class="hl str">'T'</span><span class="hl opt">;</span>
       map<span class="hl opt">[</span><span class="hl str">'g'</span><span class="hl opt">] =</span> map<span class="hl opt">[</span><span class="hl str">'G'</span><span class="hl opt">] =</span> <span class="hl str">'C'</span><span class="hl opt">;</span>
       map<span class="hl opt">[</span><span class="hl str">'c'</span><span class="hl opt">] =</span> map<span class="hl opt">[</span><span class="hl str">'C'</span><span class="hl opt">] =</span> <span class="hl str">'G'</span><span class="hl opt">;</span>
       map<span class="hl opt">[</span><span class="hl str">'v'</span><span class="hl opt">] =</span> map<span class="hl opt">[</span><span class="hl str">'V'</span><span class="hl opt">] =</span> <span class="hl str">'B'</span><span class="hl opt">;</span>
       map<span class="hl opt">[</span><span class="hl str">'h'</span><span class="hl opt">] =</span> map<span class="hl opt">[</span><span class="hl str">'H'</span><span class="hl opt">] =</span> <span class="hl str">'D'</span><span class="hl opt">;</span>
       map<span class="hl opt">[</span><span class="hl str">'r'</span><span class="hl opt">] =</span> map<span class="hl opt">[</span><span class="hl str">'R'</span><span class="hl opt">] =</span> <span class="hl str">'Y'</span><span class="hl opt">;</span>
       map<span class="hl opt">[</span><span class="hl str">'m'</span><span class="hl opt">] =</span> map<span class="hl opt">[</span><span class="hl str">'M'</span><span class="hl opt">] =</span> <span class="hl str">'K'</span><span class="hl opt">;</span>
       map<span class="hl opt">[</span><span class="hl str">'y'</span><span class="hl opt">] =</span> map<span class="hl opt">[</span><span class="hl str">'Y'</span><span class="hl opt">] =</span> <span class="hl str">'R'</span><span class="hl opt">;</span>
       map<span class="hl opt">[</span><span class="hl str">'k'</span><span class="hl opt">] =</span> map<span class="hl opt">[</span><span class="hl str">'K'</span><span class="hl opt">] =</span> <span class="hl str">'M'</span><span class="hl opt">;</span>
       map<span class="hl opt">[</span><span class="hl str">'b'</span><span class="hl opt">] =</span> map<span class="hl opt">[</span><span class="hl str">'B'</span><span class="hl opt">] =</span> <span class="hl str">'V'</span><span class="hl opt">;</span>
       map<span class="hl opt">[</span><span class="hl str">'d'</span><span class="hl opt">] =</span> map<span class="hl opt">[</span><span class="hl str">'D'</span><span class="hl opt">] =</span> <span class="hl str">'H'</span><span class="hl opt">;</span>
       map<span class="hl opt">[</span><span class="hl str">'u'</span><span class="hl opt">] =</span> map<span class="hl opt">[</span><span class="hl str">'U'</span><span class="hl opt">] =</span> <span class="hl str">'A'</span><span class="hl opt">;</span>
   <span class="hl opt">}</span>

   <span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">main</span><span class="hl opt">(</span>String<span class="hl opt">[]</span> args<span class="hl opt">)</span> <span class="hl kwa">throws</span> IOException
   <span class="hl opt">{</span>
      <span class="hl kwb">int</span> read<span class="hl opt">;</span>
      <span class="hl kwb">byte</span><span class="hl opt">[]</span> buffer<span class="hl opt">;</span>
      Finder lastFinder <span class="hl opt">=</span> null<span class="hl opt">;</span> 
      
      <span class="hl kwa">do</span> <span class="hl opt">{</span>
         buffer <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwb">byte</span><span class="hl opt">[</span>CHUNK_SIZE<span class="hl opt">];</span>
         read <span class="hl opt">=</span> System<span class="hl opt">.</span><span class="hl kwa">in</span><span class="hl opt">.</span><span class="hl kwd">read</span><span class="hl opt">(</span>buffer<span class="hl opt">);</span>
         list<span class="hl opt">.</span><span class="hl kwd">add</span><span class="hl opt">(</span>buffer<span class="hl opt">);</span>

         Finder finder <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Finder</span><span class="hl opt">(</span>buffer<span class="hl opt">,</span> read<span class="hl opt">,</span> lastFinder<span class="hl opt">);</span>
         service<span class="hl opt">.</span><span class="hl kwd">execute</span><span class="hl opt">(</span>finder<span class="hl opt">);</span>
         lastFinder <span class="hl opt">=</span> finder<span class="hl opt">;</span>

      <span class="hl opt">}</span> <span class="hl kwa">while</span> <span class="hl opt">(</span>read <span class="hl opt">==</span> CHUNK_SIZE<span class="hl opt">);</span>

      Status status <span class="hl opt">=</span> lastFinder<span class="hl opt">.</span><span class="hl kwd">finish</span><span class="hl opt">();</span>
      Mapper mapper <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Mapper</span><span class="hl opt">(</span>status<span class="hl opt">.</span>lastFinding<span class="hl opt">,</span> status<span class="hl opt">.</span>count <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">,</span> status<span class="hl opt">.</span>lastMapper<span class="hl opt">);</span>
      service<span class="hl opt">.</span><span class="hl kwd">execute</span><span class="hl opt">(</span>mapper<span class="hl opt">);</span>

      service<span class="hl opt">.</span><span class="hl kwd">shutdown</span><span class="hl opt">();</span>
   <span class="hl opt">}</span>

   <span class="hl kwa">private static final class</span> Status
   <span class="hl opt">{</span>
      <span class="hl kwa">private</span> <span class="hl kwb">int</span> count <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
      <span class="hl kwa">private</span> <span class="hl kwb">int</span> lastFinding <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
      <span class="hl kwa">private</span> Mapper lastMapper <span class="hl opt">=</span> null<span class="hl opt">;</span>
   <span class="hl opt">}</span>
   
   <span class="hl kwa">private static final class</span> Finder <span class="hl kwa">implements</span> Runnable
   <span class="hl opt">{</span>
      <span class="hl kwa">private</span> <span class="hl kwb">int</span> size<span class="hl opt">;</span>
      <span class="hl kwa">private</span> <span class="hl kwb">byte</span><span class="hl opt">[]</span> a<span class="hl opt">;</span>
      <span class="hl kwa">private</span> Status status<span class="hl opt">;</span>
      <span class="hl kwa">private</span> Finder previous<span class="hl opt">;</span>
      <span class="hl kwa">private</span> <span class="hl kwb">boolean</span> done <span class="hl opt">=</span> false<span class="hl opt">;</span>
      
      <span class="hl kwa">public</span> <span class="hl kwd">Finder</span><span class="hl opt">(</span><span class="hl kwb">byte</span><span class="hl opt">[]</span> a<span class="hl opt">,</span> <span class="hl kwb">int</span> size<span class="hl opt">,</span> Finder previous<span class="hl opt">)</span>
      <span class="hl opt">{</span>
         <span class="hl kwa">this</span><span class="hl opt">.</span>a <span class="hl opt">=</span> a<span class="hl opt">;</span>
         <span class="hl kwa">this</span><span class="hl opt">.</span>size <span class="hl opt">=</span> size<span class="hl opt">;</span>
         <span class="hl kwa">this</span><span class="hl opt">.</span>previous <span class="hl opt">=</span> previous<span class="hl opt">;</span>
      <span class="hl opt">}</span>
      
      <span class="hl kwa">public</span> Status <span class="hl kwd">finish</span><span class="hl opt">()</span>
      <span class="hl opt">{</span>
         <span class="hl kwa">while</span> <span class="hl opt">(!</span>done<span class="hl opt">)</span> <span class="hl kwa">try</span> <span class="hl opt">{</span>
            Thread<span class="hl opt">.</span><span class="hl kwd">sleep</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">);</span>
         <span class="hl opt">}</span> <span class="hl kwa">catch</span> <span class="hl opt">(</span>InterruptedException e<span class="hl opt">) {</span>
            <span class="hl slc">// ignored</span>
         <span class="hl opt">}</span>
         <span class="hl kwa">return</span> status<span class="hl opt">;</span>
      <span class="hl opt">}</span>

      <span class="hl kwa">public</span> <span class="hl kwb">void</span> <span class="hl kwd">run</span><span class="hl opt">()</span>
      <span class="hl opt">{</span>
         LinkedList<span class="hl opt">&lt;</span>Integer<span class="hl opt">&gt;</span> findings <span class="hl opt">=</span> <span class="hl kwa">new</span> LinkedList<span class="hl opt">&lt;</span>Integer<span class="hl opt">&gt;();</span>

         <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> size<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>a<span class="hl opt">[</span>i<span class="hl opt">] ==</span> <span class="hl str">'&gt;'</span><span class="hl opt">) {</span>
               findings<span class="hl opt">.</span><span class="hl kwd">add</span><span class="hl opt">(</span>i<span class="hl opt">);</span>
            <span class="hl opt">}</span>
         <span class="hl opt">}</span>
      
         <span class="hl kwa">if</span> <span class="hl opt">(</span>previous <span class="hl opt">==</span> null<span class="hl opt">) {</span>
            status <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Status</span><span class="hl opt">();</span>
         <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
            status <span class="hl opt">=</span> previous<span class="hl opt">.</span><span class="hl kwd">finish</span><span class="hl opt">();</span>
            findings<span class="hl opt">.</span><span class="hl kwd">add</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> status<span class="hl opt">.</span>lastFinding<span class="hl opt">);</span>
            <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> findings<span class="hl opt">.</span><span class="hl kwd">size</span><span class="hl opt">();</span> i<span class="hl opt">++) {</span>
               findings<span class="hl opt">.</span><span class="hl kwd">set</span><span class="hl opt">(</span>i<span class="hl opt">,</span> findings<span class="hl opt">.</span><span class="hl kwd">get</span><span class="hl opt">(</span>i<span class="hl opt">) +</span> status<span class="hl opt">.</span>count<span class="hl opt">);</span>
            <span class="hl opt">}</span>
         <span class="hl opt">}</span>
      
         <span class="hl kwa">if</span> <span class="hl opt">(</span>findings<span class="hl opt">.</span><span class="hl kwd">size</span><span class="hl opt">() &gt;</span> <span class="hl num">1</span><span class="hl opt">)</span> <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> findings<span class="hl opt">.</span><span class="hl kwd">size</span><span class="hl opt">() -</span> <span class="hl num">1</span><span class="hl opt">;</span> i<span class="hl opt">++) {</span>
            status<span class="hl opt">.</span>lastMapper <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Mapper</span><span class="hl opt">(</span>findings<span class="hl opt">.</span><span class="hl kwd">get</span><span class="hl opt">(</span>i<span class="hl opt">),</span> findings<span class="hl opt">.</span><span class="hl kwd">get</span><span class="hl opt">(</span>i <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">) -</span> <span class="hl num">1</span><span class="hl opt">,</span> status<span class="hl opt">.</span>lastMapper<span class="hl opt">);</span>
            service<span class="hl opt">.</span><span class="hl kwd">execute</span><span class="hl opt">(</span>status<span class="hl opt">.</span>lastMapper<span class="hl opt">);</span>
         <span class="hl opt">}</span>
         
         status<span class="hl opt">.</span>lastFinding <span class="hl opt">=</span> findings<span class="hl opt">.</span><span class="hl kwd">get</span><span class="hl opt">(</span>findings<span class="hl opt">.</span><span class="hl kwd">size</span><span class="hl opt">() -</span> <span class="hl num">1</span><span class="hl opt">);</span>
         status<span class="hl opt">.</span>count <span class="hl opt">+=</span> size<span class="hl opt">;</span>
         done <span class="hl opt">=</span> true<span class="hl opt">;</span>
      <span class="hl opt">}</span>
   <span class="hl opt">}</span>
   
   <span class="hl kwa">private static final class</span> Mapper <span class="hl kwa">implements</span> Runnable
   <span class="hl opt">{</span>
      <span class="hl kwa">private</span> <span class="hl kwb">int</span> end<span class="hl opt">;</span>
      <span class="hl kwa">private</span> <span class="hl kwb">int</span> start<span class="hl opt">;</span>
      <span class="hl kwa">private</span> Mapper previous<span class="hl opt">;</span>
      <span class="hl kwa">private</span> <span class="hl kwb">boolean</span> done <span class="hl opt">=</span> false<span class="hl opt">;</span>
      
      <span class="hl kwa">public</span> <span class="hl kwd">Mapper</span><span class="hl opt">(</span><span class="hl kwb">int</span> start<span class="hl opt">,</span> <span class="hl kwb">int</span> end<span class="hl opt">,</span> Mapper previous<span class="hl opt">)</span>
      <span class="hl opt">{</span>
         <span class="hl kwa">this</span><span class="hl opt">.</span>end <span class="hl opt">=</span> end<span class="hl opt">;</span>
         <span class="hl kwa">this</span><span class="hl opt">.</span>start <span class="hl opt">=</span> start<span class="hl opt">;</span>
         <span class="hl kwa">this</span><span class="hl opt">.</span>previous <span class="hl opt">=</span> previous<span class="hl opt">;</span>
      <span class="hl opt">}</span>
      
      <span class="hl kwa">public</span> <span class="hl kwb">void</span> <span class="hl kwd">finish</span><span class="hl opt">()</span>
      <span class="hl opt">{</span>
         <span class="hl kwa">while</span> <span class="hl opt">(!</span>done<span class="hl opt">)</span> <span class="hl kwa">try</span> <span class="hl opt">{</span>
            Thread<span class="hl opt">.</span><span class="hl kwd">sleep</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">);</span>
         <span class="hl opt">}</span> <span class="hl kwa">catch</span> <span class="hl opt">(</span>InterruptedException e<span class="hl opt">) {</span>
            <span class="hl slc">// ignored</span>
         <span class="hl opt">}</span>
      <span class="hl opt">}</span>

      <span class="hl kwa">public</span> <span class="hl kwb">void</span> <span class="hl kwd">run</span><span class="hl opt">()</span>
      <span class="hl opt">{</span>
         <span class="hl kwb">int</span><span class="hl opt">[]</span> positions <span class="hl opt">=</span> <span class="hl kwd">find</span><span class="hl opt">(</span>list<span class="hl opt">,</span> start<span class="hl opt">,</span> end<span class="hl opt">);</span>
         
         <span class="hl kwb">int</span> lp1 <span class="hl opt">=</span> positions<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">];</span>
         <span class="hl kwb">byte</span><span class="hl opt">[]</span> tob <span class="hl opt">=</span> list<span class="hl opt">.</span><span class="hl kwd">get</span><span class="hl opt">(</span>lp1<span class="hl opt">);</span>

         <span class="hl kwb">int</span> lp2 <span class="hl opt">=</span> positions<span class="hl opt">[</span><span class="hl num">2</span><span class="hl opt">];</span>
         <span class="hl kwb">byte</span><span class="hl opt">[]</span> bot <span class="hl opt">=</span> list<span class="hl opt">.</span><span class="hl kwd">get</span><span class="hl opt">(</span>lp2<span class="hl opt">);</span>
         
         <span class="hl kwb">int</span> p1 <span class="hl opt">=</span> positions<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">];</span>
         <span class="hl kwa">while</span> <span class="hl opt">(</span>tob<span class="hl opt">[</span>p1<span class="hl opt">] !=</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl opt">)</span> p1<span class="hl opt">++;</span>

         <span class="hl kwb">int</span> p2 <span class="hl opt">=</span> positions<span class="hl opt">[</span><span class="hl num">3</span><span class="hl opt">];</span>
      
         <span class="hl kwa">while</span> <span class="hl opt">(</span>lp1 <span class="hl opt">&lt;</span> lp2 <span class="hl opt">||</span> p1 <span class="hl opt">&lt;</span> p2<span class="hl opt">) {</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>tob<span class="hl opt">[</span>p1<span class="hl opt">] ==</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl opt">) {</span>
               p1<span class="hl opt">++;</span>
            <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span>bot<span class="hl opt">[</span>p2<span class="hl opt">] ==</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl opt">) {</span>
               p2<span class="hl opt">--;</span>
            <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
               <span class="hl kwb">byte</span> tmp <span class="hl opt">=</span> tob<span class="hl opt">[</span>p1<span class="hl opt">];</span>
               tob<span class="hl opt">[</span>p1<span class="hl opt">] =</span> map<span class="hl opt">[</span>bot<span class="hl opt">[</span>p2<span class="hl opt">]];</span>
               bot<span class="hl opt">[</span>p2<span class="hl opt">] =</span> map<span class="hl opt">[</span>tmp<span class="hl opt">];</span>
               p1<span class="hl opt">++;</span>
               p2<span class="hl opt">--;</span>
            <span class="hl opt">}</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>p1 <span class="hl opt">==</span> tob<span class="hl opt">.</span>length<span class="hl opt">) {</span>
               lp1<span class="hl opt">++;</span>
               tob <span class="hl opt">=</span> list<span class="hl opt">.</span><span class="hl kwd">get</span><span class="hl opt">(</span>lp1<span class="hl opt">);</span>
               p1 <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
            <span class="hl opt">}</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>p2 <span class="hl opt">== -</span><span class="hl num">1</span><span class="hl opt">) {</span>
               lp2<span class="hl opt">--;</span>
               bot <span class="hl opt">=</span> list<span class="hl opt">.</span><span class="hl kwd">get</span><span class="hl opt">(</span>lp2<span class="hl opt">);</span>
               p2 <span class="hl opt">=</span> bot<span class="hl opt">.</span>length <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">;</span>
            <span class="hl opt">}</span>
         <span class="hl opt">}</span>

         <span class="hl kwa">if</span> <span class="hl opt">(</span>previous <span class="hl opt">!=</span> null<span class="hl opt">) {</span>
            previous<span class="hl opt">.</span><span class="hl kwd">finish</span><span class="hl opt">();</span>
         <span class="hl opt">}</span>

         <span class="hl kwd">write</span><span class="hl opt">(</span>list<span class="hl opt">,</span> positions<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">],</span> positions<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">],</span> positions<span class="hl opt">[</span><span class="hl num">2</span><span class="hl opt">],</span> positions<span class="hl opt">[</span><span class="hl num">3</span><span class="hl opt">]);</span>
         done <span class="hl opt">=</span> true<span class="hl opt">;</span>
      <span class="hl opt">}</span>
   <span class="hl opt">}</span>

   <span class="hl kwa">private static</span> <span class="hl kwb">void</span> <span class="hl kwd">write</span><span class="hl opt">(</span>List<span class="hl opt">&lt;</span><span class="hl kwb">byte</span><span class="hl opt">[]&gt;</span> list<span class="hl opt">,</span> <span class="hl kwb">int</span> lpStart<span class="hl opt">,</span> <span class="hl kwb">int</span> start<span class="hl opt">,</span> <span class="hl kwb">int</span> lpEnd<span class="hl opt">,</span> <span class="hl kwb">int</span> end<span class="hl opt">)</span>
   <span class="hl opt">{</span>
      <span class="hl kwb">byte</span><span class="hl opt">[]</span> a <span class="hl opt">=</span> list<span class="hl opt">.</span><span class="hl kwd">get</span><span class="hl opt">(</span>lpStart<span class="hl opt">);</span>
      <span class="hl kwa">while</span> <span class="hl opt">(</span>lpStart <span class="hl opt">&lt;</span> lpEnd<span class="hl opt">) {</span>
         System<span class="hl opt">.</span>out<span class="hl opt">.</span><span class="hl kwd">write</span><span class="hl opt">(</span>a<span class="hl opt">,</span> start<span class="hl opt">,</span> a<span class="hl opt">.</span>length <span class="hl opt">-</span> start<span class="hl opt">);</span>
         lpStart<span class="hl opt">++;</span>
         a <span class="hl opt">=</span> list<span class="hl opt">.</span><span class="hl kwd">get</span><span class="hl opt">(</span>lpStart<span class="hl opt">);</span>
         start <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
      <span class="hl opt">}</span>
      System<span class="hl opt">.</span>out<span class="hl opt">.</span><span class="hl kwd">write</span><span class="hl opt">(</span>a<span class="hl opt">,</span> start<span class="hl opt">,</span> end <span class="hl opt">-</span> start <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">);</span>
   <span class="hl opt">}</span>
   
   <span class="hl kwa">private static</span> <span class="hl kwb">int</span><span class="hl opt">[]</span> <span class="hl kwd">find</span><span class="hl opt">(</span>List<span class="hl opt">&lt;</span><span class="hl kwb">byte</span><span class="hl opt">[]&gt;</span> list<span class="hl opt">,</span> <span class="hl kwb">int</span> start<span class="hl opt">,</span> <span class="hl kwb">int</span> end<span class="hl opt">)</span>
   <span class="hl opt">{</span>
      <span class="hl kwb">int</span> n <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">,</span> lp <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
      <span class="hl kwb">int</span><span class="hl opt">[]</span> result <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwb">int</span><span class="hl opt">[</span><span class="hl num">4</span><span class="hl opt">];</span>
      <span class="hl kwb">boolean</span> foundStart <span class="hl opt">=</span> false<span class="hl opt">;</span>

      <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">byte</span><span class="hl opt">[]</span> bytes <span class="hl opt">:</span> list<span class="hl opt">) {</span>
         <span class="hl kwa">if</span> <span class="hl opt">(!</span>foundStart <span class="hl opt">&amp;&amp;</span> n <span class="hl opt">+</span> bytes<span class="hl opt">.</span>length <span class="hl opt">&gt;</span> start<span class="hl opt">) {</span>
            result<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] =</span> lp<span class="hl opt">;</span>
            result<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">] =</span> start <span class="hl opt">-</span> n<span class="hl opt">;</span>
            foundStart <span class="hl opt">=</span> true<span class="hl opt">;</span>
         <span class="hl opt">}</span>
         <span class="hl kwa">if</span> <span class="hl opt">(</span>foundStart <span class="hl opt">&amp;&amp;</span> n <span class="hl opt">+</span> bytes<span class="hl opt">.</span>length <span class="hl opt">&gt;</span> end<span class="hl opt">) {</span>
            result<span class="hl opt">[</span><span class="hl num">2</span><span class="hl opt">] =</span> lp<span class="hl opt">;</span>
            result<span class="hl opt">[</span><span class="hl num">3</span><span class="hl opt">] =</span> end <span class="hl opt">-</span> n<span class="hl opt">;</span>
            <span class="hl kwa">break</span><span class="hl opt">;</span>
         <span class="hl opt">}</span>
         n <span class="hl opt">+=</span> bytes<span class="hl opt">.</span>length<span class="hl opt">;</span>
         lp<span class="hl opt">++;</span>
      <span class="hl opt">}</span>
      <span class="hl kwa">return</span> result<span class="hl opt">;</span>
   <span class="hl opt">}</span>   
<span class="hl opt">}</span>
