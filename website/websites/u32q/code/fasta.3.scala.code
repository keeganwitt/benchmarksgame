<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com">  based on original contributed by Isaac Gouy</span>
<span class="hl com">  updated for 2.9 and optimized by Rex Kerr</span>
<span class="hl com">*/</span>

<span class="hl kwa">import</span> java<span class="hl opt">.</span>io<span class="hl opt">.</span>_

<span class="hl kwa">object</span> fasta <span class="hl opt">{</span>
  <span class="hl kwa">val</span> ALU <span class="hl opt">=</span>
   <span class="hl opt">(</span><span class="hl str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span> <span class="hl opt">+</span>
    <span class="hl str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span> <span class="hl opt">+</span>
    <span class="hl str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span> <span class="hl opt">+</span>
    <span class="hl str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span> <span class="hl opt">+</span>
    <span class="hl str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span> <span class="hl opt">+</span>
    <span class="hl str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span> <span class="hl opt">+</span>
    <span class="hl str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span><span class="hl opt">).</span>getBytes

  <span class="hl kwa">val</span> IUB <span class="hl opt">= (</span>
    <span class="hl str">&quot;acgtBDHKMNRSVWY&quot;</span><span class="hl opt">.</span>getBytes<span class="hl opt">,</span>
    <span class="hl opt">(</span><span class="hl kwd">Array</span><span class="hl opt">(</span><span class="hl num">0.27</span><span class="hl opt">,</span><span class="hl num">0.12</span><span class="hl opt">,</span><span class="hl num">0.12</span><span class="hl opt">,</span><span class="hl num">0.27</span><span class="hl opt">) ++</span> Array<span class="hl opt">.</span><span class="hl kwd">fill</span><span class="hl opt">(</span><span class="hl num">11</span><span class="hl opt">)(</span><span class="hl num">0.02</span><span class="hl opt">)).</span><span class="hl kwd">scanLeft</span><span class="hl opt">(</span><span class="hl num">0</span>d<span class="hl opt">)(</span>_<span class="hl opt">+</span>_<span class="hl opt">).</span>tail
  <span class="hl opt">)</span>
  <span class="hl kwa">val</span> HomoSapiens <span class="hl opt">= (</span>
    <span class="hl str">&quot;acgt&quot;</span><span class="hl opt">.</span>getBytes<span class="hl opt">,</span>
    <span class="hl kwd">Array</span><span class="hl opt">(</span><span class="hl num">0.3029549426680</span><span class="hl opt">,</span> <span class="hl num">0.1979883004921</span><span class="hl opt">,</span> <span class="hl num">0.1975473066391</span><span class="hl opt">,</span> <span class="hl num">0.3015094502008</span><span class="hl opt">).</span>
      <span class="hl kwd">scanLeft</span><span class="hl opt">(</span><span class="hl num">0</span>d<span class="hl opt">)(</span>_<span class="hl opt">+</span>_<span class="hl opt">).</span>tail
  <span class="hl opt">)</span>

  <span class="hl kwa">def</span> <span class="hl kwd">main</span><span class="hl opt">(</span>args<span class="hl opt">:</span> Array<span class="hl opt">[</span>String<span class="hl opt">]) = {</span>
    <span class="hl kwa">val</span> n <span class="hl opt">=</span> <span class="hl kwd">args</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">).</span>toInt
    <span class="hl kwa">val</span> s <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">FastaOutputStream</span><span class="hl opt">(</span>System<span class="hl opt">.</span>out<span class="hl opt">)</span>

    s<span class="hl opt">.</span><span class="hl kwd">writeDescription</span><span class="hl opt">(</span><span class="hl str">&quot;ONE Homo sapiens alu&quot;</span><span class="hl opt">)</span>
    s<span class="hl opt">.</span><span class="hl kwd">writeRepeating</span><span class="hl opt">(</span>ALU<span class="hl opt">,</span>n<span class="hl opt">*</span><span class="hl num">2</span><span class="hl opt">)</span>

    s<span class="hl opt">.</span><span class="hl kwd">writeDescription</span><span class="hl opt">(</span><span class="hl str">&quot;TWO IUB ambiguity codes&quot;</span><span class="hl opt">)</span>
    s<span class="hl opt">.</span><span class="hl kwd">writeRandom</span><span class="hl opt">(</span>IUB<span class="hl opt">,</span>n<span class="hl opt">*</span><span class="hl num">3</span><span class="hl opt">)</span>

    s<span class="hl opt">.</span><span class="hl kwd">writeDescription</span><span class="hl opt">(</span><span class="hl str">&quot;THREE Homo sapiens frequency&quot;</span><span class="hl opt">)</span>
    s<span class="hl opt">.</span><span class="hl kwd">writeRandom</span><span class="hl opt">(</span>HomoSapiens<span class="hl opt">,</span>n<span class="hl opt">*</span><span class="hl num">5</span><span class="hl opt">)</span>

    s<span class="hl opt">.</span>close
  <span class="hl opt">}</span>
<span class="hl opt">}</span>


<span class="hl slc">// Extend the Java BufferedOutputStream class</span>

<span class="hl kwa">class</span> <span class="hl kwd">FastaOutputStream</span><span class="hl opt">(</span>out<span class="hl opt">:</span> OutputStream<span class="hl opt">)</span> <span class="hl kwa">extends</span> <span class="hl kwd">BufferedOutputStream</span><span class="hl opt">(</span>out<span class="hl opt">) {</span>
  <span class="hl kwa">private final val</span> LineLength <span class="hl opt">=</span> <span class="hl num">60</span>
  <span class="hl kwa">private final val</span> nl <span class="hl opt">=</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl opt">.</span>toByte

  <span class="hl kwa">def</span> <span class="hl kwd">writeDescription</span><span class="hl opt">(</span>desc<span class="hl opt">:</span> String<span class="hl opt">) = {</span> <span class="hl kwd">write</span><span class="hl opt">( (</span><span class="hl str">&quot;&gt;&quot;</span> <span class="hl opt">+</span> desc <span class="hl opt">+</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">).</span>getBytes <span class="hl opt">) }</span>

  <span class="hl kwa">def</span> <span class="hl kwd">writeRepeating</span><span class="hl opt">(</span>alu<span class="hl opt">:</span> Array<span class="hl opt">[</span>Byte<span class="hl opt">],</span> length<span class="hl opt">:</span> Int<span class="hl opt">) = {</span>
    <span class="hl kwa">var</span> n <span class="hl opt">=</span> length
    <span class="hl kwa">var</span> k <span class="hl opt">=</span> <span class="hl num">0</span>
    <span class="hl kwa">val</span> kn <span class="hl opt">=</span> alu<span class="hl opt">.</span>length<span class="hl opt">;</span>

    <span class="hl kwa">while</span> <span class="hl opt">(</span>n <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">) {</span>
      <span class="hl kwa">val</span> m <span class="hl opt">=</span> <span class="hl kwa">if</span> <span class="hl opt">(</span>n <span class="hl opt">&lt;</span> LineLength<span class="hl opt">)</span> n <span class="hl kwa">else</span> LineLength

      <span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span>
      <span class="hl kwa">while</span> <span class="hl opt">(</span>i <span class="hl opt">&lt;</span> m<span class="hl opt">){</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>k <span class="hl opt">==</span> kn<span class="hl opt">)</span> k <span class="hl opt">=</span> <span class="hl num">0</span>
        <span class="hl kwa">val</span> b <span class="hl opt">=</span> <span class="hl kwd">alu</span><span class="hl opt">(</span>k<span class="hl opt">)</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>count <span class="hl opt">&lt;</span> buf<span class="hl opt">.</span>length<span class="hl opt">){</span> <span class="hl kwd">buf</span><span class="hl opt">(</span>count<span class="hl opt">) =</span> b<span class="hl opt">;</span> count <span class="hl opt">+=</span> <span class="hl num">1</span> <span class="hl opt">}</span>
        <span class="hl kwa">else</span> <span class="hl opt">{</span> <span class="hl kwd">write</span><span class="hl opt">(</span>b<span class="hl opt">) }</span> <span class="hl slc">// flush buffer</span>
        k <span class="hl opt">+=</span> <span class="hl num">1</span>
        i <span class="hl opt">+=</span> <span class="hl num">1</span>
      <span class="hl opt">}</span>

      <span class="hl kwd">write</span><span class="hl opt">(</span>nl<span class="hl opt">)</span>
      n <span class="hl opt">-=</span> LineLength
    <span class="hl opt">}</span>
  <span class="hl opt">}</span>

  <span class="hl kwa">def</span> <span class="hl kwd">writeRandom</span><span class="hl opt">(</span>distribution<span class="hl opt">: (</span>Array<span class="hl opt">[</span>Byte<span class="hl opt">],</span> Array<span class="hl opt">[</span>Double<span class="hl opt">]),</span> length<span class="hl opt">:</span> Int<span class="hl opt">) = {</span>
    <span class="hl kwa">val</span> <span class="hl opt">(</span>bytes<span class="hl opt">,</span> cuml<span class="hl opt">) =</span> distribution
    <span class="hl kwa">var</span> n <span class="hl opt">=</span> length
    <span class="hl kwa">while</span> <span class="hl opt">(</span>n <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">) {</span>
      <span class="hl kwa">val</span> m <span class="hl opt">=</span> <span class="hl kwa">if</span> <span class="hl opt">(</span>n <span class="hl opt">&lt;</span> LineLength<span class="hl opt">)</span> n <span class="hl kwa">else</span> LineLength

      <span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span>
      <span class="hl kwa">while</span> <span class="hl opt">(</span>i <span class="hl opt">&lt;</span> m<span class="hl opt">){</span>
        <span class="hl kwa">val</span> b <span class="hl opt">=</span> <span class="hl kwd">bytes</span><span class="hl opt">(</span><span class="hl kwd">selectRandom</span><span class="hl opt">(</span>cuml<span class="hl opt">))</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>count <span class="hl opt">&lt;</span> buf<span class="hl opt">.</span>length<span class="hl opt">) {</span> <span class="hl kwd">buf</span><span class="hl opt">(</span>count<span class="hl opt">) =</span> b<span class="hl opt">;</span> count <span class="hl opt">+=</span> <span class="hl num">1</span> <span class="hl opt">}</span>
        <span class="hl kwa">else</span> <span class="hl opt">{</span> <span class="hl kwd">write</span><span class="hl opt">(</span>b<span class="hl opt">) }</span> <span class="hl slc">// flush buffer</span>
        i <span class="hl opt">+=</span> <span class="hl num">1</span>
      <span class="hl opt">}</span>

      <span class="hl kwa">if</span> <span class="hl opt">(</span>count <span class="hl opt">&lt;</span> buf<span class="hl opt">.</span>length<span class="hl opt">){</span> <span class="hl kwd">buf</span><span class="hl opt">(</span>count<span class="hl opt">) =</span> nl<span class="hl opt">;</span> count <span class="hl opt">+=</span> <span class="hl num">1</span> <span class="hl opt">}</span>
      <span class="hl kwa">else</span> <span class="hl opt">{</span> <span class="hl kwd">write</span><span class="hl opt">(</span>nl<span class="hl opt">) }</span> <span class="hl slc">// flush buffer</span>
      n <span class="hl opt">-=</span> LineLength
    <span class="hl opt">}</span>
  <span class="hl opt">}</span>

  <span class="hl kwa">private final def</span> <span class="hl kwd">selectRandom</span><span class="hl opt">(</span>cuml<span class="hl opt">:</span> Array<span class="hl opt">[</span>Double<span class="hl opt">]):</span> Int <span class="hl opt">= {</span>
    <span class="hl kwa">val</span> r <span class="hl opt">=</span> <span class="hl kwd">randomTo</span><span class="hl opt">(</span><span class="hl num">1.0</span><span class="hl opt">)</span>
    <span class="hl kwa">var</span> i <span class="hl opt">=</span> <span class="hl num">0</span>
    <span class="hl kwa">while</span> <span class="hl opt">(</span>i <span class="hl opt">&lt;</span> cuml<span class="hl opt">.</span>length<span class="hl opt">) {</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>r <span class="hl opt">&lt;</span> <span class="hl kwd">cuml</span><span class="hl opt">(</span>i<span class="hl opt">))</span> <span class="hl kwa">return</span> i
      i <span class="hl opt">+=</span> <span class="hl num">1</span>
    <span class="hl opt">}</span>
    i
  <span class="hl opt">}</span>
  
  <span class="hl kwa">private final val</span> IM <span class="hl opt">=</span> <span class="hl num">139968</span>
  <span class="hl kwa">private final val</span> IA <span class="hl opt">=</span> <span class="hl num">3877</span>
  <span class="hl kwa">private final val</span> IC <span class="hl opt">=</span> <span class="hl num">29573</span>
  <span class="hl kwa">private final val</span> IMinv <span class="hl opt">=</span> <span class="hl num">1.0</span><span class="hl opt">/</span>IM
  <span class="hl kwa">private var</span> seed <span class="hl opt">=</span> <span class="hl num">42</span>

  <span class="hl kwa">private final def</span> <span class="hl kwd">randomTo</span><span class="hl opt">(</span>max<span class="hl opt">:</span> Double<span class="hl opt">) = {</span>
    seed <span class="hl opt">= (</span>seed <span class="hl opt">*</span> IA <span class="hl opt">+</span> IC<span class="hl opt">) %</span> IM
    max <span class="hl opt">*</span> seed <span class="hl opt">*</span> IMinv
  <span class="hl opt">}</span>
<span class="hl opt">}</span>
