<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by Olof Kraigher</span>
<span class="hl com">*/</span>
<span class="hl kwa">import</span> scala<span class="hl opt">.</span>collection<span class="hl opt">.</span>mutable<span class="hl opt">.</span>HashMap
<span class="hl kwa">import</span> scala<span class="hl opt">.</span>collection<span class="hl opt">.</span>mutable<span class="hl opt">.</span>MutableList

<span class="hl kwa">object</span> meteor <span class="hl opt">{</span>
  
  <span class="hl kwa">object</span> Direction <span class="hl kwa">extends</span> Enumeration <span class="hl opt">{</span>
    <span class="hl slc">// Handle the hexagonal directions on the meteor board</span>
    
    <span class="hl kwa">type</span> Direction <span class="hl opt">=</span> Value
    <span class="hl kwa">val</span> NW<span class="hl opt">,</span> W<span class="hl opt">,</span> SW<span class="hl opt">,</span> SE<span class="hl opt">,</span> E<span class="hl opt">,</span> NE <span class="hl opt">=</span> Value

    <span class="hl kwa">def</span> <span class="hl kwd">rotate</span><span class="hl opt">(</span>dir <span class="hl opt">:</span> Direction<span class="hl opt">,</span> amount <span class="hl opt">:</span> Int<span class="hl opt">) :</span> Direction <span class="hl opt">=</span> 
      <span class="hl slc">// Rotate a single direction a specific amount clockwise</span>
      <span class="hl opt">(</span>dir<span class="hl opt">.</span>id <span class="hl opt">+</span> amount<span class="hl opt">) %</span> maxId
      
    <span class="hl kwa">def</span> <span class="hl kwd">rotate</span><span class="hl opt">(</span>piece <span class="hl opt">:</span> Seq<span class="hl opt">[</span>Direction<span class="hl opt">],</span> amount <span class="hl opt">:</span> Int<span class="hl opt">) :</span> Seq<span class="hl opt">[</span>Direction<span class="hl opt">] =</span> 
      <span class="hl slc">// Rotate a piece a specific amount clockwise</span>
      piece<span class="hl opt">.</span><span class="hl kwd">map</span><span class="hl opt">(</span><span class="hl kwd">rotate</span><span class="hl opt">(</span>_<span class="hl opt">,</span> amount<span class="hl opt">))</span>
    
    <span class="hl kwa">def</span> <span class="hl kwd">flip</span><span class="hl opt">(</span>dir <span class="hl opt">:</span> Direction<span class="hl opt">) :</span> Direction <span class="hl opt">=</span>
      <span class="hl slc">// Flip a direction</span>
      maxId <span class="hl opt">-</span> <span class="hl num">1</span> <span class="hl opt">-</span> dir<span class="hl opt">.</span>id

    <span class="hl kwa">def</span> <span class="hl kwd">flip</span><span class="hl opt">(</span>piece <span class="hl opt">:</span> Seq<span class="hl opt">[</span>Direction<span class="hl opt">]) :</span> Seq<span class="hl opt">[</span>Direction<span class="hl opt">] =</span>
      <span class="hl slc">// Flip a piece</span>
      piece<span class="hl opt">.</span><span class="hl kwd">map</span><span class="hl opt">(</span>flip<span class="hl opt">)</span>
      
    <span class="hl kwa">def</span> <span class="hl kwd">move</span><span class="hl opt">(</span>dir <span class="hl opt">:</span> Direction<span class="hl opt">,</span> pos <span class="hl opt">: (</span>Int<span class="hl opt">,</span> Int<span class="hl opt">)) :</span> Option<span class="hl opt">[(</span>Int<span class="hl opt">,</span> Int<span class="hl opt">)] = {</span>
      <span class="hl slc">// Move a position in a specific direction</span>
      <span class="hl kwa">val</span> <span class="hl opt">(</span>x<span class="hl opt">,</span> y<span class="hl opt">) =</span> pos
      <span class="hl kwa">val</span> oddy <span class="hl opt">=</span> y <span class="hl opt">%</span> <span class="hl num">2</span>
      <span class="hl kwa">val</span> <span class="hl opt">(</span>nx<span class="hl opt">,</span> ny<span class="hl opt">) =</span> dir match <span class="hl opt">{</span>
        <span class="hl kwa">case</span> E  <span class="hl opt">=&gt; (</span>x <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">,</span> y<span class="hl opt">)</span>
        <span class="hl kwa">case</span> W  <span class="hl opt">=&gt; (</span>x <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">,</span> y<span class="hl opt">)</span>
        <span class="hl kwa">case</span> NE <span class="hl opt">=&gt; (</span>x <span class="hl opt">+</span> oddy<span class="hl opt">,</span>     y <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">)</span>
        <span class="hl kwa">case</span> NW <span class="hl opt">=&gt; (</span>x <span class="hl opt">+</span> oddy <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">,</span> y <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">)</span>
        <span class="hl kwa">case</span> SE <span class="hl opt">=&gt; (</span>x <span class="hl opt">+</span> oddy<span class="hl opt">,</span>     y <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">)</span>
        <span class="hl kwa">case</span> SW <span class="hl opt">=&gt; (</span>x <span class="hl opt">+</span> oddy <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">,</span> y <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">)</span>
      <span class="hl opt">}</span>
      
      <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl num">0</span> <span class="hl opt">&lt;=</span> nx <span class="hl opt">&amp;&amp;</span> nx <span class="hl opt">&lt;</span> <span class="hl num">5</span> <span class="hl opt">&amp;&amp;</span> <span class="hl num">0</span> <span class="hl opt">&lt;=</span> ny <span class="hl opt">&amp;&amp;</span> ny <span class="hl opt">&lt;</span> <span class="hl num">10</span><span class="hl opt">)</span>
        <span class="hl kwd">Some</span><span class="hl opt">((</span>nx<span class="hl opt">,</span> ny<span class="hl opt">))</span>
      <span class="hl kwa">else</span>
        None
    <span class="hl opt">}</span>
    
    <span class="hl slc">// Convenient implicit conversion</span>
    implicit <span class="hl kwa">def</span> <span class="hl kwd">DirectionToInt</span><span class="hl opt">(</span>i <span class="hl opt">:</span> Int<span class="hl opt">) :</span> Direction <span class="hl opt">=</span> <span class="hl kwd">Direction</span><span class="hl opt">(</span>i<span class="hl opt">)</span>
  <span class="hl opt">}</span>

  
  <span class="hl kwa">object</span> MaskTools <span class="hl opt">{</span>
    <span class="hl slc">// Methods to manipulate bit masks</span>
    
    <span class="hl kwa">import</span> Direction<span class="hl opt">.</span>_
    
    <span class="hl kwa">val</span> even <span class="hl opt">= (</span>
             <span class="hl num">0x1f</span>L 
          <span class="hl opt">| (</span><span class="hl num">0x1f</span>L <span class="hl opt">&lt;&lt;</span> <span class="hl num">10</span><span class="hl opt">)</span> 
          <span class="hl opt">| (</span><span class="hl num">0x1f</span>L <span class="hl opt">&lt;&lt;</span> <span class="hl num">20</span><span class="hl opt">)</span> 
          <span class="hl opt">| (</span><span class="hl num">0x1f</span>L <span class="hl opt">&lt;&lt;</span> <span class="hl num">30</span><span class="hl opt">)</span> 
          <span class="hl opt">| (</span><span class="hl num">0x1f</span>L <span class="hl opt">&lt;&lt;</span> <span class="hl num">40</span><span class="hl opt">))</span>
    
    <span class="hl kwa">val</span> odd <span class="hl opt">=</span> even <span class="hl opt">&lt;&lt;</span> <span class="hl num">5</span>
    <span class="hl kwa">val</span> full <span class="hl opt">= (</span><span class="hl num">1L</span> <span class="hl opt">&lt;&lt;</span> <span class="hl num">50</span><span class="hl opt">) -</span> <span class="hl num">1</span>
    <span class="hl kwa">val</span> west <span class="hl opt">=</span> <span class="hl num">0x210842108421</span>L
    <span class="hl kwa">val</span> east <span class="hl opt">=</span> west <span class="hl opt">&lt;&lt;</span> <span class="hl num">4</span>
          
    <span class="hl kwa">def</span> <span class="hl kwd">firstZero</span><span class="hl opt">(</span>mask <span class="hl opt">:</span> Long<span class="hl opt">,</span> idx <span class="hl opt">:</span> Int <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">) :</span> Int <span class="hl opt">= {</span>
      <span class="hl slc">// Find the position of the first zero bit in mask</span>
      <span class="hl kwa">var</span> i <span class="hl opt">=</span> idx
      <span class="hl kwa">while</span> <span class="hl opt">(((</span>mask <span class="hl opt">&gt;&gt;</span> i<span class="hl opt">) &amp;</span> <span class="hl num">1L</span><span class="hl opt">) ==</span> <span class="hl num">1L</span> <span class="hl opt">&amp;&amp;</span> i <span class="hl opt">&lt;=</span> <span class="hl num">63</span><span class="hl opt">) {</span>
        i <span class="hl opt">+=</span> <span class="hl num">1</span>
      <span class="hl opt">}</span>
      <span class="hl kwa">return</span> i
    <span class="hl opt">}</span> 
       
    <span class="hl kwa">def</span> <span class="hl kwd">expand</span><span class="hl opt">(</span>mask <span class="hl opt">:</span> Long<span class="hl opt">) :</span> Long <span class="hl opt">= {</span>
      <span class="hl slc">// Expand mask by growing it in every direction</span>
      <span class="hl kwa">val</span> evenMask <span class="hl opt">=</span> mask <span class="hl opt">&amp;</span> even
      <span class="hl kwa">val</span> oddMask <span class="hl opt">=</span> mask <span class="hl opt">&amp;</span> odd
      <span class="hl kwa">val</span> toE <span class="hl opt">= (</span>mask <span class="hl opt">&amp;</span> ~east<span class="hl opt">) &lt;&lt;</span> <span class="hl num">1</span>
      <span class="hl kwa">val</span> toW <span class="hl opt">= (</span>mask <span class="hl opt">&amp;</span> ~west<span class="hl opt">) &gt;&gt;</span> <span class="hl num">1</span>
      <span class="hl kwa">val</span> toNW <span class="hl opt">= (</span>oddMask <span class="hl opt">&gt;&gt;</span> <span class="hl num">5</span><span class="hl opt">)  | ((</span>evenMask <span class="hl opt">&amp;</span> ~west<span class="hl opt">) &gt;&gt;</span> <span class="hl num">6</span><span class="hl opt">)</span>
      <span class="hl kwa">val</span> toNE <span class="hl opt">= (</span>evenMask <span class="hl opt">&gt;&gt;</span> <span class="hl num">5</span><span class="hl opt">) | ((</span>oddMask <span class="hl opt">&amp;</span> ~east<span class="hl opt">) &gt;&gt;</span> <span class="hl num">4</span><span class="hl opt">)</span>
      <span class="hl kwa">val</span> toSW <span class="hl opt">= (</span>oddMask <span class="hl opt">&lt;&lt;</span> <span class="hl num">5</span><span class="hl opt">)  | ((</span>evenMask <span class="hl opt">&amp;</span> ~west<span class="hl opt">) &lt;&lt;</span> <span class="hl num">4</span><span class="hl opt">)</span>
      <span class="hl kwa">val</span> toSE <span class="hl opt">= (</span>evenMask <span class="hl opt">&lt;&lt;</span> <span class="hl num">5</span><span class="hl opt">) | ((</span>oddMask <span class="hl opt">&amp;</span> ~east<span class="hl opt">) &lt;&lt;</span> <span class="hl num">6</span><span class="hl opt">)</span>
      <span class="hl kwa">return</span> <span class="hl opt">(</span>mask <span class="hl opt">|</span> toE <span class="hl opt">|</span> toW <span class="hl opt">|</span> toNW <span class="hl opt">|</span> toNE <span class="hl opt">|</span> toSW <span class="hl opt">|</span> toSE<span class="hl opt">) &amp;</span> full
    <span class="hl opt">}</span>
    
    <span class="hl kwa">def</span> <span class="hl kwd">floodFill</span><span class="hl opt">(</span>mask <span class="hl opt">:</span> Long<span class="hl opt">,</span> seed <span class="hl opt">:</span> Long<span class="hl opt">) :</span> Long <span class="hl opt">= {</span>
      <span class="hl com">/* Flood fill starting at the seed, the mask is</span>
<span class="hl com">       * used to as the boundary </span>
<span class="hl com">       */</span>
      <span class="hl kwa">var</span> region <span class="hl opt">=</span> <span class="hl num">0L</span>
      <span class="hl kwa">var</span> growth <span class="hl opt">=</span> seed
  
      <span class="hl kwa">do</span> <span class="hl opt">{</span>
        region <span class="hl opt">=</span> growth
        growth <span class="hl opt">=</span> <span class="hl kwd">expand</span><span class="hl opt">(</span>region<span class="hl opt">) &amp;</span> ~mask
      <span class="hl opt">}</span> <span class="hl kwa">while</span> <span class="hl opt">(</span>growth <span class="hl opt">!=</span> region<span class="hl opt">)</span>
        
      growth
    <span class="hl opt">}</span>
    
    <span class="hl kwa">def</span> <span class="hl kwd">bitCount</span><span class="hl opt">(</span>mask <span class="hl opt">:</span> Long<span class="hl opt">) :</span> Int <span class="hl opt">= {</span>
      <span class="hl slc">// Count the number of 1:s in mask</span>
      <span class="hl kwa">var</span> count <span class="hl opt">=</span> <span class="hl num">0</span>
      <span class="hl kwa">for</span> <span class="hl opt">(</span>idx <span class="hl opt">&lt;-</span> <span class="hl num">0</span> until <span class="hl num">50</span><span class="hl opt">)</span>
        <span class="hl kwa">if</span> <span class="hl opt">(((</span>mask <span class="hl opt">&gt;&gt;</span> idx<span class="hl opt">) &amp;</span> <span class="hl num">1L</span><span class="hl opt">) !=</span> <span class="hl num">0L</span><span class="hl opt">)</span>
          count <span class="hl opt">+=</span> <span class="hl num">1</span>
      <span class="hl kwa">return</span> count
    <span class="hl opt">}</span>
    
    <span class="hl kwa">def</span> <span class="hl kwd">noIslands</span><span class="hl opt">(</span>mask <span class="hl opt">:</span> Long<span class="hl opt">) :</span> Boolean <span class="hl opt">= {</span>
      <span class="hl slc">// Check that the mask contains no islands</span>
      <span class="hl slc">// of a size not divisible by 5</span>
      <span class="hl kwa">var</span> m <span class="hl opt">=</span> mask
      <span class="hl kwa">var</span> lastZero <span class="hl opt">= -</span><span class="hl num">1</span>
      
      <span class="hl kwa">while</span> <span class="hl opt">(</span>m <span class="hl opt">!=</span> full<span class="hl opt">) {</span>
        lastZero <span class="hl opt">=</span> <span class="hl kwd">firstZero</span><span class="hl opt">(</span>m<span class="hl opt">,</span> lastZero<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)</span>
        <span class="hl kwa">val</span> growth <span class="hl opt">=</span> <span class="hl kwd">floodFill</span><span class="hl opt">(</span>mask<span class="hl opt">,</span> <span class="hl num">1L</span> <span class="hl opt">&lt;&lt;</span> lastZero<span class="hl opt">)</span>
        
        <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">bitCount</span><span class="hl opt">(</span>growth<span class="hl opt">) %</span> <span class="hl num">5</span> <span class="hl opt">!=</span> <span class="hl num">0</span><span class="hl opt">) {</span>
          <span class="hl kwa">return</span> false
        <span class="hl opt">}</span>
        
        m <span class="hl opt">|=</span> growth
      <span class="hl opt">}</span>
      <span class="hl kwa">return</span> true
    <span class="hl opt">}</span>
    
    <span class="hl kwa">def</span> <span class="hl kwd">reverse</span><span class="hl opt">(</span>mask <span class="hl opt">:</span> Long<span class="hl opt">) :</span> Long <span class="hl opt">= {</span>
      <span class="hl slc">// Bit reverse mask of 50 bits </span>
      <span class="hl kwa">var</span> rev <span class="hl opt">=</span> <span class="hl num">0L</span>
      <span class="hl kwa">for</span> <span class="hl opt">(</span>idx <span class="hl opt">&lt;-</span> <span class="hl num">0</span> until <span class="hl num">50</span><span class="hl opt">) {</span>
        rev <span class="hl opt">|= ((</span>mask <span class="hl opt">&gt;&gt;</span> idx<span class="hl opt">) &amp;</span> <span class="hl num">1</span><span class="hl opt">) &lt;&lt; (</span><span class="hl num">49</span> <span class="hl opt">-</span> idx<span class="hl opt">)</span>
      <span class="hl opt">}</span>
      <span class="hl kwa">return</span> rev
    <span class="hl opt">}</span>
  <span class="hl opt">}</span>
  
  <span class="hl kwa">object</span> Pieces <span class="hl opt">{</span>
    <span class="hl com">/* Contains definition of all pieces</span>
<span class="hl com">     * Converts pieces into masks</span>
<span class="hl com">     */</span>
    
    <span class="hl kwa">import</span> MaskTools<span class="hl opt">.</span>_
    <span class="hl kwa">import</span> Direction<span class="hl opt">.</span>_
    
    <span class="hl kwa">val</span> pieces <span class="hl opt">=</span> <span class="hl kwd">Vector</span><span class="hl opt">(</span>
        <span class="hl kwd">List</span><span class="hl opt">(</span>E<span class="hl opt">,</span>  E<span class="hl opt">,</span>  E<span class="hl opt">,</span>  SE<span class="hl opt">),</span>
        <span class="hl kwd">List</span><span class="hl opt">(</span>SE<span class="hl opt">,</span> SW<span class="hl opt">,</span> W<span class="hl opt">,</span>  SW<span class="hl opt">),</span>
        <span class="hl kwd">List</span><span class="hl opt">(</span>W<span class="hl opt">,</span>  W<span class="hl opt">,</span>  SW<span class="hl opt">,</span> SE<span class="hl opt">),</span>
        <span class="hl kwd">List</span><span class="hl opt">(</span>E<span class="hl opt">,</span>  E<span class="hl opt">,</span>  SW<span class="hl opt">,</span> SE<span class="hl opt">),</span>
        <span class="hl kwd">List</span><span class="hl opt">(</span>NW<span class="hl opt">,</span> W<span class="hl opt">,</span>  NW<span class="hl opt">,</span> SE<span class="hl opt">,</span> SW<span class="hl opt">),</span>
        <span class="hl kwd">List</span><span class="hl opt">(</span>E<span class="hl opt">,</span>  E<span class="hl opt">,</span>  NE<span class="hl opt">,</span> W<span class="hl opt">),</span>
        <span class="hl kwd">List</span><span class="hl opt">(</span>NW<span class="hl opt">,</span> NE<span class="hl opt">,</span> NE<span class="hl opt">,</span> W<span class="hl opt">),</span>
        <span class="hl kwd">List</span><span class="hl opt">(</span>NE<span class="hl opt">,</span> SE<span class="hl opt">,</span> E<span class="hl opt">,</span>  NE<span class="hl opt">),</span>
        <span class="hl kwd">List</span><span class="hl opt">(</span>SE<span class="hl opt">,</span> SE<span class="hl opt">,</span> E<span class="hl opt">,</span>  SE<span class="hl opt">),</span>
        <span class="hl kwd">List</span><span class="hl opt">(</span>E<span class="hl opt">,</span>  NW<span class="hl opt">,</span> NW<span class="hl opt">,</span> NW<span class="hl opt">))</span>   
    
    <span class="hl kwa">def</span> <span class="hl kwd">growToMask</span><span class="hl opt">(</span>
             piece <span class="hl opt">:</span> Seq<span class="hl opt">[</span>Direction<span class="hl opt">],</span> 
             pos   <span class="hl opt">: (</span>Int<span class="hl opt">,</span> Int<span class="hl opt">),</span> 
             accum <span class="hl opt">:</span> Long <span class="hl opt">=</span> <span class="hl num">0L</span><span class="hl opt">)</span> 
                   <span class="hl opt">:</span> Option<span class="hl opt">[</span>Long<span class="hl opt">] = {</span>
      <span class="hl slc">// Grow a piece into a bitmask from a starting position</span>
      <span class="hl kwa">val</span> <span class="hl opt">(</span>x<span class="hl opt">,</span>y<span class="hl opt">) =</span> pos<span class="hl opt">;</span>
      <span class="hl kwa">val</span> bit <span class="hl opt">= (</span><span class="hl num">1L</span> <span class="hl opt">&lt;&lt; (</span><span class="hl num">5</span><span class="hl opt">*</span>y <span class="hl opt">+</span> x<span class="hl opt">))</span>
  
      <span class="hl kwa">if</span> <span class="hl opt">(</span>piece<span class="hl opt">.</span>length <span class="hl opt">==</span> <span class="hl num">0</span><span class="hl opt">)</span>
        <span class="hl kwd">Some</span><span class="hl opt">(</span>accum <span class="hl opt">|</span> bit<span class="hl opt">)</span>
      <span class="hl kwa">else</span>
        <span class="hl kwd">move</span><span class="hl opt">(</span>piece<span class="hl opt">.</span>head<span class="hl opt">,</span> pos<span class="hl opt">)</span> match <span class="hl opt">{</span>
          <span class="hl kwa">case</span> <span class="hl kwd">Some</span><span class="hl opt">(</span>newPos<span class="hl opt">) =&gt;</span> <span class="hl kwd">growToMask</span><span class="hl opt">(</span>piece<span class="hl opt">.</span>tail<span class="hl opt">,</span> newPos<span class="hl opt">,</span> accum <span class="hl opt">|</span> bit<span class="hl opt">)</span>
          <span class="hl kwa">case</span> None <span class="hl opt">=&gt;</span> None
       <span class="hl opt">}</span>
    <span class="hl opt">}</span>
  
    
    <span class="hl kwa">def</span> <span class="hl kwd">allMasksOfPiece</span><span class="hl opt">(</span>piece <span class="hl opt">:</span> Seq<span class="hl opt">[</span>Direction<span class="hl opt">],</span> rotations <span class="hl opt">:</span> Int<span class="hl opt">) = {</span>
      <span class="hl com">/* Create all rotated/flipped/transposed masks of a piece</span>
<span class="hl com">       * returns vector ordered by the first 1-bit position.</span>
<span class="hl com">       */</span>
      <span class="hl kwa">val</span> all <span class="hl opt">=</span> <span class="hl kwa">for</span> <span class="hl opt">(</span>doflip <span class="hl opt">&lt;-</span> <span class="hl kwd">List</span><span class="hl opt">(</span>false<span class="hl opt">,</span> true<span class="hl opt">);</span>
                     r <span class="hl opt">&lt;-</span> <span class="hl num">0</span> until rotations<span class="hl opt">;</span>
                     x <span class="hl opt">&lt;-</span> <span class="hl num">0</span> until <span class="hl num">5</span><span class="hl opt">;</span>
                     y <span class="hl opt">&lt;-</span> <span class="hl num">0</span> until <span class="hl num">10</span><span class="hl opt">)</span> <span class="hl kwa">yield</span> <span class="hl opt">{</span>
        <span class="hl kwd">growToMask</span><span class="hl opt">(</span><span class="hl kwd">rotate</span><span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(</span>doflip<span class="hl opt">)</span> <span class="hl kwd">flip</span><span class="hl opt">(</span>piece<span class="hl opt">)</span> <span class="hl kwa">else</span> piece<span class="hl opt">,</span> r<span class="hl opt">), (</span>x<span class="hl opt">,</span>y<span class="hl opt">))</span>
      <span class="hl opt">}</span> 
      
      <span class="hl kwa">val</span> some <span class="hl opt">=</span> all<span class="hl opt">.</span>collect <span class="hl opt">{</span><span class="hl kwa">case</span> <span class="hl kwd">Some</span><span class="hl opt">(</span>mask<span class="hl opt">)</span> <span class="hl kwa">if</span> <span class="hl kwd">noIslands</span><span class="hl opt">(</span>mask<span class="hl opt">) =&gt;</span> mask<span class="hl opt">}</span>
      <span class="hl kwa">val</span> byFirstOne <span class="hl opt">=</span> some<span class="hl opt">.</span><span class="hl kwd">groupBy</span><span class="hl opt">(</span>mask <span class="hl opt">=&gt;</span> <span class="hl kwd">firstZero</span><span class="hl opt">(</span>~mask<span class="hl opt">))</span>
      Vector<span class="hl opt">.</span><span class="hl kwd">tabulate</span><span class="hl opt">(</span><span class="hl num">50</span><span class="hl opt">)(</span>idx <span class="hl opt">=&gt;</span> byFirstOne<span class="hl opt">.</span><span class="hl kwd">getOrElse</span><span class="hl opt">(</span>idx<span class="hl opt">,</span> <span class="hl kwd">Vector</span><span class="hl opt">()))</span>
    <span class="hl opt">}</span>
    
    <span class="hl kwa">def</span> <span class="hl kwd">allMasksOfColor</span><span class="hl opt">(</span>color <span class="hl opt">:</span> Int<span class="hl opt">) =</span> 
      <span class="hl com">/* Create all masks of color</span>
<span class="hl com">       * The masks for color 5 is only rotated by half</span>
<span class="hl com">       * producing only half the solutions where the other</span>
<span class="hl com">       * half is found by reversing the first half</span>
<span class="hl com">       */</span>
      <span class="hl kwd">allMasksOfPiece</span><span class="hl opt">(</span><span class="hl kwd">pieces</span><span class="hl opt">(</span>color<span class="hl opt">), (</span><span class="hl kwa">if</span> <span class="hl opt">(</span>color <span class="hl opt">==</span> <span class="hl num">5</span><span class="hl opt">)</span> <span class="hl num">3</span> <span class="hl kwa">else</span> <span class="hl num">6</span><span class="hl opt">))</span> 
      
    <span class="hl kwa">val</span> masksByColor <span class="hl opt">=</span> Vector<span class="hl opt">.</span><span class="hl kwd">tabulate</span><span class="hl opt">(</span>pieces<span class="hl opt">.</span>size<span class="hl opt">)(</span>allMasksOfColor<span class="hl opt">)</span>
  <span class="hl opt">}</span>
  
  <span class="hl kwa">object</span> Solver <span class="hl opt">{</span>
    <span class="hl slc">// Solves the meteor puzzle</span>
    <span class="hl kwa">import</span> MaskTools<span class="hl opt">.{</span>firstZero<span class="hl opt">,</span> reverse<span class="hl opt">}</span>
    
    <span class="hl kwa">def</span> <span class="hl kwd">solve</span><span class="hl opt">() :</span> Seq<span class="hl opt">[</span>String<span class="hl opt">] = {</span>
      <span class="hl slc">// Solve the meteor puzzle</span>
      
      <span class="hl slc">// List of found solutions</span>
      <span class="hl kwa">val</span> solutions <span class="hl opt">:</span> MutableList<span class="hl opt">[</span>String<span class="hl opt">] =</span> <span class="hl kwd">MutableList</span><span class="hl opt">()</span>
      
      <span class="hl slc">// Partial solution used during recursive search</span>
      <span class="hl kwa">var</span> partial <span class="hl opt">:</span> HashMap<span class="hl opt">[</span>Int<span class="hl opt">,</span> Long<span class="hl opt">] =</span> <span class="hl kwa">new</span> <span class="hl kwd">HashMap</span><span class="hl opt">()</span>
      
      <span class="hl kwa">def</span> <span class="hl kwd">solve</span><span class="hl opt">(</span>acc       <span class="hl opt">:</span> Long <span class="hl opt">=</span> <span class="hl num">0L</span><span class="hl opt">,</span> 
                lastZero  <span class="hl opt">:</span> Int <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">,</span> 
                remaining <span class="hl opt">:</span> Int <span class="hl opt">=</span> <span class="hl num">0x3ff</span><span class="hl opt">) {</span>
        <span class="hl slc">// Recursive solution search</span>
       
        <span class="hl kwa">val</span> idx <span class="hl opt">=</span> <span class="hl kwd">firstZero</span><span class="hl opt">(</span>acc<span class="hl opt">,</span> lastZero<span class="hl opt">)</span>
        
        <span class="hl kwa">if</span> <span class="hl opt">(</span>remaining <span class="hl opt">==</span> <span class="hl num">0</span><span class="hl opt">) {</span> 
          solutions <span class="hl opt">+=</span> <span class="hl kwd">show</span><span class="hl opt">(</span>partial<span class="hl opt">)</span>
          solutions <span class="hl opt">+=</span> <span class="hl kwd">show</span><span class="hl opt">(</span>partial<span class="hl opt">.</span><span class="hl kwd">mapValues</span><span class="hl opt">(</span>reverse<span class="hl opt">))</span>
          <span class="hl kwa">return</span>
        <span class="hl opt">}</span>
        
        <span class="hl kwa">var</span> color <span class="hl opt">=</span> <span class="hl num">0</span>
        
        <span class="hl kwa">while</span> <span class="hl opt">(</span>color <span class="hl opt">&lt;</span> <span class="hl num">10</span><span class="hl opt">) {</span>
          <span class="hl kwa">val</span> cmask <span class="hl opt">=</span> <span class="hl num">1</span> <span class="hl opt">&lt;&lt;</span> color         
          <span class="hl kwa">if</span> <span class="hl opt">((</span>remaining <span class="hl opt">&amp;</span> cmask<span class="hl opt">) !=</span> <span class="hl num">0</span><span class="hl opt">) {</span>
            <span class="hl kwa">for</span> <span class="hl opt">(</span>mask  <span class="hl opt">&lt;-</span> Pieces<span class="hl opt">.</span><span class="hl kwd">masksByColor</span><span class="hl opt">(</span>color<span class="hl opt">)(</span>idx<span class="hl opt">))</span>
              <span class="hl kwa">if</span> <span class="hl opt">((</span>acc <span class="hl opt">&amp;</span> mask<span class="hl opt">) ==</span> <span class="hl num">0L</span><span class="hl opt">) {</span>
                <span class="hl kwd">partial</span><span class="hl opt">(</span>color<span class="hl opt">) =</span> mask
                <span class="hl kwd">solve</span><span class="hl opt">(</span>acc <span class="hl opt">|</span> mask<span class="hl opt">,</span> idx <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">,</span> remaining ^ cmask<span class="hl opt">)</span>
              <span class="hl opt">}</span>
          <span class="hl opt">}</span>
          color <span class="hl opt">+=</span> <span class="hl num">1</span>
        <span class="hl opt">}</span>
          
      <span class="hl opt">}</span>
      <span class="hl kwd">solve</span><span class="hl opt">()</span>
      <span class="hl kwa">return</span> solutions
    <span class="hl opt">}</span>
     
    <span class="hl kwa">def</span> <span class="hl kwd">show</span><span class="hl opt">(</span>solution <span class="hl opt">:</span> collection<span class="hl opt">.</span>Map<span class="hl opt">[</span>Int<span class="hl opt">,</span> Long<span class="hl opt">]) :</span> String <span class="hl opt">= {</span>
      <span class="hl slc">// Create a string representation of a solution</span>
    
      <span class="hl kwa">val</span> board <span class="hl opt">:</span> Array<span class="hl opt">[</span>Array<span class="hl opt">[</span>Char<span class="hl opt">]] =</span> Array<span class="hl opt">.</span><span class="hl kwd">fill</span><span class="hl opt">(</span><span class="hl num">10</span><span class="hl opt">,</span> <span class="hl num">5</span><span class="hl opt">)(</span><span class="hl str">'-'</span><span class="hl opt">)</span>
    
      <span class="hl kwa">for</span> <span class="hl opt">(</span>color <span class="hl opt">&lt;-</span> <span class="hl num">0</span> to <span class="hl num">9</span><span class="hl opt">) {</span> 
        
        <span class="hl kwa">val</span> mask <span class="hl opt">=</span> solution<span class="hl opt">.</span><span class="hl kwd">getOrElse</span><span class="hl opt">(</span>color<span class="hl opt">,</span> <span class="hl num">0L</span><span class="hl opt">)</span>
        <span class="hl kwa">val</span> colorChar <span class="hl opt">= (</span>color <span class="hl opt">+</span> <span class="hl str">'0'</span><span class="hl opt">).</span>toChar
        
        <span class="hl kwa">for</span> <span class="hl opt">(</span>x <span class="hl opt">&lt;-</span> <span class="hl num">0</span> until <span class="hl num">5</span><span class="hl opt">;</span> y <span class="hl opt">&lt;-</span> <span class="hl num">0</span> until <span class="hl num">10</span><span class="hl opt">) {</span>
          <span class="hl kwa">val</span> pos <span class="hl opt">=</span> <span class="hl num">1L</span> <span class="hl opt">&lt;&lt; (</span><span class="hl num">5</span><span class="hl opt">*</span>y <span class="hl opt">+</span> x<span class="hl opt">)</span>
        
          <span class="hl kwa">if</span> <span class="hl opt">((</span>mask <span class="hl opt">&amp;</span> pos<span class="hl opt">) !=</span> <span class="hl num">0</span><span class="hl opt">)</span> 
            <span class="hl kwd">board</span><span class="hl opt">(</span>y<span class="hl opt">)(</span>x<span class="hl opt">) =</span> colorChar
          
        <span class="hl opt">}</span>
      <span class="hl opt">}</span>
      
      <span class="hl slc">// Indent odd rows</span>
      <span class="hl kwa">def</span> <span class="hl kwd">indent</span><span class="hl opt">(</span>y <span class="hl opt">:</span> Int<span class="hl opt">) =</span> 
        <span class="hl kwa">if</span> <span class="hl opt">(</span>y <span class="hl opt">%</span> <span class="hl num">2</span> <span class="hl opt">==</span> <span class="hl num">1</span><span class="hl opt">)</span> <span class="hl str">&quot; &quot;</span> <span class="hl kwa">else</span> <span class="hl str">&quot;&quot;</span>
      
      <span class="hl slc">// Show a row</span>
      <span class="hl kwa">def</span> <span class="hl kwd">showRow</span><span class="hl opt">(</span>y <span class="hl opt">:</span> Int<span class="hl opt">) =</span> 
        <span class="hl kwd">board</span><span class="hl opt">(</span>y<span class="hl opt">).</span><span class="hl kwd">foldLeft</span><span class="hl opt">(</span><span class="hl kwd">indent</span><span class="hl opt">(</span>y<span class="hl opt">))(</span>_ <span class="hl opt">+</span> _ <span class="hl opt">+</span> <span class="hl str">&quot; &quot;</span><span class="hl opt">)</span>
  
      <span class="hl opt">(</span><span class="hl num">0</span> until <span class="hl num">10</span><span class="hl opt">).</span><span class="hl kwd">foldLeft</span><span class="hl opt">(</span><span class="hl str">&quot;&quot;</span><span class="hl opt">)((</span>acc<span class="hl opt">,</span> y<span class="hl opt">) =&gt;</span> acc <span class="hl opt">+</span> <span class="hl kwd">showRow</span><span class="hl opt">(</span>y<span class="hl opt">) +</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">)</span>
    <span class="hl opt">}</span>
 
  <span class="hl opt">}</span>
  
  <span class="hl kwa">def</span> <span class="hl kwd">main</span><span class="hl opt">(</span>args<span class="hl opt">:</span> Array<span class="hl opt">[</span>String<span class="hl opt">]):</span> Unit <span class="hl opt">= {</span>
      <span class="hl kwa">val</span> allSolutions <span class="hl opt">=</span> Solver<span class="hl opt">.</span><span class="hl kwd">solve</span><span class="hl opt">()</span>
      <span class="hl kwa">val</span> howMany <span class="hl opt">= {</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>args<span class="hl opt">.</span>length <span class="hl opt">==</span> <span class="hl num">1</span><span class="hl opt">)</span>
          args<span class="hl opt">.</span>first<span class="hl opt">.</span>toInt
        <span class="hl kwa">else</span>
          allSolutions<span class="hl opt">.</span>length
      <span class="hl opt">}</span>
      <span class="hl kwa">val</span> solutions <span class="hl opt">=</span> allSolutions<span class="hl opt">.</span><span class="hl kwd">take</span><span class="hl opt">(</span>howMany<span class="hl opt">)</span>
      <span class="hl kwd">println</span><span class="hl opt">(</span>solutions<span class="hl opt">.</span>length <span class="hl opt">+</span> <span class="hl str">&quot; solutions found</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">)</span>
      <span class="hl kwd">println</span><span class="hl opt">(</span>solutions<span class="hl opt">.</span>min<span class="hl opt">)</span>
      <span class="hl kwd">println</span><span class="hl opt">(</span>solutions<span class="hl opt">.</span>max<span class="hl opt">)</span>
  <span class="hl opt">}</span>

<span class="hl opt">}</span>
