<span class="hl com">/*</span>
<span class="hl com">The Computer Language Benchmarks Game</span>
<span class="hl com">http://shootout.alioth.debian.org/</span>
<span class="hl com"> </span>
<span class="hl com">Based on C# entry by Isaac Gouy</span>
<span class="hl com">contributed by Jarkko Miettinen</span>
<span class="hl com">Parallel by The Anh Tran</span>
<span class="hl com">steady state approximation by Isaac Gouy</span>
<span class="hl com"> */</span>

<span class="hl kwa">import</span> java<span class="hl opt">.</span>text<span class="hl opt">.</span>DecimalFormat<span class="hl opt">;</span>
<span class="hl kwa">import</span> java<span class="hl opt">.</span>text<span class="hl opt">.</span>NumberFormat<span class="hl opt">;</span>
<span class="hl kwa">import</span> java<span class="hl opt">.</span>util<span class="hl opt">.</span>concurrent<span class="hl opt">.</span>CyclicBarrier<span class="hl opt">;</span>

<span class="hl kwa">public class</span> spectralnorm
<span class="hl opt">{</span>
   <span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">main</span><span class="hl opt">(</span>String<span class="hl opt">[]</span> args<span class="hl opt">){</span>
      <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span> i<span class="hl opt">&lt;</span><span class="hl num">65</span><span class="hl opt">; ++</span>i<span class="hl opt">)</span> spectralnorm<span class="hl opt">.</span><span class="hl kwd">program_main</span><span class="hl opt">(</span>args<span class="hl opt">,</span>false<span class="hl opt">);</span>
      spectralnorm<span class="hl opt">.</span><span class="hl kwd">program_main</span><span class="hl opt">(</span>args<span class="hl opt">,</span>true<span class="hl opt">);</span>
   <span class="hl opt">}</span>

    <span class="hl kwa">private static final</span> NumberFormat formatter <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">DecimalFormat</span> <span class="hl opt">(</span><span class="hl str">&quot;#.000000000&quot;</span><span class="hl opt">);</span>
    
    <span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">program_main</span> <span class="hl opt">(</span>String<span class="hl opt">[]</span> args<span class="hl opt">,</span> <span class="hl kwb">boolean</span> isWarm<span class="hl opt">)</span>
    <span class="hl opt">{</span>
        <span class="hl kwb">int</span> n <span class="hl opt">=</span> <span class="hl num">1000</span><span class="hl opt">;</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>args<span class="hl opt">.</span>length <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">)</span> n <span class="hl opt">=</span> Integer<span class="hl opt">.</span><span class="hl kwd">parseInt</span> <span class="hl opt">(</span>args<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">]);</span>
        
        <span class="hl kwb">double</span> answer <span class="hl opt">=</span> <span class="hl kwd">spectralnormGame</span> <span class="hl opt">(</span>n<span class="hl opt">);</span>

        <span class="hl kwa">if</span> <span class="hl opt">(</span>isWarm<span class="hl opt">)</span>
           System<span class="hl opt">.</span>out<span class="hl opt">.</span><span class="hl kwd">println</span> <span class="hl opt">(</span>formatter<span class="hl opt">.</span><span class="hl kwd">format</span><span class="hl opt">(</span>answer<span class="hl opt">) );</span>
    <span class="hl opt">}</span>
    
    
    <span class="hl kwa">private static final</span> <span class="hl kwb">double</span> <span class="hl kwd">spectralnormGame</span> <span class="hl opt">(</span><span class="hl kwb">int</span> n<span class="hl opt">)</span>
    <span class="hl opt">{</span>
        <span class="hl slc">// create unit vector</span>
        <span class="hl kwb">double</span><span class="hl opt">[]</span> u <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwb">double</span><span class="hl opt">[</span>n<span class="hl opt">];</span>
        <span class="hl kwb">double</span><span class="hl opt">[]</span> v <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwb">double</span><span class="hl opt">[</span>n<span class="hl opt">];</span>
        <span class="hl kwb">double</span><span class="hl opt">[]</span> tmp <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwb">double</span><span class="hl opt">[</span>n<span class="hl opt">];</span>
        
        <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> n<span class="hl opt">;</span> i<span class="hl opt">++)</span>
            u<span class="hl opt">[</span>i<span class="hl opt">] =</span> <span class="hl num">1.0</span><span class="hl opt">;</span>
        
        <span class="hl slc">// get available processor, then set up syn object</span>
        <span class="hl kwb">int</span> nthread <span class="hl opt">=</span> Runtime<span class="hl opt">.</span><span class="hl kwd">getRuntime</span> <span class="hl opt">().</span><span class="hl kwd">availableProcessors</span> <span class="hl opt">();</span>
        Approximate<span class="hl opt">.</span>barrier <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">CyclicBarrier</span> <span class="hl opt">(</span>nthread<span class="hl opt">);</span>
        
        <span class="hl kwb">int</span> chunk <span class="hl opt">=</span> n <span class="hl opt">/</span> nthread<span class="hl opt">;</span>
        Approximate<span class="hl opt">[]</span> ap <span class="hl opt">=</span> <span class="hl kwa">new</span> Approximate<span class="hl opt">[</span>nthread<span class="hl opt">];</span>
        
        <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> nthread<span class="hl opt">;</span> i<span class="hl opt">++)</span>
        <span class="hl opt">{</span>
            <span class="hl kwb">int</span> r1 <span class="hl opt">=</span> i <span class="hl opt">*</span> chunk<span class="hl opt">;</span>
            <span class="hl kwb">int</span> r2 <span class="hl opt">= (</span>i <span class="hl opt">&lt; (</span>nthread <span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">))</span> ? r1 <span class="hl opt">+</span> chunk <span class="hl opt">:</span> n<span class="hl opt">;</span>
            
            ap<span class="hl opt">[</span>i<span class="hl opt">] =</span> <span class="hl kwa">new</span> <span class="hl kwd">Approximate</span> <span class="hl opt">(</span>u<span class="hl opt">,</span> v<span class="hl opt">,</span> tmp<span class="hl opt">,</span> r1<span class="hl opt">,</span> r2<span class="hl opt">);</span>
        <span class="hl opt">}</span>
        
        
        <span class="hl kwb">double</span> vBv <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">,</span> vv <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
        <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> nthread<span class="hl opt">;</span> i<span class="hl opt">++)</span>
        <span class="hl opt">{</span>
            <span class="hl kwa">try</span>
            <span class="hl opt">{</span>
                ap<span class="hl opt">[</span>i<span class="hl opt">].</span><span class="hl kwd">join</span> <span class="hl opt">();</span>
                
                vBv <span class="hl opt">+=</span> ap<span class="hl opt">[</span>i<span class="hl opt">].</span>m_vBv<span class="hl opt">;</span>
                vv <span class="hl opt">+=</span> ap<span class="hl opt">[</span>i<span class="hl opt">].</span>m_vv<span class="hl opt">;</span>
            <span class="hl opt">}</span>
            <span class="hl kwa">catch</span> <span class="hl opt">(</span>Exception e<span class="hl opt">)</span>
            <span class="hl opt">{</span>
                e<span class="hl opt">.</span><span class="hl kwd">printStackTrace</span> <span class="hl opt">();</span>
            <span class="hl opt">}</span>
        <span class="hl opt">}</span>
        
        <span class="hl kwa">return</span> Math<span class="hl opt">.</span><span class="hl kwd">sqrt</span> <span class="hl opt">(</span>vBv<span class="hl opt">/</span>vv<span class="hl opt">);</span>
    <span class="hl opt">}</span>
    
    
    <span class="hl kwa">private static class</span> Approximate <span class="hl kwa">extends</span> Thread
    <span class="hl opt">{</span>
        <span class="hl kwa">private static</span> CyclicBarrier barrier<span class="hl opt">;</span>
        
        <span class="hl kwa">private</span> <span class="hl kwb">double</span><span class="hl opt">[]</span> _u<span class="hl opt">;</span>
        <span class="hl kwa">private</span> <span class="hl kwb">double</span><span class="hl opt">[]</span> _v<span class="hl opt">;</span>
        <span class="hl kwa">private</span> <span class="hl kwb">double</span><span class="hl opt">[]</span> _tmp<span class="hl opt">;</span>
        
        <span class="hl kwa">private</span> <span class="hl kwb">int</span> range_begin<span class="hl opt">,</span> range_end<span class="hl opt">;</span>
        <span class="hl kwa">private</span> <span class="hl kwb">double</span> m_vBv <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">,</span> m_vv <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
        
        
        <span class="hl kwa">public</span> <span class="hl kwd">Approximate</span> <span class="hl opt">(</span><span class="hl kwb">double</span><span class="hl opt">[]</span> u<span class="hl opt">,</span> <span class="hl kwb">double</span><span class="hl opt">[]</span> v<span class="hl opt">,</span> <span class="hl kwb">double</span><span class="hl opt">[]</span> tmp<span class="hl opt">,</span> <span class="hl kwb">int</span> rbegin<span class="hl opt">,</span> <span class="hl kwb">int</span> rend<span class="hl opt">)</span>
        <span class="hl opt">{</span>
            <span class="hl kwa">super</span> <span class="hl opt">();</span>
            
            _u <span class="hl opt">=</span> u<span class="hl opt">;</span>
            _v <span class="hl opt">=</span> v<span class="hl opt">;</span>
            _tmp <span class="hl opt">=</span> tmp<span class="hl opt">;</span>
            
            range_begin <span class="hl opt">=</span> rbegin<span class="hl opt">;</span>
            range_end <span class="hl opt">=</span> rend<span class="hl opt">;</span>
            
            <span class="hl kwd">start</span> <span class="hl opt">();</span>
        <span class="hl opt">}</span>
        
        <span class="hl kwa">public</span> <span class="hl kwb">void</span> <span class="hl kwd">run</span> <span class="hl opt">()</span>
        <span class="hl opt">{</span>
            <span class="hl slc">// 20 steps of the power method</span>
            <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> <span class="hl num">10</span><span class="hl opt">;</span> i<span class="hl opt">++)</span>
            <span class="hl opt">{</span>
                <span class="hl kwd">MultiplyAtAv</span> <span class="hl opt">(</span>_u<span class="hl opt">,</span> _tmp<span class="hl opt">,</span> _v<span class="hl opt">);</span>
                <span class="hl kwd">MultiplyAtAv</span> <span class="hl opt">(</span>_v<span class="hl opt">,</span> _tmp<span class="hl opt">,</span> _u<span class="hl opt">);</span>
            <span class="hl opt">}</span>
            
            <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> range_begin<span class="hl opt">;</span> i <span class="hl opt">&lt;</span> range_end<span class="hl opt">;</span> i<span class="hl opt">++)</span>
            <span class="hl opt">{</span>
                m_vBv <span class="hl opt">+=</span> _u<span class="hl opt">[</span>i<span class="hl opt">] *</span> _v<span class="hl opt">[</span>i<span class="hl opt">];</span>
                m_vv  <span class="hl opt">+=</span> _v<span class="hl opt">[</span>i<span class="hl opt">] *</span> _v<span class="hl opt">[</span>i<span class="hl opt">];</span>
            <span class="hl opt">}</span>
        <span class="hl opt">}</span>
        
        <span class="hl com">/* return element i,j of infinite matrix A */</span>
        <span class="hl kwa">private final static</span> <span class="hl kwb">double</span> <span class="hl kwd">eval_A</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i<span class="hl opt">,</span> <span class="hl kwb">int</span> j<span class="hl opt">)</span>
        <span class="hl opt">{</span>
            <span class="hl kwb">int</span> div <span class="hl opt">= ( ((</span>i<span class="hl opt">+</span>j<span class="hl opt">) * (</span>i<span class="hl opt">+</span>j<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">) &gt;&gt;&gt;</span> <span class="hl num">1</span><span class="hl opt">) +</span>i<span class="hl opt">+</span><span class="hl num">1</span> <span class="hl opt">);</span>
            <span class="hl kwa">return</span> <span class="hl num">1.0</span> <span class="hl opt">/</span> div<span class="hl opt">;</span>
        <span class="hl opt">}</span>
        
        <span class="hl com">/* multiply vector v by matrix A, each thread evaluate its range only */</span>
        <span class="hl kwa">private final</span> <span class="hl kwb">void</span> <span class="hl kwd">MultiplyAv</span> <span class="hl opt">(</span><span class="hl kwa">final</span> <span class="hl kwb">double</span><span class="hl opt">[]</span> v<span class="hl opt">,</span> <span class="hl kwb">double</span><span class="hl opt">[]</span> Av<span class="hl opt">)</span>
        <span class="hl opt">{</span>
            <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> range_begin<span class="hl opt">;</span> i <span class="hl opt">&lt;</span> range_end<span class="hl opt">;</span> i<span class="hl opt">++)</span>
            <span class="hl opt">{</span>
                <span class="hl kwb">double</span> sum <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
                <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> j <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> j <span class="hl opt">&lt;</span> v<span class="hl opt">.</span>length<span class="hl opt">;</span> j<span class="hl opt">++)</span>
                    sum <span class="hl opt">+=</span> <span class="hl kwd">eval_A</span> <span class="hl opt">(</span>i<span class="hl opt">,</span> j<span class="hl opt">) *</span> v<span class="hl opt">[</span>j<span class="hl opt">];</span>
                
                Av<span class="hl opt">[</span>i<span class="hl opt">] =</span> sum<span class="hl opt">;</span>
            <span class="hl opt">}</span>
        <span class="hl opt">}</span>
        
        <span class="hl com">/* multiply vector v by matrix A transposed */</span>
        <span class="hl kwa">private final</span> <span class="hl kwb">void</span> <span class="hl kwd">MultiplyAtv</span> <span class="hl opt">(</span><span class="hl kwa">final</span> <span class="hl kwb">double</span><span class="hl opt">[]</span> v<span class="hl opt">,</span> <span class="hl kwb">double</span><span class="hl opt">[]</span> Atv<span class="hl opt">)</span>
        <span class="hl opt">{</span>
            <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> range_begin<span class="hl opt">;</span> i <span class="hl opt">&lt;</span> range_end<span class="hl opt">;</span> i<span class="hl opt">++)</span>
            <span class="hl opt">{</span>
                <span class="hl kwb">double</span> sum <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
                <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> j <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> j <span class="hl opt">&lt;</span> v<span class="hl opt">.</span>length<span class="hl opt">;</span> j<span class="hl opt">++)</span>
                    sum <span class="hl opt">+=</span> <span class="hl kwd">eval_A</span> <span class="hl opt">(</span>j<span class="hl opt">,</span> i<span class="hl opt">) *</span> v<span class="hl opt">[</span>j<span class="hl opt">];</span>
                
                Atv<span class="hl opt">[</span>i<span class="hl opt">] =</span> sum<span class="hl opt">;</span>
            <span class="hl opt">}</span>
        <span class="hl opt">}</span>
        
        <span class="hl com">/* multiply vector v by matrix A and then by matrix A transposed */</span>
        <span class="hl kwa">private final</span> <span class="hl kwb">void</span> <span class="hl kwd">MultiplyAtAv</span> <span class="hl opt">(</span><span class="hl kwa">final</span> <span class="hl kwb">double</span><span class="hl opt">[]</span> v<span class="hl opt">,</span> <span class="hl kwb">double</span><span class="hl opt">[]</span> tmp<span class="hl opt">,</span> <span class="hl kwb">double</span><span class="hl opt">[]</span> AtAv<span class="hl opt">)</span>
        <span class="hl opt">{</span>
            <span class="hl kwa">try</span>
            <span class="hl opt">{</span>
                <span class="hl kwd">MultiplyAv</span> <span class="hl opt">(</span>v<span class="hl opt">,</span> tmp<span class="hl opt">);</span>
                <span class="hl slc">// all thread must syn at completion</span>
                barrier<span class="hl opt">.</span><span class="hl kwd">await</span> <span class="hl opt">();</span>
                <span class="hl kwd">MultiplyAtv</span> <span class="hl opt">(</span>tmp<span class="hl opt">,</span> AtAv<span class="hl opt">);</span>
                <span class="hl slc">// all thread must syn at completion</span>
                barrier<span class="hl opt">.</span><span class="hl kwd">await</span> <span class="hl opt">();</span>
            <span class="hl opt">}</span>
            <span class="hl kwa">catch</span> <span class="hl opt">(</span>Exception e<span class="hl opt">)</span>
            <span class="hl opt">{</span>
                e<span class="hl opt">.</span><span class="hl kwd">printStackTrace</span> <span class="hl opt">();</span>
            <span class="hl opt">}</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span>
<span class="hl opt">}</span>
