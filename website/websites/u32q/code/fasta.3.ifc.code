<span class="hl slc">! The Computer Language Benchmarks Game</span>
<span class="hl slc">! http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">!</span>
<span class="hl slc">! fasta implementation - translated from the lua program</span>
<span class="hl slc">! contributed by Simon Geard, 18/1/05</span>
<span class="hl slc">! modified by Andrei Jirnyi</span>
<span class="hl slc">! 1 : baseline</span>
<span class="hl slc">! 1a: submitted (shorter a%p arrays)</span>
<span class="hl slc">! 1b: try float!</span>
<span class="hl slc">!</span>
<span class="hl slc">! Building info.</span>
<span class="hl slc">! ==============</span>
<span class="hl slc">!</span>
<span class="hl slc">! Linux  - using the Intel Fortran90 compiler:</span>
<span class="hl slc">!</span>
<span class="hl slc">!          ifort -fast -O3 fasta.f90</span>
<span class="hl slc">! or equivalently </span>
<span class="hl slc">!          ifort -xHost -no-prec-div -static -O3 fasta.f90</span>


<span class="hl kwa">program</span> fasta
  <span class="hl kwa">use</span> iso_fortran_env

 <span class="hl kwa">implicit none</span>
  <span class="hl kwa">integer</span> num
  <span class="hl kwa">character</span><span class="hl opt">(</span>len<span class="hl opt">=</span><span class="hl num">8</span><span class="hl opt">)</span> argv
  <span class="hl kwa">integer</span><span class="hl opt">,</span> <span class="hl kwa">parameter</span> <span class="hl opt">::</span> IM <span class="hl opt">=</span> <span class="hl num">139968</span><span class="hl opt">,</span> IA <span class="hl opt">=</span> <span class="hl num">3877</span><span class="hl opt">,</span> IC <span class="hl opt">=</span> <span class="hl num">29573</span>
  <span class="hl kwa">integer</span><span class="hl opt">,</span> <span class="hl kwa">parameter</span> <span class="hl opt">::</span> LW<span class="hl opt">=</span><span class="hl num">60</span>
  <span class="hl kwa">character</span><span class="hl opt">(</span>len<span class="hl opt">=*),</span> <span class="hl kwa">parameter</span> <span class="hl opt">::</span> alu <span class="hl opt">= &amp;</span>
<span class="hl str">'GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG'</span> <span class="hl opt">// &amp;</span>
<span class="hl str">'GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA'</span> <span class="hl opt">// &amp;</span>
<span class="hl str">'CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT'</span> <span class="hl opt">// &amp;</span>
<span class="hl str">'ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA'</span> <span class="hl opt">// &amp;</span>
<span class="hl str">'GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG'</span> <span class="hl opt">// &amp;</span>
<span class="hl str">'AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC'</span> <span class="hl opt">// &amp;</span>
<span class="hl str">'AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA'</span>
  <span class="hl kwa">character</span><span class="hl opt">(</span>len<span class="hl opt">=</span><span class="hl num">1</span><span class="hl opt">),</span> <span class="hl kwa">parameter</span> <span class="hl opt">::</span> EOL <span class="hl opt">=</span> <span class="hl kwd">achar</span><span class="hl opt">(</span><span class="hl num">10</span><span class="hl opt">)</span>

  <span class="hl kwa">type</span> pair
     <span class="hl kwa">character</span><span class="hl opt">(</span>len<span class="hl opt">=</span><span class="hl num">1</span><span class="hl opt">),</span><span class="hl kwa">dimension</span><span class="hl opt">(:),</span>allocatable <span class="hl opt">::</span> c
     <span class="hl kwa">real</span><span class="hl opt">,</span><span class="hl kwa">dimension</span><span class="hl opt">(:),</span>allocatable <span class="hl opt">::</span> p
  <span class="hl kwa">end type</span> pair
  
  <span class="hl kwa">type</span><span class="hl opt">(</span>pair<span class="hl opt">) ::</span> homosapiens
  <span class="hl kwa">type</span><span class="hl opt">(</span>pair<span class="hl opt">) ::</span> iub
  
  iub <span class="hl opt">=</span> <span class="hl kwd">mkpair</span><span class="hl opt">(</span><span class="hl num">15</span><span class="hl opt">,</span> c<span class="hl opt">=</span><span class="hl str">'acgtBDHKMNRSVWY'</span><span class="hl opt">,&amp;</span>
       <span class="hl opt">&amp;</span>       p<span class="hl opt">=[</span><span class="hl num">.27</span><span class="hl opt">,</span><span class="hl num">.12</span><span class="hl opt">,</span><span class="hl num">.12</span><span class="hl opt">,</span><span class="hl num">.27</span><span class="hl opt">,(</span><span class="hl num">.02</span><span class="hl opt">,</span>num<span class="hl opt">=</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">11</span><span class="hl opt">)])</span>
  homosapiens <span class="hl opt">=</span> <span class="hl kwd">mkpair</span><span class="hl opt">(</span><span class="hl num">4</span><span class="hl opt">,</span> c<span class="hl opt">=</span><span class="hl str">'acgt'</span><span class="hl opt">,&amp;</span>
                     <span class="hl opt">&amp;</span> p <span class="hl opt">= [</span><span class="hl num">0.3029549426680</span><span class="hl opt">,</span> <span class="hl num">0.1979883004921</span><span class="hl opt">, &amp;</span>
                            <span class="hl num">0.1975473066391</span><span class="hl opt">,</span> <span class="hl num">0.3015094502008</span><span class="hl opt">])</span>

  <span class="hl kwa">call</span> <span class="hl kwd">getarg</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">,</span>argv<span class="hl opt">)</span>
  <span class="hl kwa">read</span><span class="hl opt">(</span>argv<span class="hl opt">,*)</span> num
 
  <span class="hl kwa">close</span><span class="hl opt">(</span>output_unit<span class="hl opt">)</span>
  <span class="hl kwa">open</span><span class="hl opt">(</span>unit<span class="hl opt">=</span>output_unit<span class="hl opt">,</span> access<span class="hl opt">=</span><span class="hl str">'stream'</span><span class="hl opt">,</span>form<span class="hl opt">=</span><span class="hl str">'unformatted'</span><span class="hl opt">,</span>buffered<span class="hl opt">=</span><span class="hl str">'yes'</span><span class="hl opt">)</span>

  <span class="hl kwa">call</span> <span class="hl kwd">makeRepeatFasta</span><span class="hl opt">(</span><span class="hl str">'ONE'</span><span class="hl opt">,</span><span class="hl str">'Homo sapiens alu'</span><span class="hl opt">,</span>alu<span class="hl opt">,</span>num<span class="hl opt">*</span><span class="hl num">2</span><span class="hl opt">)</span>

  <span class="hl kwa">call</span> <span class="hl kwd">makeRandomFasta</span><span class="hl opt">(</span><span class="hl str">'TWO'</span><span class="hl opt">,</span><span class="hl str">'IUB ambiguity codes'</span><span class="hl opt">,</span>iub<span class="hl opt">,</span>num<span class="hl opt">*</span><span class="hl num">3</span><span class="hl opt">)</span>

  <span class="hl kwa">call</span> <span class="hl kwd">makeRandomFasta</span><span class="hl opt">(</span><span class="hl str">'THREE'</span><span class="hl opt">,</span><span class="hl str">'Homo sapiens frequency'</span><span class="hl opt">,</span>homosapiens<span class="hl opt">,</span>num<span class="hl opt">*</span><span class="hl num">5</span><span class="hl opt">)</span>

     
<span class="hl kwa">contains</span>

  <span class="hl kwa">type</span><span class="hl opt">(</span>pair<span class="hl opt">)</span> <span class="hl kwa">function</span> <span class="hl kwd">mkpair</span><span class="hl opt">(</span>n<span class="hl opt">,</span>c<span class="hl opt">,</span>p<span class="hl opt">)</span>
    <span class="hl kwa">integer</span><span class="hl opt">,</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>in<span class="hl opt">) ::</span> n
    <span class="hl kwa">character</span><span class="hl opt">(</span>len<span class="hl opt">=</span>n<span class="hl opt">) ::</span> c
    <span class="hl kwa">real</span> <span class="hl opt">::</span> <span class="hl kwd">p</span><span class="hl opt">(</span>n<span class="hl opt">),</span> z
    <span class="hl kwa">integer</span> <span class="hl opt">::</span> i<span class="hl opt">,</span>k
    <span class="hl kwd">allocate</span><span class="hl opt">(</span>mkpair<span class="hl opt">%</span><span class="hl kwd">c</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">:</span>n<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">))</span>
    <span class="hl kwd">allocate</span><span class="hl opt">(</span>mkpair<span class="hl opt">%</span><span class="hl kwd">p</span><span class="hl opt">(</span>n<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">))</span>
    z <span class="hl opt">=</span> <span class="hl num">0</span>
    k <span class="hl opt">=</span> <span class="hl num">1</span>
    <span class="hl kwa">do</span> i<span class="hl opt">=</span><span class="hl num">1</span><span class="hl opt">,</span>n<span class="hl opt">-</span><span class="hl num">1</span>
       mkpair<span class="hl opt">%</span><span class="hl kwd">c</span><span class="hl opt">(</span>i<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">) =</span> <span class="hl kwd">c</span><span class="hl opt">(</span>i<span class="hl opt">:</span>i<span class="hl opt">)</span>
       mkpair<span class="hl opt">%</span><span class="hl kwd">p</span><span class="hl opt">(</span>i<span class="hl opt">) =</span> z<span class="hl opt">+</span><span class="hl kwd">p</span><span class="hl opt">(</span>i<span class="hl opt">)</span>
       z <span class="hl opt">=</span> z<span class="hl opt">+</span><span class="hl kwd">p</span><span class="hl opt">(</span>i<span class="hl opt">)</span>
    <span class="hl kwa">end do</span>
    mkpair<span class="hl opt">%</span><span class="hl kwd">c</span><span class="hl opt">(</span>n<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">) =</span> <span class="hl kwd">c</span><span class="hl opt">(</span>n<span class="hl opt">:</span>n<span class="hl opt">)</span>
  <span class="hl kwa">end function</span> mkpair
  
  <span class="hl kwa">real function</span> <span class="hl kwd">getRandom</span> <span class="hl opt">()</span>
    <span class="hl kwa">integer</span><span class="hl opt">,</span> <span class="hl kwa">save</span> <span class="hl opt">::</span> last <span class="hl opt">=</span> <span class="hl num">42</span>
    last <span class="hl opt">=</span> <span class="hl kwd">mod</span><span class="hl opt">(</span>last <span class="hl opt">*</span> IA <span class="hl opt">+</span> IC<span class="hl opt">,</span> IM<span class="hl opt">)</span>
    getRandom <span class="hl opt">=</span> <span class="hl kwa">real</span><span class="hl opt">(</span>last<span class="hl opt">)/</span>IM
  <span class="hl kwa">end function</span> getRandom

  <span class="hl kwa">subroutine</span> <span class="hl kwd">makeRandomFasta</span><span class="hl opt">(</span>id<span class="hl opt">,</span>desc<span class="hl opt">,</span>a<span class="hl opt">,</span>n<span class="hl opt">)</span>
     <span class="hl kwa">character</span><span class="hl opt">(</span>len<span class="hl opt">=*),</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>in<span class="hl opt">) ::</span> id
     <span class="hl kwa">character</span><span class="hl opt">(</span>len<span class="hl opt">=*),</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>in<span class="hl opt">) ::</span> desc
     <span class="hl kwa">type</span><span class="hl opt">(</span>pair<span class="hl opt">),</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>inout<span class="hl opt">) ::</span> a
     <span class="hl kwa">integer</span><span class="hl opt">,</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>in<span class="hl opt">) ::</span> n
     <span class="hl kwa">character</span><span class="hl opt">(</span>len<span class="hl opt">=</span>LW<span class="hl opt">) ::</span> title
     <span class="hl kwa">character</span><span class="hl opt">(</span>len<span class="hl opt">=</span><span class="hl num">1</span><span class="hl opt">) ::</span> <span class="hl kwd">line</span><span class="hl opt">(</span>LW<span class="hl opt">)</span>
     <span class="hl kwa">integer</span> <span class="hl opt">::</span> j<span class="hl opt">,</span>l

     <span class="hl kwa">write</span><span class="hl opt">(</span>title<span class="hl opt">,</span><span class="hl str">'(4a)'</span><span class="hl opt">)</span> <span class="hl str">'&gt;'</span><span class="hl opt">,</span>id<span class="hl opt">,</span><span class="hl str">' '</span><span class="hl opt">,</span>desc
     <span class="hl kwa">write</span><span class="hl opt">(</span>output_unit<span class="hl opt">)</span> <span class="hl kwd">trim</span><span class="hl opt">(</span>title<span class="hl opt">),</span>EOL
     j <span class="hl opt">=</span> <span class="hl num">0</span>
     l <span class="hl opt">=</span> <span class="hl num">0</span>
     <span class="hl kwa">do</span>
        j <span class="hl opt">=</span> j<span class="hl opt">+</span><span class="hl num">1</span>
        l <span class="hl opt">=</span> l<span class="hl opt">+</span><span class="hl num">1</span>
        <span class="hl kwd">line</span><span class="hl opt">(</span>j<span class="hl opt">) =</span> a<span class="hl opt">%</span><span class="hl kwd">c</span><span class="hl opt">(</span><span class="hl kwd">count</span><span class="hl opt">(</span><span class="hl kwd">getRandom</span><span class="hl opt">() &gt;=</span> a<span class="hl opt">%</span>p<span class="hl opt">))</span>
        <span class="hl kwa">if</span><span class="hl opt">(</span>l <span class="hl opt">==</span> n<span class="hl opt">)</span> <span class="hl kwa">then</span>  <span class="hl slc">! last line, exit</span>
           <span class="hl kwa">write</span><span class="hl opt">(</span>output_unit<span class="hl opt">)</span> <span class="hl kwd">line</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">:</span>j<span class="hl opt">),</span>EOL
           exit
        <span class="hl kwa">end if</span>
        <span class="hl kwa">if</span><span class="hl opt">(</span>j <span class="hl opt">==</span> LW<span class="hl opt">)</span> <span class="hl kwa">then</span> <span class="hl slc">! write another line</span>
           j <span class="hl opt">=</span> <span class="hl num">0</span>
           <span class="hl kwa">write</span><span class="hl opt">(</span>output_unit<span class="hl opt">)</span> line<span class="hl opt">,</span>EOL
        <span class="hl kwa">end if</span>
     <span class="hl kwa">end do</span>
     <span class="hl kwd">flush</span><span class="hl opt">(</span>output_unit<span class="hl opt">)</span>
  <span class="hl kwa">end subroutine</span> makeRandomFasta

  <span class="hl kwa">subroutine</span> <span class="hl kwd">makeRepeatFasta</span><span class="hl opt">(</span>id<span class="hl opt">,</span>desc<span class="hl opt">,</span>s<span class="hl opt">,</span>n<span class="hl opt">)</span>
     <span class="hl kwa">character</span><span class="hl opt">(</span>len<span class="hl opt">=*),</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>in<span class="hl opt">) ::</span> id
     <span class="hl kwa">character</span><span class="hl opt">(</span>len<span class="hl opt">=*),</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>in<span class="hl opt">) ::</span> desc
     <span class="hl kwa">character</span><span class="hl opt">(</span>len<span class="hl opt">=*),</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>in<span class="hl opt">) ::</span> s
     <span class="hl kwa">integer</span><span class="hl opt">,</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>in<span class="hl opt">) ::</span> n
     <span class="hl kwa">integer</span> <span class="hl opt">::</span> j<span class="hl opt">,</span> k<span class="hl opt">,</span> l<span class="hl opt">,</span> kn
     <span class="hl kwa">integer</span><span class="hl opt">,</span> <span class="hl kwa">parameter</span> <span class="hl opt">::</span> length <span class="hl opt">=</span> <span class="hl num">60</span>
     <span class="hl kwa">character</span><span class="hl opt">(</span>len<span class="hl opt">=</span>LW<span class="hl opt">) ::</span> title
     <span class="hl kwa">character</span><span class="hl opt">(</span>len<span class="hl opt">=</span><span class="hl num">1</span><span class="hl opt">) ::</span> <span class="hl kwd">line</span><span class="hl opt">(</span>LW<span class="hl opt">)</span>
     <span class="hl kwa">intrinsic</span> len

     <span class="hl kwa">write</span><span class="hl opt">(</span>title<span class="hl opt">,</span><span class="hl str">'(4a)'</span><span class="hl opt">)</span> <span class="hl str">'&gt;'</span><span class="hl opt">,</span>id<span class="hl opt">,</span><span class="hl str">' '</span><span class="hl opt">,</span>desc
     <span class="hl kwa">write</span><span class="hl opt">(</span>output_unit<span class="hl opt">)</span> <span class="hl kwd">trim</span><span class="hl opt">(</span>title<span class="hl opt">),</span>EOL
     k <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span> kn <span class="hl opt">=</span> <span class="hl kwd">len</span><span class="hl opt">(</span>s<span class="hl opt">)</span>
     
     j <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl slc">! in output line</span>
     k <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl slc">! in repeat seq</span>
     l <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl slc">! generated count</span>
     <span class="hl kwa">do</span>
        j <span class="hl opt">=</span> j<span class="hl opt">+</span><span class="hl num">1</span>
        k <span class="hl opt">=</span> k<span class="hl opt">+</span><span class="hl num">1</span>
        l <span class="hl opt">=</span> l<span class="hl opt">+</span><span class="hl num">1</span>
        <span class="hl kwa">if</span><span class="hl opt">(</span>k<span class="hl opt">&gt;</span>kn<span class="hl opt">)</span> k<span class="hl opt">=</span><span class="hl num">1</span>
        <span class="hl kwd">line</span><span class="hl opt">(</span>j<span class="hl opt">) =</span> <span class="hl kwd">s</span><span class="hl opt">(</span>k<span class="hl opt">:</span>k<span class="hl opt">)</span>
        <span class="hl kwa">if</span><span class="hl opt">(</span>l <span class="hl opt">==</span> n<span class="hl opt">)</span> <span class="hl kwa">then</span>
           <span class="hl kwa">write</span><span class="hl opt">(</span>output_unit<span class="hl opt">)</span> <span class="hl kwd">line</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">:</span>j<span class="hl opt">),</span>EOL
           exit
        <span class="hl kwa">end if</span>
        <span class="hl kwa">if</span><span class="hl opt">(</span>j <span class="hl opt">==</span> LW<span class="hl opt">)</span> <span class="hl kwa">then</span>
           j <span class="hl opt">=</span> <span class="hl num">0</span>
           <span class="hl kwa">write</span><span class="hl opt">(</span>output_unit<span class="hl opt">)</span> line<span class="hl opt">,</span>EOL
        <span class="hl kwa">end if</span>
     <span class="hl kwa">end do</span>
     <span class="hl kwd">flush</span><span class="hl opt">(</span>output_unit<span class="hl opt">)</span>
  <span class="hl kwa">end subroutine</span> makeRepeatFasta

<span class="hl kwa">end program</span> fasta
