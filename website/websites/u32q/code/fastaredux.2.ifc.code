<span class="hl slc">! The Computer Language Benchmarks Game</span>
<span class="hl slc">! http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">!</span>
<span class="hl slc">! Contributed by Jason Blevins</span>
<span class="hl slc">! Adapted from the C version by Petr Prokhorenkov</span>

<span class="hl kwa">program</span> fastaredux
  <span class="hl kwa">implicit none</span>

  <span class="hl kwa">integer</span><span class="hl opt">,</span> <span class="hl kwa">parameter</span> <span class="hl opt">::</span> IM <span class="hl opt">=</span> <span class="hl num">139968</span>
  <span class="hl kwa">integer</span><span class="hl opt">,</span> <span class="hl kwa">parameter</span> <span class="hl opt">::</span> IA <span class="hl opt">=</span> <span class="hl num">3877</span>
  <span class="hl kwa">integer</span><span class="hl opt">,</span> <span class="hl kwa">parameter</span> <span class="hl opt">::</span> IC <span class="hl opt">=</span> <span class="hl num">29573</span>

  <span class="hl kwa">integer</span><span class="hl opt">,</span> <span class="hl kwa">parameter</span> <span class="hl opt">::</span> LINE_LEN <span class="hl opt">=</span> <span class="hl num">60</span>
  <span class="hl kwa">integer</span><span class="hl opt">,</span> <span class="hl kwa">parameter</span> <span class="hl opt">::</span> LOOKUP_SIZE <span class="hl opt">=</span> <span class="hl num">4096</span>
  <span class="hl kwa">real</span><span class="hl opt">,</span> <span class="hl kwa">parameter</span> <span class="hl opt">::</span> LOOKUP_SCALE <span class="hl opt">=</span> <span class="hl kwa">real</span><span class="hl opt">(</span>LOOKUP_SIZE <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">)</span>

  <span class="hl kwa">type</span> <span class="hl opt">::</span> random_t
     <span class="hl kwa">integer</span> <span class="hl opt">::</span> state <span class="hl opt">=</span> <span class="hl num">42</span>
  <span class="hl kwa">end type</span> random_t

  <span class="hl kwa">type</span> <span class="hl opt">::</span> amino_acid_t
     <span class="hl kwa">character</span><span class="hl opt">(</span>len<span class="hl opt">=</span><span class="hl num">1</span><span class="hl opt">) ::</span> sym
     <span class="hl kwa">real</span> <span class="hl opt">::</span> prob
     <span class="hl kwa">real</span> <span class="hl opt">::</span> cprob_lookup <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">.</span>d0
  <span class="hl kwa">end type</span> amino_acid_t

  <span class="hl kwa">type</span><span class="hl opt">(</span>amino_acid_t<span class="hl opt">),</span> <span class="hl kwa">dimension</span><span class="hl opt">(</span><span class="hl num">15</span><span class="hl opt">) ::</span> amino_acid <span class="hl opt">= (/ &amp;</span>
       <span class="hl kwd">amino_acid_t</span><span class="hl opt">(</span><span class="hl str">'a'</span><span class="hl opt">,</span> <span class="hl num">0.27</span><span class="hl opt">), &amp;</span>
       <span class="hl kwd">amino_acid_t</span><span class="hl opt">(</span><span class="hl str">'c'</span><span class="hl opt">,</span> <span class="hl num">0.12</span><span class="hl opt">), &amp;</span>
       <span class="hl kwd">amino_acid_t</span><span class="hl opt">(</span><span class="hl str">'g'</span><span class="hl opt">,</span> <span class="hl num">0.12</span><span class="hl opt">), &amp;</span>
       <span class="hl kwd">amino_acid_t</span><span class="hl opt">(</span><span class="hl str">'t'</span><span class="hl opt">,</span> <span class="hl num">0.27</span><span class="hl opt">), &amp;</span>
       <span class="hl kwd">amino_acid_t</span><span class="hl opt">(</span><span class="hl str">'B'</span><span class="hl opt">,</span> <span class="hl num">0.02</span><span class="hl opt">), &amp;</span>
       <span class="hl kwd">amino_acid_t</span><span class="hl opt">(</span><span class="hl str">'D'</span><span class="hl opt">,</span> <span class="hl num">0.02</span><span class="hl opt">), &amp;</span>
       <span class="hl kwd">amino_acid_t</span><span class="hl opt">(</span><span class="hl str">'H'</span><span class="hl opt">,</span> <span class="hl num">0.02</span><span class="hl opt">), &amp;</span>
       <span class="hl kwd">amino_acid_t</span><span class="hl opt">(</span><span class="hl str">'K'</span><span class="hl opt">,</span> <span class="hl num">0.02</span><span class="hl opt">), &amp;</span>
       <span class="hl kwd">amino_acid_t</span><span class="hl opt">(</span><span class="hl str">'M'</span><span class="hl opt">,</span> <span class="hl num">0.02</span><span class="hl opt">), &amp;</span>
       <span class="hl kwd">amino_acid_t</span><span class="hl opt">(</span><span class="hl str">'N'</span><span class="hl opt">,</span> <span class="hl num">0.02</span><span class="hl opt">), &amp;</span>
       <span class="hl kwd">amino_acid_t</span><span class="hl opt">(</span><span class="hl str">'R'</span><span class="hl opt">,</span> <span class="hl num">0.02</span><span class="hl opt">), &amp;</span>
       <span class="hl kwd">amino_acid_t</span><span class="hl opt">(</span><span class="hl str">'S'</span><span class="hl opt">,</span> <span class="hl num">0.02</span><span class="hl opt">), &amp;</span>
       <span class="hl kwd">amino_acid_t</span><span class="hl opt">(</span><span class="hl str">'V'</span><span class="hl opt">,</span> <span class="hl num">0.02</span><span class="hl opt">), &amp;</span>
       <span class="hl kwd">amino_acid_t</span><span class="hl opt">(</span><span class="hl str">'W'</span><span class="hl opt">,</span> <span class="hl num">0.02</span><span class="hl opt">), &amp;</span>
       <span class="hl kwd">amino_acid_t</span><span class="hl opt">(</span><span class="hl str">'Y'</span><span class="hl opt">,</span> <span class="hl num">0.02</span><span class="hl opt">)  &amp;</span>
       <span class="hl opt">/)</span>

  <span class="hl kwa">type</span><span class="hl opt">(</span>amino_acid_t<span class="hl opt">),</span> <span class="hl kwa">dimension</span><span class="hl opt">(</span><span class="hl num">4</span><span class="hl opt">) ::</span> homo_sapiens <span class="hl opt">= (/ &amp;</span>
       <span class="hl kwd">amino_acid_t</span><span class="hl opt">(</span><span class="hl str">'a'</span><span class="hl opt">,</span> <span class="hl num">0.3029549426680</span><span class="hl opt">), &amp;</span>
       <span class="hl kwd">amino_acid_t</span><span class="hl opt">(</span><span class="hl str">'c'</span><span class="hl opt">,</span> <span class="hl num">0.1979883004921</span><span class="hl opt">), &amp;</span>
       <span class="hl kwd">amino_acid_t</span><span class="hl opt">(</span><span class="hl str">'g'</span><span class="hl opt">,</span> <span class="hl num">0.1975473066391</span><span class="hl opt">), &amp;</span>
       <span class="hl kwd">amino_acid_t</span><span class="hl opt">(</span><span class="hl str">'t'</span><span class="hl opt">,</span> <span class="hl num">0.3015094502008</span><span class="hl opt">)  &amp;</span>
       <span class="hl opt">/)</span>

  <span class="hl kwa">character</span><span class="hl opt">(</span>len<span class="hl opt">=*),</span> <span class="hl kwa">parameter</span> <span class="hl opt">::</span> alu <span class="hl opt">= &amp;</span>
       <span class="hl str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTG&quot;</span> <span class="hl opt">// &amp;</span>
       <span class="hl str">&quot;GGAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGA&quot;</span> <span class="hl opt">// &amp;</span>
       <span class="hl str">&quot;GACCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAA&quot;</span> <span class="hl opt">// &amp;</span>
       <span class="hl str">&quot;AATACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAAT&quot;</span> <span class="hl opt">// &amp;</span>
       <span class="hl str">&quot;CCCAGCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAAC&quot;</span> <span class="hl opt">// &amp;</span>
       <span class="hl str">&quot;CCGGGAGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTG&quot;</span> <span class="hl opt">// &amp;</span>
       <span class="hl str">&quot;CACTCCAGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span>

  <span class="hl kwa">character</span><span class="hl opt">(</span>len<span class="hl opt">=</span><span class="hl num">60</span><span class="hl opt">) ::</span> arg
  <span class="hl kwa">integer</span> <span class="hl opt">::</span> n
  <span class="hl kwa">type</span><span class="hl opt">(</span>random_t<span class="hl opt">) ::</span> rand

  <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">command_argument_count</span><span class="hl opt">() &gt;</span> <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">then</span>
     <span class="hl kwa">call</span> <span class="hl kwd">get_command_argument</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">,</span> arg<span class="hl opt">)</span>
     <span class="hl kwa">read</span><span class="hl opt">(</span>arg<span class="hl opt">, *)</span> n
  <span class="hl kwa">else</span>
     n <span class="hl opt">=</span> <span class="hl num">512</span>
  <span class="hl kwa">end if</span>

  <span class="hl kwa">call</span> <span class="hl kwd">repeat</span><span class="hl opt">(</span><span class="hl str">&quot;&gt;ONE Homo sapiens alu&quot;</span><span class="hl opt">,</span> n<span class="hl opt">*</span><span class="hl num">2</span><span class="hl opt">)</span>
  <span class="hl kwa">call</span> <span class="hl kwd">randomize</span><span class="hl opt">(</span>amino_acid<span class="hl opt">,</span> <span class="hl str">&quot;&gt;TWO IUB ambiguity codes&quot;</span><span class="hl opt">,</span> n<span class="hl opt">*</span><span class="hl num">3</span><span class="hl opt">,</span> rand<span class="hl opt">)</span>
  <span class="hl kwa">call</span> <span class="hl kwd">randomize</span><span class="hl opt">(</span>homo_sapiens<span class="hl opt">,</span> <span class="hl str">&quot;&gt;THREE Homo sapiens frequency&quot;</span><span class="hl opt">,</span> n<span class="hl opt">*</span><span class="hl num">5</span><span class="hl opt">,</span> rand<span class="hl opt">)</span>

<span class="hl kwa">contains</span>

  <span class="hl slc">! Special version with result rescaled to LOOKUP_SCALE.</span>
  <span class="hl kwa">function</span> <span class="hl kwd">random_next_lookup</span><span class="hl opt">(</span>random<span class="hl opt">)</span>
    <span class="hl kwa">type</span><span class="hl opt">(</span>random_t<span class="hl opt">),</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>inout<span class="hl opt">) ::</span> random
    <span class="hl kwa">real</span> <span class="hl opt">::</span> random_next_lookup
    random<span class="hl opt">%</span>state <span class="hl opt">=</span> <span class="hl kwd">mod</span><span class="hl opt">(</span>random<span class="hl opt">%</span>state<span class="hl opt">*</span>IA <span class="hl opt">+</span> IC<span class="hl opt">,</span> IM<span class="hl opt">)</span>
    random_next_lookup <span class="hl opt">=</span> random<span class="hl opt">%</span>state <span class="hl opt">* (</span>LOOKUP_SCALE <span class="hl opt">/</span> IM<span class="hl opt">)</span>
  <span class="hl kwa">end function</span> random_next_lookup

  <span class="hl kwa">subroutine</span> <span class="hl kwd">repeat</span><span class="hl opt">(</span>title<span class="hl opt">,</span> n<span class="hl opt">)</span>
    <span class="hl kwa">character</span><span class="hl opt">(</span>len<span class="hl opt">=*),</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>in<span class="hl opt">) ::</span> title
    <span class="hl kwa">integer</span><span class="hl opt">,</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>in<span class="hl opt">) ::</span> n
    <span class="hl kwa">integer</span><span class="hl opt">,</span> <span class="hl kwa">parameter</span> <span class="hl opt">::</span> length <span class="hl opt">=</span> <span class="hl kwd">len</span><span class="hl opt">(</span>alu<span class="hl opt">)</span>
    <span class="hl kwa">character</span><span class="hl opt">(</span>len<span class="hl opt">=</span>length<span class="hl opt">+</span>LINE_LEN<span class="hl opt">) ::</span> buffer
    <span class="hl kwa">integer</span> <span class="hl opt">::</span> nn<span class="hl opt">,</span> pos<span class="hl opt">,</span> bytes

    nn <span class="hl opt">=</span> n
    pos <span class="hl opt">=</span> <span class="hl num">1</span>

    <span class="hl kwd">buffer</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">:</span>length<span class="hl opt">) =</span> alu
    <span class="hl kwd">buffer</span><span class="hl opt">(</span>length<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">:) =</span> alu

    <span class="hl kwa">print</span> <span class="hl str">'(a)'</span><span class="hl opt">,</span> title
    <span class="hl kwa">do while</span> <span class="hl opt">(</span>nn <span class="hl opt">&gt;</span> <span class="hl num">1</span><span class="hl opt">)</span>
       <span class="hl kwa">if</span> <span class="hl opt">(</span>nn <span class="hl opt">&gt;</span> LINE_LEN<span class="hl opt">)</span> <span class="hl kwa">then</span>
          bytes <span class="hl opt">=</span> LINE_LEN
       <span class="hl kwa">else</span>
          bytes <span class="hl opt">=</span> nn
       <span class="hl kwa">end if</span>

       <span class="hl kwa">print</span> <span class="hl str">'(a)'</span><span class="hl opt">,</span> <span class="hl kwd">buffer</span><span class="hl opt">(</span>pos<span class="hl opt">:</span>pos<span class="hl opt">+</span>bytes<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">)</span>
       pos <span class="hl opt">=</span> pos <span class="hl opt">+</span> bytes
       <span class="hl kwa">if</span> <span class="hl opt">(</span>pos <span class="hl opt">&gt;</span> length<span class="hl opt">)</span> <span class="hl kwa">then</span>
          pos <span class="hl opt">=</span> pos <span class="hl opt">-</span> length
       <span class="hl kwa">end if</span>
       nn <span class="hl opt">=</span> nn <span class="hl opt">-</span> bytes
    <span class="hl kwa">end do</span>
  <span class="hl kwa">end subroutine</span> repeat

  <span class="hl kwa">subroutine</span> <span class="hl kwd">fill_lookup</span><span class="hl opt">(</span>lookup<span class="hl opt">,</span> amino_acid<span class="hl opt">)</span>
    <span class="hl kwa">integer</span><span class="hl opt">,</span> <span class="hl kwa">dimension</span><span class="hl opt">(:),</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>out<span class="hl opt">) ::</span> lookup
    <span class="hl kwa">type</span><span class="hl opt">(</span>amino_acid_t<span class="hl opt">),</span> <span class="hl kwa">dimension</span><span class="hl opt">(:),</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>inout<span class="hl opt">) ::</span> amino_acid
    <span class="hl kwa">real</span> <span class="hl opt">::</span> p
    <span class="hl kwa">integer</span> <span class="hl opt">::</span> i<span class="hl opt">,</span> j

    p <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">.</span>d0

    <span class="hl kwa">do</span> i <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">,</span> <span class="hl kwd">size</span><span class="hl opt">(</span>amino_acid<span class="hl opt">)</span>
       p <span class="hl opt">=</span> p <span class="hl opt">+</span> <span class="hl kwd">amino_acid</span><span class="hl opt">(</span>i<span class="hl opt">)%</span>prob
       <span class="hl kwd">amino_acid</span><span class="hl opt">(</span>i<span class="hl opt">)%</span>cprob_lookup <span class="hl opt">=</span> p<span class="hl opt">*</span>LOOKUP_SCALE
    <span class="hl kwa">end do</span>

    <span class="hl slc">! Prevent rounding error.</span>
    <span class="hl kwd">amino_acid</span><span class="hl opt">(</span><span class="hl kwd">size</span><span class="hl opt">(</span>amino_acid<span class="hl opt">))%</span>cprob_lookup <span class="hl opt">=</span> LOOKUP_SIZE <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">.</span>d0

    j <span class="hl opt">=</span> <span class="hl num">1</span>
    <span class="hl kwa">do</span> i <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">,</span> LOOKUP_SIZE
       <span class="hl kwa">do while</span> <span class="hl opt">(</span><span class="hl kwd">amino_acid</span><span class="hl opt">(</span>j<span class="hl opt">)%</span>cprob_lookup <span class="hl opt">&lt;</span> i <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">)</span>
          j <span class="hl opt">=</span> j <span class="hl opt">+</span> <span class="hl num">1</span>
       <span class="hl kwa">end do</span>
       <span class="hl kwd">lookup</span><span class="hl opt">(</span>i<span class="hl opt">) =</span> j
    <span class="hl kwa">end do</span>
  <span class="hl kwa">end subroutine</span> fill_lookup

  <span class="hl kwa">subroutine</span> <span class="hl kwd">randomize</span><span class="hl opt">(</span>amino_acid<span class="hl opt">,</span> title<span class="hl opt">,</span> n<span class="hl opt">,</span> rand<span class="hl opt">)</span>
    <span class="hl kwa">type</span><span class="hl opt">(</span>amino_acid_t<span class="hl opt">),</span> <span class="hl kwa">dimension</span><span class="hl opt">(:),</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>inout<span class="hl opt">) ::</span> amino_acid
    <span class="hl kwa">character</span><span class="hl opt">(</span>len<span class="hl opt">=*),</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>in<span class="hl opt">) ::</span> title
    <span class="hl kwa">integer</span><span class="hl opt">,</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>in<span class="hl opt">) ::</span> n
    <span class="hl kwa">type</span><span class="hl opt">(</span>random_t<span class="hl opt">),</span> <span class="hl kwd">intent</span><span class="hl opt">(</span>inout<span class="hl opt">) ::</span> rand
    <span class="hl kwa">integer</span><span class="hl opt">,</span> <span class="hl kwa">dimension</span><span class="hl opt">(</span>LOOKUP_SIZE<span class="hl opt">) ::</span> lookup
    <span class="hl kwa">character</span><span class="hl opt">(</span>len<span class="hl opt">=</span>LINE_LEN<span class="hl opt">) ::</span> line_buffer
    <span class="hl kwa">integer</span> <span class="hl opt">::</span> i<span class="hl opt">,</span> j<span class="hl opt">,</span> u
    <span class="hl kwa">real</span> <span class="hl opt">::</span> r

    <span class="hl kwa">call</span> <span class="hl kwd">fill_lookup</span><span class="hl opt">(</span>lookup<span class="hl opt">,</span> amino_acid<span class="hl opt">)</span>

    <span class="hl kwa">print</span> <span class="hl str">'(a)'</span><span class="hl opt">,</span> title

    j <span class="hl opt">=</span> <span class="hl num">1</span>
    <span class="hl kwa">do</span> i <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">,</span> n
       r <span class="hl opt">=</span> <span class="hl kwd">random_next_lookup</span><span class="hl opt">(</span>rand<span class="hl opt">)</span>
       u <span class="hl opt">=</span> <span class="hl kwd">lookup</span><span class="hl opt">(</span><span class="hl kwd">int</span><span class="hl opt">(</span>r<span class="hl opt">)+</span><span class="hl num">1</span><span class="hl opt">)</span>
       <span class="hl kwa">do while</span> <span class="hl opt">(</span><span class="hl kwd">amino_acid</span><span class="hl opt">(</span>u<span class="hl opt">)%</span>cprob_lookup <span class="hl opt">&lt;</span> r<span class="hl opt">)</span>
          u <span class="hl opt">=</span> u <span class="hl opt">+</span> <span class="hl num">1</span>
       <span class="hl kwa">end do</span>

       <span class="hl kwd">line_buffer</span><span class="hl opt">(</span>j<span class="hl opt">:</span>j<span class="hl opt">) =</span> <span class="hl kwd">amino_acid</span><span class="hl opt">(</span>u<span class="hl opt">)%</span>sym

       <span class="hl kwa">if</span> <span class="hl opt">(</span>j <span class="hl opt">==</span> LINE_LEN<span class="hl opt">)</span> <span class="hl kwa">then</span>
          <span class="hl kwa">print</span> <span class="hl str">'(a)'</span><span class="hl opt">,</span> line_buffer
          j <span class="hl opt">=</span> <span class="hl num">1</span>
       <span class="hl kwa">else</span>
          j <span class="hl opt">=</span> j <span class="hl opt">+</span> <span class="hl num">1</span>
       <span class="hl kwa">end if</span>
    <span class="hl kwa">end do</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>j <span class="hl opt">&gt;</span> <span class="hl num">1</span><span class="hl opt">)</span> <span class="hl kwa">then</span>
       <span class="hl kwa">print</span> <span class="hl str">'(a)'</span><span class="hl opt">,</span> <span class="hl kwd">line_buffer</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">:</span>j<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">)</span>
    <span class="hl kwa">end if</span>
  <span class="hl kwa">end subroutine</span> randomize

<span class="hl kwa">end program</span> fastaredux
