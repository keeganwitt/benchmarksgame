<span class="hl slc">// The Computer Language Benchmarks Game</span>
<span class="hl slc">// http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">// Contributed by Paul Kitchin</span>

<span class="hl ppc">#include &lt;iostream&gt;</span>
<span class="hl ppc">#include &lt;iterator&gt;</span>
<span class="hl ppc">#include &lt;vector&gt;</span>

std<span class="hl opt">::</span><span class="hl kwb">size_t</span> line_length <span class="hl opt">=</span> <span class="hl num">60</span><span class="hl opt">;</span>

<span class="hl kwb">char</span> <span class="hl kwd">complement</span><span class="hl opt">(</span><span class="hl kwb">char</span> character<span class="hl opt">)</span>
<span class="hl opt">{</span>
   <span class="hl kwb">static char const</span> complement_map<span class="hl opt">[] =</span>
   <span class="hl opt">{</span>
      <span class="hl str">'\0'</span><span class="hl opt">,</span> <span class="hl str">'T'</span><span class="hl opt">,</span> <span class="hl str">'V'</span><span class="hl opt">,</span> <span class="hl str">'G'</span><span class="hl opt">,</span> <span class="hl str">'H'</span><span class="hl opt">,</span> <span class="hl str">'\0'</span><span class="hl opt">,</span> <span class="hl str">'\0'</span><span class="hl opt">,</span> <span class="hl str">'C'</span><span class="hl opt">,</span> <span class="hl str">'D'</span><span class="hl opt">,</span> <span class="hl str">'\0'</span><span class="hl opt">,</span> <span class="hl str">'\0'</span><span class="hl opt">,</span> <span class="hl str">'M'</span><span class="hl opt">,</span> <span class="hl str">'\0'</span><span class="hl opt">,</span> <span class="hl str">'K'</span><span class="hl opt">,</span> <span class="hl str">'N'</span><span class="hl opt">,</span> <span class="hl str">'\0'</span><span class="hl opt">,</span> <span class="hl str">'\0'</span><span class="hl opt">,</span> <span class="hl str">'\0'</span><span class="hl opt">,</span> <span class="hl str">'Y'</span><span class="hl opt">,</span> <span class="hl str">'S'</span><span class="hl opt">,</span> <span class="hl str">'A'</span><span class="hl opt">,</span> <span class="hl str">'A'</span><span class="hl opt">,</span> <span class="hl str">'B'</span><span class="hl opt">,</span> <span class="hl str">'W'</span><span class="hl opt">,</span> <span class="hl str">'\0'</span><span class="hl opt">,</span> <span class="hl str">'R'</span>
   <span class="hl opt">};</span>
   <span class="hl kwa">return</span> complement_map<span class="hl opt">[</span>character <span class="hl opt">&amp;</span> <span class="hl num">0x1f</span><span class="hl opt">];</span>
<span class="hl opt">}</span>

<span class="hl kwb">struct</span> chunk
<span class="hl opt">{</span>
   <span class="hl kwd">chunk</span><span class="hl opt">()</span>
      <span class="hl opt">:</span>
      <span class="hl kwd">previous</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">),</span>
      <span class="hl kwd">next</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">),</span>
      <span class="hl kwd">length</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">)</span>
   <span class="hl opt">{</span>
   <span class="hl opt">}</span>
   <span class="hl kwd">chunk</span><span class="hl opt">(</span>chunk <span class="hl opt">*</span> previous<span class="hl opt">)</span>
      <span class="hl opt">:</span>
      <span class="hl kwd">previous</span><span class="hl opt">(</span>previous<span class="hl opt">),</span>
      <span class="hl kwd">next</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">),</span>
      <span class="hl kwd">length</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">)</span>
   <span class="hl opt">{</span>
      previous<span class="hl opt">-&gt;</span>next <span class="hl opt">=</span> <span class="hl kwa">this</span><span class="hl opt">;</span>
   <span class="hl opt">}</span>
   chunk <span class="hl opt">*</span> previous<span class="hl opt">;</span>
   chunk <span class="hl opt">*</span> next<span class="hl opt">;</span>
   <span class="hl kwb">unsigned short</span> length<span class="hl opt">;</span>
   <span class="hl kwb">char</span> data<span class="hl opt">[</span><span class="hl num">65526</span><span class="hl opt">];</span>
<span class="hl opt">};</span>

<span class="hl kwb">void</span> <span class="hl kwd">write_reverse_complement</span><span class="hl opt">(</span>chunk <span class="hl opt">*</span> begin<span class="hl opt">,</span> chunk <span class="hl opt">*</span> end<span class="hl opt">)</span>
<span class="hl opt">{</span>
   chunk <span class="hl opt">*</span> start <span class="hl opt">=</span> begin<span class="hl opt">;</span>
   <span class="hl kwb">char</span> <span class="hl opt">*</span> begin_char <span class="hl opt">=</span> begin<span class="hl opt">-&gt;</span>data<span class="hl opt">;</span>
   <span class="hl kwb">char</span> <span class="hl opt">*</span> end_char <span class="hl opt">=</span> end<span class="hl opt">-&gt;</span>data <span class="hl opt">+</span> end<span class="hl opt">-&gt;</span>length <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">;</span>
   <span class="hl kwa">while</span> <span class="hl opt">(</span>begin <span class="hl opt">!=</span> end <span class="hl opt">||</span> begin_char <span class="hl opt">&lt;</span> end_char<span class="hl opt">)</span>
   <span class="hl opt">{</span>
      <span class="hl kwb">char</span> temp <span class="hl opt">=</span> <span class="hl kwd">complement</span><span class="hl opt">(*</span>begin_char<span class="hl opt">);</span>
      <span class="hl opt">*</span>begin_char<span class="hl opt">++ =</span> <span class="hl kwd">complement</span><span class="hl opt">(*</span>end_char<span class="hl opt">);</span>
      <span class="hl opt">*</span>end_char<span class="hl opt">-- =</span> temp<span class="hl opt">;</span>
      <span class="hl kwa">if</span> <span class="hl opt">(*</span>begin_char <span class="hl opt">==</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl opt">)</span>
      <span class="hl opt">{</span>
         <span class="hl opt">++</span>begin_char<span class="hl opt">;</span>
      <span class="hl opt">}</span>
      <span class="hl kwa">if</span> <span class="hl opt">(*</span>end_char <span class="hl opt">==</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl opt">)</span>
      <span class="hl opt">{</span>
         <span class="hl opt">--</span>end_char<span class="hl opt">;</span>
      <span class="hl opt">}</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>begin_char <span class="hl opt">==</span> begin<span class="hl opt">-&gt;</span>data <span class="hl opt">+</span> begin<span class="hl opt">-&gt;</span>length<span class="hl opt">)</span>
      <span class="hl opt">{</span>
         begin <span class="hl opt">=</span> begin<span class="hl opt">-&gt;</span>next<span class="hl opt">;</span>
         begin_char <span class="hl opt">=</span> begin<span class="hl opt">-&gt;</span>data<span class="hl opt">;</span>
         <span class="hl kwa">if</span> <span class="hl opt">(*</span>begin_char <span class="hl opt">==</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl opt">)</span>
         <span class="hl opt">{</span>
            <span class="hl opt">++</span>begin_char<span class="hl opt">;</span>
         <span class="hl opt">}</span>
      <span class="hl opt">}</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>end_char <span class="hl opt">==</span> end<span class="hl opt">-&gt;</span>data <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">)</span>
      <span class="hl opt">{</span>
         end <span class="hl opt">=</span> end<span class="hl opt">-&gt;</span>previous<span class="hl opt">;</span>
         end_char <span class="hl opt">=</span> end<span class="hl opt">-&gt;</span>data <span class="hl opt">+</span> end<span class="hl opt">-&gt;</span>length <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">;</span>
         <span class="hl kwa">if</span> <span class="hl opt">(*</span>end_char <span class="hl opt">==</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl opt">)</span>
         <span class="hl opt">{</span>
            <span class="hl opt">--</span>end_char<span class="hl opt">;</span>
         <span class="hl opt">}</span>
      <span class="hl opt">}</span>
   <span class="hl opt">}</span>
   <span class="hl kwa">while</span> <span class="hl opt">(</span>start<span class="hl opt">)</span>
   <span class="hl opt">{</span>
      std<span class="hl opt">::</span>cout<span class="hl opt">.</span><span class="hl kwd">write</span><span class="hl opt">(</span>start<span class="hl opt">-&gt;</span>data<span class="hl opt">,</span> start<span class="hl opt">-&gt;</span>length<span class="hl opt">);</span>
      chunk <span class="hl opt">*</span> last <span class="hl opt">=</span> start<span class="hl opt">;</span>
      start <span class="hl opt">=</span> start<span class="hl opt">-&gt;</span>next<span class="hl opt">;</span>
      <span class="hl kwa">delete</span> last<span class="hl opt">;</span>
   <span class="hl opt">}</span>
   std<span class="hl opt">::</span>cout<span class="hl opt">.</span><span class="hl kwd">put</span><span class="hl opt">(</span><span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">()</span>
<span class="hl opt">{</span>
   std<span class="hl opt">::</span>cin<span class="hl opt">.</span><span class="hl kwd">sync_with_stdio</span><span class="hl opt">(</span><span class="hl kwa">false</span><span class="hl opt">);</span>
   std<span class="hl opt">::</span>cout<span class="hl opt">.</span><span class="hl kwd">sync_with_stdio</span><span class="hl opt">(</span><span class="hl kwa">false</span><span class="hl opt">);</span>
   <span class="hl kwa">while</span> <span class="hl opt">(!</span>std<span class="hl opt">::</span>cin<span class="hl opt">.</span><span class="hl kwd">eof</span><span class="hl opt">())</span>
   <span class="hl opt">{</span>
      std<span class="hl opt">::</span>string header<span class="hl opt">;</span>
      std<span class="hl opt">::</span><span class="hl kwd">getline</span><span class="hl opt">(</span>std<span class="hl opt">::</span>cin<span class="hl opt">,</span> header<span class="hl opt">);</span>
      std<span class="hl opt">::</span>cout <span class="hl opt">&lt;&lt;</span> header <span class="hl opt">&lt;&lt;</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl opt">;</span>
      chunk <span class="hl opt">*</span> start <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">chunk</span><span class="hl opt">();</span>
      chunk <span class="hl opt">*</span> end <span class="hl opt">=</span> start<span class="hl opt">;</span>
      <span class="hl kwa">while</span> <span class="hl opt">(!</span>std<span class="hl opt">::</span>cin<span class="hl opt">.</span><span class="hl kwd">eof</span><span class="hl opt">() &amp;&amp;</span> std<span class="hl opt">::</span>cin<span class="hl opt">.</span><span class="hl kwd">peek</span><span class="hl opt">() !=</span> <span class="hl str">'&gt;'</span><span class="hl opt">)</span>
      <span class="hl opt">{</span>
         <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> line <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> line <span class="hl opt">&lt;</span> <span class="hl num">1074</span> <span class="hl opt">&amp;&amp; !</span>std<span class="hl opt">::</span>cin<span class="hl opt">.</span><span class="hl kwd">eof</span><span class="hl opt">() &amp;&amp;</span> std<span class="hl opt">::</span>cin<span class="hl opt">.</span><span class="hl kwd">peek</span><span class="hl opt">() !=</span> <span class="hl str">'&gt;'</span><span class="hl opt">; ++</span>line<span class="hl opt">)</span>
         <span class="hl opt">{</span>
            std<span class="hl opt">::</span>cin<span class="hl opt">.</span><span class="hl kwd">getline</span><span class="hl opt">(</span>end<span class="hl opt">-&gt;</span>data <span class="hl opt">+</span> end<span class="hl opt">-&gt;</span>length<span class="hl opt">,</span> line_length <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">);</span>
            end<span class="hl opt">-&gt;</span>length <span class="hl opt">+=</span> std<span class="hl opt">::</span>cin<span class="hl opt">.</span><span class="hl kwd">gcount</span><span class="hl opt">();</span>
            <span class="hl opt">*(</span>end<span class="hl opt">-&gt;</span>data <span class="hl opt">+</span> end<span class="hl opt">-&gt;</span>length <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">) =</span> <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl opt">;</span>
         <span class="hl opt">}</span>
         <span class="hl kwa">if</span> <span class="hl opt">(!</span>std<span class="hl opt">::</span>cin<span class="hl opt">.</span><span class="hl kwd">eof</span><span class="hl opt">() &amp;&amp;</span> std<span class="hl opt">::</span>cin<span class="hl opt">.</span><span class="hl kwd">peek</span><span class="hl opt">() !=</span> <span class="hl str">'&gt;'</span><span class="hl opt">)</span>
         <span class="hl opt">{</span>
            end <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">chunk</span><span class="hl opt">(</span>end<span class="hl opt">);</span>
         <span class="hl opt">}</span>
      <span class="hl opt">}</span>
      <span class="hl opt">--</span>end<span class="hl opt">-&gt;</span>length<span class="hl opt">;</span>
      <span class="hl kwd">write_reverse_complement</span><span class="hl opt">(</span>start<span class="hl opt">,</span> end<span class="hl opt">);</span>
   <span class="hl opt">}</span>
<span class="hl opt">}</span>
