<span class="hl slc"># The Computer Language Benchmarks Game</span>
<span class="hl slc"># http://benchmarksgame.alioth.debian.org</span>
<span class="hl slc">#</span>
<span class="hl slc"># contributed by Jesse Millikan</span>
<span class="hl slc"># Modified by Wesley Moxam</span>
<span class="hl slc"># Modified &amp;&amp; Parallelised by Scott Leggett</span>

<span class="hl kwa">module</span> MiniParallel
    <span class="hl kwa">class</span> Worker
        <span class="hl kwa">def</span> <span class="hl kwd">initialize</span><span class="hl opt">(</span>read<span class="hl opt">,</span> write)
            <span class="hl kwb">&#64;read</span><span class="hl opt">,</span> <span class="hl kwb">&#64;write</span> <span class="hl opt">=</span> read<span class="hl opt">,</span> write
        <span class="hl kwa">end</span>

        <span class="hl kwa">def</span> close_pipes
            <span class="hl kwb">&#64;read</span><span class="hl opt">.</span>close
            <span class="hl kwb">&#64;write</span><span class="hl opt">.</span>close
        <span class="hl kwa">end</span>

        <span class="hl kwa">def</span> <span class="hl kwd">work</span><span class="hl opt">(</span>index)
            Marshal<span class="hl opt">.</span><span class="hl kwd">dump</span><span class="hl opt">(</span>index<span class="hl opt">,</span> <span class="hl kwb">&#64;write</span>)
            Marshal<span class="hl opt">.</span><span class="hl kwd">load</span><span class="hl opt">(</span><span class="hl kwb">&#64;read</span>)
        <span class="hl kwa">end</span>
    <span class="hl kwa">end</span>

    <span class="hl kwa">def self</span><span class="hl opt">.</span><span class="hl kwd">map</span><span class="hl opt">(</span>array<span class="hl opt">, &amp;</span>block)
        <span class="hl kwd">work_in_processes</span><span class="hl opt">(</span>
            array<span class="hl opt">,</span>
            <span class="hl opt">[</span>array<span class="hl opt">.</span>size<span class="hl opt">,</span> core_count<span class="hl opt">].</span>min<span class="hl opt">,</span>
            <span class="hl opt">&amp;</span>block
        )
    <span class="hl kwa">end</span>

    <span class="hl kwa">def self</span><span class="hl opt">.</span>core_count
        &#64;<span class="hl kwb">&#64;core_count</span> <span class="hl opt">||=</span> IO<span class="hl opt">.</span><span class="hl kwd">read</span><span class="hl opt">(</span><span class="hl str">&quot;/proc/cpuinfo&quot;</span>)<span class="hl opt">.</span><span class="hl kwd">scan</span><span class="hl opt">(</span><span class="hl kwc">/^processor/</span>)<span class="hl opt">.</span>size
    <span class="hl kwa">end</span>

    private

    <span class="hl kwa">def self</span><span class="hl opt">.</span><span class="hl kwd">work_in_processes</span><span class="hl opt">(</span>array<span class="hl opt">,</span> count<span class="hl opt">, &amp;</span>block)
        index <span class="hl opt">= -</span><span class="hl num">1</span>
        results<span class="hl opt">,</span> threads <span class="hl opt">= [], []</span>

        workers <span class="hl opt">=</span> <span class="hl kwd">create_workers</span><span class="hl opt">(</span>array<span class="hl opt">,</span> count<span class="hl opt">, &amp;</span>block)

        workers<span class="hl opt">.</span>each <span class="hl kwa">do</span> <span class="hl opt">|</span>worker<span class="hl opt">|</span>
            threads <span class="hl opt">&lt;&lt;</span> Thread<span class="hl opt">.</span>new <span class="hl kwa">do</span>
              <span class="hl kwa">loop do</span>
                Thread<span class="hl opt">.</span>exclusive<span class="hl esc">{ index += 1 }</span>
                <span class="hl kwa">break if</span> index <span class="hl opt">&gt;=</span> array<span class="hl opt">.</span>size
                results<span class="hl opt">[</span>index<span class="hl opt">] =</span> worker<span class="hl opt">.</span><span class="hl kwd">work</span><span class="hl opt">(</span>index)
              <span class="hl kwa">end</span>
              worker<span class="hl opt">.</span>close_pipes
            <span class="hl kwa">end</span>
        <span class="hl kwa">end</span>

        threads<span class="hl opt">.</span><span class="hl kwd">each</span><span class="hl opt">(&amp;</span><span class="hl kwc">:join</span>)
        Process<span class="hl opt">.</span>waitall

        results
    <span class="hl kwa">end</span>

    <span class="hl kwa">def self</span><span class="hl opt">.</span><span class="hl kwd">create_workers</span><span class="hl opt">(</span>array<span class="hl opt">,</span> count<span class="hl opt">, &amp;</span>block)
        workers <span class="hl opt">= []</span>
        count<span class="hl opt">.</span>times <span class="hl kwa">do</span>
            workers <span class="hl opt">&lt;&lt;</span> <span class="hl kwd">create_worker</span><span class="hl opt">(</span>array<span class="hl opt">,</span> workers<span class="hl opt">, &amp;</span>block)
        <span class="hl kwa">end</span>
        workers
    <span class="hl kwa">end</span>

    <span class="hl kwa">def self</span><span class="hl opt">.</span><span class="hl kwd">create_worker</span><span class="hl opt">(</span>array<span class="hl opt">,</span> started_workers<span class="hl opt">, &amp;</span>block)
        child_read<span class="hl opt">,</span> parent_write <span class="hl opt">=</span> IO<span class="hl opt">.</span>pipe
        parent_read<span class="hl opt">,</span> child_write <span class="hl opt">=</span> IO<span class="hl opt">.</span>pipe

        Process<span class="hl opt">.</span>fork <span class="hl kwa">do</span>
            started_workers<span class="hl opt">.</span><span class="hl kwd">each</span><span class="hl opt">(&amp;</span><span class="hl kwc">:close_pipes</span>)

            parent_write<span class="hl opt">.</span>close
            parent_read<span class="hl opt">.</span>close

            <span class="hl kwd">process_incoming_jobs</span><span class="hl opt">(</span>child_read<span class="hl opt">,</span> child_write<span class="hl opt">,</span> array<span class="hl opt">, &amp;</span>block)

            child_read<span class="hl opt">.</span>close
            child_write<span class="hl opt">.</span>close
        <span class="hl kwa">end</span>

        child_read<span class="hl opt">.</span>close
        child_write<span class="hl opt">.</span>close

        Worker<span class="hl opt">.</span><span class="hl kwd">new</span><span class="hl opt">(</span>parent_read<span class="hl opt">,</span> parent_write)
    <span class="hl kwa">end</span>

    <span class="hl kwa">def self</span><span class="hl opt">.</span><span class="hl kwd">process_incoming_jobs</span><span class="hl opt">(</span>read<span class="hl opt">,</span> write<span class="hl opt">,</span> array<span class="hl opt">, &amp;</span>block)
        <span class="hl kwa">until</span> read<span class="hl opt">.</span>eof<span class="hl opt">?</span>
            index <span class="hl opt">=</span> Marshal<span class="hl opt">.</span><span class="hl kwd">load</span><span class="hl opt">(</span>read)
            Marshal<span class="hl opt">.</span><span class="hl kwd">dump</span><span class="hl opt">(</span>block<span class="hl opt">.</span><span class="hl kwd">call</span><span class="hl opt">(</span>array<span class="hl opt">[</span>index<span class="hl opt">]</span>)<span class="hl opt">,</span> write)
        <span class="hl kwa">end</span>
    <span class="hl kwa">end</span>
<span class="hl kwa">end</span>

<span class="hl kwa">def</span> <span class="hl kwd">item_check</span><span class="hl opt">(</span>left<span class="hl opt">,</span> item<span class="hl opt">,</span> right)
    <span class="hl kwa">if</span> left
        item <span class="hl opt">+</span> <span class="hl kwd">item_check</span><span class="hl opt">(*</span>left) <span class="hl opt">-</span> <span class="hl kwd">item_check</span><span class="hl opt">(*</span>right)
    <span class="hl kwa">else</span>
        item
    <span class="hl kwa">end</span>
<span class="hl kwa">end</span>

<span class="hl kwa">def</span> <span class="hl kwd">bottom_up_tree</span><span class="hl opt">(</span>item<span class="hl opt">,</span> depth)
    <span class="hl kwa">if</span> depth <span class="hl opt">&gt;</span> <span class="hl num">0</span>
        item_item <span class="hl opt">=</span> <span class="hl num">2</span> <span class="hl opt">*</span> item
        depth <span class="hl opt">-=</span> <span class="hl num">1</span>
        <span class="hl opt">[</span><span class="hl kwd">bottom_up_tree</span><span class="hl opt">(</span>item_item <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">,</span> depth)<span class="hl opt">,</span> item<span class="hl opt">,</span> <span class="hl kwd">bottom_up_tree</span><span class="hl opt">(</span>item_item<span class="hl opt">,</span> depth)<span class="hl opt">]</span>
    <span class="hl kwa">else</span>
        <span class="hl opt">[</span><span class="hl kwa">nil</span><span class="hl opt">,</span> item<span class="hl opt">,</span> <span class="hl kwa">nil</span><span class="hl opt">]</span>
    <span class="hl kwa">end</span>
<span class="hl kwa">end</span>

max_depth <span class="hl opt">=</span> <span class="hl kwc">ARGV</span><span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">].</span>to_i
min_depth <span class="hl opt">=</span> <span class="hl num">4</span>

max_depth <span class="hl opt">= [</span>min_depth <span class="hl opt">+</span> <span class="hl num">2</span><span class="hl opt">,</span> max_depth<span class="hl opt">].</span>max

stretch_depth <span class="hl opt">=</span> max_depth <span class="hl opt">+</span> <span class="hl num">1</span>
stretch_tree <span class="hl opt">=</span> <span class="hl kwd">bottom_up_tree</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> stretch_depth)

puts <span class="hl str">&quot;stretch tree of depth</span> <span class="hl esc">#{stretch_depth}</span><span class="hl str">\t check:</span> <span class="hl esc">#{item_check(*stretch_tree)}</span><span class="hl str">&quot;</span>
stretch_tree <span class="hl opt">=</span> <span class="hl kwa">nil</span>

long_lived_tree <span class="hl opt">=</span> <span class="hl kwd">bottom_up_tree</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> max_depth)

<span class="hl kwa">if</span> MiniParallel<span class="hl opt">.</span>core_count <span class="hl opt">&gt;</span> <span class="hl num">1</span>
    <span class="hl kwa">if</span> <span class="hl kwc">RUBY_PLATFORM</span> <span class="hl opt">==</span> <span class="hl str">'java'</span>
        output <span class="hl opt">= []</span>
        threads <span class="hl opt">= []</span>
        min_depth<span class="hl opt">.</span><span class="hl kwd">step</span><span class="hl opt">(</span>max_depth <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">2</span>)<span class="hl opt">.</span>to_a<span class="hl opt">.</span>each<span class="hl opt">.</span>with_index <span class="hl kwa">do</span> <span class="hl opt">|</span>depth<span class="hl opt">,</span>j<span class="hl opt">|</span>
            threads <span class="hl opt">&lt;&lt;</span> Thread<span class="hl opt">.</span>new <span class="hl kwa">do</span>
                iterations <span class="hl opt">=</span> <span class="hl num">2</span><span class="hl opt">**(</span>max_depth <span class="hl opt">-</span> depth <span class="hl opt">+</span> min_depth)

                check <span class="hl opt">=</span> <span class="hl num">0</span>

                <span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">..</span>iterations)<span class="hl opt">.</span>each <span class="hl kwa">do</span> <span class="hl opt">|</span>i<span class="hl opt">|</span>
                    check <span class="hl opt">+=</span> <span class="hl kwd">item_check</span><span class="hl opt">(*</span><span class="hl kwd">bottom_up_tree</span><span class="hl opt">(</span>i<span class="hl opt">,</span> depth)) <span class="hl opt">+</span>
                        <span class="hl kwd">item_check</span><span class="hl opt">(*</span><span class="hl kwd">bottom_up_tree</span><span class="hl opt">(-</span>i<span class="hl opt">,</span> depth))
                <span class="hl kwa">end</span>

                output<span class="hl opt">[</span>j<span class="hl opt">] =</span> <span class="hl str">&quot;</span><span class="hl esc">#{iterations * 2}</span><span class="hl str">\t trees of depth</span> <span class="hl esc">#{depth}</span><span class="hl str">\t check:</span> <span class="hl esc">#{check}</span><span class="hl str">&quot;</span>
            <span class="hl kwa">end</span>
        <span class="hl kwa">end</span>
        threads<span class="hl opt">.</span>all<span class="hl opt">?(&amp;</span><span class="hl kwc">:join</span>)
        output<span class="hl opt">.</span>each<span class="hl esc">{|l| puts l}</span>
    <span class="hl kwa">else</span>
        MiniParallel<span class="hl opt">.</span><span class="hl kwd">map</span><span class="hl opt">(</span>min_depth<span class="hl opt">.</span><span class="hl kwd">step</span><span class="hl opt">(</span>max_depth <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">2</span>)<span class="hl opt">.</span>to_a) <span class="hl kwa">do</span> <span class="hl opt">|</span>depth<span class="hl opt">|</span>
            iterations <span class="hl opt">=</span> <span class="hl num">2</span><span class="hl opt">**(</span>max_depth <span class="hl opt">-</span> depth <span class="hl opt">+</span> min_depth)

            check <span class="hl opt">=</span> <span class="hl num">0</span>

            <span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">..</span>iterations)<span class="hl opt">.</span>each <span class="hl kwa">do</span> <span class="hl opt">|</span>i<span class="hl opt">|</span>
                check <span class="hl opt">+=</span> <span class="hl kwd">item_check</span><span class="hl opt">(*</span><span class="hl kwd">bottom_up_tree</span><span class="hl opt">(</span>i<span class="hl opt">,</span> depth)) <span class="hl opt">+</span>
                    <span class="hl kwd">item_check</span><span class="hl opt">(*</span><span class="hl kwd">bottom_up_tree</span><span class="hl opt">(-</span>i<span class="hl opt">,</span> depth))
            <span class="hl kwa">end</span>

            <span class="hl str">&quot;</span><span class="hl esc">#{iterations * 2}</span><span class="hl str">\t trees of depth</span> <span class="hl esc">#{depth}</span><span class="hl str">\t check:</span> <span class="hl esc">#{check}</span><span class="hl str">&quot;</span>
        <span class="hl kwa">end</span><span class="hl opt">.</span>each<span class="hl esc">{|l| puts l}</span>
    <span class="hl kwa">end</span>
<span class="hl kwa">else</span>
    min_depth<span class="hl opt">.</span><span class="hl kwd">step</span><span class="hl opt">(</span>max_depth <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">2</span>)<span class="hl opt">.</span>each <span class="hl kwa">do</span> <span class="hl opt">|</span>depth<span class="hl opt">|</span>
        iterations <span class="hl opt">=</span> <span class="hl num">2</span><span class="hl opt">**(</span>max_depth <span class="hl opt">-</span> depth <span class="hl opt">+</span> min_depth)

        check <span class="hl opt">=</span> <span class="hl num">0</span>

        <span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">..</span>iterations)<span class="hl opt">.</span>each <span class="hl kwa">do</span> <span class="hl opt">|</span>i<span class="hl opt">|</span>
            check <span class="hl opt">+=</span> <span class="hl kwd">item_check</span><span class="hl opt">(*</span><span class="hl kwd">bottom_up_tree</span><span class="hl opt">(</span>i<span class="hl opt">,</span> depth)) <span class="hl opt">+</span>
                <span class="hl kwd">item_check</span><span class="hl opt">(*</span><span class="hl kwd">bottom_up_tree</span><span class="hl opt">(-</span>i<span class="hl opt">,</span> depth))
        <span class="hl kwa">end</span>

        puts <span class="hl str">&quot;</span><span class="hl esc">#{iterations * 2}</span><span class="hl str">\t trees of depth</span> <span class="hl esc">#{depth}</span><span class="hl str">\t check:</span> <span class="hl esc">#{check}</span><span class="hl str">&quot;</span>
    <span class="hl kwa">end</span>
<span class="hl kwa">end</span>

puts <span class="hl str">&quot;long lived tree of depth</span> <span class="hl esc">#{max_depth}</span><span class="hl str">\t check:</span> <span class="hl esc">#{item_check(*long_lived_tree)}</span><span class="hl str">&quot;</span>
