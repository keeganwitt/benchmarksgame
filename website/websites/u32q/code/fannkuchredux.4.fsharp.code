<span class="hl com">(* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   from C# version by Isaac Gouy, transliterated from Mike Pall's Lua program </span>
<span class="hl com"></span>
<span class="hl com">*)</span>
<span class="hl kwa">open</span> <span class="hl kwd">System</span>

<span class="hl kwa">let</span> fannkuch n <span class="hl opt">=</span>
   <span class="hl kwa">let</span> p <span class="hl opt">=</span> <span class="hl kwd">Array</span><span class="hl opt">.</span>init n id
   <span class="hl kwa">let</span> q <span class="hl opt">=</span> <span class="hl kwd">Array</span><span class="hl opt">.</span>init n id
   <span class="hl kwa">let</span> s <span class="hl opt">=</span> <span class="hl kwd">Array</span><span class="hl opt">.</span>init n id
   <span class="hl kwa">let mutable</span> sign <span class="hl opt">=</span> <span class="hl num">1</span>
   <span class="hl kwa">let mutable</span> maxflips <span class="hl opt">=</span> <span class="hl num">0</span>
   <span class="hl kwa">let mutable</span> sum <span class="hl opt">=</span> <span class="hl num">0</span>
   <span class="hl kwa">let mutable</span> m <span class="hl opt">=</span> n <span class="hl opt">-</span> <span class="hl num">1</span>
   <span class="hl kwa">let mutable</span> ret <span class="hl opt">=</span> <span class="hl kwa">false</span>
   <span class="hl kwa">let mutable</span> res <span class="hl opt">= (</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">0</span><span class="hl opt">)</span>
   <span class="hl kwa">while</span> not ret <span class="hl kwa">do</span> 
         <span class="hl slc">// Copy and flip.</span>
         <span class="hl kwa">let mutable</span> q0 <span class="hl opt">=</span> p<span class="hl opt">.[</span><span class="hl num">0</span><span class="hl opt">]</span>                                    <span class="hl slc">// Cache 0th element.</span>
         <span class="hl kwa">if</span> <span class="hl opt">(</span>q0 <span class="hl opt">&lt;&gt;</span> <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">then</span>
            <span class="hl kwa">for</span> i <span class="hl kwa">in</span> <span class="hl num">1</span> <span class="hl opt">..</span> n <span class="hl opt">-</span> <span class="hl num">1</span> <span class="hl kwa">do</span> q<span class="hl opt">.[</span>i<span class="hl opt">] &lt;-</span> p<span class="hl opt">.[</span>i<span class="hl opt">]</span>             <span class="hl slc">// Work on a copy.</span>
            <span class="hl kwa">let mutable</span> flips <span class="hl opt">=</span> <span class="hl num">1</span>
            <span class="hl kwa">let mutable</span> brk <span class="hl opt">=</span> <span class="hl kwa">false</span>
            <span class="hl kwa">while</span> not brk <span class="hl kwa">do</span>
              <span class="hl kwa">let mutable</span> qq <span class="hl opt">=</span> q<span class="hl opt">.[</span>q0<span class="hl opt">]</span> 
              <span class="hl kwa">if</span> <span class="hl opt">(</span>qq <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">then</span>                                <span class="hl slc">// ... until 0th element is 0.</span>
                  sum <span class="hl opt">&lt;-</span> sum <span class="hl opt">+</span> sign<span class="hl opt">*</span>flips
                  <span class="hl kwa">if</span> <span class="hl opt">(</span>flips <span class="hl opt">&gt;</span> maxflips<span class="hl opt">)</span> <span class="hl kwa">then</span> maxflips <span class="hl opt">&lt;-</span> flips    <span class="hl slc">// New maximum?</span>
                  brk <span class="hl opt">&lt;-</span> <span class="hl kwa">true</span>
               
              <span class="hl kwa">else</span>
                  q<span class="hl opt">.[</span>q0<span class="hl opt">] &lt;-</span> q0
                  <span class="hl kwa">if</span> <span class="hl opt">(</span>q0 <span class="hl opt">&gt;=</span> <span class="hl num">3</span><span class="hl opt">)</span> <span class="hl kwa">then</span>
                      <span class="hl kwa">let mutable</span> i <span class="hl opt">=</span> <span class="hl num">1</span>
                      <span class="hl kwa">let mutable</span> j <span class="hl opt">=</span> q0 <span class="hl opt">-</span> <span class="hl num">1</span>
                      <span class="hl kwa">let mutable</span> brk2 <span class="hl opt">=</span> <span class="hl kwa">false</span>
                      <span class="hl kwa">while</span> not brk2 <span class="hl kwa">do</span> 
                          <span class="hl kwa">let</span> t <span class="hl opt">=</span> q<span class="hl opt">.[</span>i<span class="hl opt">]</span>
                          q<span class="hl opt">.[</span>i<span class="hl opt">] &lt;-</span> q<span class="hl opt">.[</span>j<span class="hl opt">]</span>
                          q<span class="hl opt">.[</span>j<span class="hl opt">] &lt;-</span> t
                          i <span class="hl opt">&lt;-</span> i <span class="hl opt">+</span> <span class="hl num">1</span>
                          j <span class="hl opt">&lt;-</span> j <span class="hl opt">-</span> <span class="hl num">1</span>
                          <span class="hl kwa">if</span> <span class="hl opt">(</span>i <span class="hl opt">&gt;=</span> j<span class="hl opt">)</span> <span class="hl kwa">then</span> brk2 <span class="hl opt">&lt;-</span> <span class="hl kwa">true</span>
               
                  q0 <span class="hl opt">&lt;-</span> qq
                  flips <span class="hl opt">&lt;-</span> flips<span class="hl opt">+</span><span class="hl num">1</span>
            
             <span class="hl slc">// Permute.</span>
         <span class="hl kwa">if</span> <span class="hl opt">(</span>sign <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">)</span> <span class="hl kwa">then</span>
             <span class="hl kwa">let</span> t <span class="hl opt">=</span> p<span class="hl opt">.[</span><span class="hl num">1</span><span class="hl opt">]</span>
             p<span class="hl opt">.[</span><span class="hl num">1</span><span class="hl opt">] &lt;-</span> p<span class="hl opt">.[</span><span class="hl num">0</span><span class="hl opt">]</span>
             p<span class="hl opt">.[</span><span class="hl num">0</span><span class="hl opt">] &lt;-</span> t
             sign <span class="hl opt">&lt;- -</span><span class="hl num">1</span> <span class="hl slc">// Rotate 0&lt;-1.</span>
         <span class="hl kwa">else</span> 
             <span class="hl kwa">let</span> t <span class="hl opt">=</span> p<span class="hl opt">.[</span><span class="hl num">1</span><span class="hl opt">]</span>
             p<span class="hl opt">.[</span><span class="hl num">1</span><span class="hl opt">] &lt;-</span> p<span class="hl opt">.[</span><span class="hl num">2</span><span class="hl opt">]</span>
             p<span class="hl opt">.[</span><span class="hl num">2</span><span class="hl opt">] &lt;-</span> t
             sign <span class="hl opt">&lt;-</span> <span class="hl num">1</span>  <span class="hl slc">// Rotate 0&lt;-1 and 0&lt;-1&lt;-2.</span>
             <span class="hl kwa">let mutable</span> i <span class="hl opt">=</span> <span class="hl num">2</span>
             <span class="hl kwa">let mutable</span> brk2 <span class="hl opt">=</span> <span class="hl kwa">false</span> 
             <span class="hl kwa">while</span> not ret <span class="hl opt">&amp;&amp;</span> not brk2 <span class="hl kwa">do</span> 
                 <span class="hl kwa">if</span> i <span class="hl opt">&lt;</span> n <span class="hl kwa">then</span> 
                     
                     <span class="hl kwa">let mutable</span> sx <span class="hl opt">=</span> s<span class="hl opt">.[</span>i<span class="hl opt">]</span>
                     <span class="hl kwa">if</span> <span class="hl opt">(</span>sx <span class="hl opt">&lt;&gt;</span> <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">then</span> 
                         s<span class="hl opt">.[</span>i<span class="hl opt">] &lt;-</span> sx<span class="hl opt">-</span><span class="hl num">1</span>
                         brk2 <span class="hl opt">&lt;-</span> <span class="hl kwa">true</span>
                     elif <span class="hl opt">(</span>i <span class="hl opt">=</span> m<span class="hl opt">)</span> <span class="hl kwa">then</span> 
                         ret <span class="hl opt">&lt;-</span> <span class="hl kwa">true</span>
                         res <span class="hl opt">&lt;- (</span>sum<span class="hl opt">,</span> maxflips<span class="hl opt">)</span>  <span class="hl slc">// Out of permutations.</span>
                     <span class="hl kwa">else</span> 
                         s<span class="hl opt">.[</span>i<span class="hl opt">] &lt;-</span> i
                         <span class="hl slc">// Rotate 0&lt;-...&lt;-i+1.</span>
                         <span class="hl kwa">let</span> t <span class="hl opt">=</span> p<span class="hl opt">.[</span><span class="hl num">0</span><span class="hl opt">]</span>
                         <span class="hl kwa">for</span> j <span class="hl kwa">in</span> <span class="hl num">0</span> <span class="hl opt">..</span> i <span class="hl kwa">do</span>
                             p<span class="hl opt">.[</span>j<span class="hl opt">] &lt;-</span> p<span class="hl opt">.[</span>j<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">]</span>
                         p<span class="hl opt">.[</span>i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">] &lt;-</span> t
                     i <span class="hl opt">&lt;-</span> i <span class="hl opt">+</span> <span class="hl num">1</span>
                 <span class="hl kwa">else</span> 
                     brk2 <span class="hl opt">&lt;-</span> <span class="hl kwa">true</span>
   res

<span class="hl opt">[&lt;</span><span class="hl kwd">EntryPoint</span><span class="hl opt">&gt;]</span>
<span class="hl kwa">let</span> main argv <span class="hl opt">=</span> 
    <span class="hl kwa">let</span> n <span class="hl opt">=</span> <span class="hl kwa">if</span> <span class="hl opt">(</span>argv<span class="hl opt">.</span><span class="hl kwd">Length</span> <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">then</span> <span class="hl kwd">Int32</span><span class="hl opt">.</span><span class="hl kwd">Parse</span><span class="hl opt">(</span>argv<span class="hl opt">.[</span><span class="hl num">0</span><span class="hl opt">])</span> <span class="hl kwa">else</span> <span class="hl num">7</span>
    <span class="hl kwa">let</span> <span class="hl opt">(</span>sum<span class="hl opt">,</span>maxflips<span class="hl opt">) =</span> fannkuch n
    <span class="hl kwd">Console</span><span class="hl opt">.</span><span class="hl kwd">Write</span><span class="hl opt">(</span><span class="hl str">&quot;{0}</span><span class="hl esc">\n</span><span class="hl str">Pfannkuchen({1}) = {2}</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> sum<span class="hl opt">,</span> n<span class="hl opt">,</span> maxflips<span class="hl opt">)</span>
    <span class="hl num">0</span>
