<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com">  contributed by Isaac Gouy</span>
<span class="hl com">  modified and updated for 2.8 by Rex Kerr</span>
<span class="hl com">*/</span>

<span class="hl kwa">import</span> java<span class="hl opt">.</span>io<span class="hl opt">.</span>_

<span class="hl kwa">object</span> regexdna <span class="hl opt">{</span>
  <span class="hl kwa">def</span> <span class="hl kwd">main</span><span class="hl opt">(</span>args<span class="hl opt">:</span> Array<span class="hl opt">[</span>String<span class="hl opt">]) {</span>

    <span class="hl kwa">var</span> sequence <span class="hl opt">=</span> <span class="hl kwd">readFully</span><span class="hl opt">()</span>
    <span class="hl kwa">val</span> initialLength <span class="hl opt">=</span> sequence<span class="hl opt">.</span>length

    <span class="hl kwa">def</span> <span class="hl kwd">matching</span><span class="hl opt">(</span>s<span class="hl opt">:</span> String<span class="hl opt">) =</span> java<span class="hl opt">.</span>util<span class="hl opt">.</span>regex<span class="hl opt">.</span>Pattern<span class="hl opt">.</span><span class="hl kwd">compile</span><span class="hl opt">(</span>s<span class="hl opt">).</span><span class="hl kwd">matcher</span><span class="hl opt">(</span>sequence<span class="hl opt">)</span>

    <span class="hl slc">// remove FASTA sequence descriptions and new-lines</span>
    sequence <span class="hl opt">=</span> <span class="hl kwd">matching</span><span class="hl opt">(</span><span class="hl str">&quot;&gt;.*</span><span class="hl esc">\n</span><span class="hl str">|</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">).</span><span class="hl kwd">replaceAll</span><span class="hl opt">(</span><span class="hl str">&quot;&quot;</span><span class="hl opt">)</span>
    <span class="hl kwa">val</span> codeLength <span class="hl opt">=</span> sequence<span class="hl opt">.</span>length

    <span class="hl slc">// regex match</span>
    <span class="hl kwd">Array</span><span class="hl opt">(</span>
      <span class="hl str">&quot;agggtaaa|tttaccct&quot;</span><span class="hl opt">,</span>
      <span class="hl str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span><span class="hl opt">,</span>
      <span class="hl str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span><span class="hl opt">,</span>
      <span class="hl str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span><span class="hl opt">,</span>
      <span class="hl str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span><span class="hl opt">,</span>
      <span class="hl str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span><span class="hl opt">,</span>
      <span class="hl str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span><span class="hl opt">,</span>
      <span class="hl str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span><span class="hl opt">,</span>
      <span class="hl str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span>
    <span class="hl opt">).</span><span class="hl kwd">map</span><span class="hl opt">(</span>v <span class="hl opt">=&gt; {</span>
      <span class="hl kwa">var</span> count <span class="hl opt">=</span> <span class="hl num">0</span>
      <span class="hl kwa">val</span> m <span class="hl opt">=</span> <span class="hl kwd">matching</span><span class="hl opt">(</span>v<span class="hl opt">)</span>
      <span class="hl kwa">while</span> <span class="hl opt">(</span>m<span class="hl opt">.</span><span class="hl kwd">find</span><span class="hl opt">())</span> count <span class="hl opt">+=</span> <span class="hl num">1</span>
      <span class="hl kwd">println</span><span class="hl opt">(</span>v <span class="hl opt">+</span> <span class="hl str">&quot; &quot;</span> <span class="hl opt">+</span> count<span class="hl opt">)</span>
    <span class="hl opt">})</span>

    <span class="hl slc">// regex substitution</span>
    <span class="hl kwd">Array</span><span class="hl opt">(</span>
      <span class="hl opt">(</span><span class="hl str">&quot;B&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(c|g|t)&quot;</span><span class="hl opt">),</span>
      <span class="hl opt">(</span><span class="hl str">&quot;D&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(a|g|t)&quot;</span><span class="hl opt">),</span>
      <span class="hl opt">(</span><span class="hl str">&quot;H&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(a|c|t)&quot;</span><span class="hl opt">),</span>
      <span class="hl opt">(</span><span class="hl str">&quot;K&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(g|t)&quot;</span><span class="hl opt">),</span>
      <span class="hl opt">(</span><span class="hl str">&quot;M&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(a|c)&quot;</span><span class="hl opt">),</span>
      <span class="hl opt">(</span><span class="hl str">&quot;N&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(a|c|g|t)&quot;</span><span class="hl opt">),</span>
      <span class="hl opt">(</span><span class="hl str">&quot;R&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(a|g)&quot;</span><span class="hl opt">),</span>
      <span class="hl opt">(</span><span class="hl str">&quot;S&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(c|g)&quot;</span><span class="hl opt">),</span>
      <span class="hl opt">(</span><span class="hl str">&quot;V&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(a|c|g)&quot;</span><span class="hl opt">),</span>
      <span class="hl opt">(</span><span class="hl str">&quot;W&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(a|t)&quot;</span><span class="hl opt">),</span>
      <span class="hl opt">(</span><span class="hl str">&quot;Y&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;(c|t)&quot;</span><span class="hl opt">)</span>
    <span class="hl opt">).</span><span class="hl kwd">foreach</span><span class="hl opt">(</span>iub <span class="hl opt">=&gt;</span> sequence <span class="hl opt">=</span> <span class="hl kwd">matching</span><span class="hl opt">(</span>iub<span class="hl opt">.</span>_1<span class="hl opt">).</span><span class="hl kwd">replaceAll</span><span class="hl opt">(</span>iub<span class="hl opt">.</span>_2<span class="hl opt">) )</span>

    <span class="hl kwd">println</span><span class="hl opt">(</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> <span class="hl opt">+</span> initialLength <span class="hl opt">+</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> <span class="hl opt">+</span> codeLength <span class="hl opt">+</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> <span class="hl opt">+</span> sequence<span class="hl opt">.</span>length<span class="hl opt">)</span>
  <span class="hl opt">}</span>

  <span class="hl kwa">def</span> <span class="hl kwd">readFully</span><span class="hl opt">() = {</span>
    <span class="hl kwa">val</span> block <span class="hl opt">=</span> <span class="hl kwa">new</span> Array<span class="hl opt">[</span>Char<span class="hl opt">](</span><span class="hl num">10240</span><span class="hl opt">)</span>
    <span class="hl kwa">val</span> buffer <span class="hl opt">=</span> <span class="hl kwa">new</span> StringBuffer
    <span class="hl kwa">val</span> r <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">InputStreamReader</span><span class="hl opt">(</span>System<span class="hl opt">.</span><span class="hl kwa">in</span><span class="hl opt">)</span>

    Iterator<span class="hl opt">.</span>
      <span class="hl kwd">continually</span><span class="hl opt">(</span>r<span class="hl opt">.</span><span class="hl kwd">read</span><span class="hl opt">(</span>block<span class="hl opt">)).</span>
      <span class="hl kwd">takeWhile</span><span class="hl opt">(</span>_ <span class="hl opt">&gt; -</span><span class="hl num">1</span><span class="hl opt">).</span>
      <span class="hl kwd">foreach</span><span class="hl opt">(</span>n <span class="hl opt">=&gt;</span> buffer<span class="hl opt">.</span><span class="hl kwd">append</span><span class="hl opt">(</span>block<span class="hl opt">,</span><span class="hl num">0</span><span class="hl opt">,</span>n<span class="hl opt">))</span>

   r<span class="hl opt">.</span>close
   buffer<span class="hl opt">.</span>toString
  <span class="hl opt">}</span>
<span class="hl opt">}</span>
