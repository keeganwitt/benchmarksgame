<span class="hl slc">--</span>
<span class="hl slc">-- The Computer Language Benchmarks Game</span>
<span class="hl slc">-- http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">--</span>
<span class="hl slc">--   Sterling Clover's translation of Tim Hochberg's Clean implementation</span>

<span class="hl kwd">module</span> Main <span class="hl kwd">where</span>
<span class="hl kwd">import</span> System<span class="hl opt">.</span>Environment
<span class="hl kwd">import</span> Data<span class="hl opt">.</span>Bits
<span class="hl kwd">import</span> Data<span class="hl opt">.</span>List <span class="hl kwd">hiding</span> <span class="hl opt">(</span>permutations<span class="hl opt">)</span>
<span class="hl kwd">import</span> Data<span class="hl opt">.</span><span class="hl kwb">Array</span><span class="hl opt">.</span>IArray
<span class="hl kwd">import</span> Data<span class="hl opt">.</span><span class="hl kwb">Array</span><span class="hl opt">.</span>Unboxed
<span class="hl kwd">import</span> Control<span class="hl opt">.</span>Arrow

<span class="hl slc">--- The Board ---</span>
n_elem <span class="hl opt">=</span> <span class="hl num">5</span>
n_col <span class="hl opt">=</span> <span class="hl num">5</span>
n_row <span class="hl opt">=</span> <span class="hl num">10</span>

m_top <span class="hl opt">::</span> Mask
m_top <span class="hl opt">=</span> <span class="hl num">0x1F</span>

cells <span class="hl opt">:: [</span>Cell<span class="hl opt">]</span>
cells <span class="hl opt">= [</span><span class="hl num">0</span><span class="hl opt">.</span><span class="hl num">.49</span><span class="hl opt">]</span>

colors <span class="hl opt">:: [</span>Color<span class="hl opt">]</span>
colors <span class="hl opt">= [</span><span class="hl num">0</span><span class="hl opt">.</span><span class="hl num">.9</span><span class="hl opt">]</span>

cellAt x y <span class="hl opt">=</span> x <span class="hl opt">+</span> n_col <span class="hl opt">*</span> y
coordOf i <span class="hl opt">=</span> <span class="hl kwc">snd</span> <span class="hl opt">&amp;&amp;&amp;</span> <span class="hl kwc">fst</span> <span class="hl opt">$</span> i `<span class="hl kwc">quotRem</span>` n_col
isValid x y <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl opt">&lt;=</span> x <span class="hl opt">&amp;&amp;</span> x <span class="hl opt">&lt;</span> n_col <span class="hl opt">&amp;&amp;</span> <span class="hl num">0</span> <span class="hl opt">&lt;=</span> y <span class="hl opt">&amp;&amp;</span> y <span class="hl opt">&lt;</span> n_row

<span class="hl slc">--- Piece Operations ---</span>
<span class="hl kwd">data</span> Direction <span class="hl opt">=</span> E | SE | SW | W | NW | NE <span class="hl kwd">deriving</span> <span class="hl opt">(</span>Enum<span class="hl opt">,</span> Eq<span class="hl opt">,</span> Ord<span class="hl opt">)</span>
<span class="hl kwd">type</span> Piece <span class="hl opt">= [</span>Direction<span class="hl opt">]</span>
<span class="hl kwd">type</span> CellCoord <span class="hl opt">= (</span><span class="hl kwb">Int</span><span class="hl opt">,</span> <span class="hl kwb">Int</span><span class="hl opt">)</span>
<span class="hl kwd">type</span> Mask <span class="hl opt">=</span> <span class="hl kwb">Int</span><span class="hl opt">;</span> <span class="hl kwd">type</span> Color <span class="hl opt">=</span> <span class="hl kwb">Int</span><span class="hl opt">;</span> <span class="hl kwd">type</span> Row <span class="hl opt">=</span> <span class="hl kwb">Int</span><span class="hl opt">;</span>
<span class="hl kwd">type</span> Col <span class="hl opt">=</span> <span class="hl kwb">Int</span><span class="hl opt">;</span> <span class="hl kwd">type</span> Tag <span class="hl opt">=</span> <span class="hl kwb">Int</span><span class="hl opt">;</span> <span class="hl kwd">type</span> Cell <span class="hl opt">=</span> <span class="hl kwb">Int</span>
<span class="hl kwd">type</span> Solution <span class="hl opt">= [</span>Mask<span class="hl opt">]</span>

pieces <span class="hl opt">::</span> <span class="hl kwb">Array Int</span> Piece
pieces <span class="hl opt">=</span> <span class="hl kwa">array</span> <span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">9</span><span class="hl opt">) $</span> <span class="hl kwc">zip</span> <span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">.</span><span class="hl num">.9</span><span class="hl opt">] $</span>
         <span class="hl opt">[[</span>E<span class="hl opt">,</span>  E<span class="hl opt">,</span>  E<span class="hl opt">,</span>  SE<span class="hl opt">],</span>
	  <span class="hl opt">[</span>SE<span class="hl opt">,</span> SW<span class="hl opt">,</span> W<span class="hl opt">,</span>  SW<span class="hl opt">],</span>
	  <span class="hl opt">[</span>W<span class="hl opt">,</span>  W<span class="hl opt">,</span>  SW<span class="hl opt">,</span> SE<span class="hl opt">],</span>
	  <span class="hl opt">[</span>E<span class="hl opt">,</span>  E<span class="hl opt">,</span>  SW<span class="hl opt">,</span> SE<span class="hl opt">],</span>
	  <span class="hl opt">[</span>NW<span class="hl opt">,</span> W<span class="hl opt">,</span>  NW<span class="hl opt">,</span> SE<span class="hl opt">,</span> SW<span class="hl opt">],</span>
	  <span class="hl opt">[</span>E<span class="hl opt">,</span>  E<span class="hl opt">,</span>  NE<span class="hl opt">,</span> W<span class="hl opt">],</span>
	  <span class="hl opt">[</span>NW<span class="hl opt">,</span> NE<span class="hl opt">,</span> NE<span class="hl opt">,</span> W<span class="hl opt">],</span>
	  <span class="hl opt">[</span>NE<span class="hl opt">,</span> SE<span class="hl opt">,</span> E<span class="hl opt">,</span>  NE<span class="hl opt">],</span>
	  <span class="hl opt">[</span>SE<span class="hl opt">,</span> SE<span class="hl opt">,</span> E<span class="hl opt">,</span>  SE<span class="hl opt">],</span>
	  <span class="hl opt">[</span>E<span class="hl opt">,</span>  NW<span class="hl opt">,</span> NW<span class="hl opt">,</span> NW<span class="hl opt">]]</span>

permutations <span class="hl opt">::</span> Piece <span class="hl opt">-&gt; [</span>Piece<span class="hl opt">]</span>
permutations p <span class="hl opt">=</span> <span class="hl kwc">take</span> <span class="hl num">12</span> <span class="hl opt">(</span>perms p<span class="hl opt">)</span>
    <span class="hl kwd">where</span>
      perms p <span class="hl opt">=</span> p<span class="hl opt">:(</span><span class="hl kwc">flip</span> p<span class="hl opt">) :</span> perms <span class="hl opt">(</span>rotate p<span class="hl opt">)</span>
      rotate piece <span class="hl opt">=</span> <span class="hl kwc">map</span> r piece
          <span class="hl kwd">where</span> r E  <span class="hl opt">=</span> NE
                r NE <span class="hl opt">=</span> NW
                r NW <span class="hl opt">=</span> W
                r W  <span class="hl opt">=</span> SW
                r SW <span class="hl opt">=</span> SE
                r SE <span class="hl opt">=</span> E
      <span class="hl kwc">flip</span> piece <span class="hl opt">=</span> <span class="hl kwc">map</span> f piece
          <span class="hl kwd">where</span> f E  <span class="hl opt">=</span> W
                f NE <span class="hl opt">=</span> NW
                f NW <span class="hl opt">=</span> NE
                f W  <span class="hl opt">=</span> E
                f SW <span class="hl opt">=</span> SE
                f SE <span class="hl opt">=</span> SW

<span class="hl slc">--- Mask Operations ----</span>
untag <span class="hl opt">::</span> Mask <span class="hl opt">-&gt;</span> Mask
untag mask   <span class="hl opt">=</span> mask <span class="hl opt">.&amp;.</span> <span class="hl num">0x1ffffff</span>

retag <span class="hl opt">::</span> Mask <span class="hl opt">-&gt;</span> Tag <span class="hl opt">-&gt;</span> Mask
retag mask n <span class="hl opt">=</span> untag mask <span class="hl opt">.</span>|<span class="hl opt">.</span> n `shiftL` <span class="hl num">25</span>

tagof <span class="hl opt">::</span> Mask <span class="hl opt">-&gt;</span> Tag
tagof mask   <span class="hl opt">=</span> mask `shiftR` <span class="hl num">25</span>

tag <span class="hl opt">::</span> Mask <span class="hl opt">-&gt;</span> Tag <span class="hl opt">-&gt;</span> Mask
tag   mask n <span class="hl opt">=</span> mask <span class="hl opt">.</span>|<span class="hl opt">.</span> n `shiftL` <span class="hl num">25</span>

count1s <span class="hl opt">::</span> Mask <span class="hl opt">-&gt;</span> <span class="hl kwb">Int</span>
count1s i 
    | i <span class="hl opt">==</span> <span class="hl num">0</span> <span class="hl opt">=</span> <span class="hl num">0</span>
    | i <span class="hl opt">.&amp;.</span> <span class="hl num">1</span> <span class="hl opt">==</span> <span class="hl num">1</span> <span class="hl opt">=</span> <span class="hl num">1</span> <span class="hl opt">+</span> count1s <span class="hl opt">(</span>i `shiftR` <span class="hl num">1</span><span class="hl opt">)</span>
    | <span class="hl kwc">otherwise</span> <span class="hl opt">=</span> count1s <span class="hl opt">(</span>i `shiftR` <span class="hl num">1</span><span class="hl opt">)</span>

first0 <span class="hl opt">::</span> Mask <span class="hl opt">-&gt;</span> <span class="hl kwb">Int</span>
first0 i 
    | i <span class="hl opt">.&amp;.</span> <span class="hl num">1</span> <span class="hl opt">==</span> <span class="hl num">0</span> <span class="hl opt">=</span> <span class="hl num">0</span>
    | <span class="hl kwc">otherwise</span> <span class="hl opt">=</span> <span class="hl num">1</span> <span class="hl opt">+</span> first0 <span class="hl opt">(</span>i `shiftR` <span class="hl num">1</span><span class="hl opt">)</span>

<span class="hl slc">--- Making the Bitmasks ---</span>
mod2 x <span class="hl opt">=</span> x <span class="hl opt">.&amp;.</span> <span class="hl num">1</span>
packSize a b <span class="hl opt">=</span> a<span class="hl opt">*</span><span class="hl num">5</span><span class="hl opt">+</span>b
unpackSize n <span class="hl opt">=</span> <span class="hl kwc">quotRem</span> n <span class="hl num">5</span>

move <span class="hl opt">::</span> Direction <span class="hl opt">-&gt;</span> CellCoord <span class="hl opt">-&gt;</span> CellCoord
move E  <span class="hl opt">(</span>x<span class="hl opt">,</span> y<span class="hl opt">) = (</span>x<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">,</span> y<span class="hl opt">)</span>
move W  <span class="hl opt">(</span>x<span class="hl opt">,</span> y<span class="hl opt">) = (</span>x<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">,</span> y<span class="hl opt">)</span>
move NE <span class="hl opt">(</span>x<span class="hl opt">,</span> y<span class="hl opt">) = (</span>x<span class="hl opt">+(</span>mod2 y<span class="hl opt">),</span>   y<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">)</span>
move NW <span class="hl opt">(</span>x<span class="hl opt">,</span> y<span class="hl opt">) = (</span>x<span class="hl opt">+(</span>mod2 y<span class="hl opt">)-</span><span class="hl num">1</span><span class="hl opt">,</span> y<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">)</span>
move SE <span class="hl opt">(</span>x<span class="hl opt">,</span> y<span class="hl opt">) = (</span>x<span class="hl opt">+(</span>mod2 y<span class="hl opt">),</span>   y<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)</span>
move SW <span class="hl opt">(</span>x<span class="hl opt">,</span> y<span class="hl opt">) = (</span>x<span class="hl opt">+(</span>mod2 y<span class="hl opt">)-</span><span class="hl num">1</span><span class="hl opt">,</span> y<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)</span>

pieceBounds <span class="hl opt">::</span> Piece <span class="hl opt">-&gt;</span> <span class="hl kwb">Bool</span> <span class="hl opt">-&gt; (</span><span class="hl kwb">Int</span><span class="hl opt">,</span> <span class="hl kwb">Int</span><span class="hl opt">,</span> <span class="hl kwb">Int</span><span class="hl opt">,</span> <span class="hl kwb">Int</span><span class="hl opt">)</span>
pieceBounds piece isodd <span class="hl opt">=</span> bnds piece <span class="hl num">0</span> y0 <span class="hl num">0</span> y0 <span class="hl num">0</span> y0
  <span class="hl kwd">where</span>
    y0 | isodd <span class="hl opt">=</span> <span class="hl num">1</span> | <span class="hl kwc">otherwise</span> <span class="hl opt">=</span> <span class="hl num">0</span>
    bnds <span class="hl opt">[]</span> _ _ xmin ymin xmax ymax <span class="hl opt">= (</span>xmin<span class="hl opt">,</span> ymin<span class="hl opt">,</span> xmax<span class="hl opt">,</span> ymax<span class="hl opt">)</span>
    bnds <span class="hl opt">(</span>d<span class="hl opt">:</span>rest<span class="hl opt">)</span> x y xmin ymin xmax ymax <span class="hl opt">=</span>
        bnds rest x<span class="hl opt">'</span> y<span class="hl opt">' (</span><span class="hl kwc">min</span> x<span class="hl opt">'</span> xmin<span class="hl opt">) (</span><span class="hl kwc">min</span> y<span class="hl opt">'</span> ymin<span class="hl opt">) (</span><span class="hl kwc">max</span> x<span class="hl opt">'</span> xmax<span class="hl opt">) (</span><span class="hl kwc">max</span> y<span class="hl opt">'</span> ymax<span class="hl opt">)</span>
            <span class="hl kwd">where</span> <span class="hl opt">(</span>x<span class="hl opt">',</span> y<span class="hl opt">') =</span> move d <span class="hl opt">(</span>x<span class="hl opt">,</span> y<span class="hl opt">)</span>

pieceMask <span class="hl opt">::</span> Piece <span class="hl opt">-&gt; (</span>Mask<span class="hl opt">,</span> Mask<span class="hl opt">)</span>
pieceMask piece 
    | <span class="hl kwa">odd</span> y1    <span class="hl opt">= (</span>tag <span class="hl opt">(</span>msk piece x2 y2 <span class="hl num">0</span><span class="hl opt">) (</span>packSize w2 h2<span class="hl opt">),</span>
                   tag <span class="hl opt">(</span>msk piece x1 <span class="hl opt">(</span>y1<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)</span> <span class="hl num">0</span> `shiftR` n_col<span class="hl opt">) (</span>packSize w1 h1<span class="hl opt">))</span>
    | <span class="hl kwc">otherwise</span> <span class="hl opt">= (</span>tag <span class="hl opt">(</span>msk piece x1 y1 <span class="hl num">0</span><span class="hl opt">) (</span>packSize w1 h1<span class="hl opt">),</span>
                   tag <span class="hl opt">(</span>msk piece x2 <span class="hl opt">(</span>y2<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)</span> <span class="hl num">0</span> `shiftR` n_col<span class="hl opt">) (</span>packSize w2 h2<span class="hl opt">))</span>
    <span class="hl kwd">where</span>
      <span class="hl opt">(</span>xmin<span class="hl opt">,</span> ymin<span class="hl opt">,</span> xmax<span class="hl opt">,</span> ymax<span class="hl opt">) =</span> pieceBounds piece <span class="hl kwa">False</span>
      <span class="hl opt">(</span>x1<span class="hl opt">,</span> y1<span class="hl opt">) = (-</span>xmin<span class="hl opt">, -</span>ymin<span class="hl opt">)</span>
      w1 <span class="hl opt">=</span> xmax <span class="hl opt">-</span> xmin
      h1 <span class="hl opt">=</span> ymax <span class="hl opt">-</span> ymin
      <span class="hl opt">(</span>xmin<span class="hl opt">',</span> ymin<span class="hl opt">',</span> xmax<span class="hl opt">',</span> ymax<span class="hl opt">') =</span> pieceBounds piece <span class="hl kwa">True</span>
      <span class="hl opt">(</span>x2<span class="hl opt">,</span> y2<span class="hl opt">) = (-</span>xmin<span class="hl opt">', (-</span>ymin<span class="hl opt">')+</span><span class="hl num">1</span><span class="hl opt">)</span>
      w2 <span class="hl opt">=</span> xmax<span class="hl opt">' -</span> xmin<span class="hl opt">'</span>
      h2 <span class="hl opt">=</span> ymax<span class="hl opt">' -</span> ymin<span class="hl opt">'</span>
      msk <span class="hl opt">::</span> Piece <span class="hl opt">-&gt;</span> Col <span class="hl opt">-&gt;</span> Row <span class="hl opt">-&gt;</span> Mask <span class="hl opt">-&gt;</span> Mask
      msk <span class="hl opt">[]</span> x y m <span class="hl opt">=</span> m `setBit` cellAt x y
      msk <span class="hl opt">(</span>d<span class="hl opt">:</span>rest<span class="hl opt">)</span> x y m <span class="hl opt">=</span> msk rest x<span class="hl opt">'</span> y<span class="hl opt">' (</span>m `setBit` cellAt x y<span class="hl opt">)</span>
          <span class="hl kwd">where</span> <span class="hl opt">(</span>x<span class="hl opt">',</span> y<span class="hl opt">') =</span> move d <span class="hl opt">(</span>x<span class="hl opt">,</span> y<span class="hl opt">)</span>

templatesForColor <span class="hl opt">::</span> Color <span class="hl opt">-&gt; ([</span>Mask<span class="hl opt">], [</span>Mask<span class="hl opt">])</span>
templatesForColor c <span class="hl opt">= (</span><span class="hl kwc">unzip</span> <span class="hl opt">.</span> <span class="hl kwc">map</span> pieceMask<span class="hl opt">)</span> perms
    <span class="hl kwd">where</span> perms | c <span class="hl opt">==</span> <span class="hl num">5</span> <span class="hl opt">=</span> <span class="hl kwc">take</span> <span class="hl num">6</span> ps | <span class="hl kwc">otherwise</span> <span class="hl opt">=</span> ps
          ps <span class="hl opt">=</span> permutations <span class="hl opt">$</span> pieces <span class="hl opt">!</span> c

<span class="hl slc">--- Looking for Islands ---</span>
noLineIslands <span class="hl opt">::</span> Mask <span class="hl opt">-&gt;</span> Cell <span class="hl opt">-&gt;</span> Cell <span class="hl opt">-&gt;</span> <span class="hl kwb">Int</span> <span class="hl opt">-&gt;</span> <span class="hl kwb">Bool</span>
noLineIslands mask start stop step
    | <span class="hl opt">(</span>fnd testBit <span class="hl opt">.</span> fnd <span class="hl opt">((</span><span class="hl kwc">not</span> <span class="hl opt">.) .</span> testBit<span class="hl opt">) .</span> fnd testBit<span class="hl opt">)</span>  start <span class="hl opt">&gt;</span> stop  <span class="hl opt">=</span> <span class="hl kwa">True</span>
    | <span class="hl kwc">otherwise</span> <span class="hl opt">=</span> <span class="hl kwa">False</span>
  <span class="hl kwd">where</span>
    fnd test <span class="hl opt">!</span>x
        | x <span class="hl opt">&gt;=</span> <span class="hl num">25</span>     <span class="hl opt">=</span> <span class="hl num">25</span>
        | test mask x <span class="hl opt">=</span> x
        | <span class="hl kwc">otherwise</span>   <span class="hl opt">=</span> fnd test <span class="hl opt">(</span>x<span class="hl opt">+</span>step<span class="hl opt">)</span>

noLeftIslands <span class="hl opt">::</span> Mask <span class="hl opt">-&gt;</span> <span class="hl kwb">Bool</span>
noLeftIslands  mask  <span class="hl opt">=</span> noLineIslands mask <span class="hl num">0 20 5</span>
noRightIslands mask  <span class="hl opt">=</span> noLineIslands mask <span class="hl num">4 24 5</span>

noIslands <span class="hl opt">::</span> Mask <span class="hl opt">-&gt;</span> <span class="hl kwb">Bool</span>
noIslands board <span class="hl opt">=</span> noisles board <span class="hl opt">(</span>count1s board<span class="hl opt">)</span>

noisles <span class="hl opt">::</span> Mask <span class="hl opt">-&gt;</span> <span class="hl kwb">Int</span> <span class="hl opt">-&gt;</span> <span class="hl kwb">Bool</span>
noisles _ <span class="hl num">30</span> <span class="hl opt">=</span> <span class="hl kwa">True</span>
noisles board ones
    | <span class="hl opt">(</span>ones<span class="hl opt">' -</span> ones<span class="hl opt">)</span> `<span class="hl kwc">rem</span>` n_elem <span class="hl opt">/=</span> <span class="hl num">0</span> <span class="hl opt">=</span> <span class="hl kwa">False</span>
    | <span class="hl kwc">otherwise</span> <span class="hl opt">=</span> noisles board<span class="hl opt">'</span> ones<span class="hl opt">'</span>
    <span class="hl kwd">where</span> board<span class="hl opt">' =</span> fill board <span class="hl opt">(</span>coordOf <span class="hl opt">(</span>first0 board<span class="hl opt">))</span>
          ones<span class="hl opt">' =</span> count1s board<span class="hl opt">'</span>

fill <span class="hl opt">::</span> Mask <span class="hl opt">-&gt;</span> CellCoord <span class="hl opt">-&gt;</span> Mask
fill m cc<span class="hl opt">&#64;(</span>x<span class="hl opt">,</span> y<span class="hl opt">)</span>
    | x <span class="hl opt">&lt;</span> <span class="hl num">0</span> || x <span class="hl opt">&gt;=</span> n_col <span class="hl opt">=</span> m
    | y <span class="hl opt">&lt;</span> <span class="hl num">0</span> || y <span class="hl opt">&gt;=</span> <span class="hl num">6</span>     <span class="hl opt">=</span> m
    | testBit m i <span class="hl opt">=</span> m
    | <span class="hl kwc">otherwise</span> <span class="hl opt">=</span> <span class="hl kwc">foldl</span> <span class="hl opt">(\</span>m d <span class="hl opt">-&gt;</span> fill m <span class="hl opt">(</span>move d cc<span class="hl opt">)) (</span>setBit m i<span class="hl opt">)</span>
                  <span class="hl opt">[</span>E<span class="hl opt">,</span> NE<span class="hl opt">,</span> NW<span class="hl opt">,</span> W<span class="hl opt">,</span> SW<span class="hl opt">,</span> SE<span class="hl opt">]</span>
    <span class="hl kwd">where</span> i <span class="hl opt">=</span> cellAt x y

<span class="hl slc">--- More Mask Generation ---</span>
masksForColor <span class="hl opt">::</span> Color <span class="hl opt">-&gt; [(</span>Row<span class="hl opt">,</span> Mask<span class="hl opt">)]</span>
masksForColor c <span class="hl opt">=</span> <span class="hl kwc">concatMap</span> atCell cells
  <span class="hl kwd">where</span>
    <span class="hl opt">(</span>evens<span class="hl opt">,</span> odds<span class="hl opt">) =</span> templatesForColor c
    atCell n
        | <span class="hl kwa">even</span> y <span class="hl opt">= [(</span>y<span class="hl opt">,</span> retag <span class="hl opt">(</span>m `shiftL` x<span class="hl opt">)</span> c<span class="hl opt">)</span> | m <span class="hl opt">&lt;-</span> evens <span class="hl opt">,</span> isok m x y<span class="hl opt">]</span>
        | <span class="hl kwa">odd</span>  y <span class="hl opt">= [(</span>y<span class="hl opt">,</span> retag <span class="hl opt">(</span>m `shiftL` x<span class="hl opt">)</span> c<span class="hl opt">)</span> | m <span class="hl opt">&lt;-</span> odds  <span class="hl opt">,</span> isok m x y<span class="hl opt">]</span>
        <span class="hl kwd">where</span> <span class="hl opt">(</span>x<span class="hl opt">,</span> y<span class="hl opt">) =</span> coordOf n

isok <span class="hl opt">::</span> Mask <span class="hl opt">-&gt;</span> Row <span class="hl opt">-&gt;</span> Col <span class="hl opt">-&gt;</span> <span class="hl kwb">Bool</span>
isok mask x y <span class="hl opt">=</span>
    isValid <span class="hl opt">(</span>x<span class="hl opt">+</span>width<span class="hl opt">) (</span>y<span class="hl opt">+</span>height<span class="hl opt">) &amp;&amp;</span>
            <span class="hl kwd">case</span> <span class="hl opt">(</span>y <span class="hl opt">==</span> <span class="hl num">0</span><span class="hl opt">,</span> y<span class="hl opt">+</span>height<span class="hl opt">==</span><span class="hl num">9</span><span class="hl opt">)</span> <span class="hl kwd">of</span>
              <span class="hl opt">(</span><span class="hl kwa">False</span><span class="hl opt">,</span> <span class="hl kwa">False</span><span class="hl opt">) -&gt;</span> noLeftIslands mask<span class="hl opt">' &amp;&amp;</span> noRightIslands mask<span class="hl opt">'</span>
              <span class="hl opt">(</span><span class="hl kwa">False</span><span class="hl opt">,</span> <span class="hl kwa">True</span><span class="hl opt">)  -&gt;</span> noIslands <span class="hl opt">(</span>mask<span class="hl opt">'</span> `shiftL` <span class="hl opt">(</span>n_col <span class="hl opt">* (</span>y <span class="hl opt">-</span> <span class="hl num">4</span><span class="hl opt">)))</span>
              <span class="hl opt">(</span><span class="hl kwa">True</span><span class="hl opt">,</span> _ <span class="hl opt">) -&gt;</span> noIslands mask<span class="hl opt">'</span>
    <span class="hl kwd">where</span> <span class="hl opt">(</span>width<span class="hl opt">,</span> height<span class="hl opt">) =</span> unpackSize <span class="hl opt">(</span>tagof mask<span class="hl opt">)</span>
          mask<span class="hl opt">' =</span> untag mask `shiftL` x

masksAtCell <span class="hl opt">::</span> <span class="hl kwb">Array</span> <span class="hl opt">(</span>Row<span class="hl opt">,</span>Col<span class="hl opt">) (</span><span class="hl kwb">Array</span> Color <span class="hl opt">[</span>Mask<span class="hl opt">])</span>
masksAtCell <span class="hl opt">=</span> trps <span class="hl opt">$</span> <span class="hl kwc">map</span> <span class="hl opt">(</span>masksAt cells <span class="hl opt">.</span> masksForColor<span class="hl opt">)</span> colors

masksAt <span class="hl opt">:: [</span><span class="hl kwb">Int</span><span class="hl opt">] -&gt; [(</span>Row<span class="hl opt">,</span>Mask<span class="hl opt">)]-&gt; [[</span>Mask<span class="hl opt">]]</span>
masksAt <span class="hl opt">[]</span> _ <span class="hl opt">= []</span>
masksAt <span class="hl opt">(</span>n<span class="hl opt">:</span>ns<span class="hl opt">) !</span>masks <span class="hl opt">=</span> <span class="hl kwc">map snd</span> t <span class="hl opt">:</span> masksAt ns f
    <span class="hl kwd">where</span>
      <span class="hl opt">(</span>t<span class="hl opt">,</span> f<span class="hl opt">) =</span> <span class="hl kwc">partition</span> test masks
      test <span class="hl opt">(</span>r<span class="hl opt">,</span> m<span class="hl opt">) =</span> n<span class="hl opt">' &gt;=</span> <span class="hl num">0</span> <span class="hl opt">&amp;&amp;</span> n<span class="hl opt">' &lt;</span> <span class="hl num">25</span> <span class="hl opt">&amp;&amp;</span>  m `testBit` n<span class="hl opt">'</span>
          <span class="hl kwd">where</span> n<span class="hl opt">' =</span> n <span class="hl opt">- (</span>n_col <span class="hl opt">*</span> r<span class="hl opt">)</span>

trps <span class="hl opt">:: [[[</span>Mask<span class="hl opt">]]] -&gt;</span> <span class="hl kwb">Array</span> <span class="hl opt">(</span>Row<span class="hl opt">,</span> Col<span class="hl opt">) (</span><span class="hl kwb">Array</span> Color <span class="hl opt">[</span>Mask<span class="hl opt">])</span>
trps <span class="hl opt">!</span>a <span class="hl opt">=</span> <span class="hl kwa">array</span> <span class="hl opt">((</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">0</span><span class="hl opt">),(</span><span class="hl num">9</span><span class="hl opt">,</span><span class="hl num">4</span><span class="hl opt">)) $</span> <span class="hl kwc">concatMap</span> <span class="hl opt">(</span><span class="hl kwc">uncurry</span> <span class="hl opt">(</span><span class="hl kwc">map</span> <span class="hl opt">.</span> first <span class="hl opt">. (,))) $</span>
          <span class="hl kwc">zip</span> <span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">.</span><span class="hl num">.9</span><span class="hl opt">] [</span>copy <span class="hl opt">!!</span> y | y <span class="hl opt">&lt;- [</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">2</span><span class="hl opt">,</span><span class="hl num">3</span><span class="hl opt">,</span><span class="hl num">4</span><span class="hl opt">,</span><span class="hl num">5</span><span class="hl opt">,</span><span class="hl num">6</span><span class="hl opt">]]</span>
    <span class="hl kwd">where</span>
      copy <span class="hl opt">= [ [(</span>x<span class="hl opt">,</span>copy<span class="hl opt">' (</span>cellAt x y<span class="hl opt">))</span> | x <span class="hl opt">&lt;- [</span><span class="hl num">0</span><span class="hl opt">..</span>n_col<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">]]</span> |
               y <span class="hl opt">&lt;- [</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">2</span><span class="hl opt">,</span><span class="hl num">5</span><span class="hl opt">,</span><span class="hl num">6</span><span class="hl opt">,</span><span class="hl num">7</span><span class="hl opt">,</span><span class="hl num">8</span><span class="hl opt">,</span><span class="hl num">9</span><span class="hl opt">]]</span>
      copy<span class="hl opt">'</span> cell <span class="hl opt">=</span> <span class="hl kwa">array</span> <span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">9</span><span class="hl opt">) $</span> <span class="hl kwc">map</span> <span class="hl opt">(\</span>clr <span class="hl opt">-&gt; (</span>clr<span class="hl opt">,</span>a <span class="hl opt">!!</span> clr <span class="hl opt">!!</span> cell<span class="hl opt">))</span> colors

<span class="hl slc">--- Formatting ---</span>
format <span class="hl opt">::</span> <span class="hl kwb">Bool</span> <span class="hl opt">-&gt;</span> <span class="hl kwb">String</span> <span class="hl opt">-&gt;</span> <span class="hl kwb">String</span>
format _ <span class="hl opt">[] =</span> <span class="hl str">&quot;&quot;</span>
format isodd chars | isodd <span class="hl opt">=</span> <span class="hl str">&quot; &quot;</span> <span class="hl opt">++</span> str | <span class="hl kwc">otherwise</span> <span class="hl opt">=</span> str
        <span class="hl kwd">where</span>
          <span class="hl opt">(</span>cur<span class="hl opt">,</span> rest<span class="hl opt">) =</span> <span class="hl kwc">splitAt</span> <span class="hl num">5</span> chars
          str <span class="hl opt">=</span>  <span class="hl kwc">intersperse</span> <span class="hl opt">' '</span> cur <span class="hl opt">++</span> <span class="hl str">&quot;</span> <span class="hl esc">\n</span><span class="hl str">&quot;</span> <span class="hl opt">++</span> format <span class="hl opt">(</span><span class="hl kwc">not</span> isodd<span class="hl opt">)</span> rest

toString <span class="hl opt">::</span> Solution <span class="hl opt">-&gt;</span> <span class="hl kwb">String</span>
toString <span class="hl opt">!</span>masks <span class="hl opt">=</span> <span class="hl kwc">map</span> color cells
    <span class="hl kwd">where</span>
      masksWithRows <span class="hl opt">=</span> withRows <span class="hl num">0 0</span> <span class="hl opt">(</span><span class="hl kwc">reverse</span> masks<span class="hl opt">)</span>
      withRows _ _ <span class="hl opt">[] = []</span>
      withRows board r <span class="hl opt">(</span>m<span class="hl opt">:</span>rest<span class="hl opt">) = (</span>r<span class="hl opt">',</span> m<span class="hl opt">) :</span> withRows board<span class="hl opt">'</span> r<span class="hl opt">'</span> rest
          <span class="hl kwd">where</span> delta <span class="hl opt">=</span> first0 board `<span class="hl kwc">quot</span>` n_col
                board<span class="hl opt">' =</span> board `shiftR`  <span class="hl opt">(</span>delta <span class="hl opt">*</span> n_col<span class="hl opt">) .</span>|<span class="hl opt">.</span> untag m
                r<span class="hl opt">' =</span> r<span class="hl opt">+</span>delta
      color n <span class="hl opt">=</span> <span class="hl kwc">maybe</span> <span class="hl opt">'.' ((</span><span class="hl str">&quot;0123456789&quot;</span> <span class="hl opt">!!) .</span> tagof <span class="hl opt">.</span> <span class="hl kwc">snd</span><span class="hl opt">)</span>
                <span class="hl opt">(</span><span class="hl kwc">find</span> matches masksWithRows<span class="hl opt">)</span>
          <span class="hl kwd">where</span>
            matches <span class="hl opt">(</span>r<span class="hl opt">,</span> m<span class="hl opt">)</span>
              | n<span class="hl opt">' &lt;</span> <span class="hl num">0</span> || n<span class="hl opt">' &gt;</span> <span class="hl num">30</span>  <span class="hl opt">=</span> <span class="hl kwa">False</span>
              | <span class="hl kwc">otherwise</span>  <span class="hl opt">= (</span>untag m<span class="hl opt">)</span> `testBit` n<span class="hl opt">'</span>
              <span class="hl kwd">where</span> n<span class="hl opt">' =</span> n <span class="hl opt">- (</span>n_col <span class="hl opt">*</span> r<span class="hl opt">)</span>

<span class="hl slc">--- Generate the solutions ---</span>
firstZero <span class="hl opt">::</span> UArray <span class="hl kwb">Int Int</span>
firstZero <span class="hl opt">=</span> <span class="hl kwa">array</span> <span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">31</span><span class="hl opt">) $</span> <span class="hl kwc">zip</span> <span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">.</span><span class="hl num">.31</span><span class="hl opt">]</span>
            <span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">2</span><span class="hl opt">,</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">3</span><span class="hl opt">,</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">2</span><span class="hl opt">,</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">4</span><span class="hl opt">,</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">2</span><span class="hl opt">,</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">3</span><span class="hl opt">,</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">2</span><span class="hl opt">,</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">5</span><span class="hl opt">]</span>

solutions <span class="hl opt">:: [</span><span class="hl kwb">String</span><span class="hl opt">]</span>
solutions <span class="hl opt">=</span> solveCell <span class="hl num">0</span> colors <span class="hl num">0</span> <span class="hl opt">[] []</span>

solveCell <span class="hl opt">::</span> Row <span class="hl opt">-&gt; [</span>Color<span class="hl opt">] -&gt;</span> Mask <span class="hl opt">-&gt;</span> Solution <span class="hl opt">-&gt; [</span><span class="hl kwb">String</span><span class="hl opt">] -&gt; [</span><span class="hl kwb">String</span><span class="hl opt">]</span>
solveCell _ <span class="hl opt">[]</span> board soln results <span class="hl opt">=</span> <span class="hl kwd">let</span> s <span class="hl opt">=</span> toString soln
                                    <span class="hl kwd">in</span>  s<span class="hl opt">:(</span><span class="hl kwc">reverse</span> s<span class="hl opt">):</span>results 
solveCell <span class="hl opt">!</span>row <span class="hl opt">!</span>todo <span class="hl opt">!</span>board <span class="hl opt">!</span>soln results
    | top<span class="hl opt">/=</span>m_top <span class="hl opt">=</span> <span class="hl kwc">foldr</span> solveMask results
                   <span class="hl opt">[(</span>m<span class="hl opt">,</span> c<span class="hl opt">)</span> | c <span class="hl opt">&lt;-</span> todo<span class="hl opt">,</span> m  <span class="hl opt">&lt;-</span> masks <span class="hl opt">!</span> c<span class="hl opt">,</span>  board <span class="hl opt">.&amp;.</span> m <span class="hl opt">==</span> <span class="hl num">0</span><span class="hl opt">]</span>
    | <span class="hl kwc">otherwise</span>  <span class="hl opt">=</span> solveCell <span class="hl opt">(</span>row<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)</span> todo <span class="hl opt">(</span>board `shiftR` n_col<span class="hl opt">)</span> soln results
    <span class="hl kwd">where</span> top <span class="hl opt">=</span> board <span class="hl opt">.&amp;.</span> m_top
          masks <span class="hl opt">=</span> masksAtCell <span class="hl opt">! (</span>row<span class="hl opt">, (</span>firstZero <span class="hl opt">!</span> top<span class="hl opt">) )</span>
          solveMask <span class="hl opt">(!</span>m<span class="hl opt">,!</span>c<span class="hl opt">)</span> results <span class="hl opt">=</span>
              solveCell row <span class="hl opt">(</span><span class="hl kwc">delete</span> c todo<span class="hl opt">) (</span>untag m <span class="hl opt">.</span>|<span class="hl opt">.</span> board<span class="hl opt">) (</span>m<span class="hl opt">:</span>soln<span class="hl opt">)</span> results

main <span class="hl opt">=</span> <span class="hl kwd">do</span>
    n <span class="hl opt">&lt;-</span> <span class="hl kwc">return</span><span class="hl opt">.</span><span class="hl kwc">read</span><span class="hl opt">.</span><span class="hl kwc">head</span> <span class="hl opt">=&lt;&lt;</span> <span class="hl kwc">getArgs</span>
    <span class="hl kwd">let</span> nsolutions <span class="hl opt">=</span> <span class="hl kwc">take</span> n solutions
    <span class="hl kwc">putStrLn</span> <span class="hl opt">$ (</span><span class="hl kwc">show</span> <span class="hl opt">$</span> <span class="hl kwa">length</span> nsolutions<span class="hl opt">) ++</span> <span class="hl str">&quot; solutions found</span><span class="hl esc">\n</span><span class="hl str">&quot;</span>
    <span class="hl kwc">putStrLn</span> <span class="hl opt">.</span> format <span class="hl kwa">False</span> <span class="hl opt">.</span> <span class="hl kwc">minimum</span> <span class="hl opt">$</span> nsolutions
    <span class="hl kwc">putStrLn</span> <span class="hl opt">.</span> format <span class="hl kwa">False</span> <span class="hl opt">.</span> <span class="hl kwc">maximum</span> <span class="hl opt">$</span> nsolutions
