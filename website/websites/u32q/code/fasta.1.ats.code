<span class="hl com">(*</span>
<span class="hl com">** The Computer Language Benchmarks Game</span>
<span class="hl com">** http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com">** </span>
<span class="hl com">** contributed by Hongwei Xi </span>
<span class="hl com">**</span>
<span class="hl com">** compilation command:</span>
<span class="hl com">**   atscc -O3 fasta2.dats -msse2 -mfpmath=sse -o fasta2</span>
<span class="hl com">*)</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">staload</span> <span class="hl str">&quot;libc/SATS/stdio.sats&quot;</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">typedef</span> <span class="hl kwb">float</span> <span class="hl opt">=</span> <span class="hl kwb">float</span><span class="hl opt">;</span> <span class="hl ppc">#define i2f float_of_int</span>

<span class="hl slc">// this is about 10% slower:</span>
<span class="hl slc">// typedef float = double; #define i2f double_of_int</span>

<span class="hl com">(* ****** ****** *)</span>

local

<span class="hl ppc">#define IM 139968</span>
<span class="hl ppc">#define IA 3877</span>
<span class="hl ppc">#define IC 29573</span>

var state<span class="hl opt">:</span> <span class="hl kwb">int</span> <span class="hl opt">=</span> <span class="hl num">42</span>
<span class="hl kwa">val</span> <span class="hl opt">(</span>pfbox | <span class="hl opt">()) =</span> vbox_make_view_ptr <span class="hl opt">{</span><span class="hl kwb">int</span><span class="hl opt">} (</span>view&#64; state | <span class="hl opt">&amp;</span>state<span class="hl opt">)</span>

<span class="hl kwa">in</span> <span class="hl slc">// in of [local]</span>

fn random_gen
  <span class="hl opt">(</span>max<span class="hl opt">:</span> <span class="hl kwb">float</span><span class="hl opt">):</span> <span class="hl kwb">float</span> <span class="hl opt">=</span> <span class="hl kwa">let</span>
  prval vbox pf <span class="hl opt">=</span> pfbox
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> state <span class="hl opt">:= (</span>state <span class="hl opt">*</span> <span class="hl kwd">IA</span> <span class="hl opt">+</span> <span class="hl kwd">IC</span><span class="hl opt">)</span> <span class="hl kwa">mod</span> <span class="hl kwd">IM</span> <span class="hl kwa">in</span> <span class="hl opt">(</span>max <span class="hl opt">*</span> i2f state<span class="hl opt">)</span> / <span class="hl kwd">IM</span>
<span class="hl kwa">end</span> <span class="hl slc">// end of [random_gen]</span>

<span class="hl kwa">end</span> <span class="hl slc">// end of [local]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">typedef</span> amino <span class="hl opt">=</span> &#64;<span class="hl opt">{</span> c<span class="hl opt">=</span> char<span class="hl opt">,</span> p<span class="hl opt">=</span> <span class="hl kwb">float</span> <span class="hl opt">}</span>
<span class="hl kwa">typedef</span> aminoarr <span class="hl opt">(</span>n<span class="hl opt">:</span><span class="hl kwb">int</span><span class="hl opt">) =</span> &#64;<span class="hl opt">[</span>amino<span class="hl opt">][</span>n<span class="hl opt">]</span> <span class="hl slc">// amino array of size n</span>

fn make_cumulative <span class="hl opt">{</span>n<span class="hl opt">:</span>nat<span class="hl opt">}</span>
  <span class="hl opt">(</span>table<span class="hl opt">: &amp;</span>aminoarr<span class="hl opt">(</span>n<span class="hl opt">),</span> n<span class="hl opt">:</span> size_t n<span class="hl opt">):</span> void <span class="hl opt">=</span> <span class="hl kwa">let</span>
  <span class="hl kwa">fun</span> loop <span class="hl opt">{</span>i<span class="hl opt">:</span>nat | i <span class="hl opt">&lt;=</span> n<span class="hl opt">} .&lt;</span>n<span class="hl opt">-</span>i<span class="hl opt">&gt;. (</span>
      table<span class="hl opt">: &amp;</span>aminoarr<span class="hl opt">(</span>n<span class="hl opt">),</span> n<span class="hl opt">:</span> size_t n<span class="hl opt">,</span> i<span class="hl opt">:</span> <span class="hl kwb">int</span> i<span class="hl opt">,</span> prob<span class="hl opt">:</span> <span class="hl kwb">float</span>
    <span class="hl opt">) :</span> void <span class="hl opt">=</span>
    <span class="hl kwa">if</span> i <span class="hl opt">&lt;</span> n <span class="hl kwa">then let</span>
      <span class="hl kwa">val</span> prob <span class="hl opt">=</span> prob <span class="hl opt">+</span> table<span class="hl opt">.[</span>i<span class="hl opt">].</span>p <span class="hl kwa">in</span>
      table<span class="hl opt">.[</span>i<span class="hl opt">].</span>p <span class="hl opt">:=</span> prob<span class="hl opt">;</span> loop <span class="hl opt">(</span>table<span class="hl opt">,</span> n<span class="hl opt">,</span> i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">,</span> prob<span class="hl opt">)</span>
    <span class="hl kwa">end</span> <span class="hl slc">// end of [if]</span>
  <span class="hl slc">// end of [loop]</span>
<span class="hl kwa">in</span>
  loop <span class="hl opt">(</span>table<span class="hl opt">,</span> n<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">0.0</span><span class="hl opt">:</span> <span class="hl kwb">float</span><span class="hl opt">)</span>
<span class="hl kwa">end</span> <span class="hl slc">// end of [make_cumulative]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl kwa">extern fun</span> fwrite_substring <span class="hl opt">{</span>m<span class="hl opt">,</span>p<span class="hl opt">,</span>n<span class="hl opt">:</span>nat | p <span class="hl opt">+</span> n <span class="hl opt">&lt;=</span> m<span class="hl opt">}</span>
  <span class="hl opt">(</span>str<span class="hl opt">:</span> <span class="hl kwb">string</span> m<span class="hl opt">,</span> beg<span class="hl opt">:</span> size_t p<span class="hl opt">,</span> n<span class="hl opt">:</span> size_t n<span class="hl opt">,</span> out<span class="hl opt">:</span> <span class="hl kwd">FILEref</span><span class="hl opt">):</span> void
  <span class="hl opt">=</span> <span class="hl str">&quot;fasta_fwrite_substring&quot;</span>

<span class="hl kwa">extern fun</span> fputc <span class="hl opt">(</span>c<span class="hl opt">:</span> char<span class="hl opt">,</span> out<span class="hl opt">:</span> <span class="hl kwd">FILEref</span><span class="hl opt">):</span> void <span class="hl opt">=</span> <span class="hl str">&quot;fasta_fputc&quot;</span>

<span class="hl kwa">extern fun</span> fwrite_byte <span class="hl opt">{</span>bsz<span class="hl opt">,</span>n<span class="hl opt">:</span>nat | n <span class="hl opt">&lt;=</span> bsz<span class="hl opt">}</span>
  <span class="hl opt">(</span>buf<span class="hl opt">: &amp;</span>bytes <span class="hl opt">(</span>bsz<span class="hl opt">),</span> n<span class="hl opt">:</span> size_t n<span class="hl opt">,</span> out<span class="hl opt">:</span> <span class="hl kwd">FILEref</span><span class="hl opt">):&lt;&gt;</span> sizeLte n
  <span class="hl opt">=</span> <span class="hl str">&quot;fasta_fwrite_byte&quot;</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl ppc">#define WIDTH 60</span>

fn repeat_fasta <span class="hl opt">{</span>len<span class="hl opt">:</span>nat<span class="hl opt">} {</span>n<span class="hl opt">:</span>nat<span class="hl opt">}</span>
  <span class="hl opt">(</span>out<span class="hl opt">:</span> <span class="hl kwd">FILEref</span><span class="hl opt">,</span> str<span class="hl opt">:</span> <span class="hl kwb">string</span> len<span class="hl opt">,</span> n<span class="hl opt">:</span> size_t n<span class="hl opt">):</span> void <span class="hl opt">=</span> <span class="hl kwa">let</span>
  <span class="hl kwa">macdef</span> <span class="hl kwd">WIDTH_sz</span> <span class="hl opt">=</span> size1_of_int1 <span class="hl opt">(</span><span class="hl kwd">WIDTH</span><span class="hl opt">)</span>
  <span class="hl kwa">val</span> len <span class="hl opt">=</span> string1_length str<span class="hl opt">;</span> <span class="hl kwa">val</span> <span class="hl opt">() =</span> <span class="hl kwa">assert</span> <span class="hl opt">(</span>len <span class="hl opt">&gt;=</span> <span class="hl kwd">WIDTH_sz</span><span class="hl opt">)</span>
  <span class="hl kwa">fun</span> loop <span class="hl opt">{</span>n<span class="hl opt">,</span>pos<span class="hl opt">:</span>nat | pos <span class="hl opt">&lt;=</span> len<span class="hl opt">}</span>
    <span class="hl opt">(</span>out<span class="hl opt">:</span> <span class="hl kwd">FILEref</span><span class="hl opt">,</span> n<span class="hl opt">:</span> size_t n<span class="hl opt">,</span> pos<span class="hl opt">:</span> size_t pos<span class="hl opt">):&lt;</span>cloref1<span class="hl opt">&gt;</span> void <span class="hl opt">=</span>
    <span class="hl kwa">if</span> n <span class="hl opt">&gt;</span> <span class="hl kwd">WIDTH_sz</span> <span class="hl kwa">then let</span>
      <span class="hl kwa">val</span> left <span class="hl opt">=</span> len <span class="hl opt">-</span> pos <span class="hl kwa">in</span>
      <span class="hl kwa">if</span> left <span class="hl opt">&gt;=</span> <span class="hl kwd">WIDTH_sz</span> <span class="hl kwa">then begin</span>
        fwrite_substring <span class="hl opt">(</span>str<span class="hl opt">,</span> pos<span class="hl opt">,</span> <span class="hl kwd">WIDTH_sz</span><span class="hl opt">,</span> out<span class="hl opt">);</span> fputc <span class="hl opt">(</span><span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl opt">,</span> out<span class="hl opt">);</span>
        loop <span class="hl opt">(</span>out<span class="hl opt">,</span> n <span class="hl opt">-</span> <span class="hl kwd">WIDTH_sz</span><span class="hl opt">,</span> pos <span class="hl opt">+</span> <span class="hl kwd">WIDTH_sz</span><span class="hl opt">)</span>
      <span class="hl kwa">end else begin</span>
        fwrite_substring <span class="hl opt">(</span>str<span class="hl opt">,</span> pos<span class="hl opt">,</span> left<span class="hl opt">,</span> out<span class="hl opt">);</span>
	fwrite_substring <span class="hl opt">(</span>str<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl kwd">WIDTH_sz</span> <span class="hl opt">-</span> left<span class="hl opt">,</span> out<span class="hl opt">);</span> fputc <span class="hl opt">(</span><span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl opt">,</span> out<span class="hl opt">);</span>
	loop <span class="hl opt">(</span>out<span class="hl opt">,</span> n <span class="hl opt">-</span> <span class="hl kwd">WIDTH_sz</span><span class="hl opt">,</span> <span class="hl kwd">WIDTH_sz</span> <span class="hl opt">-</span> left<span class="hl opt">)</span>
      <span class="hl kwa">end</span> <span class="hl slc">// end of [if]</span>
    <span class="hl kwa">end else let</span>
      <span class="hl kwa">val</span> left <span class="hl opt">=</span> len <span class="hl opt">-</span> pos <span class="hl kwa">in</span>
      <span class="hl kwa">if</span> left <span class="hl opt">&gt;=</span> n <span class="hl kwa">then begin</span>
        fwrite_substring <span class="hl opt">(</span>str<span class="hl opt">,</span> pos<span class="hl opt">,</span> n<span class="hl opt">,</span> out<span class="hl opt">);</span> fputc <span class="hl opt">(</span><span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl opt">,</span> out<span class="hl opt">)</span>
      <span class="hl kwa">end else begin</span>
        fwrite_substring <span class="hl opt">(</span>str<span class="hl opt">,</span> pos<span class="hl opt">,</span> left<span class="hl opt">,</span> out<span class="hl opt">);</span>
	fwrite_substring <span class="hl opt">(</span>str<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> n<span class="hl opt">-</span>left<span class="hl opt">,</span> out<span class="hl opt">);</span> fputc <span class="hl opt">(</span><span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl opt">,</span> out<span class="hl opt">)</span>
      <span class="hl kwa">end</span> <span class="hl slc">// end of [if]</span>
    <span class="hl kwa">end</span> <span class="hl com">(* end of [if] *)</span>
  <span class="hl slc">// end of [loop]</span>
<span class="hl kwa">in</span>
  loop <span class="hl opt">(</span>out<span class="hl opt">,</span> n<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">)</span>
<span class="hl kwa">end</span> <span class="hl slc">// end of [repeat_fasta]</span>

<span class="hl kwa">fun</span> random_char <span class="hl opt">{</span>n<span class="hl opt">:</span>pos<span class="hl opt">} {</span>l<span class="hl opt">:</span>addr<span class="hl opt">} (</span>
    pf_tbl<span class="hl opt">: !</span>aminoarr<span class="hl opt">(</span>n<span class="hl opt">)</span> &#64; l | p_tbl<span class="hl opt">:</span> ptr l<span class="hl opt">,</span> n<span class="hl opt">:</span> size_t n<span class="hl opt">,</span> prob<span class="hl opt">:</span> <span class="hl kwb">float</span>
  <span class="hl opt">) :</span> char <span class="hl opt">=</span> <span class="hl kwa">let</span>
  prval <span class="hl opt">(</span>pf1<span class="hl opt">,</span> pf2<span class="hl opt">) =</span> array_v_uncons <span class="hl opt">{</span>amino<span class="hl opt">} (</span>pf_tbl<span class="hl opt">)</span>
<span class="hl kwa">in</span>
  <span class="hl kwa">if</span> prob <span class="hl opt">&gt;=</span> p_tbl<span class="hl opt">-&gt;</span>p <span class="hl kwa">then let</span>
    prval <span class="hl opt">() =</span> __meta_info <span class="hl opt">()</span> where <span class="hl opt">{</span>
      <span class="hl kwa">extern</span> praxi __meta_info <span class="hl opt">(): [</span>n <span class="hl opt">&gt;</span> <span class="hl num">1</span><span class="hl opt">]</span> void <span class="hl slc">// a piece of meta information</span>
    <span class="hl opt">}</span> <span class="hl slc">// end of [prval]</span>
    <span class="hl kwa">val</span> ans <span class="hl opt">=</span> random_char <span class="hl opt">(</span>pf2 | p_tbl <span class="hl opt">+</span> sizeof<span class="hl opt">&lt;</span>amino<span class="hl opt">&gt;,</span> n <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">,</span> prob<span class="hl opt">)</span>
    prval <span class="hl opt">() =</span> pf_tbl <span class="hl opt">:=</span> array_v_cons <span class="hl opt">{</span>amino<span class="hl opt">} (</span>pf1<span class="hl opt">,</span> pf2<span class="hl opt">)</span>
  <span class="hl kwa">in</span>
    ans
  <span class="hl kwa">end else let</span>
    <span class="hl kwa">val</span> ans <span class="hl opt">=</span> p_tbl<span class="hl opt">-&gt;</span>c
    prval <span class="hl opt">() =</span> pf_tbl <span class="hl opt">:=</span> array_v_cons <span class="hl opt">{</span>amino<span class="hl opt">} (</span>pf1<span class="hl opt">,</span> pf2<span class="hl opt">)</span>
  <span class="hl kwa">in</span>
    ans
  <span class="hl kwa">end</span> <span class="hl com">(* end of [if] *)</span>
<span class="hl kwa">end</span> <span class="hl slc">// end of [random_char]</span>

<span class="hl kwa">fun</span> random_buf
  <span class="hl opt">{</span>n<span class="hl opt">:</span>pos<span class="hl opt">} {</span>i<span class="hl opt">,</span>len<span class="hl opt">,</span>bsz<span class="hl opt">:</span>nat | i <span class="hl opt">&lt;=</span> len<span class="hl opt">;</span> len <span class="hl opt">&lt;=</span> bsz<span class="hl opt">}</span>
  <span class="hl opt">(</span>tbl<span class="hl opt">: &amp;</span>aminoarr<span class="hl opt">(</span>n<span class="hl opt">),</span> buf<span class="hl opt">: &amp;</span>bytes<span class="hl opt">(</span>bsz<span class="hl opt">),</span> n<span class="hl opt">:</span> size_t n<span class="hl opt">,</span> len<span class="hl opt">:</span> size_t len<span class="hl opt">,</span> i<span class="hl opt">:</span> size_t i<span class="hl opt">)</span>
  <span class="hl opt">:</span> void <span class="hl opt">=</span>
  <span class="hl kwa">if</span> i <span class="hl opt">&lt;</span> len <span class="hl kwa">then let</span>
    <span class="hl kwa">val</span> c <span class="hl opt">=</span> random_char <span class="hl opt">(</span>view&#64; tbl | <span class="hl opt">&amp;</span>tbl<span class="hl opt">,</span> n<span class="hl opt">,</span> random_gen <span class="hl opt">(</span><span class="hl num">1.0</span><span class="hl opt">:</span> <span class="hl kwb">float</span><span class="hl opt">))</span>
    <span class="hl kwa">val</span> <span class="hl opt">() =</span> buf<span class="hl opt">.[</span>i<span class="hl opt">] :=</span> byte_of_char c
  <span class="hl kwa">in</span>
    random_buf <span class="hl opt">(</span>tbl<span class="hl opt">,</span> buf<span class="hl opt">,</span> n<span class="hl opt">,</span> len<span class="hl opt">,</span> i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)</span>
  <span class="hl kwa">end</span> <span class="hl com">(* end of [if] *)</span>
<span class="hl slc">// end of [random_buf]</span>

fn random_fasta <span class="hl opt">{</span>n<span class="hl opt">:</span>pos<span class="hl opt">} {</span>len<span class="hl opt">:</span>nat<span class="hl opt">} (</span>
    out<span class="hl opt">:</span> <span class="hl kwd">FILEref</span><span class="hl opt">,</span> tbl<span class="hl opt">: &amp;</span>aminoarr<span class="hl opt">(</span>n<span class="hl opt">),</span> n<span class="hl opt">:</span> size_t n<span class="hl opt">,</span> len<span class="hl opt">:</span> size_t len
  <span class="hl opt">) :</span> void <span class="hl opt">= ()</span> where <span class="hl opt">{</span>
  <span class="hl kwa">macdef</span> <span class="hl kwd">WIDTH_sz</span> <span class="hl opt">=</span> size1_of_int1 <span class="hl opt">(</span><span class="hl kwd">WIDTH</span><span class="hl opt">)</span>
  <span class="hl kwa">fun</span> loop <span class="hl opt">{</span>len<span class="hl opt">:</span>nat<span class="hl opt">} .&lt;</span>len<span class="hl opt">&gt;. (</span>
      out<span class="hl opt">:</span> <span class="hl kwd">FILEref</span>
    <span class="hl opt">,</span> tbl<span class="hl opt">: &amp;</span>aminoarr<span class="hl opt">(</span>n<span class="hl opt">),</span> buf<span class="hl opt">: &amp;</span>bytes<span class="hl opt">(</span><span class="hl kwd">WIDTH</span><span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">),</span> n<span class="hl opt">:</span> size_t n<span class="hl opt">,</span> len<span class="hl opt">:</span> size_t len
    <span class="hl opt">) :</span> void <span class="hl opt">=</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>len <span class="hl opt">&gt;</span> <span class="hl kwd">WIDTH_sz</span><span class="hl opt">)</span> <span class="hl kwa">then let</span>
      <span class="hl kwa">val</span> <span class="hl opt">() =</span> random_buf <span class="hl opt">(</span>tbl<span class="hl opt">,</span> buf<span class="hl opt">,</span> n<span class="hl opt">,</span> <span class="hl kwd">WIDTH_sz</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">)</span>
      <span class="hl kwa">val</span> _<span class="hl com">(*int*)</span> <span class="hl opt">=</span> fwrite_byte <span class="hl opt">(</span>buf<span class="hl opt">,</span> <span class="hl kwd">WIDTH_sz</span><span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">,</span> out<span class="hl opt">)</span>
    <span class="hl kwa">in</span>
      loop <span class="hl opt">(</span>out<span class="hl opt">,</span> tbl<span class="hl opt">,</span> buf<span class="hl opt">,</span> n<span class="hl opt">,</span> len<span class="hl opt">-</span><span class="hl kwd">WIDTH_sz</span><span class="hl opt">)</span>
    <span class="hl kwa">end else let</span>
      <span class="hl kwa">val</span> <span class="hl opt">() =</span> random_buf <span class="hl opt">(</span>tbl<span class="hl opt">,</span> buf<span class="hl opt">,</span> n<span class="hl opt">,</span> len<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">)</span>
      <span class="hl kwa">val</span> _<span class="hl com">(*int*)</span> <span class="hl opt">=</span> fwrite_byte <span class="hl opt">(</span>buf<span class="hl opt">,</span> len<span class="hl opt">,</span> out<span class="hl opt">)</span>
      <span class="hl kwa">val</span> <span class="hl opt">() =</span> fputc <span class="hl opt">(</span><span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span><span class="hl opt">,</span> out<span class="hl opt">)</span>
    <span class="hl kwa">in</span>
      <span class="hl slc">// empty</span>
    <span class="hl kwa">end</span> <span class="hl slc">// end of [loop]</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> make_cumulative <span class="hl opt">(</span>tbl<span class="hl opt">,</span> n<span class="hl opt">)</span>
  var <span class="hl opt">!</span>p_buf <span class="hl kwa">with</span> pf_buf <span class="hl opt">=</span> &#64;<span class="hl opt">[</span>byte<span class="hl opt">][</span><span class="hl kwd">WIDTH</span><span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">]()</span>
  prval <span class="hl opt">() =</span> pf_buf <span class="hl opt">:=</span> bytes_v_of_b0ytes_v <span class="hl opt">(</span>pf_buf<span class="hl opt">)</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> p_buf<span class="hl opt">-&gt;[</span><span class="hl kwd">WIDTH_sz</span><span class="hl opt">] :=</span> byte_of_char <span class="hl str">'</span><span class="hl esc">\n</span><span class="hl str">'</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> loop <span class="hl opt">(</span>out<span class="hl opt">,</span> tbl<span class="hl opt">, !</span>p_buf<span class="hl opt">,</span> n<span class="hl opt">,</span> len<span class="hl opt">)</span>
<span class="hl opt">}</span> <span class="hl slc">// end of [random_fasta]</span>

<span class="hl kwa">val</span> alu <span class="hl opt">=</span><span class="hl str">&quot;\</span>
<span class="hl str">GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG\</span>
<span class="hl str">GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA\</span>
<span class="hl str">CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT\</span>
<span class="hl str">ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA\</span>
<span class="hl str">GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG\</span>
<span class="hl str">AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC\</span>
<span class="hl str">AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span>

<span class="hl slc">//</span>

<span class="hl kwa">implement</span> main <span class="hl opt">(</span>argc<span class="hl opt">,</span> argv<span class="hl opt">) = ()</span> where <span class="hl opt">{</span>

<span class="hl kwa">val</span> <span class="hl opt">() =</span> <span class="hl kwa">assert</span> <span class="hl opt">(</span>argc <span class="hl opt">=</span> <span class="hl num">2</span><span class="hl opt">)</span>
<span class="hl kwa">val</span> n <span class="hl opt">=</span> int1_of_string <span class="hl opt">(</span>argv<span class="hl opt">.[</span><span class="hl num">1</span><span class="hl opt">])</span>
<span class="hl kwa">val</span> <span class="hl opt">() =</span> <span class="hl kwa">assert</span> <span class="hl opt">(</span>n <span class="hl opt">&gt;=</span> <span class="hl num">0</span><span class="hl opt">)</span>
<span class="hl kwa">val</span> &#64;<span class="hl opt">(</span>pf_gc<span class="hl opt">,</span> pf_iub | p_iub<span class="hl opt">,</span> iub_sz<span class="hl opt">) =</span> $arrsz<span class="hl opt">{</span>amino<span class="hl opt">}(</span>
  &#64;<span class="hl opt">{</span>c<span class="hl opt">=</span><span class="hl kwb">'a'</span><span class="hl opt">,</span> p<span class="hl opt">=</span><span class="hl num">0.27</span><span class="hl opt">}</span>
<span class="hl opt">,</span> &#64;<span class="hl opt">{</span>c<span class="hl opt">=</span><span class="hl kwb">'c'</span><span class="hl opt">,</span> p<span class="hl opt">=</span><span class="hl num">0.12</span><span class="hl opt">}</span>
<span class="hl opt">,</span> &#64;<span class="hl opt">{</span>c<span class="hl opt">=</span><span class="hl kwb">'g'</span><span class="hl opt">,</span> p<span class="hl opt">=</span><span class="hl num">0.12</span><span class="hl opt">}</span>
<span class="hl opt">,</span> &#64;<span class="hl opt">{</span>c<span class="hl opt">=</span><span class="hl kwb">'t'</span><span class="hl opt">,</span> p<span class="hl opt">=</span><span class="hl num">0.27</span><span class="hl opt">}</span>
<span class="hl opt">,</span> &#64;<span class="hl opt">{</span>c<span class="hl opt">=</span><span class="hl kwb">'B'</span><span class="hl opt">,</span> p<span class="hl opt">=</span><span class="hl num">0.02</span><span class="hl opt">}</span>
<span class="hl opt">,</span> &#64;<span class="hl opt">{</span>c<span class="hl opt">=</span><span class="hl kwb">'D'</span><span class="hl opt">,</span> p<span class="hl opt">=</span><span class="hl num">0.02</span><span class="hl opt">}</span>
<span class="hl opt">,</span> &#64;<span class="hl opt">{</span>c<span class="hl opt">=</span><span class="hl kwb">'H'</span><span class="hl opt">,</span> p<span class="hl opt">=</span><span class="hl num">0.02</span><span class="hl opt">}</span>
<span class="hl opt">,</span> &#64;<span class="hl opt">{</span>c<span class="hl opt">=</span><span class="hl kwb">'K'</span><span class="hl opt">,</span> p<span class="hl opt">=</span><span class="hl num">0.02</span><span class="hl opt">}</span>
<span class="hl opt">,</span> &#64;<span class="hl opt">{</span>c<span class="hl opt">=</span><span class="hl kwb">'M'</span><span class="hl opt">,</span> p<span class="hl opt">=</span><span class="hl num">0.02</span><span class="hl opt">}</span>
<span class="hl opt">,</span> &#64;<span class="hl opt">{</span>c<span class="hl opt">=</span><span class="hl kwb">'N'</span><span class="hl opt">,</span> p<span class="hl opt">=</span><span class="hl num">0.02</span><span class="hl opt">}</span>
<span class="hl opt">,</span> &#64;<span class="hl opt">{</span>c<span class="hl opt">=</span><span class="hl kwb">'R'</span><span class="hl opt">,</span> p<span class="hl opt">=</span><span class="hl num">0.02</span><span class="hl opt">}</span>
<span class="hl opt">,</span> &#64;<span class="hl opt">{</span>c<span class="hl opt">=</span><span class="hl kwb">'S'</span><span class="hl opt">,</span> p<span class="hl opt">=</span><span class="hl num">0.02</span><span class="hl opt">}</span>
<span class="hl opt">,</span> &#64;<span class="hl opt">{</span>c<span class="hl opt">=</span><span class="hl kwb">'V'</span><span class="hl opt">,</span> p<span class="hl opt">=</span><span class="hl num">0.02</span><span class="hl opt">}</span>
<span class="hl opt">,</span> &#64;<span class="hl opt">{</span>c<span class="hl opt">=</span><span class="hl kwb">'W'</span><span class="hl opt">,</span> p<span class="hl opt">=</span><span class="hl num">0.02</span><span class="hl opt">}</span>
<span class="hl opt">,</span> &#64;<span class="hl opt">{</span>c<span class="hl opt">=</span><span class="hl kwb">'Y'</span><span class="hl opt">,</span> p<span class="hl opt">=</span><span class="hl num">0.02</span><span class="hl opt">}</span>
<span class="hl opt">)</span> <span class="hl slc">// end of [val]</span>

<span class="hl kwa">val</span> &#64;<span class="hl opt">(</span>pf_homo_gc<span class="hl opt">,</span> pf_homo | p_homo<span class="hl opt">,</span> homo_sz<span class="hl opt">) =</span> $arrsz<span class="hl opt">{</span>amino<span class="hl opt">}(</span>
  &#64;<span class="hl opt">{</span>c<span class="hl opt">=</span><span class="hl kwb">'a'</span><span class="hl opt">,</span> p<span class="hl opt">=</span><span class="hl num">0.3029549426680</span><span class="hl opt">}</span>
<span class="hl opt">,</span> &#64;<span class="hl opt">{</span>c<span class="hl opt">=</span><span class="hl kwb">'c'</span><span class="hl opt">,</span> p<span class="hl opt">=</span><span class="hl num">0.1979883004921</span><span class="hl opt">}</span>
<span class="hl opt">,</span> &#64;<span class="hl opt">{</span>c<span class="hl opt">=</span><span class="hl kwb">'g'</span><span class="hl opt">,</span> p<span class="hl opt">=</span><span class="hl num">0.1975473066391</span><span class="hl opt">}</span>
<span class="hl opt">,</span> &#64;<span class="hl opt">{</span>c<span class="hl opt">=</span><span class="hl kwb">'t'</span><span class="hl opt">,</span> p<span class="hl opt">=</span><span class="hl num">0.3015094502008</span><span class="hl opt">}</span>
<span class="hl opt">)</span> <span class="hl slc">// end of [val]</span>

<span class="hl ppc">#define i2sz size1_of_int1</span>
<span class="hl kwa">val</span> <span class="hl opt">() =</span> fprint <span class="hl opt">(</span>stdout_ref<span class="hl opt">,</span> <span class="hl str">&quot;&gt;ONE Homo sapiens alu</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">)</span>
<span class="hl kwa">val</span> <span class="hl opt">() =</span> repeat_fasta <span class="hl opt">(</span>stdout_ref<span class="hl opt">,</span> alu<span class="hl opt">,</span> i2sz <span class="hl opt">(</span><span class="hl num">2</span> <span class="hl opt">*</span> n<span class="hl opt">))</span>
<span class="hl kwa">val</span> <span class="hl opt">() =</span> fprint <span class="hl opt">(</span>stdout_ref<span class="hl opt">,</span> <span class="hl str">&quot;&gt;TWO IUB ambiguity codes</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">)</span>
<span class="hl kwa">val</span> <span class="hl opt">() =</span> random_fasta <span class="hl opt">(</span>stdout_ref<span class="hl opt">, !</span>p_iub<span class="hl opt">,</span> iub_sz<span class="hl opt">,</span> i2sz <span class="hl opt">(</span><span class="hl num">3</span> <span class="hl opt">*</span> n<span class="hl opt">))</span>
<span class="hl kwa">val</span> <span class="hl opt">() =</span> array_ptr_free <span class="hl opt">{</span>amino?<span class="hl opt">} (</span>pf_gc<span class="hl opt">,</span> pf_iub | p_iub<span class="hl opt">)</span>
<span class="hl kwa">val</span> <span class="hl opt">() =</span> fprint <span class="hl opt">(</span>stdout_ref<span class="hl opt">,</span> <span class="hl str">&quot;&gt;THREE Homo sapiens frequency</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">)</span>
<span class="hl kwa">val</span> <span class="hl opt">() =</span> random_fasta <span class="hl opt">(</span>stdout_ref<span class="hl opt">, !</span>p_homo<span class="hl opt">,</span> homo_sz<span class="hl opt">,</span> i2sz <span class="hl opt">(</span>n <span class="hl opt">*</span> <span class="hl num">5</span><span class="hl opt">))</span>
<span class="hl kwa">val</span> <span class="hl opt">() =</span> array_ptr_free <span class="hl opt">{</span>amino?<span class="hl opt">} (</span>pf_homo_gc<span class="hl opt">,</span> pf_homo | p_homo<span class="hl opt">)</span>

<span class="hl opt">}</span> <span class="hl slc">// end of [main]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl opt">%{^</span>

ats_void_type
fasta_fwrite_substring <span class="hl opt">(</span>
  ats_ptr_type str<span class="hl opt">,</span> ats_size_type beg
<span class="hl opt">,</span> ats_size_type len<span class="hl opt">,</span> ats_ptr_type out
<span class="hl opt">) {</span>
  fwrite_unlocked<span class="hl opt">(((</span>char*)str<span class="hl opt">)+</span>beg<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">,</span> len<span class="hl opt">, (</span><span class="hl kwd">FILE</span>*)out<span class="hl opt">) ;</span> <span class="hl kwa">return</span> <span class="hl opt">;</span>
<span class="hl opt">}</span>

ats_void_type
fasta_fputc <span class="hl opt">(</span>ats_char_type c<span class="hl opt">,</span> ats_ptr_type out<span class="hl opt">) {</span>
  fputc_unlocked <span class="hl opt">((</span>char<span class="hl opt">)</span>c<span class="hl opt">, (</span><span class="hl kwd">FILE</span>*)out<span class="hl opt">) ;</span> <span class="hl kwa">return</span> <span class="hl opt">;</span>
<span class="hl opt">}</span>

ats_size_type
fasta_fwrite_byte
  <span class="hl opt">(</span>ats_ptr_type buf<span class="hl opt">,</span> ats_size_type n<span class="hl opt">,</span> ats_ptr_type fil<span class="hl opt">) {</span>
  <span class="hl kwa">return</span> fwrite_unlocked <span class="hl opt">((</span>void*)buf<span class="hl opt">, (</span>size_t<span class="hl opt">)</span><span class="hl num">1</span><span class="hl opt">, (</span>size_t<span class="hl opt">)</span>n<span class="hl opt">, (</span><span class="hl kwd">FILE</span>*)fil<span class="hl opt">) ;</span>
<span class="hl opt">}</span>

<span class="hl opt">%}</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl com">(* end of [fasta2.dats] *)</span>
