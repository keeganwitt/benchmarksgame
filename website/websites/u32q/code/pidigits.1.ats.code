<span class="hl com">(*</span>
<span class="hl com">** The Computer Language Benchmarks Game</span>
<span class="hl com">** http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com">**</span>
<span class="hl com">** contributed by Hongwei Xi</span>
<span class="hl com">**</span>
<span class="hl com">** compilation command:</span>
<span class="hl com">**   atscc -O3 -fomit-frame-pointer pidigits.dats -o pidigits -lgmp</span>
<span class="hl com">*)</span>

<span class="hl kwa">staload</span> <span class="hl str">&quot;libc/SATS/gmp.sats&quot;</span>

fn print_digit <span class="hl opt">(</span>i<span class="hl opt">:</span> <span class="hl kwb">int</span><span class="hl opt">,</span> d<span class="hl opt">:</span> <span class="hl kwb">int</span><span class="hl opt">):</span> void <span class="hl opt">=</span> <span class="hl kwa">begin</span>
  print <span class="hl opt">(</span>char_of_int <span class="hl opt">(</span>d <span class="hl opt">+</span> int_of <span class="hl kwb">'0'</span><span class="hl opt">)) ;</span>
  <span class="hl kwa">if</span> i <span class="hl kwa">mod</span> <span class="hl num">10</span> <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl kwa">then</span> printf <span class="hl opt">(</span><span class="hl str">&quot;</span><span class="hl esc">\t</span><span class="hl str">:%i</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> &#64;<span class="hl opt">(</span>i<span class="hl opt">))</span>
<span class="hl kwa">end</span>

<span class="hl kwa">fun</span> g <span class="hl opt">(</span>
    q<span class="hl opt">: &amp;</span>mpz_vt<span class="hl opt">,</span> r<span class="hl opt">: &amp;</span>mpz_vt<span class="hl opt">,</span> t<span class="hl opt">: &amp;</span>mpz_vt
  <span class="hl opt">,</span> k<span class="hl opt">:</span> <span class="hl kwb">int</span><span class="hl opt">,</span> n<span class="hl opt">: &amp;</span>mpz_vt<span class="hl opt">,</span> l<span class="hl opt">:</span> <span class="hl kwb">int</span><span class="hl opt">,</span> i<span class="hl opt">:</span> <span class="hl kwb">int</span><span class="hl opt">,</span> <span class="hl kwd">N</span><span class="hl opt">:</span> <span class="hl kwb">int</span>
  <span class="hl opt">) :</span> void <span class="hl opt">=</span> <span class="hl kwa">let</span>
  var x1<span class="hl opt">:</span> mpz_vt? <span class="hl kwa">and</span> x2<span class="hl opt">:</span> mpz_vt?
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> mpz_init x1 <span class="hl kwa">and</span> <span class="hl opt">() =</span> mpz_init x2
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> mpz_mul <span class="hl opt">(</span>x1<span class="hl opt">,</span> q<span class="hl opt">,</span> <span class="hl num">4</span><span class="hl opt">)</span> <span class="hl slc">// x1 = 4*q</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> mpz_add <span class="hl opt">(</span>x1<span class="hl opt">,</span> r<span class="hl opt">)</span> <span class="hl slc">// x1 = 4*q + r</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> mpz_add <span class="hl opt">(</span>x2<span class="hl opt">,</span> n<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">)</span> <span class="hl slc">// x2 = n+1</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> mpz_mul <span class="hl opt">(</span>x2<span class="hl opt">,</span> t<span class="hl opt">)</span> <span class="hl slc">// x2 = t * (n+1)</span>
  <span class="hl kwa">val</span> cmp <span class="hl opt">=</span> mpz_cmp <span class="hl opt">(</span>x1<span class="hl opt">,</span> x2<span class="hl opt">)</span>
<span class="hl kwa">in</span>
  case<span class="hl opt">+</span> <span class="hl num">0</span> <span class="hl kwa">of</span>
  | _ <span class="hl kwa">when</span> cmp <span class="hl opt">&gt;=</span> <span class="hl num">0</span> <span class="hl opt">=&gt;</span> <span class="hl kwa">begin</span>
      mpz_mul <span class="hl opt">(</span>x1<span class="hl opt">,</span> q<span class="hl opt">,</span> <span class="hl num">7</span> <span class="hl opt">*</span> k <span class="hl opt">+</span> <span class="hl num">2</span><span class="hl opt">);</span>
      mpz_mul <span class="hl opt">(</span>x2<span class="hl opt">,</span> r<span class="hl opt">,</span> l<span class="hl opt">);</span>
      mpz_add <span class="hl opt">(</span>x1<span class="hl opt">,</span> x2<span class="hl opt">);</span>
      mpz_mul <span class="hl opt">(</span>t<span class="hl opt">,</span> l<span class="hl opt">);</span>
      mpz_tdiv_q <span class="hl opt">(</span>n<span class="hl opt">,</span> x1<span class="hl opt">,</span> t<span class="hl opt">);</span>
      mpz_mul <span class="hl opt">(</span>x2<span class="hl opt">,</span> q<span class="hl opt">,</span> <span class="hl num">2</span><span class="hl opt">);</span>
      mpz_add <span class="hl opt">(</span>x2<span class="hl opt">,</span> r<span class="hl opt">);</span>
      mpz_mul <span class="hl opt">(</span>r<span class="hl opt">,</span> x2<span class="hl opt">,</span> l<span class="hl opt">);</span>
      mpz_mul <span class="hl opt">(</span>q<span class="hl opt">,</span> k<span class="hl opt">);</span>
      mpz_clear x1<span class="hl opt">;</span> mpz_clear x2<span class="hl opt">;</span>
      g <span class="hl opt">(</span>q<span class="hl opt">,</span> r<span class="hl opt">,</span> t<span class="hl opt">,</span> k<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">,</span> n<span class="hl opt">,</span> l<span class="hl opt">+</span><span class="hl num">2</span><span class="hl opt">,</span> i<span class="hl opt">,</span> <span class="hl kwd">N</span><span class="hl opt">)</span>
    <span class="hl kwa">end</span>
  | _ <span class="hl opt">=&gt;</span> <span class="hl kwa">begin</span>
      print_digit <span class="hl opt">(</span>i<span class="hl opt">,</span> mpz_get_int n<span class="hl opt">);</span>
      mpz_mul <span class="hl opt">(</span>x1<span class="hl opt">,</span> t<span class="hl opt">,</span> n<span class="hl opt">);</span>
      mpz_sub <span class="hl opt">(</span>x2<span class="hl opt">,</span> r<span class="hl opt">,</span> x1<span class="hl opt">);</span>
      mpz_mul <span class="hl opt">(</span>x2<span class="hl opt">,</span> <span class="hl num">10</span><span class="hl opt">);</span>
      mpz_mul <span class="hl opt">(</span>x1<span class="hl opt">,</span> q<span class="hl opt">,</span> <span class="hl num">3</span><span class="hl opt">);</span>
      mpz_add <span class="hl opt">(</span>x1<span class="hl opt">,</span> r<span class="hl opt">);</span>
      mpz_mul <span class="hl opt">(</span>x1<span class="hl opt">,</span> <span class="hl num">10</span><span class="hl opt">);</span>
      mpz_tdiv_q <span class="hl opt">(</span>x1<span class="hl opt">,</span> t<span class="hl opt">);</span>
      mpz_set <span class="hl opt">(</span>r<span class="hl opt">,</span> x2<span class="hl opt">);</span>
      mpz_mul <span class="hl opt">(</span>x2<span class="hl opt">,</span> n<span class="hl opt">,</span> <span class="hl num">10</span><span class="hl opt">);</span>
      mpz_sub <span class="hl opt">(</span>n<span class="hl opt">,</span> x1<span class="hl opt">,</span> x2<span class="hl opt">);</span>
      mpz_mul <span class="hl opt">(</span>q<span class="hl opt">,</span> <span class="hl num">10</span><span class="hl opt">);</span>
      mpz_clear x1<span class="hl opt">;</span> mpz_clear x2<span class="hl opt">;</span>
      <span class="hl kwa">if</span> i <span class="hl opt">&lt;</span> <span class="hl kwd">N</span> <span class="hl kwa">then</span> g <span class="hl opt">(</span>q<span class="hl opt">,</span> r<span class="hl opt">,</span> t<span class="hl opt">,</span> k<span class="hl opt">,</span> n<span class="hl opt">,</span> l<span class="hl opt">,</span> i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">,</span> <span class="hl kwd">N</span><span class="hl opt">)</span>
    <span class="hl kwa">end</span>
<span class="hl kwa">end</span> <span class="hl slc">// end of [g]</span>

<span class="hl kwa">implement</span> main <span class="hl opt">(</span>argc<span class="hl opt">,</span> argv<span class="hl opt">) =</span> <span class="hl kwa">let</span>
  var q<span class="hl opt">:</span> mpz_vt <span class="hl kwa">and</span> r<span class="hl opt">:</span> mpz_vt <span class="hl kwa">and</span> t<span class="hl opt">:</span> mpz_vt <span class="hl kwa">and</span> n<span class="hl opt">:</span> mpz_vt
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> <span class="hl kwa">assert</span> <span class="hl opt">(</span>argc <span class="hl opt">=</span> <span class="hl num">2</span><span class="hl opt">)</span>
  <span class="hl kwa">val</span> <span class="hl kwd">N</span> <span class="hl opt">=</span> int1_of argv<span class="hl opt">.[</span><span class="hl num">1</span><span class="hl opt">]</span>
  <span class="hl kwa">val</span> <span class="hl opt">() =</span> assert_errmsg_bool1
    <span class="hl opt">(</span><span class="hl kwd">N</span> <span class="hl opt">&gt;=</span> <span class="hl num">2</span><span class="hl opt">,</span> <span class="hl str">&quot;The input integer needs to be a natural number.</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">)</span>
<span class="hl kwa">in</span>
  mpz_init_set <span class="hl opt">(</span>q<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">);</span>
  mpz_init_set <span class="hl opt">(</span>r<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">);</span>
  mpz_init_set <span class="hl opt">(</span>t<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">);</span>
  mpz_init_set <span class="hl opt">(</span>n<span class="hl opt">,</span> <span class="hl num">3</span><span class="hl opt">);</span>
  g <span class="hl opt">(</span>q<span class="hl opt">,</span> r<span class="hl opt">,</span> t<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">,</span> n<span class="hl opt">,</span> <span class="hl num">3</span><span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">,</span> <span class="hl kwd">N</span><span class="hl opt">);</span>
  mpz_clear q<span class="hl opt">;</span> mpz_clear r<span class="hl opt">;</span> mpz_clear t<span class="hl opt">;</span> mpz_clear n<span class="hl opt">;</span>
<span class="hl kwa">end</span> <span class="hl slc">// end of [main]</span>

<span class="hl com">(* ****** ****** *)</span>

<span class="hl com">(* end of [pidigits.dats] *)</span>
