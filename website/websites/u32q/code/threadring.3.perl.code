<span class="hl slc"># The Computer Language Benchmarks Game</span>
<span class="hl slc"># http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">#  contributed by Peter Corlett </span>

<span class="hl slc"># This is really more a classic fork() and Unix IPC implementation, but it</span>
<span class="hl slc"># uses threads purely to satisfy the rules of the game. This makes it quite</span>
<span class="hl slc"># nippy as it doesn't have to worry about any sort of locking because we</span>
<span class="hl slc"># essentially have 503 independent processes that just happen to share an</span>
<span class="hl slc"># address space.</span>
<span class="hl slc">#</span>
<span class="hl slc"># Almost all of the time appears to be consumed by the thread library doing</span>
<span class="hl slc"># all the deep copying required to create a clone and then tearing it down</span>
<span class="hl slc"># afterwards. A fork() implementation is thus likely to be very fast as it'd</span>
<span class="hl slc"># use copy-on-write pages in the kernel.</span>
<span class="hl slc">#</span>
<span class="hl slc"># As a minor aside, IO::Pipe wasn't used here because it expects one to fork()</span>
<span class="hl slc"># and use -&gt;reader and -&gt;writer in different processes to set which side of</span>
<span class="hl slc"># the pipe the IO::Pipe object will now refer to.</span>
<span class="hl slc">#</span>
<span class="hl slc"># It requires at least perl 5.10.0, although it could be easily rewritten to</span>
<span class="hl slc"># use an earlier version.</span>

<span class="hl kwa">use</span> <span class="hl num">5.010</span><span class="hl opt">;</span>
<span class="hl kwa">use</span> warnings<span class="hl opt">;</span>
<span class="hl kwa">use</span> strict<span class="hl opt">;</span>
<span class="hl kwa">use</span> threads<span class="hl opt">;</span>
<span class="hl kwa">use</span> IO<span class="hl opt">::</span>Handle<span class="hl opt">;</span> <span class="hl slc"># for autoflush</span>

<span class="hl kwa">use</span> constant THREADS <span class="hl opt">=&gt;</span> <span class="hl num">503</span><span class="hl opt">;</span>
<span class="hl slc"># stack size may need tuning for your arch, default of 8MB is likely to not</span>
<span class="hl slc"># work well on 32 bit systems or those with limited memory.</span>
<span class="hl kwa">use</span> constant THREAD_STACK_SIZE <span class="hl opt">=&gt;</span> <span class="hl num">512</span> <span class="hl opt">*</span> <span class="hl num">1024</span><span class="hl opt">;</span>

<span class="hl kwc">my</span> <span class="hl kwb">$passes</span> <span class="hl opt">=</span> <span class="hl kwc">shift</span><span class="hl opt">;</span>
<span class="hl kwc">die</span> <span class="hl str">&quot;Usage: $0 [passes]</span><span class="hl esc">\n</span><span class="hl str">&quot;</span>
  <span class="hl kwa">unless</span> <span class="hl kwc">defined</span> <span class="hl kwb">$passes</span> <span class="hl opt">&amp;&amp;</span> <span class="hl kwc">int</span><span class="hl opt">(</span><span class="hl kwb">$passes</span><span class="hl opt">) &gt;</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl kwb">$passes</span> <span class="hl opt">=</span> <span class="hl kwc">int</span><span class="hl opt">(</span><span class="hl kwb">$passes</span><span class="hl opt">);</span>

<span class="hl kwc">my</span><span class="hl opt">(</span><span class="hl kwb">&#64;pipes</span><span class="hl opt">,</span> <span class="hl kwb">&#64;threads</span><span class="hl opt">);</span>

<span class="hl kwb">&#64;pipes</span> <span class="hl opt">=</span> <span class="hl kwc">map</span> <span class="hl opt">{</span>
  <span class="hl kwc">pipe my</span><span class="hl opt">(</span><span class="hl kwb">$r</span><span class="hl opt">,</span> <span class="hl kwb">$w</span><span class="hl opt">)</span> <span class="hl kwc">or die</span> <span class="hl str">&quot;pipe() failed&quot;</span><span class="hl opt">;</span>
  <span class="hl opt">{</span> <span class="hl kwc">read</span> <span class="hl opt">=&gt;</span> <span class="hl kwb">$r</span><span class="hl opt">,</span> <span class="hl kwc">write</span> <span class="hl opt">=&gt;</span> <span class="hl kwb">$w</span> <span class="hl opt">}</span>
<span class="hl opt">} (</span><span class="hl num">0</span> <span class="hl opt">..</span> THREADS<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">);</span>

<span class="hl kwb">&#64;threads</span> <span class="hl opt">=</span> <span class="hl kwc">map</span> <span class="hl opt">{</span>
  <span class="hl kwc">my</span> <span class="hl kwb">$in</span> <span class="hl opt">=</span> <span class="hl kwb">$pipes</span><span class="hl opt">[</span><span class="hl kwb">$_</span><span class="hl opt">]{</span><span class="hl kwc">read</span><span class="hl opt">};</span>
  <span class="hl kwb">$in</span><span class="hl opt">-&gt;</span><span class="hl kwd">autoflush</span><span class="hl opt">;</span>
  <span class="hl kwc">my</span> <span class="hl kwb">$out</span> <span class="hl opt">=</span> <span class="hl kwb">$pipes</span><span class="hl opt">[(</span><span class="hl kwb">$_</span> <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">) %</span> THREADS<span class="hl opt">]{</span><span class="hl kwc">write</span><span class="hl opt">};</span>
  <span class="hl kwb">$out</span><span class="hl opt">-&gt;</span><span class="hl kwd">autoflush</span><span class="hl opt">;</span>
  <span class="hl kwc">my</span> <span class="hl kwb">$thread_id</span> <span class="hl opt">=</span> <span class="hl kwb">$_</span> <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span>
  threads<span class="hl opt">-&gt;</span><span class="hl kwd">create</span>
    <span class="hl opt">({</span> stack_size <span class="hl opt">=&gt;</span> THREAD_STACK_SIZE<span class="hl opt">, },</span>
     <span class="hl kwa">sub</span> <span class="hl opt">{</span>	     <span class="hl slc"># $in, $out and $thread_id are captured in this closure</span>
       <span class="hl kwa">while</span><span class="hl opt">(</span><span class="hl kwc">my</span> <span class="hl kwb">$msg</span> <span class="hl opt">= &lt;</span><span class="hl kwb">$in</span><span class="hl opt">&gt;) {</span> <span class="hl slc"># receive message</span>
	 <span class="hl kwc">chomp</span> <span class="hl kwb">$msg</span><span class="hl opt">;</span>
	 <span class="hl kwa">if</span><span class="hl opt">(</span><span class="hl kwb">$msg</span> <span class="hl kwc">eq</span> <span class="hl str">'EXIT'</span><span class="hl opt">) {</span>	<span class="hl slc"># asked to exit</span>
	   <span class="hl kwa">last</span><span class="hl opt">;</span>
	 <span class="hl opt">}</span> <span class="hl kwa">elsif</span><span class="hl opt">(</span><span class="hl kwb">$msg</span> <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">) {</span>	<span class="hl slc"># still work to do</span>
	   <span class="hl kwc">say</span> <span class="hl kwb">$out</span> <span class="hl opt">--</span><span class="hl kwb">$msg</span><span class="hl opt">;</span>	<span class="hl slc"># send message</span>
	 <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>		<span class="hl slc"># no more work to do</span>
	   <span class="hl kwc">say</span> <span class="hl kwb">$thread_id</span><span class="hl opt">;</span>	<span class="hl slc"># output result</span>
	   <span class="hl slc"># tell all threads to exit</span>
	   <span class="hl kwc">say</span> <span class="hl kwb">$_</span> <span class="hl str">'EXIT'</span> <span class="hl kwa">foreach</span> <span class="hl kwc">map</span> <span class="hl opt">{</span> <span class="hl kwb">$_</span><span class="hl opt">-&gt;{</span><span class="hl kwc">write</span><span class="hl opt">} }</span> <span class="hl kwb">&#64;pipes</span><span class="hl opt">;</span>
	   <span class="hl kwa">last</span><span class="hl opt">;</span>
	 <span class="hl opt">}</span>
       <span class="hl opt">}</span>
     <span class="hl opt">});</span>
<span class="hl opt">} (</span><span class="hl num">0</span> <span class="hl opt">..</span> THREADS<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">);</span>

<span class="hl slc"># inject initial message</span>
<span class="hl kwc">my</span> <span class="hl kwb">$start_fh</span> <span class="hl opt">=</span> <span class="hl kwb">$pipes</span><span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">]{</span><span class="hl kwc">write</span><span class="hl opt">};</span>
<span class="hl kwc">say</span> <span class="hl kwb">$start_fh $passes</span><span class="hl opt">;</span>

<span class="hl slc"># collect exited threads</span>
<span class="hl kwb">$_</span><span class="hl opt">-&gt;</span><span class="hl kwc">join</span> <span class="hl kwa">foreach</span> <span class="hl kwb">&#64;threads</span><span class="hl opt">;</span>

