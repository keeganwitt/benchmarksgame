<span class="hl slc">;;   The Computer Language Benchmarks Game</span>
<span class="hl slc">;;   http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">;;;</span>
<span class="hl slc">;;; By Jon Smith (rev 4)</span>
<span class="hl slc">;;; </span>
<span class="hl slc">;;; This is a multi core implementation. It should be quite fast.</span>
<span class="hl slc">;;; It is now a mix of multiple techniques stolen from a number of other implementations.</span>
<span class="hl slc">;;; (It is essentially based on every other implementation available)</span>
<span class="hl slc">;;;</span>
<span class="hl slc">;;; To compile</span>
<span class="hl slc">;;; sbcl --load fannkuch.lisp --eval &quot;(save-lisp-and-die \&quot;fannkuch.core\&quot; :purify t :toplevel (lambda () (main) (quit)))&quot;</span>
<span class="hl slc">;;; To run</span>
<span class="hl slc">;;; sbcl --noinform --core fannkuch.core %A</span>
<span class="hl slc">;(setf *efficiency-note-cost-threshold* 1)</span>
<span class="hl slc">;(setf *efficiency-note-limit* 8)</span>

<span class="hl opt">(</span><span class="hl kwa">declaim</span> <span class="hl opt">(</span><span class="hl kwa">optimize</span> <span class="hl opt">(</span><span class="hl kwa">speed</span> <span class="hl num">3</span><span class="hl opt">) (</span><span class="hl kwa">safety</span> <span class="hl num">0</span><span class="hl opt">) (</span><span class="hl kwa">space</span> <span class="hl num">1</span><span class="hl opt">) (</span><span class="hl kwa">debug</span> <span class="hl num">0</span><span class="hl opt">)))</span>

<span class="hl opt">(</span><span class="hl kwa">defmacro</span> sb <span class="hl opt">(</span><span class="hl kwa">a</span><span class="hl opt">) `(</span><span class="hl kwa">the</span> fixnum <span class="hl opt">,</span>a<span class="hl opt">))</span>
<span class="hl opt">(</span><span class="hl kwa">deftype</span> sb <span class="hl opt">() '</span>fixnum<span class="hl opt">)</span>

<span class="hl opt">(</span><span class="hl kwa">defmacro</span> setlambda<span class="hl opt">(</span><span class="hl kwa">n</span><span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> fixnum n<span class="hl opt">))</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">((</span><span class="hl kwa">copy</span> <span class="hl opt">(</span><span class="hl kwa">gensym</span><span class="hl opt">))</span>
	<span class="hl opt">(</span><span class="hl kwa">perm</span> <span class="hl opt">(</span><span class="hl kwa">gensym</span><span class="hl opt">)))</span>
  <span class="hl opt">`(</span><span class="hl kwa">lambda</span> <span class="hl opt">(,</span>perm <span class="hl opt">,</span>copy<span class="hl opt">)</span>
     <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">optimize</span> <span class="hl opt">(</span><span class="hl kwa">speed</span> <span class="hl num">3</span><span class="hl opt">) (</span><span class="hl kwa">safety</span> <span class="hl num">0</span><span class="hl opt">) (</span><span class="hl kwa">space</span> <span class="hl num">0</span><span class="hl opt">) (</span><span class="hl kwa">debug</span> <span class="hl num">0</span><span class="hl opt">))</span>
      <span class="hl opt">(</span><span class="hl kwa">type</span> <span class="hl opt">(</span><span class="hl kwa">simple-array</span> sb <span class="hl opt">(,</span>n<span class="hl opt">)) ,</span>copy <span class="hl opt">,</span>perm<span class="hl opt">))</span>
     <span class="hl opt">,&#64;(</span><span class="hl kwa">loop</span> for i of-type fixnum from <span class="hl num">0</span> below n collect
	    <span class="hl opt">`(</span><span class="hl kwa">setf</span> <span class="hl opt">(</span><span class="hl kwa">aref</span> <span class="hl opt">,</span>copy <span class="hl opt">,</span>i<span class="hl opt">) (</span><span class="hl kwa">aref</span> <span class="hl opt">,</span>perm <span class="hl opt">,</span>i<span class="hl opt">))))))</span>

<span class="hl opt">(</span><span class="hl kwa">defmacro</span> countfliplambda <span class="hl opt">(</span><span class="hl kwa">n</span><span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> fixnum n<span class="hl opt">))</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">((</span><span class="hl kwa">copy</span> <span class="hl opt">(</span><span class="hl kwa">gensym</span><span class="hl opt">))</span>
	<span class="hl opt">(</span><span class="hl kwa">c</span> <span class="hl opt">(</span><span class="hl kwa">gensym</span><span class="hl opt">))</span>
	<span class="hl opt">(</span><span class="hl kwa">z</span> <span class="hl opt">(</span><span class="hl kwa">gensym</span><span class="hl opt">)))</span>
    <span class="hl opt">`(</span><span class="hl kwa">lambda</span> <span class="hl opt">(,</span>copy <span class="hl opt">&amp;</span>aux <span class="hl opt">(,</span>c <span class="hl num">0</span><span class="hl opt">))</span>
       <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">optimize</span> <span class="hl opt">(</span><span class="hl kwa">speed</span> <span class="hl num">3</span><span class="hl opt">) (</span><span class="hl kwa">safety</span> <span class="hl num">0</span><span class="hl opt">) (</span><span class="hl kwa">space</span> <span class="hl num">0</span><span class="hl opt">) (</span><span class="hl kwa">debug</span> <span class="hl num">0</span><span class="hl opt">))</span>
		<span class="hl opt">(</span><span class="hl kwa">type</span> sb <span class="hl opt">,</span>c<span class="hl opt">)</span>
		<span class="hl opt">(</span><span class="hl kwa">type</span> <span class="hl opt">(</span><span class="hl kwa">simple-array</span> sb <span class="hl opt">(,</span>n<span class="hl opt">)) ,</span>copy<span class="hl opt">))</span>
       <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">((,</span>z <span class="hl opt">(</span><span class="hl kwa">aref</span> <span class="hl opt">,</span>copy <span class="hl num">0</span><span class="hl opt">)))</span>
	 <span class="hl opt">(</span><span class="hl kwa">loop</span> until <span class="hl opt">(= ,</span>z <span class="hl num">0</span><span class="hl opt">)</span> do
	      <span class="hl opt">(</span><span class="hl kwa">progn</span>
		<span class="hl opt">(</span><span class="hl kwa">case</span> <span class="hl opt">,</span>z 
		  <span class="hl opt">,&#64;(</span><span class="hl kwa">loop</span> for i of-type sb from <span class="hl num">1</span> to <span class="hl opt">(</span><span class="hl kwa">-</span> n <span class="hl num">1</span><span class="hl opt">)</span> collect
			 <span class="hl opt">`(,</span>i
			   <span class="hl opt">,&#64;(</span><span class="hl kwa">loop</span> for j of-type sb from <span class="hl num">0</span> to <span class="hl opt">(</span><span class="hl kwa">ash</span> i -<span class="hl num">1</span><span class="hl opt">)</span>
				if <span class="hl opt">(</span><span class="hl kwa">not</span> <span class="hl opt">(=</span> j <span class="hl opt">(</span><span class="hl kwa">-</span> i j<span class="hl opt">)))</span>
				collect <span class="hl opt">`(</span><span class="hl kwa">rotatef</span> <span class="hl opt">(</span><span class="hl kwa">aref</span> <span class="hl opt">,</span>copy <span class="hl opt">,</span>j<span class="hl opt">)</span> 
						  <span class="hl opt">(</span><span class="hl kwa">aref</span> <span class="hl opt">,</span>copy <span class="hl opt">,(</span><span class="hl kwa">-</span> i j<span class="hl opt">)))))))</span>
		<span class="hl opt">(</span><span class="hl kwa">incf</span> <span class="hl opt">,</span>c<span class="hl opt">)</span>
		<span class="hl opt">(</span><span class="hl kwa">setf</span> <span class="hl opt">,</span>z <span class="hl opt">(</span><span class="hl kwa">aref</span> <span class="hl opt">,</span>copy <span class="hl num">0</span><span class="hl opt">)))))</span>
       <span class="hl opt">,</span>c<span class="hl opt">)))</span>
<span class="hl opt">(</span><span class="hl kwa">eval-when</span> <span class="hl opt">(:</span>compile-toplevel <span class="hl opt">:</span>load-toplevel <span class="hl opt">:</span>execute<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">defun</span> factorial <span class="hl opt">(</span><span class="hl kwa">n</span><span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> fixnum n<span class="hl opt">))</span>
    <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(&gt;</span> n <span class="hl num">2</span><span class="hl opt">)</span>
	<span class="hl opt">(*</span> n <span class="hl opt">(</span><span class="hl kwa">factorial</span> <span class="hl opt">(</span><span class="hl kwa">-</span> n <span class="hl num">1</span><span class="hl opt">)))</span>
	n<span class="hl opt">)))</span>

<span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">((</span><span class="hl kwa">factorial-array</span> <span class="hl opt">(</span><span class="hl kwa">apply</span> <span class="hl opt">#'</span>vector <span class="hl opt">(</span><span class="hl kwa">loop</span> for i from <span class="hl num">1</span> to <span class="hl num">16</span> collect <span class="hl opt">(</span><span class="hl kwa">factorial</span> i<span class="hl opt">)))))</span>
  <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> <span class="hl opt">(</span><span class="hl kwa">simple-array</span> fixnum <span class="hl opt">(*))))</span>
  <span class="hl opt">(</span><span class="hl kwa">defun</span> pre-computed-factorial <span class="hl opt">(</span><span class="hl kwa">n</span><span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> fixnum n<span class="hl opt">))</span>
    <span class="hl opt">(</span><span class="hl kwa">aref</span> factorial-array <span class="hl opt">(</span><span class="hl kwa">-</span> n <span class="hl num">1</span><span class="hl opt">))))</span>


<span class="hl opt">(</span><span class="hl kwa">defun</span> nth-permutation <span class="hl opt">(</span><span class="hl kwa">perm</span> copy count idx <span class="hl opt">&amp;</span>optional <span class="hl opt">(</span><span class="hl kwa">len</span> <span class="hl opt">(</span><span class="hl kwa">length</span> perm<span class="hl opt">)))</span>
  <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> <span class="hl opt">(</span><span class="hl kwa">simple-array</span> fixnum <span class="hl opt">(*))</span> perm copy count<span class="hl opt">)</span>
	   <span class="hl opt">(</span><span class="hl kwa">type</span> fixnum idx len<span class="hl opt">))</span>
  <span class="hl opt">(</span><span class="hl kwa">loop</span> for i from <span class="hl num">0</span> below len do <span class="hl opt">(</span><span class="hl kwa">setf</span> <span class="hl opt">(</span><span class="hl kwa">aref</span> perm i<span class="hl opt">)</span> i<span class="hl opt">))</span>
  <span class="hl opt">(</span><span class="hl kwa">loop</span> for i of-type fixnum from <span class="hl opt">(</span><span class="hl kwa">-</span> len <span class="hl num">1</span><span class="hl opt">)</span> above <span class="hl num">0</span> do
       <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">((</span><span class="hl kwa">d</span> <span class="hl opt">(</span><span class="hl kwa">truncate</span> idx <span class="hl opt">(</span><span class="hl kwa">the</span> fixnum <span class="hl opt">(</span><span class="hl kwa">pre-computed-factorial</span> i<span class="hl opt">)))))</span>
	 <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> fixnum d<span class="hl opt">))</span>
	 <span class="hl opt">(</span><span class="hl kwa">setf</span> <span class="hl opt">(</span><span class="hl kwa">aref</span> count i<span class="hl opt">)</span> d<span class="hl opt">)</span>
	 <span class="hl opt">(</span><span class="hl kwa">setf</span> idx <span class="hl opt">(</span><span class="hl kwa">the</span> fixnum <span class="hl opt">(</span><span class="hl kwa">mod</span> idx <span class="hl opt">(</span><span class="hl kwa">the</span> fixnum<span class="hl opt">(</span><span class="hl kwa">pre-computed-factorial</span> i<span class="hl opt">)))))</span>
	 <span class="hl opt">(</span><span class="hl kwa">loop</span> for m of-type fixnum from <span class="hl num">0</span> to i do <span class="hl opt">(</span><span class="hl kwa">setf</span> <span class="hl opt">(</span><span class="hl kwa">aref</span> copy m<span class="hl opt">) (</span><span class="hl kwa">aref</span> perm m<span class="hl opt">)))</span>
	 <span class="hl opt">(</span><span class="hl kwa">loop</span> for j of-type fixnum from <span class="hl num">0</span> to i do
	      <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(&lt;= (+</span> j d<span class="hl opt">)</span> i<span class="hl opt">)</span>
		  <span class="hl opt">(</span><span class="hl kwa">setf</span> <span class="hl opt">(</span><span class="hl kwa">aref</span> perm j<span class="hl opt">) (</span><span class="hl kwa">aref</span> copy <span class="hl opt">(+</span> j d<span class="hl opt">)))</span>
		  <span class="hl opt">(</span><span class="hl kwa">setf</span> <span class="hl opt">(</span><span class="hl kwa">aref</span> perm j<span class="hl opt">) (</span><span class="hl kwa">aref</span> copy <span class="hl opt">(</span><span class="hl kwa">-</span> <span class="hl opt">(</span><span class="hl kwa">sb</span> <span class="hl opt">(+</span> j d<span class="hl opt">))</span> i <span class="hl num">1</span><span class="hl opt">))))))))</span>

<span class="hl opt">(</span><span class="hl kwa">defun</span> next-permutation <span class="hl opt">(</span><span class="hl kwa">perm</span> count<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">Declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> <span class="hl opt">(</span><span class="hl kwa">simple-array</span> sb <span class="hl opt">(*))</span> perm count<span class="hl opt">))</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">((</span><span class="hl kwa">first</span> <span class="hl opt">(</span><span class="hl kwa">aref</span> perm <span class="hl num">1</span><span class="hl opt">)))</span>
    <span class="hl opt">(</span><span class="hl kwa">setf</span> <span class="hl opt">(</span><span class="hl kwa">aref</span> perm <span class="hl num">1</span><span class="hl opt">) (</span><span class="hl kwa">aref</span> perm <span class="hl num">0</span><span class="hl opt">))</span>
    <span class="hl opt">(</span><span class="hl kwa">setf</span> <span class="hl opt">(</span><span class="hl kwa">aref</span> perm <span class="hl num">0</span><span class="hl opt">)</span> first<span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">((</span><span class="hl kwa">i</span> <span class="hl num">1</span><span class="hl opt">))</span>
      <span class="hl opt">(</span><span class="hl kwa">incf</span> <span class="hl opt">(</span><span class="hl kwa">aref</span> count i<span class="hl opt">))</span>
      <span class="hl opt">(</span><span class="hl kwa">do</span> <span class="hl opt">()</span>
	  <span class="hl opt">((</span><span class="hl kwa">not</span> <span class="hl opt">(&gt; (</span><span class="hl kwa">aref</span> count i<span class="hl opt">)</span> i<span class="hl opt">)))</span>
	<span class="hl opt">(</span><span class="hl kwa">setf</span> <span class="hl opt">(</span><span class="hl kwa">aref</span> count i<span class="hl opt">)</span> <span class="hl num">0</span><span class="hl opt">)</span>
	<span class="hl opt">(</span><span class="hl kwa">incf</span> i<span class="hl opt">)</span>
	<span class="hl opt">(</span><span class="hl kwa">setf</span> <span class="hl opt">(</span><span class="hl kwa">aref</span> perm <span class="hl num">0</span><span class="hl opt">) (</span><span class="hl kwa">aref</span> perm <span class="hl num">1</span><span class="hl opt">))</span>
	<span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">((</span><span class="hl kwa">next-first</span> <span class="hl opt">(</span><span class="hl kwa">aref</span> perm <span class="hl num">1</span><span class="hl opt">)))</span>
	  <span class="hl opt">(</span><span class="hl kwa">loop</span> for j from <span class="hl num">1</span> below i do
	       <span class="hl opt">(</span><span class="hl kwa">setf</span> <span class="hl opt">(</span><span class="hl kwa">aref</span> perm j<span class="hl opt">) (</span><span class="hl kwa">aref</span> perm <span class="hl opt">(+</span> j <span class="hl num">1</span><span class="hl opt">))))</span>
	  <span class="hl opt">(</span><span class="hl kwa">setf</span> <span class="hl opt">(</span><span class="hl kwa">aref</span> perm i<span class="hl opt">)</span> first<span class="hl opt">)</span>
	  <span class="hl opt">(</span><span class="hl kwa">setf</span> first next-first<span class="hl opt">))</span>
	<span class="hl opt">(</span><span class="hl kwa">incf</span> <span class="hl opt">(</span><span class="hl kwa">aref</span> count i<span class="hl opt">))))))</span>



<span class="hl opt">(</span><span class="hl kwa">defun</span> fannkuch <span class="hl opt">(</span><span class="hl kwa">n</span><span class="hl opt">)</span>  
  <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> fixnum n<span class="hl opt">))</span>
  <span class="hl opt">(</span><span class="hl kwa">flet</span> <span class="hl opt">((</span><span class="hl kwa">fannkuch-sub</span> <span class="hl opt">(</span><span class="hl kwa">n</span> cflip copyfn start end<span class="hl opt">)</span>
	   <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> sb n start end<span class="hl opt">)</span>
		    <span class="hl opt">(</span><span class="hl kwa">type</span> <span class="hl opt">(</span><span class="hl kwa">function</span> <span class="hl opt">((</span><span class="hl kwa">simple-array</span> sb <span class="hl opt">(*))))</span> cflip<span class="hl opt">)</span>
		    <span class="hl opt">(</span><span class="hl kwa">type</span> <span class="hl opt">(</span><span class="hl kwa">function</span> <span class="hl opt">((</span><span class="hl kwa">simple-array</span> sb <span class="hl opt">(*)) (</span><span class="hl kwa">simple-array</span> sb <span class="hl opt">(*))))</span> copyfn<span class="hl opt">))</span>
	   <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">((</span><span class="hl kwa">csum</span> <span class="hl num">0</span><span class="hl opt">)</span>
		 <span class="hl opt">(</span><span class="hl kwa">fmax</span> <span class="hl num">0</span><span class="hl opt">)</span>
		 <span class="hl opt">(</span><span class="hl kwa">count</span> <span class="hl opt">(</span><span class="hl kwa">make-array</span> n <span class="hl opt">:</span>element-type <span class="hl opt">'</span>fixnum<span class="hl opt">))</span>
		 <span class="hl opt">(</span><span class="hl kwa">copy</span> <span class="hl opt">(</span><span class="hl kwa">make-array</span> n <span class="hl opt">:</span>element-type <span class="hl opt">'</span>fixnum<span class="hl opt">))</span>
		 <span class="hl opt">(</span><span class="hl kwa">perm</span> <span class="hl opt">(</span><span class="hl kwa">make-array</span> n <span class="hl opt">:</span>element-type <span class="hl opt">'</span>fixnum<span class="hl opt">)))</span>
	     <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> <span class="hl opt">(</span><span class="hl kwa">simple-array</span> sb <span class="hl opt">(*))</span> perm copy count<span class="hl opt">)</span>
		      <span class="hl opt">(</span><span class="hl kwa">type</span> sb  csum fmax<span class="hl opt">))</span>
	     <span class="hl opt">(</span><span class="hl kwa">nth-permutation</span> perm copy count start n<span class="hl opt">)</span>
	     <span class="hl opt">(</span><span class="hl kwa">dotimes</span> <span class="hl opt">(</span><span class="hl kwa">i</span> <span class="hl opt">(</span><span class="hl kwa">-</span> end start<span class="hl opt">))</span>
	       <span class="hl opt">(</span><span class="hl kwa">funcall</span> copyfn perm copy<span class="hl opt">)</span>
	       <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">((</span><span class="hl kwa">c</span> <span class="hl opt">(</span><span class="hl kwa">funcall</span> cflip copy<span class="hl opt">)))</span>
		 <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> sb c<span class="hl opt">))</span>
		 <span class="hl opt">(</span><span class="hl kwa">setf</span> csum <span class="hl opt">(</span><span class="hl kwa">sb</span> <span class="hl opt">(+</span> csum  <span class="hl opt">(</span><span class="hl kwa">sb</span> <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">evenp</span> i<span class="hl opt">)</span> c <span class="hl opt">(</span><span class="hl kwa">-</span> c<span class="hl opt">))))))</span>
		 <span class="hl opt">(</span><span class="hl kwa">when</span> <span class="hl opt">(&gt;</span> c fmax<span class="hl opt">)</span>
		   <span class="hl opt">(</span><span class="hl kwa">setf</span> fmax c<span class="hl opt">)))</span>
	       <span class="hl opt">(</span><span class="hl kwa">when</span> <span class="hl opt">(&lt; (+</span> <span class="hl num">1</span> i<span class="hl opt">)</span> end<span class="hl opt">)</span>
		 <span class="hl opt">(</span><span class="hl kwa">next-permutation</span> perm count<span class="hl opt">)))</span>
	     <span class="hl opt">(</span><span class="hl kwa">values</span> csum fmax<span class="hl opt">))))</span>


    <span class="hl opt">(</span><span class="hl kwa">let</span><span class="hl opt">* ((</span><span class="hl kwa">cflip</span> <span class="hl opt">(</span><span class="hl kwa">the</span> <span class="hl opt">(</span><span class="hl kwa">function</span> <span class="hl opt">((</span><span class="hl kwa">simple-array</span> sb <span class="hl opt">(*)))) (</span><span class="hl kwa">eval</span> <span class="hl opt">`(</span><span class="hl kwa">countfliplambda</span> <span class="hl opt">,</span>n<span class="hl opt">))))</span>
	   <span class="hl opt">(</span><span class="hl kwa">copyfn</span> <span class="hl opt">(</span><span class="hl kwa">the</span> <span class="hl opt">(</span><span class="hl kwa">function</span> <span class="hl opt">((</span><span class="hl kwa">simple-array</span> sb <span class="hl opt">(*)) (</span><span class="hl kwa">simple-array</span> sb <span class="hl opt">(*)))) (</span><span class="hl kwa">eval</span> <span class="hl opt">`(</span><span class="hl kwa">setlambda</span> <span class="hl opt">,</span>n<span class="hl opt">))))</span>
	   <span class="hl opt">(</span><span class="hl kwa">csum</span> <span class="hl num">0</span><span class="hl opt">) (</span><span class="hl kwa">fmax</span> <span class="hl num">0</span><span class="hl opt">))</span>
      <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> sb csum fmax<span class="hl opt">))</span>
      <span class="hl opt">#</span>-sb-thread <span class="hl opt">(</span><span class="hl kwa">multiple-value-setq</span> <span class="hl opt">(</span><span class="hl kwa">csum</span> fmax<span class="hl opt">) (</span><span class="hl kwa">fannkuch-sub</span> n cflip copyfn <span class="hl num">0</span> <span class="hl opt">(</span><span class="hl kwa">pre-computed-factorial</span> n<span class="hl opt">)))</span>

      <span class="hl opt">#+</span>sb-thread
      <span class="hl opt">(</span><span class="hl kwa">let</span><span class="hl opt">* ((</span><span class="hl kwa">cores</span> <span class="hl num">4</span><span class="hl opt">)</span>
	     <span class="hl opt">(</span><span class="hl kwa">index</span> <span class="hl num">0</span><span class="hl opt">)</span>
	     <span class="hl opt">(</span><span class="hl kwa">index-step</span> <span class="hl opt">(</span><span class="hl kwa">truncate</span> <span class="hl opt">(</span><span class="hl kwa">the</span> fixnum <span class="hl opt">(+ (</span><span class="hl kwa">the</span> fixnum <span class="hl opt">(</span><span class="hl kwa">pre-computed-factorial</span> n<span class="hl opt">)) (</span><span class="hl kwa">-</span> cores <span class="hl num">1</span><span class="hl opt">)))</span> cores<span class="hl opt">))</span>
	     <span class="hl opt">(</span><span class="hl kwa">threads</span> <span class="hl opt">(</span><span class="hl kwa">loop</span> for i from <span class="hl num">0</span> below cores
			 collecting  <span class="hl opt">(</span><span class="hl kwa">sb-thread</span><span class="hl opt">:</span>make-thread <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">((</span><span class="hl kwa">start</span> index<span class="hl opt">) (</span><span class="hl kwa">end</span> <span class="hl opt">(+</span> index index-step<span class="hl opt">)))</span>
							      <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">fixnum</span> start end<span class="hl opt">))</span>
							      <span class="hl opt">(</span><span class="hl kwa">lambda</span> <span class="hl opt">() (</span><span class="hl kwa">fannkuch-sub</span> n cflip copyfn start end<span class="hl opt">))))</span>
			 do <span class="hl opt">(</span><span class="hl kwa">The</span> fixnum <span class="hl opt">(</span><span class="hl kwa">incf</span> index index-step<span class="hl opt">)))))</span>
	<span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> fixnum cores index index index-step<span class="hl opt">))</span>
	<span class="hl opt">(</span><span class="hl kwa">dolist</span> <span class="hl opt">(</span><span class="hl kwa">thread</span> threads<span class="hl opt">)</span> 
	  <span class="hl opt">(</span><span class="hl kwa">multiple-value-bind</span> <span class="hl opt">(</span><span class="hl kwa">sum</span> max<span class="hl opt">) (</span><span class="hl kwa">sb-thread</span><span class="hl opt">:</span>join-thread thread<span class="hl opt">)</span>
	    <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> fixnum sum max<span class="hl opt">))</span>
	    <span class="hl opt">(</span><span class="hl kwa">incf</span> csum sum<span class="hl opt">)</span>
	    <span class="hl opt">(</span><span class="hl kwa">when</span> <span class="hl opt">(&gt;</span> max fmax<span class="hl opt">)</span>
	      <span class="hl opt">(</span><span class="hl kwa">setf</span> fmax max<span class="hl opt">)))))</span>
      <span class="hl opt">(</span><span class="hl kwa">format</span> t <span class="hl str">&quot;~s~%Pfannkuchen(~s) = ~s~%&quot;</span> csum n fmax<span class="hl opt">))))</span>

<span class="hl opt">(</span><span class="hl kwa">defun</span> main <span class="hl opt">()</span>  
  <span class="hl opt">(</span><span class="hl kwa">let</span><span class="hl opt">* ((</span><span class="hl kwa">args</span> <span class="hl opt">(</span><span class="hl kwa">cdr</span> sb-ext<span class="hl opt">:*</span>posix-argv<span class="hl opt">*))</span>
         <span class="hl opt">(</span><span class="hl kwa">n</span> <span class="hl opt">(</span><span class="hl kwa">parse-integer</span> <span class="hl opt">(</span><span class="hl kwa">car</span> args<span class="hl opt">))))</span>
    <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> fixnum n<span class="hl opt">))</span>
    <span class="hl opt">(</span><span class="hl kwa">fannkuch</span> n<span class="hl opt">)))</span>
