<span class="hl slc"># The Computer Language Benchmarks Game</span>
<span class="hl slc"># http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">#</span>
<span class="hl slc"># contributed by: Olof Kraigher</span>
<span class="hl slc"># 2to3</span>

<span class="hl kwa">from</span> sys <span class="hl kwa">import</span> argv

width <span class="hl opt">=</span> <span class="hl num">5</span>
height <span class="hl opt">=</span> <span class="hl num">10</span>

directions  <span class="hl opt">= {</span> <span class="hl str">&quot;E&quot;</span> <span class="hl opt">:</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl str">&quot;NE&quot;</span> <span class="hl opt">:</span> <span class="hl num">1</span><span class="hl opt">,</span> <span class="hl str">&quot;NW&quot;</span> <span class="hl opt">:</span> <span class="hl num">2</span><span class="hl opt">,</span> <span class="hl str">&quot;W&quot;</span> <span class="hl opt">:</span> <span class="hl num">3</span><span class="hl opt">,</span> <span class="hl str">&quot;SW&quot;</span> <span class="hl opt">:</span> <span class="hl num">4</span><span class="hl opt">,</span> <span class="hl str">&quot;SE&quot;</span> <span class="hl opt">:</span> <span class="hl num">5</span><span class="hl opt">}</span>
rotate      <span class="hl opt">= {</span> <span class="hl str">&quot;E&quot;</span> <span class="hl opt">:</span> <span class="hl str">&quot;NE&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;NE&quot;</span> <span class="hl opt">:</span> <span class="hl str">&quot;NW&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;NW&quot;</span> <span class="hl opt">:</span> <span class="hl str">&quot;W&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;W&quot;</span> <span class="hl opt">:</span> <span class="hl str">&quot;SW&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;SW&quot;</span> <span class="hl opt">:</span> <span class="hl str">&quot;SE&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;SE&quot;</span> <span class="hl opt">:</span> <span class="hl str">&quot;E&quot;</span><span class="hl opt">}</span>
flip        <span class="hl opt">= {</span> <span class="hl str">&quot;E&quot;</span> <span class="hl opt">:</span> <span class="hl str">&quot;W&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;NE&quot;</span> <span class="hl opt">:</span> <span class="hl str">&quot;NW&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;NW&quot;</span> <span class="hl opt">:</span> <span class="hl str">&quot;NE&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;W&quot;</span> <span class="hl opt">:</span> <span class="hl str">&quot;E&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;SW&quot;</span> <span class="hl opt">:</span> <span class="hl str">&quot;SE&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;SE&quot;</span> <span class="hl opt">:</span> <span class="hl str">&quot;SW&quot;</span><span class="hl opt">}</span>
move        <span class="hl opt">= {</span> <span class="hl str">&quot;E&quot;</span> <span class="hl opt">:</span> <span class="hl kwa">lambda</span> x<span class="hl opt">,</span>y<span class="hl opt">: (</span>x<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">,</span>y<span class="hl opt">),</span>
                <span class="hl str">&quot;W&quot;</span> <span class="hl opt">:</span> <span class="hl kwa">lambda</span> x<span class="hl opt">,</span>y<span class="hl opt">: (</span>x<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">,</span>y<span class="hl opt">),</span>
                <span class="hl str">&quot;NE&quot;</span> <span class="hl opt">:</span> <span class="hl kwa">lambda</span> x<span class="hl opt">,</span>y<span class="hl opt">: (</span>x<span class="hl opt">+(</span>y<span class="hl opt">%</span><span class="hl num">2</span><span class="hl opt">),</span>y<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">),</span>
                <span class="hl str">&quot;NW&quot;</span> <span class="hl opt">:</span> <span class="hl kwa">lambda</span> x<span class="hl opt">,</span>y<span class="hl opt">: (</span>x<span class="hl opt">+(</span>y<span class="hl opt">%</span><span class="hl num">2</span><span class="hl opt">)-</span><span class="hl num">1</span><span class="hl opt">,</span>y<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">),</span>
                <span class="hl str">&quot;SE&quot;</span> <span class="hl opt">:</span> <span class="hl kwa">lambda</span> x<span class="hl opt">,</span>y<span class="hl opt">: (</span>x<span class="hl opt">+(</span>y<span class="hl opt">%</span><span class="hl num">2</span><span class="hl opt">),</span>y<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">),</span>
                <span class="hl str">&quot;SW&quot;</span> <span class="hl opt">:</span> <span class="hl kwa">lambda</span> x<span class="hl opt">,</span>y<span class="hl opt">: (</span>x<span class="hl opt">+(</span>y<span class="hl opt">%</span><span class="hl num">2</span><span class="hl opt">)-</span><span class="hl num">1</span><span class="hl opt">,</span>y<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)}</span>

pieces <span class="hl opt">=   [    [</span><span class="hl str">&quot;E&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;E&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;E&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;SE&quot;</span><span class="hl opt">],</span>
                <span class="hl opt">[</span><span class="hl str">&quot;SE&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;SW&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;W&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;SW&quot;</span><span class="hl opt">],</span>
                <span class="hl opt">[</span><span class="hl str">&quot;W&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;W&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;SW&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;SE&quot;</span><span class="hl opt">],</span>
                <span class="hl opt">[</span><span class="hl str">&quot;E&quot;</span><span class="hl opt">,</span>  <span class="hl str">&quot;E&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;SW&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;SE&quot;</span><span class="hl opt">],</span>
                <span class="hl opt">[</span><span class="hl str">&quot;NW&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;W&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;NW&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;SE&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;SW&quot;</span><span class="hl opt">],</span>
                <span class="hl opt">[</span><span class="hl str">&quot;E&quot;</span><span class="hl opt">,</span>  <span class="hl str">&quot;E&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;NE&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;W&quot;</span><span class="hl opt">],</span>
                <span class="hl opt">[</span><span class="hl str">&quot;NW&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;NE&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;NE&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;W&quot;</span><span class="hl opt">],</span>
                <span class="hl opt">[</span><span class="hl str">&quot;NE&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;SE&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;E&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;NE&quot;</span><span class="hl opt">],</span>
                <span class="hl opt">[</span><span class="hl str">&quot;SE&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;SE&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;E&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;SE&quot;</span><span class="hl opt">],</span>
                <span class="hl opt">[</span><span class="hl str">&quot;E&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;NW&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;NW&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;NW&quot;</span><span class="hl opt">]]</span>

solutions <span class="hl opt">= []</span>
masks <span class="hl opt">= [</span><span class="hl num">0</span> <span class="hl kwa">for</span> i <span class="hl kwa">in</span> <span class="hl kwb">range</span><span class="hl opt">(</span><span class="hl num">10</span><span class="hl opt">)]</span>

valid <span class="hl opt">=</span> <span class="hl kwa">lambda</span> x<span class="hl opt">,</span>y<span class="hl opt">: (</span><span class="hl num">0</span> <span class="hl opt">&lt;=</span> x<span class="hl opt">)</span> <span class="hl kwa">and</span> <span class="hl opt">(</span>x <span class="hl opt">&lt;</span> width<span class="hl opt">)</span> <span class="hl kwa">and</span> <span class="hl opt">(</span><span class="hl num">0</span> <span class="hl opt">&lt;=</span> y<span class="hl opt">)</span> <span class="hl kwa">and</span> <span class="hl opt">(</span>y <span class="hl opt">&lt;</span> height<span class="hl opt">)</span>
legal <span class="hl opt">=</span> <span class="hl kwa">lambda</span> mask<span class="hl opt">,</span>board<span class="hl opt">: (</span>mask <span class="hl opt">&amp;</span> board<span class="hl opt">) ==</span> <span class="hl num">0</span>
zerocount <span class="hl opt">=</span> <span class="hl kwa">lambda</span> mask<span class="hl opt">:</span> <span class="hl kwb">sum</span><span class="hl opt">([((</span><span class="hl num">1</span><span class="hl opt">&lt;&lt;</span>x<span class="hl opt">) &amp;</span> mask<span class="hl opt">) ==</span> <span class="hl num">0</span> <span class="hl kwa">for</span> x <span class="hl kwa">in</span> <span class="hl kwb">range</span><span class="hl opt">(</span><span class="hl num">50</span><span class="hl opt">)])</span>

<span class="hl kwa">def</span> <span class="hl kwd">findFreeCell</span><span class="hl opt">(</span>board<span class="hl opt">):</span>
    <span class="hl kwa">for</span> y <span class="hl kwa">in</span> <span class="hl kwb">range</span><span class="hl opt">(</span>height<span class="hl opt">):</span>
        <span class="hl kwa">for</span> x <span class="hl kwa">in</span> <span class="hl kwb">range</span><span class="hl opt">(</span>width<span class="hl opt">):</span>
            <span class="hl kwa">if</span> board <span class="hl opt">&amp; (</span><span class="hl num">1</span> <span class="hl opt">&lt;&lt; (</span>x <span class="hl opt">+</span> width<span class="hl opt">*</span>y<span class="hl opt">)) ==</span> <span class="hl num">0</span><span class="hl opt">:</span>
                <span class="hl kwa">return</span> x<span class="hl opt">,</span>y


<span class="hl kwa">def</span> <span class="hl kwd">floodFill</span><span class="hl opt">(</span>board<span class="hl opt">,</span> xxx_todo_changeme<span class="hl opt">):</span>
    <span class="hl opt">(</span>x<span class="hl opt">,</span> y<span class="hl opt">) =</span> xxx_todo_changeme
    <span class="hl kwa">if not</span> <span class="hl kwd">valid</span><span class="hl opt">(</span>x<span class="hl opt">,</span>y<span class="hl opt">):</span>
        <span class="hl kwa">return</span> board
    <span class="hl kwa">if</span> board <span class="hl opt">&amp; (</span><span class="hl num">1</span> <span class="hl opt">&lt;&lt; (</span>x <span class="hl opt">+</span> width<span class="hl opt">*</span>y<span class="hl opt">)) !=</span> <span class="hl num">0</span><span class="hl opt">:</span>
        <span class="hl kwa">return</span> board

    board <span class="hl opt">=</span> board | <span class="hl opt">(</span><span class="hl num">1</span> <span class="hl opt">&lt;&lt; (</span>x <span class="hl opt">+</span> width<span class="hl opt">*</span>y<span class="hl opt">))</span>

    <span class="hl kwa">for</span> f <span class="hl kwa">in</span> <span class="hl kwb">list</span><span class="hl opt">(</span>move<span class="hl opt">.</span><span class="hl kwd">values</span><span class="hl opt">()):</span>
        board <span class="hl opt">=</span> board | <span class="hl kwd">floodFill</span><span class="hl opt">(</span>board<span class="hl opt">,</span> <span class="hl kwd">f</span><span class="hl opt">(</span>x<span class="hl opt">,</span>y<span class="hl opt">))</span>

    <span class="hl kwa">return</span> board

<span class="hl kwa">def</span> <span class="hl kwd">noIslands</span><span class="hl opt">(</span>mask<span class="hl opt">):</span>
    zeroes <span class="hl opt">=</span> <span class="hl kwd">zerocount</span><span class="hl opt">(</span>mask<span class="hl opt">)</span>

    <span class="hl kwa">if</span> zeroes <span class="hl opt">&lt;</span> <span class="hl num">5</span><span class="hl opt">:</span>
        <span class="hl kwa">return False</span>

    <span class="hl kwa">while</span> mask <span class="hl opt">!=</span> <span class="hl num">0x3FFFFFFFFFFFF</span><span class="hl opt">:</span>
        mask <span class="hl opt">=</span> <span class="hl kwd">floodFill</span><span class="hl opt">(</span>mask<span class="hl opt">,</span> <span class="hl kwd">findFreeCell</span><span class="hl opt">(</span>mask<span class="hl opt">))</span>
        new_zeroes <span class="hl opt">=</span> <span class="hl kwd">zerocount</span><span class="hl opt">(</span>mask<span class="hl opt">)</span>

        <span class="hl kwa">if</span> zeroes <span class="hl opt">-</span> new_zeroes <span class="hl opt">&lt;</span> <span class="hl num">5</span><span class="hl opt">:</span>
            <span class="hl kwa">return False</span>

        zeroes <span class="hl opt">=</span> new_zeroes

    <span class="hl kwa">return True</span>

<span class="hl kwa">def</span> <span class="hl kwd">getBitmask</span><span class="hl opt">(</span>x<span class="hl opt">,</span>y<span class="hl opt">,</span>piece<span class="hl opt">):</span>
    mask <span class="hl opt">= (</span><span class="hl num">1</span> <span class="hl opt">&lt;&lt; (</span>x <span class="hl opt">+</span> width<span class="hl opt">*</span>y<span class="hl opt">))</span>

    <span class="hl kwa">for</span> cell <span class="hl kwa">in</span> piece<span class="hl opt">:</span>
        x<span class="hl opt">,</span>y <span class="hl opt">=</span> move<span class="hl opt">[</span>cell<span class="hl opt">](</span>x<span class="hl opt">,</span>y<span class="hl opt">)</span>
        <span class="hl kwa">if</span> <span class="hl kwd">valid</span><span class="hl opt">(</span>x<span class="hl opt">,</span>y<span class="hl opt">):</span>
            mask <span class="hl opt">=</span> mask | <span class="hl opt">(</span><span class="hl num">1</span> <span class="hl opt">&lt;&lt; (</span>x <span class="hl opt">+</span> width<span class="hl opt">*</span>y<span class="hl opt">))</span>
        <span class="hl kwa">else</span><span class="hl opt">:</span>
            <span class="hl kwa">return False</span><span class="hl opt">,</span> <span class="hl num">0</span>

    <span class="hl kwa">return True</span><span class="hl opt">,</span> mask

<span class="hl kwa">def</span> <span class="hl kwd">allBitmasks</span><span class="hl opt">(</span>piece<span class="hl opt">,</span> color<span class="hl opt">):</span>
    bitmasks <span class="hl opt">= []</span>
    <span class="hl kwa">for</span> orientations <span class="hl kwa">in</span> <span class="hl kwb">range</span><span class="hl opt">(</span><span class="hl num">2</span><span class="hl opt">):</span>
        <span class="hl kwa">for</span> rotations <span class="hl kwa">in</span> <span class="hl kwb">range</span><span class="hl opt">(</span><span class="hl num">6</span> <span class="hl opt">-</span> <span class="hl num">3</span><span class="hl opt">*(</span>color <span class="hl opt">==</span> <span class="hl num">4</span><span class="hl opt">)):</span>
            <span class="hl kwa">for</span> y <span class="hl kwa">in</span> <span class="hl kwb">range</span><span class="hl opt">(</span>height<span class="hl opt">):</span>
                <span class="hl kwa">for</span> x <span class="hl kwa">in</span> <span class="hl kwb">range</span><span class="hl opt">(</span>width<span class="hl opt">):</span>
                    isValid<span class="hl opt">,</span> mask <span class="hl opt">=</span> <span class="hl kwd">getBitmask</span><span class="hl opt">(</span>x<span class="hl opt">,</span>y<span class="hl opt">,</span>piece<span class="hl opt">)</span>
                    <span class="hl kwa">if</span> isValid <span class="hl kwa">and</span> <span class="hl kwd">noIslands</span><span class="hl opt">(</span>mask<span class="hl opt">):</span>
                        bitmasks<span class="hl opt">.</span><span class="hl kwd">append</span><span class="hl opt">(</span>mask<span class="hl opt">)</span>

            piece <span class="hl opt">= [</span>rotate<span class="hl opt">[</span>cell<span class="hl opt">]</span> <span class="hl kwa">for</span> cell <span class="hl kwa">in</span> piece<span class="hl opt">]</span>
        piece <span class="hl opt">= [</span>flip<span class="hl opt">[</span>cell<span class="hl opt">]</span> <span class="hl kwa">for</span> cell <span class="hl kwa">in</span> piece<span class="hl opt">]</span>


    <span class="hl kwa">return</span> bitmasks

<span class="hl kwa">def</span> <span class="hl kwd">generateBitmasks</span><span class="hl opt">():</span>

    <span class="hl kwa">global</span> masksAtCell

    masksAtCell <span class="hl opt">= [[[]</span> <span class="hl kwa">for</span> j <span class="hl kwa">in</span> <span class="hl kwb">range</span><span class="hl opt">(</span><span class="hl num">10</span><span class="hl opt">)]</span> <span class="hl kwa">for</span> i <span class="hl kwa">in</span> <span class="hl kwb">range</span><span class="hl opt">(</span>width<span class="hl opt">*</span>height<span class="hl opt">)]</span>

    color <span class="hl opt">=</span> <span class="hl num">0</span>
    <span class="hl kwa">for</span> piece <span class="hl kwa">in</span> pieces<span class="hl opt">:</span>
        masks <span class="hl opt">=</span> <span class="hl kwd">allBitmasks</span><span class="hl opt">(</span>piece<span class="hl opt">,</span> color<span class="hl opt">)</span>
        masks<span class="hl opt">.</span><span class="hl kwd">sort</span><span class="hl opt">()</span>
        cellMask <span class="hl opt">=</span> <span class="hl num">1</span> <span class="hl opt">&lt;&lt; (</span>width<span class="hl opt">*</span>height<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">)</span>
        cellCounter <span class="hl opt">=</span> width<span class="hl opt">*</span>height<span class="hl opt">-</span><span class="hl num">1</span>

        j <span class="hl opt">=</span> <span class="hl kwb">len</span><span class="hl opt">(</span>masks<span class="hl opt">)-</span><span class="hl num">1</span>

        <span class="hl kwa">while</span> <span class="hl opt">(</span>j <span class="hl opt">&gt;=</span> <span class="hl num">0</span><span class="hl opt">):</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>masks<span class="hl opt">[</span>j<span class="hl opt">] &amp;</span> cellMask<span class="hl opt">) ==</span> cellMask<span class="hl opt">:</span>
                masksAtCell<span class="hl opt">[</span>cellCounter<span class="hl opt">][</span>color<span class="hl opt">].</span><span class="hl kwd">append</span><span class="hl opt">(</span>masks<span class="hl opt">[</span>j<span class="hl opt">])</span>
                j <span class="hl opt">=</span> j<span class="hl opt">-</span><span class="hl num">1</span>
            <span class="hl kwa">else</span><span class="hl opt">:</span>
                cellMask <span class="hl opt">=</span> cellMask <span class="hl opt">&gt;&gt;</span> <span class="hl num">1</span>
                cellCounter <span class="hl opt">-=</span> <span class="hl num">1</span>
        color <span class="hl opt">+=</span> <span class="hl num">1</span>


<span class="hl kwa">def</span> <span class="hl kwd">solveCell</span><span class="hl opt">(</span>cell<span class="hl opt">,</span> board<span class="hl opt">,</span> n<span class="hl opt">):</span>

    <span class="hl kwa">global</span> solutions<span class="hl opt">,</span> masks<span class="hl opt">,</span> masksAtCell

    <span class="hl kwa">if</span> <span class="hl kwb">len</span><span class="hl opt">(</span>solutions<span class="hl opt">) &gt;=</span> n<span class="hl opt">:</span>
        <span class="hl kwa">return</span>

    <span class="hl kwa">if</span> board <span class="hl opt">==</span> <span class="hl num">0x3FFFFFFFFFFFF</span><span class="hl opt">:</span>
        <span class="hl slc"># Solved</span>
        s <span class="hl opt">=</span> <span class="hl kwd">stringOfMasks</span><span class="hl opt">(</span>masks<span class="hl opt">)</span>
        solutions<span class="hl opt">.</span><span class="hl kwd">append</span><span class="hl opt">(</span>s<span class="hl opt">);</span>
        solutions<span class="hl opt">.</span><span class="hl kwd">append</span><span class="hl opt">(</span><span class="hl kwd">inverse</span><span class="hl opt">(</span>s<span class="hl opt">));</span>
        <span class="hl kwa">return</span>

    <span class="hl kwa">if</span> board <span class="hl opt">&amp; (</span><span class="hl num">1</span> <span class="hl opt">&lt;&lt;</span> cell<span class="hl opt">) !=</span> <span class="hl num">0</span><span class="hl opt">:</span>
        <span class="hl slc"># Cell full</span>
        <span class="hl kwd">solveCell</span><span class="hl opt">(</span>cell<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">,</span> board<span class="hl opt">,</span> n<span class="hl opt">)</span>
        <span class="hl kwa">return</span>

    <span class="hl kwa">if</span> cell <span class="hl opt">&lt;</span> <span class="hl num">0</span><span class="hl opt">:</span>
        <span class="hl slc"># Out of board</span>
        <span class="hl kwa">return</span>

    <span class="hl kwa">for</span> color <span class="hl kwa">in</span> <span class="hl kwb">range</span><span class="hl opt">(</span><span class="hl num">10</span><span class="hl opt">):</span>
        <span class="hl kwa">if</span> masks<span class="hl opt">[</span>color<span class="hl opt">] ==</span> <span class="hl num">0</span><span class="hl opt">:</span>
            <span class="hl kwa">for</span> mask <span class="hl kwa">in</span> masksAtCell<span class="hl opt">[</span>cell<span class="hl opt">][</span>color<span class="hl opt">]:</span>
                <span class="hl kwa">if</span> <span class="hl kwd">legal</span><span class="hl opt">(</span>mask<span class="hl opt">,</span> board<span class="hl opt">):</span>
                    masks<span class="hl opt">[</span>color<span class="hl opt">] =</span> mask
                    <span class="hl kwd">solveCell</span><span class="hl opt">(</span>cell<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">,</span> board | mask<span class="hl opt">,</span> n<span class="hl opt">);</span>
                    masks<span class="hl opt">[</span>color<span class="hl opt">] =</span> <span class="hl num">0</span>

<span class="hl kwa">def</span> <span class="hl kwd">solve</span><span class="hl opt">(</span>n<span class="hl opt">):</span>
    <span class="hl kwd">generateBitmasks</span><span class="hl opt">()</span>
    <span class="hl kwd">solveCell</span><span class="hl opt">(</span>width<span class="hl opt">*</span>height<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> n<span class="hl opt">)</span>


<span class="hl kwa">def</span> <span class="hl kwd">stringOfMasks</span><span class="hl opt">(</span>masks<span class="hl opt">):</span>
    s <span class="hl opt">=</span> <span class="hl str">&quot;&quot;</span>
    mask <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span>
    <span class="hl kwa">for</span> y <span class="hl kwa">in</span> <span class="hl kwb">range</span><span class="hl opt">(</span>height<span class="hl opt">):</span>
        <span class="hl kwa">for</span> x <span class="hl kwa">in</span> <span class="hl kwb">range</span><span class="hl opt">(</span>width<span class="hl opt">):</span>
            <span class="hl kwa">for</span> color <span class="hl kwa">in</span> <span class="hl kwb">range</span><span class="hl opt">(</span><span class="hl num">10</span><span class="hl opt">):</span>
                <span class="hl kwa">if</span> <span class="hl opt">(</span>masks<span class="hl opt">[</span>color<span class="hl opt">] &amp;</span> mask<span class="hl opt">) !=</span> <span class="hl num">0</span><span class="hl opt">:</span>
                    s <span class="hl opt">+=</span> <span class="hl kwb">str</span><span class="hl opt">(</span>color<span class="hl opt">)</span>
                    <span class="hl kwa">break</span>
                <span class="hl kwa">elif</span> color <span class="hl opt">==</span> <span class="hl num">9</span><span class="hl opt">:</span>
                    s <span class="hl opt">+=</span> <span class="hl str">&quot;.&quot;</span>
            mask <span class="hl opt">=</span> mask <span class="hl opt">&lt;&lt;</span> <span class="hl num">1</span>
    <span class="hl kwa">return</span> s

<span class="hl kwa">def</span> <span class="hl kwd">inverse</span><span class="hl opt">(</span>s<span class="hl opt">):</span>
    ns <span class="hl opt">= [</span>x <span class="hl kwa">for</span> x <span class="hl kwa">in</span> s<span class="hl opt">]</span>

    <span class="hl kwa">for</span> x <span class="hl kwa">in</span> <span class="hl kwb">range</span><span class="hl opt">(</span>width<span class="hl opt">):</span>
        <span class="hl kwa">for</span> y <span class="hl kwa">in</span> <span class="hl kwb">range</span><span class="hl opt">(</span>height<span class="hl opt">):</span>
            ns<span class="hl opt">[</span>x <span class="hl opt">+</span> y<span class="hl opt">*</span>width<span class="hl opt">] =</span> s<span class="hl opt">[</span>width<span class="hl opt">-</span>x<span class="hl opt">-</span><span class="hl num">1</span> <span class="hl opt">+ (</span>width <span class="hl opt">-</span> y <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">)*</span>width<span class="hl opt">]</span>

    <span class="hl kwa">return</span> s

<span class="hl kwa">def</span> <span class="hl kwd">printSolution</span><span class="hl opt">(</span>solution<span class="hl opt">):</span>
    <span class="hl kwa">for</span> y <span class="hl kwa">in</span> <span class="hl kwb">range</span><span class="hl opt">(</span>height<span class="hl opt">):</span>
        <span class="hl kwa">for</span> x <span class="hl kwa">in</span> <span class="hl kwb">range</span><span class="hl opt">(</span>width<span class="hl opt">):</span>
            <span class="hl kwa">print</span><span class="hl opt">(</span>solution<span class="hl opt">[</span>x <span class="hl opt">+</span> y<span class="hl opt">*</span>width<span class="hl opt">],</span> end<span class="hl opt">=</span><span class="hl str">' '</span><span class="hl opt">)</span>

        <span class="hl kwa">if</span> <span class="hl opt">(</span>y<span class="hl opt">%</span><span class="hl num">2</span><span class="hl opt">) ==</span> <span class="hl num">0</span><span class="hl opt">:</span>
            <span class="hl kwa">print</span><span class="hl opt">(</span><span class="hl str">&quot;&quot;</span><span class="hl opt">)</span>
            <span class="hl kwa">print</span><span class="hl opt">(</span><span class="hl str">&quot;&quot;</span><span class="hl opt">,</span> end<span class="hl opt">=</span><span class="hl str">' '</span><span class="hl opt">)</span>
        <span class="hl kwa">else</span><span class="hl opt">:</span>
            <span class="hl kwa">print</span><span class="hl opt">(</span><span class="hl str">&quot;&quot;</span><span class="hl opt">)</span>

<span class="hl kwa">if</span> __name__ <span class="hl opt">==</span> <span class="hl str">&quot;__main__&quot;</span><span class="hl opt">:</span>

    <span class="hl kwa">if not</span> <span class="hl kwb">len</span><span class="hl opt">(</span>argv<span class="hl opt">) &gt;</span> <span class="hl num">1</span><span class="hl opt">:</span>
        <span class="hl kwd">exit</span><span class="hl opt">()</span>

    <span class="hl kwd">solve</span><span class="hl opt">(</span><span class="hl kwb">int</span><span class="hl opt">(</span>argv<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">]))</span>
    <span class="hl kwa">print</span><span class="hl opt">(</span><span class="hl kwb">len</span><span class="hl opt">(</span>solutions<span class="hl opt">),</span> <span class="hl str">&quot;solutions found&quot;</span><span class="hl opt">)</span>
    <span class="hl kwa">print</span><span class="hl opt">()</span>
    <span class="hl kwd">printSolution</span><span class="hl opt">(</span><span class="hl kwb">min</span><span class="hl opt">(</span>solutions<span class="hl opt">))</span>
    <span class="hl kwa">print</span><span class="hl opt">()</span>
    <span class="hl kwd">printSolution</span><span class="hl opt">(</span><span class="hl kwb">max</span><span class="hl opt">(</span>solutions<span class="hl opt">))</span>
    <span class="hl kwa">print</span><span class="hl opt">()</span>
