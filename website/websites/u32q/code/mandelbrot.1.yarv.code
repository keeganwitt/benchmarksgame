<span class="hl slc"># The Computer Language Benchmarks Game</span>
<span class="hl slc"># http://benchmarksgame.alioth.debian.org</span>
<span class="hl slc">#</span>
<span class="hl slc">#  contributed by Karl von Laudermann</span>
<span class="hl slc">#  modified by Jeremy Echols</span>
<span class="hl slc">#  modified by Detlef Reichl</span>
<span class="hl slc">#  modified by Joseph LaFata</span>

size <span class="hl opt">=</span> <span class="hl kwc">ARGV</span><span class="hl opt">.</span>shift<span class="hl opt">.</span>to_i

puts <span class="hl str">&quot;P4\n</span><span class="hl esc">#{size}</span> <span class="hl str"></span><span class="hl esc">#{size}</span><span class="hl str">&quot;</span>

byte_acc <span class="hl opt">=</span> <span class="hl num">0</span>
bit_num <span class="hl opt">=</span> <span class="hl num">0</span>

count_size <span class="hl opt">=</span> size <span class="hl opt">-</span> <span class="hl num">1</span>               <span class="hl slc"># Precomputed size for easy for..in looping</span>
range <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">..</span>count_size

<span class="hl slc"># For..in loops are faster than .upto, .downto, .times, etc.</span>
<span class="hl slc"># That's not true, but left it here</span>
<span class="hl kwa">for</span> y <span class="hl kwa">in</span> range
  ci <span class="hl opt">= (</span><span class="hl num">2.0</span><span class="hl opt">*</span>y<span class="hl opt">/</span>size)<span class="hl opt">-</span><span class="hl num">1.0</span>
  <span class="hl kwa">for</span> x <span class="hl kwa">in</span> range
    zrzr <span class="hl opt">=</span> zr <span class="hl opt">=</span> <span class="hl num">0.0</span>
    zizi <span class="hl opt">=</span> zi <span class="hl opt">=</span> <span class="hl num">0.0</span>
    cr <span class="hl opt">= (</span><span class="hl num">2.0</span><span class="hl opt">*</span>x<span class="hl opt">/</span>size)<span class="hl opt">-</span><span class="hl num">1.5</span>
    escape <span class="hl opt">=</span> <span class="hl num">0b1</span>

    <span class="hl num">50</span><span class="hl opt">.</span>times <span class="hl kwa">do</span>
      tr <span class="hl opt">=</span> zrzr <span class="hl opt">-</span> zizi <span class="hl opt">+</span> cr
      ti <span class="hl opt">=</span> <span class="hl num">2.0</span><span class="hl opt">*</span>zr<span class="hl opt">*</span>zi <span class="hl opt">+</span> ci
      zr <span class="hl opt">=</span> tr
      zi <span class="hl opt">=</span> ti
      <span class="hl slc"># preserve recalculation</span>
      zrzr <span class="hl opt">=</span> zr<span class="hl opt">*</span>zr
      zizi <span class="hl opt">=</span> zi<span class="hl opt">*</span>zi
      <span class="hl kwa">if</span> zrzr<span class="hl opt">+</span>zizi <span class="hl opt">&gt;</span> <span class="hl num">4.0</span>
        escape <span class="hl opt">=</span> <span class="hl num">0b0</span>
        <span class="hl kwa">break</span>
      <span class="hl kwa">end</span>
    <span class="hl kwa">end</span>

    byte_acc <span class="hl opt">= (</span>byte_acc <span class="hl opt">&lt;&lt;</span> <span class="hl num">1</span>) <span class="hl opt">|</span> escape
    bit_num <span class="hl opt">+=</span> <span class="hl num">1</span>

    <span class="hl slc"># Code is very similar for these cases, but using separate blocks</span>
    <span class="hl slc"># ensures we skip the shifting when it's unnecessary, which is most cases.</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>bit_num <span class="hl opt">==</span> <span class="hl num">8</span>)
      print byte_acc<span class="hl opt">.</span>chr
      byte_acc <span class="hl opt">=</span> <span class="hl num">0</span>
      bit_num <span class="hl opt">=</span> <span class="hl num">0</span>
    <span class="hl kwa">elsif</span> <span class="hl opt">(</span>x <span class="hl opt">==</span> count_size)
      byte_acc <span class="hl opt">&lt;&lt;= (</span><span class="hl num">8</span> <span class="hl opt">-</span> bit_num)
      print byte_acc<span class="hl opt">.</span>chr
      byte_acc <span class="hl opt">=</span> <span class="hl num">0</span>
      bit_num <span class="hl opt">=</span> <span class="hl num">0</span>
    <span class="hl kwa">end</span>
  <span class="hl kwa">end</span>
<span class="hl kwa">end</span>
