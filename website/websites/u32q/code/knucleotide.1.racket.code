<span class="hl opt">#</span>lang racket<span class="hl opt">/</span>base

<span class="hl slc">;;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;;; http://benchmarksgame.alioth.debian.org/</span>

<span class="hl slc">;;; contributed by Matthew Flatt</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">all-counts</span> len dna<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">([</span>table <span class="hl opt">(</span><span class="hl kwa">make-hasheq</span><span class="hl opt">)]</span>
        <span class="hl opt">[</span>seq <span class="hl opt">(</span><span class="hl kwa">make-string</span> len<span class="hl opt">)])</span>
    <span class="hl opt">(</span><span class="hl kwa">for</span> <span class="hl opt">([</span>s <span class="hl opt">(</span><span class="hl kwa">in-range</span> <span class="hl opt">(</span><span class="hl kwa">-</span> <span class="hl opt">(</span><span class="hl kwa">string-length</span> dna<span class="hl opt">)</span> len<span class="hl opt">)</span> -<span class="hl num">1</span> -<span class="hl num">1</span><span class="hl opt">)])</span>
      <span class="hl opt">(</span><span class="hl kwa">string-copy</span><span class="hl opt">!</span> seq <span class="hl num">0</span> dna s <span class="hl opt">(+</span> s len<span class="hl opt">))</span>
      <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">([</span>key <span class="hl opt">(</span><span class="hl kwa">string-</span><span class="hl opt">&gt;</span>symbol seq<span class="hl opt">)])</span>
        <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">([</span>cnt <span class="hl opt">(</span><span class="hl kwa">hash-ref</span> table key <span class="hl num">0</span><span class="hl opt">)])</span>
          <span class="hl opt">(</span><span class="hl kwa">hash-set</span><span class="hl opt">!</span> table key <span class="hl opt">(</span><span class="hl kwa">add1</span> cnt<span class="hl opt">)))))</span>
    table<span class="hl opt">))</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">write-freqs</span> table<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span><span class="hl opt">* ([</span>content <span class="hl opt">(</span><span class="hl kwa">hash-map</span> table cons<span class="hl opt">)]</span>
         <span class="hl opt">[</span>total <span class="hl opt">(</span><span class="hl kwa">exact-</span><span class="hl opt">&gt;</span>inexact <span class="hl opt">(</span><span class="hl kwa">apply</span> <span class="hl opt">+ (</span><span class="hl kwa">map</span> cdr content<span class="hl opt">)))])</span>
    <span class="hl opt">(</span><span class="hl kwa">for</span> <span class="hl opt">([</span>a <span class="hl opt">(</span><span class="hl kwa">sort</span> content <span class="hl opt">&gt; #:</span>key cdr<span class="hl opt">)])</span>
      <span class="hl opt">(</span><span class="hl kwa">printf</span> <span class="hl str">&quot;~a ~a</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> 
              <span class="hl opt">(</span><span class="hl kwa">car</span> a<span class="hl opt">)</span> 
              <span class="hl opt">(</span><span class="hl kwa">real-</span><span class="hl opt">&gt;</span>decimal-string <span class="hl opt">(*</span> <span class="hl num">100</span> <span class="hl opt">(/ (</span><span class="hl kwa">cdr</span> a<span class="hl opt">)</span> total<span class="hl opt">))</span> <span class="hl num">3</span><span class="hl opt">)))))</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">write-one-freq</span> table key<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">([</span>cnt <span class="hl opt">(</span><span class="hl kwa">hash-ref</span> table key <span class="hl num">0</span><span class="hl opt">)])</span>
    <span class="hl opt">(</span><span class="hl kwa">printf</span> <span class="hl str">&quot;~a</span><span class="hl esc">\t</span><span class="hl str">~a</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> cnt key<span class="hl opt">)))</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> dna
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">([</span>in <span class="hl opt">(</span><span class="hl kwa">current-input-port</span><span class="hl opt">)])</span>
    <span class="hl slc">;; Skip to &quot;&gt;THREE ...&quot;</span>
    <span class="hl opt">(</span><span class="hl kwa">regexp-match</span> <span class="hl opt">#</span>rx<span class="hl opt">#</span><span class="hl str">&quot;(?m:^&gt;THREE.*$)&quot;</span> in<span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">([</span>s <span class="hl opt">(</span><span class="hl kwa">open-output-string</span><span class="hl opt">)])</span>
      <span class="hl slc">;; Copy everything but newlines to s:</span>
      <span class="hl opt">(</span><span class="hl kwa">for</span> <span class="hl opt">([</span>l <span class="hl opt">(</span><span class="hl kwa">in-bytes-lines</span> in<span class="hl opt">)])</span>
        <span class="hl opt">(</span><span class="hl kwa">write-bytes</span> l s<span class="hl opt">))</span>
      <span class="hl slc">;; Extract the string from s:</span>
      <span class="hl opt">(</span><span class="hl kwa">string-upcase</span> <span class="hl opt">(</span><span class="hl kwa">get-output-string</span> s<span class="hl opt">)))))</span>

<span class="hl slc">;; 1-nucleotide counts:</span>
<span class="hl opt">(</span><span class="hl kwa">write-freqs</span> <span class="hl opt">(</span><span class="hl kwa">all-counts</span> <span class="hl num">1</span> dna<span class="hl opt">))</span>
<span class="hl opt">(</span><span class="hl kwa">newline</span><span class="hl opt">)</span>

<span class="hl slc">;; 2-nucleotide counts:</span>
<span class="hl opt">(</span><span class="hl kwa">write-freqs</span> <span class="hl opt">(</span><span class="hl kwa">all-counts</span> <span class="hl num">2</span> dna<span class="hl opt">))</span>
<span class="hl opt">(</span><span class="hl kwa">newline</span><span class="hl opt">)</span>

<span class="hl slc">;; Specific sequences:</span>
<span class="hl opt">(</span><span class="hl kwa">for</span> <span class="hl opt">([</span>seq <span class="hl opt">'(</span><span class="hl str">&quot;GGT&quot;</span> <span class="hl str">&quot;GGTA&quot;</span> <span class="hl str">&quot;GGTATT&quot;</span> <span class="hl str">&quot;GGTATTTTAATT&quot;</span> <span class="hl str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="hl opt">)])</span> 
  <span class="hl opt">(</span><span class="hl kwa">write-one-freq</span> <span class="hl opt">(</span><span class="hl kwa">all-counts</span> <span class="hl opt">(</span><span class="hl kwa">string-length</span> seq<span class="hl opt">)</span> dna<span class="hl opt">)</span>
                  <span class="hl opt">(</span><span class="hl kwa">string-</span><span class="hl opt">&gt;</span>symbol seq<span class="hl opt">)))</span>
