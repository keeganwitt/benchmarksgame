<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">converted to C++ from D by Rafal Rusin</span>
<span class="hl com">modified by Vaclav Haisman</span>
<span class="hl com">modified by The Anh to compile with g++ 4.3.2</span>
<span class="hl com">modified by Branimir Maksimovic</span>
<span class="hl com"></span>
<span class="hl com">*/</span>

<span class="hl ppc">#include &lt;cstdio&gt;</span>
<span class="hl ppc">#include &lt;cstdlib&gt;</span>
<span class="hl ppc">#include &lt;cstring&gt;</span>
<span class="hl ppc">#include &lt;algorithm&gt;</span>
<span class="hl ppc">#include &lt;vector&gt;</span>

<span class="hl kwb">static int const</span> IM <span class="hl opt">=</span> <span class="hl num">139968</span><span class="hl opt">,</span> IA <span class="hl opt">=</span> <span class="hl num">3877</span><span class="hl opt">,</span> IC <span class="hl opt">=</span> <span class="hl num">29573</span><span class="hl opt">;</span>
<span class="hl kwb">static int</span> last <span class="hl opt">=</span> <span class="hl num">42</span><span class="hl opt">;</span>

<span class="hl kwb">static</span> <span class="hl kwc">inline</span>
<span class="hl kwb">float</span>
<span class="hl kwd">genRandom</span><span class="hl opt">(</span><span class="hl kwb">float</span> max<span class="hl opt">)</span>
<span class="hl opt">{</span>
   <span class="hl kwa">return</span><span class="hl opt">(</span>max <span class="hl opt">* (</span>last <span class="hl opt">= (</span>last <span class="hl opt">*</span> IA <span class="hl opt">+</span> IC<span class="hl opt">) %</span> IM<span class="hl opt">) /</span> IM<span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwb">struct</span> IUB
<span class="hl opt">{</span>
   <span class="hl kwb">char</span> c<span class="hl opt">;</span>
   <span class="hl kwb">float</span> p<span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl kwb">static</span> <span class="hl kwc">inline</span>
<span class="hl kwb">void</span>
<span class="hl kwd">makeCumulative</span><span class="hl opt">(</span>std<span class="hl opt">::</span>vector<span class="hl opt">&lt;</span>IUB<span class="hl opt">&gt;&amp;</span> i<span class="hl opt">)</span>
<span class="hl opt">{</span>
   std<span class="hl opt">::</span><span class="hl kwd">partial_sum</span> <span class="hl opt">(</span>i<span class="hl opt">.</span><span class="hl kwd">begin</span><span class="hl opt">(),</span> i<span class="hl opt">.</span><span class="hl kwd">end</span><span class="hl opt">(),</span> i<span class="hl opt">.</span><span class="hl kwd">begin</span><span class="hl opt">(),</span> 
   <span class="hl opt">[](</span>IUB l<span class="hl opt">,</span>IUB r<span class="hl opt">)-&gt;</span>IUB<span class="hl opt">{</span>r<span class="hl opt">.</span>p<span class="hl opt">+=</span>l<span class="hl opt">.</span>p<span class="hl opt">;</span><span class="hl kwa">return</span> r<span class="hl opt">;});</span>
<span class="hl opt">}</span>

<span class="hl kwb">static const char</span> alu<span class="hl opt">[] =</span>
<span class="hl str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG&quot;</span>
<span class="hl str">&quot;GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA&quot;</span>
<span class="hl str">&quot;CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT&quot;</span>
<span class="hl str">&quot;ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA&quot;</span>
<span class="hl str">&quot;GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG&quot;</span>
<span class="hl str">&quot;AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC&quot;</span>
<span class="hl str">&quot;AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span><span class="hl opt">;</span>

<span class="hl kwb">static const unsigned</span> length <span class="hl opt">=</span> <span class="hl num">60</span><span class="hl opt">;</span>

<span class="hl kwc">template</span> <span class="hl opt">&lt;</span><span class="hl kwc">class</span> F<span class="hl opt">&gt;</span>
<span class="hl kwb">static</span> <span class="hl kwc">inline</span>
<span class="hl kwb">void</span>
<span class="hl kwd">make</span><span class="hl opt">(</span><span class="hl kwb">char const</span> <span class="hl opt">*</span> id<span class="hl opt">,</span> <span class="hl kwb">char const</span> <span class="hl opt">*</span> desc<span class="hl opt">,</span> <span class="hl kwb">unsigned</span> n<span class="hl opt">,</span> F f<span class="hl opt">)</span>
<span class="hl opt">{</span>
   <span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;&gt;%s %s</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> id<span class="hl opt">,</span> desc<span class="hl opt">);</span>
   <span class="hl kwb">char</span> line<span class="hl opt">[</span>length<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">]={</span><span class="hl num">0</span><span class="hl opt">};</span>
   <span class="hl kwb">unsigned</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
   <span class="hl kwa">while</span><span class="hl opt">(</span>n<span class="hl opt">-- &gt;</span> <span class="hl num">0</span><span class="hl opt">)</span>
   <span class="hl opt">{</span>
      line<span class="hl opt">[</span>i<span class="hl opt">++]=</span><span class="hl kwd">f</span><span class="hl opt">();</span>
      <span class="hl kwa">if</span><span class="hl opt">(</span>i <span class="hl opt">&gt;=</span> length<span class="hl opt">)</span>
      <span class="hl opt">{</span>
         <span class="hl kwd">puts</span><span class="hl opt">(</span>line<span class="hl opt">);</span>
         i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
      <span class="hl opt">}</span>
   <span class="hl opt">}</span>
   line<span class="hl opt">[</span>i<span class="hl opt">] =</span> <span class="hl num">0</span><span class="hl opt">;</span>
   <span class="hl kwa">if</span><span class="hl opt">(</span><span class="hl kwd">strlen</span><span class="hl opt">(</span>line<span class="hl opt">))</span><span class="hl kwd">puts</span><span class="hl opt">(</span>line<span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwb">struct</span> Repeat<span class="hl opt">{</span>
   <span class="hl kwd">Repeat</span><span class="hl opt">(</span><span class="hl kwb">const char</span><span class="hl opt">*</span> alu<span class="hl opt">):</span><span class="hl kwd">i</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">),</span><span class="hl kwd">size</span><span class="hl opt">(</span><span class="hl kwd">strlen</span><span class="hl opt">(</span>alu<span class="hl opt">)),</span><span class="hl kwd">alu</span><span class="hl opt">(</span>alu<span class="hl opt">){}</span>
   <span class="hl kwb">char</span> <span class="hl kwc">operator</span><span class="hl opt">()()</span>
   <span class="hl opt">{</span> 
      <span class="hl kwa">if</span><span class="hl opt">(</span>i <span class="hl opt">&gt;=</span> size<span class="hl opt">)</span>i<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span>
      <span class="hl kwa">return</span> alu<span class="hl opt">[</span>i<span class="hl opt">++];</span>
   <span class="hl opt">}</span>
   <span class="hl kwb">unsigned</span> i<span class="hl opt">,</span>size<span class="hl opt">;</span>
   <span class="hl kwb">const char</span><span class="hl opt">*</span> alu<span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl kwb">struct</span> Random<span class="hl opt">{</span>
   <span class="hl kwd">Random</span><span class="hl opt">(</span>std<span class="hl opt">::</span>vector<span class="hl opt">&lt;</span>IUB<span class="hl opt">&gt;&amp;</span> i<span class="hl opt">):</span><span class="hl kwd">i</span><span class="hl opt">(</span>i<span class="hl opt">){}</span>
   <span class="hl kwb">char</span> <span class="hl kwc">operator</span><span class="hl opt">()()</span>
   <span class="hl opt">{</span>
      <span class="hl kwb">float</span> p <span class="hl opt">=</span> <span class="hl kwd">genRandom</span><span class="hl opt">(</span><span class="hl num">1.0</span><span class="hl opt">);</span>
      <span class="hl kwa">return</span> i<span class="hl opt">[</span>std<span class="hl opt">::</span><span class="hl kwd">count_if</span><span class="hl opt">(</span>i<span class="hl opt">.</span><span class="hl kwd">begin</span><span class="hl opt">(),</span>i<span class="hl opt">.</span><span class="hl kwd">end</span><span class="hl opt">(),</span>
            <span class="hl opt">[</span>p<span class="hl opt">](</span>IUB i<span class="hl opt">){</span> <span class="hl kwa">return</span> p<span class="hl opt">&gt;=</span>i<span class="hl opt">.</span>p<span class="hl opt">;})].</span>c<span class="hl opt">;</span>
   <span class="hl opt">}</span>
   std<span class="hl opt">::</span>vector<span class="hl opt">&lt;</span>IUB<span class="hl opt">&gt;&amp;</span> i<span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl kwb">static</span> std<span class="hl opt">::</span>vector<span class="hl opt">&lt;</span>IUB<span class="hl opt">&gt;</span> iub <span class="hl opt">=</span>
<span class="hl opt">{</span>
   <span class="hl opt">{</span> <span class="hl str">'a'</span><span class="hl opt">,</span> <span class="hl num">0.27</span> <span class="hl opt">},</span>
   <span class="hl opt">{</span> <span class="hl str">'c'</span><span class="hl opt">,</span> <span class="hl num">0.12</span> <span class="hl opt">},</span>
   <span class="hl opt">{</span> <span class="hl str">'g'</span><span class="hl opt">,</span> <span class="hl num">0.12</span> <span class="hl opt">},</span>
   <span class="hl opt">{</span> <span class="hl str">'t'</span><span class="hl opt">,</span> <span class="hl num">0.27</span> <span class="hl opt">},</span>

   <span class="hl opt">{</span> <span class="hl str">'B'</span><span class="hl opt">,</span> <span class="hl num">0.02</span> <span class="hl opt">},</span>
   <span class="hl opt">{</span> <span class="hl str">'D'</span><span class="hl opt">,</span> <span class="hl num">0.02</span> <span class="hl opt">},</span>
   <span class="hl opt">{</span> <span class="hl str">'H'</span><span class="hl opt">,</span> <span class="hl num">0.02</span> <span class="hl opt">},</span>
   <span class="hl opt">{</span> <span class="hl str">'K'</span><span class="hl opt">,</span> <span class="hl num">0.02</span> <span class="hl opt">},</span>
   <span class="hl opt">{</span> <span class="hl str">'M'</span><span class="hl opt">,</span> <span class="hl num">0.02</span> <span class="hl opt">},</span>
   <span class="hl opt">{</span> <span class="hl str">'N'</span><span class="hl opt">,</span> <span class="hl num">0.02</span> <span class="hl opt">},</span>
   <span class="hl opt">{</span> <span class="hl str">'R'</span><span class="hl opt">,</span> <span class="hl num">0.02</span> <span class="hl opt">},</span>
   <span class="hl opt">{</span> <span class="hl str">'S'</span><span class="hl opt">,</span> <span class="hl num">0.02</span> <span class="hl opt">},</span>
   <span class="hl opt">{</span> <span class="hl str">'V'</span><span class="hl opt">,</span> <span class="hl num">0.02</span> <span class="hl opt">},</span>
   <span class="hl opt">{</span> <span class="hl str">'W'</span><span class="hl opt">,</span> <span class="hl num">0.02</span> <span class="hl opt">},</span>
   <span class="hl opt">{</span> <span class="hl str">'Y'</span><span class="hl opt">,</span> <span class="hl num">0.02</span> <span class="hl opt">}</span>
<span class="hl opt">};</span>

<span class="hl kwb">static</span> std<span class="hl opt">::</span>vector<span class="hl opt">&lt;</span>IUB<span class="hl opt">&gt;</span> homosapiens <span class="hl opt">=</span>
<span class="hl opt">{</span>
   <span class="hl opt">{</span> <span class="hl str">'a'</span><span class="hl opt">,</span> <span class="hl num">0.3029549426680</span> <span class="hl opt">},</span>
   <span class="hl opt">{</span> <span class="hl str">'c'</span><span class="hl opt">,</span> <span class="hl num">0.1979883004921</span> <span class="hl opt">},</span>
   <span class="hl opt">{</span> <span class="hl str">'g'</span><span class="hl opt">,</span> <span class="hl num">0.1975473066391</span> <span class="hl opt">},</span>
   <span class="hl opt">{</span> <span class="hl str">'t'</span><span class="hl opt">,</span> <span class="hl num">0.3015094502008</span> <span class="hl opt">}</span>
<span class="hl opt">};</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span> <span class="hl opt">*</span>argv<span class="hl opt">[])</span>
<span class="hl opt">{</span>
   <span class="hl kwb">unsigned const</span> n <span class="hl opt">=</span> argc <span class="hl opt">&gt;</span> <span class="hl num">1</span> ? <span class="hl kwd">atoi</span><span class="hl opt">(</span>argv<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">]) :</span> <span class="hl num">1</span><span class="hl opt">;</span>

   <span class="hl kwd">makeCumulative</span><span class="hl opt">(</span>iub<span class="hl opt">);</span>
   <span class="hl kwd">makeCumulative</span><span class="hl opt">(</span>homosapiens<span class="hl opt">);</span>
   
   <span class="hl kwd">make</span><span class="hl opt">(</span><span class="hl str">&quot;ONE&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;Homo sapiens alu&quot;</span><span class="hl opt">,</span> n<span class="hl opt">*</span><span class="hl num">2</span><span class="hl opt">,</span><span class="hl kwd">Repeat</span><span class="hl opt">(</span>alu<span class="hl opt">));</span>
   <span class="hl kwd">make</span><span class="hl opt">(</span><span class="hl str">&quot;TWO&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;IUB ambiguity codes&quot;</span><span class="hl opt">,</span> n<span class="hl opt">*</span><span class="hl num">3</span><span class="hl opt">,</span> <span class="hl kwd">Random</span><span class="hl opt">(</span>iub<span class="hl opt">));</span>
   <span class="hl kwd">make</span><span class="hl opt">(</span><span class="hl str">&quot;THREE&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;Homo sapiens frequency&quot;</span><span class="hl opt">,</span> n<span class="hl opt">*</span><span class="hl num">5</span><span class="hl opt">,</span> <span class="hl kwd">Random</span><span class="hl opt">(</span>homosapiens<span class="hl opt">));</span>
<span class="hl opt">}</span>
