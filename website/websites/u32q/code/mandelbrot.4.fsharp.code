<span class="hl com">(*</span>
<span class="hl com">      The Computer Language Benchmarks Game</span>
<span class="hl com">      http://benchmarksgame.alioth.debian.org/ </span>
<span class="hl com"></span>
<span class="hl com">      Contributed by Don Syme</span>
<span class="hl com">      Port of C# version by Antti Lankila, Isaac Gouy's, </span>
<span class="hl com">      The Anh Tran, Robert F. Tobler, Nigel Delaney, Marek Safar, kasthack</span>
<span class="hl com">*)</span>

<span class="hl kwa">open</span> <span class="hl kwd">System</span>
<span class="hl kwa">open</span> <span class="hl kwd">Mono</span><span class="hl opt">.</span><span class="hl kwd">Simd</span>
<span class="hl kwa">open</span> <span class="hl kwd">System</span><span class="hl opt">.</span><span class="hl kwd">IO</span>
<span class="hl kwa">open</span> <span class="hl kwd">System</span><span class="hl opt">.</span><span class="hl kwd">Threading</span>


<span class="hl opt">[&lt;</span><span class="hl kwd">EntryPoint</span><span class="hl opt">&gt;]</span>
<span class="hl kwa">let</span> main argv <span class="hl opt">=</span> 
    <span class="hl kwa">let</span> n  <span class="hl opt">=</span> <span class="hl kwa">if</span> <span class="hl opt">(</span>argv<span class="hl opt">.</span><span class="hl kwd">Length</span> <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">then</span> <span class="hl kwd">Int32</span><span class="hl opt">.</span><span class="hl kwd">Parse</span><span class="hl opt">(</span>argv<span class="hl opt">.[</span><span class="hl num">0</span><span class="hl opt">])</span> <span class="hl kwa">else</span> <span class="hl num">200</span>
    <span class="hl kwd">Console</span><span class="hl opt">.</span><span class="hl kwd">Out</span><span class="hl opt">.</span><span class="hl kwd">WriteLine</span><span class="hl opt">(</span><span class="hl str">&quot;P4</span><span class="hl esc">\n</span><span class="hl str">{0} {0}&quot;</span><span class="hl opt">,</span> n<span class="hl opt">)</span>
    <span class="hl kwa">let</span> lineLen <span class="hl opt">= (</span>n <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">) /</span> <span class="hl num">8</span> <span class="hl opt">+</span> <span class="hl num">1</span>
    <span class="hl kwa">let</span> data <span class="hl opt">=</span> <span class="hl kwd">Array</span><span class="hl opt">.</span>init n <span class="hl opt">(</span><span class="hl kwa">fun</span> i <span class="hl opt">-&gt;</span> <span class="hl kwd">Array</span><span class="hl opt">.</span>zeroCreate lineLen<span class="hl opt">)</span>
    <span class="hl kwa">let</span> xa <span class="hl opt">=</span> <span class="hl kwd">Array</span><span class="hl opt">.</span>init n <span class="hl opt">(</span><span class="hl kwa">fun</span> x <span class="hl opt">-&gt;</span> <span class="hl kwb">float</span> x <span class="hl opt">*</span> <span class="hl num">2.0</span> <span class="hl opt">/</span> <span class="hl kwb">float</span> n <span class="hl opt">-</span> <span class="hl num">1.5</span><span class="hl opt">)</span>
    <span class="hl kwa">let</span> lineCount <span class="hl opt">=</span> <span class="hl kwb">ref</span> <span class="hl opt">-</span><span class="hl num">1</span>
    <span class="hl kwa">let</span> calculate<span class="hl opt">()  =</span>
        <span class="hl kwa">let mutable</span> y <span class="hl opt">=</span> <span class="hl num">0</span>
        <span class="hl kwa">let</span> twoOverN <span class="hl opt">=</span> <span class="hl num">2.0</span> <span class="hl opt">/</span> <span class="hl kwb">float</span> n
        <span class="hl kwa">while</span> <span class="hl opt">(</span>y <span class="hl opt">&lt;-</span> <span class="hl kwd">Interlocked</span><span class="hl opt">.</span><span class="hl kwd">Increment</span><span class="hl opt">(&amp;</span>lineCount<span class="hl opt">.</span>contents<span class="hl opt">);</span> y <span class="hl opt">&lt;</span> n<span class="hl opt">)</span> <span class="hl kwa">do</span>
         <span class="hl kwa">let</span> line <span class="hl opt">=</span> data<span class="hl opt">.[</span>y<span class="hl opt">]</span>
         <span class="hl kwa">let mutable</span> xbyte <span class="hl opt">=</span> <span class="hl num">0</span>
         <span class="hl kwa">let mutable</span> bits <span class="hl opt">=</span> <span class="hl num">1</span>
         <span class="hl kwa">let</span> ci <span class="hl opt">=</span> <span class="hl kwb">float</span> y <span class="hl opt">*</span> twoOverN <span class="hl opt">-</span> <span class="hl num">1.0</span>
         <span class="hl kwa">let</span> <span class="hl kwd">Ci</span> <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Vector2d</span> <span class="hl opt">(</span>ci<span class="hl opt">)</span>
         <span class="hl kwa">for</span> x <span class="hl kwa">in</span> <span class="hl num">0</span> <span class="hl opt">..</span> <span class="hl num">2</span> <span class="hl opt">..</span> xa<span class="hl opt">.</span><span class="hl kwd">Length</span> <span class="hl opt">-</span> <span class="hl num">1</span> <span class="hl kwa">do</span>
            <span class="hl kwa">let</span> <span class="hl kwd">Cr</span> <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Vector2d</span><span class="hl opt">(</span>xa<span class="hl opt">.[</span>x<span class="hl opt">],</span>xa<span class="hl opt">.[</span>x<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">])</span><span class="hl slc">//vector of constant real terms</span>
            <span class="hl kwa">let</span> <span class="hl kwd">Tempr</span> <span class="hl opt">=</span> <span class="hl kwd">Cr</span> <span class="hl opt">*</span> <span class="hl kwd">Cr</span>
            <span class="hl kwa">let</span> <span class="hl kwd">Tempi</span> <span class="hl opt">=</span> <span class="hl kwd">Ci</span> <span class="hl opt">*</span> <span class="hl kwd">Ci</span>
            <span class="hl kwa">let mutable</span> <span class="hl kwd">Zr</span> <span class="hl opt">=</span> <span class="hl kwd">Cr</span>
            <span class="hl kwa">let mutable</span> <span class="hl kwd">Zi</span> <span class="hl opt">=</span> <span class="hl kwd">Ci</span>
            <span class="hl kwa">let mutable</span> <span class="hl kwd">Temp</span> <span class="hl opt">=</span> <span class="hl kwd">Tempr</span> <span class="hl opt">-</span> <span class="hl kwd">Tempi</span> <span class="hl opt">+</span> <span class="hl kwd">Cr</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>bits <span class="hl opt">&gt;</span> <span class="hl num">0xff</span><span class="hl opt">)</span> <span class="hl kwa">then</span> line<span class="hl opt">.[</span>xbyte<span class="hl opt">] &lt;-</span> byte<span class="hl opt">(</span>bits <span class="hl opt">^^^ -</span><span class="hl num">1</span><span class="hl opt">);</span> xbyte <span class="hl opt">&lt;-</span> xbyte <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span> bits <span class="hl opt">&lt;-</span> <span class="hl num">1</span> 
            <span class="hl kwa">let mutable</span> i <span class="hl opt">=</span> <span class="hl num">49</span>
            <span class="hl kwa">let mutable</span> b <span class="hl opt">=</span> <span class="hl num">0</span>
            <span class="hl kwa">let mutable</span> brk <span class="hl opt">=</span> <span class="hl kwa">false</span>
            <span class="hl kwa">while</span> not brk <span class="hl kwa">do</span>
               <span class="hl kwa">let</span> <span class="hl kwd">Zri</span> <span class="hl opt">=</span> <span class="hl kwd">Zr</span><span class="hl opt">*</span><span class="hl kwd">Zi</span>  <span class="hl slc">//calculate r*i for both</span>
               <span class="hl kwd">Zi</span> <span class="hl opt">&lt;-</span> <span class="hl kwd">Zri</span><span class="hl opt">+</span><span class="hl kwd">Zri</span><span class="hl opt">+</span><span class="hl kwd">Ci</span> <span class="hl slc">//double that and add a constant </span>
               <span class="hl kwd">Zr</span> <span class="hl opt">&lt;-</span> <span class="hl kwd">Temp</span><span class="hl slc">//pre-calculated on previous loop</span>
               <span class="hl kwa">let mutable</span> <span class="hl kwd">V0</span> <span class="hl opt">=</span> <span class="hl kwd">Zr</span><span class="hl opt">.</span><span class="hl kwd">InterleaveLow</span><span class="hl opt">(</span><span class="hl kwd">Zi</span><span class="hl opt">)</span><span class="hl slc">//r0,i0</span>
               <span class="hl kwa">let mutable</span> <span class="hl kwd">V1</span> <span class="hl opt">=</span> <span class="hl kwd">Zr</span><span class="hl opt">.</span><span class="hl kwd">InterleaveHigh</span><span class="hl opt">(</span><span class="hl kwd">Zi</span><span class="hl opt">)</span><span class="hl slc">//r1,i1</span>
               <span class="hl kwd">V0</span> <span class="hl opt">&lt;-</span> <span class="hl kwd">V0</span><span class="hl opt">*</span><span class="hl kwd">V0</span> <span class="hl slc">//r0^2,i0^2</span>
               <span class="hl kwd">V1</span> <span class="hl opt">&lt;-</span> <span class="hl kwd">V1</span><span class="hl opt">*</span><span class="hl kwd">V1</span>
               <span class="hl kwa">let</span> <span class="hl kwd">Length</span> <span class="hl opt">=</span> <span class="hl kwd">V0</span><span class="hl opt">.</span><span class="hl kwd">HorizontalAdd</span><span class="hl opt">(</span><span class="hl kwd">V1</span><span class="hl opt">)</span><span class="hl slc">//(r0^2+i0^2),(r1^2+i1^2)</span>
               <span class="hl kwd">Temp</span> <span class="hl opt">&lt;-</span> <span class="hl kwd">V0</span><span class="hl opt">.</span><span class="hl kwd">HorizontalSub</span><span class="hl opt">(</span><span class="hl kwd">V1</span><span class="hl opt">)+</span><span class="hl kwd">Cr</span><span class="hl slc">//(r0^2-i0^2),(r1^2-i1^2)</span>
                <span class="hl slc">//now to determine end condition, </span>
               <span class="hl kwa">if</span><span class="hl opt">(</span><span class="hl kwd">Length</span><span class="hl opt">.</span><span class="hl kwd">X</span><span class="hl opt">&gt;</span><span class="hl num">4.0</span><span class="hl opt">)</span> <span class="hl kwa">then</span> <span class="hl opt">(</span>b <span class="hl opt">&lt;-</span> b ||| <span class="hl num">2</span><span class="hl opt">;</span> <span class="hl kwa">if</span><span class="hl opt">(</span>b<span class="hl opt">=</span><span class="hl num">3</span><span class="hl opt">)</span> <span class="hl kwa">then</span> brk <span class="hl opt">&lt;-</span> <span class="hl kwa">true</span><span class="hl opt">)</span>
               <span class="hl kwa">if</span><span class="hl opt">(</span>not brk <span class="hl opt">&amp;&amp;</span> <span class="hl kwd">Length</span><span class="hl opt">.</span><span class="hl kwd">Y</span><span class="hl opt">&gt;</span><span class="hl num">4.0</span><span class="hl opt">)</span> <span class="hl kwa">then</span> <span class="hl opt">(</span>b <span class="hl opt">&lt;-</span> b ||| <span class="hl num">1</span><span class="hl opt">;</span> <span class="hl kwa">if</span><span class="hl opt">(</span>b<span class="hl opt">=</span><span class="hl num">3</span><span class="hl opt">)</span> <span class="hl kwa">then</span> brk <span class="hl opt">&lt;-</span> <span class="hl kwa">true</span><span class="hl opt">)</span>
               i <span class="hl opt">&lt;-</span> i <span class="hl opt">-</span> <span class="hl num">1</span>
               <span class="hl kwa">if</span> <span class="hl opt">(</span>i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">then</span> brk <span class="hl opt">&lt;-</span> <span class="hl kwa">true</span>
            bits <span class="hl opt">&lt;- (</span>bits <span class="hl opt">&lt;&lt;&lt;</span> <span class="hl num">2</span><span class="hl opt">) +</span> b
         <span class="hl kwa">while</span> <span class="hl opt">(</span>bits <span class="hl opt">&lt;</span> <span class="hl num">0x100</span><span class="hl opt">)</span> <span class="hl kwa">do</span> bits <span class="hl opt">&lt;- (</span>bits <span class="hl opt">&lt;&lt;&lt;</span> <span class="hl num">1</span><span class="hl opt">)</span> 
         line<span class="hl opt">.[</span>xbyte<span class="hl opt">] &lt;-</span> byte<span class="hl opt">(</span>bits <span class="hl opt">^^^ -</span><span class="hl num">1</span><span class="hl opt">)</span>

    <span class="hl kwa">let</span> threads <span class="hl opt">=</span> <span class="hl kwd">Array</span><span class="hl opt">.</span>init <span class="hl kwd">Environment</span><span class="hl opt">.</span><span class="hl kwd">ProcessorCount</span> <span class="hl opt">(</span><span class="hl kwa">fun</span> _ <span class="hl opt">-&gt;</span> <span class="hl kwa">let</span> t <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">Thread</span><span class="hl opt">(</span>calculate<span class="hl opt">)</span> <span class="hl kwa">in</span> t<span class="hl opt">.</span><span class="hl kwd">Start</span><span class="hl opt">();</span> t<span class="hl opt">)</span>
    <span class="hl kwa">for</span> t <span class="hl kwa">in</span> threads <span class="hl kwa">do</span> t<span class="hl opt">.</span><span class="hl kwd">Join</span><span class="hl opt">()</span>
    <span class="hl kwa">let</span> s <span class="hl opt">=</span> <span class="hl kwd">Console</span><span class="hl opt">.</span><span class="hl kwd">OpenStandardOutput</span><span class="hl opt">()</span>
    <span class="hl kwa">for</span> y <span class="hl kwa">in</span> <span class="hl num">0</span> <span class="hl opt">..</span> n <span class="hl opt">-</span> <span class="hl num">1</span> <span class="hl kwa">do</span> s<span class="hl opt">.</span><span class="hl kwd">Write</span><span class="hl opt">(</span>data<span class="hl opt">.[</span>y<span class="hl opt">],</span> <span class="hl num">0</span><span class="hl opt">,</span> lineLen<span class="hl opt">)</span>
    <span class="hl num">0</span>
