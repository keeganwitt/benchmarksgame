<span class="hl com">/**</span>
<span class="hl com"> * The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * contributed by Fabien Le Floc'h</span>
<span class="hl com"> *</span>
<span class="hl com"> * Java implementation of thread-ring benchmark. Best performance is achieved with </span>
<span class="hl com"> * MAX_THREAD=1 as the thread-ring test is bested with only 1 os thread.</span>
<span class="hl com"> * This implementation shows using a simple thread pool solves the thread context</span>
<span class="hl com"> * switch issue.</span>
<span class="hl com"> */</span>

<span class="hl kwa">import</span> java<span class="hl opt">.</span>util<span class="hl opt">.</span>concurrent<span class="hl opt">.</span>BlockingQueue<span class="hl opt">;</span>
<span class="hl kwa">import</span> java<span class="hl opt">.</span>util<span class="hl opt">.</span>concurrent<span class="hl opt">.</span>ExecutorService<span class="hl opt">;</span>
<span class="hl kwa">import</span> java<span class="hl opt">.</span>util<span class="hl opt">.</span>concurrent<span class="hl opt">.</span>Executors<span class="hl opt">;</span>
<span class="hl kwa">import</span> java<span class="hl opt">.</span>util<span class="hl opt">.</span>concurrent<span class="hl opt">.</span>LinkedBlockingQueue<span class="hl opt">;</span>

<span class="hl kwa">public class</span> threadring <span class="hl opt">{</span>
    <span class="hl kwa">private static final</span> <span class="hl kwb">int</span> MAX_NODES <span class="hl opt">=</span> <span class="hl num">503</span><span class="hl opt">;</span>
    <span class="hl kwa">private static final</span> <span class="hl kwb">int</span> MAX_THREADS <span class="hl opt">=</span> <span class="hl num">503</span><span class="hl opt">;</span>

    <span class="hl kwa">private</span> ExecutorService executor<span class="hl opt">;</span>
    <span class="hl kwa">private final</span> <span class="hl kwb">int</span> N<span class="hl opt">;</span>

    <span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">main</span><span class="hl opt">(</span>String<span class="hl opt">[]</span> args<span class="hl opt">) {</span>
        threadring ring <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">threadring</span><span class="hl opt">(</span>Integer<span class="hl opt">.</span><span class="hl kwd">parseInt</span><span class="hl opt">(</span>args<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">]));</span>
        Node node <span class="hl opt">=</span> ring<span class="hl opt">.</span><span class="hl kwd">start</span><span class="hl opt">(</span>MAX_NODES<span class="hl opt">);</span>
        node<span class="hl opt">.</span><span class="hl kwd">sendMessage</span><span class="hl opt">(</span><span class="hl kwa">new</span> <span class="hl kwd">TokenMessage</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">0</span><span class="hl opt">));</span>
    <span class="hl opt">}</span>
    
    <span class="hl kwa">public</span> <span class="hl kwd">threadring</span><span class="hl opt">(</span><span class="hl kwb">int</span> n<span class="hl opt">) {</span>
        N <span class="hl opt">=</span> n<span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">public</span> Node <span class="hl kwd">start</span><span class="hl opt">(</span><span class="hl kwb">int</span> n<span class="hl opt">) {</span>
        Node<span class="hl opt">[]</span> nodes <span class="hl opt">=</span> <span class="hl kwd">spawnNodes</span><span class="hl opt">(</span>n<span class="hl opt">);</span>
        <span class="hl kwd">connectNodes</span><span class="hl opt">(</span>n<span class="hl opt">,</span> nodes<span class="hl opt">);</span>
        <span class="hl kwa">return</span> nodes<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">];</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">private</span> Node<span class="hl opt">[]</span> <span class="hl kwd">spawnNodes</span><span class="hl opt">(</span><span class="hl kwb">int</span> n<span class="hl opt">) {</span>
        executor <span class="hl opt">=</span> Executors<span class="hl opt">.</span><span class="hl kwd">newFixedThreadPool</span><span class="hl opt">(</span>MAX_THREADS<span class="hl opt">);</span>
        Node<span class="hl opt">[]</span> nodes <span class="hl opt">=</span> <span class="hl kwa">new</span> Node<span class="hl opt">[</span>n<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">];</span>
        <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> n <span class="hl opt">;</span> i<span class="hl opt">++) {</span>
            nodes<span class="hl opt">[</span>i<span class="hl opt">] =</span> <span class="hl kwa">new</span> <span class="hl kwd">Node</span><span class="hl opt">(</span>i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">,</span> null<span class="hl opt">);</span>
        <span class="hl opt">}</span>
        <span class="hl kwa">return</span> nodes<span class="hl opt">;</span>
    <span class="hl opt">}</span>
    
    <span class="hl kwa">public</span> <span class="hl kwb">void</span> <span class="hl kwd">connectNodes</span><span class="hl opt">(</span><span class="hl kwb">int</span> n<span class="hl opt">,</span> Node<span class="hl opt">[]</span> nodes<span class="hl opt">) {</span>
        nodes<span class="hl opt">[</span>n<span class="hl opt">] =</span> nodes<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">];</span>
        <span class="hl kwa">for</span> <span class="hl opt">(</span><span class="hl kwb">int</span> i<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span> i<span class="hl opt">&lt;</span>n<span class="hl opt">;</span> i<span class="hl opt">++) {</span>
            nodes<span class="hl opt">[</span>i<span class="hl opt">].</span><span class="hl kwd">connect</span><span class="hl opt">(</span>nodes<span class="hl opt">[</span>i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">]);</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">private static class</span> TokenMessage <span class="hl opt">{</span>
        <span class="hl kwa">private</span> <span class="hl kwb">int</span> nodeId<span class="hl opt">;</span>
        <span class="hl kwa">private volatile</span> <span class="hl kwb">int</span> value<span class="hl opt">;</span>
        <span class="hl kwa">private</span> <span class="hl kwb">boolean</span> isStop<span class="hl opt">;</span>

        <span class="hl kwa">public</span> <span class="hl kwd">TokenMessage</span><span class="hl opt">(</span><span class="hl kwb">int</span> nodeId<span class="hl opt">,</span> <span class="hl kwb">int</span> value<span class="hl opt">) {</span>
            <span class="hl kwa">this</span><span class="hl opt">.</span>nodeId <span class="hl opt">=</span> nodeId<span class="hl opt">;</span>
            <span class="hl kwa">this</span><span class="hl opt">.</span>value <span class="hl opt">=</span> value<span class="hl opt">;</span>
        <span class="hl opt">}</span>

        <span class="hl kwa">public</span> <span class="hl kwd">TokenMessage</span><span class="hl opt">(</span><span class="hl kwb">int</span> nodeId<span class="hl opt">,</span> <span class="hl kwb">int</span> value<span class="hl opt">,</span> <span class="hl kwb">boolean</span> isStop<span class="hl opt">) {</span>
            <span class="hl kwa">this</span><span class="hl opt">.</span>nodeId <span class="hl opt">=</span> nodeId<span class="hl opt">;</span>
            <span class="hl kwa">this</span><span class="hl opt">.</span>value <span class="hl opt">=</span> value<span class="hl opt">;</span>
            <span class="hl kwa">this</span><span class="hl opt">.</span>isStop <span class="hl opt">=</span> isStop<span class="hl opt">;</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">private class</span> Node <span class="hl kwa">implements</span> Runnable <span class="hl opt">{</span>
        <span class="hl kwa">private</span> <span class="hl kwb">int</span> nodeId<span class="hl opt">;</span>
        <span class="hl kwa">private</span> Node nextNode<span class="hl opt">;</span>
        <span class="hl kwa">private</span> BlockingQueue<span class="hl opt">&lt;</span>TokenMessage<span class="hl opt">&gt;</span> queue <span class="hl opt">=</span> <span class="hl kwa">new</span> LinkedBlockingQueue<span class="hl opt">&lt;</span>TokenMessage<span class="hl opt">&gt;();</span>
        <span class="hl kwa">private</span> <span class="hl kwb">boolean</span> isActive <span class="hl opt">=</span> false<span class="hl opt">;</span>
        <span class="hl kwa">private</span> <span class="hl kwb">int</span> counter<span class="hl opt">;</span>

        <span class="hl kwa">public</span> <span class="hl kwd">Node</span><span class="hl opt">(</span><span class="hl kwb">int</span> id<span class="hl opt">,</span> Node nextNode<span class="hl opt">) {</span>
            <span class="hl kwa">this</span><span class="hl opt">.</span>nodeId <span class="hl opt">=</span> id<span class="hl opt">;</span>
            <span class="hl kwa">this</span><span class="hl opt">.</span>nextNode <span class="hl opt">=</span> nextNode<span class="hl opt">;</span>
            <span class="hl kwa">this</span><span class="hl opt">.</span>counter <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
        <span class="hl opt">}</span>

        <span class="hl kwa">public</span> <span class="hl kwb">void</span> <span class="hl kwd">connect</span><span class="hl opt">(</span>Node node<span class="hl opt">) {</span>
            <span class="hl kwa">this</span><span class="hl opt">.</span>nextNode <span class="hl opt">=</span> node<span class="hl opt">;</span>
            isActive <span class="hl opt">=</span> true<span class="hl opt">;</span>
        <span class="hl opt">}</span>

        <span class="hl kwa">public</span> <span class="hl kwb">void</span> <span class="hl kwd">sendMessage</span><span class="hl opt">(</span>TokenMessage m<span class="hl opt">) {</span>
            queue<span class="hl opt">.</span><span class="hl kwd">add</span><span class="hl opt">(</span>m<span class="hl opt">);</span>
            executor<span class="hl opt">.</span><span class="hl kwd">execute</span><span class="hl opt">(</span><span class="hl kwa">this</span><span class="hl opt">);</span>
        <span class="hl opt">}</span>


        <span class="hl kwa">public</span> <span class="hl kwb">void</span> <span class="hl kwd">run</span><span class="hl opt">() {</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>isActive<span class="hl opt">) {</span>
                <span class="hl kwa">try</span> <span class="hl opt">{</span>
                    TokenMessage m <span class="hl opt">=</span> queue<span class="hl opt">.</span><span class="hl kwd">take</span><span class="hl opt">();</span>
                    <span class="hl kwa">if</span> <span class="hl opt">(</span>m<span class="hl opt">.</span>isStop<span class="hl opt">) {</span>
                        <span class="hl kwb">int</span> nextValue <span class="hl opt">=</span> m<span class="hl opt">.</span>value<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">;</span>
                        <span class="hl kwa">if</span> <span class="hl opt">(</span>nextValue <span class="hl opt">==</span> MAX_NODES<span class="hl opt">) {</span>
<span class="hl slc">//                            System.out.println(&quot;last one&quot;);</span>
                            executor<span class="hl opt">.</span><span class="hl kwd">shutdown</span><span class="hl opt">();</span>                            
                        <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
                            m<span class="hl opt">.</span>value <span class="hl opt">=</span> nextValue<span class="hl opt">;</span>
                            nextNode<span class="hl opt">.</span><span class="hl kwd">sendMessage</span><span class="hl opt">(</span>m<span class="hl opt">);</span>
                        <span class="hl opt">}</span>
                        isActive <span class="hl opt">=</span> false<span class="hl opt">;</span>
<span class="hl slc">//                        System.out.println(&quot;ending node &quot;+nodeId);</span>
                    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
                        <span class="hl kwa">if</span> <span class="hl opt">(</span>m<span class="hl opt">.</span>value <span class="hl opt">==</span> N<span class="hl opt">) {</span>
                            System<span class="hl opt">.</span>out<span class="hl opt">.</span><span class="hl kwd">println</span><span class="hl opt">(</span>nodeId<span class="hl opt">);</span>
                            nextNode<span class="hl opt">.</span><span class="hl kwd">sendMessage</span><span class="hl opt">(</span><span class="hl kwa">new</span> <span class="hl kwd">TokenMessage</span><span class="hl opt">(</span>nodeId<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> true<span class="hl opt">));</span>
                        <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
                            m<span class="hl opt">.</span>value <span class="hl opt">=</span> m<span class="hl opt">.</span>value <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span>
                            nextNode<span class="hl opt">.</span><span class="hl kwd">sendMessage</span><span class="hl opt">(</span>m<span class="hl opt">);</span>
                        <span class="hl opt">}</span>
                    <span class="hl opt">}</span>
                <span class="hl opt">}</span> <span class="hl kwa">catch</span> <span class="hl opt">(</span>InterruptedException ie<span class="hl opt">) {</span>
                    ie<span class="hl opt">.</span><span class="hl kwd">printStackTrace</span><span class="hl opt">();</span>
                <span class="hl opt">}</span>
            <span class="hl opt">}</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span>
<span class="hl opt">}</span>
