
<span class="hl slc">-- The Computer Language Benchmarks Game</span>
<span class="hl slc">-- http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">--</span>
<span class="hl slc">-- Based on code by Pascal Obry, Gautier de Montmollin, Andrew Moon</span>
<span class="hl slc">-- Jason Blevins, and Petr Prokhorenkov</span>
<span class="hl slc">-- Contributed by Jonathan Parker and Georg Bauhaus (Nov 2010)</span>


<span class="hl kwa">with</span> Ada<span class="hl opt">.</span>Command_Line<span class="hl opt">;</span> <span class="hl kwa">use</span> Ada<span class="hl opt">.</span>Command_Line<span class="hl opt">;</span>
<span class="hl kwa">with</span> Ada<span class="hl opt">.</span>Streams<span class="hl opt">.</span>Stream_IO<span class="hl opt">;</span>

<span class="hl kwa">procedure</span> FastaRedux <span class="hl kwa">is</span>

   <span class="hl kwa">type</span> Real <span class="hl kwa">is digits</span> <span class="hl num">15</span><span class="hl opt">;</span>

   <span class="hl kwa">type</span> Gene_id_Type <span class="hl kwa">is range</span> <span class="hl opt">-</span><span class="hl num">2</span><span class="hl opt">**</span><span class="hl num">15</span> <span class="hl opt">..</span> <span class="hl num">2</span><span class="hl opt">**</span><span class="hl num">15</span><span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">;</span>

   <span class="hl kwa">type</span> Aminoacid <span class="hl kwa">is record</span>
      C <span class="hl opt">:</span> <span class="hl kwb">Character</span><span class="hl opt">;</span>  <span class="hl slc">-- IUB code</span>
      P <span class="hl opt">:</span> Real<span class="hl opt">;</span>       <span class="hl slc">-- probability</span>
   <span class="hl kwa">end record</span><span class="hl opt">;</span>

   <span class="hl kwa">type</span> Aminoacid_Set <span class="hl kwa">is array</span> <span class="hl opt">(</span>Gene_id_Type <span class="hl kwa">range</span> <span class="hl opt">&lt;&gt;)</span> <span class="hl kwa">of</span> Aminoacid<span class="hl opt">;</span>

   Homo_Sapiens <span class="hl opt">:</span> <span class="hl kwa">constant</span> Aminoacid_Set<span class="hl opt">(</span><span class="hl num">0</span> <span class="hl opt">..</span> <span class="hl num">3</span><span class="hl opt">) :=</span>
    <span class="hl opt">((</span><span class="hl str">'a'</span><span class="hl opt">,</span> <span class="hl num">0.3029549426680</span><span class="hl opt">), (</span><span class="hl str">'c'</span><span class="hl opt">,</span> <span class="hl num">0.1979883004921</span><span class="hl opt">),</span>
     <span class="hl opt">(</span><span class="hl str">'g'</span><span class="hl opt">,</span> <span class="hl num">0.1975473066391</span><span class="hl opt">), (</span><span class="hl str">'t'</span><span class="hl opt">,</span> <span class="hl num">0.3015094502008</span><span class="hl opt">));</span>

   Genes <span class="hl opt">:</span> <span class="hl kwa">constant</span> Aminoacid_Set<span class="hl opt">(</span><span class="hl num">0</span> <span class="hl opt">..</span> <span class="hl num">14</span><span class="hl opt">) :=</span>
    <span class="hl opt">((</span><span class="hl str">'a'</span><span class="hl opt">,</span> <span class="hl num">0.27</span><span class="hl opt">), (</span><span class="hl str">'c'</span><span class="hl opt">,</span> <span class="hl num">0.12</span><span class="hl opt">), (</span><span class="hl str">'g'</span><span class="hl opt">,</span> <span class="hl num">0.12</span><span class="hl opt">), (</span><span class="hl str">'t'</span><span class="hl opt">,</span> <span class="hl num">0.27</span><span class="hl opt">),</span>
     <span class="hl opt">(</span><span class="hl str">'B'</span><span class="hl opt">,</span> <span class="hl num">0.02</span><span class="hl opt">), (</span><span class="hl str">'D'</span><span class="hl opt">,</span> <span class="hl num">0.02</span><span class="hl opt">), (</span><span class="hl str">'H'</span><span class="hl opt">,</span> <span class="hl num">0.02</span><span class="hl opt">), (</span><span class="hl str">'K'</span><span class="hl opt">,</span> <span class="hl num">0.02</span><span class="hl opt">),</span>
     <span class="hl opt">(</span><span class="hl str">'M'</span><span class="hl opt">,</span> <span class="hl num">0.02</span><span class="hl opt">), (</span><span class="hl str">'N'</span><span class="hl opt">,</span> <span class="hl num">0.02</span><span class="hl opt">), (</span><span class="hl str">'R'</span><span class="hl opt">,</span> <span class="hl num">0.02</span><span class="hl opt">), (</span><span class="hl str">'S'</span><span class="hl opt">,</span> <span class="hl num">0.02</span><span class="hl opt">),</span>
     <span class="hl opt">(</span><span class="hl str">'V'</span><span class="hl opt">,</span> <span class="hl num">0.02</span><span class="hl opt">), (</span><span class="hl str">'W'</span><span class="hl opt">,</span> <span class="hl num">0.02</span><span class="hl opt">), (</span><span class="hl str">'Y'</span><span class="hl opt">,</span> <span class="hl num">0.02</span><span class="hl opt">));</span>

   ALU <span class="hl opt">:</span> <span class="hl kwa">constant</span> <span class="hl kwb">String</span> <span class="hl opt">:=</span>
     <span class="hl str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTG&quot;</span> <span class="hl opt">&amp;</span>
     <span class="hl str">&quot;GGAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGA&quot;</span> <span class="hl opt">&amp;</span>
     <span class="hl str">&quot;GACCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAA&quot;</span> <span class="hl opt">&amp;</span>
     <span class="hl str">&quot;AATACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAAT&quot;</span> <span class="hl opt">&amp;</span>
     <span class="hl str">&quot;CCCAGCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAAC&quot;</span> <span class="hl opt">&amp;</span>
     <span class="hl str">&quot;CCGGGAGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTG&quot;</span> <span class="hl opt">&amp;</span>
     <span class="hl str">&quot;CACTCCAGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span><span class="hl opt">;</span>

   ALU_Length <span class="hl opt">:</span> <span class="hl kwa">constant</span> <span class="hl kwb">Positive</span> <span class="hl opt">:=</span> ALU<span class="hl kwd">'Length</span><span class="hl opt">;</span>

   Lookup_Table_Size <span class="hl opt">:</span> <span class="hl kwa">constant</span> <span class="hl opt">:=</span> <span class="hl num">4096</span><span class="hl opt">;</span>
   Lookup_Scale <span class="hl opt">:</span> <span class="hl kwa">constant</span> Real <span class="hl opt">:=</span> Real <span class="hl opt">(</span>Lookup_Table_Size <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">);</span>

   <span class="hl kwa">type</span> Lookup_Table <span class="hl kwa">is</span>
      <span class="hl kwa">array</span> <span class="hl opt">(</span>Gene_id_Type <span class="hl kwa">range</span> <span class="hl num">0</span><span class="hl opt">..</span>Lookup_Table_Size<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">)</span> <span class="hl kwa">of</span> Gene_id_Type<span class="hl opt">;</span>

   <span class="hl kwa">type</span> Random_State <span class="hl kwa">is mod</span> <span class="hl num">2</span><span class="hl opt">**</span><span class="hl num">32</span><span class="hl opt">;</span>
   Max   <span class="hl opt">:</span> <span class="hl kwa">constant</span> Real <span class="hl opt">:=</span> <span class="hl num">1.0</span><span class="hl opt">;</span>
   Seed  <span class="hl opt">:</span> <span class="hl kwa">constant</span> <span class="hl opt">:=</span> <span class="hl num">42</span><span class="hl opt">;</span>
   State <span class="hl opt">:</span> Random_State <span class="hl opt">:=</span> Seed<span class="hl opt">;</span>

   Line_Length <span class="hl opt">:</span> <span class="hl kwa">constant</span> <span class="hl kwb">Positive</span> <span class="hl opt">:=</span> <span class="hl num">60</span><span class="hl opt">;</span>
   End_of_Line <span class="hl opt">:</span> <span class="hl kwa">constant</span> <span class="hl kwb">String</span> <span class="hl opt">:= (</span><span class="hl num">1</span> <span class="hl opt">=&gt;</span> ASCII<span class="hl opt">.</span>LF<span class="hl opt">);</span>

   <span class="hl kwa">package</span> Streamed_Line_IO <span class="hl kwa">is</span>

      <span class="hl kwa">procedure</span> Put <span class="hl opt">(</span>Item <span class="hl opt">:</span> <span class="hl kwb">String</span><span class="hl opt">);</span>

      <span class="hl kwa">procedure</span> Close<span class="hl opt">;</span>  <span class="hl slc">--  close output</span>

   <span class="hl kwa">end</span> Streamed_Line_IO<span class="hl opt">;</span>


   <span class="hl kwa">package body</span> Streamed_Line_IO <span class="hl kwa">is</span>

      <span class="hl kwa">use</span> Ada<span class="hl opt">.</span>Streams<span class="hl opt">;</span>

      Stdout <span class="hl opt">:</span> Stream_IO<span class="hl opt">.</span>File_Type<span class="hl opt">;</span>

      <span class="hl kwa">procedure</span> Put <span class="hl opt">(</span>Item <span class="hl opt">:</span> <span class="hl kwb">String</span><span class="hl opt">)</span> <span class="hl kwa">is</span>
         <span class="hl kwa">subtype</span> Index <span class="hl kwa">is</span> Stream_Element_Offset <span class="hl kwa">range</span> <span class="hl num">1</span> <span class="hl opt">..</span> Item<span class="hl kwd">'Length</span><span class="hl opt">;</span>
         <span class="hl kwa">subtype</span> XBytes <span class="hl kwa">is</span> Stream_Element_Array <span class="hl opt">(</span>Index<span class="hl opt">);</span>
         Item_Bytes<span class="hl opt">:</span> XBytes<span class="hl opt">;</span>
         <span class="hl kwa">pragma</span> Import <span class="hl opt">(</span>Ada<span class="hl opt">,</span> Item_Bytes<span class="hl opt">);</span>
         <span class="hl kwa">for</span> Item_Bytes<span class="hl kwd">'Address</span> <span class="hl kwa">use</span> Item<span class="hl kwd">'Address</span><span class="hl opt">;</span>
         <span class="hl kwa">pragma</span> Assert <span class="hl opt">(</span>Item<span class="hl kwd">'Size</span> <span class="hl opt">=</span> Item_Bytes<span class="hl kwd">'Size</span><span class="hl opt">);</span>
      <span class="hl kwa">begin</span>
         Stream_IO<span class="hl opt">.</span>Write <span class="hl opt">(</span>Stdout<span class="hl opt">,</span> Item_Bytes<span class="hl opt">);</span>
      <span class="hl kwa">end</span> Put<span class="hl opt">;</span>

      <span class="hl kwa">procedure</span> Close <span class="hl kwa">is</span>
      <span class="hl kwa">begin</span>
         Stream_IO<span class="hl opt">.</span>Close <span class="hl opt">(</span>Stdout<span class="hl opt">);</span>
      <span class="hl kwa">end</span> Close<span class="hl opt">;</span>

   <span class="hl kwa">begin</span>
      Stream_IO<span class="hl opt">.</span>Open <span class="hl opt">(</span>Stdout<span class="hl opt">,</span>
                      Mode <span class="hl opt">=&gt;</span> Stream_IO<span class="hl opt">.</span>Out_File<span class="hl opt">,</span>
                      Name <span class="hl opt">=&gt;</span> <span class="hl str">&quot;/dev/stdout&quot;</span><span class="hl opt">);</span>
   <span class="hl kwa">end</span> Streamed_Line_IO<span class="hl opt">;</span>


   <span class="hl kwa">procedure</span> Gen_Random
     <span class="hl opt">(</span>Next_Result <span class="hl opt">:</span>    <span class="hl kwa">out</span> Real<span class="hl opt">;</span>
      State       <span class="hl opt">:</span> <span class="hl kwa">in out</span> Random_State<span class="hl opt">)</span>
   <span class="hl kwa">is</span>
      IM <span class="hl opt">:</span> <span class="hl kwa">constant</span> <span class="hl opt">:=</span> <span class="hl num">139</span>_968<span class="hl opt">;</span>
      IA <span class="hl opt">:</span> <span class="hl kwa">constant</span> <span class="hl opt">:=</span>   <span class="hl num">3</span>_877<span class="hl opt">;</span>
      IC <span class="hl opt">:</span> <span class="hl kwa">constant</span> <span class="hl opt">:=</span>  <span class="hl num">29</span>_573<span class="hl opt">;</span>
   <span class="hl kwa">begin</span>
      State <span class="hl opt">:= (</span>State <span class="hl opt">*</span> IA <span class="hl opt">+</span> IC<span class="hl opt">)</span> <span class="hl kwa">mod</span> IM<span class="hl opt">;</span>
      Next_Result <span class="hl opt">:=</span> Max <span class="hl opt">*(</span>Real <span class="hl opt">(</span>State<span class="hl opt">)) * (</span>Lookup_Scale <span class="hl opt">/</span> Real <span class="hl opt">(</span>IM<span class="hl opt">));</span>
   <span class="hl kwa">end</span> Gen_Random<span class="hl opt">;</span>


   <span class="hl kwa">procedure</span> New_Line <span class="hl kwa">is begin</span>
      Streamed_Line_IO<span class="hl opt">.</span>Put <span class="hl opt">(</span>End_of_Line<span class="hl opt">);</span>
   <span class="hl kwa">end</span> New_Line<span class="hl opt">;</span>

   <span class="hl kwa">procedure</span> Repeat
     <span class="hl opt">(</span>Title <span class="hl opt">:</span> <span class="hl kwa">in</span> <span class="hl kwb">String</span><span class="hl opt">;</span>
      N     <span class="hl opt">:</span> <span class="hl kwa">in</span> <span class="hl kwb">Natural</span><span class="hl opt">)</span>
   <span class="hl kwa">is</span>
      Buffer <span class="hl opt">:</span> <span class="hl kwb">String</span><span class="hl opt">(</span><span class="hl num">1</span> <span class="hl opt">..</span> ALU_Length <span class="hl opt">+</span> Line_Length<span class="hl opt">);</span>
      nn<span class="hl opt">,</span> pos<span class="hl opt">,</span> bytes <span class="hl opt">:</span> <span class="hl kwb">Integer</span><span class="hl opt">;</span>
   <span class="hl kwa">begin</span>
      nn <span class="hl opt">:=</span> N<span class="hl opt">;</span>
      pos <span class="hl opt">:=</span> <span class="hl num">1</span><span class="hl opt">;</span>

      Buffer<span class="hl opt">(</span><span class="hl num">1</span> <span class="hl opt">..</span> ALU_Length<span class="hl opt">) :=</span> ALU<span class="hl opt">(</span><span class="hl num">1</span> <span class="hl opt">..</span> ALU_Length<span class="hl opt">);</span>
      Buffer<span class="hl opt">(</span>ALU_Length<span class="hl opt">+</span><span class="hl num">1</span> <span class="hl opt">..</span> Buffer<span class="hl kwd">'Last</span><span class="hl opt">) :=</span> ALU<span class="hl opt">(</span><span class="hl num">1</span> <span class="hl opt">..</span> Buffer<span class="hl kwd">'Last</span><span class="hl opt">-</span>ALU_Length<span class="hl opt">);</span>

      Streamed_Line_IO<span class="hl opt">.</span>Put <span class="hl opt">(</span>Title<span class="hl opt">);</span> New_Line<span class="hl opt">;</span>

      <span class="hl kwa">while</span> nn <span class="hl opt">&gt;</span> <span class="hl num">1</span> <span class="hl kwa">loop</span>
         Bytes <span class="hl opt">:=</span> <span class="hl kwb">Positive</span><span class="hl kwd">'Min</span> <span class="hl opt">(</span>Line_Length<span class="hl opt">,</span> Nn<span class="hl opt">);</span>

         Streamed_Line_IO<span class="hl opt">.</span>Put <span class="hl opt">(</span>Buffer<span class="hl opt">(</span>pos <span class="hl opt">..</span> pos<span class="hl opt">+</span>bytes<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">));</span> New_Line<span class="hl opt">;</span>

         pos <span class="hl opt">:=</span> pos <span class="hl opt">+</span> bytes<span class="hl opt">;</span>
         <span class="hl kwa">if</span> pos <span class="hl opt">&gt;</span> ALU_Length <span class="hl kwa">then</span>
            pos <span class="hl opt">:=</span> pos <span class="hl opt">-</span> ALU_Length<span class="hl opt">;</span>
         <span class="hl kwa">end if</span><span class="hl opt">;</span>
         nn <span class="hl opt">:=</span> nn <span class="hl opt">-</span> bytes<span class="hl opt">;</span>
      <span class="hl kwa">end loop</span><span class="hl opt">;</span>
   <span class="hl kwa">end</span> Repeat<span class="hl opt">;</span>


   <span class="hl kwa">procedure</span> Randomize
     <span class="hl opt">(</span>Genes <span class="hl opt">:</span> <span class="hl kwa">in</span> Aminoacid_Set<span class="hl opt">;</span>
      Title <span class="hl opt">:</span> <span class="hl kwa">in</span> <span class="hl kwb">String</span><span class="hl opt">;</span>
      N     <span class="hl opt">:</span> <span class="hl kwa">in</span> <span class="hl kwb">Integer</span><span class="hl opt">)</span>
   <span class="hl kwa">is</span>
      Line_Buffer <span class="hl opt">:</span> <span class="hl kwb">String</span> <span class="hl opt">(</span><span class="hl num">1</span> <span class="hl opt">..</span> Line_Length <span class="hl opt">+</span> End_of_Line<span class="hl kwd">'Length</span><span class="hl opt">);</span>
      Gene_Lookup <span class="hl opt">:</span> Lookup_Table<span class="hl opt">;</span>
      Cumulative_Prob <span class="hl opt">:</span> <span class="hl kwa">array</span> <span class="hl opt">(</span>Gene_id_Type <span class="hl kwa">range</span> <span class="hl num">0</span><span class="hl opt">.</span><span class="hl num">.15</span><span class="hl opt">)</span> <span class="hl kwa">of</span> Real<span class="hl opt">;</span>
      j <span class="hl opt">:</span> <span class="hl kwb">Positive</span><span class="hl opt">;</span>
      u <span class="hl opt">:</span> Gene_id_Type<span class="hl opt">;</span>
      r <span class="hl opt">:</span> Real<span class="hl opt">;</span>
      Local_State <span class="hl opt">:</span> Random_State<span class="hl opt">;</span>

      <span class="hl kwa">procedure</span> Init_Lookup_Table <span class="hl opt">(</span>Genes <span class="hl opt">:</span> <span class="hl kwa">in</span> Aminoacid_Set<span class="hl opt">)</span> <span class="hl kwa">is</span>
         Sum_of_Ps <span class="hl opt">:</span> Real <span class="hl opt">:=</span> <span class="hl num">0.0</span><span class="hl opt">;</span>
      <span class="hl kwa">begin</span>
         <span class="hl kwa">for</span> i <span class="hl kwa">in</span> Genes<span class="hl kwd">'Range</span> <span class="hl kwa">loop</span>
            Sum_of_Ps <span class="hl opt">:=</span> Sum_of_Ps <span class="hl opt">+</span> Genes<span class="hl opt">(</span>i<span class="hl opt">).</span>p<span class="hl opt">;</span>
            Cumulative_Prob <span class="hl opt">(</span>i<span class="hl opt">) :=</span> Sum_of_Ps <span class="hl opt">*</span> Lookup_Scale<span class="hl opt">;</span>
         <span class="hl kwa">end loop</span><span class="hl opt">;</span>

         Cumulative_Prob<span class="hl opt">(</span>Genes<span class="hl kwd">'Last</span><span class="hl opt">) :=</span> Lookup_Scale<span class="hl opt">;</span>

         <span class="hl kwa">declare</span>
            g <span class="hl opt">:</span> Gene_id_Type <span class="hl opt">:=</span> Genes<span class="hl kwd">'First</span><span class="hl opt">;</span>
            Threshold <span class="hl opt">:</span> Real <span class="hl opt">:=</span> Real<span class="hl opt">(</span>Gene_Lookup<span class="hl kwd">'First</span><span class="hl opt">) -</span> <span class="hl num">1.0</span><span class="hl opt">;</span>
         <span class="hl kwa">begin</span>
            <span class="hl kwa">for</span> i <span class="hl kwa">in</span> Gene_Lookup<span class="hl kwd">'Range</span> <span class="hl kwa">loop</span>
               <span class="hl kwa">while</span> Cumulative_Prob<span class="hl opt">(</span>g<span class="hl opt">) &lt;</span> Threshold <span class="hl kwa">loop</span>
                  g <span class="hl opt">:=</span> g <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span>
               <span class="hl kwa">end loop</span><span class="hl opt">;</span>
               Threshold <span class="hl opt">:=</span> Threshold <span class="hl opt">+</span> <span class="hl num">1.0</span><span class="hl opt">;</span>
               Gene_Lookup<span class="hl opt">(</span>i<span class="hl opt">) :=</span> g<span class="hl opt">;</span>
            <span class="hl kwa">end loop</span><span class="hl opt">;</span>
         <span class="hl kwa">end</span><span class="hl opt">;</span>
      <span class="hl kwa">end</span> Init_Lookup_Table<span class="hl opt">;</span>

      <span class="hl kwa">subtype</span> Line_End_Positions <span class="hl kwa">is</span> <span class="hl kwb">Positive</span>
        <span class="hl kwa">range</span> Line_Buffer<span class="hl kwd">'Last</span> <span class="hl opt">-</span> End_of_Line<span class="hl kwd">'Length</span> <span class="hl opt">+</span> <span class="hl num">1</span> <span class="hl opt">..</span> Line_Buffer<span class="hl kwd">'Last</span><span class="hl opt">;</span>
   <span class="hl kwa">begin</span>
      Streamed_Line_IO<span class="hl opt">.</span>Put <span class="hl opt">(</span>Title<span class="hl opt">);</span> New_Line<span class="hl opt">;</span>

      Init_Lookup_Table <span class="hl opt">(</span>Genes<span class="hl opt">);</span>

      Line_Buffer<span class="hl opt">(</span>Line_End_Positions<span class="hl opt">) :=</span> End_of_Line<span class="hl opt">;</span>

      Local_State <span class="hl opt">:=</span> State<span class="hl opt">;</span>
      j <span class="hl opt">:=</span> <span class="hl num">1</span><span class="hl opt">;</span>
      <span class="hl kwa">for</span> i <span class="hl kwa">in</span> <span class="hl num">1</span> <span class="hl opt">..</span> N <span class="hl kwa">loop</span>
         Gen_Random<span class="hl opt">(</span>r<span class="hl opt">,</span> Local_State<span class="hl opt">);</span>
         u <span class="hl opt">:=</span> Gene_Lookup<span class="hl opt">(</span>Gene_id_Type<span class="hl opt">(</span>Real<span class="hl kwd">'Truncation</span><span class="hl opt">(</span>r<span class="hl opt">)));</span>
         <span class="hl kwa">while</span> Cumulative_Prob<span class="hl opt">(</span>u<span class="hl opt">) &lt;</span> r <span class="hl kwa">loop</span>
            u <span class="hl opt">:=</span> u <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span>
         <span class="hl kwa">end loop</span><span class="hl opt">;</span>

         Line_Buffer<span class="hl opt">(</span>j<span class="hl opt">) :=</span> Genes<span class="hl opt">(</span>u<span class="hl opt">).</span>C<span class="hl opt">;</span>

         <span class="hl kwa">if</span> j <span class="hl opt">=</span> Line_Length <span class="hl kwa">then</span>
            Streamed_Line_IO<span class="hl opt">.</span>Put <span class="hl opt">(</span>Line_Buffer<span class="hl opt">);</span>
            j <span class="hl opt">:=</span> <span class="hl num">1</span><span class="hl opt">;</span>
         <span class="hl kwa">else</span>
            j <span class="hl opt">:=</span> j <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span>
         <span class="hl kwa">end if</span><span class="hl opt">;</span>
      <span class="hl kwa">end loop</span><span class="hl opt">;</span>
      <span class="hl kwa">if</span> j <span class="hl opt">&gt;</span> <span class="hl num">1</span> <span class="hl kwa">then</span>
         Streamed_Line_IO<span class="hl opt">.</span>Put <span class="hl opt">(</span>Line_Buffer<span class="hl opt">(</span><span class="hl num">1</span> <span class="hl opt">..</span> j<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">) &amp;</span> End_of_Line<span class="hl opt">);</span>
      <span class="hl kwa">end if</span><span class="hl opt">;</span>

      State <span class="hl opt">:=</span> Local_State<span class="hl opt">;</span>
   <span class="hl kwa">end</span> Randomize<span class="hl opt">;</span>

   N <span class="hl opt">:</span> <span class="hl kwa">constant</span> <span class="hl kwb">Positive</span> <span class="hl opt">:=</span> <span class="hl kwb">Positive</span><span class="hl kwd">'Value</span> <span class="hl opt">(</span>Argument <span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">));</span>

<span class="hl kwa">begin</span>

  Repeat <span class="hl opt">(</span><span class="hl str">&quot;&gt;ONE Homo sapiens alu&quot;</span><span class="hl opt">,</span> N<span class="hl opt">*</span><span class="hl num">2</span><span class="hl opt">);</span>
  Randomize <span class="hl opt">(</span>Genes<span class="hl opt">,</span> <span class="hl str">&quot;&gt;TWO IUB ambiguity codes&quot;</span><span class="hl opt">,</span> N<span class="hl opt">*</span><span class="hl num">3</span><span class="hl opt">);</span>
  Randomize <span class="hl opt">(</span>Homo_Sapiens<span class="hl opt">,</span> <span class="hl str">&quot;&gt;THREE Homo sapiens frequency&quot;</span><span class="hl opt">,</span> N<span class="hl opt">*</span><span class="hl num">5</span><span class="hl opt">);</span>

  Streamed_Line_IO<span class="hl opt">.</span>Close<span class="hl opt">;</span>

<span class="hl kwa">end</span> FastaRedux<span class="hl opt">;</span>

