<span class="hl com">(* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com">   contributed by Otto Bommer</span>
<span class="hl com">*)</span>

<span class="hl kwa">open</span> <span class="hl kwd">Printf</span>

<span class="hl kwa">let rec</span> range i j <span class="hl opt">=</span> 
  <span class="hl kwa">if</span> i<span class="hl opt">&lt;</span>j <span class="hl kwa">then</span> i<span class="hl opt">::(</span>range <span class="hl opt">(</span>i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)</span> j<span class="hl opt">)</span> 
  <span class="hl kwa">else if</span> i<span class="hl opt">=</span>j <span class="hl kwa">then</span> <span class="hl opt">[</span>i<span class="hl opt">]</span> <span class="hl kwa">else</span> i<span class="hl opt">::(</span>range <span class="hl opt">(</span>i<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">)</span> j<span class="hl opt">)</span>
 
<span class="hl kwa">module</span> <span class="hl kwd">Board</span> <span class="hl opt">=</span> <span class="hl kwa">struct</span>
<span class="hl kwa">let</span> rows <span class="hl opt">=</span> <span class="hl num">10</span>
<span class="hl kwa">let</span> cols <span class="hl opt">=</span> <span class="hl num">5</span>
<span class="hl kwa">let</span> size <span class="hl opt">=</span> rows<span class="hl opt">*</span>cols
<span class="hl kwa">let</span> empty <span class="hl opt">=</span> <span class="hl kwc">Char</span><span class="hl opt">.</span>chr<span class="hl opt">(</span><span class="hl num">0xe</span><span class="hl opt">)</span>
<span class="hl kwa">let</span> filled <span class="hl opt">=</span> <span class="hl kwc">Char</span><span class="hl opt">.</span>chr<span class="hl opt">(</span><span class="hl num">0xf</span><span class="hl opt">)</span>

<span class="hl kwa">let</span> create <span class="hl opt">() =</span> <span class="hl kwa">let</span> s <span class="hl opt">=</span> <span class="hl kwc">String</span><span class="hl opt">.</span>create size <span class="hl kwa">in</span> <span class="hl kwc">String</span><span class="hl opt">.</span>fill s <span class="hl num">0</span> size empty<span class="hl opt">;</span> s
<span class="hl kwa">let</span> copy b <span class="hl opt">=</span> <span class="hl kwc">String</span><span class="hl opt">.</span>copy b
<span class="hl kwa">let</span> get b n <span class="hl opt">=</span> b<span class="hl opt">.[</span>n<span class="hl opt">]</span>
<span class="hl kwa">let</span> set b n v <span class="hl opt">=</span> b<span class="hl opt">.[</span>n<span class="hl opt">] &lt;-</span> v

<span class="hl kwa">let</span> cset dst cells v <span class="hl opt">=</span> <span class="hl kwa">for</span> i <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> <span class="hl num">4</span> <span class="hl kwa">do</span> set dst <span class="hl opt">(</span><span class="hl kwc">Array</span><span class="hl opt">.</span>get cells i<span class="hl opt">)</span> v <span class="hl kwa">done</span>
<span class="hl kwa">let</span> cdel dst cells <span class="hl opt">=</span> <span class="hl kwa">for</span> i <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> <span class="hl num">4</span> <span class="hl kwa">do</span> set dst <span class="hl opt">(</span><span class="hl kwc">Array</span><span class="hl opt">.</span>get cells i<span class="hl opt">)</span> empty <span class="hl kwa">done</span>

<span class="hl kwa">let</span> compare s1 s2 <span class="hl opt">=</span> <span class="hl kwc">String</span><span class="hl opt">.</span>compare s1 s2

<span class="hl kwa">let</span> find_empty b <span class="hl opt">=</span> <span class="hl kwa">try</span> <span class="hl kwc">String</span><span class="hl opt">.</span>index b empty <span class="hl kwa">with</span> _ <span class="hl opt">-&gt;</span> size<span class="hl opt">-</span><span class="hl num">1</span>
<span class="hl kwa">let</span> rotate a steps <span class="hl opt">= (</span>a<span class="hl opt">+</span><span class="hl num">60</span><span class="hl opt">*</span>steps<span class="hl opt">)</span> <span class="hl kwa">mod</span> <span class="hl num">360</span>
<span class="hl kwa">let</span> flip a <span class="hl opt">= (</span><span class="hl num">540</span><span class="hl opt">-</span>a<span class="hl opt">)</span> <span class="hl kwa">mod</span> <span class="hl num">360</span> 

<span class="hl kwa">let</span> print b <span class="hl opt">=</span>  <span class="hl kwc">List</span><span class="hl opt">.</span>iter <span class="hl opt">(</span><span class="hl kwa">fun</span> i <span class="hl opt">-&gt;</span> 
    printf <span class="hl str">&quot;%x &quot;</span> <span class="hl opt">(</span><span class="hl kwc">Char</span><span class="hl opt">.</span>code <span class="hl opt">(</span>get b i<span class="hl opt">));</span> 
    <span class="hl kwa">if</span> <span class="hl opt">(</span>i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)</span> <span class="hl kwa">mod</span> cols<span class="hl opt">==</span><span class="hl num">0</span> <span class="hl kwa">then</span> printf <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">;</span> 
    <span class="hl kwa">if</span> <span class="hl opt">(</span>i<span class="hl opt">+</span>cols<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">)</span> <span class="hl kwa">mod</span> <span class="hl opt">(</span>cols<span class="hl opt">*</span><span class="hl num">2</span><span class="hl opt">)==</span><span class="hl num">0</span> <span class="hl kwa">then</span> printf <span class="hl str">&quot; &quot;</span>
  <span class="hl opt">) (</span>range <span class="hl num">0</span> <span class="hl opt">(</span>size<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">));</span> 
  printf <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span>

<span class="hl kwa">let</span> invert b <span class="hl opt">=</span>
  <span class="hl kwa">let</span> bflip <span class="hl opt">=</span> <span class="hl kwc">String</span><span class="hl opt">.</span>create size <span class="hl kwa">in</span>
  <span class="hl kwa">for</span> i <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> <span class="hl opt">(</span>size<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">)</span> <span class="hl kwa">do</span> set bflip <span class="hl opt">(</span>size<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">-</span>i<span class="hl opt">) (</span>get b i<span class="hl opt">)</span> <span class="hl kwa">done</span><span class="hl opt">;</span>
  bflip

<span class="hl kwa">let</span> dont_intersect b1 c <span class="hl opt">=</span>
  <span class="hl kwa">if</span> get b1 <span class="hl opt">(</span><span class="hl kwc">Array</span><span class="hl opt">.</span>get c <span class="hl num">0</span><span class="hl opt">) !=</span> empty <span class="hl kwa">then false</span>
  <span class="hl kwa">else if</span> get b1 <span class="hl opt">(</span><span class="hl kwc">Array</span><span class="hl opt">.</span>get c <span class="hl num">1</span><span class="hl opt">) !=</span> empty <span class="hl kwa">then false</span>
  <span class="hl kwa">else if</span> get b1 <span class="hl opt">(</span><span class="hl kwc">Array</span><span class="hl opt">.</span>get c <span class="hl num">2</span><span class="hl opt">) !=</span> empty <span class="hl kwa">then false</span>
  <span class="hl kwa">else if</span> get b1 <span class="hl opt">(</span><span class="hl kwc">Array</span><span class="hl opt">.</span>get c <span class="hl num">3</span><span class="hl opt">) !=</span> empty <span class="hl kwa">then false</span>
  <span class="hl kwa">else if</span> get b1 <span class="hl opt">(</span><span class="hl kwc">Array</span><span class="hl opt">.</span>get c <span class="hl num">4</span><span class="hl opt">) !=</span> empty <span class="hl kwa">then false</span>
  <span class="hl kwa">else true</span>

<span class="hl kwa">let</span> shift idx a <span class="hl opt">=</span>
   <span class="hl kwa">match</span> a <span class="hl kwa">with</span>
    |   <span class="hl num">0</span> <span class="hl opt">-&gt;</span>  idx<span class="hl opt">-</span>cols<span class="hl opt">*</span><span class="hl num">2</span>
    |  <span class="hl num">30</span> <span class="hl opt">-&gt;</span>  idx<span class="hl opt">-</span>cols<span class="hl opt">+(</span>idx<span class="hl opt">/</span>cols<span class="hl opt">)</span> <span class="hl kwa">mod</span> <span class="hl num">2</span>
    |  <span class="hl num">60</span> <span class="hl opt">-&gt;</span>  idx<span class="hl opt">-</span>cols<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">+(</span>idx<span class="hl opt">/</span>cols<span class="hl opt">)</span> <span class="hl kwa">mod</span> <span class="hl num">2</span>
    |  <span class="hl num">90</span> <span class="hl opt">-&gt;</span>  idx<span class="hl opt">+</span><span class="hl num">1</span>
    | <span class="hl num">120</span> <span class="hl opt">-&gt;</span>  idx<span class="hl opt">+</span>cols<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">+(</span>idx<span class="hl opt">/</span>cols<span class="hl opt">)</span> <span class="hl kwa">mod</span> <span class="hl num">2</span> 
    | <span class="hl num">150</span> <span class="hl opt">-&gt;</span>  idx<span class="hl opt">+</span>cols<span class="hl opt">+(</span>idx<span class="hl opt">/</span>cols<span class="hl opt">)</span> <span class="hl kwa">mod</span> <span class="hl num">2</span>
    | <span class="hl num">180</span> <span class="hl opt">-&gt;</span>  idx<span class="hl opt">+</span>cols<span class="hl opt">*</span><span class="hl num">2</span>
    | <span class="hl num">210</span> <span class="hl opt">-&gt;</span>  idx<span class="hl opt">+</span>cols<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">+(</span>idx<span class="hl opt">/</span>cols<span class="hl opt">)</span> <span class="hl kwa">mod</span> <span class="hl num">2</span>
    | <span class="hl num">240</span> <span class="hl opt">-&gt;</span>  idx<span class="hl opt">+</span>cols<span class="hl opt">-</span><span class="hl num">2</span><span class="hl opt">+(</span>idx<span class="hl opt">/</span>cols<span class="hl opt">)</span> <span class="hl kwa">mod</span> <span class="hl num">2</span>
    | <span class="hl num">270</span> <span class="hl opt">-&gt;</span>  idx<span class="hl opt">-</span><span class="hl num">1</span>
    | <span class="hl num">300</span> <span class="hl opt">-&gt;</span>  idx<span class="hl opt">-</span>cols<span class="hl opt">-</span><span class="hl num">2</span><span class="hl opt">+(</span>idx<span class="hl opt">/</span>cols<span class="hl opt">)</span> <span class="hl kwa">mod</span> <span class="hl num">2</span>
    | <span class="hl num">330</span> <span class="hl opt">-&gt;</span>  idx<span class="hl opt">-</span>cols<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">+(</span>idx<span class="hl opt">/</span>cols<span class="hl opt">)</span> <span class="hl kwa">mod</span> <span class="hl num">2</span>
    |   _ <span class="hl opt">-&gt;</span>  idx

<span class="hl kwa">let</span> inside idx a <span class="hl opt">=</span>
  <span class="hl kwa">if</span> idx <span class="hl opt">&gt;=</span> <span class="hl num">0</span> <span class="hl opt">&amp;&amp;</span> idx <span class="hl opt">&lt;</span> size <span class="hl kwa">then</span>
  <span class="hl kwa">match</span> a <span class="hl kwa">with</span>
    |   <span class="hl num">0</span> <span class="hl opt">-&gt;</span>  idx <span class="hl opt">&gt;=</span> cols<span class="hl opt">*</span><span class="hl num">2</span>
    |  <span class="hl num">30</span> <span class="hl opt">-&gt;</span>  idx <span class="hl kwa">mod</span> <span class="hl opt">(</span>cols<span class="hl opt">*</span><span class="hl num">2</span><span class="hl opt">) != (</span>cols<span class="hl opt">*</span><span class="hl num">2</span><span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">) &amp;&amp;</span> idx <span class="hl opt">&gt;=</span> cols
    |  <span class="hl num">60</span> <span class="hl opt">-&gt;</span>  <span class="hl kwa">let</span> i <span class="hl opt">=</span> idx <span class="hl kwa">mod</span> <span class="hl opt">(</span>cols<span class="hl opt">*</span><span class="hl num">2</span><span class="hl opt">)</span> <span class="hl kwa">in</span> 
              i<span class="hl opt">!=(</span>cols<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">) &amp;&amp;</span> i<span class="hl opt">!=(</span>cols<span class="hl opt">*</span><span class="hl num">2</span><span class="hl opt">-</span><span class="hl num">2</span><span class="hl opt">) &amp;&amp;</span> i<span class="hl opt">!=(</span>cols<span class="hl opt">*</span><span class="hl num">2</span><span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">) &amp;&amp;</span> idx<span class="hl opt">&gt;=</span>cols
    |  <span class="hl num">90</span> <span class="hl opt">-&gt;</span>  idx <span class="hl kwa">mod</span> cols <span class="hl opt">!= (</span>cols<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">)</span>
    | <span class="hl num">120</span> <span class="hl opt">-&gt;</span>  <span class="hl kwa">let</span> i <span class="hl opt">=</span> idx <span class="hl kwa">mod</span> <span class="hl opt">(</span>cols<span class="hl opt">*</span><span class="hl num">2</span><span class="hl opt">)</span> <span class="hl kwa">in</span> 
              i<span class="hl opt">!=(</span>cols<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">) &amp;&amp;</span> i<span class="hl opt">!=(</span>cols<span class="hl opt">*</span><span class="hl num">2</span><span class="hl opt">-</span><span class="hl num">2</span><span class="hl opt">) &amp;&amp;</span> i<span class="hl opt">!=(</span>cols<span class="hl opt">*</span><span class="hl num">2</span><span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">) &amp;&amp;</span> idx<span class="hl opt">&lt;(</span>size<span class="hl opt">-</span>cols<span class="hl opt">)</span>
    | <span class="hl num">150</span> <span class="hl opt">-&gt;</span>  idx <span class="hl kwa">mod</span> <span class="hl opt">(</span>cols<span class="hl opt">*</span><span class="hl num">2</span><span class="hl opt">) != (</span>cols<span class="hl opt">*</span><span class="hl num">2</span><span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">) &amp;&amp;</span> idx<span class="hl opt">&lt;(</span>size<span class="hl opt">-</span>cols<span class="hl opt">)</span>
    | <span class="hl num">180</span> <span class="hl opt">-&gt;</span>  idx <span class="hl opt">&lt;</span> size<span class="hl opt">-</span><span class="hl num">2</span><span class="hl opt">*</span>cols
    | <span class="hl num">210</span> <span class="hl opt">-&gt;</span>  idx <span class="hl kwa">mod</span> <span class="hl opt">(</span>cols<span class="hl opt">*</span><span class="hl num">2</span><span class="hl opt">) !=</span> <span class="hl num">0</span> <span class="hl opt">&amp;&amp;</span> idx <span class="hl opt">&lt; (</span>size<span class="hl opt">-</span>cols<span class="hl opt">)</span>
    | <span class="hl num">240</span> <span class="hl opt">-&gt;</span>  <span class="hl kwa">let</span> i <span class="hl opt">=</span> idx <span class="hl kwa">mod</span> <span class="hl opt">(</span>cols<span class="hl opt">*</span><span class="hl num">2</span><span class="hl opt">)</span> <span class="hl kwa">in</span> 
              i<span class="hl opt">!=</span><span class="hl num">0</span> <span class="hl opt">&amp;&amp;</span> i<span class="hl opt">!=</span><span class="hl num">1</span> <span class="hl opt">&amp;&amp;</span> i<span class="hl opt">!=</span>cols <span class="hl opt">&amp;&amp;</span> idx <span class="hl opt">&lt; (</span>size<span class="hl opt">-</span>cols<span class="hl opt">)</span>
    | <span class="hl num">270</span> <span class="hl opt">-&gt;</span>  idx <span class="hl kwa">mod</span> <span class="hl num">5</span> <span class="hl opt">!=</span> <span class="hl num">0</span>
    | <span class="hl num">300</span> <span class="hl opt">-&gt;</span>  <span class="hl kwa">let</span> i <span class="hl opt">=</span> idx <span class="hl kwa">mod</span> <span class="hl opt">(</span>cols<span class="hl opt">*</span><span class="hl num">2</span><span class="hl opt">)</span> <span class="hl kwa">in</span> i<span class="hl opt">!=</span><span class="hl num">0</span> <span class="hl opt">&amp;&amp;</span> i<span class="hl opt">!=</span><span class="hl num">1</span> <span class="hl opt">&amp;&amp;</span> i<span class="hl opt">!=</span>cols <span class="hl opt">&amp;&amp;</span> idx <span class="hl opt">&gt;=</span> cols
    | <span class="hl num">330</span> <span class="hl opt">-&gt;</span>  idx <span class="hl kwa">mod</span> <span class="hl opt">(</span>cols<span class="hl opt">*</span><span class="hl num">2</span><span class="hl opt">) !=</span> <span class="hl num">0</span> <span class="hl opt">&amp;&amp;</span> idx <span class="hl opt">&gt;=</span> cols
    |   _ <span class="hl opt">-&gt;</span>  <span class="hl kwa">false</span>
  <span class="hl kwa">else false</span>

<span class="hl kwa">let</span> cell_peers <span class="hl opt">=</span> <span class="hl kwc">List</span><span class="hl opt">.</span>map <span class="hl opt">(</span><span class="hl kwa">fun</span> idx <span class="hl opt">-&gt;</span> <span class="hl kwa">let</span> peers <span class="hl opt">=</span> <span class="hl kwb">ref</span> <span class="hl opt">[]</span> <span class="hl kwa">in</span>
  <span class="hl kwc">List</span><span class="hl opt">.</span>iter <span class="hl opt">(</span><span class="hl kwa">fun</span> a <span class="hl opt">-&gt;</span> <span class="hl kwa">if</span> inside idx a <span class="hl kwa">then</span> peers<span class="hl opt">:=!</span>peers &#64; <span class="hl opt">[(</span>shift idx a<span class="hl opt">)])</span> 
  <span class="hl opt">[</span><span class="hl num">30</span><span class="hl opt">;</span> <span class="hl num">90</span><span class="hl opt">;</span> <span class="hl num">150</span><span class="hl opt">;</span> <span class="hl num">210</span><span class="hl opt">;</span> <span class="hl num">270</span><span class="hl opt">;</span> <span class="hl num">330</span><span class="hl opt">]; !</span>peers<span class="hl opt">) (</span>range <span class="hl num">0</span> <span class="hl opt">(</span>size<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">))</span>

<span class="hl kwa">let rec</span> fill_island b idx <span class="hl opt">=</span>
  <span class="hl kwa">let</span> n <span class="hl opt">=</span> <span class="hl kwb">ref</span> <span class="hl num">0</span> <span class="hl kwa">in</span>
  <span class="hl kwa">if</span> <span class="hl opt">(</span>get b idx<span class="hl opt">) ==</span> empty <span class="hl kwa">then begin</span> set b idx filled<span class="hl opt">;</span> n<span class="hl opt">:=!</span>n<span class="hl opt">+</span><span class="hl num">1</span> <span class="hl kwa">end</span><span class="hl opt">;</span>
  <span class="hl kwa">let</span> peers <span class="hl opt">=</span> <span class="hl kwc">List</span><span class="hl opt">.</span>nth cell_peers idx <span class="hl kwa">in</span> <span class="hl kwc">List</span><span class="hl opt">.</span>iter <span class="hl opt">(</span><span class="hl kwa">fun</span> i <span class="hl opt">-&gt;</span> 
    <span class="hl kwa">if</span> <span class="hl opt">(</span>get b i<span class="hl opt">) ==</span> empty <span class="hl kwa">then begin</span> set b i filled<span class="hl opt">;</span> n<span class="hl opt">:=!</span>n<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">+</span>fill_island b i <span class="hl kwa">end</span>
  <span class="hl opt">)</span> peers<span class="hl opt">; !</span>n

<span class="hl kwa">let</span> is_fillable b pn <span class="hl opt">=</span>
  <span class="hl kwa">let</span> i <span class="hl opt">=</span> find_empty b <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> tmp <span class="hl opt">=</span> copy b <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> s <span class="hl opt">=</span> fill_island tmp i <span class="hl kwa">in</span>
  s <span class="hl kwa">mod</span> <span class="hl num">5</span> <span class="hl opt">==</span> <span class="hl num">0</span>
<span class="hl kwa">end</span>

<span class="hl kwa">module</span> <span class="hl kwd">Piece</span> <span class="hl opt">=</span> <span class="hl kwa">struct</span>
<span class="hl kwa">let</span> defs <span class="hl opt">= [</span>
   <span class="hl opt">[</span>| <span class="hl num">90</span><span class="hl opt">;</span>  <span class="hl num">90</span><span class="hl opt">;</span>  <span class="hl num">90</span><span class="hl opt">;</span> <span class="hl num">150</span>|<span class="hl opt">];</span>
   <span class="hl opt">[</span>|<span class="hl num">150</span><span class="hl opt">;</span>  <span class="hl num">90</span><span class="hl opt">;</span>  <span class="hl num">30</span><span class="hl opt">;</span>  <span class="hl num">90</span>|<span class="hl opt">];</span>
   <span class="hl opt">[</span>| <span class="hl num">90</span><span class="hl opt">;</span>  <span class="hl num">90</span><span class="hl opt">;</span> <span class="hl num">150</span><span class="hl opt">;</span> <span class="hl num">210</span>|<span class="hl opt">];</span>
   <span class="hl opt">[</span>| <span class="hl num">90</span><span class="hl opt">;</span>  <span class="hl num">90</span><span class="hl opt">;</span> <span class="hl num">210</span><span class="hl opt">;</span> <span class="hl num">150</span>|<span class="hl opt">];</span>
   <span class="hl opt">[</span>|<span class="hl num">150</span><span class="hl opt">;</span>  <span class="hl num">90</span><span class="hl opt">;</span>  <span class="hl num">30</span><span class="hl opt">;</span> <span class="hl num">180</span>|<span class="hl opt">];</span>
   <span class="hl opt">[</span>| <span class="hl num">90</span><span class="hl opt">;</span>  <span class="hl num">90</span><span class="hl opt">;</span> <span class="hl num">210</span><span class="hl opt">;</span>  <span class="hl num">90</span>|<span class="hl opt">];</span>
   <span class="hl opt">[</span>| <span class="hl num">90</span><span class="hl opt">;</span> <span class="hl num">150</span><span class="hl opt">;</span> <span class="hl num">150</span><span class="hl opt">;</span>  <span class="hl num">30</span>|<span class="hl opt">];</span>
   <span class="hl opt">[</span>| <span class="hl num">90</span><span class="hl opt">;</span> <span class="hl num">150</span><span class="hl opt">;</span> <span class="hl num">150</span><span class="hl opt">;</span> <span class="hl num">270</span>|<span class="hl opt">];</span>
   <span class="hl opt">[</span>| <span class="hl num">90</span><span class="hl opt">;</span> <span class="hl num">150</span><span class="hl opt">;</span>  <span class="hl num">90</span><span class="hl opt">;</span>  <span class="hl num">90</span>|<span class="hl opt">];</span>
   <span class="hl opt">[</span>| <span class="hl num">90</span><span class="hl opt">;</span>  <span class="hl num">90</span><span class="hl opt">;</span>  <span class="hl num">90</span><span class="hl opt">;</span> <span class="hl num">210</span>|<span class="hl opt">]</span>
<span class="hl opt">]</span>

<span class="hl kwa">let</span> count <span class="hl opt">=</span> <span class="hl kwc">List</span><span class="hl opt">.</span>length defs
<span class="hl kwa">let</span> rotate p steps <span class="hl opt">=</span>  <span class="hl kwc">Array</span><span class="hl opt">.</span>map <span class="hl opt">(</span><span class="hl kwa">fun</span> j <span class="hl opt">-&gt;</span>  <span class="hl kwc">Board</span><span class="hl opt">.</span>rotate j steps<span class="hl opt">)</span> p
<span class="hl kwa">let</span> flip p <span class="hl opt">=</span>  <span class="hl kwc">Array</span><span class="hl opt">.</span>map <span class="hl opt">(</span><span class="hl kwa">fun</span> i <span class="hl opt">-&gt;</span>  <span class="hl kwc">Board</span><span class="hl opt">.</span>flip i<span class="hl opt">)</span> p
<span class="hl kwa">end</span><span class="hl opt">;;</span>

<span class="hl kwa">module</span> <span class="hl kwd">Cell</span> <span class="hl opt">=</span> <span class="hl kwa">struct</span>
<span class="hl kwa">let</span> min cells <span class="hl opt">=</span>  <span class="hl kwc">Array</span><span class="hl opt">.</span>fold_left min <span class="hl kwc">Board</span><span class="hl opt">.</span>size cells

<span class="hl kwa">let</span> from_piece p idx <span class="hl opt">=</span> 
  <span class="hl kwa">let</span> a <span class="hl opt">=</span> <span class="hl kwc">Board</span><span class="hl opt">.</span>shift idx <span class="hl opt">(</span><span class="hl kwc">Array</span><span class="hl opt">.</span>get p <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> b <span class="hl opt">=</span> <span class="hl kwc">Board</span><span class="hl opt">.</span>shift a <span class="hl opt">(</span><span class="hl kwc">Array</span><span class="hl opt">.</span>get p <span class="hl num">1</span><span class="hl opt">)</span> <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> c <span class="hl opt">=</span> <span class="hl kwc">Board</span><span class="hl opt">.</span>shift b <span class="hl opt">(</span><span class="hl kwc">Array</span><span class="hl opt">.</span>get p <span class="hl num">2</span><span class="hl opt">)</span> <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> d <span class="hl opt">=</span> <span class="hl kwc">Board</span><span class="hl opt">.</span>shift c <span class="hl opt">(</span><span class="hl kwc">Array</span><span class="hl opt">.</span>get p <span class="hl num">3</span><span class="hl opt">)</span> <span class="hl kwa">in</span>
  <span class="hl opt">[</span>|idx<span class="hl opt">;</span> a<span class="hl opt">;</span> b<span class="hl opt">;</span> c<span class="hl opt">;</span> d|<span class="hl opt">]</span>

<span class="hl kwa">let</span> fits_on_board cells p <span class="hl opt">=</span>
  <span class="hl kwc">Board</span><span class="hl opt">.</span>inside <span class="hl opt">(</span><span class="hl kwc">Array</span><span class="hl opt">.</span>get cells <span class="hl num">0</span><span class="hl opt">) (</span><span class="hl kwc">Array</span><span class="hl opt">.</span>get p <span class="hl num">0</span><span class="hl opt">) &amp;&amp;</span>
  <span class="hl kwc">Board</span><span class="hl opt">.</span>inside <span class="hl opt">(</span><span class="hl kwc">Array</span><span class="hl opt">.</span>get cells <span class="hl num">1</span><span class="hl opt">) (</span><span class="hl kwc">Array</span><span class="hl opt">.</span>get p <span class="hl num">1</span><span class="hl opt">) &amp;&amp;</span>
  <span class="hl kwc">Board</span><span class="hl opt">.</span>inside <span class="hl opt">(</span><span class="hl kwc">Array</span><span class="hl opt">.</span>get cells <span class="hl num">2</span><span class="hl opt">) (</span><span class="hl kwc">Array</span><span class="hl opt">.</span>get p <span class="hl num">2</span><span class="hl opt">) &amp;&amp;</span>
  <span class="hl kwc">Board</span><span class="hl opt">.</span>inside <span class="hl opt">(</span><span class="hl kwc">Array</span><span class="hl opt">.</span>get cells <span class="hl num">3</span><span class="hl opt">) (</span><span class="hl kwc">Array</span><span class="hl opt">.</span>get p <span class="hl num">3</span><span class="hl opt">) &amp;&amp;</span>
  <span class="hl opt">(</span><span class="hl kwc">Array</span><span class="hl opt">.</span>get cells <span class="hl num">4</span><span class="hl opt">) &gt;=</span> <span class="hl num">0</span> <span class="hl opt">&amp;&amp; (</span><span class="hl kwc">Array</span><span class="hl opt">.</span>get cells <span class="hl num">4</span><span class="hl opt">) &lt;</span> <span class="hl kwc">Board</span><span class="hl opt">.</span>size

<span class="hl kwa">let</span> to_board cells pn <span class="hl opt">=</span> 
  <span class="hl kwa">let</span> b <span class="hl opt">=</span> <span class="hl kwc">Board</span><span class="hl opt">.</span>create <span class="hl opt">()</span> <span class="hl kwa">in let</span> chr <span class="hl opt">=</span> <span class="hl kwc">Char</span><span class="hl opt">.</span>chr pn <span class="hl kwa">in</span>
  <span class="hl kwc">Board</span><span class="hl opt">.</span>set b <span class="hl opt">(</span><span class="hl kwc">Array</span><span class="hl opt">.</span>get cells <span class="hl num">0</span><span class="hl opt">)</span> chr<span class="hl opt">;</span>
  <span class="hl kwc">Board</span><span class="hl opt">.</span>set b <span class="hl opt">(</span><span class="hl kwc">Array</span><span class="hl opt">.</span>get cells <span class="hl num">1</span><span class="hl opt">)</span> chr<span class="hl opt">;</span>
  <span class="hl kwc">Board</span><span class="hl opt">.</span>set b <span class="hl opt">(</span><span class="hl kwc">Array</span><span class="hl opt">.</span>get cells <span class="hl num">2</span><span class="hl opt">)</span> chr<span class="hl opt">;</span>
  <span class="hl kwc">Board</span><span class="hl opt">.</span>set b <span class="hl opt">(</span><span class="hl kwc">Array</span><span class="hl opt">.</span>get cells <span class="hl num">3</span><span class="hl opt">)</span> chr<span class="hl opt">;</span>
  <span class="hl kwc">Board</span><span class="hl opt">.</span>set b <span class="hl opt">(</span><span class="hl kwc">Array</span><span class="hl opt">.</span>get cells <span class="hl num">4</span><span class="hl opt">)</span> chr<span class="hl opt">;</span>
  b
<span class="hl kwa">end</span><span class="hl opt">;;</span>

<span class="hl kwa">let</span> permutations <span class="hl opt">=</span>
  <span class="hl kwa">let</span> permutations <span class="hl opt">=</span> <span class="hl kwc">List</span><span class="hl opt">.</span>map <span class="hl opt">(</span><span class="hl kwa">fun</span> pn <span class="hl opt">-&gt;</span> <span class="hl kwb">ref</span> <span class="hl opt">(</span><span class="hl kwc">List</span><span class="hl opt">.</span>map <span class="hl opt">(</span><span class="hl kwa">fun</span> l <span class="hl opt">-&gt;</span> <span class="hl kwb">ref</span> <span class="hl opt">[])</span> 
                       <span class="hl opt">(</span>range <span class="hl num">0</span> <span class="hl opt">(</span><span class="hl kwc">Board</span><span class="hl opt">.</span>size<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">)))) (</span>range <span class="hl num">0</span> <span class="hl opt">(</span><span class="hl kwc">Piece</span><span class="hl opt">.</span>count<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">))</span> <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> calc_piece_rotations pn idx <span class="hl opt">=</span>
    <span class="hl kwa">let</span> calc_rots piece <span class="hl opt">=</span>
      <span class="hl kwa">let</span> pieceperms <span class="hl opt">=</span> <span class="hl kwc">List</span><span class="hl opt">.</span>nth permutations pn <span class="hl kwa">in</span>
      <span class="hl kwa">for</span> i <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> <span class="hl num">5</span> <span class="hl kwa">do</span>
        <span class="hl kwa">if</span> pn <span class="hl opt">!=</span> <span class="hl num">3</span> || i <span class="hl opt">&lt;</span> <span class="hl num">3</span> <span class="hl kwa">then</span>
          <span class="hl kwa">let</span> rotp <span class="hl opt">=</span> <span class="hl kwc">Piece</span><span class="hl opt">.</span>rotate piece i <span class="hl kwa">in</span>
          <span class="hl kwa">let</span> c <span class="hl opt">=</span> <span class="hl kwc">Cell</span><span class="hl opt">.</span>from_piece rotp idx <span class="hl kwa">in</span>
          <span class="hl kwa">if</span> <span class="hl kwc">Cell</span><span class="hl opt">.</span>fits_on_board c rotp <span class="hl kwa">then</span>
            <span class="hl kwa">let</span> pboard <span class="hl opt">=</span> <span class="hl kwc">Cell</span><span class="hl opt">.</span>to_board c pn <span class="hl kwa">in</span>
            <span class="hl kwa">if</span> <span class="hl kwc">Board</span><span class="hl opt">.</span>is_fillable pboard pn <span class="hl kwa">then</span>
              <span class="hl kwa">let</span> minimum <span class="hl opt">=</span> <span class="hl kwc">Cell</span><span class="hl opt">.</span>min c <span class="hl kwa">in</span>
              <span class="hl kwa">let</span> rotperms <span class="hl opt">=</span> <span class="hl kwc">List</span><span class="hl opt">.</span>nth <span class="hl opt">!</span>pieceperms minimum <span class="hl kwa">in</span>
              rotperms <span class="hl opt">:= !</span>rotperms &#64; <span class="hl opt">[(</span>rotp<span class="hl opt">,</span> pn<span class="hl opt">,</span> c<span class="hl opt">,</span> pboard<span class="hl opt">)];</span>
      <span class="hl kwa">done</span> 
    <span class="hl kwa">in</span>
    <span class="hl kwa">let</span> p <span class="hl opt">=</span> <span class="hl kwc">List</span><span class="hl opt">.</span>nth <span class="hl kwc">Piece</span><span class="hl opt">.</span>defs pn <span class="hl kwa">in</span>
    calc_rots p<span class="hl opt">;</span>
    calc_rots <span class="hl opt">(</span><span class="hl kwc">Piece</span><span class="hl opt">.</span>flip p<span class="hl opt">);</span>
  <span class="hl kwa">in</span>
  <span class="hl kwc">List</span><span class="hl opt">.</span>iter <span class="hl opt">(</span><span class="hl kwa">fun</span> pn <span class="hl opt">-&gt;</span> <span class="hl kwc">List</span><span class="hl opt">.</span>iter <span class="hl opt">(</span><span class="hl kwa">fun</span> idx <span class="hl opt">-&gt;</span> calc_piece_rotations pn idx<span class="hl opt">)</span> 
    <span class="hl opt">(</span>range <span class="hl num">0</span> <span class="hl opt">(</span><span class="hl kwc">Board</span><span class="hl opt">.</span>size<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">))) (</span>range <span class="hl num">0</span> <span class="hl opt">(</span><span class="hl kwc">Piece</span><span class="hl opt">.</span>count<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">));</span>
  permutations

<span class="hl kwa">module</span> <span class="hl kwd">Solution</span> <span class="hl opt">=</span> <span class="hl kwa">struct</span>
<span class="hl kwa">exception</span> <span class="hl kwd">Max_solutions</span>
<span class="hl kwa">let rec</span> solve max board solutions depth usedmask <span class="hl opt">=</span> 
  <span class="hl kwa">for</span> ipn <span class="hl opt">=</span> <span class="hl num">0</span> <span class="hl kwa">to</span> <span class="hl kwc">Piece</span><span class="hl opt">.</span>count<span class="hl opt">-</span><span class="hl num">1</span> <span class="hl kwa">do</span>
    <span class="hl kwa">if</span> usedmask <span class="hl kwa">land</span> <span class="hl opt">(</span><span class="hl num">1</span> <span class="hl kwa">lsl</span> ipn<span class="hl opt">) ==</span> <span class="hl num">0</span> <span class="hl kwa">then</span> 
      <span class="hl kwa">begin</span>
      <span class="hl kwa">let</span> emptycell <span class="hl opt">=</span> <span class="hl kwc">Board</span><span class="hl opt">.</span>find_empty board <span class="hl kwa">in</span>
      <span class="hl kwa">let</span> piece_perms <span class="hl opt">= !(</span><span class="hl kwc">List</span><span class="hl opt">.</span>nth permutations ipn<span class="hl opt">)</span> <span class="hl kwa">in</span>
      <span class="hl kwa">let</span> cell_perms <span class="hl opt">= !(</span><span class="hl kwc">List</span><span class="hl opt">.</span>nth piece_perms emptycell<span class="hl opt">)</span> <span class="hl kwa">in</span>

      <span class="hl kwc">List</span><span class="hl opt">.</span>iter <span class="hl opt">(</span><span class="hl kwa">fun</span> perm <span class="hl opt">-&gt;</span>
        <span class="hl kwa">let</span> <span class="hl opt">(</span>p<span class="hl opt">,</span> pn<span class="hl opt">,</span> c<span class="hl opt">,</span> pboard<span class="hl opt">) =</span> perm <span class="hl kwa">in</span>
        <span class="hl kwa">if</span> <span class="hl kwc">Board</span><span class="hl opt">.</span>dont_intersect board c <span class="hl kwa">then</span>
          <span class="hl kwa">begin</span>
          <span class="hl kwc">Board</span><span class="hl opt">.</span>cset board c <span class="hl opt">(</span><span class="hl kwc">Char</span><span class="hl opt">.</span>chr pn<span class="hl opt">);</span> 

          <span class="hl kwa">if</span> depth <span class="hl opt">==</span> <span class="hl num">9</span> <span class="hl kwa">then</span> 
            <span class="hl kwa">begin</span>
            solutions <span class="hl opt">:= !</span>solutions &#64; <span class="hl opt">[</span><span class="hl kwc">Board</span><span class="hl opt">.</span>copy board<span class="hl opt">]</span> &#64; <span class="hl opt">[</span><span class="hl kwc">Board</span><span class="hl opt">.</span>invert board<span class="hl opt">];</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwc">List</span><span class="hl opt">.</span>length <span class="hl opt">!</span>solutions<span class="hl opt">) &gt;=</span> max <span class="hl kwa">then</span> raise <span class="hl kwd">Max_solutions</span>
            <span class="hl kwa">end</span>
          <span class="hl kwa">else</span>
              solve max board solutions <span class="hl opt">(</span>depth<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">) (</span>usedmask <span class="hl kwa">lor</span> <span class="hl opt">(</span><span class="hl num">1</span> <span class="hl kwa">lsl</span> pn<span class="hl opt">));</span>

          <span class="hl kwc">Board</span><span class="hl opt">.</span>cdel board c
          <span class="hl kwa">end</span> 
        <span class="hl opt">)</span> cell_perms
      <span class="hl kwa">end</span><span class="hl opt">;</span>
  <span class="hl kwa">done</span><span class="hl opt">;</span>
  <span class="hl kwa">if</span> depth <span class="hl opt">==</span> <span class="hl num">0</span> <span class="hl kwa">then</span> raise <span class="hl kwd">Max_solutions</span>

<span class="hl kwa">end</span>
<span class="hl kwa">let</span> _ <span class="hl opt">=</span> 
  <span class="hl kwa">let</span> max <span class="hl opt">=</span> <span class="hl kwa">try</span> int_of_string <span class="hl opt">(</span><span class="hl kwc">Sys</span><span class="hl opt">.</span>argv<span class="hl opt">.(</span><span class="hl num">1</span><span class="hl opt">))</span> <span class="hl kwa">with</span> _ <span class="hl opt">-&gt;</span> <span class="hl num">2100</span> <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> solutions <span class="hl opt">=</span> <span class="hl kwb">ref</span> <span class="hl opt">[]</span> <span class="hl kwa">in</span>
  <span class="hl kwa">let</span> board <span class="hl opt">=</span> <span class="hl kwc">Board</span><span class="hl opt">.</span>create <span class="hl opt">()</span> <span class="hl kwa">in</span>
  <span class="hl kwa">try</span> <span class="hl kwc">Solution</span><span class="hl opt">.</span>solve max board solutions <span class="hl num">0 0</span> <span class="hl kwa">with</span> _ <span class="hl opt">-&gt; ();</span>
  <span class="hl kwa">let</span> sorted_solutions <span class="hl opt">=</span> <span class="hl kwc">List</span><span class="hl opt">.</span>sort <span class="hl kwc">Board</span><span class="hl opt">.</span>compare <span class="hl opt">!</span>solutions <span class="hl kwa">in</span>
  printf <span class="hl str">&quot;%d solutions found</span><span class="hl esc">\n\n</span><span class="hl str">&quot;</span> <span class="hl opt">(</span><span class="hl kwc">List</span><span class="hl opt">.</span>length sorted_solutions<span class="hl opt">);</span> 

  <span class="hl kwa">if</span> <span class="hl kwc">List</span><span class="hl opt">.</span>length sorted_solutions <span class="hl opt">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">then</span>
    <span class="hl kwa">begin</span>
    <span class="hl kwc">Board</span><span class="hl opt">.</span>print <span class="hl opt">(</span><span class="hl kwc">List</span><span class="hl opt">.</span>nth sorted_solutions <span class="hl num">0</span><span class="hl opt">);</span>
    <span class="hl kwc">Board</span><span class="hl opt">.</span>print <span class="hl opt">(</span><span class="hl kwc">List</span><span class="hl opt">.</span>nth sorted_solutions <span class="hl opt">(</span><span class="hl kwc">List</span><span class="hl opt">.</span>length sorted_solutions <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">))</span>
    <span class="hl kwa">end</span><span class="hl opt">;</span>

