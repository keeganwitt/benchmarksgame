<span class="hl opt">#</span>lang racket<span class="hl opt">/</span>base

<span class="hl slc">;;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;; http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">;;; contributed by Eli Barzilay</span>

<span class="hl opt">(</span><span class="hl kwa">require</span> racket<span class="hl opt">/</span>require racket<span class="hl opt">/</span>require-syntax <span class="hl opt">(</span><span class="hl kwa">for-syntax</span> racket<span class="hl opt">/</span>base<span class="hl opt">))</span>
<span class="hl opt">(</span><span class="hl kwa">define-require-syntax</span> overriding-in
  <span class="hl opt">(</span><span class="hl kwa">syntax-rules</span> <span class="hl opt">() [(</span><span class="hl kwa">_</span> R1 R2<span class="hl opt">) (</span><span class="hl kwa">combine-in</span> R2 <span class="hl opt">(</span><span class="hl kwa">subtract-in</span> R1 R2<span class="hl opt">))]))</span>
<span class="hl opt">(</span><span class="hl kwa">require</span> <span class="hl opt">(</span><span class="hl kwa">overriding-in</span>
          racket<span class="hl opt">/</span>flonum
          <span class="hl opt">(</span><span class="hl kwa">filtered-in</span> <span class="hl opt">(</span><span class="hl kwa">lambda</span> <span class="hl opt">(</span><span class="hl kwa">name</span><span class="hl opt">) (</span><span class="hl kwa">regexp-replace</span> <span class="hl opt">#</span>rx<span class="hl str">&quot;unsafe-&quot;</span> name <span class="hl str">&quot;&quot;</span><span class="hl opt">))</span>
                       racket<span class="hl opt">/</span>unsafe<span class="hl opt">/</span>ops<span class="hl opt">))</span>
         racket<span class="hl opt">/</span>cmdline<span class="hl opt">)</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> O <span class="hl opt">(</span><span class="hl kwa">current-output-port</span><span class="hl opt">))</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> LIMIT-SQR <span class="hl num">4.0</span><span class="hl opt">)</span>
<span class="hl opt">(</span><span class="hl kwa">define</span> ITERATIONS <span class="hl num">50</span><span class="hl opt">)</span>
<span class="hl opt">(</span><span class="hl kwa">define</span> N <span class="hl opt">(</span><span class="hl kwa">command-line</span> <span class="hl opt">#:</span>args <span class="hl opt">(</span><span class="hl kwa">n</span><span class="hl opt">) (</span><span class="hl kwa">string-</span><span class="hl opt">&gt;</span>number n<span class="hl opt">)))</span>
<span class="hl opt">(</span><span class="hl kwa">define</span> N<span class="hl num">.0</span> <span class="hl opt">(</span><span class="hl kwa">fx-</span><span class="hl opt">&gt;</span>fl N<span class="hl opt">))</span>
<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl num">2</span><span class="hl opt">/</span>N <span class="hl opt">(</span><span class="hl kwa">fl</span><span class="hl opt">/</span> <span class="hl num">2.0</span> N<span class="hl num">.0</span><span class="hl opt">))</span>
<span class="hl opt">(</span><span class="hl kwa">define</span> Crs
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">([</span>v <span class="hl opt">(</span><span class="hl kwa">make-flvector</span> N<span class="hl opt">)])</span>
    <span class="hl opt">(</span><span class="hl kwa">for</span> <span class="hl opt">([</span>x <span class="hl opt">(</span><span class="hl kwa">in-range</span> N<span class="hl opt">)])</span>
      <span class="hl opt">(</span><span class="hl kwa">flvector-set</span><span class="hl opt">!</span> v x <span class="hl opt">(</span><span class="hl kwa">fl-</span> <span class="hl opt">(</span><span class="hl kwa">fl</span><span class="hl opt">/ (</span><span class="hl kwa">fx-</span><span class="hl opt">&gt;</span>fl <span class="hl opt">(</span><span class="hl kwa">fx</span><span class="hl opt">*</span> <span class="hl num">2</span> x<span class="hl opt">))</span> N<span class="hl num">.0</span><span class="hl opt">)</span> <span class="hl num">1.5</span><span class="hl opt">)))</span>
    v<span class="hl opt">))</span>

<span class="hl opt">(</span><span class="hl kwa">define-syntax</span> <span class="hl opt">(</span><span class="hl kwa">let-n</span> stx<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">syntax-case</span> stx <span class="hl opt">()</span>
    <span class="hl opt">[(</span><span class="hl kwa">_</span> N bindings E<span class="hl opt">)</span>
     <span class="hl opt">(</span><span class="hl kwa">let</span> loop <span class="hl opt">([</span>N <span class="hl opt">(</span><span class="hl kwa">syntax-e</span> <span class="hl opt">#'</span>N<span class="hl opt">)] [</span>E <span class="hl opt">#'</span>E<span class="hl opt">])</span>
       <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">zero</span>? N<span class="hl opt">)</span> E <span class="hl opt">(</span><span class="hl kwa">loop</span> <span class="hl opt">(</span><span class="hl kwa">sub1</span> N<span class="hl opt">) #`(</span><span class="hl kwa">let</span> bindings <span class="hl opt">#,</span>E<span class="hl opt">))))]))</span>

<span class="hl opt">(</span><span class="hl kwa">define-syntax-rule</span> <span class="hl opt">(</span><span class="hl kwa">mandelbrot</span> Cr Ci<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> loop <span class="hl opt">([</span>i <span class="hl num">0</span><span class="hl opt">] [</span>Zr <span class="hl num">0.0</span><span class="hl opt">] [</span>Zi <span class="hl num">0.0</span><span class="hl opt">])</span>
    <span class="hl opt">(</span><span class="hl kwa">cond</span> <span class="hl opt">[(</span><span class="hl kwa">fl</span><span class="hl opt">&gt; (</span><span class="hl kwa">fl</span><span class="hl opt">+ (</span><span class="hl kwa">fl</span><span class="hl opt">*</span> Zr Zr<span class="hl opt">) (</span><span class="hl kwa">fl</span><span class="hl opt">*</span> Zi Zi<span class="hl opt">))</span> LIMIT-SQR<span class="hl opt">)</span> <span class="hl num">0</span><span class="hl opt">]</span>
          <span class="hl opt">[(</span><span class="hl kwa">fx</span><span class="hl opt">=</span> i ITERATIONS<span class="hl opt">)</span> <span class="hl num">1</span><span class="hl opt">]</span>
          <span class="hl opt">[</span>else <span class="hl opt">(</span><span class="hl kwa">let-n</span> <span class="hl num">5</span> <span class="hl opt">([</span>Zr <span class="hl opt">(</span><span class="hl kwa">fl</span><span class="hl opt">+ (</span><span class="hl kwa">fl-</span> <span class="hl opt">(</span><span class="hl kwa">fl</span><span class="hl opt">*</span> Zr Zr<span class="hl opt">) (</span><span class="hl kwa">fl</span><span class="hl opt">*</span> Zi Zi<span class="hl opt">))</span> Cr<span class="hl opt">)]</span>
                          <span class="hl opt">[</span>Zi <span class="hl opt">(</span><span class="hl kwa">fl</span><span class="hl opt">+ (</span><span class="hl kwa">fl</span><span class="hl opt">*</span> <span class="hl num">2.0</span> <span class="hl opt">(</span><span class="hl kwa">fl</span><span class="hl opt">*</span> Zr Zi<span class="hl opt">))</span> Ci<span class="hl opt">)])</span>
                  <span class="hl opt">(</span><span class="hl kwa">loop</span> <span class="hl opt">(</span><span class="hl kwa">fx</span><span class="hl opt">+</span> i <span class="hl num">5</span><span class="hl opt">)</span> Zr Zi<span class="hl opt">))])))</span>

<span class="hl opt">(</span><span class="hl kwa">fprintf</span> O <span class="hl str">&quot;P4</span><span class="hl esc">\n</span><span class="hl str">~a ~a</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> N N<span class="hl opt">)</span>
<span class="hl opt">(</span><span class="hl kwa">let</span> loop-y <span class="hl opt">([</span>y N<span class="hl opt">])</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">([</span>Ci <span class="hl opt">(</span><span class="hl kwa">fl-</span> <span class="hl opt">(</span><span class="hl kwa">fl</span><span class="hl opt">*</span> <span class="hl num">2</span><span class="hl opt">/</span>N <span class="hl opt">(</span><span class="hl kwa">fx-</span><span class="hl opt">&gt;</span>fl y<span class="hl opt">))</span> <span class="hl num">1.0</span><span class="hl opt">)])</span>
    <span class="hl opt">(</span><span class="hl kwa">let</span> loop-x <span class="hl opt">([</span>x <span class="hl num">0</span><span class="hl opt">] [</span>bitnum <span class="hl num">0</span><span class="hl opt">] [</span>byteacc <span class="hl num">0</span><span class="hl opt">])</span>
      <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">fx</span><span class="hl opt">&lt;</span> x N<span class="hl opt">)</span>
        <span class="hl opt">(</span><span class="hl kwa">let</span><span class="hl opt">* ([</span>Cr <span class="hl opt">(</span><span class="hl kwa">flvector-ref</span> Crs x<span class="hl opt">)]</span>
               <span class="hl opt">[</span>bitnum <span class="hl opt">(</span><span class="hl kwa">fx</span><span class="hl opt">+</span> bitnum <span class="hl num">1</span><span class="hl opt">)]</span>
               <span class="hl opt">[</span>byteacc <span class="hl opt">(</span><span class="hl kwa">fx</span><span class="hl opt">+ (</span><span class="hl kwa">fxlshift</span> byteacc <span class="hl num">1</span><span class="hl opt">) (</span><span class="hl kwa">mandelbrot</span> Cr Ci<span class="hl opt">))])</span>
          <span class="hl opt">(</span><span class="hl kwa">cond</span> <span class="hl opt">[(</span><span class="hl kwa">fx</span><span class="hl opt">=</span> bitnum <span class="hl num">8</span><span class="hl opt">)</span>
                 <span class="hl opt">(</span><span class="hl kwa">write-byte</span> byteacc O<span class="hl opt">)</span>
                 <span class="hl opt">(</span><span class="hl kwa">loop-x</span> <span class="hl opt">(</span><span class="hl kwa">fx</span><span class="hl opt">+</span> x <span class="hl num">1</span><span class="hl opt">)</span> <span class="hl num">0 0</span><span class="hl opt">)]</span>
                <span class="hl opt">[</span>else <span class="hl opt">(</span><span class="hl kwa">loop-x</span> <span class="hl opt">(</span><span class="hl kwa">fx</span><span class="hl opt">+</span> x <span class="hl num">1</span><span class="hl opt">)</span> bitnum byteacc<span class="hl opt">)]))</span>
        <span class="hl opt">(</span><span class="hl kwa">begin</span> <span class="hl opt">(</span><span class="hl kwa">when</span> <span class="hl opt">(</span><span class="hl kwa">fx</span><span class="hl opt">&gt;</span> bitnum <span class="hl num">0</span><span class="hl opt">)</span>
                 <span class="hl opt">(</span><span class="hl kwa">write-byte</span> <span class="hl opt">(</span><span class="hl kwa">fxlshift</span> byteacc <span class="hl opt">(</span><span class="hl kwa">fx-</span> <span class="hl num">8</span> <span class="hl opt">(</span><span class="hl kwa">fxand</span> N <span class="hl opt">#</span>x7<span class="hl opt">)))</span> O<span class="hl opt">))</span>
               <span class="hl opt">(</span><span class="hl kwa">when</span> <span class="hl opt">(</span><span class="hl kwa">fx</span><span class="hl opt">&gt;</span> y <span class="hl num">1</span><span class="hl opt">) (</span><span class="hl kwa">loop-y</span> <span class="hl opt">(</span><span class="hl kwa">fx-</span> y <span class="hl num">1</span><span class="hl opt">))))))))</span>
