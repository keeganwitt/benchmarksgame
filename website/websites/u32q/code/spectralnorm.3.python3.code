
<span class="hl slc"># The Computer Language Benchmarks Game</span>
<span class="hl slc"># http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">#</span>
<span class="hl slc"># Contributed by Sebastien Loisel</span>
<span class="hl slc"># Fixed by Isaac Gouy</span>
<span class="hl slc"># Sped up by Josh Goldfoot</span>
<span class="hl slc"># Dirtily sped up by Simon Descarpentries</span>
<span class="hl slc"># Used list comprehension by Vadim Zelenin</span>
<span class="hl slc"># 2to3</span>
<span class="hl slc"># Sped up with numpy by &#64;tim_1729</span>

<span class="hl kwa">from</span> math      <span class="hl kwa">import</span> sqrt
<span class="hl kwa">from</span> sys       <span class="hl kwa">import</span> argv
<span class="hl kwa">import</span> numpy


<span class="hl kwa">def</span> <span class="hl kwd">eval_A</span><span class="hl opt">(</span>i<span class="hl opt">,</span> j<span class="hl opt">):</span>
    ij <span class="hl opt">=</span> i<span class="hl opt">+</span>j
    <span class="hl kwa">return</span> <span class="hl num">1.0</span> <span class="hl opt">/ (</span>ij <span class="hl opt">* (</span>ij <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">) /</span> <span class="hl num">2</span> <span class="hl opt">+</span> i <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">)</span>


<span class="hl kwa">def</span> <span class="hl kwd">eval_A_times_u</span><span class="hl opt">(</span>u<span class="hl opt">):</span>
    local_eval_A <span class="hl opt">=</span> eval_A

    n <span class="hl opt">=</span> u<span class="hl opt">.</span>shape<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">]</span>
    <span class="hl slc"># output is n items</span>
    iis <span class="hl opt">=</span> numpy<span class="hl opt">.</span><span class="hl kwd">arange</span><span class="hl opt">(</span>n<span class="hl opt">)</span>
    iis <span class="hl opt">=</span> numpy<span class="hl opt">.</span><span class="hl kwd">reshape</span><span class="hl opt">(</span>iis<span class="hl opt">,(</span>n<span class="hl opt">,</span><span class="hl num">1</span><span class="hl opt">))</span>
    j <span class="hl opt">=</span> numpy<span class="hl opt">.</span><span class="hl kwd">arange</span><span class="hl opt">(</span>n<span class="hl opt">)</span>
    j <span class="hl opt">=</span> numpy<span class="hl opt">.</span><span class="hl kwd">tile</span><span class="hl opt">(</span>j<span class="hl opt">,(</span>n<span class="hl opt">,</span><span class="hl num">1</span><span class="hl opt">))</span> <span class="hl slc"># j is a matrix. Every row is [ 0, 1, 2, ...]</span>
    u_j <span class="hl opt">=</span> numpy<span class="hl opt">.</span><span class="hl kwd">tile</span><span class="hl opt">(</span>u<span class="hl opt">,(</span>n<span class="hl opt">,</span><span class="hl num">1</span><span class="hl opt">))</span>
    output <span class="hl opt">=</span> numpy<span class="hl opt">.</span><span class="hl kwb">sum</span><span class="hl opt">(</span><span class="hl kwd">local_eval_A</span><span class="hl opt">(</span>iis<span class="hl opt">,</span>j<span class="hl opt">)*</span>u_j<span class="hl opt">,</span>axis<span class="hl opt">=</span><span class="hl num">1</span><span class="hl opt">)</span>
    <span class="hl kwa">return</span> output


<span class="hl kwa">def</span> <span class="hl kwd">eval_At_times_u</span><span class="hl opt">(</span>u<span class="hl opt">):</span>
    local_eval_A <span class="hl opt">=</span> eval_A

    n <span class="hl opt">=</span> u<span class="hl opt">.</span>shape<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">]</span>
    <span class="hl slc"># output is n items</span>
    <span class="hl slc"># each item is sum of things in loop</span>
    iis <span class="hl opt">=</span> numpy<span class="hl opt">.</span><span class="hl kwd">arange</span><span class="hl opt">(</span>n<span class="hl opt">)</span>
    iis <span class="hl opt">=</span> numpy<span class="hl opt">.</span><span class="hl kwd">reshape</span><span class="hl opt">(</span>iis<span class="hl opt">,(</span>n<span class="hl opt">,</span><span class="hl num">1</span><span class="hl opt">))</span>
    j <span class="hl opt">=</span> numpy<span class="hl opt">.</span><span class="hl kwd">arange</span><span class="hl opt">(</span>n<span class="hl opt">)</span>
    j <span class="hl opt">=</span> numpy<span class="hl opt">.</span><span class="hl kwd">tile</span><span class="hl opt">(</span>j<span class="hl opt">,(</span>n<span class="hl opt">,</span><span class="hl num">1</span><span class="hl opt">))</span>
    u_j <span class="hl opt">=</span> numpy<span class="hl opt">.</span><span class="hl kwd">tile</span><span class="hl opt">(</span>u<span class="hl opt">,(</span>n<span class="hl opt">,</span><span class="hl num">1</span><span class="hl opt">))</span>
    output <span class="hl opt">=</span> numpy<span class="hl opt">.</span><span class="hl kwb">sum</span><span class="hl opt">(</span><span class="hl kwd">local_eval_A</span><span class="hl opt">(</span>j<span class="hl opt">,</span>iis<span class="hl opt">)*</span>u_j<span class="hl opt">,</span>axis<span class="hl opt">=</span><span class="hl num">1</span><span class="hl opt">)</span>
    <span class="hl kwa">return</span> output



<span class="hl kwa">def</span> <span class="hl kwd">eval_AtA_times_u</span><span class="hl opt">(</span>u<span class="hl opt">):</span>
    <span class="hl kwa">return</span> <span class="hl kwd">eval_At_times_u</span><span class="hl opt">(</span><span class="hl kwd">eval_A_times_u</span><span class="hl opt">(</span>u<span class="hl opt">))</span>


<span class="hl kwa">def</span> <span class="hl kwd">main</span><span class="hl opt">():</span>
    n <span class="hl opt">=</span> <span class="hl kwb">int</span><span class="hl opt">(</span>argv<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">])</span>
    u <span class="hl opt">=</span> numpy<span class="hl opt">.</span><span class="hl kwd">ones</span><span class="hl opt">(</span>n<span class="hl opt">)</span>
    local_eval_AtA_times_u <span class="hl opt">=</span> eval_AtA_times_u

    <span class="hl kwa">for</span> dummy <span class="hl kwa">in</span> <span class="hl kwb">range</span><span class="hl opt">(</span><span class="hl num">10</span><span class="hl opt">):</span>
        v <span class="hl opt">=</span> <span class="hl kwd">local_eval_AtA_times_u</span><span class="hl opt">(</span>u<span class="hl opt">)</span>
        u <span class="hl opt">=</span> <span class="hl kwd">local_eval_AtA_times_u</span><span class="hl opt">(</span>v<span class="hl opt">)</span>

    vBv <span class="hl opt">=</span> numpy<span class="hl opt">.</span><span class="hl kwb">sum</span><span class="hl opt">(</span> u <span class="hl opt">*</span> v <span class="hl opt">)</span>
    vv <span class="hl opt">=</span> numpy<span class="hl opt">.</span><span class="hl kwb">sum</span><span class="hl opt">(</span> v <span class="hl opt">*</span> v <span class="hl opt">)</span>

    <span class="hl kwa">print</span><span class="hl opt">(</span><span class="hl str">&quot;%0.9f&quot;</span> <span class="hl opt">% (</span>numpy<span class="hl opt">.</span><span class="hl kwd">sqrt</span><span class="hl opt">(</span>vBv<span class="hl opt">/</span>vv<span class="hl opt">)))</span>

<span class="hl kwa">if</span> __name__ <span class="hl opt">==</span> <span class="hl str">&quot;__main__&quot;</span><span class="hl opt">:</span>
    <span class="hl kwd">main</span><span class="hl opt">()</span>
