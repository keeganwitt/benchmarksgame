<span class="hl slc">;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;; http://benchmarksgame.alioth.debian.org/</span>

<span class="hl slc">;; Adapted from the Java -server version</span>
<span class="hl slc">;; contributed by Marko Kocic</span>
<span class="hl slc">;; modified by Kenneth Jonsson, restructured to allow usage of 'pmap'</span>
<span class="hl slc">;; modified by Andy Fingerhut to use faster primitive math ops, and</span>
<span class="hl slc">;; deftype instead of defrecord for smaller tree nodes.</span>
<span class="hl slc">;; modified by Rich Hickey for Clojure 1.3</span>
<span class="hl slc">;; modified promise/delivery improvement by Stuart Halloway</span>
<span class="hl slc">;; small hints by David Nolen and Alex Miller</span>
                                        <span class="hl slc">;</span>
<span class="hl opt">(</span><span class="hl kwa">ns</span> binarytrees
  <span class="hl opt">(:</span>gen-class<span class="hl opt">))</span>

<span class="hl opt">(</span><span class="hl kwa">set</span><span class="hl opt">! *</span>warn-on-reflection<span class="hl opt">*</span> true<span class="hl opt">)</span>
<span class="hl opt">(</span><span class="hl kwa">set</span><span class="hl opt">! *</span>unchecked-math<span class="hl opt">*</span> true<span class="hl opt">)</span>

<span class="hl opt">(</span><span class="hl kwa">def</span> ^<span class="hl opt">:</span>const ^long min-depth <span class="hl num">4</span><span class="hl opt">)</span>

<span class="hl opt">(</span><span class="hl kwa">deftype</span> TreeNode <span class="hl opt">[</span>left right ^long item<span class="hl opt">])</span>

<span class="hl opt">(</span><span class="hl kwa">defn</span> make-tree <span class="hl opt">[</span>^long item ^long depth<span class="hl opt">]</span>
  <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">zero</span>? depth<span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl kwa">TreeNode</span>. nil nil item<span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">[</span>i2 <span class="hl opt">(*</span> <span class="hl num">2</span> item<span class="hl opt">)</span>
          ddec <span class="hl opt">(</span><span class="hl kwa">dec</span> depth<span class="hl opt">)]</span>
      <span class="hl opt">(</span><span class="hl kwa">TreeNode</span>. <span class="hl opt">(</span><span class="hl kwa">make-tree</span> <span class="hl opt">(</span><span class="hl kwa">dec</span> i2<span class="hl opt">)</span> ddec<span class="hl opt">) (</span><span class="hl kwa">make-tree</span> i2 ddec<span class="hl opt">)</span> item<span class="hl opt">))))</span>

<span class="hl opt">(</span><span class="hl kwa">defn</span> item-check ^long <span class="hl opt">[</span>^TreeNode node<span class="hl opt">]</span>
  <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">nil</span>? <span class="hl opt">(</span>.left node<span class="hl opt">))</span>
    <span class="hl opt">(</span>.item node<span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl kwa">-</span> <span class="hl opt">(+ (</span>.item node<span class="hl opt">)</span>
          <span class="hl opt">(</span><span class="hl kwa">item-check</span> <span class="hl opt">(</span>.left node<span class="hl opt">)))</span>
       <span class="hl opt">(</span><span class="hl kwa">item-check</span> <span class="hl opt">(</span>.right node<span class="hl opt">)))))</span>

<span class="hl opt">(</span><span class="hl kwa">defn</span> iterate-trees <span class="hl opt">[</span>^long mx ^long mn ^long d<span class="hl opt">]</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">[</span>iterations <span class="hl opt">(</span><span class="hl kwa">bit-shift-left</span> <span class="hl num">1</span> <span class="hl opt">(</span><span class="hl kwa">long</span> <span class="hl opt">(+</span> mx mn <span class="hl opt">(</span><span class="hl kwa">-</span> d<span class="hl opt">))))]</span>
    <span class="hl opt">(</span><span class="hl kwa">format</span> <span class="hl str">&quot;%d</span><span class="hl esc">\t</span> <span class="hl str">trees of depth %d</span><span class="hl esc">\t</span> <span class="hl str">check: %d&quot;</span>
            <span class="hl opt">(*</span> <span class="hl num">2</span> iterations<span class="hl opt">)</span>
            d
            <span class="hl opt">(</span><span class="hl kwa">loop</span> <span class="hl opt">[</span>result <span class="hl num">0</span>
         i <span class="hl num">1</span><span class="hl opt">]</span>
    <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(=</span> i <span class="hl opt">(</span><span class="hl kwa">inc</span> iterations<span class="hl opt">))</span>
      result
      <span class="hl opt">(</span><span class="hl kwa">recur</span> <span class="hl opt">(+</span> result
                <span class="hl opt">(</span><span class="hl kwa">item-check</span> <span class="hl opt">(</span><span class="hl kwa">make-tree</span> i d<span class="hl opt">))</span>
                <span class="hl opt">(</span><span class="hl kwa">item-check</span> <span class="hl opt">(</span><span class="hl kwa">make-tree</span> <span class="hl opt">(</span><span class="hl kwa">-</span> i<span class="hl opt">)</span> d<span class="hl opt">)))</span>
             <span class="hl opt">(</span><span class="hl kwa">inc</span> i<span class="hl opt">)))))))</span>

<span class="hl opt">(</span><span class="hl kwa">defn</span> main <span class="hl opt">[</span>^long max-depth<span class="hl opt">]</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">[</span>stretch-depth <span class="hl opt">(</span><span class="hl kwa">inc</span> max-depth<span class="hl opt">)]</span>
    <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">[</span>tree <span class="hl opt">(</span><span class="hl kwa">make-tree</span> <span class="hl num">0</span> stretch-depth<span class="hl opt">)</span>
          check <span class="hl opt">(</span><span class="hl kwa">item-check</span> tree<span class="hl opt">)]</span>
      <span class="hl opt">(</span><span class="hl kwa">println</span> <span class="hl opt">(</span><span class="hl kwa">format</span> <span class="hl str">&quot;stretch tree of depth %d</span><span class="hl esc">\t</span> <span class="hl str">check: %d&quot;</span> stretch-depth check<span class="hl opt">)))</span>
    <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">[</span>agents <span class="hl opt">(</span><span class="hl kwa">repeatedly</span> <span class="hl opt">(</span>.availableProcessors <span class="hl opt">(</span><span class="hl kwa">Runtime</span><span class="hl opt">/</span>getRuntime<span class="hl opt">)) #(</span><span class="hl kwa">agent</span> <span class="hl opt">[]))</span>
          long-lived-tree <span class="hl opt">(</span><span class="hl kwa">make-tree</span> <span class="hl num">0</span> max-depth<span class="hl opt">)]</span>
      <span class="hl opt">(</span><span class="hl kwa">loop</span> <span class="hl opt">[</span>depth min-depth
             <span class="hl opt">[</span>a <span class="hl opt">&amp;</span> more<span class="hl opt">] (</span><span class="hl kwa">cycle</span> agents<span class="hl opt">)</span>
             results <span class="hl opt">[]]</span>
        <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(&gt;</span> depth stretch-depth<span class="hl opt">)</span>
          <span class="hl opt">(</span><span class="hl kwa">doseq</span> <span class="hl opt">[</span>r results<span class="hl opt">] (</span><span class="hl kwa">println</span> <span class="hl opt">&#64;</span>r<span class="hl opt">))</span>
          <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">[</span>result <span class="hl opt">(</span><span class="hl kwa">promise</span><span class="hl opt">)]</span>
            <span class="hl opt">(</span><span class="hl kwa">send</span> a <span class="hl opt">(</span><span class="hl kwa">fn</span> <span class="hl opt">[</span>_<span class="hl opt">]</span>
                      <span class="hl opt">(</span><span class="hl kwa">deliver</span> result <span class="hl opt">(</span><span class="hl kwa">iterate-trees</span> max-depth min-depth depth<span class="hl opt">))))</span>
            <span class="hl opt">(</span><span class="hl kwa">recur</span> <span class="hl opt">(+</span> <span class="hl num">2</span> depth<span class="hl opt">)</span> more <span class="hl opt">(</span><span class="hl kwa">conj</span> results result<span class="hl opt">)))))</span>
        <span class="hl opt">(</span><span class="hl kwa">println</span> <span class="hl opt">(</span><span class="hl kwa">format</span> <span class="hl str">&quot;long lived tree of depth %d</span><span class="hl esc">\t</span> <span class="hl str">check: %d&quot;</span> max-depth <span class="hl opt">(</span><span class="hl kwa">item-check</span> long-lived-tree<span class="hl opt">))))))</span>

<span class="hl opt">(</span><span class="hl kwa">defn</span> -main <span class="hl opt">[&amp;</span> args<span class="hl opt">]</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">[</span>n <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">first</span> args<span class="hl opt">) (</span><span class="hl kwa">Long</span><span class="hl opt">/</span>parseLong <span class="hl opt">(</span><span class="hl kwa">first</span> args<span class="hl opt">))</span> <span class="hl num">0</span><span class="hl opt">)</span>
        max-depth <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(&gt; (+</span> min-depth <span class="hl num">2</span><span class="hl opt">)</span> n<span class="hl opt">) (+</span> min-depth <span class="hl num">2</span><span class="hl opt">)</span> n<span class="hl opt">)]</span>
    <span class="hl opt">(</span><span class="hl kwa">main</span> max-depth<span class="hl opt">)</span>
    <span class="hl opt">(</span><span class="hl kwa">shutdown-agents</span><span class="hl opt">)))</span>
