<span class="hl slc">;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;;   http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">;;</span>
<span class="hl slc">;;   contributed by Alexey Voznyuk</span>
<span class="hl slc">;;</span>

<span class="hl opt">(</span><span class="hl kwa">defpackage</span> <span class="hl opt">#:</span>fannkuch-redux
  <span class="hl opt">(:</span>use <span class="hl opt">:</span>cl<span class="hl opt">))</span>

<span class="hl opt">(</span><span class="hl kwa">in-package</span> <span class="hl opt">:</span>fannkuch-redux<span class="hl opt">)</span>

<span class="hl opt">(</span><span class="hl kwa">defun</span> make-facts-vector <span class="hl opt">(</span><span class="hl kwa">seq-length</span><span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">make-array</span> <span class="hl opt">(</span><span class="hl kwa">1</span><span class="hl opt">+</span> seq-length<span class="hl opt">)</span>
              <span class="hl opt">:</span>initial-contents <span class="hl opt">(</span><span class="hl kwa">cons</span> <span class="hl num">1</span> <span class="hl opt">(</span><span class="hl kwa">loop</span> <span class="hl opt">:</span>with r <span class="hl opt">=</span> <span class="hl num">1</span> <span class="hl opt">:</span>for i from <span class="hl num">1</span> to seq-length
                                           <span class="hl opt">:</span>collect <span class="hl opt">(</span><span class="hl kwa">setf</span> r <span class="hl opt">(*</span> r i<span class="hl opt">))))))</span>

<span class="hl opt">(</span><span class="hl kwa">defmacro</span> with-vars-bound <span class="hl opt">((</span><span class="hl kwa">vars</span> bind-vars<span class="hl opt">) &amp;</span>body body<span class="hl opt">)</span>
  <span class="hl opt">`(</span><span class="hl kwa">let</span> <span class="hl opt">(,&#64;(</span><span class="hl kwa">loop</span> <span class="hl opt">:</span>for var <span class="hl opt">:</span>in vars <span class="hl opt">:</span>for bind-var <span class="hl opt">:</span>in bind-vars <span class="hl opt">:</span>collect <span class="hl opt">`(,</span>var <span class="hl opt">,</span>bind-var<span class="hl opt">)))</span>
     <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> fixnum <span class="hl opt">,&#64;</span>vars<span class="hl opt">) (</span><span class="hl kwa">ignorable</span> <span class="hl opt">,&#64;</span>vars<span class="hl opt">))</span>
     <span class="hl opt">,&#64;</span>body<span class="hl opt">))</span>

<span class="hl opt">(</span><span class="hl kwa">defmacro</span> with-permutations <span class="hl opt">(((&amp;</span>rest seq-vars<span class="hl opt">)</span> perm-index-start perm-count<span class="hl opt">) &amp;</span>body body<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span><span class="hl opt">* ((</span><span class="hl kwa">seq-length</span> <span class="hl opt">(</span><span class="hl kwa">length</span> seq-vars<span class="hl opt">))</span>
         <span class="hl opt">(</span><span class="hl kwa">facts</span> <span class="hl opt">(</span><span class="hl kwa">make-facts-vector</span> seq-length<span class="hl opt">))</span>
         <span class="hl opt">(</span><span class="hl kwa">outer-tag</span> <span class="hl opt">(</span><span class="hl kwa">gensym</span><span class="hl opt">))</span>
         <span class="hl opt">(</span><span class="hl kwa">count</span> <span class="hl opt">(</span><span class="hl kwa">gensym</span><span class="hl opt">)))</span>
    <span class="hl opt">(</span><span class="hl kwa">labels</span> <span class="hl opt">((</span><span class="hl kwa">build-loop</span> <span class="hl opt">(</span><span class="hl kwa">depth</span> upper-seq-vars<span class="hl opt">)</span>
               <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(&gt;=</span> depth seq-length<span class="hl opt">)</span>
                   <span class="hl opt">`(</span><span class="hl kwa">with-vars-bound</span> <span class="hl opt">(,</span>seq-vars <span class="hl opt">,</span>upper-seq-vars<span class="hl opt">)</span>
                      <span class="hl opt">(</span><span class="hl kwa">when</span> <span class="hl opt">(</span><span class="hl kwa">zerop</span> <span class="hl opt">,</span>count<span class="hl opt">)</span>
                        <span class="hl opt">(</span><span class="hl kwa">return-from</span> <span class="hl opt">,</span>outer-tag<span class="hl opt">))</span>
                      <span class="hl opt">(</span><span class="hl kwa">decf</span> <span class="hl opt">,</span>count<span class="hl opt">)</span>
                      <span class="hl opt">,&#64;</span>body<span class="hl opt">)</span>
                   <span class="hl opt">(</span><span class="hl kwa">let</span><span class="hl opt">* ((</span><span class="hl kwa">my-seq-vars</span> <span class="hl opt">(</span><span class="hl kwa">loop</span> <span class="hl opt">:</span>repeat <span class="hl opt">(</span><span class="hl kwa">-</span> seq-length depth<span class="hl opt">) :</span>collect <span class="hl opt">(</span><span class="hl kwa">gensym</span><span class="hl opt">)))</span>
                          <span class="hl opt">(</span><span class="hl kwa">shift-body</span> <span class="hl opt">`(</span><span class="hl kwa">let</span> <span class="hl opt">((</span><span class="hl kwa">first</span> <span class="hl opt">,(</span><span class="hl kwa">car</span> my-seq-vars<span class="hl opt">)))</span>
                                         <span class="hl opt">(</span><span class="hl kwa">setf</span> <span class="hl opt">,&#64;(</span><span class="hl kwa">loop</span> <span class="hl opt">:</span>for src <span class="hl opt">:</span>in my-seq-vars and dst <span class="hl opt">=</span> src
                                                    <span class="hl opt">:</span>when dst <span class="hl opt">:</span>collect dst and <span class="hl opt">:</span>collect src<span class="hl opt">)</span>
                                               <span class="hl opt">,(</span><span class="hl kwa">car</span> <span class="hl opt">(</span><span class="hl kwa">last</span> my-seq-vars<span class="hl opt">))</span> first<span class="hl opt">)))</span>
                          <span class="hl opt">(</span><span class="hl kwa">repeat-body</span> <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(=</span> depth <span class="hl opt">(</span><span class="hl kwa">1-</span> seq-length<span class="hl opt">))</span>
                                           <span class="hl opt">(</span><span class="hl kwa">build-loop</span> <span class="hl opt">(</span><span class="hl kwa">1</span><span class="hl opt">+</span> depth<span class="hl opt">)</span> upper-seq-vars<span class="hl opt">)</span>
                                           <span class="hl opt">`(</span><span class="hl kwa">prog1</span> <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(&gt;= ,</span>perm-index-start <span class="hl opt">,(</span><span class="hl kwa">elt</span> facts <span class="hl opt">(</span><span class="hl kwa">-</span> seq-length depth <span class="hl num">1</span><span class="hl opt">)))</span>
                                                       <span class="hl opt">(</span><span class="hl kwa">decf</span> <span class="hl opt">,</span>perm-index-start <span class="hl opt">,(</span><span class="hl kwa">elt</span> facts <span class="hl opt">(</span><span class="hl kwa">-</span> seq-length depth <span class="hl num">1</span><span class="hl opt">)))</span>
                                                       <span class="hl opt">,(</span><span class="hl kwa">build-loop</span> <span class="hl opt">(</span><span class="hl kwa">1</span><span class="hl opt">+</span> depth<span class="hl opt">)</span>
                                                                    <span class="hl opt">(</span><span class="hl kwa">append</span> my-seq-vars <span class="hl opt">(</span><span class="hl kwa">subseq</span> upper-seq-vars
                                                                                                <span class="hl opt">(</span><span class="hl kwa">length</span> my-seq-vars<span class="hl opt">)))))</span>
                                              <span class="hl opt">,</span>shift-body<span class="hl opt">))))</span>
                     <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(&gt; (</span><span class="hl kwa">-</span> seq-length depth<span class="hl opt">)</span> <span class="hl num">1</span><span class="hl opt">)</span>
                         <span class="hl opt">`(</span><span class="hl kwa">with-vars-bound</span> <span class="hl opt">(,</span>my-seq-vars <span class="hl opt">,</span>upper-seq-vars<span class="hl opt">)</span>
                            <span class="hl opt">(</span><span class="hl kwa">loop</span> <span class="hl opt">:</span>repeat <span class="hl opt">,(</span><span class="hl kwa">-</span> seq-length depth<span class="hl opt">) :</span>do <span class="hl opt">,</span>repeat-body<span class="hl opt">))</span>
                         repeat-body<span class="hl opt">)))))</span>
      <span class="hl opt">`(</span><span class="hl kwa">let</span> <span class="hl opt">((,</span>count <span class="hl opt">,</span>perm-count<span class="hl opt">))</span>
         <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> <span class="hl opt">(</span><span class="hl kwa">integer</span> <span class="hl num">0</span> <span class="hl opt">,(</span><span class="hl kwa">elt</span> facts seq-length<span class="hl opt">)) ,</span>count<span class="hl opt">))</span>
         <span class="hl opt">(</span><span class="hl kwa">block</span> <span class="hl opt">,</span>outer-tag
           <span class="hl opt">,(</span><span class="hl kwa">build-loop</span> <span class="hl num">0</span> <span class="hl opt">(</span><span class="hl kwa">loop</span> <span class="hl opt">:</span>for i <span class="hl opt">:</span>from <span class="hl num">0</span> <span class="hl opt">:</span>below seq-length <span class="hl opt">:</span>collect i<span class="hl opt">)))))))</span>

<span class="hl opt">(</span><span class="hl kwa">defmacro</span> with-flips-count <span class="hl opt">(((&amp;</span>rest seq-vars<span class="hl opt">)</span> flips-count<span class="hl opt">) &amp;</span>body body<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">((</span><span class="hl kwa">head</span> <span class="hl opt">(</span><span class="hl kwa">car</span> seq-vars<span class="hl opt">)))</span>
    <span class="hl opt">`(</span><span class="hl kwa">let</span> <span class="hl opt">((,</span>flips-count <span class="hl num">0</span><span class="hl opt">))</span>
       <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> fixnum <span class="hl opt">,</span>flips-count<span class="hl opt">))</span>
       <span class="hl opt">(</span><span class="hl kwa">unless</span> <span class="hl opt">(</span><span class="hl kwa">zerop</span> <span class="hl opt">,</span>head<span class="hl opt">)</span>
         <span class="hl opt">(</span><span class="hl kwa">loop</span>
            <span class="hl opt">(</span><span class="hl kwa">incf</span> <span class="hl opt">,</span>flips-count<span class="hl opt">)</span>
            <span class="hl opt">(</span><span class="hl kwa">cond</span>
              <span class="hl opt">,&#64;(</span><span class="hl kwa">loop</span> <span class="hl opt">:</span>for value <span class="hl opt">:</span>from <span class="hl num">1</span> <span class="hl opt">:</span>below <span class="hl opt">(</span><span class="hl kwa">length</span> seq-vars<span class="hl opt">)</span>
                   <span class="hl opt">:</span>collect <span class="hl opt">`((= ,</span>head <span class="hl opt">,</span>value<span class="hl opt">)</span>
                              <span class="hl opt">(</span><span class="hl kwa">when</span> <span class="hl opt">(</span><span class="hl kwa">zerop</span> <span class="hl opt">,(</span><span class="hl kwa">elt</span> seq-vars value<span class="hl opt">))</span>
                                <span class="hl opt">(</span><span class="hl kwa">return</span><span class="hl opt">))</span>
                              <span class="hl opt">,&#64;(</span><span class="hl kwa">loop</span> <span class="hl opt">:</span>for l <span class="hl opt">:</span>from <span class="hl num">0</span> <span class="hl opt">:</span>for r <span class="hl opt">:</span>downfrom value <span class="hl opt">:</span>while <span class="hl opt">(&lt;</span> l r<span class="hl opt">)</span>
                                   <span class="hl opt">:</span>collect <span class="hl opt">`(</span><span class="hl kwa">rotatef</span> <span class="hl opt">,(</span><span class="hl kwa">elt</span> seq-vars l<span class="hl opt">) ,(</span><span class="hl kwa">elt</span> seq-vars r<span class="hl opt">))))))))</span>
       <span class="hl opt">,&#64;</span>body<span class="hl opt">)))</span>

<span class="hl opt">(</span><span class="hl kwa">defstruct</span> atomic
  <span class="hl opt">(</span><span class="hl kwa">counter</span> <span class="hl num">0</span> <span class="hl opt">:</span>type <span class="hl opt">(</span><span class="hl kwa">unsigned-byte</span> <span class="hl opt">#+</span>x86-64 <span class="hl num">64</span> <span class="hl opt">#+</span>x86 <span class="hl num">32</span><span class="hl opt">)))</span>

<span class="hl opt">(</span><span class="hl kwa">defmacro</span> deffannkuch <span class="hl opt">(</span><span class="hl kwa">seq-length</span> <span class="hl opt">&amp;</span>key <span class="hl opt">(</span><span class="hl kwa">workers</span> <span class="hl num">1</span><span class="hl opt">)</span> worker-chunk-size<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span><span class="hl opt">* ((</span><span class="hl kwa">facts</span> <span class="hl opt">(</span><span class="hl kwa">make-facts-vector</span> seq-length<span class="hl opt">))</span>
         <span class="hl opt">(</span><span class="hl kwa">chunk-size</span> <span class="hl opt">(</span><span class="hl kwa">or</span> worker-chunk-size <span class="hl opt">(</span><span class="hl kwa">min</span> <span class="hl opt">(</span><span class="hl kwa">elt</span> facts seq-length<span class="hl opt">)</span> <span class="hl num">400</span><span class="hl opt">)))</span>
         <span class="hl opt">(</span><span class="hl kwa">seq-vars</span> <span class="hl opt">(</span><span class="hl kwa">loop</span> <span class="hl opt">:</span>for i <span class="hl opt">:</span>from <span class="hl num">0</span> <span class="hl opt">:</span>below seq-length <span class="hl opt">:</span>collect <span class="hl opt">(</span><span class="hl kwa">gensym</span><span class="hl opt">))))</span>
    <span class="hl opt">`(</span><span class="hl kwa">lambda</span> <span class="hl opt">()</span>
       <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">optimize</span> <span class="hl opt">(</span><span class="hl kwa">speed</span> <span class="hl num">3</span><span class="hl opt">) (</span><span class="hl kwa">safety</span> <span class="hl num">0</span><span class="hl opt">) (</span><span class="hl kwa">debug</span> <span class="hl num">0</span><span class="hl opt">)))</span>
       <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">((</span><span class="hl kwa">wrk-max-flips</span> <span class="hl opt">(</span><span class="hl kwa">make-array</span> <span class="hl opt">,</span>workers <span class="hl opt">:</span>element-type <span class="hl opt">'</span>fixnum<span class="hl opt">))</span>
             <span class="hl opt">(</span><span class="hl kwa">wrk-checksums</span> <span class="hl opt">(</span><span class="hl kwa">make-array</span> <span class="hl opt">,</span>workers <span class="hl opt">:</span>element-type <span class="hl opt">'</span>fixnum<span class="hl opt">))</span>
             <span class="hl opt">(</span><span class="hl kwa">current-idx</span> <span class="hl opt">(</span><span class="hl kwa">make-atomic</span><span class="hl opt">)))</span>
         <span class="hl opt">(</span><span class="hl kwa">flet</span> <span class="hl opt">((</span><span class="hl kwa">make-worker</span> <span class="hl opt">(</span><span class="hl kwa">wrk-index</span><span class="hl opt">)</span>
                  <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> <span class="hl opt">(</span><span class="hl kwa">integer</span> <span class="hl num">0</span> <span class="hl opt">,(</span><span class="hl kwa">1-</span> workers<span class="hl opt">))</span> wrk-index<span class="hl opt">))</span>
                  <span class="hl opt">(</span><span class="hl kwa">lambda</span> <span class="hl opt">()</span>
                    <span class="hl opt">(</span><span class="hl kwa">loop</span>
                       <span class="hl opt">:</span>with checksum <span class="hl opt">:</span>of-type fixnum <span class="hl opt">=</span> <span class="hl num">0</span>
                       <span class="hl opt">:</span>with max-flips <span class="hl opt">:</span>of-type fixnum <span class="hl opt">=</span> <span class="hl num">0</span>
                       <span class="hl opt">:</span>for perm-index <span class="hl opt">:</span>of-type fixnum <span class="hl opt">= (</span><span class="hl kwa">sb-ext</span><span class="hl opt">:</span>atomic-incf <span class="hl opt">(</span><span class="hl kwa">atomic-counter</span> current-idx<span class="hl opt">)</span>
                                                                             <span class="hl opt">,</span>chunk-size<span class="hl opt">)</span>
                       <span class="hl opt">:</span>while <span class="hl opt">(&lt;</span> perm-index <span class="hl opt">,(</span><span class="hl kwa">elt</span> facts seq-length<span class="hl opt">))</span>
                       <span class="hl opt">:</span>for sign <span class="hl opt">:</span>of-type boolean <span class="hl opt">= (</span><span class="hl kwa">evenp</span> perm-index<span class="hl opt">)</span>
                       <span class="hl opt">:</span>do <span class="hl opt">(</span><span class="hl kwa">with-permutations</span> <span class="hl opt">((,&#64;</span>seq-vars<span class="hl opt">)</span> perm-index <span class="hl opt">,</span>chunk-size<span class="hl opt">)</span>
                             <span class="hl opt">(</span><span class="hl kwa">with-flips-count</span> <span class="hl opt">((,&#64;</span>seq-vars<span class="hl opt">)</span> flips-count<span class="hl opt">)</span>
                               <span class="hl opt">(</span><span class="hl kwa">when</span> <span class="hl opt">(&gt;</span> flips-count max-flips<span class="hl opt">)</span>
                                 <span class="hl opt">(</span><span class="hl kwa">setf</span> max-flips flips-count<span class="hl opt">))</span>
                               <span class="hl opt">(</span><span class="hl kwa">incf</span> checksum <span class="hl opt">(</span><span class="hl kwa">if</span> sign flips-count <span class="hl opt">(</span><span class="hl kwa">-</span> flips-count<span class="hl opt">)))</span>
                               <span class="hl opt">(</span><span class="hl kwa">setf</span> sign <span class="hl opt">(</span><span class="hl kwa">not</span> sign<span class="hl opt">))))</span>
                       <span class="hl opt">:</span>finally <span class="hl opt">(</span><span class="hl kwa">setf</span> <span class="hl opt">(</span><span class="hl kwa">elt</span> wrk-max-flips wrk-index<span class="hl opt">)</span> max-flips
                                      <span class="hl opt">(</span><span class="hl kwa">elt</span> wrk-checksums wrk-index<span class="hl opt">)</span> checksum<span class="hl opt">)))))</span>
           <span class="hl opt">(</span><span class="hl kwa">mapc</span> <span class="hl opt">#'</span>sb-thread<span class="hl opt">:</span>join-thread
                 <span class="hl opt">(</span><span class="hl kwa">list</span> <span class="hl opt">,&#64;(</span><span class="hl kwa">loop</span> <span class="hl opt">:</span>for wrk-index <span class="hl opt">:</span>from <span class="hl num">0</span> <span class="hl opt">:</span>below workers
                            <span class="hl opt">:</span>collect <span class="hl opt">`(</span><span class="hl kwa">sb-thread</span><span class="hl opt">:</span>make-thread <span class="hl opt">(</span><span class="hl kwa">make-worker</span> <span class="hl opt">,</span>wrk-index<span class="hl opt">))))))</span>
         <span class="hl opt">(</span><span class="hl kwa">loop</span> <span class="hl opt">:</span>for i <span class="hl opt">:</span>from <span class="hl num">0</span> <span class="hl opt">:</span>below <span class="hl opt">,</span>workers
            <span class="hl opt">:</span>summing <span class="hl opt">(</span><span class="hl kwa">elt</span> wrk-checksums i<span class="hl opt">) :</span>into checksum <span class="hl opt">:</span>of-type fixnum
            <span class="hl opt">:</span>maximizing <span class="hl opt">(</span><span class="hl kwa">elt</span> wrk-max-flips i<span class="hl opt">) :</span>into max-flips
            <span class="hl opt">:</span>finally <span class="hl opt">(</span><span class="hl kwa">return</span> <span class="hl opt">(</span><span class="hl kwa">values</span> checksum max-flips<span class="hl opt">)))))))</span>

<span class="hl opt">(</span><span class="hl kwa">defun</span> main <span class="hl opt">(&amp;</span>optional force-n<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span><span class="hl opt">* ((</span><span class="hl kwa">args</span> <span class="hl opt">(</span><span class="hl kwa">cdr</span> sb-ext<span class="hl opt">:*</span>posix-argv<span class="hl opt">*))</span>
         <span class="hl opt">(</span><span class="hl kwa">n</span> <span class="hl opt">(</span><span class="hl kwa">or</span> force-n <span class="hl opt">(</span><span class="hl kwa">if</span> args <span class="hl opt">(</span><span class="hl kwa">parse-integer</span> <span class="hl opt">(</span><span class="hl kwa">car</span> args<span class="hl opt">))</span> <span class="hl num">12</span><span class="hl opt">))))</span>
    <span class="hl opt">(</span><span class="hl kwa">multiple-value-bind</span> <span class="hl opt">(</span><span class="hl kwa">checksum</span> max-flips-count<span class="hl opt">)</span>
        <span class="hl opt">(</span><span class="hl kwa">funcall</span> <span class="hl opt">(</span><span class="hl kwa">the</span> function <span class="hl opt">(</span><span class="hl kwa">eval</span> <span class="hl opt">`(</span><span class="hl kwa">deffannkuch</span> <span class="hl opt">,</span>n <span class="hl opt">:</span>workers <span class="hl num">4</span> <span class="hl opt">:</span>worker-chunk-size <span class="hl num">12000</span><span class="hl opt">))))</span>
      <span class="hl opt">(</span><span class="hl kwa">format</span> t <span class="hl str">&quot;~a~%Pfannkuchen(~a) = ~a~%&quot;</span> checksum n max-flips-count<span class="hl opt">))))</span>


<span class="hl opt">(</span><span class="hl kwa">in-package</span> <span class="hl opt">:</span>cl-user<span class="hl opt">)</span>

<span class="hl opt">(</span><span class="hl kwa">defun</span> main <span class="hl opt">()</span>
  <span class="hl opt">(</span><span class="hl kwa">fannkuch-redux</span><span class="hl opt">::</span>main<span class="hl opt">))</span>

