<span class="hl slc">;;   The Computer Language Benchmarks Game</span>
<span class="hl slc">;;   http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">;;   contributed by James McIlree</span>
<span class="hl slc">;;   Modified by Juho Snellman 2005-11-19</span>
<span class="hl slc">;;     * About 50% speedup on both SBCL and CMUCL</span>
<span class="hl slc">;;     * Use SIMPLE-BASE-STRINGs instead of (SIMPLE-ARRAY CHARACTER) for</span>
<span class="hl slc">;;       lower memory use on Unicode SBCL</span>
<span class="hl slc">;;     * Declare the type of SEQUENCE in ACCUMULATE-FREQUENCIES</span>

<span class="hl opt">(</span><span class="hl kwa">defun</span> read-data <span class="hl opt">(</span><span class="hl kwa">stream</span><span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">((</span><span class="hl kwa">data</span> <span class="hl opt">(</span><span class="hl kwa">make-array</span> <span class="hl num">0</span> <span class="hl opt">:</span>element-type <span class="hl opt">'</span>base-char <span class="hl opt">:</span>adjustable t <span class="hl opt">:</span>fill-pointer <span class="hl num">0</span><span class="hl opt">)))</span>
    <span class="hl opt">(</span><span class="hl kwa">do</span> <span class="hl opt">((</span><span class="hl kwa">line</span> <span class="hl opt">(</span><span class="hl kwa">read-line</span> stream nil <span class="hl opt">'</span>eof<span class="hl opt">) (</span><span class="hl kwa">read-line</span> stream nil <span class="hl opt">'</span>eof<span class="hl opt">)))</span>
        <span class="hl opt">((</span><span class="hl kwa">or</span> <span class="hl opt">(</span><span class="hl kwa">eq</span> line <span class="hl opt">'</span>eof<span class="hl opt">) (</span><span class="hl kwa">string</span><span class="hl opt">=</span> <span class="hl str">&quot;&gt;THREE&quot;</span> line <span class="hl opt">:</span>start2 <span class="hl num">0</span> <span class="hl opt">:</span>end2 <span class="hl num">6</span><span class="hl opt">))))</span>
    <span class="hl opt">(</span><span class="hl kwa">do</span> <span class="hl opt">((</span><span class="hl kwa">line</span> <span class="hl opt">(</span><span class="hl kwa">read-line</span> stream nil <span class="hl opt">'</span>eof<span class="hl opt">) (</span><span class="hl kwa">read-line</span> stream nil <span class="hl opt">'</span>eof<span class="hl opt">)))</span>
        <span class="hl opt">((</span><span class="hl kwa">or</span> <span class="hl opt">(</span><span class="hl kwa">eq</span> line <span class="hl opt">'</span>eof<span class="hl opt">) (</span><span class="hl kwa">char</span><span class="hl opt">= (</span><span class="hl kwa">schar</span> line <span class="hl num">0</span><span class="hl opt">) #</span>\<span class="hl opt">&gt;)))</span>
      <span class="hl opt">(</span><span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwa">not</span> <span class="hl opt">(</span><span class="hl kwa">char</span><span class="hl opt">= (</span><span class="hl kwa">schar</span> line <span class="hl num">0</span><span class="hl opt">) #</span>\<span class="hl slc">;))</span>
          <span class="hl opt">(</span><span class="hl kwa">dotimes</span> <span class="hl opt">(</span><span class="hl kwa">char-index</span> <span class="hl opt">(</span><span class="hl kwa">length</span> line<span class="hl opt">))</span>
            <span class="hl opt">(</span><span class="hl kwa">vector-push-extend</span> <span class="hl opt">(</span><span class="hl kwa">char-upcase</span> <span class="hl opt">(</span><span class="hl kwa">the</span> base-char <span class="hl opt">(</span><span class="hl kwa">schar</span> line char-index<span class="hl opt">)))</span> data<span class="hl opt">))))</span>
    <span class="hl opt">(</span><span class="hl kwa">coerce</span> data <span class="hl opt">'</span>simple-base-string<span class="hl opt">)))</span>

<span class="hl opt">(</span><span class="hl kwa">defun</span> accumulate-frequencies <span class="hl opt">(</span><span class="hl kwa">hashmap</span> sequence offset fragment-length<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> <span class="hl opt">(</span><span class="hl kwa">integer</span> <span class="hl num">0 18</span><span class="hl opt">)</span> fragment-length<span class="hl opt">)</span>
           <span class="hl opt">(</span><span class="hl kwa">fixnum</span> offset<span class="hl opt">)</span>
           <span class="hl opt">(</span><span class="hl kwa">type</span> <span class="hl opt">(</span><span class="hl kwa">simple-base-string</span><span class="hl opt">)</span> sequence<span class="hl opt">))</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">((</span><span class="hl kwa">last-sequence-index</span> <span class="hl opt">(</span><span class="hl kwa">-</span> <span class="hl opt">(</span><span class="hl kwa">length</span> sequence<span class="hl opt">)</span> fragment-length<span class="hl opt">)))</span>
    <span class="hl opt">(</span><span class="hl kwa">do</span> <span class="hl opt">((</span><span class="hl kwa">start</span> offset <span class="hl opt">(+</span> start fragment-length<span class="hl opt">)))</span>
        <span class="hl opt">((&gt;</span> start last-sequence-index<span class="hl opt">))</span>
      <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">((</span><span class="hl kwa">fragment</span> <span class="hl opt">(</span><span class="hl kwa">subseq</span> sequence start <span class="hl opt">(+</span> start fragment-length<span class="hl opt">))))</span>
        <span class="hl opt">(</span><span class="hl kwa">setf</span> <span class="hl opt">(</span><span class="hl kwa">gethash</span> fragment hashmap<span class="hl opt">) (</span><span class="hl kwa">1</span><span class="hl opt">+ (</span><span class="hl kwa">the</span> <span class="hl opt">(</span><span class="hl kwa">integer</span> <span class="hl num">0 999999</span><span class="hl opt">) (</span><span class="hl kwa">gethash</span> fragment hashmap <span class="hl num">0</span><span class="hl opt">))))))))</span>

<span class="hl opt">(</span><span class="hl kwa">defun</span> calculate-frequencies <span class="hl opt">(</span><span class="hl kwa">sequence</span> fragment-length<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> <span class="hl opt">(</span><span class="hl kwa">integer</span> <span class="hl num">0 18</span><span class="hl opt">)</span> fragment-length<span class="hl opt">))</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">((</span><span class="hl kwa">hashmap</span> <span class="hl opt">(</span><span class="hl kwa">make-hash-table</span> <span class="hl opt">:</span>test <span class="hl opt">#'</span>equal<span class="hl opt">)))</span>
    <span class="hl opt">(</span><span class="hl kwa">dotimes</span> <span class="hl opt">(</span><span class="hl kwa">offset</span> fragment-length<span class="hl opt">)</span>
      <span class="hl opt">(</span><span class="hl kwa">accumulate-frequencies</span> hashmap sequence offset fragment-length<span class="hl opt">))</span>
    hashmap<span class="hl opt">))</span>

<span class="hl opt">(</span><span class="hl kwa">defun</span> write-frequencies <span class="hl opt">(</span><span class="hl kwa">sequence</span> length<span class="hl opt">)</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">((</span><span class="hl kwa">sorted-frequencies</span><span class="hl opt">)</span>
        <span class="hl opt">(</span><span class="hl kwa">sum</span> <span class="hl num">0</span><span class="hl opt">))</span>
    <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">fixnum</span> sum<span class="hl opt">))</span>
    <span class="hl opt">(</span><span class="hl kwa">maphash</span> <span class="hl opt">#'(</span><span class="hl kwa">lambda</span> <span class="hl opt">(</span><span class="hl kwa">k</span> v<span class="hl opt">)</span>
                 <span class="hl opt">(</span><span class="hl kwa">setf</span> sum <span class="hl opt">(+</span> sum <span class="hl opt">(</span><span class="hl kwa">the</span> fixnum v<span class="hl opt">)))</span>
                 <span class="hl opt">(</span><span class="hl kwa">setf</span> sorted-frequencies <span class="hl opt">(</span><span class="hl kwa">cons</span> <span class="hl opt">(</span><span class="hl kwa">cons</span> k v<span class="hl opt">)</span> sorted-frequencies<span class="hl opt">))) (</span><span class="hl kwa">calculate-frequencies</span> sequence length<span class="hl opt">))</span>
    <span class="hl opt">(</span><span class="hl kwa">setf</span> sorted-frequencies <span class="hl opt">(</span><span class="hl kwa">sort</span> sorted-frequencies <span class="hl opt">#'(</span><span class="hl kwa">lambda</span> <span class="hl opt">(</span><span class="hl kwa">v1</span> v2<span class="hl opt">)</span>
                                                          <span class="hl opt">(</span><span class="hl kwa">cond</span> <span class="hl opt">((&gt; (</span><span class="hl kwa">the</span> <span class="hl opt">(</span><span class="hl kwa">integer</span> <span class="hl num">0 999999</span><span class="hl opt">) (</span><span class="hl kwa">cdr</span> v1<span class="hl opt">)) (</span><span class="hl kwa">the</span> <span class="hl opt">(</span><span class="hl kwa">integer</span> <span class="hl num">0 999999</span><span class="hl opt">) (</span><span class="hl kwa">cdr</span> v2<span class="hl opt">)))</span> t<span class="hl opt">)</span>
                                                                <span class="hl opt">((&lt; (</span><span class="hl kwa">the</span> <span class="hl opt">(</span><span class="hl kwa">integer</span> <span class="hl num">0 999999</span><span class="hl opt">) (</span><span class="hl kwa">cdr</span> v1<span class="hl opt">)) (</span><span class="hl kwa">the</span> <span class="hl opt">(</span><span class="hl kwa">integer</span> <span class="hl num">0 999999</span><span class="hl opt">) (</span><span class="hl kwa">cdr</span> v2<span class="hl opt">)))</span> nil<span class="hl opt">)</span>
                                                                <span class="hl opt">(</span><span class="hl kwa">t</span> <span class="hl opt">(</span><span class="hl kwa">string</span><span class="hl opt">&lt; (</span><span class="hl kwa">car</span> v1<span class="hl opt">) (</span><span class="hl kwa">car</span> v2<span class="hl opt">)))))))</span>
    <span class="hl opt">(</span><span class="hl kwa">dolist</span> <span class="hl opt">(</span><span class="hl kwa">entry</span> sorted-frequencies<span class="hl opt">) (</span><span class="hl kwa">format</span> t <span class="hl str">&quot;~A ~,3F~%&quot;</span> <span class="hl opt">(</span><span class="hl kwa">car</span> entry<span class="hl opt">) (* (/ (</span><span class="hl kwa">the</span> <span class="hl opt">(</span><span class="hl kwa">integer</span> <span class="hl num">0 999999</span><span class="hl opt">) (</span><span class="hl kwa">cdr</span> entry<span class="hl opt">))</span> sum<span class="hl opt">)</span> <span class="hl num">100.0</span><span class="hl opt">)))</span>
    <span class="hl opt">(</span><span class="hl kwa">terpri</span><span class="hl opt">)))</span>

<span class="hl slc">;;</span>
<span class="hl slc">;; Delete this before including in the shootout, test method only.</span>
<span class="hl slc">;;</span>
<span class="hl slc">;;(defun test-main (filename)</span>
<span class="hl slc">;;  (with-open-file (stream filename)</span>
<span class="hl slc">;;    (let ((sequence (read-data stream)))</span>
<span class="hl slc">;;      (declare (type (simple-array * *) sequence))</span>
<span class="hl slc">;;      (dolist (entry '(1 2)) (write-frequencies sequence entry))</span>
<span class="hl slc">;;      (dolist (entry '(&quot;GGT&quot; &quot;GGTA&quot; &quot;GGTATT&quot; &quot;GGTATTTTAATT&quot; &quot;GGTATTTTAATTTATAGT&quot;))</span>
<span class="hl slc">;;        (declare (type (simple-array * *) entry))</span>
<span class="hl slc">;;        (format t &quot;~A~C~A~%&quot; (gethash entry (calculate-frequencies sequence (length entry)) 0) #\Tab entry)))))</span>

<span class="hl opt">(</span><span class="hl kwa">defun</span> main <span class="hl opt">()</span>
  <span class="hl opt">(</span><span class="hl kwa">let</span> <span class="hl opt">((</span><span class="hl kwa">sequence</span> <span class="hl opt">(</span><span class="hl kwa">read-data</span> <span class="hl opt">*</span>standard-input<span class="hl opt">*)))</span>
    <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> <span class="hl opt">(</span><span class="hl kwa">simple-array</span> <span class="hl opt">* *)</span> sequence<span class="hl opt">))</span>
    <span class="hl opt">(</span><span class="hl kwa">dolist</span> <span class="hl opt">(</span><span class="hl kwa">entry</span> <span class="hl opt">'(</span><span class="hl kwa">1</span> <span class="hl num">2</span><span class="hl opt">)) (</span><span class="hl kwa">write-frequencies</span> sequence entry<span class="hl opt">))</span>
    <span class="hl opt">(</span><span class="hl kwa">dolist</span> <span class="hl opt">(</span><span class="hl kwa">entry</span> <span class="hl opt">'(</span><span class="hl str">&quot;GGT&quot;</span> <span class="hl str">&quot;GGTA&quot;</span> <span class="hl str">&quot;GGTATT&quot;</span> <span class="hl str">&quot;GGTATTTTAATT&quot;</span> <span class="hl str">&quot;GGTATTTTAATTTATAGT&quot;</span><span class="hl opt">))</span>
      <span class="hl opt">(</span><span class="hl kwa">declare</span> <span class="hl opt">(</span><span class="hl kwa">type</span> <span class="hl opt">(</span><span class="hl kwa">simple-array</span> <span class="hl opt">* *)</span> entry<span class="hl opt">))</span>
      <span class="hl opt">(</span><span class="hl kwa">format</span> t <span class="hl str">&quot;~A~C~A~%&quot;</span>
              <span class="hl opt">(</span><span class="hl kwa">gethash</span> entry <span class="hl opt">(</span><span class="hl kwa">calculate-frequencies</span> sequence <span class="hl opt">(</span><span class="hl kwa">length</span> entry<span class="hl opt">))</span> <span class="hl num">0</span><span class="hl opt">)</span>
              <span class="hl opt">#</span>\Tab entry<span class="hl opt">))))</span>
