<span class="hl com">/*</span>
<span class="hl com"> * The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> * contributed by Greg Haines</span>
<span class="hl com"> * based on work by Michael Stover</span>
<span class="hl com"> */</span>

<span class="hl kwa">import</span> java<span class="hl sym">.</span>io<span class="hl sym">.</span><span class="hl kwc">BufferedReader</span><span class="hl sym">;</span>
<span class="hl kwa">import</span> java<span class="hl sym">.</span>io<span class="hl sym">.</span><span class="hl kwc">IOException</span><span class="hl sym">;</span>
<span class="hl kwa">import</span> java<span class="hl sym">.</span>io<span class="hl sym">.</span><span class="hl kwc">InputStreamReader</span><span class="hl sym">;</span>
<span class="hl kwa">import</span> java<span class="hl sym">.</span>nio<span class="hl sym">.</span>charset<span class="hl sym">.</span><span class="hl kwc">Charset</span><span class="hl sym">;</span>
<span class="hl kwa">import</span> java<span class="hl sym">.</span>util<span class="hl sym">.</span><span class="hl kwc">HashMap</span><span class="hl sym">;</span>
<span class="hl kwa">import</span> java<span class="hl sym">.</span>util<span class="hl sym">.</span><span class="hl kwc">Map</span><span class="hl sym">;</span>
<span class="hl kwa">import</span> java<span class="hl sym">.</span>util<span class="hl sym">.</span>concurrent<span class="hl sym">.</span>atomic<span class="hl sym">.</span><span class="hl kwc">AtomicInteger</span><span class="hl sym">;</span>
<span class="hl kwa">import</span> java<span class="hl sym">.</span>util<span class="hl sym">.</span>regex<span class="hl sym">.</span><span class="hl kwc">Matcher</span><span class="hl sym">;</span>
<span class="hl kwa">import</span> java<span class="hl sym">.</span>util<span class="hl sym">.</span>regex<span class="hl sym">.</span><span class="hl kwc">Pattern</span><span class="hl sym">;</span>

<span class="hl kwa">public final class</span> regexdna
<span class="hl sym">{</span>
   <span class="hl kwa">private static final</span> <span class="hl kwc">Map</span><span class="hl sym">&lt;</span><span class="hl kwc">String</span><span class="hl sym">,</span><span class="hl kwc">String</span><span class="hl sym">&gt;</span> replacements <span class="hl sym">=</span> 
      <span class="hl kwa">new</span> <span class="hl kwc">HashMap</span><span class="hl sym">&lt;</span><span class="hl kwc">String</span><span class="hl sym">,</span><span class="hl kwc">String</span><span class="hl sym">&gt;(</span><span class="hl num">11</span><span class="hl sym">);</span>
   <span class="hl kwa">private static final</span> <span class="hl kwc">Pattern</span> newSeqPattern <span class="hl sym">=</span> 
      <span class="hl kwc">Pattern</span><span class="hl sym">.</span><span class="hl kwd">compile</span><span class="hl sym">(</span><span class="hl str">&quot;[WYKMSRBDVHN]&quot;</span><span class="hl sym">);</span>
   <span class="hl kwa">private static final</span> <span class="hl kwc">String</span><span class="hl sym">[]</span> variants <span class="hl sym">= {</span> 
      <span class="hl str">&quot;agggtaaa|tttaccct&quot;</span><span class="hl sym">,</span> 
      <span class="hl str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span><span class="hl sym">,</span>
      <span class="hl str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span><span class="hl sym">,</span>
      <span class="hl str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span><span class="hl sym">,</span>
      <span class="hl str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span><span class="hl sym">,</span>
      <span class="hl str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span><span class="hl sym">,</span>
      <span class="hl str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span><span class="hl sym">,</span>
      <span class="hl str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span><span class="hl sym">,</span>
      <span class="hl str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span>
   <span class="hl sym">};</span>

   <span class="hl kwa">static</span>
   <span class="hl sym">{</span>
      replacements<span class="hl sym">.</span><span class="hl kwd">put</span><span class="hl sym">(</span><span class="hl str">&quot;W&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|t)&quot;</span><span class="hl sym">);</span>
      replacements<span class="hl sym">.</span><span class="hl kwd">put</span><span class="hl sym">(</span><span class="hl str">&quot;Y&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(c|t)&quot;</span><span class="hl sym">);</span>
      replacements<span class="hl sym">.</span><span class="hl kwd">put</span><span class="hl sym">(</span><span class="hl str">&quot;K&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(g|t)&quot;</span><span class="hl sym">);</span>
      replacements<span class="hl sym">.</span><span class="hl kwd">put</span><span class="hl sym">(</span><span class="hl str">&quot;M&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|c)&quot;</span><span class="hl sym">);</span>
      replacements<span class="hl sym">.</span><span class="hl kwd">put</span><span class="hl sym">(</span><span class="hl str">&quot;S&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(c|g)&quot;</span><span class="hl sym">);</span>
      replacements<span class="hl sym">.</span><span class="hl kwd">put</span><span class="hl sym">(</span><span class="hl str">&quot;R&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|g)&quot;</span><span class="hl sym">);</span>
      replacements<span class="hl sym">.</span><span class="hl kwd">put</span><span class="hl sym">(</span><span class="hl str">&quot;B&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(c|g|t)&quot;</span><span class="hl sym">);</span>
      replacements<span class="hl sym">.</span><span class="hl kwd">put</span><span class="hl sym">(</span><span class="hl str">&quot;D&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|g|t)&quot;</span><span class="hl sym">);</span>
      replacements<span class="hl sym">.</span><span class="hl kwd">put</span><span class="hl sym">(</span><span class="hl str">&quot;V&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|c|g)&quot;</span><span class="hl sym">);</span>
      replacements<span class="hl sym">.</span><span class="hl kwd">put</span><span class="hl sym">(</span><span class="hl str">&quot;H&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|c|t)&quot;</span><span class="hl sym">);</span>
      replacements<span class="hl sym">.</span><span class="hl kwd">put</span><span class="hl sym">(</span><span class="hl str">&quot;N&quot;</span><span class="hl sym">,</span> <span class="hl str">&quot;(a|c|g|t)&quot;</span><span class="hl sym">);</span>
   <span class="hl sym">}</span>
   
   <span class="hl kwa">private static final class</span> NewSeqThread <span class="hl kwa">extends</span> <span class="hl kwc">Thread</span>
   <span class="hl sym">{</span>
      <span class="hl kwa">private final</span> <span class="hl kwc">String</span> sequence<span class="hl sym">;</span>
      <span class="hl kwa">private final</span> <span class="hl kwc">AtomicInteger</span> newSeqLength<span class="hl sym">;</span>
      <span class="hl kwa">private final</span> <span class="hl kwc">AtomicInteger</span> inputLength<span class="hl sym">;</span>

      <span class="hl kwa">private</span> <span class="hl kwd">NewSeqThread</span><span class="hl sym">(</span><span class="hl kwa">final</span> <span class="hl kwc">ThreadGroup</span> threadGroup<span class="hl sym">,</span> 
            <span class="hl kwa">final</span> <span class="hl kwc">String</span> sequence<span class="hl sym">,</span> <span class="hl kwa">final</span> <span class="hl kwc">AtomicInteger</span> newSeqLength<span class="hl sym">,</span> 
            <span class="hl kwa">final</span> <span class="hl kwc">AtomicInteger</span> inputLength<span class="hl sym">)</span>
      <span class="hl sym">{</span>
         <span class="hl kwa">super</span><span class="hl sym">(</span>threadGroup<span class="hl sym">,</span> <span class="hl str">&quot;newSeq&quot;</span><span class="hl sym">);</span>
         <span class="hl kwa">this</span><span class="hl sym">.</span>sequence <span class="hl sym">=</span> sequence<span class="hl sym">;</span>
         <span class="hl kwa">this</span><span class="hl sym">.</span>newSeqLength <span class="hl sym">=</span> newSeqLength<span class="hl sym">;</span>
         <span class="hl kwa">this</span><span class="hl sym">.</span>inputLength <span class="hl sym">=</span> inputLength<span class="hl sym">;</span>
      <span class="hl sym">}</span>

      &#64;Override
      <span class="hl kwa">public final</span> <span class="hl kwb">void</span> <span class="hl kwd">run</span><span class="hl sym">()</span>
      <span class="hl sym">{</span>
         <span class="hl kwa">final</span> <span class="hl kwc">StringBuffer</span> buf <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">StringBuffer</span><span class="hl sym">(</span>
            <span class="hl sym">(</span><span class="hl kwb">int</span><span class="hl sym">)(</span><span class="hl kwa">this</span><span class="hl sym">.</span>inputLength<span class="hl sym">.</span><span class="hl kwd">get</span><span class="hl sym">() *</span> <span class="hl num">1.32</span><span class="hl sym">));</span>
         <span class="hl kwa">final</span> <span class="hl kwc">Matcher</span> m <span class="hl sym">=</span> newSeqPattern<span class="hl sym">.</span><span class="hl kwd">matcher</span><span class="hl sym">(</span><span class="hl kwa">this</span><span class="hl sym">.</span>sequence<span class="hl sym">);</span>
         <span class="hl kwa">while</span> <span class="hl sym">(</span>m<span class="hl sym">.</span><span class="hl kwd">find</span><span class="hl sym">())</span>
         <span class="hl sym">{</span>
            m<span class="hl sym">.</span><span class="hl kwd">appendReplacement</span><span class="hl sym">(</span>buf<span class="hl sym">,</span> <span class="hl str">&quot;&quot;</span><span class="hl sym">);</span>
            buf<span class="hl sym">.</span><span class="hl kwd">append</span><span class="hl sym">(</span>replacements<span class="hl sym">.</span><span class="hl kwd">get</span><span class="hl sym">(</span>m<span class="hl sym">.</span><span class="hl kwd">group</span><span class="hl sym">()));</span>
         <span class="hl sym">}</span>
         m<span class="hl sym">.</span><span class="hl kwd">appendTail</span><span class="hl sym">(</span>buf<span class="hl sym">);</span>
         <span class="hl kwa">this</span><span class="hl sym">.</span>newSeqLength<span class="hl sym">.</span><span class="hl kwd">set</span><span class="hl sym">(</span>buf<span class="hl sym">.</span><span class="hl kwd">length</span><span class="hl sym">());</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">private static final class</span> VariantThread <span class="hl kwa">extends</span> <span class="hl kwc">Thread</span>
   <span class="hl sym">{</span>
      <span class="hl kwa">private final</span> <span class="hl kwc">Map</span><span class="hl sym">&lt;</span><span class="hl kwc">String</span><span class="hl sym">,</span><span class="hl kwc">Integer</span><span class="hl sym">&gt;</span> results<span class="hl sym">;</span>
      <span class="hl kwa">private final</span> <span class="hl kwc">String</span> variant<span class="hl sym">;</span>
      <span class="hl kwa">private final</span> <span class="hl kwc">String</span> sequence<span class="hl sym">;</span>

      <span class="hl kwa">private</span> <span class="hl kwd">VariantThread</span><span class="hl sym">(</span><span class="hl kwa">final</span> <span class="hl kwc">ThreadGroup</span> threadGroup<span class="hl sym">,</span> 
            <span class="hl kwa">final</span> <span class="hl kwc">String</span> name<span class="hl sym">,</span> <span class="hl kwa">final</span> <span class="hl kwc">Map</span><span class="hl sym">&lt;</span><span class="hl kwc">String</span><span class="hl sym">,</span><span class="hl kwc">Integer</span><span class="hl sym">&gt;</span> results<span class="hl sym">,</span> 
            <span class="hl kwa">final</span> <span class="hl kwc">String</span> variant<span class="hl sym">,</span> <span class="hl kwa">final</span> <span class="hl kwc">String</span> sequence<span class="hl sym">)</span>
      <span class="hl sym">{</span>
         <span class="hl kwa">super</span><span class="hl sym">(</span>threadGroup<span class="hl sym">,</span> name<span class="hl sym">);</span>
         <span class="hl kwa">this</span><span class="hl sym">.</span>results <span class="hl sym">=</span> results<span class="hl sym">;</span>
         <span class="hl kwa">this</span><span class="hl sym">.</span>variant <span class="hl sym">=</span> variant<span class="hl sym">;</span>
         <span class="hl kwa">this</span><span class="hl sym">.</span>sequence <span class="hl sym">=</span> sequence<span class="hl sym">;</span>
      <span class="hl sym">}</span>

      &#64;Override
      <span class="hl kwa">public final</span> <span class="hl kwb">void</span> <span class="hl kwd">run</span><span class="hl sym">()</span>
      <span class="hl sym">{</span>
         <span class="hl kwb">int</span> count <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
         <span class="hl kwa">final</span> <span class="hl kwc">Matcher</span> m <span class="hl sym">=</span> <span class="hl kwc">Pattern</span><span class="hl sym">.</span><span class="hl kwd">compile</span><span class="hl sym">(</span><span class="hl kwa">this</span><span class="hl sym">.</span>variant<span class="hl sym">)</span>
                        <span class="hl sym">.</span><span class="hl kwd">matcher</span><span class="hl sym">(</span><span class="hl kwa">this</span><span class="hl sym">.</span>sequence<span class="hl sym">);</span>
         <span class="hl kwa">while</span> <span class="hl sym">(</span>m<span class="hl sym">.</span><span class="hl kwd">find</span><span class="hl sym">())</span>
         <span class="hl sym">{</span>
            count<span class="hl sym">++;</span>
         <span class="hl sym">}</span>
         <span class="hl kwa">this</span><span class="hl sym">.</span>results<span class="hl sym">.</span><span class="hl kwd">put</span><span class="hl sym">(</span><span class="hl kwa">this</span><span class="hl sym">.</span>variant<span class="hl sym">,</span> count<span class="hl sym">);</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>
   
   <span class="hl kwa">private static</span> <span class="hl kwc">String</span> <span class="hl kwd">readInput</span><span class="hl sym">(</span><span class="hl kwa">final</span> <span class="hl kwc">AtomicInteger</span> inputLength<span class="hl sym">,</span> 
         <span class="hl kwa">final</span> <span class="hl kwc">AtomicInteger</span> seqLength<span class="hl sym">)</span>
   <span class="hl kwa">throws</span> <span class="hl kwc">IOException</span>
   <span class="hl sym">{</span>
      <span class="hl kwa">final</span> <span class="hl kwc">StringBuilder</span> sb <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">StringBuilder</span><span class="hl sym">(</span><span class="hl num">10000000</span><span class="hl sym">);</span>
      <span class="hl kwa">final</span> <span class="hl kwc">BufferedReader</span> r <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">BufferedReader</span><span class="hl sym">(</span>
         <span class="hl kwa">new</span> <span class="hl kwc">InputStreamReader</span><span class="hl sym">(</span><span class="hl kwc">System</span><span class="hl sym">.</span><span class="hl kwa">in</span><span class="hl sym">,</span> <span class="hl kwc">Charset</span><span class="hl sym">.</span><span class="hl kwd">defaultCharset</span><span class="hl sym">()));</span>
      <span class="hl kwb">int</span> commentLength <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
      <span class="hl kwa">try</span>
      <span class="hl sym">{</span>
         <span class="hl kwc">String</span> line<span class="hl sym">;</span>
         <span class="hl kwa">while</span> <span class="hl sym">((</span>line <span class="hl sym">=</span> r<span class="hl sym">.</span><span class="hl kwd">readLine</span><span class="hl sym">()) !=</span> null<span class="hl sym">)</span>
         <span class="hl sym">{</span>
            <span class="hl kwa">if</span> <span class="hl sym">(</span>line<span class="hl sym">.</span><span class="hl kwd">charAt</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">) ==</span> <span class="hl str">'&gt;'</span><span class="hl sym">)</span>
            <span class="hl sym">{</span>
               commentLength <span class="hl sym">+=</span> line<span class="hl sym">.</span><span class="hl kwd">length</span><span class="hl sym">() +</span> <span class="hl num">1</span><span class="hl sym">;</span>
            <span class="hl sym">}</span>
            <span class="hl kwa">else</span>
            <span class="hl sym">{</span>
               sb<span class="hl sym">.</span><span class="hl kwd">append</span><span class="hl sym">(</span>line<span class="hl sym">);</span>
               commentLength <span class="hl sym">+=</span> <span class="hl num">1</span><span class="hl sym">;</span>
            <span class="hl sym">}</span>
         <span class="hl sym">}</span>
      <span class="hl sym">}</span>
      <span class="hl kwa">finally</span>
      <span class="hl sym">{</span>
         r<span class="hl sym">.</span><span class="hl kwd">close</span><span class="hl sym">();</span>
      <span class="hl sym">}</span>
      seqLength<span class="hl sym">.</span><span class="hl kwd">set</span><span class="hl sym">(</span>sb<span class="hl sym">.</span><span class="hl kwd">length</span><span class="hl sym">());</span>
      inputLength<span class="hl sym">.</span><span class="hl kwd">set</span><span class="hl sym">(</span>seqLength<span class="hl sym">.</span><span class="hl kwd">get</span><span class="hl sym">() +</span> commentLength<span class="hl sym">);</span>
      <span class="hl kwa">return</span> sb<span class="hl sym">.</span><span class="hl kwd">toString</span><span class="hl sym">();</span>
   <span class="hl sym">}</span>
   
   <span class="hl kwa">private static</span> <span class="hl kwb">void</span> <span class="hl kwd">awaitThreads</span><span class="hl sym">(</span><span class="hl kwa">final</span> <span class="hl kwc">ThreadGroup</span> tg<span class="hl sym">)</span>
   <span class="hl sym">{</span>
      <span class="hl kwa">final</span> <span class="hl kwc">Thread</span><span class="hl sym">[]</span> threads <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">Thread</span><span class="hl sym">[</span>variants<span class="hl sym">.</span>length<span class="hl sym">];</span>
      tg<span class="hl sym">.</span><span class="hl kwd">enumerate</span><span class="hl sym">(</span>threads<span class="hl sym">);</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwa">final</span> <span class="hl kwc">Thread</span> thread <span class="hl sym">:</span> threads<span class="hl sym">)</span>
      <span class="hl sym">{</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span>thread <span class="hl sym">!=</span> null<span class="hl sym">)</span>
         <span class="hl sym">{</span>
            <span class="hl kwa">while</span> <span class="hl sym">(</span>thread<span class="hl sym">.</span><span class="hl kwd">isAlive</span><span class="hl sym">())</span>
            <span class="hl sym">{</span>
               <span class="hl kwa">try</span> <span class="hl sym">{</span> thread<span class="hl sym">.</span><span class="hl kwd">join</span><span class="hl sym">(); }</span> <span class="hl kwa">catch</span> <span class="hl sym">(</span><span class="hl kwc">InterruptedException</span> ie<span class="hl sym">){}</span>
            <span class="hl sym">}</span>
         <span class="hl sym">}</span>
      <span class="hl sym">}</span>
      tg<span class="hl sym">.</span><span class="hl kwd">destroy</span><span class="hl sym">();</span>
   <span class="hl sym">}</span>

   <span class="hl kwa">public static</span> <span class="hl kwb">void</span> <span class="hl kwd">main</span><span class="hl sym">(</span><span class="hl kwa">final</span> <span class="hl kwc">String</span><span class="hl sym">[]</span> args<span class="hl sym">)</span>
   <span class="hl kwa">throws</span> <span class="hl kwc">IOException</span>
   <span class="hl sym">{</span>
      <span class="hl kwa">final</span> <span class="hl kwc">AtomicInteger</span> inputLength <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">AtomicInteger</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">);</span>
      <span class="hl kwa">final</span> <span class="hl kwc">AtomicInteger</span> seqLength <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">AtomicInteger</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">);</span>
      <span class="hl kwa">final</span> <span class="hl kwc">AtomicInteger</span> newSeqLength <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">AtomicInteger</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">);</span>
      <span class="hl kwa">final</span> <span class="hl kwc">Map</span><span class="hl sym">&lt;</span><span class="hl kwc">String</span><span class="hl sym">,</span><span class="hl kwc">Integer</span><span class="hl sym">&gt;</span> results <span class="hl sym">=</span> 
         <span class="hl kwa">new</span> <span class="hl kwc">HashMap</span><span class="hl sym">&lt;</span><span class="hl kwc">String</span><span class="hl sym">,</span><span class="hl kwc">Integer</span><span class="hl sym">&gt;(</span>variants<span class="hl sym">.</span>length<span class="hl sym">);</span>
      <span class="hl sym">{</span>
         <span class="hl kwa">final</span> <span class="hl kwc">ThreadGroup</span> threadGroup <span class="hl sym">=</span> <span class="hl kwa">new</span> <span class="hl kwc">ThreadGroup</span><span class="hl sym">(</span><span class="hl str">&quot;regexWork&quot;</span><span class="hl sym">);</span>
         <span class="hl sym">{</span>
            <span class="hl kwa">final</span> <span class="hl kwc">String</span> sequence <span class="hl sym">=</span> <span class="hl kwd">readInput</span><span class="hl sym">(</span>inputLength<span class="hl sym">,</span> seqLength<span class="hl sym">);</span>
            <span class="hl kwa">new</span> <span class="hl kwd">NewSeqThread</span><span class="hl sym">(</span>threadGroup<span class="hl sym">,</span> sequence<span class="hl sym">,</span> 
               newSeqLength<span class="hl sym">,</span> inputLength<span class="hl sym">).</span><span class="hl kwd">start</span><span class="hl sym">();</span>
            <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwa">final</span> <span class="hl kwc">String</span> variant <span class="hl sym">:</span> variants<span class="hl sym">)</span>
            <span class="hl sym">{</span>
               <span class="hl kwa">new</span> <span class="hl kwd">VariantThread</span><span class="hl sym">(</span>threadGroup<span class="hl sym">,</span> variant<span class="hl sym">,</span> results<span class="hl sym">,</span> 
                  variant<span class="hl sym">,</span> sequence<span class="hl sym">).</span><span class="hl kwd">start</span><span class="hl sym">();</span>
            <span class="hl sym">}</span>
         <span class="hl sym">}</span>
         <span class="hl kwd">awaitThreads</span><span class="hl sym">(</span>threadGroup<span class="hl sym">);</span>
      <span class="hl sym">}</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwa">final</span> <span class="hl kwc">String</span> variant <span class="hl sym">:</span> variants<span class="hl sym">)</span>
      <span class="hl sym">{</span>
         <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">(</span>variant <span class="hl sym">+</span> <span class="hl str">&quot; &quot;</span> <span class="hl sym">+</span> results<span class="hl sym">.</span><span class="hl kwd">get</span><span class="hl sym">(</span>variant<span class="hl sym">));</span>
      <span class="hl sym">}</span>
      <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">();</span>
      <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">(</span>inputLength<span class="hl sym">.</span><span class="hl kwd">get</span><span class="hl sym">());</span>
      <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">(</span>seqLength<span class="hl sym">.</span><span class="hl kwd">get</span><span class="hl sym">());</span>
      <span class="hl kwc">System</span><span class="hl sym">.</span>out<span class="hl sym">.</span><span class="hl kwd">println</span><span class="hl sym">(</span>newSeqLength<span class="hl sym">.</span><span class="hl kwd">get</span><span class="hl sym">());</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>
