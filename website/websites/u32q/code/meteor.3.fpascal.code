<span class="hl kwa">program</span> meteorshower<span class="hl opt">;</span>

<span class="hl com">{ The Computer Language Benchmarks Game</span>
<span class="hl com">  http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">  contributed by Daniel Mantione</span>
<span class="hl com">  modified by Vincent Snijders</span>
<span class="hl com">}</span>


<span class="hl kwa">uses</span> dos<span class="hl opt">;</span>

<span class="hl kwa">const</span> N_COL <span class="hl opt">=</span> <span class="hl num">5</span><span class="hl opt">;</span>
      N_ROW <span class="hl opt">=</span> <span class="hl num">10</span><span class="hl opt">;</span>
      N_CELL <span class="hl opt">=</span> N_COL <span class="hl opt">*</span> N_ROW<span class="hl opt">;</span>
      N_PIECE_TYPE <span class="hl opt">=</span> <span class="hl num">10</span><span class="hl opt">;</span>

      N_ELEM<span class="hl opt">=</span><span class="hl num">5</span><span class="hl opt">;</span>
      N_ORIENT<span class="hl opt">=</span><span class="hl num">12</span><span class="hl opt">;</span>
      ALL_PIECE_MASK<span class="hl opt">=[</span><span class="hl num">0</span><span class="hl opt">..</span>N_PIECE_TYPE<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">];</span>
      SKIP_PIECE<span class="hl opt">=</span><span class="hl num">5</span><span class="hl opt">;</span>

      no_piece<span class="hl opt">=</span><span class="hl kwd">high</span><span class="hl opt">(</span><span class="hl kwb">byte</span><span class="hl opt">);</span>

      L_EDGE_MASK<span class="hl opt">=[</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">5</span><span class="hl opt">,</span><span class="hl num">10</span><span class="hl opt">,</span><span class="hl num">15</span><span class="hl opt">,</span><span class="hl num">20</span><span class="hl opt">,</span><span class="hl num">25</span><span class="hl opt">,</span><span class="hl num">30</span><span class="hl opt">];</span>
      R_EDGE_MASK<span class="hl opt">=[</span><span class="hl num">4</span><span class="hl opt">,</span><span class="hl num">9</span><span class="hl opt">,</span><span class="hl num">14</span><span class="hl opt">,</span><span class="hl num">19</span><span class="hl opt">,</span><span class="hl num">24</span><span class="hl opt">,</span><span class="hl num">29</span><span class="hl opt">];</span>
      TOP_ROW    <span class="hl opt">= [</span><span class="hl num">0</span><span class="hl opt">*</span>N_COL<span class="hl opt">.</span><span class="hl num">.1</span><span class="hl opt">*</span>N_COL<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">];</span>
      SECOND_ROW <span class="hl opt">= [</span><span class="hl num">1</span><span class="hl opt">*</span>N_COL<span class="hl opt">.</span><span class="hl num">.2</span><span class="hl opt">*</span>N_COL<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">];</span>
      THIRD_ROW  <span class="hl opt">= [</span><span class="hl num">2</span><span class="hl opt">*</span>N_COL<span class="hl opt">.</span><span class="hl num">.3</span><span class="hl opt">*</span>N_COL<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">];</span>
      FOURTH_ROW <span class="hl opt">= [</span><span class="hl num">3</span><span class="hl opt">*</span>N_COL<span class="hl opt">.</span><span class="hl num">.4</span><span class="hl opt">*</span>N_COL<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">];</span>
      FIFTH_ROW  <span class="hl opt">= [</span><span class="hl num">4</span><span class="hl opt">*</span>N_COL<span class="hl opt">.</span><span class="hl num">.5</span><span class="hl opt">*</span>N_COL<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">];</span>
      SIXTH_ROW  <span class="hl opt">= [</span><span class="hl num">5</span><span class="hl opt">*</span>N_COL<span class="hl opt">.</span><span class="hl num">.6</span><span class="hl opt">*</span>N_COL<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">];</span>
      LAST_ROW   <span class="hl opt">=</span> SIXTH_ROW<span class="hl opt">;</span>
      ROW_0_MASK<span class="hl opt">=[</span><span class="hl num">0</span><span class="hl opt">..</span>N_COL<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">10</span><span class="hl opt">..</span>N_COL<span class="hl opt">+</span><span class="hl num">10</span><span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">20</span><span class="hl opt">..</span>N_COL<span class="hl opt">+</span><span class="hl num">20</span><span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">30</span><span class="hl opt">,</span><span class="hl num">31</span><span class="hl opt">];</span>
      ROW_1_MASK<span class="hl opt">=[</span><span class="hl num">5</span><span class="hl opt">..</span>N_COL<span class="hl opt">+</span><span class="hl num">5</span><span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">15</span><span class="hl opt">..</span>N_COL<span class="hl opt">+</span><span class="hl num">15</span><span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">25</span><span class="hl opt">..</span>N_COL<span class="hl opt">+</span><span class="hl num">25</span><span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">];</span>
      BOARD_MASK<span class="hl opt">=[</span><span class="hl num">0</span><span class="hl opt">.</span><span class="hl num">.29</span><span class="hl opt">];</span>


<span class="hl kwa">type</span>  bitvec<span class="hl opt">=</span><span class="hl kwa">set of</span> <span class="hl num">0</span><span class="hl opt">.</span><span class="hl num">.31</span><span class="hl opt">;</span>
      dimensions<span class="hl opt">=(</span>dimx<span class="hl opt">,</span>dimy<span class="hl opt">);</span>
      parity<span class="hl opt">=(</span>even<span class="hl opt">,</span>odd<span class="hl opt">);</span>
      goodbad<span class="hl opt">=(</span>good<span class="hl opt">,</span>bad<span class="hl opt">,</span>always_bad<span class="hl opt">);</span>
      piecenr<span class="hl opt">=</span><span class="hl kwa">type</span> <span class="hl num">0</span><span class="hl opt">..</span>N_PIECE_TYPE<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">;</span>
      orientation<span class="hl opt">=</span><span class="hl kwa">type</span> <span class="hl num">0</span><span class="hl opt">..</span>N_ORIENT<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">;</span>

      piece_placement<span class="hl opt">=</span><span class="hl kwa">record</span>
        vec<span class="hl opt">:</span>bitvec<span class="hl opt">;</span>
        ipiece<span class="hl opt">:</span>piecenr<span class="hl opt">;</span>
        row<span class="hl opt">:</span><span class="hl kwb">byte</span><span class="hl opt">;</span>
      <span class="hl kwa">end</span><span class="hl opt">;</span>

<span class="hl kwa">type</span> Soln<span class="hl opt">=</span><span class="hl kwa">object</span>
       m_pieces<span class="hl opt">:</span><span class="hl kwa">array</span><span class="hl opt">[</span>piecenr<span class="hl opt">]</span> <span class="hl kwa">of</span> piece_placement<span class="hl opt">;</span>
       m_npiece<span class="hl opt">:</span><span class="hl kwb">byte</span><span class="hl opt">;</span>
       m_cells<span class="hl opt">:</span><span class="hl kwa">array</span><span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">..</span>N_ROW<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">0</span><span class="hl opt">..</span>N_COL<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">]</span> <span class="hl kwa">of</span> piecenr<span class="hl opt">;</span>
       m_synched<span class="hl opt">:</span><span class="hl kwb">boolean</span><span class="hl opt">;</span>
       <span class="hl kwa">constructor</span> <span class="hl kwd">init</span><span class="hl opt">(</span>fillval<span class="hl opt">:</span><span class="hl kwb">byte</span><span class="hl opt">);</span>
       <span class="hl kwa">procedure</span> setCells<span class="hl opt">;</span>
       <span class="hl kwa">function</span> <span class="hl kwd">lessThan</span><span class="hl opt">(</span><span class="hl kwa">var</span> r<span class="hl opt">:</span>Soln<span class="hl opt">):</span><span class="hl kwb">boolean</span><span class="hl opt">;</span>
       <span class="hl kwa">procedure</span> <span class="hl kwd">write</span><span class="hl opt">(</span><span class="hl kwa">var</span> f<span class="hl opt">:</span><span class="hl kwb">text</span><span class="hl opt">);</span>
       <span class="hl kwa">procedure</span> <span class="hl kwd">fill</span><span class="hl opt">(</span>value<span class="hl opt">:</span><span class="hl kwb">byte</span><span class="hl opt">);</span>
       <span class="hl kwa">procedure</span> <span class="hl kwd">spin</span><span class="hl opt">(</span><span class="hl kwa">var</span> spun<span class="hl opt">:</span>Soln<span class="hl opt">);</span>

       <span class="hl kwa">function</span> isEmpty<span class="hl opt">:</span><span class="hl kwb">boolean</span><span class="hl opt">;</span>
       <span class="hl kwa">procedure</span> popPiece<span class="hl opt">;</span><span class="hl kwa">inline</span><span class="hl opt">;</span>
       <span class="hl kwa">procedure</span> <span class="hl kwd">pushPiece</span><span class="hl opt">(</span>Avec<span class="hl opt">:</span>bitvec<span class="hl opt">;</span>AiPiece<span class="hl opt">:</span>piecenr<span class="hl opt">;</span>Arow<span class="hl opt">:</span><span class="hl kwb">byte</span><span class="hl opt">);</span>
     <span class="hl kwa">end</span><span class="hl opt">;</span>

     instance<span class="hl opt">=</span><span class="hl kwa">record</span>
       m_allowed<span class="hl opt">:</span><span class="hl kwa">set of</span> <span class="hl kwb">byte</span><span class="hl opt">;</span>
       m_vec<span class="hl opt">:</span>bitvec<span class="hl opt">;</span>
       m_offset<span class="hl opt">:</span><span class="hl kwb">longint</span><span class="hl opt">;</span>
     <span class="hl kwa">end</span><span class="hl opt">;</span>

     TPts<span class="hl opt">=</span><span class="hl kwa">array</span><span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">..</span>N_ELEM<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">,</span>dimensions<span class="hl opt">]</span> <span class="hl kwa">of</span> shortint<span class="hl opt">;</span>
     piece<span class="hl opt">=</span><span class="hl kwa">object</span>
       m_instance<span class="hl opt">:</span><span class="hl kwa">array</span><span class="hl opt">[</span>parity<span class="hl opt">]</span> <span class="hl kwa">of</span> instance<span class="hl opt">;</span>
       <span class="hl kwa">procedure</span> <span class="hl kwd">set_ok_positions</span><span class="hl opt">(</span>isOdd<span class="hl opt">:</span>parity<span class="hl opt">;</span>w<span class="hl opt">,</span>h<span class="hl opt">:</span><span class="hl kwb">longint</span><span class="hl opt">);</span>
     <span class="hl kwa">end</span><span class="hl opt">;</span>

     OkPieces<span class="hl opt">=</span><span class="hl kwa">record</span>
       nPieces<span class="hl opt">:</span><span class="hl kwa">array</span><span class="hl opt">[</span>piecenr<span class="hl opt">]</span> <span class="hl kwa">of</span> <span class="hl kwb">byte</span><span class="hl opt">;</span>
       pieceVec<span class="hl opt">:</span><span class="hl kwa">array</span><span class="hl opt">[</span>piecenr<span class="hl opt">,</span>orientation<span class="hl opt">]</span> <span class="hl kwa">of</span> bitvec<span class="hl opt">;</span>
     <span class="hl kwa">end</span><span class="hl opt">;</span>


<span class="hl kwa">type</span>  fixed<span class="hl opt">=(</span>OPEN<span class="hl opt">,</span> CLOSED<span class="hl opt">);</span>
      islandinfo<span class="hl opt">=</span><span class="hl kwa">record</span>
        has_bad<span class="hl opt">:</span><span class="hl kwa">array</span><span class="hl opt">[</span>fixed<span class="hl opt">,</span>parity<span class="hl opt">]</span> <span class="hl kwa">of</span> bitvec<span class="hl opt">;</span>
        is_known<span class="hl opt">:</span><span class="hl kwa">array</span><span class="hl opt">[</span>fixed<span class="hl opt">,</span>parity<span class="hl opt">]</span> <span class="hl kwa">of</span> bitvec<span class="hl opt">;</span>
        alwaysBad<span class="hl opt">:</span><span class="hl kwa">array</span><span class="hl opt">[</span>parity<span class="hl opt">]</span> <span class="hl kwa">of</span> bitvec<span class="hl opt">;</span>
      <span class="hl kwa">end</span><span class="hl opt">;</span>

<span class="hl kwa">const</span> MAX_ISLAND_OFFSET<span class="hl opt">=</span><span class="hl num">1024</span><span class="hl opt">;</span>

<span class="hl kwa">type</span> cacherec<span class="hl opt">=</span><span class="hl kwa">record</span>
       krow<span class="hl opt">,</span>kpiecevec<span class="hl opt">:</span><span class="hl kwb">word</span><span class="hl opt">;</span>
       kboardvec<span class="hl opt">:</span>bitvec<span class="hl opt">;</span>
     <span class="hl kwa">end</span><span class="hl opt">;</span>

<span class="hl kwa">var</span> s_basePiece<span class="hl opt">:</span><span class="hl kwa">array</span><span class="hl opt">[</span>piecenr<span class="hl opt">,</span>orientation<span class="hl opt">]</span> <span class="hl kwa">of</span> piece<span class="hl opt">;</span>
    g_okPieces<span class="hl opt">:</span><span class="hl kwa">array</span><span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">..</span>N_ROW<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">0</span><span class="hl opt">..</span>N_COL<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">]</span> <span class="hl kwa">of</span> OkPieces<span class="hl opt">;</span>
    g_islandInfo<span class="hl opt">:</span><span class="hl kwa">array</span><span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">..</span>MAX_ISLAND_OFFSET<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">]</span> <span class="hl kwa">of</span> islandinfo<span class="hl opt">;</span>
    g_nIslandInfo<span class="hl opt">:</span><span class="hl kwb">cardinal</span><span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span>
    cache<span class="hl opt">:</span><span class="hl kwa">array</span><span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">.</span><span class="hl num">.1024</span><span class="hl opt">*</span><span class="hl num">128</span><span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">]</span> <span class="hl kwa">of</span> cacherec<span class="hl opt">;</span>

    m_curSoln<span class="hl opt">,</span>m_minSoln<span class="hl opt">,</span>m_maxSoln<span class="hl opt">:</span>Soln<span class="hl opt">;</span>
    m_nSoln<span class="hl opt">:</span><span class="hl kwb">cardinal</span><span class="hl opt">;</span>

<span class="hl kwa">const</span> basevecs<span class="hl opt">:</span><span class="hl kwa">array</span> <span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">.</span><span class="hl num">.9</span><span class="hl opt">]</span> <span class="hl kwa">of</span> bitvec<span class="hl opt">= (</span>
        <span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">2</span><span class="hl opt">,</span><span class="hl num">3</span><span class="hl opt">,</span><span class="hl num">8</span><span class="hl opt">],</span>
        <span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">3</span><span class="hl opt">,</span><span class="hl num">6</span><span class="hl opt">,</span><span class="hl num">7</span><span class="hl opt">],</span>
        <span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">2</span><span class="hl opt">,</span><span class="hl num">7</span><span class="hl opt">,</span><span class="hl num">12</span><span class="hl opt">],</span>
        <span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">2</span><span class="hl opt">,</span><span class="hl num">5</span><span class="hl opt">,</span><span class="hl num">10</span><span class="hl opt">],</span>
        <span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">2</span><span class="hl opt">,</span><span class="hl num">5</span><span class="hl opt">,</span><span class="hl num">6</span><span class="hl opt">,</span><span class="hl num">10</span><span class="hl opt">],</span>
        <span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">2</span><span class="hl opt">,</span><span class="hl num">6</span><span class="hl opt">,</span><span class="hl num">7</span><span class="hl opt">],</span>
        <span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">5</span><span class="hl opt">,</span><span class="hl num">10</span><span class="hl opt">,</span><span class="hl num">15</span><span class="hl opt">],</span>
        <span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">2</span><span class="hl opt">,</span><span class="hl num">5</span><span class="hl opt">,</span><span class="hl num">7</span><span class="hl opt">],</span>
        <span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">2</span><span class="hl opt">,</span><span class="hl num">7</span><span class="hl opt">,</span><span class="hl num">8</span><span class="hl opt">],</span>
        <span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">2</span><span class="hl opt">,</span><span class="hl num">3</span><span class="hl opt">,</span><span class="hl num">7</span><span class="hl opt">]</span>
      <span class="hl opt">);</span>


<span class="hl kwa">constructor</span> soln<span class="hl opt">.</span><span class="hl kwd">init</span><span class="hl opt">(</span>fillval<span class="hl opt">:</span><span class="hl kwb">byte</span><span class="hl opt">);</span>

<span class="hl kwa">begin</span>
  <span class="hl kwd">fill</span><span class="hl opt">(</span>fillval<span class="hl opt">);</span>
<span class="hl kwa">end</span><span class="hl opt">;</span>

<span class="hl kwa">procedure</span> Soln<span class="hl opt">.</span><span class="hl kwd">fill</span><span class="hl opt">(</span>value<span class="hl opt">:</span><span class="hl kwb">byte</span><span class="hl opt">);</span>

<span class="hl kwa">begin</span>
   m_synched<span class="hl opt">:=</span><span class="hl kwb">false</span><span class="hl opt">;</span>
   <span class="hl kwd">fillchar</span><span class="hl opt">(</span>m_cells<span class="hl opt">,</span>N_CELL<span class="hl opt">,</span>value<span class="hl opt">);</span>
<span class="hl kwa">end</span><span class="hl opt">;</span>

<span class="hl kwa">function</span> soln<span class="hl opt">.</span>isEmpty<span class="hl opt">:</span><span class="hl kwb">boolean</span><span class="hl opt">;</span>

<span class="hl kwa">begin</span>
  isempty<span class="hl opt">:=</span>m_nPiece<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl kwa">end</span><span class="hl opt">;</span>

<span class="hl kwa">procedure</span> soln<span class="hl opt">.</span><span class="hl kwd">pushPiece</span><span class="hl opt">(</span>Avec<span class="hl opt">:</span>bitvec<span class="hl opt">;</span>AiPiece<span class="hl opt">:</span>piecenr<span class="hl opt">;</span>Arow<span class="hl opt">:</span><span class="hl kwb">byte</span><span class="hl opt">);</span>

<span class="hl kwa">begin</span>
  <span class="hl kwc">with</span> m_pieces<span class="hl opt">[</span>m_npiece<span class="hl opt">]</span> <span class="hl kwc">do</span>
    <span class="hl kwa">begin</span>
      vec<span class="hl opt">:=</span>Avec<span class="hl opt">;</span>
      iPiece<span class="hl opt">:=</span>AiPiece<span class="hl opt">;</span>
      row<span class="hl opt">:=</span>Arow<span class="hl opt">;</span>
    <span class="hl kwa">end</span><span class="hl opt">;</span>
  <span class="hl kwd">inc</span><span class="hl opt">(</span>m_npiece<span class="hl opt">);</span>
<span class="hl kwa">end</span><span class="hl opt">;</span>

<span class="hl kwa">procedure</span> soln<span class="hl opt">.</span>popPiece<span class="hl opt">;</span><span class="hl kwa">inline</span><span class="hl opt">;</span>

<span class="hl kwa">begin</span>
  <span class="hl kwd">dec</span><span class="hl opt">(</span>m_nPiece<span class="hl opt">);</span>
  m_synched <span class="hl opt">:=</span> <span class="hl kwb">false</span><span class="hl opt">;</span>
<span class="hl kwa">end</span><span class="hl opt">;</span>

<span class="hl kwa">procedure</span> soln<span class="hl opt">.</span><span class="hl kwd">write</span><span class="hl opt">(</span><span class="hl kwa">var</span> f<span class="hl opt">:</span><span class="hl kwb">text</span><span class="hl opt">);</span>

<span class="hl kwa">var</span> x<span class="hl opt">,</span>y<span class="hl opt">:</span><span class="hl kwb">byte</span><span class="hl opt">;</span>

<span class="hl kwa">begin</span>
  <span class="hl kwc">for</span> y<span class="hl opt">:=</span><span class="hl num">0</span> <span class="hl kwc">to</span> N_ROW<span class="hl opt">-</span><span class="hl num">1</span> <span class="hl kwc">do</span>
    <span class="hl kwa">begin</span>
      <span class="hl com">{indent every second line}</span>
      <span class="hl kwc">if</span> y <span class="hl kwa">mod</span> <span class="hl num">2</span><span class="hl opt">=</span><span class="hl num">1</span> <span class="hl kwc">then</span>
        system<span class="hl opt">.</span><span class="hl kwd">write</span><span class="hl opt">(</span>f<span class="hl opt">,</span><span class="hl str">' '</span><span class="hl opt">);</span>
      <span class="hl kwc">for</span> x<span class="hl opt">:=</span><span class="hl num">0</span> <span class="hl kwc">to</span> N_COL<span class="hl opt">-</span><span class="hl num">1</span> <span class="hl kwc">do</span>
        <span class="hl kwc">if</span> m_cells<span class="hl opt">[</span>y<span class="hl opt">,</span>x<span class="hl opt">]=</span>no_piece <span class="hl kwc">then</span>
          system<span class="hl opt">.</span><span class="hl kwd">write</span><span class="hl opt">(</span>f<span class="hl opt">,</span><span class="hl str">'. '</span><span class="hl opt">)</span>
        <span class="hl kwc">else</span>
          system<span class="hl opt">.</span><span class="hl kwd">write</span><span class="hl opt">(</span>f<span class="hl opt">,</span><span class="hl kwb">char</span><span class="hl opt">(</span><span class="hl kwb">byte</span><span class="hl opt">(</span><span class="hl str">'0'</span><span class="hl opt">)+</span>m_cells<span class="hl opt">[</span>y<span class="hl opt">,</span>x<span class="hl opt">]),</span><span class="hl str">' '</span><span class="hl opt">);</span>
      <span class="hl kwd">writeln</span><span class="hl opt">(</span>f<span class="hl opt">);</span>
    <span class="hl kwa">end</span><span class="hl opt">;</span>
<span class="hl kwa">end</span><span class="hl opt">;</span>


<span class="hl kwa">procedure</span> Soln<span class="hl opt">.</span>setCells<span class="hl opt">;</span>

<span class="hl kwa">var</span> c<span class="hl opt">,</span>i<span class="hl opt">,</span>x<span class="hl opt">,</span>y<span class="hl opt">,</span>newcells<span class="hl opt">:</span><span class="hl kwb">byte</span><span class="hl opt">;</span>

<span class="hl kwa">begin</span>
   <span class="hl kwc">if</span> m_synched <span class="hl kwc">then</span>
     exit<span class="hl opt">;</span>
   <span class="hl kwc">for</span> i<span class="hl opt">:=</span><span class="hl num">1</span> <span class="hl kwc">to</span> m_nPiece <span class="hl kwc">do</span>
     <span class="hl kwc">with</span> m_pieces<span class="hl opt">[</span>i<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">]</span> <span class="hl kwc">do</span>
       <span class="hl kwa">begin</span>
         newcells<span class="hl opt">:=</span><span class="hl num">0</span><span class="hl opt">;</span>
         c<span class="hl opt">:=</span><span class="hl num">0</span><span class="hl opt">;</span>
         <span class="hl kwc">for</span> y<span class="hl opt">:=</span>row <span class="hl kwc">to</span> N_ROW <span class="hl kwc">do</span>
           <span class="hl kwa">begin</span>
             <span class="hl kwc">for</span> x<span class="hl opt">:=</span><span class="hl num">0</span> <span class="hl kwc">to</span> N_COL<span class="hl opt">-</span><span class="hl num">1</span> <span class="hl kwc">do</span>
               <span class="hl kwa">begin</span>
                 <span class="hl kwc">if</span> c <span class="hl kwa">in</span> vec <span class="hl kwc">then</span>
                   <span class="hl kwa">begin</span>
                     m_cells<span class="hl opt">[</span>y<span class="hl opt">,</span>x<span class="hl opt">]:=</span>ipiece<span class="hl opt">;</span>
                     <span class="hl kwd">inc</span><span class="hl opt">(</span>NewCells<span class="hl opt">);</span>
                   <span class="hl kwa">end</span><span class="hl opt">;</span>
                 <span class="hl kwd">inc</span><span class="hl opt">(</span>c<span class="hl opt">);</span>
               <span class="hl kwa">end</span><span class="hl opt">;</span>
             <span class="hl kwc">if</span> NewCells<span class="hl opt">=</span>N_ELEM <span class="hl kwc">then</span>
               break<span class="hl opt">;</span>
           <span class="hl kwa">end</span><span class="hl opt">;</span>
       <span class="hl kwa">end</span><span class="hl opt">;</span>
   m_synched<span class="hl opt">:=</span><span class="hl kwb">true</span><span class="hl opt">;</span>
<span class="hl kwa">end</span><span class="hl opt">;</span>

<span class="hl kwa">function</span> Soln<span class="hl opt">.</span><span class="hl kwd">lessThan</span><span class="hl opt">(</span><span class="hl kwa">var</span> r<span class="hl opt">:</span>Soln<span class="hl opt">):</span><span class="hl kwb">boolean</span><span class="hl opt">;</span>

<span class="hl kwa">var</span> x<span class="hl opt">,</span>y<span class="hl opt">,</span>lval<span class="hl opt">,</span>rval<span class="hl opt">:</span><span class="hl kwb">byte</span><span class="hl opt">;</span>

<span class="hl kwa">begin</span>
   <span class="hl kwc">if</span> m_pieces<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">].</span>iPiece<span class="hl opt">&lt;&gt;</span>r<span class="hl opt">.</span>m_pieces<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">].</span>iPiece <span class="hl kwc">then</span>
     <span class="hl kwa">begin</span>
       lessthan<span class="hl opt">:=</span>m_pieces<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">].</span>iPiece <span class="hl opt">&lt;</span> r<span class="hl opt">.</span>m_pieces<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">].</span>iPiece<span class="hl opt">;</span>
       exit<span class="hl opt">;</span>
     <span class="hl kwa">end</span><span class="hl opt">;</span>

   <span class="hl kwd">setCells</span><span class="hl opt">();</span>
   r<span class="hl opt">.</span><span class="hl kwd">setCells</span><span class="hl opt">();</span>

   <span class="hl kwc">for</span> y<span class="hl opt">:=</span><span class="hl num">0</span> <span class="hl kwc">to</span> N_ROW<span class="hl opt">-</span><span class="hl num">1</span> <span class="hl kwc">do</span>
      <span class="hl kwc">for</span> x<span class="hl opt">:=</span><span class="hl num">0</span> <span class="hl kwc">to</span> N_COL<span class="hl opt">-</span><span class="hl num">1</span> <span class="hl kwc">do</span>
        <span class="hl kwa">begin</span>
         lval<span class="hl opt">:=</span>m_cells<span class="hl opt">[</span>y<span class="hl opt">,</span>x<span class="hl opt">];</span>
         rval<span class="hl opt">:=</span>r<span class="hl opt">.</span>m_cells<span class="hl opt">[</span>y<span class="hl opt">,</span>x<span class="hl opt">];</span>

         <span class="hl kwc">if</span> lval <span class="hl opt">&lt;&gt;</span> rval <span class="hl kwc">then</span>
           <span class="hl kwa">begin</span>
             lessthan<span class="hl opt">:=</span>lval<span class="hl opt">&lt;</span>rval<span class="hl opt">;</span>
             exit<span class="hl opt">;</span>
           <span class="hl kwa">end</span><span class="hl opt">;</span>
        <span class="hl kwa">end</span><span class="hl opt">;</span>

   lessthan<span class="hl opt">:=</span><span class="hl kwb">false</span><span class="hl opt">;</span> <span class="hl com">{solutions are equal}</span>
<span class="hl kwa">end</span><span class="hl opt">;</span>

<span class="hl kwa">procedure</span> Soln<span class="hl opt">.</span><span class="hl kwd">spin</span><span class="hl opt">(</span><span class="hl kwa">var</span> spun<span class="hl opt">:</span>Soln<span class="hl opt">);</span>

<span class="hl kwa">var</span> x<span class="hl opt">,</span>y<span class="hl opt">:</span><span class="hl kwb">byte</span><span class="hl opt">;</span>

<span class="hl kwa">begin</span>
   setCells<span class="hl opt">;</span>
   <span class="hl com">{swap cells}</span>
   <span class="hl kwc">for</span> y<span class="hl opt">:=</span><span class="hl num">0</span> <span class="hl kwc">to</span> N_ROW<span class="hl opt">-</span><span class="hl num">1</span> <span class="hl kwc">do</span>
      <span class="hl kwc">for</span> x<span class="hl opt">:=</span><span class="hl num">0</span> <span class="hl kwc">to</span> N_COL<span class="hl opt">-</span><span class="hl num">1</span> <span class="hl kwc">do</span>
        spun<span class="hl opt">.</span>m_cells<span class="hl opt">[</span>y<span class="hl opt">,</span>x<span class="hl opt">]:=</span>m_cells<span class="hl opt">[</span>N_ROW<span class="hl opt">-</span>y<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">,</span>N_COL<span class="hl opt">-</span>x<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">];</span>

   <span class="hl com">{swap first and last pieces (the rest aren't used)}</span>
   spun<span class="hl opt">.</span>m_pieces<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">].</span>iPiece<span class="hl opt">:=</span>m_pieces<span class="hl opt">[</span>N_PIECE_TYPE<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">].</span>iPiece<span class="hl opt">;</span>
   spun<span class="hl opt">.</span>m_synched<span class="hl opt">:=</span><span class="hl kwb">true</span><span class="hl opt">;</span>
<span class="hl kwa">end</span><span class="hl opt">;</span>

<span class="hl kwa">function</span> <span class="hl kwd">floor</span><span class="hl opt">(</span>top<span class="hl opt">,</span>bot<span class="hl opt">:</span><span class="hl kwb">longint</span><span class="hl opt">):</span><span class="hl kwb">longint</span><span class="hl opt">;</span>

<span class="hl kwa">begin</span>
   floor<span class="hl opt">:=</span>top <span class="hl kwa">div</span> bot<span class="hl opt">;</span>
   <span class="hl com">{negative numbers should be rounded down, not towards zero}</span>
   <span class="hl kwc">if</span> <span class="hl opt">(</span>floor<span class="hl opt">*</span>bot<span class="hl opt">&lt;&gt;</span>top<span class="hl opt">)</span> <span class="hl kwa">and</span> <span class="hl opt">((</span>top<span class="hl opt">&lt;</span><span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwa">xor</span> <span class="hl opt">(</span>bot<span class="hl opt">&lt;=</span><span class="hl num">0</span><span class="hl opt">))</span> <span class="hl kwc">then</span>
      <span class="hl kwd">dec</span><span class="hl opt">(</span>floor<span class="hl opt">);</span>
<span class="hl kwa">end</span><span class="hl opt">;</span>

<span class="hl kwa">const</span> s_firstOne<span class="hl opt">:</span><span class="hl kwa">array</span><span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">.</span><span class="hl num">.31</span><span class="hl opt">]</span> <span class="hl kwa">of</span> <span class="hl kwb">byte</span><span class="hl opt">=(</span>
   <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span>   <span class="hl num">2</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span>
   <span class="hl num">3</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span>   <span class="hl num">2</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span>

   <span class="hl num">4</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span>   <span class="hl num">2</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span>
   <span class="hl num">3</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span>   <span class="hl num">2</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">0</span>
<span class="hl opt">);</span>

<span class="hl kwa">function</span> <span class="hl kwd">first_set_bit</span><span class="hl opt">(</span>v<span class="hl opt">:</span>bitvec<span class="hl opt">):</span><span class="hl kwb">cardinal</span><span class="hl opt">;</span><span class="hl kwa">inline</span><span class="hl opt">;</span>

<span class="hl com">{$ifdef endian_little}</span>
<span class="hl kwa">const</span> l<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span>
      h<span class="hl opt">=</span><span class="hl num">1</span><span class="hl opt">;</span>
<span class="hl com">{$else}</span>
<span class="hl kwa">const</span> l<span class="hl opt">=</span><span class="hl num">1</span><span class="hl opt">;</span>
      h<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl com">{$endif}</span>

<span class="hl kwa">var</span> d<span class="hl opt">:</span><span class="hl kwb">double</span><span class="hl opt">;</span>
    u<span class="hl opt">:</span><span class="hl kwa">array</span><span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">.</span><span class="hl num">.1</span><span class="hl opt">]</span> <span class="hl kwa">of</span> bitvec <span class="hl kwa">absolute</span> d<span class="hl opt">;</span>

<span class="hl kwa">begin</span>
  first_set_bit<span class="hl opt">:=</span><span class="hl num">0</span><span class="hl opt">;</span>
  <span class="hl kwc">if</span> v<span class="hl opt">&lt;&gt;[]</span> <span class="hl kwc">then</span>
    <span class="hl kwa">begin</span>
      u<span class="hl opt">[</span>l<span class="hl opt">]:=</span>v<span class="hl opt">;</span>
      u<span class="hl opt">[</span>h<span class="hl opt">]:=[</span><span class="hl num">30</span><span class="hl opt">,</span><span class="hl num">25</span><span class="hl opt">,</span><span class="hl num">24</span><span class="hl opt">,</span><span class="hl num">21</span><span class="hl opt">,</span><span class="hl num">20</span><span class="hl opt">];</span>
      d<span class="hl opt">:=</span>d<span class="hl opt">-</span><span class="hl num">4503599627370496</span><span class="hl opt">;</span>
      first_set_bit<span class="hl opt">:=</span><span class="hl kwb">cardinal</span><span class="hl opt">(</span>u<span class="hl opt">[</span>h<span class="hl opt">])</span> <span class="hl kwa">shr</span> <span class="hl num">20</span><span class="hl opt">-</span><span class="hl num">$3ff</span><span class="hl opt">;</span>
    <span class="hl kwa">end</span><span class="hl opt">;</span>
<span class="hl kwa">end</span><span class="hl opt">;</span>

<span class="hl kwa">function</span> <span class="hl kwd">count_ones</span><span class="hl opt">(</span>v<span class="hl opt">:</span>bitvec<span class="hl opt">):</span><span class="hl kwb">cardinal</span><span class="hl opt">;</span><span class="hl kwa">inline</span><span class="hl opt">;</span>

<span class="hl kwa">begin</span>
   count_ones<span class="hl opt">:=</span><span class="hl num">0</span><span class="hl opt">;</span>
   <span class="hl kwc">while</span> v<span class="hl opt">&lt;&gt;[]</span> <span class="hl kwc">do</span>
     <span class="hl kwa">begin</span>
       <span class="hl kwd">inc</span><span class="hl opt">(</span>count_ones<span class="hl opt">);</span>
       <span class="hl kwb">cardinal</span><span class="hl opt">(</span>v<span class="hl opt">):=</span><span class="hl kwb">cardinal</span><span class="hl opt">(</span>v<span class="hl opt">)</span> <span class="hl kwa">and</span> <span class="hl opt">(</span><span class="hl kwb">cardinal</span><span class="hl opt">(</span>v<span class="hl opt">)-</span><span class="hl num">1</span><span class="hl opt">);</span>
     <span class="hl kwa">end</span><span class="hl opt">;</span>
<span class="hl kwa">end</span><span class="hl opt">;</span>

<span class="hl kwa">procedure</span> <span class="hl kwd">setCoordList</span><span class="hl opt">(</span>vec<span class="hl opt">:</span>bitvec<span class="hl opt">;</span><span class="hl kwa">var</span> pts<span class="hl opt">:</span>Tpts<span class="hl opt">);</span>

<span class="hl kwa">var</span> iPt<span class="hl opt">,</span>n<span class="hl opt">:</span><span class="hl kwb">longint</span><span class="hl opt">;</span>
    x<span class="hl opt">,</span>y<span class="hl opt">:</span><span class="hl kwb">byte</span><span class="hl opt">;</span>

<span class="hl kwa">begin</span>
   iPt<span class="hl opt">:=</span><span class="hl num">0</span><span class="hl opt">;</span>
   n<span class="hl opt">:=</span><span class="hl num">0</span><span class="hl opt">;</span>
   <span class="hl kwc">for</span> y<span class="hl opt">:=</span><span class="hl num">0</span> <span class="hl kwc">to</span> N_ROW<span class="hl opt">-</span><span class="hl num">1</span> <span class="hl kwc">do</span>
     <span class="hl kwc">for</span> x<span class="hl opt">:=</span><span class="hl num">0</span> <span class="hl kwc">to</span> N_COL<span class="hl opt">-</span><span class="hl num">1</span> <span class="hl kwc">do</span>
       <span class="hl kwa">begin</span>
         <span class="hl kwc">if</span> n <span class="hl kwa">in</span> vec <span class="hl kwc">then</span>
           <span class="hl kwa">begin</span>
             pts<span class="hl opt">[</span>iPt<span class="hl opt">,</span>dimx<span class="hl opt">]:=</span>x<span class="hl opt">;</span>
             pts<span class="hl opt">[</span>iPt<span class="hl opt">,</span>dimy<span class="hl opt">]:=</span>y<span class="hl opt">;</span>
             <span class="hl kwd">inc</span><span class="hl opt">(</span>iPt<span class="hl opt">);</span>
           <span class="hl kwa">end</span><span class="hl opt">;</span>
         <span class="hl kwd">inc</span><span class="hl opt">(</span>n<span class="hl opt">);</span>
         <span class="hl kwc">if</span> n<span class="hl opt">=</span><span class="hl num">32</span> <span class="hl kwc">then</span>
           exit<span class="hl opt">;</span>
       <span class="hl kwa">end</span><span class="hl opt">;</span>
<span class="hl kwa">end</span><span class="hl opt">;</span>

<span class="hl kwa">function</span> <span class="hl kwd">toBitVector</span><span class="hl opt">(</span><span class="hl kwa">const</span> pts<span class="hl opt">:</span>Tpts<span class="hl opt">):</span>bitvec<span class="hl opt">;</span>

<span class="hl kwa">var</span> x<span class="hl opt">,</span>y<span class="hl opt">,</span>iPt<span class="hl opt">:</span><span class="hl kwb">byte</span><span class="hl opt">;</span>

<span class="hl kwa">begin</span>
   tobitvector<span class="hl opt">:=[];</span>
   <span class="hl kwc">for</span> iPt<span class="hl opt">:=</span><span class="hl kwd">low</span><span class="hl opt">(</span>pts<span class="hl opt">)</span> <span class="hl kwc">to</span> <span class="hl kwd">high</span><span class="hl opt">(</span>pts<span class="hl opt">)</span> <span class="hl kwc">do</span>
     <span class="hl kwa">begin</span>
       x<span class="hl opt">:=</span>pts<span class="hl opt">[</span>iPt<span class="hl opt">,</span>dimx<span class="hl opt">];</span>
       y<span class="hl opt">:=</span>pts<span class="hl opt">[</span>iPt<span class="hl opt">,</span>dimy<span class="hl opt">];</span>
       <span class="hl kwd">include</span><span class="hl opt">(</span>tobitvector<span class="hl opt">,</span>y<span class="hl opt">*</span>N_COL<span class="hl opt">+</span>x<span class="hl opt">);</span>
     <span class="hl kwa">end</span><span class="hl opt">;</span>
<span class="hl kwa">end</span><span class="hl opt">;</span>

<span class="hl kwa">procedure</span> <span class="hl kwd">shiftUpLines</span><span class="hl opt">(</span><span class="hl kwa">var</span> pts<span class="hl opt">:</span>Tpts<span class="hl opt">;</span>shift<span class="hl opt">:</span><span class="hl kwb">longint</span><span class="hl opt">);</span>

<span class="hl kwa">var</span> iPt<span class="hl opt">:</span><span class="hl kwb">byte</span><span class="hl opt">;</span>

<span class="hl kwa">begin</span>
   <span class="hl com">{vertical shifts have a twist}</span>
   <span class="hl kwc">for</span> iPt<span class="hl opt">:=</span><span class="hl kwd">low</span><span class="hl opt">(</span>pts<span class="hl opt">)</span> <span class="hl kwc">to</span> <span class="hl kwd">high</span><span class="hl opt">(</span>pts<span class="hl opt">)</span> <span class="hl kwc">do</span>
     <span class="hl kwa">begin</span>
       <span class="hl kwc">if</span> pts<span class="hl opt">[</span>iPt<span class="hl opt">,</span>dimy<span class="hl opt">]</span> <span class="hl kwa">and</span> shift <span class="hl kwa">and</span> <span class="hl num">1</span><span class="hl opt">&lt;&gt;</span><span class="hl num">0</span> <span class="hl kwc">then</span>
         <span class="hl kwd">inc</span><span class="hl opt">(</span>pts<span class="hl opt">[</span>iPt<span class="hl opt">,</span>dimx<span class="hl opt">]);</span>
       <span class="hl kwd">dec</span><span class="hl opt">(</span>pts<span class="hl opt">[</span>iPt<span class="hl opt">,</span>dimy<span class="hl opt">],</span>shift<span class="hl opt">);</span>
     <span class="hl kwa">end</span><span class="hl opt">;</span>
<span class="hl kwa">end</span><span class="hl opt">;</span>

<span class="hl kwa">function</span> <span class="hl kwd">shiftToX0</span><span class="hl opt">(</span><span class="hl kwa">var</span> pts<span class="hl opt">:</span>Tpts<span class="hl opt">;</span><span class="hl kwa">var</span> Ainstance<span class="hl opt">:</span>instance<span class="hl opt">;</span>offsetRow<span class="hl opt">:</span><span class="hl kwb">longint</span><span class="hl opt">):</span>shortint<span class="hl opt">;</span>

<span class="hl kwa">var</span> x<span class="hl opt">,</span>y<span class="hl opt">,</span>xmin<span class="hl opt">,</span>xmax<span class="hl opt">,</span>iPt<span class="hl opt">,</span>offset<span class="hl opt">:</span>shortint<span class="hl opt">;</span>

<span class="hl kwa">begin</span>
   <span class="hl com">{ .. determine shift}</span>
   xMin<span class="hl opt">:=</span>pts<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">,</span>dimx<span class="hl opt">];</span>
   xMax<span class="hl opt">:=</span>xMin<span class="hl opt">;</span>
   <span class="hl kwc">for</span> iPt<span class="hl opt">:=</span><span class="hl kwd">low</span><span class="hl opt">(</span>pts<span class="hl opt">)+</span><span class="hl num">1</span> <span class="hl kwc">to</span> <span class="hl kwd">high</span><span class="hl opt">(</span>pts<span class="hl opt">)</span> <span class="hl kwc">do</span>
     <span class="hl kwa">begin</span>
       x<span class="hl opt">:=</span>pts<span class="hl opt">[</span>iPt<span class="hl opt">,</span>dimx<span class="hl opt">];</span>
       y<span class="hl opt">:=</span>pts<span class="hl opt">[</span>iPt<span class="hl opt">,</span>dimy<span class="hl opt">];</span>
       <span class="hl kwc">if</span> x<span class="hl opt">&lt;</span>xMin <span class="hl kwc">then</span>
         xMin<span class="hl opt">:=</span>x
       <span class="hl kwc">else if</span> x <span class="hl opt">&gt;</span> xMax <span class="hl kwc">then</span>
         xMax<span class="hl opt">:=</span>x<span class="hl opt">;</span>
     <span class="hl kwa">end</span><span class="hl opt">;</span>

   offset<span class="hl opt">:=</span>N_ELEM<span class="hl opt">;</span>
   <span class="hl kwc">for</span> iPt<span class="hl opt">:=</span><span class="hl kwd">low</span><span class="hl opt">(</span>pts<span class="hl opt">)</span> <span class="hl kwc">to</span> <span class="hl kwd">high</span><span class="hl opt">(</span>pts<span class="hl opt">)</span> <span class="hl kwc">do</span>
     <span class="hl kwa">begin</span>
      <span class="hl kwd">dec</span><span class="hl opt">(</span>pts<span class="hl opt">[</span>iPt<span class="hl opt">,</span>dimx<span class="hl opt">],</span>xMin<span class="hl opt">);</span>
      <span class="hl com">{check offset -- leftmost cell on top line}</span>
      <span class="hl kwc">if</span> <span class="hl opt">(</span>pts<span class="hl opt">[</span>iPt<span class="hl opt">,</span>dimy<span class="hl opt">]=</span>offsetRow<span class="hl opt">)</span> <span class="hl kwa">and</span> <span class="hl opt">(</span>pts<span class="hl opt">[</span>iPt<span class="hl opt">,</span>dimx<span class="hl opt">]&lt;</span>offset<span class="hl opt">)</span> <span class="hl kwc">then</span>
         offset<span class="hl opt">:=</span>pts<span class="hl opt">[</span>iPt<span class="hl opt">,</span>dimx<span class="hl opt">];</span>
   <span class="hl kwa">end</span><span class="hl opt">;</span>

   Ainstance<span class="hl opt">.</span>m_offset <span class="hl opt">:=</span> offset<span class="hl opt">;</span>
   Ainstance<span class="hl opt">.</span>m_vec <span class="hl opt">:=</span> <span class="hl kwd">toBitVector</span><span class="hl opt">(</span>pts<span class="hl opt">);</span>
   shifttox0<span class="hl opt">:=</span>xMax <span class="hl opt">-</span> xMin<span class="hl opt">;</span>
<span class="hl kwa">end</span><span class="hl opt">;</span>

<span class="hl kwa">function</span> <span class="hl kwd">badregion</span><span class="hl opt">(</span><span class="hl kwa">var</span> to_fill<span class="hl opt">:</span>bitvec<span class="hl opt">;</span>rnew<span class="hl opt">:</span>bitvec<span class="hl opt">):</span><span class="hl kwb">boolean</span><span class="hl opt">;</span>

<span class="hl kwa">var</span> region<span class="hl opt">,</span>even_region<span class="hl opt">,</span>odd_region<span class="hl opt">:</span>bitvec<span class="hl opt">;</span>
    cell_count<span class="hl opt">:</span><span class="hl kwb">cardinal</span><span class="hl opt">;</span>

<span class="hl kwa">begin</span>
   <span class="hl com">{Grow empty region, until it doesn't change any more.}</span>
   <span class="hl kwc">repeat</span>
      region<span class="hl opt">:=</span>rnew<span class="hl opt">;</span>
      even_region<span class="hl opt">:=</span>region<span class="hl opt">*(</span>ROW_0_MASK<span class="hl opt">*([</span><span class="hl num">0</span><span class="hl opt">.</span><span class="hl num">.31</span><span class="hl opt">]-</span>L_EDGE_MASK<span class="hl opt">));</span>
      odd_region<span class="hl opt">:=</span>region<span class="hl opt">*(</span>ROW_1_MASK<span class="hl opt">*([</span><span class="hl num">0</span><span class="hl opt">.</span><span class="hl num">.31</span><span class="hl opt">]-</span>R_EDGE_MASK<span class="hl opt">));</span>

      rnew<span class="hl opt">:=</span>to_fill<span class="hl opt">*(</span>rnew
                    <span class="hl com">{simple grow up/down}</span>
                    <span class="hl opt">+</span><span class="hl kwd">bitvec</span><span class="hl opt">(</span><span class="hl kwb">cardinal</span><span class="hl opt">(</span>region<span class="hl opt">)</span> <span class="hl kwa">shr</span> N_COL<span class="hl opt">)</span>
                    <span class="hl opt">+</span><span class="hl kwd">bitvec</span><span class="hl opt">(</span><span class="hl kwb">cardinal</span><span class="hl opt">(</span>region<span class="hl opt">)</span> <span class="hl kwa">shl</span> N_COL<span class="hl opt">)</span>
                    <span class="hl com">{grow right/left}</span>
                    <span class="hl opt">+</span><span class="hl kwd">bitvec</span><span class="hl opt">(</span><span class="hl kwb">cardinal</span><span class="hl opt">(</span>region<span class="hl opt">)</span> <span class="hl kwa">and not</span> <span class="hl kwb">cardinal</span><span class="hl opt">(</span>L_EDGE_MASK<span class="hl opt">)</span> <span class="hl kwa">shr</span> <span class="hl num">1</span><span class="hl opt">)</span>
                    <span class="hl opt">+</span><span class="hl kwd">bitvec</span><span class="hl opt">(</span><span class="hl kwb">cardinal</span><span class="hl opt">(</span>region<span class="hl opt">)</span> <span class="hl kwa">and not</span> <span class="hl kwb">cardinal</span><span class="hl opt">(</span>R_EDGE_MASK<span class="hl opt">)</span> <span class="hl kwa">shl</span> <span class="hl num">1</span><span class="hl opt">)</span>
                    <span class="hl com">{tricky growth}</span>
                    <span class="hl opt">+</span><span class="hl kwd">bitvec</span><span class="hl opt">(</span><span class="hl kwb">cardinal</span><span class="hl opt">(</span>even_Region<span class="hl opt">)</span> <span class="hl kwa">shr</span> <span class="hl opt">(</span>N_COL<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">))</span>
                    <span class="hl opt">+</span><span class="hl kwd">bitvec</span><span class="hl opt">(</span><span class="hl kwb">cardinal</span><span class="hl opt">(</span>even_Region<span class="hl opt">)</span> <span class="hl kwa">shl</span> <span class="hl opt">(</span>N_COL<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">))</span>
                    <span class="hl opt">+</span><span class="hl kwd">bitvec</span><span class="hl opt">(</span><span class="hl kwb">cardinal</span><span class="hl opt">(</span>odd_Region<span class="hl opt">)</span> <span class="hl kwa">shr</span> <span class="hl opt">(</span>N_COL<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">))</span>
                    <span class="hl opt">+</span><span class="hl kwd">bitvec</span><span class="hl opt">(</span><span class="hl kwb">cardinal</span><span class="hl opt">(</span>odd_Region<span class="hl opt">)</span> <span class="hl kwa">shl</span> <span class="hl opt">(</span>N_COL<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">))</span>
                    <span class="hl opt">);</span>
   <span class="hl kwc">until</span> <span class="hl opt">(</span>rnew<span class="hl opt">=</span>to_fill<span class="hl opt">)</span> <span class="hl kwa">or</span> <span class="hl opt">(</span>rnew<span class="hl opt">=</span>region<span class="hl opt">);</span>

   <span class="hl com">{Subtract empty region from board.}</span>
   to_fill<span class="hl opt">:=</span>to_fill<span class="hl opt">-</span>rnew<span class="hl opt">;</span>

   cell_count<span class="hl opt">:=</span><span class="hl kwd">count_ones</span><span class="hl opt">(</span>to_fill<span class="hl opt">);</span>
   <span class="hl com">{Optimize 'cell_count mod 5&lt;&gt;0' by hand...}</span>
   badregion<span class="hl opt">:=</span>cell_count<span class="hl opt">&lt;&gt;((</span>cell_count<span class="hl opt">*</span><span class="hl num">$cccd</span><span class="hl opt">)</span> <span class="hl kwa">shr</span> <span class="hl num">18</span><span class="hl opt">)*</span><span class="hl num">5</span><span class="hl opt">;</span>
<span class="hl kwa">end</span><span class="hl opt">;</span>

<span class="hl kwa">function</span> <span class="hl kwd">has_bad_islands_single</span><span class="hl opt">(</span>boardVec<span class="hl opt">:</span>bitvec<span class="hl opt">;</span>row<span class="hl opt">:</span><span class="hl kwb">longint</span><span class="hl opt">):</span><span class="hl kwb">boolean</span><span class="hl opt">;</span>

<span class="hl kwa">var</span> tofill<span class="hl opt">,</span>startregion<span class="hl opt">,</span>bmask<span class="hl opt">:</span>bitvec<span class="hl opt">;</span>
    isodd<span class="hl opt">:</span><span class="hl kwb">boolean</span><span class="hl opt">;</span>

<span class="hl kwa">begin</span>
   tofill<span class="hl opt">:=[</span><span class="hl num">0</span><span class="hl opt">.</span><span class="hl num">.31</span><span class="hl opt">]-</span>boardvec<span class="hl opt">;</span>
   isOdd<span class="hl opt">:=</span>row <span class="hl kwa">and</span> <span class="hl num">1</span><span class="hl opt">&lt;&gt;</span><span class="hl num">0</span><span class="hl opt">;</span>
   <span class="hl kwc">if</span> isOdd <span class="hl kwc">then</span>
     <span class="hl kwa">begin</span>
       <span class="hl kwd">dec</span><span class="hl opt">(</span>row<span class="hl opt">);</span>
       toFill<span class="hl opt">:=</span><span class="hl kwd">bitvec</span><span class="hl opt">(</span><span class="hl kwb">cardinal</span><span class="hl opt">(</span>tofill<span class="hl opt">)</span> <span class="hl kwa">shl</span> N_COL<span class="hl opt">);</span> <span class="hl com">{shift to even aligned}</span>
       toFill<span class="hl opt">:=</span> tofill <span class="hl opt">+</span> TOP_ROW<span class="hl opt">;</span>
     <span class="hl kwa">end</span><span class="hl opt">;</span>

   startRegion <span class="hl opt">:=</span> TOP_ROW<span class="hl opt">;</span>
   bMask <span class="hl opt">:=</span> BOARD_MASK<span class="hl opt">;</span> <span class="hl com">{all but the first two bits}</span>
   <span class="hl kwc">if</span> row<span class="hl opt">&gt;=</span><span class="hl num">4</span> <span class="hl kwc">then</span>
      <span class="hl kwb">cardinal</span><span class="hl opt">(</span>bMask<span class="hl opt">):=</span><span class="hl kwb">cardinal</span><span class="hl opt">(</span>bmask<span class="hl opt">)</span> <span class="hl kwa">shr</span> <span class="hl opt">((</span>row<span class="hl opt">-</span><span class="hl num">4</span><span class="hl opt">)*</span>N_COL<span class="hl opt">)</span>
   <span class="hl kwc">else if</span> isOdd <span class="hl kwa">or</span> <span class="hl opt">(</span>row <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">)</span> <span class="hl kwc">then</span>
      startRegion <span class="hl opt">:=</span> LAST_ROW<span class="hl opt">;</span>

   toFill<span class="hl opt">:=</span>tofill<span class="hl opt">*</span>bMask<span class="hl opt">;</span>
   startRegion<span class="hl opt">:=</span>startregion<span class="hl opt">*</span>toFill<span class="hl opt">;</span>

   has_bad_islands_single<span class="hl opt">:=</span><span class="hl kwb">true</span><span class="hl opt">;</span>
   <span class="hl kwc">while</span> toFill<span class="hl opt">&lt;&gt;[]</span> <span class="hl kwc">do</span>
     <span class="hl kwa">begin</span>
       <span class="hl kwc">if</span> <span class="hl kwd">badRegion</span><span class="hl opt">(</span>toFill<span class="hl opt">,</span> startRegion<span class="hl opt">)</span> <span class="hl kwc">then</span>
         exit<span class="hl opt">;</span>
       startRegion<span class="hl opt">:=[</span><span class="hl kwd">first_set_bit</span><span class="hl opt">(</span>toFill<span class="hl opt">)];</span>
     <span class="hl kwa">end</span><span class="hl opt">;</span>
   has_bad_islands_single<span class="hl opt">:=</span><span class="hl kwb">false</span><span class="hl opt">;</span>
<span class="hl kwa">end</span><span class="hl opt">;</span>


<span class="hl kwa">procedure</span> piece<span class="hl opt">.</span><span class="hl kwd">set_ok_positions</span><span class="hl opt">(</span>isOdd<span class="hl opt">:</span>parity<span class="hl opt">;</span>w<span class="hl opt">,</span>h<span class="hl opt">:</span><span class="hl kwb">longint</span><span class="hl opt">);</span>

<span class="hl kwa">var</span> x<span class="hl opt">,</span>y<span class="hl opt">,</span>xpos<span class="hl opt">,</span>pos<span class="hl opt">:</span><span class="hl kwb">byte</span><span class="hl opt">;</span>

<span class="hl kwa">begin</span>
   pos<span class="hl opt">:=</span><span class="hl kwb">byte</span><span class="hl opt">(</span>isodd<span class="hl opt">)*</span>N_COL<span class="hl opt">;</span>
   <span class="hl kwc">with</span> m_instance<span class="hl opt">[</span>isOdd<span class="hl opt">]</span> <span class="hl kwc">do</span>
     <span class="hl kwa">begin</span>
       m_allowed<span class="hl opt">:=[];</span>
       y<span class="hl opt">:=</span><span class="hl kwb">byte</span><span class="hl opt">(</span>isOdd<span class="hl opt">);</span>
       <span class="hl kwc">while</span> y<span class="hl opt">&lt;</span>N_ROW<span class="hl opt">-</span>h <span class="hl kwc">do</span>
         <span class="hl kwa">begin</span>
           <span class="hl kwc">if</span> m_offset<span class="hl opt">&lt;&gt;</span><span class="hl num">0</span> <span class="hl kwc">then</span>
             <span class="hl kwd">inc</span><span class="hl opt">(</span>pos<span class="hl opt">,</span>m_offset<span class="hl opt">);</span>
           <span class="hl kwc">for</span> xPos<span class="hl opt">:=</span><span class="hl num">0</span> <span class="hl kwc">to</span> N_COL<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">-</span>m_offset <span class="hl kwc">do</span>
             <span class="hl kwa">begin</span>
               <span class="hl com">{check if the new position is on the board}</span>
               <span class="hl kwc">if</span> <span class="hl opt">(</span>xPos<span class="hl opt">&lt;</span>N_COL<span class="hl opt">-</span>w<span class="hl opt">)</span> <span class="hl kwa">and not</span> <span class="hl kwd">has_bad_islands_single</span><span class="hl opt">(</span><span class="hl kwd">bitvec</span><span class="hl opt">(</span><span class="hl kwb">cardinal</span><span class="hl opt">(</span>m_vec<span class="hl opt">)</span> <span class="hl kwa">shl</span> xPos<span class="hl opt">),</span>y<span class="hl opt">)</span> <span class="hl kwc">then</span>
                 <span class="hl kwa">begin</span>
                   <span class="hl com">{position is allowed}</span>
                   <span class="hl kwd">include</span><span class="hl opt">(</span>m_allowed<span class="hl opt">,</span>pos<span class="hl opt">);</span>
                 <span class="hl kwa">end</span><span class="hl opt">;</span>
               <span class="hl kwd">inc</span><span class="hl opt">(</span>pos<span class="hl opt">);</span>
             <span class="hl kwa">end</span><span class="hl opt">;</span>
           y<span class="hl opt">:=</span>y<span class="hl opt">+</span><span class="hl num">2</span><span class="hl opt">;</span>
           <span class="hl com">{Skip row with wrong parity:}</span>
           <span class="hl kwd">inc</span><span class="hl opt">(</span>pos<span class="hl opt">,</span>N_COL<span class="hl opt">);</span>
         <span class="hl kwa">end</span><span class="hl opt">;</span>
   <span class="hl kwa">end</span><span class="hl opt">;</span>
<span class="hl kwa">end</span><span class="hl opt">;</span>

<span class="hl kwa">procedure</span> <span class="hl kwd">gen_orientation</span><span class="hl opt">(</span>vec<span class="hl opt">:</span>bitvec<span class="hl opt">;</span>iOrient<span class="hl opt">:</span><span class="hl kwb">cardinal</span><span class="hl opt">;</span><span class="hl kwa">var</span> target<span class="hl opt">:</span>Piece<span class="hl opt">);</span>

<span class="hl kwa">var</span> pts<span class="hl opt">:</span>Tpts<span class="hl opt">;</span>
    x<span class="hl opt">,</span>y<span class="hl opt">,</span>ymin<span class="hl opt">,</span>ymax<span class="hl opt">,</span>h<span class="hl opt">,</span>w<span class="hl opt">:</span>shortint<span class="hl opt">;</span>
    rot<span class="hl opt">,</span>iPt<span class="hl opt">:</span><span class="hl kwb">byte</span><span class="hl opt">;</span>
    flip<span class="hl opt">:</span><span class="hl kwb">boolean</span><span class="hl opt">;</span>

<span class="hl kwa">begin</span>
   <span class="hl com">{get (x,y) coordinates}</span>
   <span class="hl kwd">setCoordList</span><span class="hl opt">(</span>vec<span class="hl opt">,</span> pts<span class="hl opt">);</span>

   rot <span class="hl opt">:=</span> iOrient <span class="hl kwa">mod</span> <span class="hl num">6</span><span class="hl opt">;</span>
   flip <span class="hl opt">:=</span> iOrient <span class="hl opt">&gt;=</span> <span class="hl num">6</span><span class="hl opt">;</span>
   <span class="hl kwc">if</span> flip <span class="hl kwc">then</span>
     <span class="hl kwc">for</span> iPt<span class="hl opt">:=</span><span class="hl num">0</span> <span class="hl kwc">to</span> N_ELEM<span class="hl opt">-</span><span class="hl num">1</span> <span class="hl kwc">do</span>
       pts<span class="hl opt">[</span>iPt<span class="hl opt">,</span>dimy<span class="hl opt">]:=-</span>pts<span class="hl opt">[</span>iPt<span class="hl opt">,</span>dimy<span class="hl opt">];</span>

   <span class="hl com">{rotate as necessary}</span>
   <span class="hl kwc">while</span> rot<span class="hl opt">&gt;</span><span class="hl num">0</span> <span class="hl kwc">do</span>
     <span class="hl kwa">begin</span>
       <span class="hl kwc">for</span> iPt<span class="hl opt">:=</span><span class="hl num">0</span> <span class="hl kwc">to</span> N_ELEM<span class="hl opt">-</span><span class="hl num">1</span> <span class="hl kwc">do</span>
         <span class="hl kwa">begin</span>
           x<span class="hl opt">:=</span>pts<span class="hl opt">[</span>iPt<span class="hl opt">,</span>dimx<span class="hl opt">];</span>
           y<span class="hl opt">:=</span>pts<span class="hl opt">[</span>iPt<span class="hl opt">,</span>dimy<span class="hl opt">];</span>
           pts<span class="hl opt">[</span>iPt<span class="hl opt">,</span>dimx<span class="hl opt">]:=</span><span class="hl kwd">floor</span><span class="hl opt">(</span><span class="hl num">2</span><span class="hl opt">*</span>x<span class="hl opt">-</span><span class="hl num">3</span><span class="hl opt">*</span>y<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">4</span><span class="hl opt">);</span>
           pts<span class="hl opt">[</span>iPt<span class="hl opt">,</span>dimy<span class="hl opt">]:=</span><span class="hl kwd">floor</span><span class="hl opt">(</span><span class="hl num">2</span><span class="hl opt">*</span>x<span class="hl opt">+</span>y<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">2</span><span class="hl opt">);</span>
         <span class="hl kwa">end</span><span class="hl opt">;</span>
      <span class="hl kwd">dec</span><span class="hl opt">(</span>rot<span class="hl opt">);</span>
   <span class="hl kwa">end</span><span class="hl opt">;</span>

   <span class="hl com">{determine vertical shift}</span>
   yMin <span class="hl opt">:=</span> pts<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">,</span>dimy<span class="hl opt">];</span>
   yMax <span class="hl opt">:=</span> yMin<span class="hl opt">;</span>
   <span class="hl kwc">for</span> iPt<span class="hl opt">:=</span> <span class="hl num">1</span> <span class="hl kwc">to</span> N_ELEM<span class="hl opt">-</span><span class="hl num">1</span> <span class="hl kwc">do</span>
     <span class="hl kwa">begin</span>
       y <span class="hl opt">:=</span> pts<span class="hl opt">[</span>iPt<span class="hl opt">,</span>dimy<span class="hl opt">];</span>

       <span class="hl kwc">if</span> y <span class="hl opt">&lt;</span> yMin <span class="hl kwc">then</span>
         yMin <span class="hl opt">:=</span> y
       <span class="hl kwc">else if</span> y <span class="hl opt">&gt;</span> yMax <span class="hl kwc">then</span>
         yMax <span class="hl opt">:=</span> y<span class="hl opt">;</span>
     <span class="hl kwa">end</span><span class="hl opt">;</span>
   h<span class="hl opt">:=</span>yMax<span class="hl opt">-</span>yMin<span class="hl opt">;</span>

   <span class="hl kwd">shiftUpLines</span><span class="hl opt">(</span>pts<span class="hl opt">,</span> yMin<span class="hl opt">);</span>
   w <span class="hl opt">:=</span> <span class="hl kwd">shiftToX0</span><span class="hl opt">(</span>pts<span class="hl opt">,</span> target<span class="hl opt">.</span>m_instance<span class="hl opt">[</span>EVEN<span class="hl opt">],</span> <span class="hl num">0</span><span class="hl opt">);</span>
   target<span class="hl opt">.</span><span class="hl kwd">set_ok_positions</span><span class="hl opt">(</span>EVEN<span class="hl opt">,</span> w<span class="hl opt">,</span> h<span class="hl opt">);</span>
   <span class="hl kwb">cardinal</span><span class="hl opt">(</span>target<span class="hl opt">.</span>m_instance<span class="hl opt">[</span>EVEN<span class="hl opt">].</span>m_vec<span class="hl opt">) :=</span> <span class="hl kwb">cardinal</span><span class="hl opt">(</span>target<span class="hl opt">.</span>m_instance<span class="hl opt">[</span>EVEN<span class="hl opt">].</span>m_vec<span class="hl opt">)</span> <span class="hl kwa">shr</span> target<span class="hl opt">.</span>m_instance<span class="hl opt">[</span>EVEN<span class="hl opt">].</span>m_offset<span class="hl opt">;</span>

   <span class="hl com">{shift down one line}</span>
   <span class="hl kwd">shiftUpLines</span><span class="hl opt">(</span>pts<span class="hl opt">, -</span><span class="hl num">1</span><span class="hl opt">);</span>
   w <span class="hl opt">:=</span> <span class="hl kwd">shiftToX0</span><span class="hl opt">(</span>pts<span class="hl opt">,</span> target<span class="hl opt">.</span>m_instance<span class="hl opt">[</span>ODD<span class="hl opt">],</span> <span class="hl num">1</span><span class="hl opt">);</span>
   <span class="hl com">{shift the bitmask back one line}</span>
   <span class="hl kwb">cardinal</span><span class="hl opt">(</span>target<span class="hl opt">.</span>m_instance<span class="hl opt">[</span>ODD<span class="hl opt">].</span>m_vec<span class="hl opt">) :=</span><span class="hl kwb">cardinal</span><span class="hl opt">(</span>target<span class="hl opt">.</span>m_instance<span class="hl opt">[</span>ODD<span class="hl opt">].</span>m_vec<span class="hl opt">)</span> <span class="hl kwa">shr</span> N_COL<span class="hl opt">;</span>
   target<span class="hl opt">.</span><span class="hl kwd">set_ok_positions</span><span class="hl opt">(</span>ODD<span class="hl opt">,</span> w<span class="hl opt">,</span> h<span class="hl opt">);</span>
   <span class="hl kwb">cardinal</span><span class="hl opt">(</span>target<span class="hl opt">.</span>m_instance<span class="hl opt">[</span>ODD<span class="hl opt">].</span>m_vec<span class="hl opt">):=</span> <span class="hl kwb">cardinal</span><span class="hl opt">(</span>target<span class="hl opt">.</span>m_instance<span class="hl opt">[</span>ODD<span class="hl opt">].</span>m_vec<span class="hl opt">)</span> <span class="hl kwa">shr</span> target<span class="hl opt">.</span>m_instance<span class="hl opt">[</span>ODD<span class="hl opt">].</span>m_offset<span class="hl opt">;</span>
<span class="hl kwa">end</span><span class="hl opt">;</span>

<span class="hl kwa">function</span> <span class="hl kwd">getPiece</span><span class="hl opt">(</span>iPiece<span class="hl opt">,</span>iOrient<span class="hl opt">:</span><span class="hl kwb">cardinal</span><span class="hl opt">;</span>iParity<span class="hl opt">:</span>parity<span class="hl opt">):</span>instance<span class="hl opt">;</span><span class="hl kwa">inline</span><span class="hl opt">;</span>

<span class="hl kwa">begin</span>
  getpiece<span class="hl opt">:=</span>s_basePiece<span class="hl opt">[</span>iPiece<span class="hl opt">][</span>iOrient<span class="hl opt">].</span>m_instance<span class="hl opt">[</span>iParity<span class="hl opt">];</span>
<span class="hl kwa">end</span><span class="hl opt">;</span>

<span class="hl kwa">procedure</span> gen_all_orientations<span class="hl opt">;</span>

<span class="hl kwa">var</span> ipiece<span class="hl opt">:</span>piecenr<span class="hl opt">;</span>
    iorient<span class="hl opt">:</span>orientation<span class="hl opt">;</span>
    irow<span class="hl opt">,</span>icol<span class="hl opt">:</span><span class="hl kwb">byte</span><span class="hl opt">;</span>
    refpiece<span class="hl opt">:</span>bitvec<span class="hl opt">;</span>
    n<span class="hl opt">,</span>npiece<span class="hl opt">:</span><span class="hl kwb">byte</span><span class="hl opt">;</span>

<span class="hl kwa">begin</span>
   <span class="hl kwc">for</span> iPiece<span class="hl opt">:=</span><span class="hl kwd">low</span><span class="hl opt">(</span>ipiece<span class="hl opt">)</span> <span class="hl kwc">to</span> <span class="hl kwd">high</span><span class="hl opt">(</span>ipiece<span class="hl opt">)</span> <span class="hl kwc">do</span>
     <span class="hl kwa">begin</span>
       refPiece<span class="hl opt">:=</span>BaseVecs<span class="hl opt">[</span>iPiece<span class="hl opt">];</span>
       <span class="hl kwc">for</span> iOrient<span class="hl opt">:=</span><span class="hl kwd">low</span><span class="hl opt">(</span>iorient<span class="hl opt">)</span> <span class="hl kwc">to</span> <span class="hl kwd">high</span><span class="hl opt">(</span>iorient<span class="hl opt">)</span> <span class="hl kwc">do</span>
         <span class="hl kwa">begin</span>
           <span class="hl kwd">gen_orientation</span><span class="hl opt">(</span>refPiece<span class="hl opt">,</span> iOrient<span class="hl opt">,</span> s_basePiece<span class="hl opt">[</span>iPiece<span class="hl opt">,</span>iOrient<span class="hl opt">]);</span>
           <span class="hl kwc">with</span> s_basePiece<span class="hl opt">[</span>iPiece<span class="hl opt">,</span>iOrient<span class="hl opt">]</span> <span class="hl kwc">do</span>
             <span class="hl kwa">begin</span>
               <span class="hl kwc">if</span> <span class="hl opt">(</span>iPiece<span class="hl opt">=</span>SKIP_PIECE<span class="hl opt">)</span> <span class="hl kwa">and</span> <span class="hl opt">(</span>iOrient <span class="hl kwa">in</span> <span class="hl opt">[</span><span class="hl num">3</span><span class="hl opt">.</span><span class="hl num">.5</span><span class="hl opt">,</span><span class="hl num">9</span><span class="hl opt">.</span><span class="hl num">.11</span><span class="hl opt">])</span> <span class="hl kwc">then</span>
                 <span class="hl kwa">begin</span>
                   m_instance<span class="hl opt">[</span>odd<span class="hl opt">].</span>m_allowed <span class="hl opt">:= [];</span>
                   m_instance<span class="hl opt">[</span>even<span class="hl opt">].</span>m_allowed <span class="hl opt">:= [];</span>
                 <span class="hl kwa">end</span><span class="hl opt">;</span>
             <span class="hl kwa">end</span><span class="hl opt">;</span>
         <span class="hl kwa">end</span><span class="hl opt">;</span>
     <span class="hl kwa">end</span><span class="hl opt">;</span>

   <span class="hl kwc">for</span> iPiece<span class="hl opt">:=</span><span class="hl kwd">low</span><span class="hl opt">(</span>ipiece<span class="hl opt">)</span> <span class="hl kwc">to</span> <span class="hl kwd">high</span><span class="hl opt">(</span>ipiece<span class="hl opt">)</span> <span class="hl kwc">do</span>
     <span class="hl kwa">begin</span>
      <span class="hl kwc">for</span> iOrient<span class="hl opt">:=</span><span class="hl kwd">low</span><span class="hl opt">(</span>iorient<span class="hl opt">)</span> <span class="hl kwc">to</span> <span class="hl kwd">high</span><span class="hl opt">(</span>iorient<span class="hl opt">)</span> <span class="hl kwc">do</span>
        <span class="hl kwa">begin</span>
         n<span class="hl opt">:=</span><span class="hl num">0</span><span class="hl opt">;</span>
         <span class="hl kwc">for</span> iRow<span class="hl opt">:=</span><span class="hl num">0</span> <span class="hl kwc">to</span> N_ROW<span class="hl opt">-</span><span class="hl num">1</span> <span class="hl kwc">do</span>
           <span class="hl kwa">begin</span>
            <span class="hl kwc">with</span> <span class="hl kwd">getPiece</span><span class="hl opt">(</span>iPiece<span class="hl opt">,</span> iOrient<span class="hl opt">,</span> <span class="hl kwd">parity</span><span class="hl opt">(</span>iRow <span class="hl kwa">and</span> <span class="hl num">1</span><span class="hl opt">))</span> <span class="hl kwc">do</span>
              <span class="hl kwc">for</span> iCol<span class="hl opt">:=</span><span class="hl num">0</span> <span class="hl kwc">to</span> N_COL<span class="hl opt">-</span><span class="hl num">1</span> <span class="hl kwc">do</span>
                <span class="hl kwa">begin</span>
                  <span class="hl kwc">if</span> n <span class="hl kwa">in</span> m_allowed <span class="hl kwc">then</span>
                    <span class="hl kwa">begin</span>
                      nPiece<span class="hl opt">:=</span>g_okPieces<span class="hl opt">[</span>iRow<span class="hl opt">,</span>iCol<span class="hl opt">].</span>nPieces<span class="hl opt">[</span>iPiece<span class="hl opt">];</span>
                      g_okPieces<span class="hl opt">[</span>iRow<span class="hl opt">,</span>iCol<span class="hl opt">].</span>pieceVec<span class="hl opt">[</span>iPiece<span class="hl opt">,</span>nPiece<span class="hl opt">]:=</span><span class="hl kwd">bitvec</span><span class="hl opt">(</span><span class="hl kwb">cardinal</span><span class="hl opt">(</span>m_vec<span class="hl opt">)</span> <span class="hl kwa">shl</span> iCol<span class="hl opt">);</span>
                      <span class="hl kwd">inc</span><span class="hl opt">(</span>g_okPieces<span class="hl opt">[</span>iRow<span class="hl opt">,</span>iCol<span class="hl opt">].</span>nPieces<span class="hl opt">[</span>iPiece<span class="hl opt">]);</span>
                    <span class="hl kwa">end</span><span class="hl opt">;</span>
                  <span class="hl kwd">inc</span><span class="hl opt">(</span>n<span class="hl opt">);</span>
                <span class="hl kwa">end</span><span class="hl opt">;</span>
          <span class="hl kwa">end</span>
      <span class="hl kwa">end</span>
   <span class="hl kwa">end</span>
<span class="hl kwa">end</span><span class="hl opt">;</span>

<span class="hl kwa">procedure</span> init_board<span class="hl opt">;</span>

<span class="hl kwa">begin</span>
  m_cursoln<span class="hl opt">.</span><span class="hl kwd">init</span><span class="hl opt">(</span>NO_PIECE<span class="hl opt">);</span>
  m_minsoln<span class="hl opt">.</span><span class="hl kwd">init</span><span class="hl opt">(</span>NO_PIECE<span class="hl opt">);</span>
  m_maxsoln<span class="hl opt">.</span><span class="hl kwd">init</span><span class="hl opt">(</span>NO_PIECE<span class="hl opt">);</span>
  m_nsoln<span class="hl opt">:=</span><span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl kwa">end</span><span class="hl opt">;</span>

<span class="hl kwa">const</span> g_firstRegion<span class="hl opt">:</span><span class="hl kwa">array</span><span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">.</span><span class="hl num">.31</span><span class="hl opt">]</span> <span class="hl kwa">of</span> bitvec<span class="hl opt">=(</span>
        <span class="hl opt">[],      [</span><span class="hl num">0</span><span class="hl opt">],      [</span><span class="hl num">1</span><span class="hl opt">],       [</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">1</span><span class="hl opt">],</span>
        <span class="hl opt">[</span><span class="hl num">2</span><span class="hl opt">],     [</span><span class="hl num">0</span><span class="hl opt">],      [</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">2</span><span class="hl opt">],     [</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">2</span><span class="hl opt">],</span>
        <span class="hl opt">[</span><span class="hl num">3</span><span class="hl opt">],     [</span><span class="hl num">0</span><span class="hl opt">],      [</span><span class="hl num">1</span><span class="hl opt">],       [</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">1</span><span class="hl opt">],</span>
        <span class="hl opt">[</span><span class="hl num">2</span><span class="hl opt">,</span><span class="hl num">3</span><span class="hl opt">],   [</span><span class="hl num">0</span><span class="hl opt">],      [</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">2</span><span class="hl opt">,</span><span class="hl num">3</span><span class="hl opt">],   [</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">2</span><span class="hl opt">,</span><span class="hl num">3</span><span class="hl opt">],</span>
        <span class="hl opt">[</span><span class="hl num">4</span><span class="hl opt">],     [</span><span class="hl num">0</span><span class="hl opt">],      [</span><span class="hl num">1</span><span class="hl opt">],       [</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">1</span><span class="hl opt">],</span>
        <span class="hl opt">[</span><span class="hl num">2</span><span class="hl opt">],     [</span><span class="hl num">0</span><span class="hl opt">],      [</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">2</span><span class="hl opt">],     [</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">2</span><span class="hl opt">],</span>
        <span class="hl opt">[</span><span class="hl num">3</span><span class="hl opt">,</span><span class="hl num">4</span><span class="hl opt">],   [</span><span class="hl num">0</span><span class="hl opt">],      [</span><span class="hl num">1</span><span class="hl opt">],       [</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">2</span><span class="hl opt">],</span>
        <span class="hl opt">[</span><span class="hl num">2</span><span class="hl opt">,</span><span class="hl num">3</span><span class="hl opt">,</span><span class="hl num">4</span><span class="hl opt">], [</span><span class="hl num">0</span><span class="hl opt">],      [</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">2</span><span class="hl opt">,</span><span class="hl num">3</span><span class="hl opt">,</span><span class="hl num">4</span><span class="hl opt">], [</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">2</span><span class="hl opt">,</span><span class="hl num">3</span><span class="hl opt">,</span><span class="hl num">4</span><span class="hl opt">]</span>
<span class="hl opt">);</span>

<span class="hl kwa">function</span> <span class="hl kwd">calc_bad_islands</span><span class="hl opt">(</span>boardVec<span class="hl opt">:</span>bitvec<span class="hl opt">;</span>row<span class="hl opt">:</span><span class="hl kwb">longint</span><span class="hl opt">):</span>goodbad<span class="hl opt">;</span>

<span class="hl kwa">var</span> tofill<span class="hl opt">,</span>boardmask<span class="hl opt">,</span>bottom<span class="hl opt">,</span>startregion<span class="hl opt">:</span>bitvec<span class="hl opt">;</span>
    filled<span class="hl opt">:</span><span class="hl kwb">boolean</span><span class="hl opt">;</span>

<span class="hl kwa">begin</span>
   toFill<span class="hl opt">:=[</span><span class="hl num">0</span><span class="hl opt">.</span><span class="hl num">.31</span><span class="hl opt">]-</span>boardVec<span class="hl opt">;</span>
   <span class="hl com">{Compensate for odd rows.}</span>
   <span class="hl kwc">if</span> row <span class="hl kwa">and</span> <span class="hl num">1</span><span class="hl opt">&lt;&gt;</span><span class="hl num">0</span> <span class="hl kwc">then</span>
     <span class="hl kwa">begin</span>
       <span class="hl kwd">dec</span><span class="hl opt">(</span>row<span class="hl opt">);</span>
       <span class="hl kwb">cardinal</span><span class="hl opt">(</span>toFill<span class="hl opt">):=</span><span class="hl kwb">cardinal</span><span class="hl opt">(</span>tofill<span class="hl opt">)</span> <span class="hl kwa">shl</span> N_COL<span class="hl opt">;</span>
     <span class="hl kwa">end</span><span class="hl opt">;</span>

   boardMask <span class="hl opt">:=</span> BOARD_MASK<span class="hl opt">;</span> <span class="hl com">{all but the first two bits}</span>
   <span class="hl kwc">if</span> row<span class="hl opt">&gt;</span><span class="hl num">4</span> <span class="hl kwc">then</span>
      <span class="hl kwb">cardinal</span><span class="hl opt">(</span>boardMask<span class="hl opt">):=</span><span class="hl kwb">cardinal</span><span class="hl opt">(</span>boardmask<span class="hl opt">)</span> <span class="hl kwa">shr</span> <span class="hl opt">((</span>row<span class="hl opt">-</span><span class="hl num">4</span><span class="hl opt">)*</span>N_COL<span class="hl opt">);</span>
   toFill<span class="hl opt">:=</span>tofill<span class="hl opt">*</span>boardMask<span class="hl opt">;</span>

   <span class="hl com">{a little pre-work to speed things up}</span>
   filled<span class="hl opt">:=</span>toFill<span class="hl opt">*</span>LAST_ROW<span class="hl opt">=</span>LAST_ROW<span class="hl opt">;</span>
   bottom<span class="hl opt">:=</span>LAST_ROW<span class="hl opt">;</span>
   <span class="hl kwc">while</span> bottom<span class="hl opt">*</span>toFill<span class="hl opt">=</span>bottom <span class="hl kwc">do</span>
     <span class="hl kwa">begin</span>
       toFill<span class="hl opt">:=</span>tofill<span class="hl opt">-</span>bottom<span class="hl opt">;</span>
       <span class="hl kwb">cardinal</span><span class="hl opt">(</span>bottom<span class="hl opt">):=</span><span class="hl kwb">cardinal</span><span class="hl opt">(</span>bottom<span class="hl opt">)</span> <span class="hl kwa">shr</span> N_COL<span class="hl opt">;</span>
     <span class="hl kwa">end</span><span class="hl opt">;</span>

   <span class="hl kwc">if</span> filled <span class="hl kwa">or</span> <span class="hl opt">(</span>row<span class="hl opt">&lt;</span><span class="hl num">4</span><span class="hl opt">)</span> <span class="hl kwc">then</span>
      startRegion <span class="hl opt">:=</span> bottom <span class="hl opt">*</span> toFill
   <span class="hl kwc">else</span>
     <span class="hl kwa">begin</span>
       startRegion <span class="hl opt">:=</span> g_firstRegion<span class="hl opt">[</span><span class="hl kwb">cardinal</span><span class="hl opt">(</span>toFill<span class="hl opt">*</span>TOP_ROW<span class="hl opt">)];</span>
       <span class="hl kwc">if</span> startRegion<span class="hl opt">=[]</span> <span class="hl kwc">then</span>
          <span class="hl kwa">begin</span>
            startRegion <span class="hl opt">:=</span> <span class="hl kwd">bitvec</span><span class="hl opt">(</span><span class="hl kwb">cardinal</span><span class="hl opt">(</span>toFill<span class="hl opt">)</span> <span class="hl kwa">shr</span> N_COL<span class="hl opt">)*</span>TOP_ROW<span class="hl opt">;</span>
            startRegion <span class="hl opt">:=</span> g_firstRegion<span class="hl opt">[</span><span class="hl kwb">cardinal</span><span class="hl opt">(</span>startRegion<span class="hl opt">)];</span>
            <span class="hl kwb">cardinal</span><span class="hl opt">(</span>startRegion<span class="hl opt">) :=</span> <span class="hl kwb">cardinal</span><span class="hl opt">(</span>startregion<span class="hl opt">)</span> <span class="hl kwa">shl</span> N_COL<span class="hl opt">;</span>
          <span class="hl kwa">end</span><span class="hl opt">;</span>
        startRegion<span class="hl opt">:=</span>startregion<span class="hl opt">+</span><span class="hl kwd">bitvec</span><span class="hl opt">(</span><span class="hl kwb">cardinal</span><span class="hl opt">(</span>startRegion<span class="hl opt">)</span> <span class="hl kwa">shl</span> N_COL<span class="hl opt">)*</span>toFill<span class="hl opt">;</span>
     <span class="hl kwa">end</span><span class="hl opt">;</span>

   <span class="hl kwc">while</span> toFill<span class="hl opt">&lt;&gt;[]</span> <span class="hl kwc">do</span>
     <span class="hl kwa">begin</span>
       <span class="hl kwc">if</span> <span class="hl kwd">badRegion</span><span class="hl opt">(</span>toFill<span class="hl opt">,</span> startRegion<span class="hl opt">)</span> <span class="hl kwc">then</span>
          <span class="hl kwa">begin</span>
            <span class="hl kwc">if</span> toFill<span class="hl opt">&lt;&gt;[]</span> <span class="hl kwc">then</span>
              calc_bad_islands<span class="hl opt">:=</span>ALWAYS_BAD
            <span class="hl kwc">else</span>
              calc_bad_islands<span class="hl opt">:=</span>BAD<span class="hl opt">;</span>
            exit<span class="hl opt">;</span>
          <span class="hl kwa">end</span><span class="hl opt">;</span>
       startRegion <span class="hl opt">:= [</span><span class="hl kwd">first_set_bit</span><span class="hl opt">(</span>toFill<span class="hl opt">)];</span>
     <span class="hl kwa">end</span><span class="hl opt">;</span>

   calc_bad_islands<span class="hl opt">:=</span>GOOD<span class="hl opt">;</span>
<span class="hl kwa">end</span><span class="hl opt">;</span>


<span class="hl kwa">function</span> <span class="hl kwd">has_bad_islands</span><span class="hl opt">(</span>boardvec<span class="hl opt">:</span>bitvec<span class="hl opt">;</span>row<span class="hl opt">:</span><span class="hl kwb">longint</span><span class="hl opt">):</span>goodbad<span class="hl opt">;</span>

<span class="hl kwa">var</span> last_row<span class="hl opt">:</span>bitvec<span class="hl opt">;</span>
    isodd<span class="hl opt">:</span>parity<span class="hl opt">;</span>
    isclosed<span class="hl opt">:</span>fixed<span class="hl opt">;</span>

<span class="hl kwa">begin</span>
   <span class="hl com">{skip over any filled rows}</span>
   <span class="hl kwc">while</span> boardVec<span class="hl opt">*</span>TOP_ROW<span class="hl opt">=</span>TOP_ROW <span class="hl kwc">do</span>
     <span class="hl kwa">begin</span>
       <span class="hl kwb">cardinal</span><span class="hl opt">(</span>boardVec<span class="hl opt">):=</span><span class="hl kwb">cardinal</span><span class="hl opt">(</span>boardvec<span class="hl opt">)</span> <span class="hl kwa">shr</span> N_COL<span class="hl opt">;</span>
       <span class="hl kwd">inc</span><span class="hl opt">(</span>row<span class="hl opt">);</span>
     <span class="hl kwa">end</span><span class="hl opt">;</span>

   has_bad_islands<span class="hl opt">:=</span>bad<span class="hl opt">;</span>
   <span class="hl kwc">with</span> g_islandInfo<span class="hl opt">[</span><span class="hl kwb">cardinal</span><span class="hl opt">(</span>boardvec<span class="hl opt">*(</span>TOP_ROW<span class="hl opt">+</span>SECOND_ROW<span class="hl opt">))]</span> <span class="hl kwc">do</span>
     <span class="hl kwa">begin</span>
       last_row<span class="hl opt">:=</span><span class="hl kwd">bitvec</span><span class="hl opt">(</span><span class="hl kwb">cardinal</span><span class="hl opt">(</span>boardvec<span class="hl opt">)</span> <span class="hl kwa">shr</span> <span class="hl opt">(</span><span class="hl num">2</span><span class="hl opt">*</span>N_COL<span class="hl opt">))*</span>TOP_ROW<span class="hl opt">;</span>
       isOdd<span class="hl opt">:=</span><span class="hl kwd">parity</span><span class="hl opt">(</span>row <span class="hl kwa">and</span> <span class="hl num">1</span><span class="hl opt">);</span>

       <span class="hl kwc">if</span> <span class="hl kwa">not</span><span class="hl opt">(</span><span class="hl kwb">cardinal</span><span class="hl opt">(</span>last_row<span class="hl opt">)</span> <span class="hl kwa">in</span> alwaysBad<span class="hl opt">[</span><span class="hl kwd">parity</span><span class="hl opt">(</span>row <span class="hl kwa">and</span> <span class="hl num">1</span><span class="hl opt">)])</span> <span class="hl kwc">then</span>
         <span class="hl kwc">if</span> boardVec<span class="hl opt">*</span><span class="hl kwd">bitvec</span><span class="hl opt">(</span><span class="hl kwb">cardinal</span><span class="hl opt">(</span><span class="hl kwb">cardinal</span><span class="hl opt">(</span>TOP_ROW<span class="hl opt">)</span> <span class="hl kwa">shl</span> N_COL<span class="hl opt">*</span><span class="hl num">3</span><span class="hl opt">))=[]</span> <span class="hl kwc">then</span>
           <span class="hl kwa">begin</span>
             isClosed<span class="hl opt">:=</span><span class="hl kwd">fixed</span><span class="hl opt">(</span>row<span class="hl opt">&gt;</span><span class="hl num">6</span><span class="hl opt">);</span> <span class="hl com">{because we track 3 rows}</span>
               <span class="hl kwc">if</span> <span class="hl kwa">not</span><span class="hl opt">(</span><span class="hl kwb">cardinal</span><span class="hl opt">(</span>last_row<span class="hl opt">)</span> <span class="hl kwa">in</span> is_known<span class="hl opt">[</span>isClosed<span class="hl opt">,</span>isOdd<span class="hl opt">])</span> <span class="hl kwc">then</span>
                 <span class="hl kwc">if</span> boardVec<span class="hl opt">&lt;&gt;[]</span> <span class="hl kwc">then</span>
                   <span class="hl kwa">begin</span>
                     has_bad_islands<span class="hl opt">:=</span><span class="hl kwd">calc_bad_islands</span><span class="hl opt">(</span>boardvec<span class="hl opt">,</span>row<span class="hl opt">);</span>
                     <span class="hl kwd">include</span><span class="hl opt">(</span>is_known<span class="hl opt">[</span>isClosed<span class="hl opt">,</span>isOdd<span class="hl opt">],</span><span class="hl kwb">cardinal</span><span class="hl opt">(</span>last_row<span class="hl opt">));</span>
                     <span class="hl kwc">if</span> has_bad_islands<span class="hl opt">&lt;&gt;</span>good <span class="hl kwc">then</span>
                       <span class="hl kwd">include</span><span class="hl opt">(</span>is_known<span class="hl opt">[</span>isClosed<span class="hl opt">,</span>isOdd<span class="hl opt">],</span><span class="hl kwb">cardinal</span><span class="hl opt">(</span>last_row<span class="hl opt">));</span>
                   <span class="hl kwa">end</span>
                 <span class="hl kwc">else</span>
                   has_bad_islands<span class="hl opt">:=</span>good
               <span class="hl kwc">else</span>
                 <span class="hl kwc">if</span> <span class="hl kwa">not</span><span class="hl opt">(</span><span class="hl kwb">cardinal</span><span class="hl opt">(</span>last_row<span class="hl opt">)</span> <span class="hl kwa">in</span> has_bad<span class="hl opt">[</span>isClosed<span class="hl opt">,</span>isOdd<span class="hl opt">])</span> <span class="hl kwc">then</span>
                   has_bad_islands<span class="hl opt">:=</span>good<span class="hl opt">;</span>
           <span class="hl kwa">end</span>
         <span class="hl kwc">else</span>
           has_bad_islands<span class="hl opt">:=</span><span class="hl kwd">calc_bad_islands</span><span class="hl opt">(</span>boardvec<span class="hl opt">,</span>row<span class="hl opt">);</span>
     <span class="hl kwa">end</span><span class="hl opt">;</span>
<span class="hl kwa">end</span><span class="hl opt">;</span>

<span class="hl kwa">const</span> g_flip<span class="hl opt">:</span><span class="hl kwa">array</span><span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">.</span><span class="hl num">.31</span><span class="hl opt">]</span> <span class="hl kwa">of</span> bitvec<span class="hl opt">=(</span>
        <span class="hl opt">[],        [</span><span class="hl num">4</span><span class="hl opt">],        [</span><span class="hl num">3</span><span class="hl opt">],        [</span><span class="hl num">3</span><span class="hl opt">,</span><span class="hl num">4</span><span class="hl opt">],</span>
        <span class="hl opt">[</span><span class="hl num">2</span><span class="hl opt">],       [</span><span class="hl num">2</span><span class="hl opt">,</span><span class="hl num">4</span><span class="hl opt">],      [</span><span class="hl num">2</span><span class="hl opt">,</span><span class="hl num">3</span><span class="hl opt">],      [</span><span class="hl num">2</span><span class="hl opt">,</span><span class="hl num">3</span><span class="hl opt">,</span><span class="hl num">4</span><span class="hl opt">],</span>
        <span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">],       [</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">4</span><span class="hl opt">],      [</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">3</span><span class="hl opt">],      [</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">3</span><span class="hl opt">,</span><span class="hl num">4</span><span class="hl opt">],</span>
        <span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">2</span><span class="hl opt">],     [</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">2</span><span class="hl opt">,</span><span class="hl num">4</span><span class="hl opt">],    [</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">2</span><span class="hl opt">,</span><span class="hl num">3</span><span class="hl opt">],    [</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">2</span><span class="hl opt">,</span><span class="hl num">3</span><span class="hl opt">,</span><span class="hl num">4</span><span class="hl opt">],</span>
        <span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">],       [</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">4</span><span class="hl opt">],      [</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">3</span><span class="hl opt">],      [</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">3</span><span class="hl opt">,</span><span class="hl num">4</span><span class="hl opt">],</span>
        <span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">2</span><span class="hl opt">],     [</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">2</span><span class="hl opt">,</span><span class="hl num">4</span><span class="hl opt">],    [</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">2</span><span class="hl opt">,</span><span class="hl num">3</span><span class="hl opt">],    [</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">2</span><span class="hl opt">,</span><span class="hl num">3</span><span class="hl opt">,</span><span class="hl num">4</span><span class="hl opt">],</span>
        <span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">1</span><span class="hl opt">],     [</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">4</span><span class="hl opt">],    [</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">3</span><span class="hl opt">],    [</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">3</span><span class="hl opt">,</span><span class="hl num">4</span><span class="hl opt">],</span>
        <span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">2</span><span class="hl opt">],   [</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">2</span><span class="hl opt">,</span><span class="hl num">4</span><span class="hl opt">],  [</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">2</span><span class="hl opt">,</span><span class="hl num">3</span><span class="hl opt">],  [</span><span class="hl num">0</span><span class="hl opt">,</span><span class="hl num">1</span><span class="hl opt">,</span><span class="hl num">2</span><span class="hl opt">,</span><span class="hl num">3</span><span class="hl opt">,</span><span class="hl num">4</span><span class="hl opt">]</span>
<span class="hl opt">);</span>

<span class="hl kwa">function</span> <span class="hl kwd">flipTwoRows</span><span class="hl opt">(</span>bits<span class="hl opt">:</span>bitvec<span class="hl opt">):</span>bitvec<span class="hl opt">;</span><span class="hl kwa">inline</span><span class="hl opt">;</span>

<span class="hl kwa">var</span> flipped<span class="hl opt">:</span><span class="hl kwb">cardinal</span><span class="hl opt">;</span>

<span class="hl kwa">begin</span>
   flipped<span class="hl opt">:=</span><span class="hl kwb">cardinal</span><span class="hl opt">(</span>g_flip<span class="hl opt">[</span><span class="hl kwb">cardinal</span><span class="hl opt">(</span>bits<span class="hl opt">)</span> <span class="hl kwa">shr</span> N_COL<span class="hl opt">])</span> <span class="hl kwa">shl</span> N_COL<span class="hl opt">;</span>
   fliptworows<span class="hl opt">:=</span><span class="hl kwd">bitvec</span><span class="hl opt">(</span>flipped <span class="hl kwa">or</span> <span class="hl kwb">cardinal</span><span class="hl opt">(</span>g_flip<span class="hl opt">[</span><span class="hl kwb">cardinal</span><span class="hl opt">(</span>bits<span class="hl opt">*</span>TOP_ROW<span class="hl opt">)]));</span>
<span class="hl kwa">end</span><span class="hl opt">;</span>

<span class="hl kwa">procedure</span> <span class="hl kwd">mark_bad</span><span class="hl opt">(</span><span class="hl kwa">var</span> info<span class="hl opt">:</span>IslandInfo<span class="hl opt">;</span>n<span class="hl opt">:</span><span class="hl kwb">byte</span><span class="hl opt">;</span>eo<span class="hl opt">:</span>parity<span class="hl opt">;</span>always<span class="hl opt">:</span><span class="hl kwb">boolean</span><span class="hl opt">);</span><span class="hl kwa">inline</span><span class="hl opt">;</span>

<span class="hl kwa">begin</span>
  <span class="hl kwc">with</span> info <span class="hl kwc">do</span>
   <span class="hl kwa">begin</span>
     <span class="hl kwd">include</span><span class="hl opt">(</span>has_bad<span class="hl opt">[</span>OPEN<span class="hl opt">,</span>eo<span class="hl opt">],</span>n<span class="hl opt">);</span>
     <span class="hl kwd">include</span><span class="hl opt">(</span>has_bad<span class="hl opt">[</span>CLOSED<span class="hl opt">,</span>eo<span class="hl opt">],</span>n<span class="hl opt">);</span>

     <span class="hl kwc">if</span> always <span class="hl kwc">then</span>
       <span class="hl kwd">include</span><span class="hl opt">(</span>alwaysBad<span class="hl opt">[</span>eo<span class="hl opt">],</span>n<span class="hl opt">);</span>
   <span class="hl kwa">end</span><span class="hl opt">;</span>
<span class="hl kwa">end</span><span class="hl opt">;</span>

<span class="hl kwa">procedure</span> calc_always_bad<span class="hl opt">;</span>

<span class="hl kwa">var</span> i<span class="hl opt">,</span>iWord<span class="hl opt">:</span><span class="hl kwb">cardinal</span><span class="hl opt">;</span>
    boardvec<span class="hl opt">:</span>bitvec<span class="hl opt">;</span>
    hasbad<span class="hl opt">:</span>goodbad<span class="hl opt">;</span>
    always<span class="hl opt">:</span><span class="hl kwb">boolean</span><span class="hl opt">;</span>
    flipped<span class="hl opt">:^</span>islandinfo<span class="hl opt">;</span>

<span class="hl kwa">begin</span>
   <span class="hl kwc">for</span> iWord<span class="hl opt">:=</span><span class="hl num">1</span> <span class="hl kwc">to</span> MAX_ISLAND_OFFSET<span class="hl opt">-</span><span class="hl num">1</span> <span class="hl kwc">do</span>
     <span class="hl kwa">begin</span>
      flipped <span class="hl opt">:= &#64;</span>g_islandInfo<span class="hl opt">[</span><span class="hl kwb">cardinal</span><span class="hl opt">(</span><span class="hl kwd">flipTwoRows</span><span class="hl opt">(</span><span class="hl kwd">bitvec</span><span class="hl opt">(</span>iWord<span class="hl opt">)))];</span>
      <span class="hl kwc">for</span> i<span class="hl opt">:=</span><span class="hl num">0</span> <span class="hl kwc">to</span> <span class="hl num">31</span> <span class="hl kwc">do</span>
        <span class="hl kwa">begin</span>
          boardvec<span class="hl opt">:=</span><span class="hl kwd">bitvec</span><span class="hl opt">((</span>i <span class="hl kwa">shl</span> <span class="hl opt">(</span><span class="hl num">2</span><span class="hl opt">*</span>N_COL<span class="hl opt">))</span> <span class="hl kwa">or</span> iWord<span class="hl opt">);</span>
          <span class="hl kwc">if</span> <span class="hl kwa">not</span><span class="hl opt">(</span>i <span class="hl kwa">in</span> g_islandInfo<span class="hl opt">[</span>iWord<span class="hl opt">].</span>is_known<span class="hl opt">[</span>OPEN<span class="hl opt">,</span>EVEN<span class="hl opt">])</span> <span class="hl kwc">then</span>
            <span class="hl kwa">begin</span>
              hasBad<span class="hl opt">:=</span><span class="hl kwd">calc_bad_islands</span><span class="hl opt">(</span>boardvec<span class="hl opt">,</span><span class="hl num">0</span><span class="hl opt">);</span>
              <span class="hl kwc">if</span> hasBad<span class="hl opt">&lt;&gt;</span>good <span class="hl kwc">then</span>
                <span class="hl kwa">begin</span>
                 always<span class="hl opt">:=</span>hasBad<span class="hl opt">=</span>ALWAYS_BAD<span class="hl opt">;</span>
                 <span class="hl kwd">mark_bad</span><span class="hl opt">(</span>g_islandInfo<span class="hl opt">[</span>iWord<span class="hl opt">],</span> i<span class="hl opt">,</span> EVEN<span class="hl opt">,</span> always<span class="hl opt">);</span>
                 <span class="hl kwd">mark_bad</span><span class="hl opt">(</span>flipped<span class="hl opt">^,</span><span class="hl kwb">cardinal</span><span class="hl opt">(</span>g_flip<span class="hl opt">[</span>i<span class="hl opt">]),</span> ODD<span class="hl opt">,</span> always<span class="hl opt">);</span>
              <span class="hl kwa">end</span><span class="hl opt">;</span>
            <span class="hl kwa">end</span><span class="hl opt">;</span>
      <span class="hl kwa">end</span><span class="hl opt">;</span>
      flipped<span class="hl opt">^.</span>is_known<span class="hl opt">[</span>OPEN<span class="hl opt">,</span>odd<span class="hl opt">]:=[</span><span class="hl num">0</span><span class="hl opt">.</span><span class="hl num">.31</span><span class="hl opt">];</span>
      g_islandInfo<span class="hl opt">[</span>iWord<span class="hl opt">].</span>is_known<span class="hl opt">[</span>OPEN<span class="hl opt">,</span>even<span class="hl opt">]:=[</span><span class="hl num">0</span><span class="hl opt">.</span><span class="hl num">.31</span><span class="hl opt">];</span>
   <span class="hl kwa">end</span>
<span class="hl kwa">end</span><span class="hl opt">;</span>

<span class="hl kwa">procedure</span> <span class="hl kwd">record_solution</span><span class="hl opt">(</span><span class="hl kwa">var</span> s<span class="hl opt">:</span>Soln<span class="hl opt">);</span>

<span class="hl kwa">var</span> spun<span class="hl opt">:</span>soln<span class="hl opt">;</span>

<span class="hl kwa">begin</span>
   s<span class="hl opt">.</span>setcells<span class="hl opt">;</span>
   <span class="hl kwd">inc</span><span class="hl opt">(</span>m_nSoln<span class="hl opt">,</span><span class="hl num">2</span><span class="hl opt">);</span> <span class="hl com">{add solution and its rotation}</span>

   <span class="hl kwc">if</span> m_minSoln<span class="hl opt">.</span>isEmpty <span class="hl kwc">then</span>
     <span class="hl kwa">begin</span>
       m_minSoln <span class="hl opt">:=</span> s<span class="hl opt">;</span>
       m_maxSoln <span class="hl opt">:=</span> s<span class="hl opt">;</span>
       exit<span class="hl opt">;</span>
     <span class="hl kwa">end</span><span class="hl opt">;</span>

   <span class="hl kwc">if</span> s<span class="hl opt">.</span><span class="hl kwd">lessThan</span><span class="hl opt">(</span>m_minSoln<span class="hl opt">)</span> <span class="hl kwc">then</span>
      m_minSoln <span class="hl opt">:=</span> s
   <span class="hl kwc">else if</span> m_maxSoln<span class="hl opt">.</span><span class="hl kwd">lessThan</span><span class="hl opt">(</span>s<span class="hl opt">)</span> <span class="hl kwc">then</span>
      m_maxSoln <span class="hl opt">:=</span> s<span class="hl opt">;</span>

   s<span class="hl opt">.</span><span class="hl kwd">spin</span><span class="hl opt">(</span>spun<span class="hl opt">);</span>
   <span class="hl kwc">if</span> spun<span class="hl opt">.</span><span class="hl kwd">lessThan</span><span class="hl opt">(</span>m_minSoln<span class="hl opt">)</span> <span class="hl kwc">then</span>
      m_minSoln <span class="hl opt">:=</span> spun
   <span class="hl kwc">else if</span> m_maxSoln<span class="hl opt">.</span><span class="hl kwd">lessThan</span><span class="hl opt">(</span>spun<span class="hl opt">)</span> <span class="hl kwc">then</span>
      m_maxSoln <span class="hl opt">:=</span> spun<span class="hl opt">;</span>
<span class="hl kwa">end</span><span class="hl opt">;</span>

<span class="hl kwa">function</span> <span class="hl kwd">gen_all_solutions</span><span class="hl opt">(</span>boardVec<span class="hl opt">,</span>placedPieces<span class="hl opt">:</span>bitvec<span class="hl opt">;</span>row<span class="hl opt">:</span><span class="hl kwb">byte</span><span class="hl opt">):</span><span class="hl kwb">cardinal</span><span class="hl opt">;</span>

<span class="hl kwa">var</span> ipiece<span class="hl opt">:</span>piecenr<span class="hl opt">;</span>
    iorient<span class="hl opt">:</span><span class="hl kwb">byte</span><span class="hl opt">;</span>
    piece<span class="hl opt">:</span>bitvec<span class="hl opt">;</span>

<span class="hl kwa">begin</span>
   <span class="hl kwc">while</span> boardVec<span class="hl opt">*</span>TOP_ROW<span class="hl opt">=</span>TOP_ROW <span class="hl kwc">do</span>
     <span class="hl kwa">begin</span>
       <span class="hl kwb">cardinal</span><span class="hl opt">(</span>boardVec<span class="hl opt">):=</span><span class="hl kwb">cardinal</span><span class="hl opt">(</span>boardvec<span class="hl opt">)</span> <span class="hl kwa">shr</span> N_COL<span class="hl opt">;</span>
       <span class="hl kwd">inc</span><span class="hl opt">(</span>row<span class="hl opt">);</span>
     <span class="hl kwa">end</span><span class="hl opt">;</span>
   gen_all_solutions<span class="hl opt">:=</span><span class="hl num">0</span><span class="hl opt">;</span>
   <span class="hl kwc">with</span> cache<span class="hl opt">[((</span><span class="hl kwb">cardinal</span><span class="hl opt">(</span>boardvec<span class="hl opt">)*</span>
              <span class="hl opt">(</span><span class="hl kwb">cardinal</span><span class="hl opt">(</span>placedpieces<span class="hl opt">)</span> <span class="hl com">{shl 3}</span> <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">)</span>
              <span class="hl kwa">xor</span> row <span class="hl kwa">shl</span> <span class="hl num">5</span><span class="hl opt">))</span> <span class="hl kwa">mod</span> <span class="hl num">131071</span><span class="hl opt">]</span> <span class="hl kwc">do</span>
     <span class="hl kwc">if</span> <span class="hl opt">(</span>krow<span class="hl opt">&lt;&gt;</span>row<span class="hl opt">)</span> <span class="hl kwa">or</span> <span class="hl opt">(</span><span class="hl kwd">bitvec</span><span class="hl opt">(</span><span class="hl kwb">cardinal</span><span class="hl opt">(</span>kpiecevec<span class="hl opt">))&lt;&gt;</span>placedpieces<span class="hl opt">)</span> <span class="hl kwa">or</span> <span class="hl opt">(</span>kboardvec<span class="hl opt">&lt;&gt;</span>boardvec<span class="hl opt">)</span> <span class="hl kwc">then</span>
       <span class="hl kwa">begin</span>
         <span class="hl kwc">with</span> g_okpieces<span class="hl opt">[</span>row<span class="hl opt">,</span>s_firstOne<span class="hl opt">[</span><span class="hl kwb">cardinal</span><span class="hl opt">([</span><span class="hl num">0</span><span class="hl opt">..</span>N_COL<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">]-</span>boardVec<span class="hl opt">)]]</span> <span class="hl kwc">do</span>
           <span class="hl kwc">for</span> ipiece<span class="hl opt">:=</span><span class="hl num">0</span> <span class="hl kwc">to</span> N_PIECE_TYPE<span class="hl opt">-</span><span class="hl num">1</span> <span class="hl kwc">do</span>
             <span class="hl kwc">if</span> <span class="hl kwa">not</span><span class="hl opt">(</span>ipiece <span class="hl kwa">in</span> placedpieces<span class="hl opt">)</span> <span class="hl kwc">then</span>
               <span class="hl kwc">for</span> iorient<span class="hl opt">:=</span><span class="hl num">1</span> <span class="hl kwc">to</span> npieces<span class="hl opt">[</span>ipiece<span class="hl opt">]</span> <span class="hl kwc">do</span> <span class="hl com">{start with 1, npieces[x] can be zero}</span>
                 <span class="hl kwa">begin</span>
                   piece<span class="hl opt">:=</span>pieceVec<span class="hl opt">[</span>iPiece<span class="hl opt">,</span>iOrient<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">];</span>
                   <span class="hl com">{check if piece conflicts with other pieces or if we get a bad island.}</span>
                   <span class="hl kwc">if</span> <span class="hl opt">(</span>piece<span class="hl opt">*</span>boardVec<span class="hl opt">=[])</span> <span class="hl kwa">and</span> <span class="hl opt">(</span><span class="hl kwd">has_bad_islands</span><span class="hl opt">(</span>boardVec<span class="hl opt">+</span>piece<span class="hl opt">,</span>row<span class="hl opt">)=</span>good<span class="hl opt">)</span> <span class="hl kwc">then</span>
                     <span class="hl kwa">begin</span>
                       m_curSoln<span class="hl opt">.</span><span class="hl kwd">pushPiece</span><span class="hl opt">(</span>piece<span class="hl opt">,</span>iPiece<span class="hl opt">,</span>row<span class="hl opt">);</span>
                       <span class="hl com">{recurse or record solution}</span>
                       <span class="hl kwc">if</span> placedPieces<span class="hl opt">+[</span>ipiece<span class="hl opt">]&lt;&gt;</span>ALL_PIECE_MASK <span class="hl kwc">then</span>
                         <span class="hl kwd">inc</span><span class="hl opt">(</span>gen_all_solutions<span class="hl opt">,</span><span class="hl kwd">gen_all_solutions</span><span class="hl opt">(</span>boardVec<span class="hl opt">+</span>piece<span class="hl opt">,</span>placedPieces<span class="hl opt">+[</span>ipiece<span class="hl opt">],</span>row<span class="hl opt">))</span>
                       <span class="hl kwc">else</span>
                         <span class="hl kwa">begin</span>
                           <span class="hl kwd">record_solution</span><span class="hl opt">(</span>m_curSoln<span class="hl opt">);</span>
                           <span class="hl kwd">inc</span><span class="hl opt">(</span>gen_all_solutions<span class="hl opt">);</span>
                         <span class="hl kwa">end</span><span class="hl opt">;</span>
                       m_curSoln<span class="hl opt">.</span><span class="hl kwd">popPiece</span><span class="hl opt">();</span>
                     <span class="hl kwa">end</span><span class="hl opt">;</span>
                <span class="hl kwa">end</span><span class="hl opt">;</span>
         <span class="hl kwc">if</span> gen_all_solutions<span class="hl opt">=</span><span class="hl num">0</span> <span class="hl kwc">then</span>
           <span class="hl kwa">begin</span>
             krow<span class="hl opt">:=</span>row<span class="hl opt">;</span>
             kpiecevec<span class="hl opt">:=</span><span class="hl kwb">word</span><span class="hl opt">(</span><span class="hl kwb">cardinal</span><span class="hl opt">(</span>placedpieces<span class="hl opt">));</span>
             kboardvec<span class="hl opt">:=</span>boardvec<span class="hl opt">;</span>
           <span class="hl kwa">end</span><span class="hl opt">;</span>
      <span class="hl kwa">end</span><span class="hl opt">;</span>
<span class="hl kwa">end</span><span class="hl opt">;</span>

<span class="hl kwa">begin</span>
   <span class="hl kwc">if</span> paramcount <span class="hl opt">&gt;</span> <span class="hl num">2</span> <span class="hl kwc">then</span>
     <span class="hl kwd">halt</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">);</span> <span class="hl com">{spec says this is an error}</span>

   <span class="hl kwd">textrec</span><span class="hl opt">(</span>output<span class="hl opt">).</span>flushfunc<span class="hl opt">:=</span><span class="hl kwa">nil</span><span class="hl opt">;</span>

   gen_all_orientations<span class="hl opt">;</span>
   calc_always_bad<span class="hl opt">;</span>
   init_board<span class="hl opt">;</span>
   <span class="hl kwd">filldword</span><span class="hl opt">(</span>cache<span class="hl opt">,</span><span class="hl kwd">sizeof</span><span class="hl opt">(</span>cache<span class="hl opt">)</span> <span class="hl kwa">shr</span> <span class="hl num">2</span><span class="hl opt">,</span><span class="hl num">$ffffffff</span><span class="hl opt">);</span>
   <span class="hl kwd">gen_all_solutions</span><span class="hl opt">([], [],</span> <span class="hl num">0</span><span class="hl opt">);</span>

   <span class="hl kwd">writeln</span><span class="hl opt">(</span>m_nSoln<span class="hl opt">,</span><span class="hl str">' solutions found'</span><span class="hl opt">);</span>
   writeln<span class="hl opt">;</span>
   m_minSoln<span class="hl opt">.</span><span class="hl kwd">write</span><span class="hl opt">(</span>output<span class="hl opt">);</span>
   writeln<span class="hl opt">;</span>
   m_maxSoln<span class="hl opt">.</span><span class="hl kwd">write</span><span class="hl opt">(</span>output<span class="hl opt">);</span>
   writeln<span class="hl opt">;</span>
<span class="hl kwa">end</span><span class="hl opt">.</span>
