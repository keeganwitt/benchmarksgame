<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://benchmarksgameshootout.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * contributed by The Go Authors.</span>
<span class="hl com"> * modified by roger peppe</span>
<span class="hl com"> * </span>
<span class="hl com"> */</span>

<span class="hl kwa">package</span> main

<span class="hl kwa">import</span> <span class="hl opt">(</span>
   <span class="hl str">&quot;flag&quot;</span>
   <span class="hl str">&quot;fmt&quot;</span>
   <span class="hl str">&quot;strconv&quot;</span>
   <span class="hl str">&quot;sync&quot;</span>
<span class="hl opt">)</span>

<span class="hl kwa">const</span> <span class="hl opt">(</span>
   blue <span class="hl opt">=</span> <span class="hl kwb">iota</span>
   red
   yellow
   ncol
<span class="hl opt">)</span>

<span class="hl kwa">var</span> complement <span class="hl opt">= [...]</span><span class="hl kwb">int</span><span class="hl opt">{</span>
   red | red<span class="hl opt">&lt;&lt;</span><span class="hl num">2</span><span class="hl opt">:</span> red<span class="hl opt">,</span>
   red | yellow<span class="hl opt">&lt;&lt;</span><span class="hl num">2</span><span class="hl opt">:</span> blue<span class="hl opt">,</span>
   red | blue<span class="hl opt">&lt;&lt;</span><span class="hl num">2</span><span class="hl opt">:</span> yellow<span class="hl opt">,</span>
   yellow | red<span class="hl opt">&lt;&lt;</span><span class="hl num">2</span><span class="hl opt">:</span> blue<span class="hl opt">,</span>
   yellow | yellow<span class="hl opt">&lt;&lt;</span><span class="hl num">2</span><span class="hl opt">:</span> yellow<span class="hl opt">,</span>
   yellow | blue<span class="hl opt">&lt;&lt;</span><span class="hl num">2</span><span class="hl opt">:</span> red<span class="hl opt">,</span>
   blue | red<span class="hl opt">&lt;&lt;</span><span class="hl num">2</span><span class="hl opt">:</span> yellow<span class="hl opt">,</span>
   blue | yellow<span class="hl opt">&lt;&lt;</span><span class="hl num">2</span><span class="hl opt">:</span> red<span class="hl opt">,</span>
   blue | blue<span class="hl opt">&lt;&lt;</span><span class="hl num">2</span><span class="hl opt">:</span> blue<span class="hl opt">,</span>
<span class="hl opt">}</span>

<span class="hl kwa">var</span> colname <span class="hl opt">= [...]</span><span class="hl kwb">string</span><span class="hl opt">{</span>
   blue<span class="hl opt">:</span> <span class="hl str">&quot;blue&quot;</span><span class="hl opt">,</span>
   red<span class="hl opt">:</span> <span class="hl str">&quot;red&quot;</span><span class="hl opt">,</span>
   yellow<span class="hl opt">:</span> <span class="hl str">&quot;yellow&quot;</span><span class="hl opt">,</span>
<span class="hl opt">}</span>

<span class="hl slc">// information about the current state of a creature.</span>
<span class="hl kwa">type</span> info <span class="hl kwa">struct</span> <span class="hl opt">{</span>
   colour <span class="hl kwb">int</span> <span class="hl slc">// creature's current colour.</span>
   name   <span class="hl kwb">int</span> <span class="hl slc">// creature's name.</span>
<span class="hl opt">}</span>

<span class="hl slc">// if mate is nil, it indicates there's no creature currently waiting</span>
<span class="hl slc">// otherwise the creature's info is stored in info, and</span>
<span class="hl slc">// it is waiting to receive its mate's information on the mate channel.</span>
<span class="hl kwa">type</span> Place <span class="hl kwa">struct</span> <span class="hl opt">{</span>
   sync<span class="hl opt">.</span>Mutex
   n    <span class="hl kwb">int</span>         <span class="hl slc">// current number of encounters.</span>
   mate <span class="hl kwa">chan</span><span class="hl opt">&lt;-</span> info <span class="hl slc">// creature waiting when non-nil.</span>
   info info        <span class="hl slc">// info about creature waiting.</span>
<span class="hl opt">}</span>

<span class="hl slc">// result sent by each creature at the end of processing.</span>
<span class="hl kwa">type</span> result <span class="hl kwa">struct</span> <span class="hl opt">{</span>
   met  <span class="hl kwb">int</span>
   same <span class="hl kwb">int</span>
<span class="hl opt">}</span>

<span class="hl kwa">var</span> n <span class="hl opt">=</span> <span class="hl num">600</span>

<span class="hl kwa">func</span> <span class="hl kwd">main</span><span class="hl opt">() {</span>
   flag<span class="hl opt">.</span><span class="hl kwd">Parse</span><span class="hl opt">()</span>
   <span class="hl kwa">if</span> flag<span class="hl opt">.</span><span class="hl kwd">NArg</span><span class="hl opt">() &gt;</span> <span class="hl num">0</span> <span class="hl opt">{</span>
      n<span class="hl opt">,</span> _ <span class="hl opt">=</span> strconv<span class="hl opt">.</span><span class="hl kwd">Atoi</span><span class="hl opt">(</span>flag<span class="hl opt">.</span><span class="hl kwd">Arg</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">))</span>
   <span class="hl opt">}</span>

   <span class="hl kwa">for</span> c0 <span class="hl opt">:=</span> <span class="hl num">0</span><span class="hl opt">;</span> c0 <span class="hl opt">&lt;</span> ncol<span class="hl opt">;</span> c0<span class="hl opt">++ {</span>
      <span class="hl kwa">for</span> c1 <span class="hl opt">:=</span> <span class="hl num">0</span><span class="hl opt">;</span> c1 <span class="hl opt">&lt;</span> ncol<span class="hl opt">;</span> c1<span class="hl opt">++ {</span>
         fmt<span class="hl opt">.</span><span class="hl kwd">Printf</span><span class="hl opt">(</span><span class="hl str">&quot;%s + %s -&gt; %s</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> colname<span class="hl opt">[</span>c0<span class="hl opt">],</span> colname<span class="hl opt">[</span>c1<span class="hl opt">],</span> colname<span class="hl opt">[</span>complement<span class="hl opt">[</span>c0|c1<span class="hl opt">&lt;&lt;</span><span class="hl num">2</span><span class="hl opt">]])</span>
      <span class="hl opt">}</span>
   <span class="hl opt">}</span>
   fmt<span class="hl opt">.</span><span class="hl kwd">Print</span><span class="hl opt">(</span><span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">)</span>

   <span class="hl kwd">pallmall</span><span class="hl opt">([]</span><span class="hl kwb">int</span><span class="hl opt">{</span>blue<span class="hl opt">,</span> red<span class="hl opt">,</span> yellow<span class="hl opt">})</span>
   <span class="hl kwd">pallmall</span><span class="hl opt">([]</span><span class="hl kwb">int</span><span class="hl opt">{</span>blue<span class="hl opt">,</span> red<span class="hl opt">,</span> yellow<span class="hl opt">,</span> red<span class="hl opt">,</span> yellow<span class="hl opt">,</span> blue<span class="hl opt">,</span> red<span class="hl opt">,</span> yellow<span class="hl opt">,</span> red<span class="hl opt">,</span> blue<span class="hl opt">})</span>
<span class="hl opt">}</span>

<span class="hl kwa">func</span> <span class="hl kwd">pallmall</span><span class="hl opt">(</span>cols <span class="hl opt">[]</span><span class="hl kwb">int</span><span class="hl opt">) {</span>

   <span class="hl slc">// invariant: meetingplace always contains a value unless a creature</span>
   <span class="hl slc">// is currently dealing with it (whereupon it must put it back).</span>
   meetingplace <span class="hl opt">:=</span> <span class="hl kwb">new</span><span class="hl opt">(</span>Place<span class="hl opt">)</span>
   ended <span class="hl opt">:=</span> <span class="hl kwb">make</span><span class="hl opt">(</span><span class="hl kwa">chan</span> result<span class="hl opt">)</span>
   msg <span class="hl opt">:=</span> <span class="hl str">&quot;&quot;</span>
   <span class="hl kwa">for</span> i<span class="hl opt">,</span> col <span class="hl opt">:=</span> <span class="hl kwa">range</span> cols <span class="hl opt">{</span>
      <span class="hl kwa">go</span> <span class="hl kwd">creature</span><span class="hl opt">(</span>info<span class="hl opt">{</span>col<span class="hl opt">,</span> i<span class="hl opt">},</span> meetingplace<span class="hl opt">,</span> ended<span class="hl opt">)</span>
      msg <span class="hl opt">+=</span> <span class="hl str">&quot; &quot;</span> <span class="hl opt">+</span> colname<span class="hl opt">[</span>col<span class="hl opt">]</span>
   <span class="hl opt">}</span>
   fmt<span class="hl opt">.</span><span class="hl kwd">Println</span><span class="hl opt">(</span>msg<span class="hl opt">)</span>
   tot <span class="hl opt">:=</span> <span class="hl num">0</span>
   <span class="hl slc">// wait for all results</span>
   <span class="hl kwa">for</span> _ <span class="hl opt">=</span> <span class="hl kwa">range</span> <span class="hl opt">(</span>cols<span class="hl opt">) {</span>
      result <span class="hl opt">:= &lt;-</span>ended
      tot <span class="hl opt">+=</span> result<span class="hl opt">.</span>met
      fmt<span class="hl opt">.</span><span class="hl kwd">Printf</span><span class="hl opt">(</span><span class="hl str">&quot;%v%v</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> result<span class="hl opt">.</span>met<span class="hl opt">,</span> <span class="hl kwd">spell</span><span class="hl opt">(</span>result<span class="hl opt">.</span>same<span class="hl opt">,</span> <span class="hl kwb">true</span><span class="hl opt">))</span>
   <span class="hl opt">}</span>
   fmt<span class="hl opt">.</span><span class="hl kwd">Printf</span><span class="hl opt">(</span><span class="hl str">&quot;%v</span><span class="hl esc">\n\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> <span class="hl kwd">spell</span><span class="hl opt">(</span>tot<span class="hl opt">,</span> <span class="hl kwb">true</span><span class="hl opt">))</span>
<span class="hl opt">}</span>

<span class="hl slc">// in this function, variables ending in 0 refer to the local creature,</span>
<span class="hl slc">// variables ending in 1 to the creature we've met.</span>
<span class="hl kwa">func</span> <span class="hl kwd">creature</span><span class="hl opt">(</span>info0 info<span class="hl opt">,</span> m <span class="hl opt">*</span>Place<span class="hl opt">,</span> ended <span class="hl kwa">chan</span> result<span class="hl opt">) {</span>
   c0 <span class="hl opt">:=</span> <span class="hl kwb">make</span><span class="hl opt">(</span><span class="hl kwa">chan</span> info<span class="hl opt">)</span>
   met <span class="hl opt">:=</span> <span class="hl num">0</span>
   same <span class="hl opt">:=</span> <span class="hl num">0</span>
   <span class="hl kwa">for</span> <span class="hl opt">{</span>
      <span class="hl kwa">var</span> othername <span class="hl kwb">int</span>
      <span class="hl slc">// get access to rendez data and decide what to do.</span>
      m<span class="hl opt">.</span><span class="hl kwd">Lock</span><span class="hl opt">()</span>
      <span class="hl kwa">switch</span> <span class="hl opt">{</span>
      <span class="hl kwa">case</span> m<span class="hl opt">.</span>n <span class="hl opt">&gt;=</span> n<span class="hl opt">:</span>
         <span class="hl slc">// if no more meetings left, then send our result data and exit.</span>
         m<span class="hl opt">.</span><span class="hl kwd">Unlock</span><span class="hl opt">()</span>
         ended <span class="hl opt">&lt;-</span> result<span class="hl opt">{</span>met<span class="hl opt">,</span> same<span class="hl opt">}</span>
         <span class="hl kwa">return</span>

      <span class="hl kwa">case</span> m<span class="hl opt">.</span>mate <span class="hl opt">==</span> <span class="hl kwb">nil</span><span class="hl opt">:</span>
         <span class="hl slc">// no creature waiting wait for someone to meet us,</span>
         <span class="hl slc">// get their info and send our info in reply.</span>
         m<span class="hl opt">.</span>info <span class="hl opt">=</span> info0
         m<span class="hl opt">.</span>mate <span class="hl opt">=</span> c0
         m<span class="hl opt">.</span><span class="hl kwd">Unlock</span><span class="hl opt">()</span>
         info1 <span class="hl opt">:= &lt;-</span>c0
         othername <span class="hl opt">=</span> info1<span class="hl opt">.</span>name
         info0<span class="hl opt">.</span>colour <span class="hl opt">=</span> complement<span class="hl opt">[</span>info0<span class="hl opt">.</span>colour|info1<span class="hl opt">.</span>colour<span class="hl opt">&lt;&lt;</span><span class="hl num">2</span><span class="hl opt">]</span>

      <span class="hl kwa">default</span><span class="hl opt">:</span>
         <span class="hl slc">// another creature is waiting for us with its info</span>
         <span class="hl slc">// increment meeting count,</span>
         <span class="hl slc">// send them our info in reply.</span>
         mate <span class="hl opt">:=</span> m<span class="hl opt">.</span>mate
         m<span class="hl opt">.</span>n<span class="hl opt">++</span>
         m<span class="hl opt">.</span>mate <span class="hl opt">=</span> <span class="hl kwb">nil</span>
         info1 <span class="hl opt">:=</span> m<span class="hl opt">.</span>info
         m<span class="hl opt">.</span><span class="hl kwd">Unlock</span><span class="hl opt">()</span>
         mate <span class="hl opt">&lt;-</span> info0
         othername <span class="hl opt">=</span> info1<span class="hl opt">.</span>name
         info0<span class="hl opt">.</span>colour <span class="hl opt">=</span> complement<span class="hl opt">[</span>info0<span class="hl opt">.</span>colour|info1<span class="hl opt">.</span>colour<span class="hl opt">&lt;&lt;</span><span class="hl num">2</span><span class="hl opt">]</span>
      <span class="hl opt">}</span>
      <span class="hl kwa">if</span> othername <span class="hl opt">==</span> info0<span class="hl opt">.</span>name <span class="hl opt">{</span>
         same<span class="hl opt">++</span>
      <span class="hl opt">}</span>
      met<span class="hl opt">++</span>
   <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl kwa">var</span> digits <span class="hl opt">= [...]</span><span class="hl kwb">string</span><span class="hl opt">{</span><span class="hl str">&quot;zero&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;one&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;two&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;three&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;four&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;five&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;six&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;seven&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;eight&quot;</span><span class="hl opt">,</span> <span class="hl str">&quot;nine&quot;</span><span class="hl opt">}</span>

<span class="hl kwa">func</span> <span class="hl kwd">spell</span><span class="hl opt">(</span>n <span class="hl kwb">int</span><span class="hl opt">,</span> required <span class="hl kwb">bool</span><span class="hl opt">)</span> <span class="hl kwb">string</span> <span class="hl opt">{</span>
   <span class="hl kwa">if</span> n <span class="hl opt">==</span> <span class="hl num">0</span> <span class="hl opt">&amp;&amp; !</span>required <span class="hl opt">{</span>
      <span class="hl kwa">return</span> <span class="hl str">&quot;&quot;</span>
   <span class="hl opt">}</span>
   <span class="hl kwa">return</span> <span class="hl kwd">spell</span><span class="hl opt">(</span>n<span class="hl opt">/</span><span class="hl num">10</span><span class="hl opt">,</span> <span class="hl kwb">false</span><span class="hl opt">) +</span> <span class="hl str">&quot; &quot;</span> <span class="hl opt">+</span> digits<span class="hl opt">[</span>n<span class="hl opt">%</span><span class="hl num">10</span><span class="hl opt">]</span>
<span class="hl opt">}</span>
