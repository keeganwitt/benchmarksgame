<span class="hl slc"># The Computer Language Benchmarks Game</span>
<span class="hl slc"># http://benchmarksgame.alioth.debian.org</span>
<span class="hl slc"># Contributed by Rick Branson</span>
<span class="hl slc">#</span>
<span class="hl slc"># There is currently a bug in JRuby as of 11/16/2010 that causes</span>
<span class="hl slc"># Marshal to read IOs in a blocking manner, which will cause this</span>
<span class="hl slc"># script to hang.</span>

IS_THREADED <span class="hl opt">=</span> <span class="hl kwc">RUBY_PLATFORM</span> <span class="hl opt">==</span> <span class="hl str">&quot;java&quot;</span>

<span class="hl kwa">if</span> IS_THREADED
  <span class="hl kwa">require</span> <span class="hl str">&quot;fcntl&quot;</span>
<span class="hl kwa">end</span>

<span class="hl kwa">class</span> Worker
  
  attr_reader <span class="hl kwc">:reader</span>
  
  <span class="hl kwa">def</span> <span class="hl kwd">initialize</span><span class="hl opt">(</span>enum<span class="hl opt">,</span> index<span class="hl opt">,</span> total<span class="hl opt">, &amp;</span>block)
    <span class="hl kwb">&#64;enum</span>   <span class="hl opt">=</span> enum
    <span class="hl kwb">&#64;index</span>  <span class="hl opt">=</span> index
    <span class="hl kwb">&#64;total</span>  <span class="hl opt">=</span> total
    
    <span class="hl kwb">&#64;reader</span><span class="hl opt">,</span> <span class="hl kwb">&#64;writer</span> <span class="hl opt">=</span> IO<span class="hl opt">.</span>pipe
      
    <span class="hl kwa">if</span> IS_THREADED
      <span class="hl kwb">&#64;thread</span> <span class="hl opt">=</span> Thread<span class="hl opt">.</span>new <span class="hl kwa">do</span>
        <span class="hl kwa">self</span><span class="hl opt">.</span><span class="hl kwd">execute</span><span class="hl opt">(&amp;</span>block)
      <span class="hl kwa">end</span>
    <span class="hl kwa">else</span>
      <span class="hl kwb">&#64;p</span> <span class="hl opt">=</span> Process<span class="hl opt">.</span>fork <span class="hl kwa">do</span>
        <span class="hl kwb">&#64;reader</span><span class="hl opt">.</span>close
        <span class="hl kwa">self</span><span class="hl opt">.</span><span class="hl kwd">execute</span><span class="hl opt">(&amp;</span>block)
        <span class="hl kwb">&#64;writer</span><span class="hl opt">.</span>close
      <span class="hl kwa">end</span>
      
      <span class="hl kwb">&#64;writer</span><span class="hl opt">.</span>close
    <span class="hl kwa">end</span>
  <span class="hl kwa">end</span>
  
  <span class="hl kwa">def</span> <span class="hl kwd">execute</span><span class="hl opt">(&amp;</span>block)
    chk   <span class="hl opt">=</span> <span class="hl kwb">&#64;enum</span><span class="hl opt">.</span>size <span class="hl opt">/</span> <span class="hl kwb">&#64;total</span>
    
    <span class="hl opt">(</span><span class="hl num">0</span> <span class="hl opt">...</span> <span class="hl kwb">&#64;enum</span><span class="hl opt">.</span>size)<span class="hl opt">.</span><span class="hl kwd">step</span><span class="hl opt">(</span><span class="hl kwb">&#64;total</span>) <span class="hl kwa">do</span> <span class="hl opt">|</span>i<span class="hl opt">|</span>
      idx <span class="hl opt">=</span> i <span class="hl opt">+</span> <span class="hl kwb">&#64;index</span>
      d <span class="hl opt">=</span> <span class="hl kwb">&#64;enum</span><span class="hl opt">[</span>idx<span class="hl opt">]</span>
      <span class="hl kwd">to_parent</span><span class="hl opt">([</span>idx<span class="hl opt">,</span> <span class="hl kwa">yield</span><span class="hl opt">(</span>d)<span class="hl opt">]</span>) <span class="hl kwa">unless</span> d <span class="hl opt">==</span> <span class="hl kwa">nil</span>
    <span class="hl kwa">end</span>
  <span class="hl kwa">end</span>

  <span class="hl kwa">def</span> <span class="hl kwd">to_parent</span><span class="hl opt">(</span>msg)
    Marshal<span class="hl opt">.</span><span class="hl kwd">dump</span><span class="hl opt">(</span>msg<span class="hl opt">,</span> <span class="hl kwb">&#64;writer</span>)
  <span class="hl kwa">end</span>
  
  <span class="hl kwa">def self</span><span class="hl opt">.</span><span class="hl kwd">gather</span><span class="hl opt">(</span>workers)
    res <span class="hl opt">= []</span>
    ios <span class="hl opt">=</span> workers<span class="hl opt">.</span>map <span class="hl esc">{ |w| w.reader }</span>

    <span class="hl kwa">while</span> ios<span class="hl opt">.</span>size <span class="hl opt">&gt;</span> <span class="hl num">0</span> <span class="hl kwa">do</span>
      sr<span class="hl opt">,</span> sw<span class="hl opt">,</span> se <span class="hl opt">=</span> IO<span class="hl opt">.</span><span class="hl kwd">select</span><span class="hl opt">(</span>ios<span class="hl opt">,</span> <span class="hl kwa">nil</span><span class="hl opt">,</span> <span class="hl kwa">nil</span>)

      <span class="hl kwa">if</span> sr
        sr<span class="hl opt">.</span>each <span class="hl kwa">do</span> <span class="hl opt">|</span>io<span class="hl opt">|</span>
          <span class="hl kwa">begin</span>
            <span class="hl kwa">loop do</span>
              msg <span class="hl opt">=</span> Marshal<span class="hl opt">.</span><span class="hl kwd">load</span><span class="hl opt">(</span>io)          
              idx<span class="hl opt">,</span> content <span class="hl opt">=</span> msg
              res<span class="hl opt">[</span>idx<span class="hl opt">] =</span> content
            <span class="hl kwa">end</span>
          <span class="hl kwa">rescue</span> EOFError
            ios<span class="hl opt">.</span><span class="hl kwd">delete</span><span class="hl opt">(</span>io)
          <span class="hl kwa">end</span>
        <span class="hl kwa">end</span>
      <span class="hl kwa">end</span>
    <span class="hl kwa">end</span>
    
    Process<span class="hl opt">.</span>waitall
    res
  <span class="hl kwa">end</span>

  <span class="hl kwa">def self</span><span class="hl opt">.</span><span class="hl kwd">map</span><span class="hl opt">(</span>enum<span class="hl opt">,</span> worker_count <span class="hl opt">=</span> <span class="hl num">6</span><span class="hl opt">, &amp;</span>block)
    count <span class="hl opt">= [</span>enum<span class="hl opt">.</span>size<span class="hl opt">,</span> worker_count<span class="hl opt">].</span>min

    workers <span class="hl opt">= (</span><span class="hl num">0</span> <span class="hl opt">...</span> count)<span class="hl opt">.</span>map <span class="hl kwa">do</span> <span class="hl opt">|</span>idx<span class="hl opt">|</span>
      Worker<span class="hl opt">.</span><span class="hl kwd">new</span><span class="hl opt">(</span>enum<span class="hl opt">,</span> idx<span class="hl opt">,</span> count<span class="hl opt">, &amp;</span>block)
    <span class="hl kwa">end</span>

    Worker<span class="hl opt">.</span><span class="hl kwd">gather</span><span class="hl opt">(</span>workers)    
  <span class="hl kwa">end</span>
<span class="hl kwa">end</span>

<span class="hl kwa">def</span> <span class="hl kwd">eval_A_times_u</span><span class="hl opt">(</span>u)
  usz     <span class="hl opt">=</span> u<span class="hl opt">.</span>size
  urange  <span class="hl opt">= (</span><span class="hl num">0</span> <span class="hl opt">...</span> usz)
  umap    <span class="hl opt">=</span> urange<span class="hl opt">.</span>to_a
  
  Worker<span class="hl opt">.</span><span class="hl kwd">map</span><span class="hl opt">(</span>umap) <span class="hl kwa">do</span> <span class="hl opt">|</span>i<span class="hl opt">|</span>
    urange<span class="hl opt">.</span><span class="hl kwd">inject</span><span class="hl opt">(</span><span class="hl num">0</span>) <span class="hl kwa">do</span> <span class="hl opt">|</span>sum<span class="hl opt">,</span> j<span class="hl opt">|</span>
      sum <span class="hl opt">+= (</span><span class="hl num">1.0</span> <span class="hl kwc">/ ((i + j) * (i + j + 1) /</span> <span class="hl num">2</span> <span class="hl opt">+</span> i <span class="hl opt">+</span> <span class="hl num">1</span>)) <span class="hl opt">*</span> u<span class="hl opt">[</span>j<span class="hl opt">]</span>
    <span class="hl kwa">end</span>
  <span class="hl kwa">end</span>
<span class="hl kwa">end</span>

<span class="hl kwa">def</span> <span class="hl kwd">eval_At_times_u</span><span class="hl opt">(</span>u)
  usz     <span class="hl opt">=</span> u<span class="hl opt">.</span>size
  urange  <span class="hl opt">= (</span><span class="hl num">0</span> <span class="hl opt">...</span> usz)
  umap    <span class="hl opt">=</span> urange<span class="hl opt">.</span>to_a
  
  Worker<span class="hl opt">.</span><span class="hl kwd">map</span><span class="hl opt">(</span>umap) <span class="hl kwa">do</span> <span class="hl opt">|</span>i<span class="hl opt">|</span>
    urange<span class="hl opt">.</span><span class="hl kwd">inject</span><span class="hl opt">(</span><span class="hl num">0</span>) <span class="hl kwa">do</span> <span class="hl opt">|</span>sum<span class="hl opt">,</span> j<span class="hl opt">|</span>
      sum <span class="hl opt">+= (</span><span class="hl num">1.0</span> <span class="hl kwc">/ ((j + i) * (j + i + 1) /</span> <span class="hl num">2</span> <span class="hl opt">+</span> j <span class="hl opt">+</span> <span class="hl num">1</span>)) <span class="hl opt">*</span> u<span class="hl opt">[</span>j<span class="hl opt">]</span>      
    <span class="hl kwa">end</span>
  <span class="hl kwa">end</span>
<span class="hl kwa">end</span>

<span class="hl kwa">def</span> <span class="hl kwd">eval_AtA_times_u</span><span class="hl opt">(</span>u)
  <span class="hl kwd">eval_At_times_u</span><span class="hl opt">(</span><span class="hl kwd">eval_A_times_u</span><span class="hl opt">(</span>u))
<span class="hl kwa">end</span>

n <span class="hl opt">=</span> <span class="hl kwc">ARGV</span><span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">].</span>to_i
u <span class="hl opt">= [</span><span class="hl num">1</span><span class="hl opt">] *</span> n
v <span class="hl opt">=</span> <span class="hl kwa">nil</span>

<span class="hl num">10</span><span class="hl opt">.</span>times <span class="hl kwa">do</span>
  v <span class="hl opt">=</span> <span class="hl kwd">eval_AtA_times_u</span><span class="hl opt">(</span>u)
  u <span class="hl opt">=</span> <span class="hl kwd">eval_AtA_times_u</span><span class="hl opt">(</span>v)
<span class="hl kwa">end</span>

vBv <span class="hl opt">=</span> <span class="hl num">0</span>
vv  <span class="hl opt">=</span> <span class="hl num">0</span>

<span class="hl opt">(</span><span class="hl num">0</span> <span class="hl opt">...</span> n)<span class="hl opt">.</span>each <span class="hl kwa">do</span> <span class="hl opt">|</span>i<span class="hl opt">|</span>
  vBv <span class="hl opt">+=</span> u<span class="hl opt">[</span>i<span class="hl opt">] *</span> v<span class="hl opt">[</span>i<span class="hl opt">]</span>
  vv  <span class="hl opt">+=</span> v<span class="hl opt">[</span>i<span class="hl opt">] *</span> v<span class="hl opt">[</span>i<span class="hl opt">]</span>
<span class="hl kwa">end</span>

print <span class="hl str">&quot;%0.9f&quot;</span> <span class="hl opt">% (</span>Math<span class="hl opt">.</span><span class="hl kwd">sqrt</span><span class="hl opt">(</span>vBv <span class="hl opt">/</span> vv))<span class="hl opt">,</span> <span class="hl str">&quot;\n&quot;</span>
