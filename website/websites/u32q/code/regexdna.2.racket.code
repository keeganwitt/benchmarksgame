<span class="hl opt">#</span>lang racket<span class="hl opt">/</span>base

<span class="hl slc">;; The Computer Language Benchmarks Game</span>
<span class="hl slc">;; http://benchmarksgame.alioth.debian.org/</span>
<span class="hl slc">;;</span>
<span class="hl slc">;; Based on a version by by Anthony Borla</span>
<span class="hl slc">;; Parallelize by Sam Tobin-Hochstadt</span>

<span class="hl opt">(</span><span class="hl kwa">require</span> racket<span class="hl opt">/</span>port racket<span class="hl opt">/</span>place<span class="hl opt">)</span>

<span class="hl slc">;; -------------------------------</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> VARIANTS
  <span class="hl opt">'(#</span><span class="hl str">&quot;agggtaaa|tttaccct&quot;</span> <span class="hl opt">#</span><span class="hl str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span> <span class="hl opt">#</span><span class="hl str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span>
    <span class="hl opt">#</span><span class="hl str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span> <span class="hl opt">#</span><span class="hl str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span> <span class="hl opt">#</span><span class="hl str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span>
    <span class="hl opt">#</span><span class="hl str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span> <span class="hl opt">#</span><span class="hl str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span> <span class="hl opt">#</span><span class="hl str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span><span class="hl opt">))</span>


<span class="hl opt">(</span><span class="hl kwa">define</span> IUBS
  <span class="hl opt">'((#</span><span class="hl str">&quot;B&quot;</span> <span class="hl opt">#</span><span class="hl str">&quot;(c|g|t)&quot;</span><span class="hl opt">) (#</span><span class="hl str">&quot;D&quot;</span> <span class="hl opt">#</span><span class="hl str">&quot;(a|g|t)&quot;</span><span class="hl opt">) (#</span><span class="hl str">&quot;H&quot;</span> <span class="hl opt">#</span><span class="hl str">&quot;(a|c|t)&quot;</span><span class="hl opt">)</span>
    <span class="hl opt">(#</span><span class="hl str">&quot;K&quot;</span> <span class="hl opt">#</span><span class="hl str">&quot;(g|t)&quot;</span><span class="hl opt">) (#</span><span class="hl str">&quot;M&quot;</span> <span class="hl opt">#</span><span class="hl str">&quot;(a|c)&quot;</span><span class="hl opt">) (#</span><span class="hl str">&quot;N&quot;</span> <span class="hl opt">#</span><span class="hl str">&quot;(a|c|g|t)&quot;</span><span class="hl opt">)</span>
    <span class="hl opt">(#</span><span class="hl str">&quot;R&quot;</span> <span class="hl opt">#</span><span class="hl str">&quot;(a|g)&quot;</span><span class="hl opt">) (#</span><span class="hl str">&quot;S&quot;</span> <span class="hl opt">#</span><span class="hl str">&quot;(c|g)&quot;</span><span class="hl opt">) (#</span><span class="hl str">&quot;V&quot;</span> <span class="hl opt">#</span><span class="hl str">&quot;(a|c|g)&quot;</span><span class="hl opt">)</span>
    <span class="hl opt">(#</span><span class="hl str">&quot;W&quot;</span> <span class="hl opt">#</span><span class="hl str">&quot;(a|t)&quot;</span><span class="hl opt">) (#</span><span class="hl str">&quot;Y&quot;</span> <span class="hl opt">#</span><span class="hl str">&quot;(c|t)&quot;</span><span class="hl opt">)))</span>

<span class="hl slc">;; -------------------------------</span>

<span class="hl opt">(</span><span class="hl kwa">define</span> <span class="hl opt">(</span><span class="hl kwa">main</span> . _<span class="hl opt">)</span>
  <span class="hl slc">;; Load sequence and record its length</span>
  <span class="hl opt">(</span><span class="hl kwa">define</span> orig <span class="hl opt">(</span><span class="hl kwa">port-</span><span class="hl opt">&gt;</span>bytes<span class="hl opt">))</span>
  <span class="hl opt">(</span><span class="hl kwa">define</span> filtered <span class="hl opt">(</span><span class="hl kwa">regexp-replace</span><span class="hl opt">* #</span>rx<span class="hl opt">#</span><span class="hl str">&quot;(?:&gt;.*?</span><span class="hl esc">\n</span><span class="hl str">)|</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> orig <span class="hl opt">#</span><span class="hl str">&quot;&quot;</span><span class="hl opt">))</span>
  <span class="hl slc">;; Perform regexp counts</span>
  <span class="hl opt">(</span><span class="hl kwa">define</span> pls
    <span class="hl opt">(</span><span class="hl kwa">for</span><span class="hl opt">/</span>list <span class="hl opt">([</span>i <span class="hl opt">(</span><span class="hl kwa">in-list</span> VARIANTS<span class="hl opt">)])</span>
      <span class="hl opt">(</span><span class="hl kwa">define</span> p <span class="hl opt">(</span><span class="hl kwa">place</span> ch
                       <span class="hl opt">(</span><span class="hl kwa">define</span> seq <span class="hl opt">(</span><span class="hl kwa">place-channel-get</span> ch<span class="hl opt">))</span>
                       <span class="hl opt">(</span><span class="hl kwa">define</span> i <span class="hl opt">(</span><span class="hl kwa">place-channel-get</span> ch<span class="hl opt">))</span>
                       <span class="hl opt">(</span><span class="hl kwa">place-channel-put</span> ch <span class="hl opt">(</span><span class="hl kwa">length</span> <span class="hl opt">(</span><span class="hl kwa">regexp-match-positions</span><span class="hl opt">* (</span><span class="hl kwa">byte-regexp</span> i<span class="hl opt">)</span> seq<span class="hl opt">)))))</span>
      <span class="hl opt">(</span><span class="hl kwa">place-channel-put</span> p filtered<span class="hl opt">)</span>
      <span class="hl opt">(</span><span class="hl kwa">place-channel-put</span> p i<span class="hl opt">)</span>
      p<span class="hl opt">))</span>

  <span class="hl slc">;; Perform regexp replacements, and record sequence length</span>
  <span class="hl opt">(</span><span class="hl kwa">define</span> replaced
    <span class="hl opt">(</span><span class="hl kwa">for</span><span class="hl opt">/</span>fold <span class="hl opt">([</span>sequence filtered<span class="hl opt">]) ([</span>IUB IUBS<span class="hl opt">])</span>
      <span class="hl opt">(</span><span class="hl kwa">regexp-replace</span><span class="hl opt">* (</span><span class="hl kwa">byte-regexp</span> <span class="hl opt">(</span><span class="hl kwa">car</span> IUB<span class="hl opt">))</span> sequence <span class="hl opt">(</span><span class="hl kwa">cadr</span> IUB<span class="hl opt">))))</span>
  <span class="hl opt">(</span><span class="hl kwa">for</span> <span class="hl opt">([</span>p pls<span class="hl opt">] [</span>i VARIANTS<span class="hl opt">]) (</span><span class="hl kwa">printf</span> <span class="hl str">&quot;~a ~a</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> i <span class="hl opt">(</span><span class="hl kwa">place-channel-get</span> p<span class="hl opt">)))</span>

  <span class="hl slc">;; Print statistics</span>
  <span class="hl opt">(</span><span class="hl kwa">printf</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">~a</span><span class="hl esc">\n</span><span class="hl str">~a</span><span class="hl esc">\n</span><span class="hl str">~a</span><span class="hl esc">\n</span><span class="hl str">&quot;</span>
          <span class="hl opt">(</span><span class="hl kwa">bytes-length</span> orig<span class="hl opt">)</span>
          <span class="hl opt">(</span><span class="hl kwa">bytes-length</span> filtered<span class="hl opt">)</span>
          <span class="hl opt">(</span><span class="hl kwa">bytes-length</span> replaced<span class="hl opt">)))</span>
<span class="hl opt">(</span><span class="hl kwa">provide</span> main<span class="hl opt">)</span>
