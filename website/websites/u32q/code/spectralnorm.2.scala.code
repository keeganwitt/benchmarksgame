<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com">   contributed by Eric Willigers</span>
<span class="hl com">   based on Java version by The Anh Tran</span>
<span class="hl com">*/</span>

<span class="hl kwa">object</span> spectralnorm <span class="hl opt">{</span>
   <span class="hl kwa">val</span> nthread <span class="hl opt">=</span> Runtime<span class="hl opt">.</span>getRuntime<span class="hl opt">.</span>availableProcessors
   <span class="hl kwa">val</span> barrier <span class="hl opt">=</span> <span class="hl kwa">new</span> java<span class="hl opt">.</span>util<span class="hl opt">.</span>concurrent<span class="hl opt">.</span><span class="hl kwd">CyclicBarrier</span><span class="hl opt">(</span>nthread<span class="hl opt">)</span>

   <span class="hl kwa">def</span> <span class="hl kwd">main</span><span class="hl opt">(</span>args<span class="hl opt">:</span> Array<span class="hl opt">[</span>String<span class="hl opt">]) {</span>
      <span class="hl kwa">val</span> n <span class="hl opt">=</span> <span class="hl kwa">if</span> <span class="hl opt">(</span>args<span class="hl opt">.</span>length <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">)</span> Integer parseInt <span class="hl kwd">args</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">)</span>  <span class="hl kwa">else</span> <span class="hl num">1000</span>
      <span class="hl kwa">val</span> fmt <span class="hl opt">=</span> <span class="hl kwa">new</span> java<span class="hl opt">.</span>text<span class="hl opt">.</span><span class="hl kwd">DecimalFormat</span><span class="hl opt">(</span><span class="hl str">&quot;#.000000000&quot;</span><span class="hl opt">)</span>
      <span class="hl kwd">println</span><span class="hl opt">(</span>fmt format <span class="hl kwd">run</span><span class="hl opt">(</span>n<span class="hl opt">))</span>
   <span class="hl opt">}</span>

   <span class="hl kwa">def</span> <span class="hl kwd">run</span><span class="hl opt">(</span>n<span class="hl opt">:</span> Int<span class="hl opt">) = {</span>
      <span class="hl kwa">val</span> u <span class="hl opt">=</span> <span class="hl kwa">new</span> Array<span class="hl opt">[</span>Double<span class="hl opt">](</span>n<span class="hl opt">)</span>
      <span class="hl kwa">val</span> v <span class="hl opt">=</span> <span class="hl kwa">new</span> Array<span class="hl opt">[</span>Double<span class="hl opt">](</span>n<span class="hl opt">)</span>
      <span class="hl kwa">val</span> tmp <span class="hl opt">=</span> <span class="hl kwa">new</span> Array<span class="hl opt">[</span>Double<span class="hl opt">](</span>n<span class="hl opt">)</span>
      <span class="hl kwa">val</span> chunk <span class="hl opt">=</span> n <span class="hl opt">/</span> nthread
      <span class="hl kwa">var</span> vBv <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">.</span>
      <span class="hl kwa">var</span> vv <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">.</span>
      java<span class="hl opt">.</span>util<span class="hl opt">.</span>Arrays<span class="hl opt">.</span><span class="hl kwd">fill</span><span class="hl opt">(</span>u<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">.)</span>
      Array <span class="hl kwd">range</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> nthread<span class="hl opt">)</span> map <span class="hl opt">{</span> i <span class="hl opt">=&gt;</span>
         <span class="hl kwa">val</span> rbegin <span class="hl opt">=</span> i <span class="hl opt">*</span> chunk
         <span class="hl kwa">val</span> rend <span class="hl opt">=</span> <span class="hl kwa">if</span> <span class="hl opt">(</span>i <span class="hl opt">&lt; (</span>nthread <span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">))</span> rbegin <span class="hl opt">+</span> chunk <span class="hl kwa">else</span> n
         <span class="hl kwa">new</span> <span class="hl kwd">Approximate</span><span class="hl opt">(</span>u<span class="hl opt">,</span> v<span class="hl opt">,</span> tmp<span class="hl opt">,</span> rbegin<span class="hl opt">,</span> rend<span class="hl opt">)</span>         
      <span class="hl opt">}</span> foreach <span class="hl opt">{</span> a<span class="hl opt">=&gt;</span>
         a <span class="hl kwd">join</span><span class="hl opt">()</span>
         vBv <span class="hl opt">+=</span> a<span class="hl opt">.</span>m_vBv
         vv <span class="hl opt">+=</span> a<span class="hl opt">.</span>m_vv
      <span class="hl opt">}</span>
      Math <span class="hl kwd">sqrt</span><span class="hl opt">(</span>vBv<span class="hl opt">/</span>vv<span class="hl opt">)</span>
   <span class="hl opt">}</span>

   <span class="hl kwa">final class</span> <span class="hl kwd">Approximate</span><span class="hl opt">(</span>u<span class="hl opt">:</span> Array<span class="hl opt">[</span>Double<span class="hl opt">],</span> v<span class="hl opt">:</span> Array<span class="hl opt">[</span>Double<span class="hl opt">],</span> tmp<span class="hl opt">:</span> Array<span class="hl opt">[</span>Double<span class="hl opt">],</span> rbegin<span class="hl opt">:</span> Int<span class="hl opt">,</span> rend<span class="hl opt">:</span> Int<span class="hl opt">)</span> <span class="hl kwa">extends</span> Thread <span class="hl opt">{</span>
      <span class="hl kwa">var</span> m_vBv <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">.</span>
      <span class="hl kwa">var</span> m_vv <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">.</span>
      <span class="hl kwd">start</span><span class="hl opt">()</span>

      <span class="hl kwa">override def</span> <span class="hl kwd">run</span><span class="hl opt">() {</span>
         <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">&lt;-</span> <span class="hl num">0</span> until <span class="hl num">10</span><span class="hl opt">) {</span>
            <span class="hl kwd">MultiplyAtAv</span><span class="hl opt">(</span>u<span class="hl opt">,</span> tmp<span class="hl opt">,</span> v<span class="hl opt">)</span>
            <span class="hl kwd">MultiplyAtAv</span><span class="hl opt">(</span>v<span class="hl opt">,</span> tmp<span class="hl opt">,</span> u<span class="hl opt">)</span>            
         <span class="hl opt">}</span>
         <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">&lt;-</span> rbegin until rend<span class="hl opt">) {</span>
            m_vBv <span class="hl opt">+=</span> <span class="hl kwd">u</span><span class="hl opt">(</span>i<span class="hl opt">) *</span> <span class="hl kwd">v</span><span class="hl opt">(</span>i<span class="hl opt">)</span>
            m_vv  <span class="hl opt">+=</span> <span class="hl kwd">v</span><span class="hl opt">(</span>i<span class="hl opt">) *</span> <span class="hl kwd">v</span><span class="hl opt">(</span>i<span class="hl opt">)</span>
         <span class="hl opt">}</span>
      <span class="hl opt">}</span>

      <span class="hl kwc">&#64;inline</span>
      <span class="hl kwa">def</span> <span class="hl kwd">eval_A</span><span class="hl opt">(</span>i<span class="hl opt">:</span> Int<span class="hl opt">,</span> j<span class="hl opt">:</span> Int<span class="hl opt">) =</span> <span class="hl num">1.0</span> <span class="hl opt">/ ( ((</span>i<span class="hl opt">+</span>j<span class="hl opt">) * (</span>i<span class="hl opt">+</span>j<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">) &gt;&gt;&gt;</span> <span class="hl num">1</span><span class="hl opt">) +</span>i<span class="hl opt">+</span><span class="hl num">1</span> <span class="hl opt">)</span>

      <span class="hl kwa">def</span> <span class="hl kwd">MultiplyAv</span><span class="hl opt">(</span>v<span class="hl opt">:</span> Array<span class="hl opt">[</span>Double<span class="hl opt">],</span> Av<span class="hl opt">:</span> Array<span class="hl opt">[</span>Double<span class="hl opt">]) {</span>
         <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">&lt;-</span> rbegin until rend<span class="hl opt">) {</span>
            <span class="hl kwa">var</span> sum <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">.</span>
            <span class="hl kwa">var</span> j <span class="hl opt">=</span> <span class="hl num">0</span>
            <span class="hl kwa">while</span> <span class="hl opt">(</span>j <span class="hl opt">&lt;</span> v<span class="hl opt">.</span>length<span class="hl opt">) {</span>
               sum <span class="hl opt">+=</span> <span class="hl kwd">eval_A</span><span class="hl opt">(</span>i<span class="hl opt">,</span> j<span class="hl opt">) *</span> <span class="hl kwd">v</span><span class="hl opt">(</span>j<span class="hl opt">)</span>
               j <span class="hl opt">+=</span> <span class="hl num">1</span>
            <span class="hl opt">}</span>
            <span class="hl kwd">Av</span><span class="hl opt">(</span>i<span class="hl opt">) =</span> sum
         <span class="hl opt">}</span>
      <span class="hl opt">}</span>

      <span class="hl kwa">def</span> <span class="hl kwd">MultiplyAtv</span><span class="hl opt">(</span>v<span class="hl opt">:</span> Array<span class="hl opt">[</span>Double<span class="hl opt">],</span> Atv<span class="hl opt">:</span> Array<span class="hl opt">[</span>Double<span class="hl opt">]) {</span>
         <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">&lt;-</span> rbegin until rend<span class="hl opt">) {</span>
            <span class="hl kwa">var</span> sum <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">.</span>
            <span class="hl kwa">var</span> j <span class="hl opt">=</span> <span class="hl num">0</span>
            <span class="hl kwa">while</span> <span class="hl opt">(</span>j <span class="hl opt">&lt;</span> v<span class="hl opt">.</span>length<span class="hl opt">) {</span>
               sum <span class="hl opt">+=</span> <span class="hl kwd">eval_A</span><span class="hl opt">(</span>j<span class="hl opt">,</span> i<span class="hl opt">) *</span> <span class="hl kwd">v</span><span class="hl opt">(</span>j<span class="hl opt">)</span>
               j <span class="hl opt">+=</span> <span class="hl num">1</span>
            <span class="hl opt">}</span>
            <span class="hl kwd">Atv</span><span class="hl opt">(</span>i<span class="hl opt">) =</span> sum
         <span class="hl opt">}</span>
      <span class="hl opt">}</span>

      <span class="hl kwa">def</span> <span class="hl kwd">MultiplyAtAv</span><span class="hl opt">(</span>v<span class="hl opt">:</span> Array<span class="hl opt">[</span>Double<span class="hl opt">],</span> tmp<span class="hl opt">:</span> Array<span class="hl opt">[</span>Double<span class="hl opt">],</span> AtAv<span class="hl opt">:</span> Array<span class="hl opt">[</span>Double<span class="hl opt">]) {</span>
         <span class="hl kwd">MultiplyAv</span><span class="hl opt">(</span>v<span class="hl opt">,</span> tmp<span class="hl opt">)</span>
         barrier <span class="hl kwd">await</span><span class="hl opt">()</span>
         <span class="hl kwd">MultiplyAtv</span><span class="hl opt">(</span>tmp<span class="hl opt">,</span> AtAv<span class="hl opt">)</span>
         barrier <span class="hl kwd">await</span><span class="hl opt">()</span>
      <span class="hl opt">}</span>
   <span class="hl opt">}</span>
<span class="hl opt">}</span>
