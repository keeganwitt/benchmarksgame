<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">   contributed by Isaac Gouy, transliterated from Mike Pall's Lua program </span>
<span class="hl com">*/</span>

<span class="hl kwa">using</span> System<span class="hl opt">;</span>

<span class="hl kwa">class</span> FannkuchRedux
<span class="hl opt">{</span>
   <span class="hl kwa">public static</span> <span class="hl kwb">int</span><span class="hl opt">[]</span> <span class="hl kwd">fannkuch</span><span class="hl opt">(</span><span class="hl kwb">int</span> n<span class="hl opt">) {</span>
      <span class="hl kwb">int</span><span class="hl opt">[]</span> p <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwb">int</span><span class="hl opt">[</span>n<span class="hl opt">],</span> q <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwb">int</span><span class="hl opt">[</span>n<span class="hl opt">],</span> s <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwb">int</span><span class="hl opt">[</span>n<span class="hl opt">];</span> 
      <span class="hl kwb">int</span> sign <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">,</span> maxflips <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">,</span> sum <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">,</span> m <span class="hl opt">=</span> n<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">;</span>
      <span class="hl kwa">for</span><span class="hl opt">(</span><span class="hl kwb">int</span> i<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span> i<span class="hl opt">&lt;</span>n<span class="hl opt">;</span> i<span class="hl opt">++){</span> p<span class="hl opt">[</span>i<span class="hl opt">] =</span> i<span class="hl opt">;</span> q<span class="hl opt">[</span>i<span class="hl opt">] =</span> i<span class="hl opt">;</span> s<span class="hl opt">[</span>i<span class="hl opt">] =</span> i<span class="hl opt">; }</span>      
      <span class="hl kwa">do</span> <span class="hl opt">{</span>
         <span class="hl slc">// Copy and flip.</span>
         var q0 <span class="hl opt">=</span> p<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">];</span>                                     <span class="hl slc">// Cache 0th element.</span>
         <span class="hl kwa">if</span> <span class="hl opt">(</span>q0 <span class="hl opt">!=</span> <span class="hl num">0</span><span class="hl opt">){</span>
            <span class="hl kwa">for</span><span class="hl opt">(</span><span class="hl kwb">int</span> i<span class="hl opt">=</span><span class="hl num">1</span><span class="hl opt">;</span> i<span class="hl opt">&lt;</span>n<span class="hl opt">;</span> i<span class="hl opt">++)</span> q<span class="hl opt">[</span>i<span class="hl opt">] =</span> p<span class="hl opt">[</span>i<span class="hl opt">];</span>             <span class="hl slc">// Work on a copy.</span>
            var flips <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span>
            <span class="hl kwa">do</span> <span class="hl opt">{</span> 
               var qq <span class="hl opt">=</span> q<span class="hl opt">[</span>q0<span class="hl opt">];</span> 
               <span class="hl kwa">if</span> <span class="hl opt">(</span>qq <span class="hl opt">==</span> <span class="hl num">0</span><span class="hl opt">){</span>                                <span class="hl slc">// ... until 0th element is 0.</span>
                  sum <span class="hl opt">+=</span> sign<span class="hl opt">*</span>flips<span class="hl opt">;</span>
	          <span class="hl kwa">if</span> <span class="hl opt">(</span>flips <span class="hl opt">&gt;</span> maxflips<span class="hl opt">)</span> maxflips <span class="hl opt">=</span> flips<span class="hl opt">;</span>   <span class="hl slc">// New maximum?</span>
                  <span class="hl kwa">break</span><span class="hl opt">;</span> 
               <span class="hl opt">}</span> 
 	       q<span class="hl opt">[</span>q0<span class="hl opt">] =</span> q0<span class="hl opt">;</span> 
	       <span class="hl kwa">if</span> <span class="hl opt">(</span>q0 <span class="hl opt">&gt;=</span> <span class="hl num">3</span><span class="hl opt">){</span>
	          <span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">,</span> j <span class="hl opt">=</span> q0 <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">,</span> t<span class="hl opt">;</span>
                  <span class="hl kwa">do</span> <span class="hl opt">{</span> t <span class="hl opt">=</span> q<span class="hl opt">[</span>i<span class="hl opt">];</span> q<span class="hl opt">[</span>i<span class="hl opt">] =</span> q<span class="hl opt">[</span>j<span class="hl opt">];</span> q<span class="hl opt">[</span>j<span class="hl opt">] =</span> t<span class="hl opt">;</span> i<span class="hl opt">++;</span> j<span class="hl opt">--; }</span> <span class="hl kwa">while</span> <span class="hl opt">(</span>i <span class="hl opt">&lt;</span> j<span class="hl opt">);</span> 
               <span class="hl opt">}</span>
	       q0 <span class="hl opt">=</span> qq<span class="hl opt">;</span> flips<span class="hl opt">++;</span>
            <span class="hl opt">}</span> <span class="hl kwa">while</span> <span class="hl opt">(</span><span class="hl kwa">true</span><span class="hl opt">);</span> 
         <span class="hl opt">}</span>
         <span class="hl slc">// Permute.</span>
         <span class="hl kwa">if</span> <span class="hl opt">(</span>sign <span class="hl opt">==</span> <span class="hl num">1</span><span class="hl opt">){</span>
            var t <span class="hl opt">=</span> p<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">];</span> p<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">] =</span> p<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">];</span> p<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">] =</span> t<span class="hl opt">;</span> sign <span class="hl opt">= -</span><span class="hl num">1</span><span class="hl opt">;</span> <span class="hl slc">// Rotate 0&lt;-1.</span>
         <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span> 
            var t <span class="hl opt">=</span> p<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">];</span> p<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">] =</span> p<span class="hl opt">[</span><span class="hl num">2</span><span class="hl opt">];</span> p<span class="hl opt">[</span><span class="hl num">2</span><span class="hl opt">] =</span> t<span class="hl opt">;</span> sign <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span>  <span class="hl slc">// Rotate 0&lt;-1 and 0&lt;-1&lt;-2.</span>
            <span class="hl kwa">for</span><span class="hl opt">(</span><span class="hl kwb">int</span> i<span class="hl opt">=</span><span class="hl num">2</span><span class="hl opt">;</span> i<span class="hl opt">&lt;</span>n<span class="hl opt">;</span> i<span class="hl opt">++){</span> 
	       var sx <span class="hl opt">=</span> s<span class="hl opt">[</span>i<span class="hl opt">];</span>
	       <span class="hl kwa">if</span> <span class="hl opt">(</span>sx <span class="hl opt">!=</span> <span class="hl num">0</span><span class="hl opt">){</span> s<span class="hl opt">[</span>i<span class="hl opt">] =</span> sx<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">;</span> <span class="hl kwa">break</span><span class="hl opt">; }</span>
	       <span class="hl kwa">if</span> <span class="hl opt">(</span>i <span class="hl opt">==</span> m<span class="hl opt">)</span> <span class="hl kwa">return new</span> <span class="hl kwb">int</span><span class="hl opt">[]{</span>sum<span class="hl opt">,</span>maxflips<span class="hl opt">};</span>  <span class="hl slc">// Out of permutations.</span>
	       s<span class="hl opt">[</span>i<span class="hl opt">] =</span> i<span class="hl opt">;</span>
	       <span class="hl slc">// Rotate 0&lt;-...&lt;-i+1.</span>
	       t <span class="hl opt">=</span> p<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">];</span> <span class="hl kwa">for</span><span class="hl opt">(</span><span class="hl kwb">int</span> j<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span> j<span class="hl opt">&lt;=</span>i<span class="hl opt">;</span> j<span class="hl opt">++){</span> p<span class="hl opt">[</span>j<span class="hl opt">] =</span> p<span class="hl opt">[</span>j<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">]; }</span> p<span class="hl opt">[</span>i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">] =</span> t<span class="hl opt">;</span>
            <span class="hl opt">}</span>
         <span class="hl opt">}</span>
      <span class="hl opt">}</span> <span class="hl kwa">while</span> <span class="hl opt">(</span><span class="hl kwa">true</span><span class="hl opt">);</span>
   <span class="hl opt">}</span>

   <span class="hl kwa">static</span> <span class="hl kwb">void</span> <span class="hl kwd">Main</span><span class="hl opt">(</span><span class="hl kwb">string</span><span class="hl opt">[]</span> args<span class="hl opt">){</span>
      <span class="hl kwb">int</span> n <span class="hl opt">= (</span>args<span class="hl opt">.</span>Length <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">)</span> ? Int32<span class="hl opt">.</span><span class="hl kwd">Parse</span><span class="hl opt">(</span>args<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">]) :</span> <span class="hl num">7</span><span class="hl opt">;</span>
      var pf <span class="hl opt">=</span> <span class="hl kwd">fannkuch</span><span class="hl opt">(</span>n<span class="hl opt">);</span>
      Console<span class="hl opt">.</span><span class="hl kwd">Write</span><span class="hl opt">(</span><span class="hl str">&quot;{0}</span><span class="hl esc">\n</span><span class="hl str">Pfannkuchen({1}) = {2}</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> pf<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">],</span> n<span class="hl opt">,</span> pf<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">]);</span>
   <span class="hl opt">}</span>
<span class="hl opt">}</span>
