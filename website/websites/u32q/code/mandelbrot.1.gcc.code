<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"></span>
<span class="hl com">  contributed by Paolo Bonzini</span>
<span class="hl com">  further optimized by Jason Garrett-Glaser</span>
<span class="hl com">  pthreads added by Eckehard Berns</span>
<span class="hl com">  further optimized by Ryan Henszey</span>
<span class="hl com">  modified by Samy Al Bahra (use GCC atomic builtins)</span>
<span class="hl com">*/</span>

<span class="hl ppc">#include &lt;stdio.h&gt;</span>
<span class="hl ppc">#include &lt;stdlib.h&gt;</span>
<span class="hl ppc">#include &lt;pthread.h&gt;</span>

<span class="hl kwc">typedef</span> <span class="hl kwb">double</span> v2df <span class="hl kwd">__attribute__</span> <span class="hl opt">((</span><span class="hl kwd">vector_size</span><span class="hl opt">(</span><span class="hl num">16</span><span class="hl opt">)));</span> <span class="hl com">/* vector of two doubles */</span>
<span class="hl kwc">typedef</span> <span class="hl kwb">int</span> v4si <span class="hl kwd">__attribute__</span> <span class="hl opt">((</span><span class="hl kwd">vector_size</span><span class="hl opt">(</span><span class="hl num">16</span><span class="hl opt">)));</span> <span class="hl com">/* vector of four ints */</span>

<span class="hl slc">// 4 works best on a quiet machine at nice -20</span>
<span class="hl slc">// 8 on a noisy machine at default priority</span>
<span class="hl ppc">#define NWORKERS 8</span>

<span class="hl kwb">int</span> w<span class="hl opt">,</span> h<span class="hl opt">;</span>
v2df zero <span class="hl opt">= {</span> <span class="hl num">0.0</span><span class="hl opt">,</span> <span class="hl num">0.0</span> <span class="hl opt">};</span>
v2df four <span class="hl opt">= {</span> <span class="hl num">4.0</span><span class="hl opt">,</span> <span class="hl num">4.0</span> <span class="hl opt">};</span>
v2df nzero<span class="hl opt">;</span>
<span class="hl kwb">double</span> inverse_w<span class="hl opt">;</span>
<span class="hl kwb">double</span> inverse_h<span class="hl opt">;</span>

<span class="hl kwb">char</span> <span class="hl opt">*</span>whole_data<span class="hl opt">;</span>
<span class="hl kwb">int</span> y_pick<span class="hl opt">;</span>

<span class="hl kwb">static void</span> <span class="hl opt">*</span> <span class="hl kwd">worker</span><span class="hl opt">(</span><span class="hl kwb">void</span> <span class="hl opt">*</span>_args<span class="hl opt">) {</span>
    <span class="hl kwb">char</span> <span class="hl opt">*</span>data<span class="hl opt">;</span>
    <span class="hl kwb">double</span> x<span class="hl opt">,</span> y<span class="hl opt">;</span>
    <span class="hl kwb">int</span> bit_num<span class="hl opt">;</span>
    <span class="hl kwb">char</span> byte_acc <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>

    <span class="hl kwa">for</span> <span class="hl opt">(;;) {</span>
	y <span class="hl opt">=</span> <span class="hl kwd">__sync_fetch_and_add</span><span class="hl opt">(&amp;</span>y_pick<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">);</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>y <span class="hl opt">&gt;=</span> h<span class="hl opt">)</span>
            <span class="hl kwa">return</span> NULL<span class="hl opt">;</span>
        data <span class="hl opt">= &amp;</span>whole_data<span class="hl opt">[(</span>w <span class="hl opt">&gt;&gt;</span> <span class="hl num">3</span><span class="hl opt">) * (</span><span class="hl kwb">int</span><span class="hl opt">)</span>y<span class="hl opt">];</span>

        <span class="hl kwa">for</span><span class="hl opt">(</span>bit_num<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">,</span>x<span class="hl opt">=</span><span class="hl num">0</span><span class="hl opt">;</span>x<span class="hl opt">&lt;</span>w<span class="hl opt">;</span>x<span class="hl opt">+=</span><span class="hl num">2</span><span class="hl opt">)</span>
        <span class="hl opt">{</span>
            v2df Crv <span class="hl opt">= { (</span>x<span class="hl opt">+</span><span class="hl num">1.0</span><span class="hl opt">)*</span>inverse_w<span class="hl opt">-</span><span class="hl num">1.5</span><span class="hl opt">, (</span>x<span class="hl opt">)*</span>inverse_w<span class="hl opt">-</span><span class="hl num">1.5</span> <span class="hl opt">};</span>
            v2df Civ <span class="hl opt">= {</span> y<span class="hl opt">*</span>inverse_h<span class="hl opt">-</span><span class="hl num">1.0</span><span class="hl opt">,</span> y<span class="hl opt">*</span>inverse_h<span class="hl opt">-</span><span class="hl num">1.0</span> <span class="hl opt">};</span>
            v2df Zrv <span class="hl opt">= {</span> <span class="hl num">0.0</span><span class="hl opt">,</span> <span class="hl num">0.0</span> <span class="hl opt">};</span>
            v2df Ziv <span class="hl opt">= {</span> <span class="hl num">0.0</span><span class="hl opt">,</span> <span class="hl num">0.0</span> <span class="hl opt">};</span>
            v2df Trv <span class="hl opt">= {</span> <span class="hl num">0.0</span><span class="hl opt">,</span> <span class="hl num">0.0</span> <span class="hl opt">};</span>
            v2df Tiv <span class="hl opt">= {</span> <span class="hl num">0.0</span><span class="hl opt">,</span> <span class="hl num">0.0</span> <span class="hl opt">};</span>

            <span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
	    <span class="hl kwb">int</span> mask<span class="hl opt">;</span>
            <span class="hl kwa">do</span> <span class="hl opt">{</span>
                Ziv <span class="hl opt">= (</span>Zrv<span class="hl opt">*</span>Ziv<span class="hl opt">) + (</span>Zrv<span class="hl opt">*</span>Ziv<span class="hl opt">) +</span> Civ<span class="hl opt">;</span>
                Zrv <span class="hl opt">=</span> Trv <span class="hl opt">-</span> Tiv <span class="hl opt">+</span> Crv<span class="hl opt">;</span>
                Trv <span class="hl opt">=</span> Zrv <span class="hl opt">*</span> Zrv<span class="hl opt">;</span>
                Tiv <span class="hl opt">=</span> Ziv <span class="hl opt">*</span> Ziv<span class="hl opt">;</span>

                <span class="hl com">/* from mandelbrot C++ GNU g++ #5 program  */</span>
		v2df delta <span class="hl opt">= (</span>v2df<span class="hl opt">)</span><span class="hl kwd">__builtin_ia32_cmplepd</span><span class="hl opt">( (</span>Trv <span class="hl opt">+</span> Tiv<span class="hl opt">),</span> four <span class="hl opt">);</span>
		mask <span class="hl opt">=</span> <span class="hl kwd">__builtin_ia32_movmskpd</span><span class="hl opt">(</span>delta<span class="hl opt">);</span>

            <span class="hl opt">}</span> <span class="hl kwa">while</span> <span class="hl opt">(++</span>i <span class="hl opt">&lt;</span> <span class="hl num">50</span> <span class="hl opt">&amp;&amp; (</span>mask<span class="hl opt">));</span>

            byte_acc <span class="hl opt">&lt;&lt;=</span> <span class="hl num">2</span><span class="hl opt">;</span>
	    byte_acc <span class="hl opt">|=</span> mask<span class="hl opt">;</span>
            bit_num<span class="hl opt">+=</span><span class="hl num">2</span><span class="hl opt">;</span>

            <span class="hl kwa">if</span><span class="hl opt">(!(</span>bit_num<span class="hl opt">&amp;</span><span class="hl num">7</span><span class="hl opt">)) {</span>
                data<span class="hl opt">[(</span>bit_num<span class="hl opt">&gt;&gt;</span><span class="hl num">3</span><span class="hl opt">) -</span> <span class="hl num">1</span><span class="hl opt">] =</span> byte_acc<span class="hl opt">;</span>
                byte_acc <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
            <span class="hl opt">}</span>
        <span class="hl opt">}</span>

        <span class="hl kwa">if</span><span class="hl opt">(</span>bit_num<span class="hl opt">&amp;</span><span class="hl num">7</span><span class="hl opt">) {</span>
            byte_acc <span class="hl opt">&lt;&lt;= (</span><span class="hl num">8</span><span class="hl opt">-</span>w<span class="hl opt">%</span><span class="hl num">8</span><span class="hl opt">);</span>
            bit_num <span class="hl opt">+=</span> <span class="hl num">8</span><span class="hl opt">;</span>
            data<span class="hl opt">[</span>bit_num<span class="hl opt">&gt;&gt;</span><span class="hl num">3</span><span class="hl opt">] =</span> byte_acc<span class="hl opt">;</span>
            byte_acc <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span>
<span class="hl opt">}</span>


<span class="hl kwb">int</span> <span class="hl kwd">main</span> <span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span> <span class="hl opt">**</span>argv<span class="hl opt">)</span>
<span class="hl opt">{</span>
    pthread_t ids<span class="hl opt">[</span>NWORKERS<span class="hl opt">];</span>
    <span class="hl kwb">int</span> i<span class="hl opt">;</span>

    nzero <span class="hl opt">= -</span>zero<span class="hl opt">;</span>

    w <span class="hl opt">=</span> h <span class="hl opt">=</span> <span class="hl kwd">atoi</span><span class="hl opt">(</span>argv<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">]);</span>

    inverse_w <span class="hl opt">=</span> <span class="hl num">2.0</span> <span class="hl opt">/</span> w<span class="hl opt">;</span>
    inverse_h <span class="hl opt">=</span> <span class="hl num">2.0</span> <span class="hl opt">/</span> h<span class="hl opt">;</span>

    y_pick <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    whole_data <span class="hl opt">=</span> <span class="hl kwd">malloc</span><span class="hl opt">(</span>w <span class="hl opt">* (</span>w <span class="hl opt">&gt;&gt;</span> <span class="hl num">3</span><span class="hl opt">));</span>

    <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> NWORKERS<span class="hl opt">;</span> i<span class="hl opt">++)</span>
        <span class="hl kwd">pthread_create</span><span class="hl opt">(&amp;</span>ids<span class="hl opt">[</span>i<span class="hl opt">],</span> NULL<span class="hl opt">,</span> worker<span class="hl opt">,</span> NULL<span class="hl opt">);</span>
    <span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span> i <span class="hl opt">&lt;</span> NWORKERS<span class="hl opt">;</span> i<span class="hl opt">++)</span>
        <span class="hl kwd">pthread_join</span><span class="hl opt">(</span>ids<span class="hl opt">[</span>i<span class="hl opt">],</span> NULL<span class="hl opt">);</span>

    <span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;P4</span><span class="hl esc">\n</span><span class="hl str">%d %d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span>w<span class="hl opt">,</span>h<span class="hl opt">);</span>
    <span class="hl kwd">fwrite</span><span class="hl opt">(</span>whole_data<span class="hl opt">,</span> h<span class="hl opt">,</span> w <span class="hl opt">&gt;&gt;</span> <span class="hl num">3</span><span class="hl opt">,</span> stdout<span class="hl opt">);</span>

    <span class="hl kwd">free</span><span class="hl opt">(</span>whole_data<span class="hl opt">);</span>

    <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>
