<span class="hl sym">&lt;</span>?php
<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com">   http://shootout.alioth.debian.org/</span>
<span class="hl com">   contributed by Thomas GODART (based on Greg Buchholz's C program) </span>
<span class="hl com">   modified by Vincent NEGRIER (parallel workers) */</span>

<span class="hl kwa">function</span> <span class="hl kwd">compute_data</span><span class="hl sym">(</span><span class="hl kwc">$y_start</span><span class="hl sym">,</span> <span class="hl kwc">$y_end</span><span class="hl sym">)</span> 
<span class="hl sym">{</span>
   <span class="hl kwa">global</span> <span class="hl kwc">$w</span><span class="hl sym">,</span> <span class="hl kwc">$h</span><span class="hl sym">,</span> <span class="hl kwc">$iter</span><span class="hl sym">,</span> <span class="hl kwc">$limit2</span><span class="hl sym">;</span>
   
   <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwc">$y</span> <span class="hl sym">=</span> <span class="hl kwc">$y_start</span> <span class="hl sym">;</span> <span class="hl kwc">$y</span> <span class="hl sym">&lt;</span> <span class="hl kwc">$y_end</span> <span class="hl sym">; ++</span><span class="hl kwc">$y</span><span class="hl sym">)</span>
   <span class="hl sym">{</span>
      <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwc">$x</span> <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl sym">;</span> <span class="hl kwc">$x</span> <span class="hl sym">&lt;</span> <span class="hl kwc">$w</span> <span class="hl sym">; ++</span><span class="hl kwc">$x</span><span class="hl sym">)</span>
      <span class="hl sym">{</span>
         <span class="hl kwc">$Zr</span> <span class="hl sym">=</span> <span class="hl kwc">$Zi</span> <span class="hl sym">=</span> <span class="hl kwc">$Tr</span> <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> <span class="hl kwc">$Ti</span> <span class="hl sym">=</span> <span class="hl num">0.0</span><span class="hl sym">;</span>

         <span class="hl kwc">$Cr</span> <span class="hl sym">= (</span><span class="hl num">2.0</span> <span class="hl sym">*</span> <span class="hl kwc">$x</span> <span class="hl sym">/</span> <span class="hl kwc">$w</span> <span class="hl sym">-</span> <span class="hl num">1.5</span><span class="hl sym">);</span> <span class="hl kwc">$Ci</span> <span class="hl sym">= (</span><span class="hl num">2.0</span> <span class="hl sym">*</span> <span class="hl kwc">$y</span> <span class="hl sym">/</span> <span class="hl kwc">$h</span> <span class="hl sym">-</span> <span class="hl num">1.0</span><span class="hl sym">);</span>

         <span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwc">$i</span> <span class="hl sym">=</span> <span class="hl num">0</span> <span class="hl sym">;</span> <span class="hl kwc">$i</span> <span class="hl sym">&lt;</span> <span class="hl kwc">$iter</span> <span class="hl kwa">and</span> <span class="hl sym">(</span><span class="hl kwc">$Tr</span> <span class="hl sym">+</span> <span class="hl kwc">$Ti</span> <span class="hl sym">&lt;=</span> <span class="hl kwc">$limit2</span><span class="hl sym">) ; ++</span><span class="hl kwc">$i</span><span class="hl sym">)</span>
         <span class="hl sym">{</span>
            <span class="hl kwc">$Zi</span> <span class="hl sym">=</span> <span class="hl num">2.0</span> <span class="hl sym">*</span> <span class="hl kwc">$Zr</span> <span class="hl sym">*</span> <span class="hl kwc">$Zi</span> <span class="hl sym">+</span> <span class="hl kwc">$Ci</span><span class="hl sym">;</span>
            <span class="hl kwc">$Zr</span> <span class="hl sym">=</span> <span class="hl kwc">$Tr</span> <span class="hl sym">-</span> <span class="hl kwc">$Ti</span> <span class="hl sym">+</span> <span class="hl kwc">$Cr</span><span class="hl sym">;</span>
            <span class="hl kwc">$Tr</span> <span class="hl sym">=</span> <span class="hl kwc">$Zr</span> <span class="hl sym">*</span> <span class="hl kwc">$Zr</span><span class="hl sym">;</span>
            <span class="hl kwc">$Ti</span> <span class="hl sym">=</span> <span class="hl kwc">$Zi</span> <span class="hl sym">*</span> <span class="hl kwc">$Zi</span><span class="hl sym">;</span>
         <span class="hl sym">}</span>

         <span class="hl kwc">$byte_acc</span> <span class="hl sym">=</span> <span class="hl kwc">$byte_acc</span> <span class="hl sym">&lt;&lt;</span> <span class="hl num">1</span><span class="hl sym">;</span>
         <span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwc">$Tr</span> <span class="hl sym">+</span> <span class="hl kwc">$Ti</span> <span class="hl sym">&lt;=</span> <span class="hl kwc">$limit2</span><span class="hl sym">)</span> <span class="hl kwc">$byte_acc</span> <span class="hl sym">=</span> <span class="hl kwc">$byte_acc</span> <span class="hl sym">|</span> <span class="hl num">1</span><span class="hl sym">;</span>

         <span class="hl sym">++</span><span class="hl kwc">$bit_num</span><span class="hl sym">;</span>

         <span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwc">$bit_num</span> <span class="hl sym">===</span> <span class="hl num">8</span><span class="hl sym">)</span>
         <span class="hl sym">{</span>
            <span class="hl kwc">$out_buf</span> <span class="hl sym">.=</span> <span class="hl kwd">chr</span> <span class="hl sym">(</span><span class="hl kwc">$byte_acc</span><span class="hl sym">);</span>
            <span class="hl kwc">$byte_acc</span> <span class="hl sym">=</span> <span class="hl kwc">$bit_num</span> <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
         <span class="hl sym">}</span>
         <span class="hl kwa">else if</span> <span class="hl sym">(</span><span class="hl kwc">$x</span> <span class="hl sym">===</span> <span class="hl kwc">$w</span> <span class="hl sym">-</span> <span class="hl num">1</span><span class="hl sym">)</span>
         <span class="hl sym">{</span>
            <span class="hl kwc">$byte_acc</span> <span class="hl sym">=</span> <span class="hl kwc">$byte_acc</span> <span class="hl sym">&lt;&lt; (</span><span class="hl num">8</span> <span class="hl sym">-</span> <span class="hl kwc">$w</span> % <span class="hl num">8</span><span class="hl sym">);</span>
            <span class="hl kwc">$out_buf</span> <span class="hl sym">.=</span> <span class="hl kwd">chr</span> <span class="hl sym">(</span><span class="hl kwc">$byte_acc</span><span class="hl sym">);</span>
            <span class="hl kwc">$byte_acc</span> <span class="hl sym">=</span> <span class="hl kwc">$bit_num</span> <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
         <span class="hl sym">}</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span>
   <span class="hl kwa">return</span> <span class="hl kwc">$out_buf</span><span class="hl sym">;</span>
<span class="hl sym">}</span>

<span class="hl kwa">function</span> <span class="hl kwd">worker_exit</span><span class="hl sym">()</span>
<span class="hl sym">{</span>
   <span class="hl kwa">global</span> <span class="hl kwc">$data</span><span class="hl sym">;</span>

   <span class="hl kwa">echo</span> <span class="hl kwc">$data</span><span class="hl sym">;</span>
   <span class="hl kwa">exit</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">);</span>
<span class="hl sym">}</span>

<span class="hl kwa">function</span> <span class="hl kwd">master_wait</span><span class="hl sym">()</span>
<span class="hl sym">{</span>
   <span class="hl kwa">global</span> <span class="hl kwc">$n_workers</span><span class="hl sym">,</span> <span class="hl kwc">$workers</span><span class="hl sym">;</span>

   <span class="hl kwa">if</span> <span class="hl sym">(!--</span><span class="hl kwc">$n_workers</span><span class="hl sym">)</span>
   <span class="hl sym">{</span>
      <span class="hl kwa">foreach</span> <span class="hl sym">(</span><span class="hl kwc">$workers</span> <span class="hl kwa">as</span> <span class="hl kwc">$pid</span><span class="hl sym">)</span>
      <span class="hl sym">{</span>
         <span class="hl kwd">posix_kill</span><span class="hl sym">(</span><span class="hl kwc">$pid</span><span class="hl sym">,</span> SIGUSR1<span class="hl sym">);</span>
         <span class="hl kwd">pcntl_waitpid</span><span class="hl sym">(</span><span class="hl kwc">$pid</span><span class="hl sym">,</span> <span class="hl kwc">$status</span><span class="hl sym">);</span>
      <span class="hl sym">}</span>
      <span class="hl kwa">exit</span><span class="hl sym">(</span><span class="hl num">0</span><span class="hl sym">);</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl kwc">$n_workers</span> <span class="hl sym">=</span> <span class="hl num">8</span><span class="hl sym">;</span>
<span class="hl kwc">$workers</span> <span class="hl sym">=</span> <span class="hl kwa">array</span><span class="hl sym">();</span>
<span class="hl kwc">$m_pid</span> <span class="hl sym">=</span> <span class="hl kwd">posix_getpid</span><span class="hl sym">();</span>
<span class="hl kwc">$w</span> <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> <span class="hl kwc">$h</span> <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> <span class="hl kwc">$bit_num</span> <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
<span class="hl kwc">$byte_acc</span> <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>
<span class="hl kwc">$i</span> <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> <span class="hl kwc">$iter</span> <span class="hl sym">=</span> <span class="hl num">50</span><span class="hl sym">;</span>
<span class="hl kwc">$x</span> <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> <span class="hl kwc">$y</span> <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> <span class="hl kwc">$limit2</span> <span class="hl sym">=</span> <span class="hl num">4</span><span class="hl sym">;</span>
<span class="hl kwc">$Zr</span> <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> <span class="hl kwc">$Zi</span> <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> <span class="hl kwc">$Cr</span> <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> <span class="hl kwc">$Ci</span> <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> <span class="hl kwc">$Tr</span> <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> <span class="hl kwc">$Ti</span> <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span>

<span class="hl sym">&#64;</span><span class="hl kwc">$h</span> <span class="hl sym">= (</span><span class="hl kwc">$argc</span> <span class="hl sym">==</span> <span class="hl num">2</span><span class="hl sym">)</span> ? <span class="hl kwc">$argv</span><span class="hl sym">[</span><span class="hl num">1</span><span class="hl sym">] :</span> <span class="hl num">600</span><span class="hl sym">;</span>
<span class="hl kwc">$w</span> <span class="hl sym">=</span> <span class="hl kwc">$h</span><span class="hl sym">;</span>
<span class="hl kwc">$worker_block</span> <span class="hl sym">=</span> <span class="hl kwc">$w</span> <span class="hl sym">/</span> <span class="hl kwc">$n_workers</span><span class="hl sym">;</span>

<span class="hl kwd">printf</span> <span class="hl sym">(</span><span class="hl str">&quot;P4</span><span class="hl esc">\n</span><span class="hl str">%d %d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl sym">,</span> <span class="hl kwc">$w</span><span class="hl sym">,</span> <span class="hl kwc">$h</span><span class="hl sym">);</span>

<span class="hl kwc">$out_buf</span> <span class="hl sym">=</span> <span class="hl str">&quot;&quot;</span><span class="hl sym">;</span>

<span class="hl kwa">for</span> <span class="hl sym">(</span><span class="hl kwc">$a</span> <span class="hl sym">=</span> <span class="hl num">0</span><span class="hl sym">;</span> <span class="hl kwc">$a</span> <span class="hl sym">&lt;</span> <span class="hl kwc">$n_workers</span><span class="hl sym">;</span> <span class="hl kwc">$a</span><span class="hl sym">++)</span> 
<span class="hl sym">{</span>
   <span class="hl kwc">$pid</span> <span class="hl sym">=</span> <span class="hl kwd">pcntl_fork</span><span class="hl sym">();</span>

   <span class="hl kwa">if</span> <span class="hl sym">(</span><span class="hl kwc">$pid</span> <span class="hl sym">===</span> <span class="hl num">0</span><span class="hl sym">)</span>
   <span class="hl sym">{</span>
      <span class="hl kwc">$data</span> <span class="hl sym">=</span> <span class="hl kwd">compute_data</span><span class="hl sym">(</span><span class="hl kwc">$a</span> <span class="hl sym">*</span> <span class="hl kwc">$worker_block</span><span class="hl sym">, ((</span><span class="hl kwc">$a</span> <span class="hl sym">+</span> <span class="hl num">1</span><span class="hl sym">) *</span> <span class="hl kwc">$worker_block</span><span class="hl sym">));</span>
      <span class="hl kwd">pcntl_signal</span><span class="hl sym">(</span>SIGUSR1<span class="hl sym">,</span> <span class="hl str">&quot;worker_exit&quot;</span><span class="hl sym">);</span>
      <span class="hl kwd">posix_kill</span><span class="hl sym">(</span><span class="hl kwc">$m_pid</span><span class="hl sym">,</span> SIGUSR1<span class="hl sym">);</span>
      <span class="hl kwa">declare</span> <span class="hl sym">(</span>ticks<span class="hl sym">=</span><span class="hl num">1</span><span class="hl sym">)</span>
      <span class="hl sym">{</span>
         <span class="hl kwa">while</span> <span class="hl sym">(</span>true<span class="hl sym">)</span> <span class="hl kwd">sleep</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">);</span>
      <span class="hl sym">}</span>
   <span class="hl sym">}</span> 
   <span class="hl kwa">else</span>
   <span class="hl sym">{</span>
      <span class="hl kwc">$workers</span><span class="hl sym">[] =</span> <span class="hl kwc">$pid</span><span class="hl sym">;</span>
   <span class="hl sym">}</span>
<span class="hl sym">}</span>

<span class="hl kwd">pcntl_signal</span><span class="hl sym">(</span>SIGUSR1<span class="hl sym">,</span> <span class="hl str">&quot;master_wait&quot;</span><span class="hl sym">);</span>

<span class="hl kwa">declare</span> <span class="hl sym">(</span>ticks<span class="hl sym">=</span><span class="hl num">1</span><span class="hl sym">)</span>
<span class="hl sym">{</span>
   <span class="hl kwa">while</span> <span class="hl sym">(</span>true<span class="hl sym">)</span> <span class="hl kwd">sleep</span><span class="hl sym">(</span><span class="hl num">1</span><span class="hl sym">);</span>
<span class="hl sym">}</span>

?<span class="hl sym">&gt;</span>
