<p>Work Sharing and Work Stealing are two common approaches to parallelism. Both Work Sharing and Work Stealing should give better performance than approaches that rely strictly on OS thread primitives to synchronize on each and every thread handoff, because generally these approaches allow the OS thread to process the next work item submitted by that same OS thread, and in that case, no thread synchronization is required.</p>
<p>Work Stealing allows another OS thread to steal work from a thread that has work to steal (i.e. > 1 work item in its queue), while work sharing allows an OS thread to share work with other threads if that thread has more than one work item in its work queue.</p>
<p>In this case, work sharing and work stealing should provide very similar results, because it just so happens that there never is any extra work to share, or steal. Each virtual "thread" only submits one new work item (the next "thread" to receive the token), so <b>all the virtual "threads" end up executing on the same real OS thread</b>.</p>
<p>If a virtual "thread" were to pass more than one token, or if there were more than one token passer started at program startup, then you would see higher levels of concurrency with this task pool, as each token passer would execute independently of the others.</p>
